uint64_t sub_100C66668(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  if (!*(_BYTE *)(result + 2785))
  {
    v4 = result;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(v4 + 2840);
      v7 = *a3;
      v8 = a3[1];
      *(_DWORD *)buf = 67240704;
      v20 = v6;
      v21 = 1026;
      v22 = v7;
      v23 = 1026;
      v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "priorSignalEnvironment,%{public}d,newSignalEnvironment,%{public}d,fidelity,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v9 = *(_DWORD *)(v4 + 2840);
      v10 = *a3;
      v11 = a3[1];
      v14[0] = 67240704;
      v14[1] = v9;
      v15 = 1026;
      v16 = v10;
      v17 = 1026;
      v18 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "priorSignalEnvironment,%{public}d,newSignalEnvironment,%{public}d,fidelity,%{public}d", v14, 20);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedSignalEnvironmentNotification(const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_100EAE05C((int *)(v4 + 2816), *a3);
    result = *(_QWORD *)(v4 + 2408);
    if (result)
    {
      sub_1001D4260((_QWORD *)result, *(_BYTE *)(v4 + 2831) == 0);
      result = *(_QWORD *)(v4 + 2408);
      *(_DWORD *)(v4 + 2788) = *a3;
      if (result)
        return sub_10112D964(result, *(_QWORD *)a3);
    }
    else
    {
      *(_DWORD *)(v4 + 2788) = *a3;
    }
  }
  return result;
}

uint64_t sub_100C668A0(uint64_t a1, int *a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const char *v13;
  const void *v14;
  uint64_t result;
  NSObject *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  _BYTE v26[24];
  _BYTE buf[12];
  __int16 v28;
  double v29;

  v4 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(v4, kCTRegistrationStatusChangedNotification))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v6 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      v7 = sub_100B30608(v6, buf);
      v8 = sub_100B303DC();
      v9 = sub_100B309E0(v8);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v7;
      v28 = 2050;
      v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "device lost registration - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_16;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v10 = qword_1022A0028;
    v11 = sub_1005FECEC();
    v12 = sub_100B303DC();
    *(_DWORD *)v26 = 134349312;
    *(double *)&v26[4] = v11;
    *(_WORD *)&v26[12] = 2050;
    *(_QWORD *)&v26[14] = sub_100B309E0(v12);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "device lost registration - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", v26, 22, *(_OWORD *)v26, *(_QWORD *)&v26[16]);
    goto LABEL_21;
  }
  v14 = (const void *)sub_1001DEC98(a2);
  result = CFEqual(v14, kCTCallStatusChangeNotification);
  if (!(_DWORD)result)
    return result;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217C380);
  v16 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v17 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v18 = sub_100B30608(v17, buf);
    v19 = sub_100B303DC();
    v20 = sub_100B309E0(v19);
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v18;
    v28 = 2050;
    v29 = v20;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "device on active call - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v22 = qword_1022A0028;
    v23 = sub_1005FECEC();
    v24 = sub_100B303DC();
    *(_DWORD *)v26 = 134349312;
    *(double *)&v26[4] = v23;
    *(_WORD *)&v26[12] = 2050;
    *(_QWORD *)&v26[14] = sub_100B309E0(v24);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "device on active call - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", v26, 22, *(_OWORD *)v26, *(_QWORD *)&v26[16]);
LABEL_21:
    v25 = (char *)v13;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v13);
    if (v25 != buf)
      free(v25);
  }
LABEL_16:
  v21 = sub_100B303DC();
  *(_DWORD *)buf = 0;
  *(_QWORD *)buf = sub_100B30608(v21, buf);
  return sub_100C25D4C(a1 + 456, (double *)buf);
}

void sub_100C66C28(uint64_t a1, int *a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v30;

  if (*(_QWORD *)(a1 + 2408))
  {
    v5 = *a2;
    if ((*a2 - 1) < 3)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v6 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v7 = a3 + 8;
        if (*(char *)(a3 + 31) < 0)
          v7 = *(_QWORD *)(a3 + 8);
        *(_DWORD *)buf = 136315138;
        v30 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,locationApp backgrounded or terminated,%s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_10;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v19 = *(_QWORD *)(a3 + 8);
      v18 = a3 + 8;
      v17 = v19;
      if (*(char *)(v18 + 23) >= 0)
        v17 = v18;
      v27 = 136315138;
      v28 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,locationApp backgrounded or terminated,%s", (const char *)&v27);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedAppNotification(const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v20);
      if (v21 == buf)
        goto LABEL_10;
      goto LABEL_53;
    }
    if (v5 == 9 || v5 == 4)
    {
      v9 = (_QWORD *)(a3 + 8);
      if (!sub_1001F9A10(a1, (unsigned __int8 **)(a3 + 8)))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a3 + 31) >= 0)
            v14 = a3 + 8;
          else
            v14 = *(_QWORD *)(a3 + 8);
          *(_DWORD *)buf = 136315138;
          v30 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,locationApp is not foreground,%s", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_10;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        v25 = *(char *)(a3 + 31) >= 0 ? a3 + 8 : *(_QWORD *)(a3 + 8);
        v27 = 136315138;
        v28 = v25;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,locationApp is not foreground,%s", (const char *)&v27);
        v21 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedAppNotification(const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v26);
        if (v21 == buf)
          goto LABEL_10;
LABEL_53:
        free(v21);
LABEL_10:
        sub_1001D3B4C(a1, 0, 0);
        return;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a3 + 31) >= 0)
          v11 = a3 + 8;
        else
          v11 = *(_QWORD *)(a3 + 8);
        *(_DWORD *)buf = 136315138;
        v30 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,locationApp in foreground,%s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        if (*(char *)(a3 + 31) >= 0)
          v22 = a3 + 8;
        else
          v22 = *(_QWORD *)(a3 + 8);
        v27 = 136315138;
        v28 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,locationApp in foreground,%s", (const char *)&v27);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedAppNotification(const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      v12 = *(char *)(a3 + 31);
      if (v12 < 0)
      {
        if (*(_QWORD *)(a3 + 16) != 14)
        {
LABEL_45:
          v16 = 0;
LABEL_46:
          sub_1001D3B4C(a1, 1, v16);
          return;
        }
        v9 = (_QWORD *)*v9;
      }
      else if (v12 != 14)
      {
        goto LABEL_45;
      }
      v16 = *v9 == 0x6C7070612E6D6F63 && *(_QWORD *)((char *)v9 + 6) == 0x7370614D2E656C70;
      goto LABEL_46;
    }
  }
}

uint64_t sub_100C67194(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  int v5;

  v5 = a2;
  v2 = *(_QWORD *)(result + 2408);
  if (v2)
  {
    v3 = sub_100B303DC();
    LODWORD(v4) = 0;
    v4 = sub_100B30608(v3, &v4);
    return (*(uint64_t (**)(uint64_t, int *, double *))(*(_QWORD *)v2 + 72))(v2, &v5, &v4);
  }
  return result;
}

void sub_100C671EC(uint64_t a1, _QWORD *a2, double *a3, _BYTE *a4, _QWORD *a5)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;

  if (*a3 >= 0.0 && *a3 < 16.6666)
  {
    v10 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    *(double *)(a1 + 2752) = sub_100B30608(v10, buf);
    *(double *)(a1 + 2744) = *a3;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)a3;
      v13 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      v14 = sub_100B30608(v13, buf);
      v15 = sub_100B303DC();
      v16 = sub_100B309E0(v15);
      *(_DWORD *)buf = 134218496;
      v31 = v12;
      v32 = 2048;
      v33 = v14;
      v34 = 2048;
      v35 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "LocationController,updateVehicleSpeedFilter,vehicleSpeed,%.3f,now,%.3f,propagation_us,%.3f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v17 = qword_1022A0028;
      v18 = *(_QWORD *)a3;
      v19 = sub_1005FECEC();
      v20 = sub_100B303DC();
      v24 = 134218496;
      v25 = v18;
      v26 = 2048;
      v27 = v19;
      v28 = 2048;
      v29 = sub_100B309E0(v20);
      LODWORD(v23) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 2, "LocationController,updateVehicleSpeedFilter,vehicleSpeed,%.3f,now,%.3f,propagation_us,%.3f", COERCE_DOUBLE(&v24), v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::updateVehicleSpeedFilter(const CFAbsoluteTime &, const double &, BOOL &, double &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  sub_10117EF4C(a1 + 2536, a2, a3, a4, a5);
}

void sub_100C6746C(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  *(_BYTE *)(a1 + 2792) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10217C3E0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,isAirborne,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10217C3E0);
    v6[0] = 67240192;
    v6[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLMM,isAirborne,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::updateAirborneClientStatus(const BOOL)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_100C67618(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  *(_BYTE *)(a1 + 2481) = 0;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217C3A0);
  v1 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#cltr,backoff timer fired,allow region support queries.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,backoff timer fired,allow region support queries.", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::onGeoMapQueryBackoffTimer()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

id sub_100C677A0(uint64_t a1, double a2)
{
  id v4;
  NSObject *v6;
  char v7;
  NSObject *v8;
  id result;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[5];
  int v15;
  double v16;
  uint8_t buf[4];
  double v18;

  if (!*(_QWORD *)(a1 + 2488))
  {
    v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
    *(_QWORD *)(a1 + 2488) = v4;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100C67B04;
    v14[3] = &unk_10212ECA0;
    v14[4] = a1;
    objc_msgSend(v4, "setHandler:", v14);
  }
  if (a2 > 0.0 && a2 < 1.79769313e308)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v8 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#cltr,backoff timer set for %lf seconds", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      v15 = 134217984;
      v16 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "#cltr,backoff timer set for %lf seconds", COERCE_DOUBLE(&v15));
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::setGeoMapQueryBackoffTimer(double)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v7 = 1;
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v6 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#cltr,backoff timer disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "#cltr,backoff timer disabled", &v15, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::setGeoMapQueryBackoffTimer(double)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v7 = 0;
    a2 = 1.79769313e308;
  }
  result = objc_msgSend(*(id *)(a1 + 2488), "setNextFireDelay:", a2);
  *(_BYTE *)(a1 + 2481) = v7;
  return result;
}

uint64_t sub_100C67B04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 384))(*(_QWORD *)(a1 + 32));
}

void sub_100C67B14(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 2488))
  {
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 416))(a1, 1.79769313e308);
    v2 = *(void **)(a1 + 2488);
    *(_QWORD *)(a1 + 2424) = 0x4082C00000000000;
    *(_BYTE *)(a1 + 2481) = 0;
    if (v2)
    {

      *(_QWORD *)(a1 + 2488) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2424) = 0x4082C00000000000;
    *(_BYTE *)(a1 + 2481) = 0;
  }
}

void sub_100C67B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217C3A0);
  v5 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltr,Entered handler,flags,%{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v7 = 134349056;
    v8 = a3;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,Entered handler,flags,%{public}lu", &v7, 12);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= a3;
}

void sub_100C67D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD block[7];

  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(objc_msgSend(*(id *)(v4 + 8), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100C67DC4;
  block[3] = &unk_10215A170;
  v6 = *(_QWORD *)(a1 + 32);
  block[4] = a2;
  block[5] = v6;
  block[6] = v4;
  dispatch_async(v5, block);
}

void sub_100C67DC4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  int v20;
  id v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  __int16 v34;
  uint64_t v35;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(v2 + 2480) = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(uint64_t, double))(*(_QWORD *)v2 + 416))(v2, *(double *)(v2 + 2424));
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v3 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "code");
      v5 = objc_msgSend(*(id *)(a1 + 32), "domain");
      v6 = objc_msgSend(*(id *)(a1 + 32), "localizedDescription");
      v7 = *(_QWORD *)(v2 + 2424);
      *(_DWORD *)buf = 134349827;
      v29 = v4;
      v30 = 2114;
      v31 = v5;
      v32 = 2113;
      v33 = v6;
      v34 = 2048;
      v35 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#cltr,RunningTrackFlags query,error:%{public}lld (%{public}@) \"%{private}@\",setting backoff to,%.0lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      v12 = qword_10229FC58;
      v13 = objc_msgSend(*(id *)(a1 + 32), "code");
      v14 = objc_msgSend(*(id *)(a1 + 32), "domain");
      v15 = objc_msgSend(*(id *)(a1 + 32), "localizedDescription");
      v16 = *(_QWORD *)(v2 + 2424);
      v20 = 134349827;
      v21 = v13;
      v22 = 2114;
      v23 = v14;
      v24 = 2113;
      v25 = v15;
      v26 = 2048;
      v27 = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 16, "#cltr,RunningTrackFlags query,error:%{public}lld (%{public}@) \"%{private}@\",setting backoff to,%.0lf", &v20, 42);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)_block_invoke", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    *(_BYTE *)(v2 + 2481) = 1;
    v8 = *(double *)(v2 + 2424) + *(double *)(v2 + 2424);
    if (v8 > 86400.0)
      v8 = 86400.0;
    *(double *)(v2 + 2424) = v8;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 408))(v2);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v9 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 134349056;
      v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#cltr,Entered completionHandler,combinedAvailabilityFlags,%{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      v18 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v20 = 134349056;
      v21 = v18;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,Entered completionHandler,combinedAvailabilityFlags,%{public}lu", &v20, 12);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)_block_invoke", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 1)
      v11 = 256;
    else
      v11 = 257;
    *(_WORD *)(v2 + 2416) = v11;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 432))(v2);
  }
  sub_10077E598(*(void **)(v2 + 2432));
  sub_100D823A8((id *)(v2 + 2496));
}

uint64_t sub_100C68200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2464);
  if (result)
    return sub_1013A797C(result, a2, a3);
  return result;
}

void sub_100C68210(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 2464);
  if (v1)
  {
    sub_1013A76F8(v1);
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v2 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#cltr,cannot send GNSS turned off notification to TrackRunController,TrackRunController not instantiated", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "#cltr,cannot send GNSS turned off notification to TrackRunController,TrackRunController not instantiated", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLLocationFilterController::notifyGnssTurnedOff()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_100C683C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 2464);
  if (v2)
  {
    sub_1013A8E00(v2, a2);
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v3 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#cltr,cannot send unfiltered location to TrackRunController,TrackRunController not instantiated", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "#cltr,cannot send unfiltered location to TrackRunController,TrackRunController not instantiated", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLLocationFilterController::sendUnfilteredLocationToTrackRunController(const CLLocationProvider_Type::NotificationData &)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100C68580(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (*(_QWORD *)(a1 + 2464))
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v4 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_DWORD *)(a2 + 8);
      v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)buf = 134349569;
      v23 = v5;
      v24 = 1025;
      v25 = v6;
      v26 = 1025;
      v27 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltr,TrackRunHint,CLLocationFilterController,setTrackRunHint,mctime,%{public}.1lf,lane,%{private}d,notification,%{private}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      v9 = *(_QWORD *)a2;
      v10 = *(_DWORD *)(a2 + 8);
      v11 = *(_DWORD *)(a2 + 12);
      v16 = 134349569;
      v17 = v9;
      v18 = 1025;
      v19 = v10;
      v20 = 1025;
      v21 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,TrackRunHint,CLLocationFilterController,setTrackRunHint,mctime,%{public}.1lf,lane,%{private}d,notification,%{private}d", &v16, 24);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::setTrackRunHint(const CLTrackRunHint &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_1013A81E0(*(_QWORD *)(a1 + 2464), (uint64_t *)a2);
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v8 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#cltr,Warning,TrackRunHint,CLLocationFilterController not instantiated", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      LOWORD(v16) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,Warning,TrackRunHint,CLLocationFilterController not instantiated", &v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::setTrackRunHint(const CLTrackRunHint &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_100C688A4(_BYTE *a1)
{
  _BOOL4 v1;
  _BOOL4 v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t *v7;
  int v8;
  uint8_t buf[4];
  _BOOL4 v10;
  __int16 v11;
  _BOOL4 v12;

  if (a1[2417])
    v1 = a1[2416] == 0;
  else
    v1 = 0;
  if (a1[2419])
    v2 = a1[2418] != 0;
  else
    v2 = 0;
  if (v1 || v2)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v3 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v10 = v1;
      v11 = 1024;
      v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#cltr,disabling trackrun,is_unsupported_region,%d,is_unsupported_phone,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,disabling trackrun,is_unsupported_region,%d,is_unsupported_phone,%d", &v8);
LABEL_25:
      v7 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::updateTrackRunEnablementState() const", "%s\n", v4);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v5 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v10 = 0;
      v11 = 1024;
      v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltr,enabling trackrun,is_unsupported_region,%d,is_unsupported_phone,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,enabling trackrun,is_unsupported_region,%d,is_unsupported_phone,%d", &v8);
      goto LABEL_25;
    }
  }
  v6 = sub_100CF08FC();
  sub_100CF12BC(v6, !v1 && !v2);
}

void sub_100C68BB8(uint64_t a1, double a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 2808))
  {
    v2 = *(_QWORD *)(a1 + 2800);
    if (v2)
      sub_1017DBC78(v2, a2);
  }
}

_BYTE *sub_100C68BD0(_BYTE *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;

  if (result[2808])
  {
    v2 = *((_QWORD *)result + 350);
    if (v2)
    {
      sub_100270E34((uint64_t)v4, a2);
      sub_1017D1514(v2, (uint64_t)v4);
      result = v5;
      if (v5 == v4)
      {
        v3 = 4;
        result = v4;
      }
      else
      {
        if (!v5)
          return result;
        v3 = 5;
      }
      return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v3))();
    }
  }
  return result;
}

void sub_100C68C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100C68CB0(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  int v4;

  if (*(_BYTE *)(a1 + 2808))
  {
    v2 = *(_QWORD *)(a1 + 2800);
    if (v2)
    {
      v3 = *a2;
      v4 = *((_DWORD *)a2 + 4);
      sub_1017D0F98(v2, &v3);
    }
  }
}

void sub_100C68CF0(uint64_t a1, int *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _WORD v22[8];
  _QWORD v23[2];
  uint8_t buf[4];
  int v25;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
  v6 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
  {
    v7 = *a2;
    *(_DWORD *)buf = 67240192;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
    v14 = *a2;
    LODWORD(v23[0]) = 67240192;
    HIDWORD(v23[0]) = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,notification,%{public}d", v23, 8);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (!*(_QWORD *)(a1 + 2408))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
    v9 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,platform does not support MM", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
    LOWORD(v23[0]) = 0;
    LODWORD(v21) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,platform does not support MM", v23, v21);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v10);
LABEL_36:
    if (v11 != buf)
      free(v11);
    return;
  }
  if (*a2 == 2)
  {
    sub_100119F3C(v23);
    if (!sub_100006BB4(a3, "MapMatcherConfig", v23))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
      v8 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,map matcher config not available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
        v22[0] = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,map matcher config not available", v22, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
    sub_101130FEC(*(_QWORD *)(a1 + 2408), (uint64_t)v23);
    sub_10011A5A8(v23);
    return;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
  v12 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v13 = *a2;
    *(_DWORD *)buf = 67240192;
    v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMM,MA-OTA,invalid notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
    v17 = *a2;
    LODWORD(v23[0]) = 67240192;
    HIDWORD(v23[0]) = v17;
    LODWORD(v21) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,MA-OTA,invalid notification,%{public}d", v23, v21);
    v11 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLLocationFilterController::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v18);
    goto LABEL_36;
  }
}

void sub_100C69288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100C692AC(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100C692D8(id a1)
{
  qword_10229FC58 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_100C69304(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100C69330(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100C6935C()
{
  sub_1015A2E04(qword_102307428, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307428, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307440, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307440, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307458, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307458, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307470, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307470, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307488, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307488, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023074A0, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023074A0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023074B8, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023074B8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023074D0, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023074D0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023074E8, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023074E8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307500, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307500, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307518, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307518, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307530, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307530, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307548, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307548, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307560, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307560, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307578, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307578, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307590, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307590, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023075A8, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023075A8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023075C0, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023075C0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023075D8, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023075D8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023075F0, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023075F0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307608, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307608, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307620, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307620, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307638, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307638, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307650, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307650, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307668, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307668, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307680, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307680, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307698, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307698, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023076B0, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023076B0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023076C8, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023076C8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023076E0, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023076E0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023076F8, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023076F8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307710, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307710, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307728, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307728, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307740, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307740, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307758, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307758, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307770, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307770, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307788, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307788, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023077A0, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023077A0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023077B8, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023077B8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023077D0, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023077D0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023077E8, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023077E8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307800, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307800, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307818, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307818, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307830, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307830, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307848, "NumDaysLookbackForWorkouts");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307848, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307860, "[");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307860, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307878, "]");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307878, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307890, " ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307890, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023078A8, ";");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023078A8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023078C0, ", ");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023078C0, (void *)&_mh_execute_header);
}

void sub_100C69B58()
{
  NSObject *v0;
  int v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  int v20;
  uint8_t buf[8];
  std::__shared_weak_count *v22;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v0 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "FenceCal: init globals", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    LOWORD(v19) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: init globals", &v19, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiFenceCalculator::initStaticGlobals()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  sub_1001E4804(buf);
  v1 = sub_1001E4874(*(uint64_t *)buf, "WifiFenceCalculatorDebug", (BOOL *)&byte_1022FAAA8);
  v2 = v1;
  v3 = v22;
  if (!v22)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v2)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    if (!v1)
      goto LABEL_16;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = byte_1022FAAA8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FenceCal: Overriding WifiFenceCalculatorDebug =%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v19 = 67109120;
    v20 = byte_1022FAAA8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "FenceCal: Overriding WifiFenceCalculatorDebug =%d", &v19);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiFenceCalculator::initStaticGlobals()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
LABEL_16:
  sub_1001E4804(buf);
  v7 = sub_1001E4874(*(uint64_t *)buf, "WifiFenceCalculatorDebugVerbose", (BOOL *)&byte_102311408);
  v8 = v7;
  v9 = v22;
  if (!v22)
    goto LABEL_20;
  v10 = (unint64_t *)&v22->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8)
      return;
  }
  else
  {
LABEL_20:
    if (!v7)
      return;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v12 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = byte_102311408;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FenceCal: Overriding WifiFenceCalculatorDebugVerbose =%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v19 = 67109120;
    v20 = byte_102311408;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "FenceCal: Overriding WifiFenceCalculatorDebugVerbose =%d", &v19);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiFenceCalculator::initStaticGlobals()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
}

void sub_100C6A05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C6A07C(uint64_t a1, int a2, int a3)
{
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  *(_QWORD *)a1 = off_10217C410;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1009EF698(a1 + 32);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 392) = -1;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 472) = 1;
  *(_BYTE *)(a1 + 476) = 0;
  *(_DWORD *)(a1 + 480) = 1;
  *(_QWORD *)(a1 + 488) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 496) = a3;
  *(_DWORD *)(a1 + 500) = a2;
  pthread_once(&stru_1022FAAB0, sub_100C69B58);
  v6 = *(_DWORD *)(a1 + 496);
  if (v6 < 1)
  {
    v7 = 4;
  }
  else
  {
    if ((v6 - 166) > 0xFFFFFF5A)
      goto LABEL_6;
    v7 = 165;
  }
  *(_DWORD *)(a1 + 496) = v7;
LABEL_6:
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_DWORD *)(a1 + 496);
    v10 = *(_DWORD *)(a1 + 500);
    *(_DWORD *)buf = 67175169;
    v22 = v9;
    v23 = 1025;
    v24 = 165;
    v25 = 1025;
    v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "FenceCal: fMaxChannelSetSize, %{private}d, kMaxChannel, %{private}d, fChannelFilter, 0x%{private}X", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v12 = *(_DWORD *)(a1 + 496);
    v13 = *(_DWORD *)(a1 + 500);
    v16[0] = 67175169;
    v16[1] = v12;
    v17 = 1025;
    v18 = 165;
    v19 = 1025;
    v20 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: fMaxChannelSetSize, %{private}d, kMaxChannel, %{private}d, fChannelFilter, 0x%{private}X", v16, 20);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "CLWifiFenceCalculator::CLWifiFenceCalculator(unsigned int, int)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return a1;
}

void sub_100C6A318(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = (void *)v1[56];
  if (v5)
  {
    v1[57] = v5;
    operator delete(v5);
  }
  sub_100C6A35C(v2);
  v6 = *v3;
  if (*v3)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C6A35C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[42];
  if (v2)
  {
    a1[43] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  return sub_1009EF7A4((uint64_t)a1);
}

_QWORD *sub_100C6A3A0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = off_10217C410;
  v2 = (void *)a1[56];
  if (v2)
  {
    a1[57] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[46];
  if (v3)
  {
    a1[47] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[43];
  if (v4)
  {
    a1[44] = v4;
    operator delete(v4);
  }
  sub_1009EF7A4((uint64_t)(a1 + 4));
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_100C6A41C(_QWORD *a1)
{
  sub_100C6A3A0(a1);
  operator delete();
}

uint64_t sub_100C6A440(_QWORD *a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  uint64_t v22;
  uint64_t v23;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;

  v3 = a1[56];
  v23 = a1[57];
  if (v3 == v23)
  {
    v6 = 0.0;
    v8 = 1.0;
LABEL_27:
    v20 = 0.0;
    goto LABEL_28;
  }
  v4 = 0;
  v5 = *a2;
  v6 = 0.0;
  v7 = 1.0;
  v8 = 1.0;
  v9 = 0.0;
  do
  {
    v10 = a1[43];
    v11 = a1[44];
    if (v10 != v11 && v5 != 0)
    {
      v13 = 0;
      v14 = v10 + 96;
      do
      {
        v15 = sub_100C6A72C(*(double *)(v3 + 32), *(double *)(v3 + 40), *(double *)(v14 - 88), *(double *)(v14 - 80))
            / 25.0;
        v16 = sub_100C495F0(v15);
        if (v16 >= 0.0)
        {
          v7 = v7 * (1.0 - v16);
          ++v13;
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v17 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 134349312;
            v30 = v15;
            v31 = 2050;
            v32 = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "bad CLStandardNormalDistribution(%{public}lf) = %{public}lf", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            v25 = 134349312;
            v26 = v15;
            v27 = 2050;
            v28 = v16;
            LODWORD(v22) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "bad CLStandardNormalDistribution(%{public}lf) = %{public}lf", &v25, v22);
            v19 = (uint8_t *)v18;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiFenceCalculator::calculateScore(Score &)", "%s\n", v18);
            if (v19 != buf)
              free(v19);
          }
        }
        v5 = *a2;
        if (v14 == v11)
          break;
        v14 += 96;
      }
      while (v13 < v5);
    }
    v8 = fmin(1.0 - v7, v8);
    v6 = fmax(1.0 - v7, v6);
    v9 = v9 + 1.0 - v7;
    ++v4;
    v3 += 64;
  }
  while (v3 != v23);
  if (!v4)
    goto LABEL_27;
  v20 = v9 / (double)v4;
LABEL_28:
  *((double *)a2 + 1) = (v8 + v20) * 0.5;
  *((double *)a2 + 2) = v8;
  *((double *)a2 + 3) = v6;
  *((double *)a2 + 4) = v20;
  return 1;
}

double sub_100C6A72C(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  __double2 v8;
  double v9;
  double v10;
  double v11;

  for (; a2 < 0.0; a2 = a2 + 360.0)
    ;
  for (; a4 < 0.0; a4 = a4 + 360.0)
    ;
  v4 = a1 * 0.0174532925;
  v5 = a3 * 0.0174532925;
  v6 = a2 * 0.0174532925;
  v7 = a4 * 0.0174532925;
  v8 = __sincos_stret(a1 * 0.0174532925);
  v9 = sqrt(v8.__sinval * -0.00669437999 * v8.__sinval + 1.0);
  v10 = (v5 - v4) * (6335439.33 / (v9 * (v9 * v9)) + 0.0);
  v11 = v8.__cosval * (6378137.0 / v9 + 0.0) * (v7 - v6);
  return sqrt(v11 * v11 + v10 * v10);
}

BOOL sub_100C6A808(uint64_t a1)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  NSObject *v24;
  const char *v25;
  std::string *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v41;
  std::string *v42;
  unint64_t v43;
  std::string *v44;
  std::string *v45;
  std::string v46;
  _BYTE v47[40];
  _BYTE __p[24];
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  uint64_t v57;
  std::string v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  unint64_t v65;
  __int16 v66;
  uint64_t v67;

  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v47[8] = _Q0;
  *(_OWORD *)&v47[24] = _Q0;
  v6 = *(_QWORD *)(a1 + 344);
  v5 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)v47 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 5);
  if (v5 == v6)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v24 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v58.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning fChosenAPs is empty", (uint8_t *)&v58, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v58, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, &v58, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning fChosenAPs is empty", __p, 2);
      v26 = (std::string *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::addScore()", "%s\n", v25);
      if (v26 != &v58)
        free(v26);
    }
  }
  else
  {
    sub_100C6A440((_QWORD *)a1, (unint64_t *)v47);
    if (byte_1022FAAA8)
      _ZF = byte_102311408 == 0;
    else
      _ZF = 1;
    if (!_ZF)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v9 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a1 + 55) >= 0)
          v10 = *(unsigned __int8 *)(a1 + 55);
        else
          v10 = *(_QWORD *)(a1 + 40);
        v11 = &v58;
        sub_100259584((uint64_t)&v58, v10 + 1);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v11 = (std::string *)v58.__r_.__value_.__r.__words[0];
        if (v10)
        {
          if (*(char *)(a1 + 55) >= 0)
            v12 = (const void *)(a1 + 32);
          else
            v12 = *(const void **)(a1 + 32);
          memmove(v11, v12, v10);
        }
        *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
        v13 = *(char *)(a1 + 79);
        if (v13 >= 0)
          v14 = (const std::string::value_type *)(a1 + 56);
        else
          v14 = *(const std::string::value_type **)(a1 + 56);
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(a1 + 79);
        else
          v15 = *(_QWORD *)(a1 + 64);
        v16 = std::string::append(&v58, v14, v15);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        v18 = __p;
        if (__p[23] < 0)
          v18 = *(_BYTE **)__p;
        v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 376) - *(_QWORD *)(a1 + 368)) >> 3) + 1;
        LODWORD(v58.__r_.__value_.__l.__data_) = 136382211;
        *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        WORD2(v58.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 6) = *(_QWORD *)&v47[8];
        HIWORD(v58.__r_.__value_.__r.__words[2]) = 2049;
        v59 = *(_QWORD *)&v47[16];
        v60 = 2049;
        v61 = *(_QWORD *)&v47[32];
        v62 = 2049;
        v63 = *(_QWORD *)&v47[24];
        v64 = 2049;
        v65 = v19;
        v66 = 2049;
        v67 = *(_QWORD *)v47;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "FenceCal: Adding score, fence, %{private}20s, score, %{private}.8lf, min, %{private}.8lf, avg, %{private}.8lf, max, %{private}.8lf, scores, %{private}lu, aps, %{private}zu", (uint8_t *)&v58, 0x48u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v58, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v41 = qword_1022A0068;
        sub_100914D68((const void **)(a1 + 32), &v46);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v46;
        else
          v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
        v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 376) - *(_QWORD *)(a1 + 368)) >> 3) + 1;
        *(_DWORD *)__p = 136382211;
        *(_QWORD *)&__p[4] = v42;
        *(_WORD *)&__p[12] = 2049;
        *(_QWORD *)&__p[14] = *(_QWORD *)&v47[8];
        *(_WORD *)&__p[22] = 2049;
        v49 = *(_QWORD *)&v47[16];
        v50 = 2049;
        v51 = *(_QWORD *)&v47[32];
        v52 = 2049;
        v53 = *(_QWORD *)&v47[24];
        v54 = 2049;
        v55 = v43;
        v56 = 2049;
        v57 = *(_QWORD *)v47;
        _os_log_send_and_compose_impl(2, 0, &v58, 1628, &_mh_execute_header, v41, 2, "FenceCal: Adding score, fence, %{private}20s, score, %{private}.8lf, min, %{private}.8lf, avg, %{private}.8lf, max, %{private}.8lf, scores, %{private}lu, aps, %{private}zu", __p, 72);
        v45 = v44;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::addScore()", "%s\n", (const char *)v45);
        if (v45 != &v58)
          free(v45);
      }
    }
    v20 = *(_QWORD *)(a1 + 376);
    v21 = *(_QWORD *)(a1 + 384);
    if (v20 >= v21)
    {
      v27 = *(_QWORD *)(a1 + 368);
      v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v27) >> 3);
      v29 = v28 + 1;
      if (v28 + 1 > 0x666666666666666)
        sub_100259694();
      v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v27) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x333333333333333)
        v31 = 0x666666666666666;
      else
        v31 = v29;
      if (v31)
        v32 = (char *)sub_100357184(a1 + 384, v31);
      else
        v32 = 0;
      v33 = &v32[40 * v28];
      v34 = &v32[40 * v31];
      v35 = *(_OWORD *)&v47[16];
      *(_OWORD *)v33 = *(_OWORD *)v47;
      *((_OWORD *)v33 + 1) = v35;
      *((_QWORD *)v33 + 4) = *(_QWORD *)&v47[32];
      v23 = v33 + 40;
      v37 = *(char **)(a1 + 368);
      v36 = *(char **)(a1 + 376);
      if (v36 != v37)
      {
        do
        {
          v38 = *(_OWORD *)(v36 - 40);
          v39 = *(_OWORD *)(v36 - 24);
          *((_QWORD *)v33 - 1) = *((_QWORD *)v36 - 1);
          *(_OWORD *)(v33 - 24) = v39;
          *(_OWORD *)(v33 - 40) = v38;
          v33 -= 40;
          v36 -= 40;
        }
        while (v36 != v37);
        v36 = *(char **)(a1 + 368);
      }
      *(_QWORD *)(a1 + 368) = v33;
      *(_QWORD *)(a1 + 376) = v23;
      *(_QWORD *)(a1 + 384) = v34;
      if (v36)
        operator delete(v36);
    }
    else
    {
      v22 = *(_OWORD *)&v47[16];
      *(_OWORD *)v20 = *(_OWORD *)v47;
      *(_OWORD *)(v20 + 16) = v22;
      *(_QWORD *)(v20 + 32) = *(_QWORD *)&v47[32];
      v23 = (char *)(v20 + 40);
    }
    *(_QWORD *)(a1 + 376) = v23;
  }
  return v5 != v6;
}

void sub_100C6AE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C6AE44(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  NSObject *v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  int v21;
  unsigned int v22;
  double v23;
  int *v24;
  NSObject *v25;
  int v26;
  _BYTE *v27;
  int *v28;
  _BYTE *v29;
  uint64_t v30;
  double v31;
  NSObject *v32;
  int v33;
  _BYTE *v34;
  int *v35;
  _BYTE *v36;
  uint64_t v37;
  double v38;
  __double2 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  unsigned int v48;
  NSObject *v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  _BYTE *v55;
  _BOOL4 v56;
  unsigned int v57;
  char **v58;
  unsigned int v59;
  int v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  int v69;
  NSObject *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  double *v79;
  char *v80;
  char *v81;
  double *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  const char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t i;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v109;
  uint64_t v111;
  double v112;
  double v114;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  NSObject *v120;
  unint64_t v121;
  uint64_t j;
  uint64_t v123;
  NSObject *v124;
  double Current;
  _BYTE *v126;
  uint64_t v127;
  double v128;
  _BYTE *v129;
  char *v130;
  char *v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  unsigned int v142;
  int *v143;
  double v144;
  int v145;
  _BYTE *v146;
  _BYTE *v147;
  std::string *v148;
  unint64_t v149;
  _OWORD *v150;
  unint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _OWORD *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  char *v167;
  char *v168;
  char *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  double v174;
  int v175;
  std::string::size_type v176;
  int v177;
  std::string *v178;
  std::string *v179;
  unint64_t v180;
  char *v181;
  char *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  int v196;
  unint64_t v197;
  double v198;
  double v199;
  int v200;
  unint64_t v201;
  double v202;
  double v203;
  const char *v204;
  char *v205;
  uint64_t v207;
  int v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  double v212;
  _BYTE *v213;
  char *v214;
  char *v215;
  unint64_t v216;
  const char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  std::string *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  int v228;
  _BYTE *v229;
  int *v230;
  _BYTE *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  int v236;
  _BYTE *v237;
  int *v238;
  _BYTE *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  int v244;
  _BYTE *v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  _BYTE *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  double v254;
  uint64_t v255;
  const char *v256;
  uint64_t v258;
  char **v260;
  int v261;
  double v262;
  int v263;
  NSObject *log;
  uint64_t loga;
  double v266;
  double v267;
  unsigned int v268;
  std::string::size_type v269;
  std::string v270;
  std::string v271;
  _BYTE __p[14];
  _BYTE v273[34];
  unint64_t v274;
  _BYTE v275[24];
  _BYTE buf[48];
  unint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  _BYTE v282[21];
  __int128 v283;
  _QWORD v284[4];
  int v285;

  v255 = a2;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    sub_100C3B9BC(a3, __p);
    v8 = v273[9];
    v9 = *(_BYTE **)__p;
    v11 = *(_QWORD *)(a3 + 72);
    v10 = *(_QWORD *)(a3 + 80);
    v12 = sub_10016F694(a3);
    v13 = __p;
    *(_DWORD *)buf = 136381699;
    if (v8 < 0)
      v13 = v9;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)&buf[24] = v10;
    *(_WORD *)&buf[32] = 2049;
    *(double *)&buf[34] = v12;
    *(_WORD *)&buf[42] = 1025;
    *(_DWORD *)&buf[44] = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "FenceCal: start calculate fence, %{private}-24s, C, center, %{private}.8lf, %{private}.8lf, radius, %{private}.8lf, isMonitorForExit, %{private}d", buf, 0x30u);
    if ((v273[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v207 = qword_1022A0068;
    sub_100C3B9BC(a3, v275);
    v208 = v275[23];
    v209 = *(_BYTE **)v275;
    v211 = *(_QWORD *)(a3 + 72);
    v210 = *(_QWORD *)(a3 + 80);
    v212 = sub_10016F694(a3);
    v213 = v275;
    *(_DWORD *)__p = 136381699;
    if (v208 < 0)
      v213 = v209;
    *(_QWORD *)&__p[4] = v213;
    *(_WORD *)&__p[12] = 2049;
    *(_QWORD *)v273 = v211;
    *(_WORD *)&v273[8] = 2049;
    *(_QWORD *)&v273[10] = v210;
    *(_WORD *)&v273[18] = 2049;
    *(double *)&v273[20] = v212;
    *(_WORD *)&v273[28] = 1025;
    *(_DWORD *)&v273[30] = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v207, 2, "FenceCal: start calculate fence, %{private}-24s, C, center, %{private}.8lf, %{private}.8lf, radius, %{private}.8lf, isMonitorForExit, %{private}d", __p, 48);
    v215 = v214;
    if ((v275[23] & 0x80000000) != 0)
      operator delete(*(void **)v275);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v215);
    if (v215 != buf)
      free(v215);
  }
  sub_1009EF698((uint64_t)buf);
  memset(v284, 0, sizeof(v284));
  v283 = 0u;
  v285 = -1;
  sub_10091478C(a1 + 32, (__int128 *)buf);
  v14 = a1 + 288;
  sub_1009EF82C(a1 + 280, *(_QWORD **)(a1 + 288));
  v15 = v279;
  *(_QWORD *)(a1 + 280) = v278;
  *(_QWORD *)(a1 + 288) = v15;
  v16 = v280;
  *(_QWORD *)(a1 + 296) = v280;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v14;
    v278 = &v279;
    v279 = 0;
    v280 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 280) = v14;
  }
  v17 = *(_OWORD *)v282;
  *(_OWORD *)(a1 + 304) = v281;
  *(_OWORD *)(a1 + 320) = v17;
  *(_QWORD *)(a1 + 333) = *(_QWORD *)&v282[13];
  v18 = (_QWORD *)(a1 + 344);
  v19 = *(void **)(a1 + 344);
  if (v19)
  {
    *(_QWORD *)(a1 + 352) = v19;
    operator delete(v19);
    *v18 = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
  }
  v260 = (char **)(a1 + 344);
  *(_OWORD *)v18 = v283;
  *(_QWORD *)(a1 + 360) = v284[0];
  v284[0] = 0;
  v283 = 0uLL;
  v20 = *(void **)(a1 + 368);
  v256 = (const char *)(a1 + 368);
  if (v20)
  {
    *(_QWORD *)(a1 + 376) = v20;
    operator delete(v20);
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    v20 = (void *)v283;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)&v284[1];
  *(_QWORD *)(a1 + 384) = v284[3];
  memset(&v284[1], 0, 24);
  *(_DWORD *)(a1 + 392) = v285;
  if (v20)
  {
    *((_QWORD *)&v283 + 1) = v20;
    operator delete(v20);
  }
  sub_1009EF7A4((uint64_t)buf);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
  *(_BYTE *)(a1 + 476) = a4;
  if (a4)
    v21 = 4;
  else
    v21 = 1;
  *(_DWORD *)(a1 + 480) = v21;
  sub_100C6CE90(a1 + 32, a3);
  v22 = *sub_10108CC94();
  v23 = sub_10016F694(a3);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a3 + 80);
  v24 = sub_10108CC94();
  if ((a4 & 1) != 0)
  {
    v23 = v23 + *((double *)v24 + 2);
  }
  else if (v23 >= *((double *)v24 + 1))
  {
    v23 = v23 - *((double *)sub_10108CC94() + 2);
  }
  if (v23 < *((double *)sub_10108CC94() + 4))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v25 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC(a3, buf);
      v26 = buf[23];
      v27 = *(_BYTE **)buf;
      v28 = sub_10108CC94();
      v29 = buf;
      v30 = *((_QWORD *)v28 + 4);
      if (v26 < 0)
        v29 = v27;
      *(_DWORD *)__p = 136380931;
      *(_QWORD *)&__p[4] = v29;
      *(_WORD *)&__p[12] = 2049;
      *(_QWORD *)v273 = v30;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "FenceCal: limit ePNO min fence size, fence, %{private}s, minRadius, %{private}.1lf", __p, 0x16u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v227 = qword_1022A0068;
      sub_100C3B9BC(a3, __p);
      v228 = v273[9];
      v229 = *(_BYTE **)__p;
      v230 = sub_10108CC94();
      v231 = __p;
      v232 = *((_QWORD *)v230 + 4);
      if (v228 < 0)
        v231 = v229;
      *(_DWORD *)v275 = 136380931;
      *(_QWORD *)&v275[4] = v231;
      *(_WORD *)&v275[12] = 2049;
      *(_QWORD *)&v275[14] = v232;
      LODWORD(v252) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v227, 2, "FenceCal: limit ePNO min fence size, fence, %{private}s, minRadius, %{private}.1lf", v275, v252);
      v234 = v233;
      if ((v273[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v234);
      if (v234 != buf)
        free(v234);
    }
    v23 = *((double *)sub_10108CC94() + 4);
  }
  v31 = v23;
  if (v23 >= *((double *)sub_10108CC94() + 3))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v32 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC(a3, buf);
      v33 = buf[23];
      v34 = *(_BYTE **)buf;
      v35 = sub_10108CC94();
      v36 = buf;
      v37 = *((_QWORD *)v35 + 3);
      if (v33 < 0)
        v36 = v34;
      *(_DWORD *)__p = 136380931;
      *(_QWORD *)&__p[4] = v36;
      *(_WORD *)&__p[12] = 2049;
      *(_QWORD *)v273 = v37;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "FenceCal: limit ePNO max fence size, fence, %{private}s, maxRadius, %{private}.1lf", __p, 0x16u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v235 = qword_1022A0068;
      sub_100C3B9BC(a3, __p);
      v236 = v273[9];
      v237 = *(_BYTE **)__p;
      v238 = sub_10108CC94();
      v239 = __p;
      v240 = *((_QWORD *)v238 + 3);
      if (v236 < 0)
        v239 = v237;
      *(_DWORD *)v275 = 136380931;
      *(_QWORD *)&v275[4] = v239;
      *(_WORD *)&v275[12] = 2049;
      *(_QWORD *)&v275[14] = v240;
      LODWORD(v252) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v235, 2, "FenceCal: limit ePNO max fence size, fence, %{private}s, maxRadius, %{private}.1lf", v275, v252);
      v242 = v241;
      if ((v273[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v242);
      if (v242 != buf)
        free(v242);
    }
    v31 = *((double *)sub_10108CC94() + 3);
  }
  v38 = *(double *)(a1 + 400);
  v39 = __sincos_stret(v38 * 0.0174532925);
  v40 = sqrt(v39.__sinval * -0.00669437999 * v39.__sinval + 1.0);
  v41 = v31 / (v39.__cosval * (6378137.0 / v40 + 0.0)) / 0.0174532925;
  v42 = v31 / (6335439.33 / (v40 * (v40 * v40)) + 0.0) / 0.0174532925;
  v43 = v38 + v42;
  v44 = *(double *)(a1 + 408);
  v45 = v44 - v41;
  *(double *)(a1 + 416) = v38 + v42;
  *(double *)(a1 + 424) = v44 - v41;
  v46 = v38 - v42;
  v47 = v44 + v41;
  *(double *)(a1 + 432) = v46;
  *(double *)(a1 + 440) = v47;
  if (v22 <= 1)
    v48 = 1;
  else
    v48 = v22;
  v267 = vabdd_f64(v43, v46) / (double)v48;
  v268 = v48;
  if (v267 <= 0.0 || (v266 = vabdd_f64(v45, v47) / (double)v48, v266 <= 0.0))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v49 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      sub_100C3B9BC(a3, __p);
      v50 = v273[9];
      v51 = *(_BYTE **)__p;
      v53 = *(_QWORD *)(a3 + 72);
      v52 = *(_QWORD *)(a3 + 80);
      v54 = sub_10016F694(a3);
      v55 = __p;
      *(_DWORD *)buf = 136381443;
      if (v50 < 0)
        v55 = v51;
      *(_QWORD *)&buf[4] = v55;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v53;
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)&buf[24] = v52;
      *(_WORD *)&buf[32] = 2049;
      *(double *)&buf[34] = v54;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "Invalid fence name, %{private}s, latitude, %{private}lf, longitude, %{private}lf, radius, %{private}lf", buf, 0x2Au);
      if ((v273[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v56 = sub_1001BFF7C(115, 0);
    v48 = v268;
    v266 = 0.00001;
    if (v56)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v243 = qword_1022A0068;
      sub_100C3B9BC(a3, v275);
      v244 = v275[23];
      v245 = *(_BYTE **)v275;
      v247 = *(_QWORD *)(a3 + 72);
      v246 = *(_QWORD *)(a3 + 80);
      v248 = sub_10016F694(a3);
      v249 = v275;
      *(_DWORD *)__p = 136381443;
      if (v244 < 0)
        v249 = v245;
      *(_QWORD *)&__p[4] = v249;
      *(_WORD *)&__p[12] = 2049;
      *(_QWORD *)v273 = v247;
      *(_WORD *)&v273[8] = 2049;
      *(_QWORD *)&v273[10] = v246;
      *(_WORD *)&v273[18] = 2049;
      *(double *)&v273[20] = v248;
      LODWORD(v252) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v243, 17, "Invalid fence name, %{private}s, latitude, %{private}lf, longitude, %{private}lf, radius, %{private}lf", __p, v252);
      v251 = v250;
      if ((v275[23] & 0x80000000) != 0)
        operator delete(*(void **)v275);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v251);
      if (v251 != buf)
        free(v251);
      v267 = 0.00001;
      v48 = v268;
    }
    else
    {
      v267 = 0.00001;
    }
  }
  v262 = v31;
  v57 = 0;
  v58 = (char **)(a1 + 448);
  do
  {
    v59 = 0;
    v60 = v57 * v48;
    do
    {
      v61 = *(double *)(a1 + 416) + -(double)v57 * v267;
      v62 = *(double *)(a1 + 424) + (double)v59 * v266;
      v63 = v61 - v267;
      v64 = v266 + v62;
      v65 = (v61 + v61 - v267) * 0.5;
      v66 = (v62 + v266 + v62) * 0.5;
      v67 = sub_100C6A72C(v65, v66, *(double *)(a1 + 400), *(double *)(a1 + 408));
      if (v67 / v262 < 1.0)
        v68 = 1.0 - v67 / v262;
      else
        v68 = 0.0;
      v69 = (int)(v68 * 4.5);
      if (byte_1022FAAA8 && byte_102311408)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v70 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)&buf[4] = v57;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v59;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v59 + v60;
          *(_WORD *)&buf[20] = 2048;
          *(double *)&buf[22] = v67;
          *(_WORD *)&buf[30] = 1024;
          *(_DWORD *)&buf[32] = (int)(v68 * 4.5);
          *(_WORD *)&buf[36] = 2048;
          *(double *)&buf[38] = v68;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "FenceCal: tile, y, %d, x, %d, index, %d, distanceFromCenter, %5.5lf, maxApsPerTile, %d, ApsFactor, %.5lf", buf, 0x2Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          *(_DWORD *)__p = 67110400;
          *(_DWORD *)&__p[4] = v57;
          *(_WORD *)&__p[8] = 1024;
          *(_DWORD *)&__p[10] = v59;
          *(_WORD *)v273 = 1024;
          *(_DWORD *)&v273[2] = v59 + v60;
          *(_WORD *)&v273[6] = 2048;
          *(double *)&v273[8] = v67;
          *(_WORD *)&v273[16] = 1024;
          *(_DWORD *)&v273[18] = (int)(v68 * 4.5);
          *(_WORD *)&v273[22] = 2048;
          *(double *)&v273[24] = v68;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: tile, y, %d, x, %d, index, %d, distanceFromCenter, %5.5lf, maxApsPerTile, %d, ApsFactor, %.5lf", __p, 46, v253, v254, v255, *(double *)&v256);
          v87 = (char *)v86;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v86);
          if (v87 != buf)
            free(v87);
        }
      }
      v71 = *(_QWORD *)(a1 + 456);
      v72 = *(_QWORD *)(a1 + 464);
      if (v71 >= v72)
      {
        v74 = (uint64_t)(v71 - (_QWORD)*v58) >> 6;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 58)
          sub_100259694();
        v76 = v72 - (_QWORD)*v58;
        if (v76 >> 5 > v75)
          v75 = v76 >> 5;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFC0)
          v77 = 0x3FFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
          v78 = (char *)sub_1002697F0(a1 + 464, v77);
        else
          v78 = 0;
        v79 = (double *)&v78[64 * v74];
        *v79 = v61;
        v79[1] = v62;
        v79[2] = v63;
        v79[3] = v64;
        v79[4] = v65;
        v79[5] = v66;
        *((_DWORD *)v79 + 12) = 0;
        *((_DWORD *)v79 + 13) = v69;
        v79[7] = v67;
        v81 = *(char **)(a1 + 448);
        v80 = *(char **)(a1 + 456);
        v82 = v79;
        if (v80 != v81)
        {
          do
          {
            v83 = *((_OWORD *)v80 - 4);
            v84 = *((_OWORD *)v80 - 3);
            v85 = *((_OWORD *)v80 - 1);
            *((_OWORD *)v82 - 2) = *((_OWORD *)v80 - 2);
            *((_OWORD *)v82 - 1) = v85;
            *((_OWORD *)v82 - 4) = v83;
            *((_OWORD *)v82 - 3) = v84;
            v82 -= 8;
            v80 -= 64;
          }
          while (v80 != v81);
          v80 = *v58;
        }
        v73 = (char *)(v79 + 8);
        *(_QWORD *)(a1 + 448) = v82;
        *(_QWORD *)(a1 + 456) = v79 + 8;
        *(_QWORD *)(a1 + 464) = &v78[64 * v77];
        if (v80)
          operator delete(v80);
      }
      else
      {
        *(double *)v71 = v61;
        *(double *)(v71 + 8) = v62;
        *(double *)(v71 + 16) = v63;
        *(double *)(v71 + 24) = v64;
        *(double *)(v71 + 32) = v65;
        *(double *)(v71 + 40) = v66;
        *(_DWORD *)(v71 + 48) = 0;
        *(_DWORD *)(v71 + 52) = v69;
        v73 = (char *)(v71 + 64);
        *(double *)(v71 + 56) = v67;
      }
      *(_QWORD *)(a1 + 456) = v73;
      ++v59;
    }
    while (v59 != v268);
    ++v57;
    v48 = v268;
  }
  while (v57 != v268);
  v89 = *(_QWORD *)(a1 + 8);
  v88 = *(_QWORD *)(a1 + 16);
  v90 = (void **)(a1 + 8);
  if (v89 == v88 || a5)
  {
    sub_100C3C344(a3);
    sub_101368128(v255, buf);
    v91 = *v90;
    if (*v90)
    {
      *(_QWORD *)(a1 + 16) = v91;
      operator delete(v91);
      *v90 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v92 = *(_QWORD *)buf;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)buf;
    v93 = *(_QWORD *)&buf[8];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&buf[8];
    v94 = v93;
    if (v92 != v93)
    {
      while (sub_1000AFA5C(*(_DWORD *)(v92 + 52)))
      {
        v92 += 96;
        if (v92 == v94)
        {
          v92 = v94;
          goto LABEL_108;
        }
      }
      if (v92 != v94)
      {
        for (i = v92 + 96; i != v94; i += 96)
        {
          if (sub_1000AFA5C(*(_DWORD *)(i + 52)))
          {
            v96 = *(_OWORD *)(i + 16);
            *(_OWORD *)v92 = *(_OWORD *)i;
            *(_OWORD *)(v92 + 16) = v96;
            v97 = *(_OWORD *)(i + 32);
            v98 = *(_OWORD *)(i + 48);
            v99 = *(_OWORD *)(i + 80);
            *(_OWORD *)(v92 + 64) = *(_OWORD *)(i + 64);
            *(_OWORD *)(v92 + 80) = v99;
            *(_OWORD *)(v92 + 32) = v97;
            *(_OWORD *)(v92 + 48) = v98;
            v92 += 96;
          }
        }
      }
    }
LABEL_108:
    v100 = *(_QWORD *)(a1 + 8);
    if (v92 != *(_QWORD *)(a1 + 16))
      *(_QWORD *)(a1 + 16) = v92;
    v101 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v92 - v100) >> 5));
    if (v92 == v100)
      v102 = 0;
    else
      v102 = v101;
    sub_100C72B5C(v100, (double *)v92, v102, 1);
    v89 = *(_QWORD *)(a1 + 8);
    v88 = *(_QWORD *)(a1 + 16);
  }
  if (v89 != v88)
  {
    v103 = *(double *)(a1 + 416);
    v104 = *(double *)(a1 + 424);
    v105 = *(double *)(a1 + 432);
    v106 = *(double *)(a1 + 440);
    while (1)
    {
      v107 = *(double *)(v89 + 8);
      if (v107 > v103 || v107 < v105)
        break;
      v109 = *(double *)(v89 + 16);
      if (v109 > v106 || v109 < v104)
        break;
      v89 += 96;
      if (v89 == v88)
        goto LABEL_141;
    }
    if (v89 != v88)
    {
      v111 = v89 + 96;
      if (v89 + 96 != v88)
      {
        do
        {
          v112 = *(double *)(v111 + 8);
          if (v112 <= v103 && v112 >= v105)
          {
            v114 = *(double *)(v111 + 16);
            if (v114 <= v106 && v114 >= v104)
            {
              v116 = *(_OWORD *)(v111 + 16);
              *(_OWORD *)v89 = *(_OWORD *)v111;
              *(_OWORD *)(v89 + 16) = v116;
              v117 = *(_OWORD *)(v111 + 32);
              v118 = *(_OWORD *)(v111 + 48);
              v119 = *(_OWORD *)(v111 + 80);
              *(_OWORD *)(v89 + 64) = *(_OWORD *)(v111 + 64);
              *(_OWORD *)(v89 + 80) = v119;
              *(_OWORD *)(v89 + 32) = v117;
              *(_OWORD *)(v89 + 48) = v118;
              v89 += 96;
            }
          }
          v111 += 96;
        }
        while (v111 != v88);
        v88 = *(_QWORD *)(a1 + 16);
      }
    }
    if (v89 != v88)
      *(_QWORD *)(a1 + 16) = v89;
  }
LABEL_141:
  sub_1006F9628(a1 + 8);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v120 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v121 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 5);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v121;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a5;
    _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "FenceCal: fetched, %{public}ld, APs, forceFetchingExpectedAps, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 5);
    *(_DWORD *)__p = 134349312;
    *(_QWORD *)&__p[4] = v216;
    *(_WORD *)&__p[12] = 1026;
    *(_DWORD *)v273 = a5;
    LODWORD(v252) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: fetched, %{public}ld, APs, forceFetchingExpectedAps, %{public}d", __p, v252);
    v218 = (char *)v217;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v217);
    if (v218 != buf)
      free(v218);
  }
  if (byte_1022FAAA8)
  {
    if (byte_102311408)
    {
      v123 = *(_QWORD *)(a1 + 8);
      for (j = *(_QWORD *)(a1 + 16); v123 != j; v123 += 96)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v124 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          Current = CFAbsoluteTimeGetCurrent();
          sub_100FC7034(v123, buf, Current);
          v126 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)__p = 136380675;
          *(_QWORD *)&__p[4] = v126;
          _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "FenceCal: expectedAp, %{private}s", __p, 0xCu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v127 = qword_1022A0068;
          v128 = CFAbsoluteTimeGetCurrent();
          sub_100FC7034(v123, __p, v128);
          v129 = __p;
          if (v273[9] < 0)
            v129 = *(_BYTE **)__p;
          *(_DWORD *)v275 = 136380675;
          *(_QWORD *)&v275[4] = v129;
          LODWORD(v252) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v127, 2, "FenceCal: expectedAp, %{private}s", v275, v252);
          v131 = v130;
          if ((v273[9] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v131);
          if (v131 != buf)
            free(v131);
        }
      }
    }
  }
  *(_QWORD *)&v275[8] = 0;
  *(_QWORD *)&v275[16] = 0;
  *(_QWORD *)v275 = &v275[8];
  v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 5);
  if (v132 <= 0xB3)
  {
    v133 = 0;
    v258 = 136316674;
    do
    {
      v135 = *(_QWORD *)(a1 + 8);
      v134 = *(_QWORD *)(a1 + 16);
      if (v132 >= 0xAAAAAAAAAAAAAAABLL * ((v134 - v135) >> 5))
        break;
      v263 = v133;
      while (v135 != v134)
      {
        v136 = (int)(vabdd_f64(*(double *)(v135 + 8), *(double *)(a1 + 416)) / v267);
        v137 = (int)(vabdd_f64(*(double *)(v135 + 16), *(double *)(a1 + 424)) / v266);
        v138 = v137 + v268 * v136;
        v139 = *(_QWORD *)(a1 + 448);
        if (v138 >= (*(_QWORD *)(a1 + 456) - v139) >> 6)
        {
          sub_101924080();
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLWifiFenceCalculator.mm", 427, "calculate");
          __break(1u);
        }
        *(_QWORD *)buf = v135;
        if (!*((_BYTE *)sub_100C748BC((uint64_t **)v275, (_QWORD *)v135, (uint64_t)&unk_101B9EB60, (_OWORD **)buf) + 128))
        {
          v140 = v139 + (v138 << 6);
          v142 = *(_DWORD *)(v140 + 48);
          v141 = (_DWORD *)(v140 + 48);
          v143 = v141 + 1;
          if (v142 < v141[1])
          {
            if (byte_1022FAAA8 && byte_102311408)
            {
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10217C430);
              log = qword_1022A0068;
              if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
              {
                v144 = CFAbsoluteTimeGetCurrent();
                sub_100FC7034(v135, __p, v144);
                v145 = v273[9];
                v146 = *(_BYTE **)__p;
                v261 = *v143;
                v270.__r_.__value_.__r.__words[0] = *(_QWORD *)v135;
                sub_1000C2150(&v270, &v271);
                v147 = __p;
                if (v145 < 0)
                  v147 = v146;
                v148 = &v271;
                if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v148 = (std::string *)v271.__r_.__value_.__r.__words[0];
                v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 5);
                *(_DWORD *)buf = v258;
                *(_QWORD *)&buf[4] = v147;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v261;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v137;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v136;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&buf[32] = v137 + v268 * v136;
                *(_WORD *)&buf[36] = 2080;
                *(_QWORD *)&buf[38] = v148;
                *(_WORD *)&buf[46] = 2048;
                v277 = v149;
                _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu", buf, 0x38u);
                if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v271.__r_.__value_.__l.__data_);
                if ((v273[9] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0060 != -1)
                  dispatch_once(&qword_1022A0060, &stru_10217C430);
                loga = qword_1022A0068;
                v174 = CFAbsoluteTimeGetCurrent();
                sub_100FC7034(v135, &v271, v174);
                v175 = SHIBYTE(v271.__r_.__value_.__r.__words[2]);
                v176 = v271.__r_.__value_.__r.__words[0];
                v177 = *v143;
                v269 = *(_QWORD *)v135;
                sub_1000C2150(&v269, &v270);
                v178 = &v271;
                if (v175 < 0)
                  v178 = (std::string *)v176;
                v179 = &v270;
                if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v179 = (std::string *)v270.__r_.__value_.__r.__words[0];
                v180 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 5);
                *(_DWORD *)__p = v258;
                *(_QWORD *)&__p[4] = v178;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)v273 = v177;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = v137;
                *(_WORD *)&v273[10] = 1024;
                *(_DWORD *)&v273[12] = v136;
                *(_WORD *)&v273[16] = 1024;
                *(_DWORD *)&v273[18] = v137 + v268 * v136;
                *(_WORD *)&v273[22] = 2080;
                *(_QWORD *)&v273[24] = v179;
                *(_WORD *)&v273[32] = 2048;
                v274 = v180;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, loga, 2, "FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu", __p, 56, v253, LODWORD(v254), v255, v256, v258);
                v182 = v181;
                if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v270.__r_.__value_.__l.__data_);
                if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v271.__r_.__value_.__l.__data_);
                sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v182);
                if (v182 != buf)
                  free(v182);
              }
            }
            ++*v141;
            *(_QWORD *)buf = v135;
            *((_BYTE *)sub_100C748BC((uint64_t **)v275, (_QWORD *)v135, (uint64_t)&unk_101B9EB60, (_OWORD **)buf) + 128) = 1;
            v150 = *(_OWORD **)(a1 + 352);
            v151 = *(_QWORD *)(a1 + 360);
            if ((unint64_t)v150 >= v151)
            {
              v157 = 0xAAAAAAAAAAAAAAABLL * (((char *)v150 - *v260) >> 5);
              v158 = v157 + 1;
              if (v157 + 1 > 0x2AAAAAAAAAAAAAALL)
                sub_100259694();
              v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v151 - (_QWORD)*v260) >> 5);
              if (2 * v159 > v158)
                v158 = 2 * v159;
              if (v159 >= 0x155555555555555)
                v160 = 0x2AAAAAAAAAAAAAALL;
              else
                v160 = v158;
              if (v160)
                v161 = (char *)sub_10067257C(a1 + 360, v160);
              else
                v161 = 0;
              v162 = &v161[96 * v157];
              v163 = *(_OWORD *)(v135 + 16);
              *(_OWORD *)v162 = *(_OWORD *)v135;
              *((_OWORD *)v162 + 1) = v163;
              v164 = *(_OWORD *)(v135 + 32);
              v165 = *(_OWORD *)(v135 + 48);
              v166 = *(_OWORD *)(v135 + 80);
              *((_OWORD *)v162 + 4) = *(_OWORD *)(v135 + 64);
              *((_OWORD *)v162 + 5) = v166;
              *((_OWORD *)v162 + 2) = v164;
              *((_OWORD *)v162 + 3) = v165;
              v168 = *(char **)(a1 + 344);
              v167 = *(char **)(a1 + 352);
              v169 = v162;
              if (v167 != v168)
              {
                do
                {
                  v170 = *((_OWORD *)v167 - 5);
                  *((_OWORD *)v169 - 6) = *((_OWORD *)v167 - 6);
                  *((_OWORD *)v169 - 5) = v170;
                  v171 = *((_OWORD *)v167 - 4);
                  v172 = *((_OWORD *)v167 - 3);
                  v173 = *((_OWORD *)v167 - 1);
                  *((_OWORD *)v169 - 2) = *((_OWORD *)v167 - 2);
                  *((_OWORD *)v169 - 1) = v173;
                  *((_OWORD *)v169 - 4) = v171;
                  *((_OWORD *)v169 - 3) = v172;
                  v169 -= 96;
                  v167 -= 96;
                }
                while (v167 != v168);
                v167 = *v260;
              }
              v156 = v162 + 96;
              *(_QWORD *)(a1 + 344) = v169;
              *(_QWORD *)(a1 + 352) = v162 + 96;
              *(_QWORD *)(a1 + 360) = &v161[96 * v160];
              if (v167)
                operator delete(v167);
            }
            else
            {
              v152 = *(_OWORD *)(v135 + 16);
              *v150 = *(_OWORD *)v135;
              v150[1] = v152;
              v153 = *(_OWORD *)(v135 + 32);
              v154 = *(_OWORD *)(v135 + 48);
              v155 = *(_OWORD *)(v135 + 80);
              v150[4] = *(_OWORD *)(v135 + 64);
              v150[5] = v155;
              v150[2] = v153;
              v150[3] = v154;
              v156 = v150 + 6;
            }
            *(_QWORD *)(a1 + 352) = v156;
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v156 - *(_QWORD *)(a1 + 344)) >> 5) >= 0xB4)
            {
              sub_100C6A808(a1);
              break;
            }
          }
        }
        v135 += 96;
      }
      sub_100C6A808(a1);
      v183 = (v263 + 1) > 9 ? v263 + 1 : 1;
      v184 = *(_QWORD *)(a1 + 448);
      v185 = *(_QWORD *)(a1 + 456);
      while (v184 != v185)
      {
        *(_DWORD *)(v184 + 52) += v183;
        v184 += 64;
      }
      v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 5);
      v133 = v263 + 1;
    }
    while (v132 <= 0xB3);
  }
  sub_1006F9628((uint64_t)v260);
  sub_100C6CF7C((uint64_t)v256);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v186 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v188 = *(_QWORD *)(a1 + 344);
    v187 = *(_QWORD *)(a1 + 352);
    v190 = *(_QWORD *)(a1 + 8);
    v189 = *(_QWORD *)(a1 + 16);
    sub_100C3B9BC(a3, __p);
    *(_DWORD *)buf = 134284035;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v187 - v188) >> 5);
    v191 = v273[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((v189 - v190) >> 5);
    *(_WORD *)&buf[22] = 2081;
    *(_QWORD *)&buf[24] = v191;
    _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEBUG, "FenceCal: chosen, %{private}lu, expected, %{private}lu, fence, %{private}s", buf, 0x20u);
    if ((v273[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v219 = qword_1022A0068;
    v221 = *(_QWORD *)(a1 + 344);
    v220 = *(_QWORD *)(a1 + 352);
    v223 = *(_QWORD *)(a1 + 8);
    v222 = *(_QWORD *)(a1 + 16);
    sub_100C3B9BC(a3, &v271);
    *(_DWORD *)__p = 134284035;
    *(_QWORD *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * ((v220 - v221) >> 5);
    if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v224 = &v271;
    else
      v224 = (std::string *)v271.__r_.__value_.__r.__words[0];
    *(_WORD *)&__p[12] = 2049;
    *(_QWORD *)v273 = 0xAAAAAAAAAAAAAAABLL * ((v222 - v223) >> 5);
    *(_WORD *)&v273[8] = 2081;
    *(_QWORD *)&v273[10] = v224;
    LODWORD(v252) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v219, 2, "FenceCal: chosen, %{private}lu, expected, %{private}lu, fence, %{private}s", __p, v252);
    v226 = v225;
    if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v271.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v226);
    if (v226 != buf)
      free(v226);
  }
  if (byte_1022FAAA8)
  {
    if (byte_102311408)
    {
      v192 = *(_QWORD *)(a1 + 448);
      v193 = *(_QWORD *)(a1 + 456);
      if (v192 != v193)
      {
        v194 = 0;
        do
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v195 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v196 = *(_DWORD *)(v192 + 48);
            v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 5);
            v198 = (*(double *)v192 + *(double *)(v192 + 16)) * 0.5;
            v199 = (*(double *)(v192 + 8) + *(double *)(v192 + 24)) * 0.5;
            *(_DWORD *)buf = 134219008;
            *(_QWORD *)&buf[4] = v194;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v196;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v197;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v198;
            *(_WORD *)&buf[38] = 2048;
            *(double *)&buf[40] = v199;
            _os_log_impl((void *)&_mh_execute_header, v195, OS_LOG_TYPE_DEBUG, "FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF", buf, 0x30u);
            ++v194;
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            v200 = *(_DWORD *)(v192 + 48);
            v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 5);
            v202 = (*(double *)v192 + *(double *)(v192 + 16)) * 0.5;
            v203 = (*(double *)(v192 + 8) + *(double *)(v192 + 24)) * 0.5;
            *(_DWORD *)__p = 134219008;
            *(_QWORD *)&__p[4] = v194;
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)v273 = v200;
            *(_WORD *)&v273[4] = 2048;
            *(_QWORD *)&v273[6] = v201;
            *(_WORD *)&v273[14] = 2048;
            *(double *)&v273[16] = v202;
            *(_WORD *)&v273[24] = 2048;
            *(double *)&v273[26] = v203;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF", (size_t)__p, 48, v253, v254, *(double *)&v255);
            v205 = (char *)v204;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v204);
            if (v205 != buf)
              free(v205);
            ++v194;
          }
          v192 += 64;
        }
        while (v192 != v193);
      }
    }
  }
  sub_100008848((uint64_t)v275, *(_QWORD **)&v275[8]);
  return 1;
}

void sub_100C6CDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100C6CE90(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  v4 = *(_OWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  v7 = *(_OWORD *)(a2 + 152);
  v8 = *(_OWORD *)(a2 + 168);
  v9 = *(_QWORD *)(a2 + 181);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 181) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  v10 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(id *)(a2 + 216);

  if (a1 != a2)
  {
    sub_1002F3538((char *)(a1 + 224), *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 4);
    sub_100C727A0((uint64_t **)(a1 + 248), *(__int128 **)(a2 + 248), (__int128 *)(a2 + 256));
  }
  v11 = *(_OWORD *)(a2 + 272);
  v12 = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 301) = *(_QWORD *)(a2 + 301);
  *(_OWORD *)(a1 + 272) = v11;
  *(_OWORD *)(a1 + 288) = v12;
  return a1;
}

void sub_100C6CF7C(uint64_t a1)
{
  char *v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = *(char **)a1;
  v3 = *(int64x2_t *)(a1 + 8);
  v4 = vshrq_n_s64(vsubq_s64(v3, vdupq_n_s64((unint64_t)v2)), 3uLL);
  v5 = 0xCCCCCCCCCCCCCCCDLL * v4.i64[0];
  v6 = v5;
  if (0xCCCCCCCCCCCCCCCDLL * v4.i64[1] > v5)
  {
    if ((char *)v3.i64[0] == v2)
    {
      v11 = 0;
      v9 = 40 * v5;
    }
    else
    {
      v7 = (char *)sub_100357184(a1 + 16, v5);
      v2 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[40 * v6];
      v11 = &v7[40 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *(_OWORD *)(v8 - 40);
          v14 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(v12 - 8) = *((_QWORD *)v8 - 1);
          *(_OWORD *)(v12 - 24) = v14;
          *(_OWORD *)(v12 - 40) = v13;
          v12 -= 40;
          v8 -= 40;
        }
        while (v8 != v2);
        v2 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_100C6D078(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, std::string::size_type a8)
{
  int v15;
  unint64_t v16;
  NSObject *v17;
  double Current;
  _BYTE *v19;
  uint64_t v20;
  double v21;
  std::string *p_buf;
  char *v23;
  char *v24;
  uint64_t v25;
  NSObject *v27;
  double v28;
  _BYTE *v29;
  _QWORD *v30;
  NSObject *v31;
  std::string *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  std::string *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  double v47;
  std::string *v48;
  char *v49;
  char *v50;
  int v51;
  const char *v53;
  const char *v54;
  std::string v55;
  double v56;
  std::string buf;
  __int16 v58;
  unint64_t v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  std::string *v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  _BYTE __p[12];
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  unint64_t v80;
  __int16 v81;
  unsigned int v82;
  __int16 v83;
  std::string *v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  int v94;

  v54 = *(const char **)a1;
  v15 = *(_DWORD *)(a1 + 52);
  v16 = *(_QWORD *)(a4 + 16) + *(_QWORD *)(a3 + 16);
  if (a2 && sub_100219C3C(a1))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v17 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_100FC7034(a1, __p, Current);
      v19 = v78 >= 0 ? __p : *(_BYTE **)__p;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "FenceCal: avoid adding moving AP as an exit AP, %{private}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v78) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v20 = qword_1022A0068;
      v21 = CFAbsoluteTimeGetCurrent();
      sub_100FC7034(a1, &buf, v21);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v55.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 2, "FenceCal: avoid adding moving AP as an exit AP, %{private}s", &v55, 12);
      v24 = v23;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, BOOL, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const char *)", "%s\n", v24);
      if (v24 != __p)
        free(v24);
    }
    goto LABEL_42;
  }
  v25 = 0;
  if (v16 < a5 && (v15 - 166) >= 0xFFFFFF5B && ((1 << v15) & a7) != 0)
  {
    if (!sub_1000AFA5C(v15))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v27 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v28 = CFAbsoluteTimeGetCurrent();
        sub_100FC7034(a1, __p, v28);
        v29 = v78 >= 0 ? __p : *(_BYTE **)__p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a8;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "FenceCal: adding non-2GHz, reason: %{private}s, %{private}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(v78) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v46 = qword_1022A0068;
        v47 = CFAbsoluteTimeGetCurrent();
        sub_100FC7034(a1, &buf, v47);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &buf;
        else
          v48 = (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v55.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = a8;
        WORD2(v55.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v48;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v46, 2, "FenceCal: adding non-2GHz, reason: %{private}s, %{private}s", &v55, 22);
        v50 = v49;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, BOOL, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const char *)", "%s\n", v50);
        if (v50 != __p)
          free(v50);
      }
    }
    v30 = sub_100191618(a4, &v54);
    if (a2)
    {
      if ((_QWORD *)(a4 + 8) != v30)
        sub_10071D274((uint64_t **)a4, &v54);
      sub_100190354((uint64_t **)a4, &v54, &v54, (_OWORD *)a1);
      if ((_QWORD *)(a3 + 8) != sub_100191618(a3, &v54))
        sub_10071D274((uint64_t **)a3, &v54);
    }
    else
    {
      if ((_QWORD *)(a4 + 8) != v30)
      {
LABEL_42:
        v25 = 0;
        goto LABEL_47;
      }
      sub_100191618(a6, &v54);
      if ((_QWORD *)(a3 + 8) != sub_100191618(a3, &v54))
        sub_10071D274((uint64_t **)a3, &v54);
      sub_100190354((uint64_t **)a3, &v54, &v54, (_OWORD *)a1);
    }
    v25 = 1;
  }
LABEL_47:
  if (byte_1022FAAA8)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v31 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v55.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      sub_1000C2150(&v55, &buf);
      v32 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      v33 = *(_QWORD *)(a1 + 32);
      v34 = *(_DWORD *)(a1 + 52);
      v35 = *(_QWORD *)(a1 + 8);
      v36 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)__p = 136317698;
      *(_QWORD *)&__p[4] = a8;
      v75 = 1024;
      v76 = a7;
      v77 = 1024;
      v78 = a2;
      v79 = 2048;
      v80 = v16;
      v81 = 1024;
      v82 = a5;
      v83 = 2080;
      v84 = v32;
      v85 = 2048;
      v86 = v33;
      v87 = 1024;
      v88 = v34;
      v89 = 2048;
      v90 = v35;
      v91 = 2048;
      v92 = v36;
      v93 = 1024;
      v94 = v25;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d", __p, 0x5Cu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v38 = qword_1022A0068;
      v53 = *(const char **)a1;
      sub_1000C2150(&v53, &v55);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v55;
      else
        v39 = (std::string *)v55.__r_.__value_.__r.__words[0];
      v40 = *(_QWORD *)(a1 + 32);
      v41 = *(_DWORD *)(a1 + 52);
      v42 = *(_QWORD *)(a1 + 8);
      v43 = *(_QWORD *)(a1 + 16);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136317698;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a8;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a7;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = a2;
      v58 = 2048;
      v59 = v16;
      v60 = 1024;
      v61 = a5;
      v62 = 2080;
      v63 = v39;
      v64 = 2048;
      v65 = v40;
      v66 = 1024;
      v67 = v41;
      v68 = 2048;
      v69 = v42;
      v70 = 2048;
      v71 = v43;
      v72 = 1024;
      v73 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v38, 2, "FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d", (const char *)&buf, 92, v51, a8, (_DWORD)v53, v54, *(double *)&v55.__r_.__value_.__l.__data_, LODWORD(v55.__r_.__value_.__r.__words[1]), *(double *)&v55.__r_.__value_.__r.__words[2], v56);
      v45 = v44;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, BOOL, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const char *)", "%s\n", v45);
      if (v45 != __p)
        free(v45);
    }
  }
  return v25;
}

unint64_t sub_100C6D854(uint64_t *a1, char **a2)
{
  int v4;
  float *v5;
  _QWORD *v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  unsigned int v25;
  float *v26;
  float *v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  float *v31;
  float *v32;
  double v33;
  double v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  NSObject *v39;
  int v40;
  double v41;
  int v42;
  double v43;
  const char *v44;
  uint8_t *v45;
  NSObject *v46;
  int v47;
  uint64_t v49;
  int v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  __int128 v54;
  _DWORD v55[2];
  __int16 v56;
  int v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  __int16 v62;
  double v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  double v69;
  __int16 v70;
  int v71;
  __int16 v72;
  double v73;

  v4 = 0;
  v5 = (float *)*a2;
  a2[1] = *a2;
  v6 = a2 + 2;
  do
  {
    if ((unint64_t)v5 >= *v6)
    {
      v7 = (float *)*a2;
      v8 = ((char *)v5 - *a2) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_100259694();
      v10 = *v6 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        v12 = (char *)sub_10025E6A0((uint64_t)v6, v11);
        v7 = (float *)*a2;
        v5 = (float *)a2[1];
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_DWORD *)v13 = v4;
      *((_DWORD *)v13 + 1) = 0;
      v14 = v13;
      if (v5 != v7)
      {
        do
        {
          v15 = *((_QWORD *)v5 - 1);
          v5 -= 2;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v5 != v7);
        v7 = (float *)*a2;
      }
      v5 = (float *)(v13 + 8);
      *a2 = v14;
      a2[1] = v13 + 8;
      a2[2] = &v12[8 * v11];
      if (v7)
        operator delete(v7);
    }
    else
    {
      *(_DWORD *)v5 = v4;
      v5[1] = 0.0;
      v5 += 2;
    }
    a2[1] = (char *)v5;
    ++v4;
  }
  while (v4 != 166);
  v16 = *a1;
  v17 = a1[1];
  if (*a1 == v17)
  {
    v18 = 0;
    v20 = 4;
    v19 = 0.0;
  }
  else
  {
    LODWORD(v18) = 0;
    v19 = 0.0;
    v20 = 4;
    do
    {
      if (v20 > *(_DWORD *)(v16 + 496))
      {
        v21 = 0;
      }
      else
      {
        v20 = *(_DWORD *)(v16 + 496);
        v21 = *(_DWORD *)(v16 + 500);
      }
      v22 = *(_QWORD *)(v16 + 8);
      v23 = *(_QWORD *)(v16 + 16);
      if (v22 != v23)
      {
        v24 = (float *)*a2;
        do
        {
          v25 = *(_DWORD *)(v22 + 52) & ~(*(int *)(v22 + 52) >> 31);
          if (v25 <= 0xA5)
          {
            v24[2 * v25 + 1] = v24[2 * v25 + 1] + 1.0;
            v19 = v19 + 1.0;
          }
          v22 += 96;
        }
        while (v22 != v23);
      }
      v18 = v21 | v18;
      v16 += 504;
    }
    while (v16 != v17);
  }
  v26 = (float *)*a2;
  if (*a2 != (char *)v5)
  {
    v27 = (float *)*a2;
    do
    {
      if (v19 > 0.0)
        v27[1] = v27[1] / v19;
      v27 += 2;
    }
    while (v27 != v5);
  }
  v28 = 126 - 2 * __clz(((char *)v5 - (char *)v26) >> 3);
  if (v5 == v26)
    v29 = 0;
  else
    v29 = v28;
  sub_100C749E4(v26, v5, v29, 1);
  v31 = (float *)*a2;
  v32 = (float *)a2[1];
  if (*a2 == (char *)v32)
  {
    v34 = 0.0;
  }
  else
  {
    v33 = v19;
    v34 = 0.0;
    *(_QWORD *)&v30 = 67110144;
    v54 = v30;
    do
    {
      if (*(int *)v31 >= 1 && sub_1000AFA5C(*(_DWORD *)v31))
      {
        v35 = sub_100516300(v18);
        v36 = 1 << *(_DWORD *)v31;
        if ((v36 & v18) == 0 && (v35 < v20 ? (v37 = *(_DWORD *)v31 <= 0) : (v37 = 1), v37))
        {
          v38 = 0;
        }
        else
        {
          v34 = v34 + v31[1];
          v18 = v36 | v18;
          v38 = 1;
        }
        if (byte_1022FAAA8)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v39 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v40 = *(_DWORD *)v31;
            v41 = v31[1];
            *(_DWORD *)buf = v54;
            v65 = v38;
            v66 = 1024;
            v67 = v20;
            v68 = 2048;
            v69 = v33;
            v70 = 1024;
            v71 = v40;
            v72 = 2048;
            v73 = v41;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "FenceCal: isAddChannel, %d, maxChannelSetSize, %d, totalAps, %.0lf, channelHistogram, sorted, channel, %2d, weight, %.3lf", buf, 0x28u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            v42 = *(_DWORD *)v31;
            v43 = v31[1];
            v56 = 1024;
            v57 = v20;
            v58 = 2048;
            v59 = v33;
            v60 = 1024;
            v61 = v42;
            v62 = 2048;
            v63 = v43;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: isAddChannel, %d, maxChannelSetSize, %d, totalAps, %.0lf, channelHistogram, sorted, channel, %2d, weight, %.3lf", v55, 40, *(double *)&v54, DWORD2(v54), COERCE_DOUBLE(__PAIR64__(v38, v54)));
            v45 = (uint8_t *)v44;
            sub_100512490("Generic", 1, 0, 2, "static unsigned int CLWifiFenceCalculator::calculateChannelHistogram(const std::vector<CLWifiFenceCalculator> &, ChannelHistogram &)", "%s\n", v44);
            if (v45 != buf)
              free(v45);
          }
        }
      }
      v31 += 2;
    }
    while (v31 != v32);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v46 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v47 = sub_100516300(v18);
    *(_DWORD *)buf = 67175169;
    v65 = v47;
    v66 = 1025;
    v67 = v18;
    v68 = 2049;
    v69 = v34;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "FenceCal: addedChannels, %{private}d, channelFilter, 0x%{private}08x, totalWeight, %{private}.3lf", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v49 = qword_1022A0068;
    v50 = sub_100516300(v18);
    v55[0] = 67175169;
    v55[1] = v50;
    v56 = 1025;
    v57 = v18;
    v58 = 2049;
    v59 = v34;
    LODWORD(v53) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "FenceCal: addedChannels, %{private}d, channelFilter, 0x%{private}08x, totalWeight, %{private}.3lf", v55, v53);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "static unsigned int CLWifiFenceCalculator::calculateChannelHistogram(const std::vector<CLWifiFenceCalculator> &, ChannelHistogram &)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  return v18;
}

uint64_t sub_100C6DE64(_QWORD *a1, uint64_t *a2, unsigned int a3, uint64_t *a4, uint64_t a5, uint64_t **a6, _QWORD *a7, _QWORD *a8, double a9, uint64_t a10)
{
  double Current;
  NSObject *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char **v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  int v60;
  __int128 v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  _BOOL4 v66;
  _BOOL4 v67;
  int v68;
  BOOL v69;
  _BOOL4 v70;
  double v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  double *v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  char v84;
  double v85;
  NSObject *v86;
  double v87;
  _BYTE *v88;
  double v89;
  double *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  NSObject *v100;
  NSObject *v101;
  double v102;
  _BYTE *v103;
  NSObject *v104;
  std::string *v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  double v109;
  _BYTE *v110;
  char *v111;
  char *v112;
  const char *v113;
  char *v114;
  uint64_t v115;
  double v116;
  std::string *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  _BYTE *v121;
  unint64_t v122;
  int v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  unsigned int v129;
  size_t v130;
  _BYTE *v131;
  const void *v132;
  int v133;
  const std::string::value_type *v134;
  std::string::size_type v135;
  std::string *v136;
  int v137;
  _BOOL4 v139;
  unsigned int v140;
  uint64_t v141;
  double v142;
  int v143;
  signed int v144;
  double v145;
  BOOL v146;
  NSObject *v147;
  std::string *v148;
  int v149;
  _BOOL4 v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  NSObject *v154;
  std::string *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  NSObject *v160;
  std::string *v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  int v166;
  std::string *v167;
  int v168;
  const char *v169;
  char *v170;
  std::string *v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  std::string *v176;
  int v177;
  const char *v178;
  char *v179;
  int v180;
  uint64_t v181;
  const char *v182;
  char *v183;
  NSObject *v184;
  const char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  int v192;
  NSObject *v193;
  _BYTE *v194;
  unint64_t v195;
  int v196;
  uint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  std::string *v202;
  unint64_t v203;
  int v204;
  uint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  NSObject *v211;
  _BYTE *v212;
  uint64_t v213;
  _BYTE *v214;
  char *v215;
  uint64_t v216;
  uint64_t *v217;
  BOOL v218;
  NSObject *v219;
  _QWORD *v220;
  int v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unsigned __int8 *v227;
  uint64_t v228;
  uint64_t **v229;
  std::string::size_type v230;
  unsigned __int8 *v231;
  uint64_t v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  NSObject *v235;
  _BYTE *v236;
  unint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  unint64_t v240;
  char *v241;
  char *v242;
  _QWORD *v243;
  int v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  char *v249;
  NSObject *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  int v255;
  signed int v256;
  NSObject *v257;
  size_t v258;
  _BYTE *v259;
  const void *v260;
  int v261;
  const std::string::value_type *v262;
  std::string::size_type v263;
  std::string *v264;
  __int128 v265;
  std::string *v266;
  int v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  size_t v271;
  _BYTE *v272;
  const void *v273;
  int v274;
  const std::string::value_type *v275;
  std::string::size_type v276;
  std::string *v277;
  int v278;
  unint64_t *v279;
  unint64_t *v280;
  NSObject *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unsigned __int8 *v286;
  std::string::size_type v287;
  unsigned __int8 *v288;
  uint64_t v289;
  int v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  uint64_t v293;
  size_t v294;
  std::string *v295;
  const void *v296;
  int v297;
  const std::string::value_type *v298;
  std::string::size_type v299;
  std::string *v300;
  __int128 v301;
  void **v302;
  int v303;
  unint64_t v304;
  char *v305;
  char *v306;
  unint64_t v307;
  unint64_t v308;
  const char *v309;
  char *v310;
  NSObject *v311;
  uint64_t v312;
  uint64_t v313;
  const char *v314;
  char *v315;
  uint64_t v316;
  const char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  char v322;
  int v323;
  NSObject *v324;
  size_t v325;
  _BYTE *v326;
  const void *v327;
  int v328;
  const std::string::value_type *v329;
  std::string::size_type v330;
  std::string *v331;
  __int128 v332;
  _BOOL4 v333;
  std::string *v334;
  int v335;
  int v336;
  _QWORD *v337;
  _QWORD *v338;
  uint64_t v339;
  int v340;
  BOOL v341;
  uint64_t *v342;
  uint64_t v343;
  _BOOL4 v344;
  char v345;
  BOOL v346;
  uint64_t v347;
  _BOOL4 v348;
  std::string *v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  int v353;
  unint64_t v354;
  unint64_t v355;
  _BOOL4 v356;
  _BOOL4 v357;
  char *v358;
  char *v359;
  int v360;
  int v361;
  NSObject *v362;
  unint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  NSObject *v366;
  uint64_t v367;
  double v368;
  _BYTE *v369;
  _QWORD *v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t v373;
  double v374;
  std::string *v375;
  char *v376;
  char *v377;
  _QWORD *v378;
  uint64_t v379;
  NSObject *v380;
  uint64_t v381;
  double v382;
  _BYTE *v383;
  _QWORD *v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  double v388;
  std::string *v389;
  char *v390;
  char *v391;
  uint64_t v393;
  int v394;
  const char *v395;
  char *v396;
  unint64_t v397;
  uint64_t v398;
  const char *v399;
  char *v400;
  unint64_t v401;
  const char *v402;
  char *v403;
  const char *v404;
  char *v405;
  double v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  double v410;
  uint64_t *v411;
  __int128 v412;
  unsigned int v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int v416;
  void *v420;
  int v421;
  int v422;
  int v423;
  uint64_t v424;
  int v425;
  std::string *v426;
  uint64_t v428;
  unsigned int v429;
  void *v431[2];
  int64_t v432;
  double v433;
  std::string *v434;
  char *v435;
  _QWORD **v436;
  _QWORD *v437[2];
  uint64_t *v438;
  _QWORD *v439[2];
  double v440[5];
  void *__p;
  char *v442;
  char *v443;
  void *v444;
  void *v445;
  uint64_t v446;
  _BYTE v447[12];
  char v448;
  std::string v449;
  int v450;
  _BYTE v451[96];
  _BYTE buf[1632];

  v411 = a2;
  Current = j__CFAbsoluteTimeGetCurrent();
  v444 = 0;
  v445 = 0;
  v446 = 0;
  __p = 0;
  v442 = 0;
  v443 = 0;
  sub_1002433B8((uint64_t)v440);
  v439[0] = 0;
  v439[1] = 0;
  v437[1] = 0;
  v438 = (uint64_t *)v439;
  v436 = v437;
  v437[0] = 0;
  if (byte_1022FAAA8)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v14 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v15 = 0xEFBEFBEFBEFBEFBFLL * ((v411[1] - *v411) >> 3);
      v16 = 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 3);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v16;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = a9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "FenceCal: calculateGroup, start, group size, %zu, apsBudget, %u, currentlySeen, %zu, minScoreThresh, %.4lf", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v397 = 0xEFBEFBEFBEFBEFBFLL * ((v411[1] - *v411) >> 3);
      v398 = 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 3);
      *(_DWORD *)v451 = 134218752;
      *(_QWORD *)&v451[4] = v397;
      *(_WORD *)&v451[12] = 1024;
      *(_DWORD *)&v451[14] = a3;
      *(_WORD *)&v451[18] = 2048;
      *(_QWORD *)&v451[20] = v398;
      *(_WORD *)&v451[28] = 2048;
      *(double *)&v451[30] = a9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: calculateGroup, start, group size, %zu, apsBudget, %u, currentlySeen, %zu, minScoreThresh, %.4lf", (size_t)v451, 38, (size_t)v407, *((double *)&v407 + 1));
      v400 = (char *)v399;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v399);
      if (v400 != buf)
        free(v400);
    }
  }
  v17 = sub_100C6D854(v411, (char **)&v444);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v18 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v19 = sub_100516300(v17);
    *(_DWORD *)buf = 67174913;
    *(_DWORD *)&buf[4] = v17;
    *(_WORD *)&buf[8] = 1025;
    *(_DWORD *)&buf[10] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "FenceCal: channelFilter, 0x%{private}08X,countNumOfSetBits,%{private}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v393 = qword_1022A0068;
    v394 = sub_100516300(v17);
    *(_DWORD *)v451 = 67174913;
    *(_DWORD *)&v451[4] = v17;
    *(_WORD *)&v451[8] = 1025;
    *(_DWORD *)&v451[10] = v394;
    LODWORD(v406) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v393, 2, "FenceCal: channelFilter, 0x%{private}08X,countNumOfSetBits,%{private}d", v451, *(_QWORD *)&v406);
    v396 = (char *)v395;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v395);
    if (v396 != buf)
      free(v396);
  }
  v20 = *v411;
  v21 = v411[1];
  if (*v411 == v21)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    do
    {
      *(_DWORD *)(v20 + 392) = -1;
      *(_DWORD *)(v20 + 472) = 1;
      v22 += *(unsigned __int8 *)(v20 + 476);
      v20 += 504;
    }
    while (v20 != v21);
  }
  if (*(_BYTE *)(a5 + 88))
  {
    if (Current == 0.0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217C450);
      v23 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "fencecalculator timestamp is 0", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217C450);
        *(_WORD *)v451 = 0;
        LODWORD(v406) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "fencecalculator timestamp is 0", v451, *(_QWORD *)&v406);
        v405 = (char *)v404;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v404);
        if (v405 != buf)
          free(v405);
      }
    }
    *(_QWORD *)buf = *(_QWORD *)a5;
    if (*(char *)(a5 + 31) < 0)
    {
      sub_100115CE4(&buf[8], *(void **)(a5 + 8), *(_QWORD *)(a5 + 16));
    }
    else
    {
      *(_OWORD *)&buf[8] = *(_OWORD *)(a5 + 8);
      *(_QWORD *)&buf[24] = *(_QWORD *)(a5 + 24);
    }
    v24 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a5 + 32);
    *(_OWORD *)&buf[48] = v24;
    *(_OWORD *)&buf[64] = *(_OWORD *)(a5 + 64);
    *(_QWORD *)&buf[80] = *(_QWORD *)(a5 + 80);
    memset(&v449, 0, sizeof(v449));
    LOBYTE(v435) = 0;
    v449.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
    v449.__r_.__value_.__l.__size_ = v449.__r_.__value_.__r.__words[0];
    v449.__r_.__value_.__r.__words[2] = v449.__r_.__value_.__r.__words[0] + 88;
    v449.__r_.__value_.__l.__size_ = sub_1005C9524((uint64_t)&v449.__r_.__value_.__r.__words[2], (uint64_t)buf, (uint64_t)&buf[88], (uint64_t)v449.__r_.__value_.__l.__data_);
    sub_10136688C(a1, (uint64_t)&v449, a10, (uint64_t)v451, Current);
    v434 = &v449;
    sub_100279AA4((void ***)&v434);
    if ((buf[31] & 0x80000000) != 0)
      operator delete(*(void **)&buf[8]);
    sub_100FC76DC(*(_QWORD *)a5, *(_DWORD *)(a5 + 32), *(_DWORD *)(a5 + 40), (uint64_t)buf, *(double *)(a5 + 56));
    if (&v451[8] == (_BYTE *)sub_100C753CC((uint64_t)v451, (uint64_t *)a5))
    {
      v30 = *(_DWORD *)(a5 + 40);
    }
    else
    {
      v25 = (_OWORD *)sub_100C7210C((uint64_t)v451, (uint64_t *)a5);
      v26 = v25[4];
      v27 = v25[5];
      v28 = v25[2];
      *(_OWORD *)&buf[48] = v25[3];
      v29 = v25[1];
      *(_OWORD *)buf = *v25;
      *(_OWORD *)&buf[16] = v29;
      *(_OWORD *)&buf[64] = v26;
      *(_OWORD *)&buf[80] = v27;
      *(_OWORD *)&buf[32] = v28;
      v30 = *(_DWORD *)(a5 + 40);
      *(_DWORD *)&buf[52] = v30;
    }
    if (sub_1000AFA5C(v30))
      LODWORD(v17) = (1 << *(_DWORD *)(a5 + 40)) | v17;
    if (v22)
      sub_100C6D078((uint64_t)buf, 1, (uint64_t)a7, (uint64_t)a8, a3, (uint64_t)&v438, -1, (std::string::size_type)"associated");
    sub_1007A28B0((uint64_t)v451, *(char **)&v451[8]);
  }
  sub_10136688C(a1, (uint64_t)a4, a10, (uint64_t)&v434, Current);
  v416 = v17;
  v32 = *a4;
  v31 = a4[1];
  HIDWORD(v410) = v22;
  if (*a4 == v31)
  {
    v422 = 0;
    v33 = 0;
  }
  else
  {
    v33 = 0;
    v422 = 0;
    do
    {
      sub_100FC76DC(*(_QWORD *)v32, *(_DWORD *)(v32 + 32), *(_DWORD *)(v32 + 40), (uint64_t)buf, *(double *)(v32 + 56));
      v34 = (char **)sub_100C753CC((uint64_t)&v434, (uint64_t *)v32);
      if (&v435 != v34)
      {
        v35 = *(_OWORD *)(v34 + 21);
        *(_OWORD *)&buf[32] = *(_OWORD *)(v34 + 19);
        *(_OWORD *)&buf[48] = v35;
        v36 = *(_OWORD *)(v34 + 25);
        *(_OWORD *)&buf[64] = *(_OWORD *)(v34 + 23);
        *(_OWORD *)&buf[80] = v36;
        v37 = *(_OWORD *)(v34 + 17);
        *(_OWORD *)buf = *(_OWORD *)(v34 + 15);
        *(_OWORD *)&buf[16] = v37;
      }
      *(_DWORD *)&buf[52] = *(_DWORD *)(v32 + 40);
      if (sub_1000AFA5C(*(int *)&buf[52]))
      {
        v38 = v442;
        if (v442 >= v443)
        {
          v44 = (char *)__p;
          v45 = 0xAAAAAAAAAAAAAAABLL * ((v442 - (_BYTE *)__p) >> 5);
          v46 = v45 + 1;
          if (v45 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((v443 - (_BYTE *)__p) >> 5) > v46)
            v46 = 0x5555555555555556 * ((v443 - (_BYTE *)__p) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((v443 - (_BYTE *)__p) >> 5) >= 0x155555555555555)
            v47 = 0x2AAAAAAAAAAAAAALL;
          else
            v47 = v46;
          if (v47)
          {
            v48 = (char *)sub_10067257C((uint64_t)&v443, v47);
            v44 = (char *)__p;
            v38 = v442;
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[96 * v45];
          v50 = *(_OWORD *)&buf[16];
          *(_OWORD *)v49 = *(_OWORD *)buf;
          *((_OWORD *)v49 + 1) = v50;
          v51 = *(_OWORD *)&buf[32];
          v52 = *(_OWORD *)&buf[48];
          v53 = *(_OWORD *)&buf[80];
          *((_OWORD *)v49 + 4) = *(_OWORD *)&buf[64];
          *((_OWORD *)v49 + 5) = v53;
          *((_OWORD *)v49 + 2) = v51;
          *((_OWORD *)v49 + 3) = v52;
          if (v38 == v44)
          {
            v59 = &v48[96 * v45];
          }
          else
          {
            v54 = &v48[96 * v45];
            do
            {
              v55 = *((_OWORD *)v38 - 5);
              *((_OWORD *)v54 - 6) = *((_OWORD *)v38 - 6);
              *((_OWORD *)v54 - 5) = v55;
              v56 = *((_OWORD *)v38 - 4);
              v57 = *((_OWORD *)v38 - 3);
              v58 = *((_OWORD *)v38 - 1);
              v59 = v54 - 96;
              *((_OWORD *)v54 - 2) = *((_OWORD *)v38 - 2);
              *((_OWORD *)v54 - 1) = v58;
              *((_OWORD *)v54 - 4) = v56;
              *((_OWORD *)v54 - 3) = v57;
              v38 -= 96;
              v54 -= 96;
            }
            while (v38 != v44);
          }
          v43 = v49 + 96;
          __p = v59;
          v442 = v49 + 96;
          v443 = &v48[96 * v47];
          if (v44)
            operator delete(v44);
        }
        else
        {
          v39 = *(_OWORD *)&buf[16];
          *(_OWORD *)v442 = *(_OWORD *)buf;
          *((_OWORD *)v38 + 1) = v39;
          v40 = *(_OWORD *)&buf[32];
          v41 = *(_OWORD *)&buf[48];
          v42 = *(_OWORD *)&buf[80];
          *((_OWORD *)v38 + 4) = *(_OWORD *)&buf[64];
          *((_OWORD *)v38 + 5) = v42;
          *((_OWORD *)v38 + 2) = v40;
          *((_OWORD *)v38 + 3) = v41;
          v43 = v38 + 96;
        }
        v442 = v43;
        if (sub_10018FDEC((double *)buf))
        {
          v60 = *(_DWORD *)&buf[48];
          ++v33;
          if (*((double *)sub_10108CC94() + 5) >= (double)v60)
            ++v422;
        }
      }
      v32 += 88;
    }
    while (v32 != v31);
  }
  sub_1006F9628((uint64_t)&__p);
  v63 = (char *)__p;
  v62 = v442;
  v64 = v22;
  if (__p != v442)
  {
    *(_QWORD *)&v61 = 134283777;
    v408 = v61;
    *(_QWORD *)&v61 = 136381187;
    v407 = v61;
    v65 = v422;
    do
    {
      v66 = sub_10018FDEC((double *)v63);
      if (v33)
      {
        if (v65)
          v67 = v66;
        else
          v67 = 0;
        if (v67)
        {
          v68 = *((_DWORD *)v63 + 12);
          v69 = *((double *)sub_10108CC94() + 5) < (double)v68 || v64 == 0;
          if (v69)
            goto LABEL_89;
        }
        else
        {
          if (v64)
            v70 = v66;
          else
            v70 = 0;
          if (!v70)
            goto LABEL_89;
        }
        if (((v416 >> *((_DWORD *)v63 + 13)) & 1) == 0 && sub_100516300(v416) <= 6)
          v416 |= 1 << *((_DWORD *)v63 + 13);
      }
      else if (!v64)
      {
        goto LABEL_89;
      }
      sub_100C6D078((uint64_t)v63, 1, (uint64_t)a7, (uint64_t)a8, a3, (uint64_t)&v438, v416, (std::string::size_type)"CurrentlySeen");
LABEL_89:
      v71 = *(double *)(a10 + 20);
      v72 = v71 < 0.0 || v71 > 100.0;
      if (!v72 && sub_10018FDEC((double *)v63))
      {
        v73 = *v411;
        v74 = v411[1];
        if (*v411 != v74)
        {
          do
          {
            v75 = *(_QWORD **)(v73 + 8);
            v76 = *(_QWORD **)(v73 + 16);
            while (v75 != v76)
            {
              *(_QWORD *)buf = *(_QWORD *)v63;
              *(_QWORD *)v451 = *v75;
              if (sub_10009483C(buf, v451))
                goto LABEL_101;
              v75 += 12;
            }
            v73 += 504;
          }
          while (v73 != v74);
          v73 = v74;
LABEL_101:
          v65 = v422;
        }
        v77 = v411[1];
        v78 = (double *)(v73 + 104);
        v79 = (double *)(v73 + 112);
        if (v73 == v77)
        {
          v78 = (double *)(a10 + 4);
          v79 = (double *)(a10 + 12);
        }
        v80 = *v78;
        v81 = *v79;
        v82 = sub_1010B97B4(v440, a10, *((double *)v63 + 1), *((double *)v63 + 2));
        v83 = sub_1010B97B4(v440, a10, v80, v81);
        if (v73 != v77)
        {
          v84 = *(_BYTE *)(v73 + 476);
          if (v84)
            v84 = v83 - sub_10016F694(v73 + 32) >= 300.0;
          if ((v84 & 1) != 0)
            goto LABEL_110;
        }
        v85 = *((double *)v63 + 4);
        if (v85 >= 450.0 || v82 - v85 >= 450.0)
        {
LABEL_110:
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v86 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v87 = CFAbsoluteTimeGetCurrent();
            sub_100FC7034((uint64_t)v63, buf, v87);
            v88 = buf;
            if (buf[23] < 0)
              v88 = *(_BYTE **)buf;
            *(_DWORD *)v451 = 136380675;
            *(_QWORD *)&v451[4] = v88;
            _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "FenceCal: before devaluing, apLocation, %{private}s", v451, 0xCu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            v108 = qword_1022A0068;
            v109 = CFAbsoluteTimeGetCurrent();
            sub_100FC7034((uint64_t)v63, v451, v109);
            v110 = v451;
            if (v451[23] < 0)
              v110 = *(_BYTE **)v451;
            LODWORD(v449.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 4) = (std::string::size_type)v110;
            LODWORD(v406) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v108, 2, "FenceCal: before devaluing, apLocation, %{private}s", &v449, *(_QWORD *)&v406);
            v112 = v111;
            if ((v451[23] & 0x80000000) != 0)
              operator delete(*(void **)v451);
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v112);
            if (v112 != buf)
              free(v112);
          }
          v433 = *(double *)v63;
          sub_1013694F8((uint64_t)a1);
          v89 = v433;
          v90 = (double *)operator new(8uLL);
          *(_QWORD *)buf = v90;
          *v90 = v89;
          *(_QWORD *)&buf[16] = v90 + 1;
          *(_QWORD *)&buf[8] = v90 + 1;
          (*(void (**)(void **__return_ptr, _QWORD *, _BYTE *, uint64_t, double))(*a1 + 16))(v431, a1, buf, a10, Current);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          v91 = *((_OWORD *)v63 + 1);
          *(_OWORD *)v451 = *(_OWORD *)v63;
          *(_OWORD *)&v451[16] = v91;
          v92 = *((_OWORD *)v63 + 2);
          v93 = *((_OWORD *)v63 + 3);
          v94 = *((_OWORD *)v63 + 5);
          *(_OWORD *)&v451[64] = *((_OWORD *)v63 + 4);
          *(_OWORD *)&v451[80] = v94;
          *(_OWORD *)&v451[32] = v92;
          *(_OWORD *)&v451[48] = v93;
          if (&v431[1] != sub_100191618((uint64_t)v431, &v433))
          {
            v95 = (_OWORD *)sub_100191734((uint64_t)v431, &v433);
            v96 = v95[1];
            *(_OWORD *)v451 = *v95;
            *(_OWORD *)&v451[16] = v96;
            v97 = v95[2];
            v98 = v95[3];
            v99 = v95[5];
            *(_OWORD *)&v451[64] = v95[4];
            *(_OWORD *)&v451[80] = v99;
            *(_OWORD *)&v451[32] = v97;
            *(_OWORD *)&v451[48] = v98;
          }
          if (sub_10018FDEC((double *)v451))
          {
            *(_QWORD *)buf = *(_QWORD *)v451;
            if (v439 != sub_100191618((uint64_t)&v438, buf))
            {
              *(_QWORD *)buf = *(_QWORD *)v451;
              sub_10071D274(&v438, buf);
            }
            *(_QWORD *)buf = *(_QWORD *)v451;
            sub_100190354(&v438, buf, buf, v451);
          }
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v100 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v408;
            *(double *)&buf[4] = v82;
            *(_WORD *)&buf[12] = 2049;
            *(double *)&buf[14] = v83;
            _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "FenceCal: devaluing, distanceToExpectedApLocation, %{private}.1lf, distanceToFenceCenter, %{private}.1lf", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            LODWORD(v449.__r_.__value_.__l.__data_) = v408;
            *(double *)((char *)v449.__r_.__value_.__r.__words + 4) = v82;
            WORD2(v449.__r_.__value_.__r.__words[1]) = 2049;
            *(double *)((char *)&v449.__r_.__value_.__r.__words[1] + 6) = v83;
            LODWORD(v406) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: devaluing, distanceToExpectedApLocation, %{private}.1lf, distanceToFenceCenter, %{private}.1lf", &v449, *(_QWORD *)&v406);
            v114 = (char *)v113;
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v113);
            if (v114 != buf)
              free(v114);
          }
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v101 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v102 = CFAbsoluteTimeGetCurrent();
            sub_100FC7034((uint64_t)v451, buf, v102);
            v103 = buf;
            if (buf[23] < 0)
              v103 = *(_BYTE **)buf;
            LODWORD(v449.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 4) = (std::string::size_type)v103;
            _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "FenceCal: after devaluing, apLocation, %{private}s", (uint8_t *)&v449, 0xCu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            v115 = qword_1022A0068;
            v116 = CFAbsoluteTimeGetCurrent();
            sub_100FC7034((uint64_t)v451, &v449, v116);
            v117 = &v449;
            if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v117 = (std::string *)v449.__r_.__value_.__r.__words[0];
            *(_DWORD *)v447 = 136380675;
            *(_QWORD *)&v447[4] = v117;
            LODWORD(v406) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v115, 2, "FenceCal: after devaluing, apLocation, %{private}s", v447, *(_QWORD *)&v406);
            v119 = v118;
            if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v449.__r_.__value_.__l.__data_);
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v119);
            if (v119 != buf)
              free(v119);
          }
          if (v73 != v77)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            v104 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              sub_100C3B9BC(v73 + 32, &v449);
              v105 = &v449;
              if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v105 = (std::string *)v449.__r_.__value_.__r.__words[0];
              v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v73 + 352) - *(_QWORD *)(v73 + 344)) >> 5);
              v107 = *(unsigned __int8 *)(v73 + 476);
              *(_DWORD *)buf = v407;
              *(_QWORD *)&buf[4] = v105;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v106;
              *(_WORD *)&buf[22] = 1025;
              *(_DWORD *)&buf[24] = v107;
              _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "FenceCal: devaluing, fence, %{private}s, result.fChosenAPs, %{private}lu, isExit, %{private}d", buf, 0x1Cu);
              if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v449.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10217C430);
              v120 = qword_1022A0068;
              sub_100C3B9BC(v73 + 32, v447);
              v121 = v447;
              if (v448 < 0)
                v121 = *(_BYTE **)v447;
              v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v73 + 352) - *(_QWORD *)(v73 + 344)) >> 5);
              v123 = *(unsigned __int8 *)(v73 + 476);
              LODWORD(v449.__r_.__value_.__l.__data_) = v407;
              *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 4) = (std::string::size_type)v121;
              WORD2(v449.__r_.__value_.__r.__words[1]) = 2049;
              *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 6) = v122;
              HIWORD(v449.__r_.__value_.__r.__words[2]) = 1025;
              v450 = v123;
              LODWORD(v406) = 28;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v120, 2, "FenceCal: devaluing, fence, %{private}s, result.fChosenAPs, %{private}lu, isExit, %{private}d", &v449, *(_QWORD *)&v406);
              v125 = v124;
              if (v448 < 0)
                operator delete(*(void **)v447);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v125);
              if (v125 != buf)
                free(v125);
            }
          }
          sub_100008848((uint64_t)v431, (_QWORD *)v431[1]);
        }
      }
      v63 += 96;
    }
    while (v63 != v62);
  }
  v423 = 0;
  v413 = 0;
  *(_QWORD *)&v61 = 136316162;
  v412 = v61;
  do
  {
    v126 = *v411;
    v414 = v411[1];
    if (*v411 == v414)
    {
      v129 = 0;
      v128 = 0;
      v127 = 0;
    }
    else
    {
      v127 = 0;
      v128 = 0;
      v129 = 0;
      do
      {
        if (*(char *)(v126 + 55) >= 0)
          v130 = *(unsigned __int8 *)(v126 + 55);
        else
          v130 = *(_QWORD *)(v126 + 40);
        sub_100259584((uint64_t)buf, v130 + 1);
        if (buf[23] >= 0)
          v131 = buf;
        else
          v131 = *(_BYTE **)buf;
        if (v130)
        {
          if (*(char *)(v126 + 55) >= 0)
            v132 = (const void *)(v126 + 32);
          else
            v132 = *(const void **)(v126 + 32);
          memmove(v131, v132, v130);
        }
        *(_WORD *)&v131[v130] = 47;
        v133 = *(char *)(v126 + 79);
        if (v133 >= 0)
          v134 = (const std::string::value_type *)(v126 + 56);
        else
          v134 = *(const std::string::value_type **)(v126 + 56);
        if (v133 >= 0)
          v135 = *(unsigned __int8 *)(v126 + 79);
        else
          v135 = *(_QWORD *)(v126 + 64);
        v136 = std::string::append((std::string *)buf, v134, v135);
        v61 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
        v449.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v449.__r_.__value_.__l.__data_ = v61;
        v136->__r_.__value_.__l.__size_ = 0;
        v136->__r_.__value_.__r.__words[2] = 0;
        v136->__r_.__value_.__r.__words[0] = 0;
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (*(int *)(v126 + 480) >= 1)
        {
          v137 = 0;
          v139 = v413 < a3 && v129 < a3;
          do
          {
            v140 = *(_DWORD *)(v126 + 392);
            v141 = *(_QWORD *)(v126 + 368);
            if ((v140 & 0x80000000) != 0)
              v142 = 0.0;
            else
              v142 = *(double *)(v141 + 40 * v140 + 8);
            v143 = *(_DWORD *)(v126 + 472);
            v144 = v140 + v143;
            v145 = -1.0;
            if (v144 < (int)(-858993459 * ((unint64_t)(*(_QWORD *)(v126 + 376) - v141) >> 3)))
              v145 = *(double *)(v141 + 40 * v144 + 8);
            if (byte_1022FAAA8)
              v146 = byte_102311408 == 0;
            else
              v146 = 1;
            if (!v146)
            {
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10217C430);
              v147 = qword_1022A0068;
              if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
              {
                v148 = &v449;
                if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v148 = (std::string *)v449.__r_.__value_.__r.__words[0];
                v149 = *(_DWORD *)(v126 + 480);
                *(_DWORD *)buf = 136317186;
                *(_QWORD *)&buf[4] = v148;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v423;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v137;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v149;
                *(_WORD *)&buf[30] = 2048;
                *(double *)&buf[32] = v142;
                *(_WORD *)&buf[40] = 2048;
                *(double *)&buf[42] = v145;
                *(_WORD *)&buf[50] = 2048;
                *(double *)&buf[52] = a9;
                *(_WORD *)&buf[60] = 1024;
                *(_DWORD *)&buf[62] = v129;
                *(_WORD *)&buf[66] = 1024;
                *(_DWORD *)&buf[68] = a3;
                _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEBUG, "FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, score, %+.4lf, newScore, %+.4lf, minScoreThresh, %+.4lf, totalChosenAps, %d, apsBudget, %d", buf, 0x48u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0060 != -1)
                  dispatch_once(&qword_1022A0060, &stru_10217C430);
                v167 = &v449;
                if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v167 = (std::string *)v449.__r_.__value_.__r.__words[0];
                v168 = *(_DWORD *)(v126 + 480);
                *(_DWORD *)v451 = 136317186;
                *(_QWORD *)&v451[4] = v167;
                *(_WORD *)&v451[12] = 1024;
                *(_DWORD *)&v451[14] = v423;
                *(_WORD *)&v451[18] = 1024;
                *(_DWORD *)&v451[20] = v137;
                *(_WORD *)&v451[24] = 1024;
                *(_DWORD *)&v451[26] = v168;
                *(_WORD *)&v451[30] = 2048;
                *(double *)&v451[32] = v142;
                *(_WORD *)&v451[40] = 2048;
                *(double *)&v451[42] = v145;
                *(_WORD *)&v451[50] = 2048;
                *(double *)&v451[52] = a9;
                *(_WORD *)&v451[60] = 1024;
                *(_DWORD *)&v451[62] = v129;
                *(_WORD *)&v451[66] = 1024;
                *(_DWORD *)&v451[68] = a3;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, score, %+.4lf, newScore, %+.4lf, minScoreThresh, %+.4lf, totalChosenAps, %d, apsBudget, %d", v451, 72, (_DWORD)v407, DWORD2(v407), *(double *)&v408, *((double *)&v408 + 1), v410, (_DWORD)v411, (_DWORD)v412);
                v170 = (char *)v169;
                sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v169);
                if (v170 != buf)
                  free(v170);
              }
            }
            v150 = v142 < a9 && v139;
            v151 = *(_DWORD *)(v126 + 392);
            if (v150
              && (v152 = *(_QWORD *)(v126 + 368),
                  v153 = -858993459 * ((unint64_t)(*(_QWORD *)(v126 + 376) - v152) >> 3),
                  (int)(v151 + v143) < v153))
            {
              if (vabdd_f64(v145, v142) <= 0.005)
              {
                if ((v151 & 0x80000000) != 0)
                  v128 = 0;
                else
                  v128 = *(_QWORD *)(v152 + 40 * v151);
                v159 = *(_DWORD *)(v126 + 472);
                if (v159 < v153)
                {
                  *(_DWORD *)(v126 + 472) = v159 + 1;
                  if (byte_1022FAAA8)
                  {
                    if (qword_1022A0060 != -1)
                      dispatch_once(&qword_1022A0060, &stru_10217C430);
                    v160 = qword_1022A0068;
                    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
                    {
                      v161 = &v449;
                      if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v161 = (std::string *)v449.__r_.__value_.__r.__words[0];
                      v162 = *(_DWORD *)(v126 + 472);
                      *(_DWORD *)buf = v412;
                      *(_QWORD *)&buf[4] = v161;
                      *(_WORD *)&buf[12] = 2048;
                      *(double *)&buf[14] = v142;
                      *(_WORD *)&buf[22] = 2048;
                      *(double *)&buf[24] = v145;
                      *(_WORD *)&buf[32] = 2048;
                      *(_QWORD *)&buf[34] = 0x3F747AE147AE147BLL;
                      *(_WORD *)&buf[42] = 1024;
                      *(_DWORD *)&buf[44] = v162;
                      _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEBUG, "FenceCal: fence, %s, score too close, currentScore, %lf, newScore, %lf, significantUpdateThresh, %lf, updating next step to, %d", buf, 0x30u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0060 != -1)
                        dispatch_once(&qword_1022A0060, &stru_10217C430);
                      v176 = &v449;
                      if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v176 = (std::string *)v449.__r_.__value_.__r.__words[0];
                      v177 = *(_DWORD *)(v126 + 472);
                      *(_DWORD *)v451 = v412;
                      *(_QWORD *)&v451[4] = v176;
                      *(_WORD *)&v451[12] = 2048;
                      *(double *)&v451[14] = v142;
                      *(_WORD *)&v451[22] = 2048;
                      *(double *)&v451[24] = v145;
                      *(_WORD *)&v451[32] = 2048;
                      *(_QWORD *)&v451[34] = 0x3F747AE147AE147BLL;
                      *(_WORD *)&v451[42] = 1024;
                      *(_DWORD *)&v451[44] = v177;
                      LODWORD(v406) = 48;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: fence, %s, score too close, currentScore, %lf, newScore, %lf, significantUpdateThresh, %lf, updating next step to, %d", v451, v406, *(double *)&v407, *((double *)&v407 + 1), (_DWORD)v408);
                      v179 = (char *)v178;
                      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v178);
                      if (v179 != buf)
                        free(v179);
                    }
                  }
                  v127 = 1;
                }
              }
              else
              {
                if (byte_1022FAAA8)
                {
                  if (qword_1022A0060 != -1)
                    dispatch_once(&qword_1022A0060, &stru_10217C430);
                  v154 = qword_1022A0068;
                  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
                  {
                    v155 = &v449;
                    if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v155 = (std::string *)v449.__r_.__value_.__r.__words[0];
                    v156 = *(_DWORD *)(v126 + 392);
                    v157 = *(_QWORD *)(v126 + 368);
                    if (v156 < 1)
                      v158 = 0;
                    else
                      v158 = *(_QWORD *)(v157 + 40 * v156);
                    v163 = *(_DWORD *)(v126 + 480);
                    v164 = v156 + v143;
                    v165 = *(_QWORD *)(v157 + 40 * v164);
                    *(_DWORD *)buf = 136317698;
                    *(_QWORD *)&buf[4] = v155;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v423;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v137;
                    *(_WORD *)&buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v163;
                    *(_WORD *)&buf[30] = 2048;
                    *(double *)&buf[32] = v142;
                    *(_WORD *)&buf[40] = 2048;
                    *(double *)&buf[42] = v145;
                    *(_WORD *)&buf[50] = 2048;
                    *(_QWORD *)&buf[52] = v158;
                    *(_WORD *)&buf[60] = 2048;
                    *(_QWORD *)&buf[62] = v165;
                    *(_WORD *)&buf[70] = 1024;
                    *(_DWORD *)&buf[72] = v164;
                    *(_WORD *)&buf[76] = 1024;
                    *(_DWORD *)&buf[78] = v129;
                    *(_WORD *)&buf[82] = 1024;
                    *(_DWORD *)&buf[84] = a3;
                    _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEBUG, "FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, upgrading score from, %.4lf, to, %.4lf, from, %4zu, to, %4zu, APs, index, %2d, totalChosenAps, %d, apsBudget, %d", buf, 0x58u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0060 != -1)
                      dispatch_once(&qword_1022A0060, &stru_10217C430);
                    v171 = (std::string *)v449.__r_.__value_.__r.__words[0];
                    if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v171 = &v449;
                    v172 = *(_DWORD *)(v126 + 480);
                    v173 = *(_DWORD *)(v126 + 392);
                    v174 = *(_QWORD *)(v126 + 368);
                    if (v173 < 1)
                      v175 = 0;
                    else
                      v175 = *(_QWORD *)(v174 + 40 * v173);
                    v180 = v173 + v143;
                    v181 = *(_QWORD *)(v174 + 40 * v180);
                    *(_DWORD *)v451 = 136317698;
                    *(_QWORD *)&v451[4] = v171;
                    *(_WORD *)&v451[12] = 1024;
                    *(_DWORD *)&v451[14] = v423;
                    *(_WORD *)&v451[18] = 1024;
                    *(_DWORD *)&v451[20] = v137;
                    *(_WORD *)&v451[24] = 1024;
                    *(_DWORD *)&v451[26] = v172;
                    *(_WORD *)&v451[30] = 2048;
                    *(double *)&v451[32] = v142;
                    *(_WORD *)&v451[40] = 2048;
                    *(double *)&v451[42] = v145;
                    *(_WORD *)&v451[50] = 2048;
                    *(_QWORD *)&v451[52] = v175;
                    *(_WORD *)&v451[60] = 2048;
                    *(_QWORD *)&v451[62] = v181;
                    *(_WORD *)&v451[70] = 1024;
                    *(_DWORD *)&v451[72] = v180;
                    *(_WORD *)&v451[76] = 1024;
                    *(_DWORD *)&v451[78] = v129;
                    *(_WORD *)&v451[82] = 1024;
                    *(_DWORD *)&v451[84] = a3;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, upgrading score from, %.4lf, to, %.4lf, from, %4zu, to, %4zu, APs, index, %2d, totalChosenAps, %d, apsBudget, %d", v451, 88, (_DWORD)v407, DWORD2(v407), *(double *)&v408, *((double *)&v408 + 1), *(size_t *)&v410, (size_t)v411, (_DWORD)v412, DWORD2(v412),
                      v413);
                    v183 = (char *)v182;
                    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v182);
                    if (v183 != buf)
                      free(v183);
                  }
                }
                v166 = *(_DWORD *)(v126 + 392) + v143;
                *(_DWORD *)(v126 + 392) = v166;
                v128 = *(_QWORD *)(*(_QWORD *)(v126 + 368) + 40 * v166);
                v127 = 1;
                *(_DWORD *)(v126 + 472) = 1;
              }
            }
            else if ((v151 & 0x80000000) != 0)
            {
              v128 = 0;
            }
            else
            {
              v128 = *(_QWORD *)(*(_QWORD *)(v126 + 368) + 40 * v151);
            }
            ++v137;
          }
          while (v137 < *(_DWORD *)(v126 + 480));
        }
        if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v449.__r_.__value_.__l.__data_);
        v129 += v128;
        v126 += 504;
      }
      while (v126 != v414);
    }
    v413 = v129;
    if (byte_1022FAAA8)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v184 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v423;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v129;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v129;
        *(_WORD *)&buf[20] = 2048;
        *(_QWORD *)&buf[22] = v128;
        _os_log_impl((void *)&_mh_execute_header, v184, OS_LOG_TYPE_DEBUG, "FenceCal: passNum, %d, commitedAPs, %d, totalChosenAps, %d, numOfAps, %zu", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        *(_DWORD *)v451 = 67109888;
        *(_DWORD *)&v451[4] = v423;
        *(_WORD *)&v451[8] = 1024;
        *(_DWORD *)&v451[10] = v129;
        *(_WORD *)&v451[14] = 1024;
        *(_DWORD *)&v451[16] = v129;
        *(_WORD *)&v451[20] = 2048;
        *(_QWORD *)&v451[22] = v128;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: passNum, %d, commitedAPs, %d, totalChosenAps, %d, numOfAps, %zu", v451, 30, (_DWORD)v407, *((size_t *)&v407 + 1));
        v186 = (char *)v185;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v185);
        if (v186 != buf)
          free(v186);
      }
    }
    ++v423;
  }
  while ((v127 & 1) != 0);
  v187 = *v411;
  v188 = v411[1];
  if (*v411 != v188)
  {
    v189 = 0;
    v190 = 0;
    while (1)
    {
      v191 = *(_DWORD *)(v187 + 392);
      if ((v191 & 0x80000000) != 0)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v211 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          sub_100C3B9BC(v187 + 32, buf);
          v212 = buf;
          if (buf[23] < 0)
            v212 = *(_BYTE **)buf;
          *(_DWORD *)v451 = 136380675;
          *(_QWORD *)&v451[4] = v212;
          _os_log_impl((void *)&_mh_execute_header, v211, OS_LOG_TYPE_DEBUG, "FenceCal: group result, %{private}30s, can't be monitored", v451, 0xCu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_324;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v213 = qword_1022A0068;
        sub_100C3B9BC(v187 + 32, v451);
        v214 = v451;
        if (v451[23] < 0)
          v214 = *(_BYTE **)v451;
        LODWORD(v449.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 4) = (std::string::size_type)v214;
        LODWORD(v406) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v213, 2, "FenceCal: group result, %{private}30s, can't be monitored", &v449, *(_QWORD *)&v406);
        v210 = v215;
        if ((v451[23] & 0x80000000) != 0)
          operator delete(*(void **)v451);
      }
      else
      {
        v192 = *(_DWORD *)(*(_QWORD *)(v187 + 368) + 40 * v191);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v190 += v192;
        v193 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          sub_100C3B9BC(v187 + 32, v451);
          v194 = v451;
          if (v451[23] < 0)
            v194 = *(_BYTE **)v451;
          v195 = 0xEFBEFBEFBEFBEFBFLL * ((v411[1] - *v411) >> 3);
          v196 = *(_DWORD *)(v187 + 392);
          v197 = (uint64_t *)(*(_QWORD *)(v187 + 368) + 40 * v196);
          v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v187 + 352) - *(_QWORD *)(v187 + 344)) >> 5);
          v200 = *v197;
          v199 = v197[1];
          *(_DWORD *)buf = 136382979;
          *(_QWORD *)&buf[4] = v194;
          *(_WORD *)&buf[12] = 1025;
          *(_DWORD *)&buf[14] = v129;
          *(_WORD *)&buf[18] = 1025;
          *(_DWORD *)&buf[20] = a3;
          *(_WORD *)&buf[24] = 2049;
          *(_QWORD *)&buf[26] = v189;
          *(_WORD *)&buf[34] = 2049;
          *(_QWORD *)&buf[36] = v195;
          *(_WORD *)&buf[44] = 2049;
          *(_QWORD *)&buf[46] = v200;
          *(_WORD *)&buf[54] = 2049;
          *(_QWORD *)&buf[56] = v198;
          *(_WORD *)&buf[64] = 2049;
          *(_QWORD *)&buf[66] = v199;
          *(_WORD *)&buf[74] = 1025;
          *(_DWORD *)&buf[76] = v196;
          *(_WORD *)&buf[80] = 1025;
          *(_DWORD *)&buf[82] = v190;
          _os_log_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_DEBUG, "FenceCal: group result, %{private}30s, totalChosenAps, %{private}4d, apsBudget, %{private}4d, index, %{private}4zu , %{private}4zu, aps, %{private}4zu, %{private}4zu, score, %{private}.2lf, index, %{private}4d, dbgCounter, %{private}4d", buf, 0x56u);
          if ((v451[23] & 0x80000000) != 0)
            operator delete(*(void **)v451);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_324;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v201 = qword_1022A0068;
        sub_100C3B9BC(v187 + 32, &v449);
        v202 = &v449;
        if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v202 = (std::string *)v449.__r_.__value_.__r.__words[0];
        v203 = 0xEFBEFBEFBEFBEFBFLL * ((v411[1] - *v411) >> 3);
        v204 = *(_DWORD *)(v187 + 392);
        v205 = (uint64_t *)(*(_QWORD *)(v187 + 368) + 40 * v204);
        v206 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v187 + 352) - *(_QWORD *)(v187 + 344)) >> 5);
        v208 = *v205;
        v207 = v205[1];
        *(_DWORD *)v451 = 136382979;
        *(_QWORD *)&v451[4] = v202;
        *(_WORD *)&v451[12] = 1025;
        *(_DWORD *)&v451[14] = v129;
        *(_WORD *)&v451[18] = 1025;
        *(_DWORD *)&v451[20] = a3;
        *(_WORD *)&v451[24] = 2049;
        *(_QWORD *)&v451[26] = v189;
        *(_WORD *)&v451[34] = 2049;
        *(_QWORD *)&v451[36] = v203;
        *(_WORD *)&v451[44] = 2049;
        *(_QWORD *)&v451[46] = v208;
        *(_WORD *)&v451[54] = 2049;
        *(_QWORD *)&v451[56] = v206;
        *(_WORD *)&v451[64] = 2049;
        *(_QWORD *)&v451[66] = v207;
        *(_WORD *)&v451[74] = 1025;
        *(_DWORD *)&v451[76] = v204;
        *(_WORD *)&v451[80] = 1025;
        *(_DWORD *)&v451[82] = v190;
        LODWORD(v406) = 86;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v201, 2, "FenceCal: group result, %{private}30s, totalChosenAps, %{private}4d, apsBudget, %{private}4d, index, %{private}4zu , %{private}4zu, aps, %{private}4zu, %{private}4zu, score, %{private}.2lf, index, %{private}4d, dbgCounter, %{private}4d", v451, *(_QWORD *)&v406);
        v210 = v209;
        if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v449.__r_.__value_.__l.__data_);
      }
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v210);
      if (v210 != buf)
        free(v210);
LABEL_324:
      ++v189;
      v187 += 504;
      if (v187 == v188)
      {
        v216 = *v411;
        v424 = v411[1];
        if (*v411 != v424)
        {
          do
          {
            if ((*(_DWORD *)(v216 + 392) & 0x80000000) != 0)
            {
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10217C430);
              v235 = qword_1022A0068;
              if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
              {
                sub_100C3B9BC(v216 + 32, buf);
                v236 = buf;
                if (buf[23] < 0)
                  v236 = *(_BYTE **)buf;
                v237 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v216 + 352) - *(_QWORD *)(v216 + 344)) >> 5);
                *(_DWORD *)v451 = 136380931;
                *(_QWORD *)&v451[4] = v236;
                *(_WORD *)&v451[12] = 2050;
                *(_QWORD *)&v451[14] = v237;
                _os_log_impl((void *)&_mh_execute_header, v235, OS_LOG_TYPE_DEFAULT, "#Warning FenceCal: no score for, %{private}s, fChosenAps, %{public}4zu", v451, 0x16u);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0060 != -1)
                  dispatch_once(&qword_1022A0060, &stru_10217C430);
                v238 = qword_1022A0068;
                sub_100C3B9BC(v216 + 32, v451);
                v239 = v451;
                if (v451[23] < 0)
                  v239 = *(_BYTE **)v451;
                v240 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v216 + 352) - *(_QWORD *)(v216 + 344)) >> 5);
                LODWORD(v449.__r_.__value_.__l.__data_) = 136380931;
                *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 4) = (std::string::size_type)v239;
                WORD2(v449.__r_.__value_.__r.__words[1]) = 2050;
                *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 6) = v240;
                LODWORD(v406) = 22;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v238, 0, "#Warning FenceCal: no score for, %{private}s, fChosenAps, %{public}4zu", &v449, *(_QWORD *)&v406);
                v242 = v241;
                if ((v451[23] & 0x80000000) != 0)
                  operator delete(*(void **)v451);
                sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v242);
                if (v242 != buf)
                  free(v242);
              }
            }
            else
            {
              v217 = sub_100C72148(v216);
              if (byte_1022FAAA8)
                v218 = byte_102311408 == 0;
              else
                v218 = 1;
              if (!v218)
              {
                if (qword_1022A0060 != -1)
                  dispatch_once(&qword_1022A0060, &stru_10217C430);
                v219 = qword_1022A0068;
                if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
                {
                  v220 = (_QWORD *)(v216 + 56);
                  if (*(char *)(v216 + 79) < 0)
                    v220 = (_QWORD *)*v220;
                  v221 = *(_DWORD *)(v216 + 392);
                  v222 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v216 + 352) - *(_QWORD *)(v216 + 344)) >> 5);
                  v223 = *v217;
                  v224 = v217[1];
                  *(_DWORD *)buf = v412;
                  *(_QWORD *)&buf[4] = v220;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v221;
                  *(_WORD *)&buf[18] = 2048;
                  *(_QWORD *)&buf[20] = v223;
                  *(_WORD *)&buf[28] = 2048;
                  *(_QWORD *)&buf[30] = v222;
                  *(_WORD *)&buf[38] = 2048;
                  *(_QWORD *)&buf[40] = v224;
                  _os_log_impl((void *)&_mh_execute_header, v219, OS_LOG_TYPE_DEBUG, "FenceCal: chosenScore, %-16s, fChosenScoreIndex, %4d, numOfAps, %4zu, %4zu, score, %.2lf", buf, 0x30u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0060 != -1)
                    dispatch_once(&qword_1022A0060, &stru_10217C430);
                  v243 = (_QWORD *)(v216 + 56);
                  if (*(char *)(v216 + 79) < 0)
                    v243 = (_QWORD *)*v243;
                  v244 = *(_DWORD *)(v216 + 392);
                  v245 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v216 + 352) - *(_QWORD *)(v216 + 344)) >> 5);
                  v246 = *v217;
                  v247 = v217[1];
                  *(_DWORD *)v451 = v412;
                  *(_QWORD *)&v451[4] = v243;
                  *(_WORD *)&v451[12] = 1024;
                  *(_DWORD *)&v451[14] = v244;
                  *(_WORD *)&v451[18] = 2048;
                  *(_QWORD *)&v451[20] = v246;
                  *(_WORD *)&v451[28] = 2048;
                  *(_QWORD *)&v451[30] = v245;
                  *(_WORD *)&v451[38] = 2048;
                  *(_QWORD *)&v451[40] = v247;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: chosenScore, %-16s, fChosenScoreIndex, %4d, numOfAps, %4zu, %4zu, score, %.2lf", v451, 48, (size_t)v407, *((size_t *)&v407 + 1), *(double *)&v408);
                  v249 = (char *)v248;
                  sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v248);
                  if (v249 != buf)
                    free(v249);
                }
              }
              if (*v217)
              {
                v225 = 0;
                v226 = *(_QWORD *)(v216 + 344);
                v227 = (unsigned __int8 *)(v216 + 288);
                do
                {
                  v228 = *(_QWORD *)(v216 + 352);
                  if (v226 == v228)
                    break;
                  if (0xAAAAAAAAAAAAAAABLL * ((v228 - *(_QWORD *)(v216 + 344)) >> 5) >= 6)
                    v229 = &v438;
                  else
                    v229 = (uint64_t **)&v436;
                  v230 = v216 + 56;
                  if (*(char *)(v216 + 79) < 0)
                    v230 = *(_QWORD *)(v216 + 56);
                  if (sub_100C6D078(v226, *(_BYTE *)(v216 + 476) != 0, (uint64_t)a7, (uint64_t)a8, a3, (uint64_t)v229, v416, v230))
                  {
                    v231 = *(unsigned __int8 **)(v216 + 280);
                    if (v231 != v227)
                    {
                      do
                      {
                        v232 = sub_10016FC40((uint64_t)a6, v231 + 32);
                        if (a6 + 1 == (uint64_t **)v232)
                        {
                          *(_QWORD *)buf = v231 + 32;
                          *((_DWORD *)sub_100C75504(a6, v231 + 32, (uint64_t)&unk_101B9EB60, (__int128 **)buf) + 70) = 1;
                        }
                        else
                        {
                          ++*(_DWORD *)(v232 + 280);
                        }
                        v233 = (unsigned __int8 *)*((_QWORD *)v231 + 1);
                        if (v233)
                        {
                          do
                          {
                            v234 = v233;
                            v233 = *(unsigned __int8 **)v233;
                          }
                          while (v233);
                        }
                        else
                        {
                          do
                          {
                            v234 = (unsigned __int8 *)*((_QWORD *)v231 + 2);
                            v69 = *(_QWORD *)v234 == (_QWORD)v231;
                            v231 = v234;
                          }
                          while (!v69);
                        }
                        v231 = v234;
                      }
                      while (v234 != v227);
                    }
                  }
                  v226 += 96;
                  ++v225;
                }
                while (v225 < *v217);
              }
            }
            v216 += 504;
          }
          while (v216 != v424);
        }
        break;
      }
    }
  }
  *(_QWORD *)&v61 = 134349313;
  v409 = v61;
  do
  {
    if (a8[2] + a7[2] >= (unint64_t)a3)
      break;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v250 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v251 = a8[2] + a7[2];
      *(_DWORD *)buf = v409;
      *(_QWORD *)&buf[4] = v251;
      *(_WORD *)&buf[12] = 1025;
      *(_DWORD *)&buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v250, OS_LOG_TYPE_DEBUG, "FenceCal: topping, %{public}zu, apsBudget, %{private}u", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v313 = a8[2] + a7[2];
      *(_DWORD *)v451 = v409;
      *(_QWORD *)&v451[4] = v313;
      *(_WORD *)&v451[12] = 1025;
      *(_DWORD *)&v451[14] = a3;
      LODWORD(v406) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: topping, %{public}zu, apsBudget, %{private}u", v451, *(_QWORD *)&v406);
      v315 = (char *)v314;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v314);
      if (v315 != buf)
        free(v315);
    }
    v253 = *v411;
    v252 = v411[1];
    if (*v411 == v252)
    {
      v254 = 0;
    }
    else
    {
      v254 = 0;
      v415 = v411[1];
      do
      {
        v255 = *(_DWORD *)(v253 + 392);
        if ((v255 & 0x80000000) == 0)
        {
          v256 = v255 + 1;
          if (v256 < (int)(-858993459 * ((*(_QWORD *)(v253 + 376) - *(_QWORD *)(v253 + 368)) >> 3)))
          {
            *(_DWORD *)(v253 + 392) = v256;
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            v257 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(v253 + 55) >= 0)
                v258 = *(unsigned __int8 *)(v253 + 55);
              else
                v258 = *(_QWORD *)(v253 + 40);
              sub_100259584((uint64_t)v451, v258 + 1);
              if (v451[23] >= 0)
                v259 = v451;
              else
                v259 = *(_BYTE **)v451;
              if (v258)
              {
                if (*(char *)(v253 + 55) >= 0)
                  v260 = (const void *)(v253 + 32);
                else
                  v260 = *(const void **)(v253 + 32);
                memmove(v259, v260, v258);
              }
              *(_WORD *)&v259[v258] = 47;
              v261 = *(char *)(v253 + 79);
              if (v261 >= 0)
                v262 = (const std::string::value_type *)(v253 + 56);
              else
                v262 = *(const std::string::value_type **)(v253 + 56);
              if (v261 >= 0)
                v263 = *(unsigned __int8 *)(v253 + 79);
              else
                v263 = *(_QWORD *)(v253 + 64);
              v264 = std::string::append((std::string *)v451, v262, v263);
              v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
              v449.__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v449.__r_.__value_.__l.__data_ = v265;
              v264->__r_.__value_.__l.__size_ = 0;
              v264->__r_.__value_.__r.__words[2] = 0;
              v264->__r_.__value_.__r.__words[0] = 0;
              if ((v451[23] & 0x80000000) != 0)
                operator delete(*(void **)v451);
              v266 = &v449;
              if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v266 = (std::string *)v449.__r_.__value_.__r.__words[0];
              v267 = *(_DWORD *)(v253 + 392);
              v268 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v253 + 376) - *(_QWORD *)(v253 + 368)) >> 3);
              *(_DWORD *)buf = 136381187;
              *(_QWORD *)&buf[4] = v266;
              *(_WORD *)&buf[12] = 1025;
              *(_DWORD *)&buf[14] = v267;
              *(_WORD *)&buf[18] = 2049;
              *(_QWORD *)&buf[20] = v268;
              _os_log_impl((void *)&_mh_execute_header, v257, OS_LOG_TYPE_DEBUG, "FenceCal: Topping, %{private}s, fChosenScoreIndex, %{private}d, total, %{private}zu", buf, 0x1Cu);
              if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v449.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10217C430);
              v293 = qword_1022A0068;
              if (*(char *)(v253 + 55) >= 0)
                v294 = *(unsigned __int8 *)(v253 + 55);
              else
                v294 = *(_QWORD *)(v253 + 40);
              sub_100259584((uint64_t)&v449, v294 + 1);
              if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v295 = &v449;
              else
                v295 = (std::string *)v449.__r_.__value_.__r.__words[0];
              if (v294)
              {
                if (*(char *)(v253 + 55) >= 0)
                  v296 = (const void *)(v253 + 32);
                else
                  v296 = *(const void **)(v253 + 32);
                memmove(v295, v296, v294);
              }
              *(_WORD *)((char *)&v295->__r_.__value_.__l.__data_ + v294) = 47;
              v297 = *(char *)(v253 + 79);
              if (v297 >= 0)
                v298 = (const std::string::value_type *)(v253 + 56);
              else
                v298 = *(const std::string::value_type **)(v253 + 56);
              if (v297 >= 0)
                v299 = *(unsigned __int8 *)(v253 + 79);
              else
                v299 = *(_QWORD *)(v253 + 64);
              v300 = std::string::append(&v449, v298, v299);
              v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
              v432 = v300->__r_.__value_.__r.__words[2];
              *(_OWORD *)v431 = v301;
              v300->__r_.__value_.__l.__size_ = 0;
              v300->__r_.__value_.__r.__words[2] = 0;
              v300->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v449.__r_.__value_.__l.__data_);
              v302 = v431;
              if (v432 < 0)
                v302 = (void **)v431[0];
              v303 = *(_DWORD *)(v253 + 392);
              v304 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v253 + 376) - *(_QWORD *)(v253 + 368)) >> 3);
              *(_DWORD *)v451 = 136381187;
              *(_QWORD *)&v451[4] = v302;
              *(_WORD *)&v451[12] = 1025;
              *(_DWORD *)&v451[14] = v303;
              *(_WORD *)&v451[18] = 2049;
              *(_QWORD *)&v451[20] = v304;
              LODWORD(v406) = 28;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v293, 2, "FenceCal: Topping, %{private}s, fChosenScoreIndex, %{private}d, total, %{private}zu", v451, *(_QWORD *)&v406);
              v306 = v305;
              if (SHIBYTE(v432) < 0)
                operator delete(v431[0]);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v306);
              if (v306 != buf)
                free(v306);
            }
            v269 = *(int *)(v253 + 392);
            v270 = *(_QWORD *)(v253 + 368);
            if (*(char *)(v253 + 55) >= 0)
              v271 = *(unsigned __int8 *)(v253 + 55);
            else
              v271 = *(_QWORD *)(v253 + 40);
            sub_100259584((uint64_t)buf, v271 + 1);
            if (buf[23] >= 0)
              v272 = buf;
            else
              v272 = *(_BYTE **)buf;
            if (v271)
            {
              if (*(char *)(v253 + 55) >= 0)
                v273 = (const void *)(v253 + 32);
              else
                v273 = *(const void **)(v253 + 32);
              memmove(v272, v273, v271);
            }
            *(_WORD *)&v272[v271] = 47;
            v274 = *(char *)(v253 + 79);
            if (v274 >= 0)
              v275 = (const std::string::value_type *)(v253 + 56);
            else
              v275 = *(const std::string::value_type **)(v253 + 56);
            if (v274 >= 0)
              v276 = *(unsigned __int8 *)(v253 + 79);
            else
              v276 = *(_QWORD *)(v253 + 64);
            v277 = std::string::append((std::string *)buf, v275, v276);
            v420 = (void *)v277->__r_.__value_.__r.__words[0];
            v278 = SHIBYTE(v277->__r_.__value_.__r.__words[2]);
            v277->__r_.__value_.__r.__words[0] = 0;
            v277->__r_.__value_.__l.__size_ = 0;
            v277->__r_.__value_.__r.__words[2] = 0;
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v425 = v278;
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10217C430);
            v279 = (unint64_t *)(v270 + 40 * (int)v269);
            v280 = (unint64_t *)(v270 + 40 * (int)(v269 - (v269 > 0)));
            v281 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              v282 = *v280;
              v283 = *v279;
              *(_DWORD *)buf = 134283777;
              *(_QWORD *)&buf[4] = v282;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v283;
              _os_log_impl((void *)&_mh_execute_header, v281, OS_LOG_TYPE_DEBUG, "FenceCal: topping, from APs, %{private}zu, to APs, %{private}zu", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10217C430);
              v307 = *v280;
              v308 = *v279;
              *(_DWORD *)v451 = 134283777;
              *(_QWORD *)&v451[4] = v307;
              *(_WORD *)&v451[12] = 2049;
              *(_QWORD *)&v451[14] = v308;
              LODWORD(v406) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: topping, from APs, %{private}zu, to APs, %{private}zu", v451, *(_QWORD *)&v406);
              v310 = (char *)v309;
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v309);
              if (v310 != buf)
                free(v310);
            }
            v284 = *v280;
            if (v284 < *v279)
            {
              v285 = *(_QWORD *)(v253 + 344) + 96 * v284;
              v286 = (unsigned __int8 *)(v253 + 288);
              do
              {
                if (v285 == *(_QWORD *)(v253 + 352))
                  break;
                v287 = v253 + 56;
                if (*(char *)(v253 + 79) < 0)
                  v287 = *(_QWORD *)(v253 + 56);
                if (sub_100C6D078(v285, *(_BYTE *)(v253 + 476) != 0, (uint64_t)a7, (uint64_t)a8, a3, (uint64_t)&v438, v416, v287))
                {
                  v288 = *(unsigned __int8 **)(v253 + 280);
                  if (v288 != v286)
                  {
                    do
                    {
                      v289 = sub_10016FC40((uint64_t)a6, v288 + 32);
                      if (a6 + 1 == (uint64_t **)v289)
                      {
                        *(_QWORD *)buf = v288 + 32;
                        v289 = (uint64_t)sub_100C75504(a6, v288 + 32, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
                        v290 = 1;
                      }
                      else
                      {
                        v290 = *(_DWORD *)(v289 + 280) + 1;
                      }
                      *(_DWORD *)(v289 + 280) = v290;
                      v291 = (unsigned __int8 *)*((_QWORD *)v288 + 1);
                      if (v291)
                      {
                        do
                        {
                          v292 = v291;
                          v291 = *(unsigned __int8 **)v291;
                        }
                        while (v291);
                      }
                      else
                      {
                        do
                        {
                          v292 = (unsigned __int8 *)*((_QWORD *)v288 + 2);
                          v69 = *(_QWORD *)v292 == (_QWORD)v288;
                          v288 = v292;
                        }
                        while (!v69);
                      }
                      v288 = v292;
                    }
                    while (v292 != v286);
                  }
                }
                ++v284;
                v285 += 96;
              }
              while (v284 < *v279);
            }
            if (v425 < 0)
              operator delete(v420);
            v254 = 1;
            v252 = v415;
          }
        }
        v253 += 504;
      }
      while (v253 != v252);
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v311 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v312 = a8[2] + a7[2];
      *(_DWORD *)buf = 134283777;
      *(_QWORD *)&buf[4] = v312;
      *(_WORD *)&buf[12] = 1025;
      *(_DWORD *)&buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v311, OS_LOG_TYPE_DEBUG, "FenceCal: finised topping, %{private}zu, apsBudget, %{private}u", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v316 = a8[2] + a7[2];
      *(_DWORD *)v451 = 134283777;
      *(_QWORD *)&v451[4] = v316;
      *(_WORD *)&v451[12] = 1025;
      *(_DWORD *)&v451[14] = a3;
      LODWORD(v406) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: finised topping, %{private}zu, apsBudget, %{private}u", v451, *(_QWORD *)&v406);
      v318 = (char *)v317;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v317);
      if (v318 != buf)
        free(v318);
    }
  }
  while ((v254 & 1) != 0);
  v319 = *v411;
  v320 = v411[1];
  v321 = 1;
  if (*v411 == v320)
  {
    v360 = 1;
    v323 = 1;
LABEL_591:
    v361 = 1;
    goto LABEL_593;
  }
  v322 = 1;
  v323 = 1;
  do
  {
    if (!byte_1022FAAA8)
      goto LABEL_564;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v324 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v319 + 55) >= 0)
        v325 = *(unsigned __int8 *)(v319 + 55);
      else
        v325 = *(_QWORD *)(v319 + 40);
      sub_100259584((uint64_t)v451, v325 + 1);
      if (v451[23] >= 0)
        v326 = v451;
      else
        v326 = *(_BYTE **)v451;
      if (v325)
      {
        if (*(char *)(v319 + 55) >= 0)
          v327 = (const void *)(v319 + 32);
        else
          v327 = *(const void **)(v319 + 32);
        memmove(v326, v327, v325);
      }
      *(_WORD *)&v326[v325] = 47;
      v328 = *(char *)(v319 + 79);
      if (v328 >= 0)
        v329 = (const std::string::value_type *)(v319 + 56);
      else
        v329 = *(const std::string::value_type **)(v319 + 56);
      if (v328 >= 0)
        v330 = *(unsigned __int8 *)(v319 + 79);
      else
        v330 = *(_QWORD *)(v319 + 64);
      v331 = std::string::append((std::string *)v451, v329, v330);
      v332 = *(_OWORD *)&v331->__r_.__value_.__l.__data_;
      v449.__r_.__value_.__r.__words[2] = v331->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v449.__r_.__value_.__l.__data_ = v332;
      v331->__r_.__value_.__l.__size_ = 0;
      v331->__r_.__value_.__r.__words[2] = 0;
      v331->__r_.__value_.__r.__words[0] = 0;
      if ((v451[23] & 0x80000000) != 0)
        operator delete(*(void **)v451);
      v333 = 0;
      if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v334 = &v449;
      else
        v334 = (std::string *)v449.__r_.__value_.__r.__words[0];
      v335 = *(unsigned __int8 *)(v319 + 476);
      v336 = *(_DWORD *)(v319 + 392);
      v338 = *(_QWORD **)(v319 + 368);
      v337 = *(_QWORD **)(v319 + 376);
      v339 = *(_QWORD *)(v319 + 352) - *(_QWORD *)(v319 + 344);
      if (!v339)
        goto LABEL_554;
      v340 = 0;
      if (v337 == v338)
        goto LABEL_561;
      v333 = *v338 != 0;
      if (!*(_BYTE *)(v319 + 476))
      {
        if (*v338)
          v341 = v336 <= 0;
        else
          v341 = 1;
        v340 = !v341;
      }
      else
      {
LABEL_554:
        v340 = v333;
      }
LABEL_561:
      *(_DWORD *)buf = 136316930;
      *(_QWORD *)&buf[4] = v334;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v335;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v336;
      *(_WORD *)&buf[24] = 2048;
      *(_QWORD *)&buf[26] = 0xAAAAAAAAAAAAAAABLL * (v339 >> 5);
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = 0xCCCCCCCCCCCCCCCDLL * (v337 - v338);
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v333;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v340;
      *(_WORD *)&buf[56] = 1024;
      *(_DWORD *)&buf[58] = HIDWORD(v410);
      _os_log_impl((void *)&_mh_execute_header, v324, OS_LOG_TYPE_DEBUG, "FenceCal: fence, %s, isExit, %d, fChosenScoreIndex, %d, fChosenAPs, %zu, fChosenAPsScores, %zu, canBeMonitored, %d, canBeMonitoredInGroup, %d, numOfExitFences, %u", buf, 0x3Eu);
      if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v449.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v347 = qword_1022A0068;
      sub_100914D68((const void **)(v319 + 32), &v449);
      v348 = 0;
      if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v349 = &v449;
      else
        v349 = (std::string *)v449.__r_.__value_.__r.__words[0];
      v351 = *(_QWORD **)(v319 + 368);
      v350 = *(_QWORD **)(v319 + 376);
      v352 = *(_QWORD *)(v319 + 352) - *(_QWORD *)(v319 + 344);
      v428 = v347;
      v426 = v349;
      if (v352 && v350 != v351)
        v348 = *v351 != 0;
      v353 = *(unsigned __int8 *)(v319 + 476);
      v421 = *(_DWORD *)(v319 + 392);
      v354 = 0xAAAAAAAAAAAAAAABLL * (v352 >> 5);
      v355 = 0xCCCCCCCCCCCCCCCDLL * (v350 - v351);
      v356 = v348;
      v357 = sub_100C7234C(v319);
      *(_DWORD *)v451 = 136316930;
      *(_QWORD *)&v451[4] = v426;
      *(_WORD *)&v451[12] = 1024;
      *(_DWORD *)&v451[14] = v353;
      *(_WORD *)&v451[18] = 1024;
      *(_DWORD *)&v451[20] = v421;
      *(_WORD *)&v451[24] = 2048;
      *(_QWORD *)&v451[26] = v354;
      *(_WORD *)&v451[34] = 2048;
      *(_QWORD *)&v451[36] = v355;
      *(_WORD *)&v451[44] = 1024;
      *(_DWORD *)&v451[46] = v356;
      *(_WORD *)&v451[50] = 1024;
      *(_DWORD *)&v451[52] = v357;
      *(_WORD *)&v451[56] = 1024;
      *(_DWORD *)&v451[58] = HIDWORD(v410);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v428, 2, "FenceCal: fence, %s, isExit, %d, fChosenScoreIndex, %d, fChosenAPs, %zu, fChosenAPsScores, %zu, canBeMonitored, %d, canBeMonitoredInGroup, %d, numOfExitFences, %u", v451, 62, (_DWORD)v407, *((size_t *)&v407 + 1), (size_t)v409, DWORD2(v409), LODWORD(v410), (_DWORD)v411);
      v359 = v358;
      if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v449.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v359);
      if (v359 != buf)
        free(v359);
    }
LABEL_564:
    if (*(_QWORD *)(v319 + 352) == *(_QWORD *)(v319 + 344)
      || (v342 = *(uint64_t **)(v319 + 368), *(uint64_t **)(v319 + 376) == v342))
    {
      v323 = 0;
      v346 = 0;
      v345 = 0;
      LOBYTE(v344) = 0;
      if (*(_BYTE *)(v319 + 476))
        goto LABEL_569;
    }
    else
    {
      v343 = *v342;
      v344 = *v342 != 0;
      v323 &= v344;
      if (*(_BYTE *)(v319 + 476))
      {
        v345 = v322 & (v343 != 0);
LABEL_569:
        v321 &= v344;
        v322 = v345;
        goto LABEL_574;
      }
      if (v343)
        v346 = *(_DWORD *)(v319 + 392) > 0;
      else
        v346 = 0;
    }
    v322 &= v346;
LABEL_574:
    v319 += 504;
  }
  while (v319 != v320);
  if ((v322 & 1) != 0)
  {
    v360 = 1;
    goto LABEL_591;
  }
  v360 = 0;
  v361 = (HIDWORD(v410) != 0) & v321;
LABEL_593:
  v429 = v361;
  if (byte_1022FAAA8)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v362 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v363 = 0xEFBEFBEFBEFBEFBFLL * ((v411[1] - *v411) >> 3);
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = v429;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v363;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = HIDWORD(v410);
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v323;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&buf[32] = v360;
      *(_WORD *)&buf[36] = 1024;
      *(_DWORD *)&buf[38] = v321 & 1;
      _os_log_impl((void *)&_mh_execute_header, v362, OS_LOG_TYPE_DEBUG, "FenceCal: calculateGroup, end, return val, isOK, %d, numOfFences, %zu, numOfExitFences, %d, combinedCanMonitor, %d, combinedCanMonitorGroup, %d, combinedCanMonitorExitGroup, %d", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v401 = 0xEFBEFBEFBEFBEFBFLL * ((v411[1] - *v411) >> 3);
      *(_DWORD *)v451 = 67110400;
      *(_DWORD *)&v451[4] = v429;
      *(_WORD *)&v451[8] = 2048;
      *(_QWORD *)&v451[10] = v401;
      *(_WORD *)&v451[18] = 1024;
      *(_DWORD *)&v451[20] = HIDWORD(v410);
      *(_WORD *)&v451[24] = 1024;
      *(_DWORD *)&v451[26] = v323;
      *(_WORD *)&v451[30] = 1024;
      *(_DWORD *)&v451[32] = v360;
      *(_WORD *)&v451[36] = 1024;
      *(_DWORD *)&v451[38] = v321 & 1;
      LODWORD(v406) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "FenceCal: calculateGroup, end, return val, isOK, %d, numOfFences, %zu, numOfExitFences, %d, combinedCanMonitor, %d, combinedCanMonitorGroup, %d, combinedCanMonitorExitGroup, %d", v451, *(size_t *)&v406, (_DWORD)v407, DWORD2(v407), (_DWORD)v409, DWORD2(v409));
      v403 = (char *)v402;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v402);
      if (v403 != buf)
        free(v403);
    }
    v364 = (_QWORD *)*a7;
    if ((_QWORD *)*a7 != a7 + 1)
    {
      v365 = 0;
      do
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v366 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v367 = a7[2];
          v368 = CFAbsoluteTimeGetCurrent();
          sub_100FC7034((uint64_t)(v364 + 5), v451, v368);
          if (v451[23] >= 0)
            v369 = v451;
          else
            v369 = *(_BYTE **)v451;
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v365;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v367;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v369;
          _os_log_impl((void *)&_mh_execute_header, v366, OS_LOG_TYPE_DEBUG, "Return entry AP, index, %2zu, %2zu, %s", buf, 0x20u);
          if ((v451[23] & 0x80000000) != 0)
            operator delete(*(void **)v451);
          ++v365;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v372 = qword_1022A0068;
          v373 = a7[2];
          v374 = CFAbsoluteTimeGetCurrent();
          sub_100FC7034((uint64_t)(v364 + 5), &v449, v374);
          v375 = &v449;
          if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v375 = (std::string *)v449.__r_.__value_.__r.__words[0];
          *(_DWORD *)v451 = 134218498;
          *(_QWORD *)&v451[4] = v365;
          *(_WORD *)&v451[12] = 2048;
          *(_QWORD *)&v451[14] = v373;
          *(_WORD *)&v451[22] = 2080;
          *(_QWORD *)&v451[24] = v375;
          LODWORD(v406) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v372, 2, "Return entry AP, index, %2zu, %2zu, %s", (size_t)v451, *(size_t *)&v406, (const char *)v407);
          v377 = v376;
          if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v449.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v377);
          if (v377 != buf)
            free(v377);
          ++v365;
        }
        v370 = (_QWORD *)v364[1];
        if (v370)
        {
          do
          {
            v371 = v370;
            v370 = (_QWORD *)*v370;
          }
          while (v370);
        }
        else
        {
          do
          {
            v371 = (_QWORD *)v364[2];
            v69 = *v371 == (_QWORD)v364;
            v364 = v371;
          }
          while (!v69);
        }
        v364 = v371;
      }
      while (v371 != a7 + 1);
    }
    v378 = (_QWORD *)*a8;
    if ((_QWORD *)*a8 != a8 + 1)
    {
      v379 = 0;
      do
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v380 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v381 = a8[2];
          v382 = CFAbsoluteTimeGetCurrent();
          sub_100FC7034((uint64_t)(v378 + 5), v451, v382);
          if (v451[23] >= 0)
            v383 = v451;
          else
            v383 = *(_BYTE **)v451;
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v379;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v381;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v383;
          _os_log_impl((void *)&_mh_execute_header, v380, OS_LOG_TYPE_DEBUG, "Return exit AP, index, %2zu, %2zu, %s", buf, 0x20u);
          if ((v451[23] & 0x80000000) != 0)
            operator delete(*(void **)v451);
          ++v379;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10217C430);
          v386 = qword_1022A0068;
          v387 = a8[2];
          v388 = CFAbsoluteTimeGetCurrent();
          sub_100FC7034((uint64_t)(v378 + 5), &v449, v388);
          v389 = &v449;
          if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v389 = (std::string *)v449.__r_.__value_.__r.__words[0];
          *(_DWORD *)v451 = 134218498;
          *(_QWORD *)&v451[4] = v379;
          *(_WORD *)&v451[12] = 2048;
          *(_QWORD *)&v451[14] = v387;
          *(_WORD *)&v451[22] = 2080;
          *(_QWORD *)&v451[24] = v389;
          LODWORD(v406) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v386, 2, "Return exit AP, index, %2zu, %2zu, %s", (size_t)v451, *(size_t *)&v406, (const char *)v407);
          v391 = v390;
          if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v449.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v391);
          if (v391 != buf)
            free(v391);
          ++v379;
        }
        v384 = (_QWORD *)v378[1];
        if (v384)
        {
          do
          {
            v385 = v384;
            v384 = (_QWORD *)*v384;
          }
          while (v384);
        }
        else
        {
          do
          {
            v385 = (_QWORD *)v378[2];
            v69 = *v385 == (_QWORD)v378;
            v378 = v385;
          }
          while (!v69);
        }
        v378 = v385;
      }
      while (v385 != a8 + 1);
    }
  }
  sub_1007A28B0((uint64_t)&v434, v435);
  sub_100008848((uint64_t)&v436, v437[0]);
  sub_100008848((uint64_t)&v438, v439[0]);
  if (__p)
  {
    v442 = (char *)__p;
    operator delete(__p);
  }
  if (v444)
  {
    v445 = v444;
    operator delete(v444);
  }
  return v429;
}

void sub_100C71E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  sub_100008848((uint64_t)&a42, (_QWORD *)a43);
  sub_100008848((uint64_t)&a45, (_QWORD *)a46);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C7210C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *sub_100C7545C(a1, &v4, a2);
  if (!v2)
    sub_100263950("map::at:  key not found");
  return v2 + 120;
}

uint64_t *sub_100C72148(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned int v2;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  int v8;
  _WORD v14[8];
  uint8_t buf[1640];

  v1 = atomic_load((unsigned __int8 *)&qword_1022FAAE8);
  if ((v1 & 1) == 0)
  {
    v7 = a1;
    v8 = __cxa_guard_acquire(&qword_1022FAAE8);
    a1 = v7;
    if (v8)
    {
      qword_1022FAAC0 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      unk_1022FAAC8 = _Q0;
      unk_1022FAAD8 = _Q0;
      __cxa_guard_release(&qword_1022FAAE8);
      a1 = v7;
    }
  }
  v2 = *(_DWORD *)(a1 + 392);
  if ((v2 & 0x80000000) == 0)
    return (uint64_t *)(*(_QWORD *)(a1 + 368) + 40 * v2);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "dCOLLECT: no chosen score, was calculateGroup called?", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "dCOLLECT: no chosen score, was calculateGroup called?", v14, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "const Score &CLWifiFenceCalculator::getChosenGroupScore() const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return &qword_1022FAAC0;
}

BOOL sub_100C7234C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 344);
  v1 = *(_QWORD *)(a1 + 352);
  if (*(_BYTE *)(a1 + 476))
  {
    if (v1 != v2)
    {
      v3 = *(_QWORD **)(a1 + 368);
      if (*(_QWORD **)(a1 + 376) != v3)
        return *v3 != 0;
    }
  }
  else if (v1 != v2)
  {
    v5 = *(_QWORD **)(a1 + 368);
    if (*(_QWORD **)(a1 + 376) != v5)
    {
      if (*v5)
        return *(_DWORD *)(a1 + 392) > 0;
    }
  }
  return 0;
}

void sub_100C723AC(uint64_t a1, double **a2)
{
  unsigned __int8 v4;
  double *v5;
  double *v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _BYTE buf[12];
  __int16 v22;
  void **v23;
  char v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  _BYTE *v28;
  void *__p[2];
  char v30;

  v4 = atomic_load((unsigned __int8 *)&qword_102307900);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102307900))
  {
    sub_1002433B8((uint64_t)dbl_1023078D8);
    __cxa_guard_release(&qword_102307900);
  }
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v16 = (uint64_t)*a2;
  }
  else
  {
    v20 = (uint64_t *)a2;
    do
    {
      v7 = -1.0;
      if (*(double *)(a1 + 20) > 0.0)
        v7 = sub_1010B97B4(dbl_1023078D8, a1, v5[13], v5[14]);
      v5[61] = v7;
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10217C430);
      v8 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v9 = *((_QWORD *)v5 + 61);
        sub_100C3B9BC((uint64_t)(v5 + 4), __p);
        v10 = __p;
        if (v30 < 0)
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 134283779;
        *(_QWORD *)&buf[4] = v9;
        v22 = 2081;
        v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "FenceCal: fDistanceFromCurrentLocation, %{private}.2lf, %{private}s", buf, 0x16u);
        if (v30 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10217C430);
        v11 = qword_1022A0068;
        v12 = *((_QWORD *)v5 + 61);
        sub_100C3B9BC((uint64_t)(v5 + 4), buf);
        v13 = buf;
        if (v24 < 0)
          v13 = *(_BYTE **)buf;
        v25 = 134283779;
        v26 = v12;
        v27 = 2081;
        v28 = v13;
        LODWORD(v19) = 22;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v11, 2, "FenceCal: fDistanceFromCurrentLocation, %{private}.2lf, %{private}s", &v25, v19);
        v15 = v14;
        if (v24 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "static void CLWifiFenceCalculator::sortCalculatorGroup(const CLDaemonLocation &, std::vector<CLWifiFenceCalculator> &)", "%s\n", v15);
        if (v15 != (char *)__p)
          free(v15);
      }
      v5 += 63;
    }
    while (v5 != v6);
    v16 = *v20;
    v5 = (double *)v20[1];
  }
  v17 = 126 - 2 * __clz(0xEFBEFBEFBEFBEFBFLL * (((uint64_t)v5 - v16) >> 3));
  if (v5 == (double *)v16)
    v18 = 0;
  else
    v18 = v17;
  sub_100C756E0(v16, (unint64_t)v5, v18, 1);
}

void sub_100C726C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102307900);
  _Unwind_Resume(a1);
}

float sub_100C726E0(float *a1, float *a2)
{
  float v2;
  float v3;
  float result;

  v2 = *a1;
  if (*a1 <= 0.0)
    sub_101924244();
  v3 = *a2;
  result = -1.0;
  if (*a2 <= -1.0)
    sub_10192426C();
  if (v2 >= 0.0 && v3 >= 0.0)
  {
    if (v2 <= 30.0)
    {
      return *a2;
    }
    else if (v2 <= 570.0)
    {
      return (float)((float)((float)(v2 + -30.0) * -0.0016667) + 1.0) * v3;
    }
    else
    {
      return v3 * 0.1;
    }
  }
  return result;
}

void sub_100C72774(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t **sub_100C727A0(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  __int128 *v17;
  BOOL v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v21 = result;
    v22 = v8;
    v23 = v8;
    if (v8)
    {
      v22 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = (uint64_t *)a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)(v9 + 7));
          std::string::operator=((std::string *)(v8 + 10), (const std::string *)(v9 + 10));
          v10 = *(_OWORD *)(v9 + 13);
          v11 = *(_OWORD *)(v9 + 15);
          v12 = *(_OWORD *)(v9 + 17);
          *(_OWORD *)(v8 + 19) = *(_OWORD *)(v9 + 19);
          *(_OWORD *)(v8 + 17) = v12;
          *(_OWORD *)(v8 + 15) = v11;
          *(_OWORD *)(v8 + 13) = v10;
          v13 = *(_OWORD *)(v9 + 21);
          v14 = *(_OWORD *)(v9 + 23);
          v15 = *(_OWORD *)(v9 + 25);
          *(uint64_t *)((char *)v8 + 213) = *(uint64_t *)((char *)v9 + 213);
          *(_OWORD *)(v8 + 25) = v15;
          *(_OWORD *)(v8 + 23) = v14;
          *(_OWORD *)(v8 + 21) = v13;
          std::string::operator=((std::string *)(v8 + 28), (const std::string *)(v9 + 28));
          v16 = (void *)v8[31];
          v8[31] = (uint64_t)(id)v9[31];

          if (v8 != v9)
            sub_1002F3538((char *)v8 + 256, (char *)v9[32], v9[33], (v9[33] - v9[32]) >> 4);
          sub_100C72998(v5, (uint64_t)v23);
          v8 = v22;
          v23 = v22;
          if (v22)
            v22 = sub_10036C1BC((uint64_t)v22);
          v17 = (__int128 *)v9[1];
          if (v17)
          {
            do
            {
              a2 = v17;
              v17 = *(__int128 **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              a2 = (__int128 *)v9[2];
              v18 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = (uint64_t *)a2;
            }
            while (!v18);
          }
          if (!v8)
            break;
          v9 = (uint64_t *)a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_100C72A1C((uint64_t)&v21);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100C72A70((uint64_t)v5, a2 + 2);
      v19 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(__int128 **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (__int128 *)*((_QWORD *)a2 + 2);
          v18 = *(_QWORD *)v20 == (_QWORD)a2;
          a2 = v20;
        }
        while (!v18);
      }
      a2 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

void sub_100C72984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C72A1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C72998(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!sub_10016FCB8((unsigned __int8 *)(a2 + 32), (unsigned __int8 *)v4 + 32))
          break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

uint64_t sub_100C72A1C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1009EF82C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1009EF82C(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100C72A70(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  unsigned __int8 *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v9[3];

  sub_1009EFCBC(a1, a2, (uint64_t)v9);
  v4 = (uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v5 = (unsigned __int8 *)(v9[0] + 4);
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v3;
        if (!sub_10016FCB8(v5, (unsigned __int8 *)v3 + 32))
          break;
        v3 = *v4;
        v6 = v4;
        if (!*v4)
          goto LABEL_9;
      }
      v3 = v4[1];
    }
    while (v3);
    v6 = v4 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_9:
  sub_1000145B0((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  v7 = v9[0];
  v9[0] = 0;
  sub_1009EFD24((uint64_t)v9, 0);
  return v7;
}

void sub_100C72B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1009EFD24((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100C72B30(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100C72B5C(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  double *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  double *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  BOOL v48;
  unint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  double *v55;
  double *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  double v75;
  float v76;
  float v77;
  float v78;
  double *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  BOOL v89;
  BOOL v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  unint64_t v104;
  float v105;
  float v106;
  float v107;
  float v108;
  double *v110;
  double *v111;
  float v112;
  float v113;
  float v114;
  float v115;
  BOOL v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  float v130;
  float v131;
  float v132;
  float v133;
  double *v135;
  float v136;
  float v137;
  float v138;
  float v139;
  _OWORD *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  float v150;
  float v151;
  float v152;
  float v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  __int128 *v168;
  uint64_t v169;
  float v170;
  float v171;
  float v172;
  float v173;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  double *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  float v184;
  float v185;
  float v186;
  float v187;
  _OWORD *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  int64_t v193;
  int64_t v194;
  uint64_t v195;
  uint64_t v196;
  float v197;
  float v198;
  float v199;
  uint64_t v200;
  float v201;
  float v202;
  float v203;
  float v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  _OWORD *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  int64_t v226;
  _OWORD *v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  _OWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  float v237;
  float v238;
  float v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  float v255;
  float v256;
  float v257;
  float v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  _OWORD *v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  float v268;
  float v269;
  float v270;
  float v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  float v283;
  float v284;
  float v285;
  float v286;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  float v296;
  float v297;
  float v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  int64_t v305;
  uint64_t v306;
  _OWORD *v307;
  float v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  float v321[5];

void sub_100C73CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v10;
  float v11;
  float v12;
  float v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float v25;
  float v26;
  float v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float v38;
  float v39;
  float v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  float v51;
  float v52;
  float v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  float v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  sub_100C74678(a1, a2, a3, a4);
  v10 = *(double *)(a5 + 32);
  *(float *)&v65 = v10;
  v64 = (float)(int)sub_100219A9C(a5);
  v11 = sub_100C726E0((float *)&v65, &v64);
  v12 = *(double *)(a4 + 32);
  *(float *)&v65 = v12;
  v64 = (float)(int)sub_100219A9C(a4);
  v13 = sub_100C726E0((float *)&v65, &v64);
  if (v11 > 0.0 && v11 > v13)
  {
    v15 = *(_OWORD *)(a4 + 48);
    v67 = *(_OWORD *)(a4 + 32);
    v68 = v15;
    v16 = *(_OWORD *)(a4 + 80);
    v69 = *(_OWORD *)(a4 + 64);
    v70 = v16;
    v17 = *(_OWORD *)(a4 + 16);
    v65 = *(_OWORD *)a4;
    v66 = v17;
    v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    v19 = *(_OWORD *)(a5 + 80);
    v21 = *(_OWORD *)(a5 + 32);
    v20 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 80) = v19;
    *(_OWORD *)(a4 + 32) = v21;
    *(_OWORD *)(a4 + 48) = v20;
    v22 = v70;
    *(_OWORD *)(a5 + 64) = v69;
    *(_OWORD *)(a5 + 80) = v22;
    v23 = v68;
    *(_OWORD *)(a5 + 32) = v67;
    *(_OWORD *)(a5 + 48) = v23;
    v24 = v66;
    *(_OWORD *)a5 = v65;
    *(_OWORD *)(a5 + 16) = v24;
    *(float *)&v23 = *(double *)(a4 + 32);
    LODWORD(v65) = v23;
    v64 = (float)(int)sub_100219A9C(a4);
    v25 = sub_100C726E0((float *)&v65, &v64);
    v26 = *(double *)(a3 + 32);
    *(float *)&v65 = v26;
    v64 = (float)(int)sub_100219A9C(a3);
    v27 = sub_100C726E0((float *)&v65, &v64);
    if (v25 > 0.0 && v25 > v27)
    {
      v28 = *(_OWORD *)(a3 + 48);
      v67 = *(_OWORD *)(a3 + 32);
      v68 = v28;
      v29 = *(_OWORD *)(a3 + 80);
      v69 = *(_OWORD *)(a3 + 64);
      v70 = v29;
      v30 = *(_OWORD *)(a3 + 16);
      v65 = *(_OWORD *)a3;
      v66 = v30;
      v31 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v31;
      v32 = *(_OWORD *)(a4 + 80);
      v34 = *(_OWORD *)(a4 + 32);
      v33 = *(_OWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a3 + 80) = v32;
      *(_OWORD *)(a3 + 32) = v34;
      *(_OWORD *)(a3 + 48) = v33;
      v35 = v70;
      *(_OWORD *)(a4 + 64) = v69;
      *(_OWORD *)(a4 + 80) = v35;
      v36 = v68;
      *(_OWORD *)(a4 + 32) = v67;
      *(_OWORD *)(a4 + 48) = v36;
      v37 = v66;
      *(_OWORD *)a4 = v65;
      *(_OWORD *)(a4 + 16) = v37;
      *(float *)&v36 = *(double *)(a3 + 32);
      LODWORD(v65) = v36;
      v64 = (float)(int)sub_100219A9C(a3);
      v38 = sub_100C726E0((float *)&v65, &v64);
      v39 = *(double *)(a2 + 32);
      *(float *)&v65 = v39;
      v64 = (float)(int)sub_100219A9C(a2);
      v40 = sub_100C726E0((float *)&v65, &v64);
      if (v38 > 0.0 && v38 > v40)
      {
        v41 = *(_OWORD *)(a2 + 48);
        v67 = *(_OWORD *)(a2 + 32);
        v68 = v41;
        v42 = *(_OWORD *)(a2 + 80);
        v69 = *(_OWORD *)(a2 + 64);
        v70 = v42;
        v43 = *(_OWORD *)(a2 + 16);
        v65 = *(_OWORD *)a2;
        v66 = v43;
        v44 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v44;
        v45 = *(_OWORD *)(a3 + 80);
        v47 = *(_OWORD *)(a3 + 32);
        v46 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a2 + 80) = v45;
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 48) = v46;
        v48 = v70;
        *(_OWORD *)(a3 + 64) = v69;
        *(_OWORD *)(a3 + 80) = v48;
        v49 = v68;
        *(_OWORD *)(a3 + 32) = v67;
        *(_OWORD *)(a3 + 48) = v49;
        v50 = v66;
        *(_OWORD *)a3 = v65;
        *(_OWORD *)(a3 + 16) = v50;
        *(float *)&v49 = *(double *)(a2 + 32);
        LODWORD(v65) = v49;
        v64 = (float)(int)sub_100219A9C(a2);
        v51 = sub_100C726E0((float *)&v65, &v64);
        v52 = *(double *)(a1 + 32);
        *(float *)&v65 = v52;
        v64 = (float)(int)sub_100219A9C(a1);
        v53 = sub_100C726E0((float *)&v65, &v64);
        if (v51 > 0.0 && v51 > v53)
        {
          v54 = *(_OWORD *)(a1 + 48);
          v67 = *(_OWORD *)(a1 + 32);
          v68 = v54;
          v55 = *(_OWORD *)(a1 + 80);
          v69 = *(_OWORD *)(a1 + 64);
          v70 = v55;
          v56 = *(_OWORD *)(a1 + 16);
          v65 = *(_OWORD *)a1;
          v66 = v56;
          v57 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v57;
          v58 = *(_OWORD *)(a2 + 80);
          v60 = *(_OWORD *)(a2 + 32);
          v59 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v58;
          *(_OWORD *)(a1 + 32) = v60;
          *(_OWORD *)(a1 + 48) = v59;
          v61 = v70;
          *(_OWORD *)(a2 + 64) = v69;
          *(_OWORD *)(a2 + 80) = v61;
          v62 = v68;
          *(_OWORD *)(a2 + 32) = v67;
          *(_OWORD *)(a2 + 48) = v62;
          v63 = v66;
          *(_OWORD *)a2 = v65;
          *(_OWORD *)(a2 + 16) = v63;
        }
      }
    }
  }
}

void sub_100C73FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v11;
  float v12;
  float v13;
  float v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float v25;
  float v26;
  float v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float v38;
  float v39;
  float v40;
  float v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  float v59;
  float v60;
  float v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  float v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;

  v6 = *(double *)(a2 + 32);
  *(float *)&v73 = v6;
  v72 = (float)(int)sub_100219A9C(a2);
  v7 = sub_100C726E0((float *)&v73, &v72);
  v8 = *(double *)(a1 + 32);
  *(float *)&v73 = v8;
  v72 = (float)(int)sub_100219A9C(a1);
  v9 = sub_100C726E0((float *)&v73, &v72);
  if (v7 <= 0.0 || v7 <= v9)
  {
    v11 = *(double *)(a3 + 32);
    *(float *)&v73 = v11;
    v72 = (float)(int)sub_100219A9C(a3);
    v12 = sub_100C726E0((float *)&v73, &v72);
    v13 = *(double *)(a2 + 32);
    *(float *)&v73 = v13;
    v72 = (float)(int)sub_100219A9C(a2);
    v14 = sub_100C726E0((float *)&v73, &v72);
    if (v12 > 0.0 && v12 > v14)
    {
      v15 = *(_OWORD *)(a2 + 48);
      v75 = *(_OWORD *)(a2 + 32);
      v76 = v15;
      v16 = *(_OWORD *)(a2 + 80);
      v77 = *(_OWORD *)(a2 + 64);
      v78 = v16;
      v17 = *(_OWORD *)(a2 + 16);
      v73 = *(_OWORD *)a2;
      v74 = v17;
      v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v18;
      v19 = *(_OWORD *)(a3 + 80);
      v21 = *(_OWORD *)(a3 + 32);
      v20 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v19;
      *(_OWORD *)(a2 + 32) = v21;
      *(_OWORD *)(a2 + 48) = v20;
      v22 = v78;
      *(_OWORD *)(a3 + 64) = v77;
      *(_OWORD *)(a3 + 80) = v22;
      v23 = v76;
      *(_OWORD *)(a3 + 32) = v75;
      *(_OWORD *)(a3 + 48) = v23;
      v24 = v74;
      *(_OWORD *)a3 = v73;
      *(_OWORD *)(a3 + 16) = v24;
      *(float *)&v23 = *(double *)(a2 + 32);
      LODWORD(v73) = v23;
      v72 = (float)(int)sub_100219A9C(a2);
      v25 = sub_100C726E0((float *)&v73, &v72);
      v26 = *(double *)(a1 + 32);
      *(float *)&v73 = v26;
      v72 = (float)(int)sub_100219A9C(a1);
      v27 = sub_100C726E0((float *)&v73, &v72);
      if (v25 > 0.0 && v25 > v27)
      {
        v28 = *(_OWORD *)(a1 + 48);
        v75 = *(_OWORD *)(a1 + 32);
        v76 = v28;
        v29 = *(_OWORD *)(a1 + 80);
        v77 = *(_OWORD *)(a1 + 64);
        v78 = v29;
        v30 = *(_OWORD *)(a1 + 16);
        v73 = *(_OWORD *)a1;
        v74 = v30;
        v31 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v31;
        v32 = *(_OWORD *)(a2 + 80);
        v34 = *(_OWORD *)(a2 + 32);
        v33 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v32;
        *(_OWORD *)(a1 + 32) = v34;
        *(_OWORD *)(a1 + 48) = v33;
        v35 = v78;
        *(_OWORD *)(a2 + 64) = v77;
        *(_OWORD *)(a2 + 80) = v35;
        v36 = v76;
        *(_OWORD *)(a2 + 32) = v75;
        *(_OWORD *)(a2 + 48) = v36;
        v37 = v74;
        *(_OWORD *)a2 = v73;
        *(_OWORD *)(a2 + 16) = v37;
      }
    }
  }
  else
  {
    v38 = *(double *)(a3 + 32);
    *(float *)&v73 = v38;
    v72 = (float)(int)sub_100219A9C(a3);
    v39 = sub_100C726E0((float *)&v73, &v72);
    v40 = *(double *)(a2 + 32);
    *(float *)&v73 = v40;
    v72 = (float)(int)sub_100219A9C(a2);
    v41 = sub_100C726E0((float *)&v73, &v72);
    if (v39 > 0.0 && v39 > v41)
    {
      v42 = *(_OWORD *)(a1 + 48);
      v75 = *(_OWORD *)(a1 + 32);
      v76 = v42;
      v43 = *(_OWORD *)(a1 + 80);
      v77 = *(_OWORD *)(a1 + 64);
      v78 = v43;
      v44 = *(_OWORD *)(a1 + 16);
      v73 = *(_OWORD *)a1;
      v74 = v44;
      v45 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v45;
      v46 = *(_OWORD *)(a3 + 80);
      v48 = *(_OWORD *)(a3 + 32);
      v47 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a1 + 80) = v46;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v47;
LABEL_17:
      v69 = v78;
      *(_OWORD *)(a3 + 64) = v77;
      *(_OWORD *)(a3 + 80) = v69;
      v70 = v76;
      *(_OWORD *)(a3 + 32) = v75;
      *(_OWORD *)(a3 + 48) = v70;
      v71 = v74;
      *(_OWORD *)a3 = v73;
      *(_OWORD *)(a3 + 16) = v71;
      return;
    }
    v49 = *(_OWORD *)(a1 + 48);
    v75 = *(_OWORD *)(a1 + 32);
    v76 = v49;
    v50 = *(_OWORD *)(a1 + 80);
    v77 = *(_OWORD *)(a1 + 64);
    v78 = v50;
    v51 = *(_OWORD *)(a1 + 16);
    v73 = *(_OWORD *)a1;
    v74 = v51;
    v52 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v52;
    v53 = *(_OWORD *)(a2 + 80);
    v55 = *(_OWORD *)(a2 + 32);
    v54 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v53;
    *(_OWORD *)(a1 + 32) = v55;
    *(_OWORD *)(a1 + 48) = v54;
    v56 = v78;
    *(_OWORD *)(a2 + 64) = v77;
    *(_OWORD *)(a2 + 80) = v56;
    v57 = v76;
    *(_OWORD *)(a2 + 32) = v75;
    *(_OWORD *)(a2 + 48) = v57;
    v58 = v74;
    *(_OWORD *)a2 = v73;
    *(_OWORD *)(a2 + 16) = v58;
    *(float *)&v57 = *(double *)(a3 + 32);
    LODWORD(v73) = v57;
    v72 = (float)(int)sub_100219A9C(a3);
    v59 = sub_100C726E0((float *)&v73, &v72);
    v60 = *(double *)(a2 + 32);
    *(float *)&v73 = v60;
    v72 = (float)(int)sub_100219A9C(a2);
    v61 = sub_100C726E0((float *)&v73, &v72);
    if (v59 > 0.0 && v59 > v61)
    {
      v62 = *(_OWORD *)(a2 + 48);
      v75 = *(_OWORD *)(a2 + 32);
      v76 = v62;
      v63 = *(_OWORD *)(a2 + 80);
      v77 = *(_OWORD *)(a2 + 64);
      v78 = v63;
      v64 = *(_OWORD *)(a2 + 16);
      v73 = *(_OWORD *)a2;
      v74 = v64;
      v65 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v65;
      v66 = *(_OWORD *)(a3 + 80);
      v68 = *(_OWORD *)(a3 + 32);
      v67 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v66;
      *(_OWORD *)(a2 + 32) = v68;
      *(_OWORD *)(a2 + 48) = v67;
      goto LABEL_17;
    }
  }
}

BOOL sub_100C74364(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float v38;
  float v39;
  float v40;
  float v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  float v52;
  float v53;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 96);
      v7 = *(double *)(a2 - 64);
      *(float *)&v46 = v7;
      v53 = (float)(int)sub_100219A9C(a2 - 96);
      v8 = sub_100C726E0((float *)&v46, &v53);
      v9 = *(double *)(a1 + 32);
      *(float *)&v46 = v9;
      v53 = (float)(int)sub_100219A9C(a1);
      v10 = sub_100C726E0((float *)&v46, &v53);
      result = 1;
      if (v8 > 0.0 && v8 > v10)
      {
        v11 = *(_OWORD *)(a1 + 48);
        v48 = *(_OWORD *)(a1 + 32);
        v49 = v11;
        v12 = *(_OWORD *)(a1 + 80);
        v50 = *(_OWORD *)(a1 + 64);
        v51 = v12;
        v13 = *(_OWORD *)(a1 + 16);
        v46 = *(_OWORD *)a1;
        v47 = v13;
        v14 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v14;
        v15 = *(_OWORD *)(a2 - 16);
        v17 = *(_OWORD *)(a2 - 64);
        v16 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 80) = v15;
        *(_OWORD *)(a1 + 32) = v17;
        *(_OWORD *)(a1 + 48) = v16;
        v18 = v51;
        *(_OWORD *)(a2 - 32) = v50;
        *(_OWORD *)(a2 - 16) = v18;
        v19 = v49;
        *(_OWORD *)(a2 - 64) = v48;
        *(_OWORD *)(a2 - 48) = v19;
        v20 = v47;
        *v6 = v46;
        *(_OWORD *)(a2 - 80) = v20;
      }
      return result;
    case 3uLL:
      sub_100C73FE0(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_100C74678(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      sub_100C73CE4(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96);
      return 1;
    default:
      v21 = a1 + 192;
      sub_100C73FE0(a1, a1 + 96, a1 + 192);
      v22 = a1 + 288;
      if (a1 + 288 == a2)
        return 1;
      v23 = 0;
      v24 = 0;
      break;
  }
  while (1)
  {
    v25 = *(double *)(v22 + 32);
    *(float *)&v46 = v25;
    v53 = (float)(int)sub_100219A9C(v22);
    v26 = sub_100C726E0((float *)&v46, &v53);
    v27 = *(double *)(v21 + 32);
    *(float *)&v46 = v27;
    v53 = (float)(int)sub_100219A9C(v21);
    v28 = sub_100C726E0((float *)&v46, &v53);
    if (v26 > 0.0 && v26 > v28)
    {
      v30 = *(_OWORD *)(v22 + 48);
      v48 = *(_OWORD *)(v22 + 32);
      v49 = v30;
      v31 = *(_OWORD *)(v22 + 80);
      v50 = *(_OWORD *)(v22 + 64);
      v51 = v31;
      v32 = *(_OWORD *)(v22 + 16);
      v33 = v23;
      v46 = *(_OWORD *)v22;
      v47 = v32;
      while (1)
      {
        v34 = a1 + v33;
        v35 = *(_OWORD *)(a1 + v33 + 240);
        *(_OWORD *)(v34 + 320) = *(_OWORD *)(a1 + v33 + 224);
        *(_OWORD *)(v34 + 336) = v35;
        v36 = *(_OWORD *)(a1 + v33 + 272);
        *(_OWORD *)(v34 + 352) = *(_OWORD *)(a1 + v33 + 256);
        *(_OWORD *)(v34 + 368) = v36;
        v37 = *(_OWORD *)(a1 + v33 + 208);
        *(_OWORD *)(v34 + 288) = *(_OWORD *)(a1 + v33 + 192);
        *(_OWORD *)(v34 + 304) = v37;
        if (v33 == -192)
          break;
        v38 = *(double *)&v48;
        v53 = v38;
        v52 = (float)(int)sub_100219A9C((uint64_t)&v46);
        v39 = sub_100C726E0(&v53, &v52);
        v40 = *(double *)(v34 + 128);
        v53 = v40;
        v52 = (float)(int)sub_100219A9C(v34 + 96);
        v41 = sub_100C726E0(&v53, &v52);
        v33 -= 96;
        if (v39 <= 0.0 || v39 <= v41)
        {
          v42 = (_OWORD *)(a1 + v33 + 288);
          goto LABEL_17;
        }
      }
      v42 = (_OWORD *)a1;
LABEL_17:
      v43 = v49;
      v42[2] = v48;
      v42[3] = v43;
      v44 = v51;
      v42[4] = v50;
      v42[5] = v44;
      v45 = v47;
      ++v24;
      *v42 = v46;
      v42[1] = v45;
      if (v24 == 8)
        return v22 + 96 == a2;
    }
    v21 = v22;
    v23 += 96;
    v22 += 96;
    if (v22 == a2)
      return 1;
  }
}

void sub_100C74678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float v23;
  float v24;
  float v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float v36;
  float v37;
  float v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  sub_100C73FE0(a1, a2, a3);
  v8 = *(double *)(a4 + 32);
  *(float *)&v50 = v8;
  v49 = (float)(int)sub_100219A9C(a4);
  v9 = sub_100C726E0((float *)&v50, &v49);
  v10 = *(double *)(a3 + 32);
  *(float *)&v50 = v10;
  v49 = (float)(int)sub_100219A9C(a3);
  v11 = sub_100C726E0((float *)&v50, &v49);
  if (v9 > 0.0 && v9 > v11)
  {
    v13 = *(_OWORD *)(a3 + 48);
    v52 = *(_OWORD *)(a3 + 32);
    v53 = v13;
    v14 = *(_OWORD *)(a3 + 80);
    v54 = *(_OWORD *)(a3 + 64);
    v55 = v14;
    v15 = *(_OWORD *)(a3 + 16);
    v50 = *(_OWORD *)a3;
    v51 = v15;
    v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v16;
    v17 = *(_OWORD *)(a4 + 80);
    v19 = *(_OWORD *)(a4 + 32);
    v18 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 80) = v17;
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)(a3 + 48) = v18;
    v20 = v55;
    *(_OWORD *)(a4 + 64) = v54;
    *(_OWORD *)(a4 + 80) = v20;
    v21 = v53;
    *(_OWORD *)(a4 + 32) = v52;
    *(_OWORD *)(a4 + 48) = v21;
    v22 = v51;
    *(_OWORD *)a4 = v50;
    *(_OWORD *)(a4 + 16) = v22;
    *(float *)&v21 = *(double *)(a3 + 32);
    LODWORD(v50) = v21;
    v49 = (float)(int)sub_100219A9C(a3);
    v23 = sub_100C726E0((float *)&v50, &v49);
    v24 = *(double *)(a2 + 32);
    *(float *)&v50 = v24;
    v49 = (float)(int)sub_100219A9C(a2);
    v25 = sub_100C726E0((float *)&v50, &v49);
    if (v23 > 0.0 && v23 > v25)
    {
      v26 = *(_OWORD *)(a2 + 48);
      v52 = *(_OWORD *)(a2 + 32);
      v53 = v26;
      v27 = *(_OWORD *)(a2 + 80);
      v54 = *(_OWORD *)(a2 + 64);
      v55 = v27;
      v28 = *(_OWORD *)(a2 + 16);
      v50 = *(_OWORD *)a2;
      v51 = v28;
      v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v29;
      v30 = *(_OWORD *)(a3 + 80);
      v32 = *(_OWORD *)(a3 + 32);
      v31 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v30;
      *(_OWORD *)(a2 + 32) = v32;
      *(_OWORD *)(a2 + 48) = v31;
      v33 = v55;
      *(_OWORD *)(a3 + 64) = v54;
      *(_OWORD *)(a3 + 80) = v33;
      v34 = v53;
      *(_OWORD *)(a3 + 32) = v52;
      *(_OWORD *)(a3 + 48) = v34;
      v35 = v51;
      *(_OWORD *)a3 = v50;
      *(_OWORD *)(a3 + 16) = v35;
      *(float *)&v34 = *(double *)(a2 + 32);
      LODWORD(v50) = v34;
      v49 = (float)(int)sub_100219A9C(a2);
      v36 = sub_100C726E0((float *)&v50, &v49);
      v37 = *(double *)(a1 + 32);
      *(float *)&v50 = v37;
      v49 = (float)(int)sub_100219A9C(a1);
      v38 = sub_100C726E0((float *)&v50, &v49);
      if (v36 > 0.0 && v36 > v38)
      {
        v39 = *(_OWORD *)(a1 + 48);
        v52 = *(_OWORD *)(a1 + 32);
        v53 = v39;
        v40 = *(_OWORD *)(a1 + 80);
        v54 = *(_OWORD *)(a1 + 64);
        v55 = v40;
        v41 = *(_OWORD *)(a1 + 16);
        v50 = *(_OWORD *)a1;
        v51 = v41;
        v42 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v42;
        v43 = *(_OWORD *)(a2 + 80);
        v45 = *(_OWORD *)(a2 + 32);
        v44 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v43;
        *(_OWORD *)(a1 + 32) = v45;
        *(_OWORD *)(a1 + 48) = v44;
        v46 = v55;
        *(_OWORD *)(a2 + 64) = v54;
        *(_OWORD *)(a2 + 80) = v46;
        v47 = v53;
        *(_OWORD *)(a2 + 32) = v52;
        *(_OWORD *)(a2 + 48) = v47;
        v48 = v51;
        *(_OWORD *)a2 = v50;
        *(_OWORD *)(a2 + 16) = v48;
      }
    }
  }
}

_OWORD *sub_100C748BC(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;

  v6 = (void **)sub_100C74954((uint64_t)a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x88uLL);
    v9 = *a4;
    v10 = (*a4)[1];
    v7[2] = **a4;
    v7[3] = v10;
    v11 = v9[2];
    v12 = v9[3];
    v13 = v9[5];
    v7[6] = v9[4];
    v7[7] = v13;
    v7[4] = v11;
    v7[5] = v12;
    *((_BYTE *)v7 + 128) = 0;
    sub_1000145B0(a1, v15, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_100C74954(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!sub_100FC76D8(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_100FC76D8(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

float *sub_100C749E4(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  uint64_t v25;
  float v26;
  float v27;
  BOOL v28;
  float *v29;
  float v30;
  float *v31;
  float v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  float v62;
  unint64_t v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  int v78;
  _QWORD *v79;
  float v81;
  float v82;
  float v83;
  float *v84;
  uint64_t v85;

  v7 = result;
LABEL_2:
  v8 = (unint64_t)v7;
  while (2)
  {
    v7 = (float *)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) > *(float *)(v8 + 4))
        {
          v40 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v40;
        }
        return result;
      case 3uLL:
        return sub_100C750C8((float *)v8, (float *)(v8 + 8), a2 - 2);
      case 4uLL:
        return sub_100C75338((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (uint64_t)(a2 - 2));
      case 5uLL:
        result = sub_100C75338((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), v8 + 24);
        if (*(a2 - 1) > *(float *)(v8 + 28))
        {
          v41 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v41;
          if (*(float *)(v8 + 28) > *(float *)(v8 + 20))
          {
            v43 = *(_QWORD *)(v8 + 16);
            v42 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 16) = v42;
            *(_QWORD *)(v8 + 24) = v43;
            if (*(float *)(v8 + 12) < *((float *)&v42 + 1))
            {
              v44 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v42;
              *(_QWORD *)(v8 + 16) = v44;
              if (*(float *)(v8 + 4) < *((float *)&v42 + 1))
              {
                v45 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v42;
                *(_QWORD *)(v8 + 8) = v45;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v46 = (float *)(v8 + 8);
          v48 = (float *)v8 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v8;
              do
              {
                v51 = *(float *)(v50 + 12);
                v52 = *(float *)(v50 + 4);
                v50 = (unint64_t)v46;
                if (v51 > v52)
                {
                  v53 = *v46;
                  v54 = v49;
                  while (1)
                  {
                    *(_QWORD *)(v8 + v54 + 8) = *(_QWORD *)(v8 + v54);
                    if (!v54)
                      break;
                    v55 = *(float *)(v8 + v54 - 4);
                    v54 -= 8;
                    if (v55 >= v51)
                    {
                      v56 = v8 + v54 + 8;
                      goto LABEL_80;
                    }
                  }
                  v56 = v8;
LABEL_80:
                  *(float *)v56 = v53;
                  *(float *)(v56 + 4) = v51;
                }
                v46 = (float *)(v50 + 8);
                v49 += 8;
              }
              while ((float *)(v50 + 8) != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v81 = v7[3];
              v82 = v7[1];
              v7 = v46;
              if (v81 > v82)
              {
                v83 = *v46;
                do
                {
                  v84 = v46;
                  v85 = *((_QWORD *)v46 - 1);
                  v46 -= 2;
                  *(_QWORD *)v84 = v85;
                }
                while (*(v84 - 3) < v81);
                *v46 = v83;
                v46[1] = v81;
              }
              v46 = v7 + 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v57 = (v10 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = v8 + 8 * v60;
                if (2 * v59 + 2 < (uint64_t)v10 && *(float *)(v61 + 4) > *(float *)(v61 + 12))
                {
                  v61 += 8;
                  v60 = 2 * v59 + 2;
                }
                v62 = *(float *)(v8 + 8 * v59 + 4);
                if (*(float *)(v61 + 4) <= v62)
                {
                  v63 = v8 + 8 * v59;
                  v64 = *(_DWORD *)v63;
                  do
                  {
                    v65 = (_QWORD *)v63;
                    v63 = v61;
                    *v65 = *(_QWORD *)v61;
                    if (v57 < v60)
                      break;
                    v66 = 2 * v60;
                    v60 = (2 * v60) | 1;
                    v61 = v8 + 8 * v60;
                    v67 = v66 + 2;
                    if (v67 < (uint64_t)v10 && *(float *)(v61 + 4) > *(float *)(v61 + 12))
                    {
                      v61 += 8;
                      v60 = v67;
                    }
                  }
                  while (*(float *)(v61 + 4) <= v62);
                  *(_DWORD *)v63 = v64;
                  *(float *)(v63 + 4) = v62;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v68 = (unint64_t)v9 >> 3;
            do
            {
              v69 = 0;
              v70 = *(_QWORD *)v8;
              v71 = v8;
              do
              {
                v72 = (_QWORD *)v71;
                v71 += 8 * (v69 + 1);
                v73 = 2 * v69;
                v69 = (2 * v69) | 1;
                v74 = v73 + 2;
                if (v74 < v68 && *(float *)(v71 + 4) > *(float *)(v71 + 12))
                {
                  v71 += 8;
                  v69 = v74;
                }
                *v72 = *(_QWORD *)v71;
              }
              while (v69 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
              a2 -= 2;
              if ((float *)v71 == a2)
              {
                *(_QWORD *)v71 = v70;
              }
              else
              {
                *(_QWORD *)v71 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v70;
                v75 = v71 - v8 + 8;
                if (v75 >= 9)
                {
                  v76 = (((unint64_t)v75 >> 3) - 2) >> 1;
                  v77 = *(float *)(v71 + 4);
                  if (*(float *)(v8 + 8 * v76 + 4) > v77)
                  {
                    v78 = *(_DWORD *)v71;
                    do
                    {
                      v79 = (_QWORD *)v71;
                      v71 = v8 + 8 * v76;
                      *v79 = *(_QWORD *)v71;
                      if (!v76)
                        break;
                      v76 = (v76 - 1) >> 1;
                    }
                    while (*(float *)(v8 + 8 * v76 + 4) > v77);
                    *(_DWORD *)v71 = v78;
                    *(float *)(v71 + 4) = v77;
                  }
                }
              }
            }
            while (v68-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (float *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_100C750C8(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_100C750C8(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          sub_100C750C8(v7 + 2, v12 - 2, a2 - 4);
          sub_100C750C8(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_100C750C8(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = v7[1];
          if (*(v7 - 1) > v14)
            goto LABEL_12;
          if (*(a2 - 1) >= v14)
          {
            v31 = v7 + 2;
            do
            {
              v8 = (unint64_t)v31;
              if (v31 >= a2)
                break;
              v32 = v31[1];
              v31 += 2;
            }
            while (v32 >= v14);
          }
          else
          {
            v29 = v7;
            do
            {
              v8 = (unint64_t)(v29 + 2);
              v30 = v29[3];
              v29 += 2;
            }
            while (v30 >= v14);
          }
          v33 = a2;
          if (v8 < (unint64_t)a2)
          {
            v34 = a2;
            do
            {
              v33 = v34 - 2;
              v35 = *(v34 - 1);
              v34 -= 2;
            }
            while (v35 < v14);
          }
          v36 = *v7;
          while (v8 < (unint64_t)v33)
          {
            v37 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v33;
            *(_QWORD *)v33 = v37;
            do
            {
              v38 = *(float *)(v8 + 12);
              v8 += 8;
            }
            while (v38 >= v14);
            do
            {
              v39 = *(v33 - 1);
              v33 -= 2;
            }
            while (v39 < v14);
          }
          if ((float *)(v8 - 8) != v7)
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 8);
          a4 = 0;
          *(float *)(v8 - 8) = v36;
          *(float *)(v8 - 4) = v14;
          continue;
        }
        v14 = v7[1];
LABEL_12:
        v15 = 0;
        v16 = *v7;
        do
        {
          v17 = v7[v15 + 3];
          v15 += 2;
        }
        while (v17 > v14);
        v18 = &v7[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 2;
            v23 = *(v22 - 1);
            v22 -= 2;
            if (v23 > v14)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *(v19 - 1);
            v19 -= 2;
          }
          while (v21 <= v14);
        }
LABEL_22:
        v8 = (unint64_t)v18;
        if (v18 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v25;
            do
            {
              v26 = *(float *)(v8 + 12);
              v8 += 8;
            }
            while (v26 > v14);
            do
            {
              v27 = *(v24 - 1);
              v24 -= 2;
            }
            while (v27 <= v14);
          }
          while (v8 < (unint64_t)v24);
        }
        if ((float *)(v8 - 8) != v7)
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 8);
        *(float *)(v8 - 8) = v16;
        *(float *)(v8 - 4) = v14;
        if (v18 < v20)
        {
LABEL_33:
          result = (float *)sub_100C749E4(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_100C75160((uint64_t)v7, v8 - 8);
        result = (float *)sub_100C75160(v8, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = (float *)(v8 - 8);
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

float *sub_100C750C8(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 <= result[1])
  {
    if (v4 > v3)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (a2[1] > result[1])
      {
        v7 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v7;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)result;
    if (v4 <= v3)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v5;
      if (a3[1] <= *((float *)&v5 + 1))
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_100C75160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 4))
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      sub_100C750C8((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      sub_100C75338((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      sub_100C75338((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      if (*(float *)(a2 - 4) > *(float *)(a1 + 28))
      {
        v16 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v16;
        if (*(float *)(a1 + 28) > *(float *)(a1 + 20))
        {
          v18 = *(_QWORD *)(a1 + 16);
          v17 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v17;
          *(_QWORD *)(a1 + 24) = v18;
          if (*(float *)(a1 + 12) < *((float *)&v17 + 1))
          {
            v19 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v17;
            *(_QWORD *)(a1 + 16) = v19;
            if (*(float *)(a1 + 4) < *((float *)&v17 + 1))
            {
              v20 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v17;
              *(_QWORD *)(a1 + 8) = v20;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 16;
      sub_100C750C8((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)(v8 + 4);
    if (v11 > *(float *)(v7 + 4))
    {
      v12 = *(_DWORD *)v8;
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 12);
        v13 -= 8;
        if (v14 >= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *(_DWORD *)v15 = v12;
      *(float *)(v15 + 4) = v11;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

float *sub_100C75338(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_100C750C8(a1, a2, a3);
  if (*(float *)(a4 + 4) > a3[1])
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    if (a3[1] > a2[1])
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (a2[1] > a1[1])
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

_QWORD *sub_100C753CC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;
  uint64_t v9;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v9 = *a2;
    v6 = sub_100191720(v3 + 4, &v9);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2)
    return v2;
  v9 = v5[4];
  if (sub_100191720(a2, &v9))
    return v2;
  return v5;
}

_QWORD *sub_100C7545C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        v10 = v4[4];
        if (!sub_100191720(a3, &v10))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      v10 = *a3;
      if (!sub_100191720(v8, &v10))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *sub_100C75504(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10091CC78((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100C755AC((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100C7561C((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100C755AC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x120uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1004E5748(v6 + 32, *a2);
  *((_DWORD *)v6 + 70) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100C75604(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100C7561C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100C7561C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100C75660((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_100C75660(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100C756E0(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t j;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  BOOL v23;
  double v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t i;
  BOOL v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  BOOL v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82[63];
  unint64_t v83;
  uint64_t v84[59];
  char v85;
  double v86;

  v6 = a2;
  v7 = a1;
  v80 = a2;
  v81 = a1;
  while (2)
  {
    v8 = v6 - v7;
    v9 = 0xEFBEFBEFBEFBEFBFLL * ((v6 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v80 = v6 - 504;
        if (*(_BYTE *)(v6 - 28))
          v40 = *(_BYTE *)(v7 + 476) == 0;
        else
          v40 = 0;
        if (v40 || *(double *)(v6 - 16) < *(double *)(v7 + 488))
          sub_100C760F0(&v81, (uint64_t *)&v80);
        return;
      case 3:
        v80 = v6 - 504;
        sub_100C76280(v7, v7 + 504, v6 - 504);
        return;
      case 4:
        v80 = v6 - 504;
        sub_100C76BDC(v7, v7 + 504, v7 + 1008, v6 - 504);
        return;
      case 5:
        v80 = v6 - 504;
        sub_100C76160(v7, v7 + 504, v7 + 1008, v7 + 1512, v6 - 504);
        return;
      default:
        if (v8 <= 12095)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != v6)
            {
              v41 = v7 + 504;
              if (v7 + 504 != v6)
              {
                v42 = 0;
                v43 = v7;
                do
                {
                  v44 = v41;
                  if (*(_BYTE *)(v43 + 980))
                    v45 = *(_BYTE *)(v43 + 476) == 0;
                  else
                    v45 = 0;
                  if (v45 || *(double *)(v43 + 992) < *(double *)(v43 + 488))
                  {
                    sub_100C76708((uint64_t)v84, v41);
                    for (i = v42; ; i -= 504)
                    {
                      sub_100C7660C(v7 + i + 504, v7 + i);
                      if (!i)
                      {
                        v48 = v7;
                        goto LABEL_123;
                      }
                      v47 = v85 && *(_BYTE *)(v7 + i - 28) == 0;
                      if (!v47 && v86 >= *(double *)(v7 + i - 16))
                        break;
                    }
                    v48 = v7 + i;
LABEL_123:
                    sub_100C7660C(v48, (uint64_t)v84);
                    sub_100C6A3A0(v84);
                  }
                  v41 = v44 + 504;
                  v42 += 504;
                  v43 = v44;
                }
                while (v44 + 504 != v6);
              }
            }
          }
          else if (v7 != v6)
          {
            v75 = v7 + 504;
            while (v75 != v6)
            {
              v76 = v75;
              if (*(_BYTE *)(v7 + 980))
                v77 = *(_BYTE *)(v7 + 476) == 0;
              else
                v77 = 0;
              if (v77 || *(double *)(v7 + 992) < *(double *)(v7 + 488))
              {
                sub_100C76708((uint64_t)v84, v75);
                do
                {
                  v78 = v7;
                  sub_100C7660C(v7 + 504, v7);
                  v7 -= 504;
                  if (v85)
                    v79 = *(_BYTE *)(v78 - 28) == 0;
                  else
                    v79 = 0;
                }
                while (v79 || v86 < *(double *)(v78 - 16));
                sub_100C7660C(v78, (uint64_t)v84);
                sub_100C6A3A0(v84);
              }
              v75 = v76 + 504;
              v7 = v76;
            }
          }
          return;
        }
        if (!a3)
        {
          if (v7 != v6)
          {
            v49 = (unint64_t)(v9 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = v7 + 504 * v52;
                if (2 * v50 + 2 < v9)
                {
                  v54 = *(_BYTE *)(v7 + 504 * v52 + 476) && *(_BYTE *)(v53 + 980) == 0;
                  if (v54 || *(double *)(v7 + 504 * v52 + 488) < *(double *)(v53 + 992))
                  {
                    v53 += 504;
                    v52 = 2 * v50 + 2;
                  }
                }
                if (*(_BYTE *)(v53 + 476))
                  v55 = *(_BYTE *)(v7 + 504 * v50 + 476) == 0;
                else
                  v55 = 0;
                if (!v55 && *(double *)(v53 + 488) >= *(double *)(v7 + 504 * v50 + 488))
                {
                  v56 = v7 + 504 * v50;
                  sub_100C76708((uint64_t)v84, v56);
                  do
                  {
                    v57 = v53;
                    sub_100C7660C(v56, v53);
                    if (v49 < v52)
                      break;
                    v58 = (2 * v52) | 1;
                    v53 = v7 + 504 * v58;
                    if (2 * v52 + 2 < v9)
                    {
                      v59 = *(_BYTE *)(v7 + 504 * v58 + 476) && *(_BYTE *)(v53 + 980) == 0;
                      if (v59 || *(double *)(v7 + 504 * v58 + 488) < *(double *)(v53 + 992))
                      {
                        v53 += 504;
                        v58 = 2 * v52 + 2;
                      }
                    }
                    if (*(_BYTE *)(v53 + 476) && v85 == 0)
                      break;
                    v56 = v57;
                    v52 = v58;
                  }
                  while (*(double *)(v53 + 488) >= v86);
                  sub_100C7660C(v57, (uint64_t)v84);
                  sub_100C6A3A0(v84);
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v61 = v8 / 0x1F8uLL;
            do
            {
              sub_100C76708((uint64_t)v82, v7);
              v62 = 0;
              v63 = v7;
              do
              {
                v64 = v62 + 1;
                v65 = v63 + 504 * (v62 + 1);
                v66 = 2 * v62;
                v62 = (2 * v62) | 1;
                v67 = v66 + 2;
                if (v67 < v61)
                {
                  v68 = *(_BYTE *)(v63 + 504 * v64 + 476) && *(_BYTE *)(v65 + 980) == 0;
                  if (v68 || *(double *)(v63 + 504 * v64 + 488) < *(double *)(v65 + 992))
                  {
                    v65 += 504;
                    v62 = v67;
                  }
                }
                sub_100C7660C(v63, v65);
                v63 = v65;
              }
              while (v62 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              v6 -= 504;
              if (v65 == v6)
              {
                sub_100C7660C(v65, (uint64_t)v82);
              }
              else
              {
                sub_100C7660C(v65, v6);
                sub_100C7660C(v6, (uint64_t)v82);
                v69 = v65 - v7 + 504;
                if (v69 >= 505)
                {
                  v70 = (v69 / 0x1F8uLL - 2) >> 1;
                  v71 = *(_BYTE *)(v7 + 504 * v70 + 476) && *(_BYTE *)(v65 + 476) == 0;
                  if (v71 || *(double *)(v7 + 504 * v70 + 488) < *(double *)(v65 + 488))
                  {
                    sub_100C76708((uint64_t)v84, v65);
                    do
                    {
                      v72 = v65;
                      v65 = v7 + 504 * v70;
                      sub_100C7660C(v72, v65);
                      if (!v70)
                        break;
                      v70 = (v70 - 1) >> 1;
                      v73 = *(_BYTE *)(v7 + 504 * v70 + 476) && v85 == 0;
                    }
                    while (v73 || *(double *)(v7 + 504 * v70 + 488) < v86);
                    sub_100C7660C(v65, (uint64_t)v84);
                    sub_100C6A3A0(v84);
                  }
                }
              }
              sub_100C6A3A0(v82);
            }
            while (v61-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v6 - 504;
        if ((unint64_t)v8 < 0xFC01)
        {
          sub_100C76280(v7 + 504 * v10, v7, v11);
        }
        else
        {
          sub_100C76280(v7, v7 + 504 * v10, v11);
          v12 = 504 * v10 - 504;
          sub_100C76280(v81 + 504, v81 + v12, v80 - 1008);
          sub_100C76280(v81 + 1008, v81 + 504 * v10 + 504, v80 - 1512);
          sub_100C76280(v81 + v12, v81 + 504 * v10, v81 + 504 * v10 + 504);
          v84[0] = v81 + 504 * v10;
          sub_100C76380(&v81, v84);
        }
        --a3;
        v13 = v81;
        if ((a4 & 1) == 0)
        {
          v14 = *(_BYTE *)(v81 - 28) && *(_BYTE *)(v81 + 476) == 0;
          if (!v14 && *(double *)(v81 - 16) >= *(double *)(v81 + 488))
          {
            v31 = v80;
            v83 = v80;
            sub_100C76708((uint64_t)v84, v81);
            v32 = *(unsigned __int8 *)(v80 - 28);
            if ((!v85 || *(_BYTE *)(v80 - 28)) && v86 >= *(double *)(v80 - 16))
            {
              v39 = v13 + 504;
              do
              {
                v34 = v39;
                if (v39 >= v80 || v85 && !*(_BYTE *)(v39 + 476))
                  break;
                v39 += 504;
              }
              while (v86 >= *(double *)(v34 + 488));
            }
            else
            {
              v33 = v13 + 504;
              do
              {
                v34 = v33;
                if (v85 && !*(_BYTE *)(v33 + 476))
                  break;
                v33 += 504;
              }
              while (v86 >= *(double *)(v34 + 488));
            }
            v82[0] = v34;
            if (v34 < v80)
            {
              v35 = (unsigned __int8 *)(v80 - 532);
              if (v85)
                goto LABEL_70;
LABEL_71:
              while (v86 < *(double *)(v35 + 516))
              {
                while (1)
                {
                  v32 = *v35;
                  v35 -= 504;
                  if (!v85)
                    break;
LABEL_70:
                  if (v32)
                    goto LABEL_71;
                }
              }
              v31 = (unint64_t)(v35 + 28);
              v83 = (unint64_t)(v35 + 28);
            }
            if (v34 < v31)
            {
              do
              {
                sub_100C760F0(v82, (uint64_t *)&v83);
                v36 = v82[0] + 504;
                do
                {
                  v34 = v36;
                  if (v85 && !*(_BYTE *)(v36 + 476))
                    break;
                  v36 += 504;
                }
                while (v86 >= *(double *)(v34 + 488));
                v82[0] = v34;
                v37 = v83;
                do
                {
                  do
                  {
                    v37 -= 504;
                    v83 = v37;
                  }
                  while (v85 && !*(_BYTE *)(v37 + 476));
                }
                while (v86 < *(double *)(v37 + 488));
              }
              while (v34 < v37);
            }
            v38 = v34 - 504;
            if (v34 - 504 != v13)
              sub_100C7660C(v13, v34 - 504);
            sub_100C7660C(v38, (uint64_t)v84);
            v7 = v82[0];
            sub_100C6A3A0(v84);
            a4 = 0;
            goto LABEL_59;
          }
        }
        v15 = v80;
        sub_100C76708((uint64_t)v84, v81);
        for (j = 0; ; j += 504)
        {
          v17 = *(_BYTE *)(v13 + j + 980) && v85 == 0;
          if (!v17 && *(double *)(v13 + j + 992) >= v86)
            break;
        }
        v18 = v13 + j;
        v19 = v13 + j + 504;
        v82[0] = v19;
        if (j)
        {
          v20 = v80 - 504;
          do
          {
            v15 = v20;
            if (*(_BYTE *)(v20 + 476))
              v21 = v85 == 0;
            else
              v21 = 0;
            if (v21)
              break;
            v20 -= 504;
          }
          while (*(double *)(v15 + 488) >= v86);
        }
        else
        {
          while (v19 < v15)
          {
            v22 = v15 - 504;
            if (*(_BYTE *)(v15 - 28))
              v23 = v85 == 0;
            else
              v23 = 0;
            if (!v23)
            {
              v24 = *(double *)(v15 - 16);
              v15 -= 504;
              if (v24 >= v86)
                continue;
            }
            v15 = v22;
            break;
          }
        }
        v83 = v15;
        if (v19 < v15)
        {
          do
          {
            sub_100C760F0(v82, (uint64_t *)&v83);
            v25 = v82[0];
            do
            {
              v25 += 504;
              if (*(_BYTE *)(v25 + 476))
                v26 = v85 == 0;
              else
                v26 = 0;
            }
            while (v26 || *(double *)(v25 + 488) < v86);
            v82[0] = v25;
            v27 = v83 - 504;
            do
            {
              v28 = v27;
              if (*(_BYTE *)(v27 + 476))
                v29 = v85 == 0;
              else
                v29 = 0;
              if (v29)
                break;
              v27 -= 504;
            }
            while (*(double *)(v28 + 488) >= v86);
            v83 = v28;
          }
          while (v25 < v28);
          v18 = v25 - 504;
        }
        if (v18 != v13)
          sub_100C7660C(v13, v18);
        sub_100C7660C(v18, (uint64_t)v84);
        sub_100C6A3A0(v84);
        if (v19 < v15)
          goto LABEL_58;
        v30 = sub_100C763F0(v81, v18);
        v7 = v18 + 504;
        if (!sub_100C763F0(v18 + 504, v80))
        {
          if (!v30)
          {
LABEL_58:
            sub_100C756E0(v81, v18, a3, a4 & 1);
            a4 = 0;
            v7 = v18 + 504;
          }
LABEL_59:
          v81 = v7;
          goto LABEL_60;
        }
        if ((v30 & 1) == 0)
        {
          v80 = v18;
          v7 = v81;
LABEL_60:
          v6 = v80;
          continue;
        }
        return;
    }
  }
}

void sub_100C76094(_Unwind_Exception *a1)
{
  sub_100C6A3A0(&STACK[0x210]);
  _Unwind_Resume(a1);
}

_QWORD *sub_100C760F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[63];

  v2 = *a1;
  v3 = *a2;
  sub_100C76708((uint64_t)v5, *a1);
  sub_100C7660C(v2, v3);
  sub_100C7660C(v3, (uint64_t)v5);
  return sub_100C6A3A0(v5);
}

void sub_100C7614C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C6A3A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100C76160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v18 = a1;
  v15 = a4;
  v16 = a3;
  v14 = a5;
  sub_100C76BDC(a1, a2, a3, a4);
  if (*(_BYTE *)(a5 + 476))
    v10 = *(_BYTE *)(a4 + 476) == 0;
  else
    v10 = 0;
  if (v10 || *(double *)(a5 + 488) < *(double *)(a4 + 488))
  {
    sub_100C760F0(&v15, &v14);
    v11 = *(_BYTE *)(v15 + 476) && *(_BYTE *)(a3 + 476) == 0;
    if (v11 || *(double *)(v15 + 488) < *(double *)(a3 + 488))
    {
      sub_100C760F0(&v16, &v15);
      v12 = *(_BYTE *)(v16 + 476) && *(_BYTE *)(a2 + 476) == 0;
      if (v12 || *(double *)(v16 + 488) < *(double *)(a2 + 488))
      {
        sub_100C760F0(&v17, &v16);
        if (*(_BYTE *)(v17 + 476))
          v13 = *(_BYTE *)(a1 + 476) == 0;
        else
          v13 = 0;
        if (v13 || *(double *)(v17 + 488) < *(double *)(a1 + 488))
          sub_100C760F0(&v18, &v17);
      }
    }
  }
}

double sub_100C76280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  BOOL v4;
  BOOL v5;
  char v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a1;
  v11 = a3;
  v12 = a2;
  result = *(double *)(a2 + 488);
  if (*(_BYTE *)(a2 + 476))
    v4 = *(_BYTE *)(a1 + 476) == 0;
  else
    v4 = 0;
  if (!v4)
  {
    if (*(_BYTE *)(a2 + 476))
      v5 = 1;
    else
      v5 = *(_BYTE *)(a3 + 476) == 0;
    v6 = !v5;
    if (result >= *(double *)(a1 + 488))
    {
      if ((v6 & 1) != 0 || *(double *)(a3 + 488) < result)
      {
        sub_100C760F0(&v12, &v11);
        v10 = *(_BYTE *)(v12 + 476) && *(_BYTE *)(v13 + 476) == 0;
        if (v10 || (result = *(double *)(v12 + 488), result < *(double *)(v13 + 488)))
        {
          v7 = &v13;
          v9 = &v12;
          goto LABEL_22;
        }
      }
      return result;
    }
    if ((v6 & 1) != 0)
    {
LABEL_14:
      v7 = &v13;
LABEL_21:
      v9 = &v11;
LABEL_22:
      sub_100C760F0(v7, v9);
      return result;
    }
  }
  if (*(double *)(a3 + 488) < result)
    goto LABEL_14;
  sub_100C760F0(&v13, &v12);
  if (*(_BYTE *)(v11 + 476))
    v8 = *(_BYTE *)(v12 + 476) == 0;
  else
    v8 = 0;
  if (v8 || (result = *(double *)(v11 + 488), result < *(double *)(v12 + 488)))
  {
    v7 = &v12;
    goto LABEL_21;
  }
  return result;
}

_QWORD *sub_100C76380(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[63];

  v2 = *a1;
  v3 = *a2;
  sub_100C76708((uint64_t)v5, *a1);
  sub_100C7660C(v2, v3);
  sub_100C7660C(v3, (uint64_t)v5);
  return sub_100C6A3A0(v5);
}

void sub_100C763DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C6A3A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C763F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t i;
  BOOL v12;
  _QWORD v14[59];
  char v15;
  double v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  v17 = a2;
  v18 = a1;
  v4 = 1;
  switch(0xEFBEFBEFBEFBEFBFLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v17 = a2 - 504;
      if (*(_BYTE *)(a2 - 28))
        v5 = *(_BYTE *)(a1 + 476) == 0;
      else
        v5 = 0;
      if (v5 || *(double *)(a2 - 16) < *(double *)(a1 + 488))
        sub_100C760F0(&v18, &v17);
      return v4;
    case 3uLL:
      sub_100C76280(a1, a1 + 504, a2 - 504);
      return v4;
    case 4uLL:
      sub_100C76BDC(a1, a1 + 504, a1 + 1008, a2 - 504);
      return v4;
    case 5uLL:
      sub_100C76160(a1, a1 + 504, a1 + 1008, a1 + 1512, a2 - 504);
      return v4;
    default:
      v6 = a1 + 1008;
      sub_100C76280(a1, a1 + 504, a1 + 1008);
      v7 = a1 + 1512;
      if (a1 + 1512 == v2)
        return 1;
      v8 = 0;
      v9 = a1 + 980;
      break;
  }
  while (1)
  {
    if (*(_BYTE *)(v7 + 476))
      v10 = *(_BYTE *)(v6 + 476) == 0;
    else
      v10 = 0;
    if (!v10 && *(double *)(v7 + 488) >= *(double *)(v6 + 488))
      goto LABEL_25;
    sub_100C76708((uint64_t)v14, v7);
    for (i = v9; ; i -= 504)
    {
      sub_100C7660C(i + 532, i + 28);
      if (i + 28 == v18)
        break;
      v12 = v15 && *(_BYTE *)i == 0;
      if (!v12 && v16 >= *(double *)(i + 12))
        break;
    }
    sub_100C7660C(i + 28, (uint64_t)v14);
    if (++v8 == 8)
      break;
    sub_100C6A3A0(v14);
    v2 = v17;
LABEL_25:
    v6 = v7;
    v9 += 504;
    v7 += 504;
    if (v7 == v2)
      return 1;
  }
  v4 = v7 + 504 == v17;
  sub_100C6A3A0(v14);
  return v4;
}

void sub_100C765F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C6A3A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C7660C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a1 == a2)
  {
    sub_100C6CE90(a1 + 32, a2 + 32);
    *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
    v6 = *(_OWORD *)(a2 + 400);
    v7 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v7;
    *(_OWORD *)(a1 + 400) = v6;
  }
  else
  {
    sub_100C7699C((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5));
    sub_100C6CE90(a1 + 32, a2 + 32);
    sub_100C7699C((char *)(a1 + 344), *(char **)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 5));
    sub_1008AFA64((char *)(a1 + 368), *(char **)(a2 + 368), *(_QWORD *)(a2 + 376), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 3));
    *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
    v4 = *(_OWORD *)(a2 + 400);
    v5 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v5;
    *(_OWORD *)(a1 + 400) = v4;
    sub_100C76AD4((char *)(a1 + 448), *(char **)(a2 + 448), *(_QWORD *)(a2 + 456), (uint64_t)(*(_QWORD *)(a2 + 456) - *(_QWORD *)(a2 + 448)) >> 6);
  }
  v8 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v8;
  return a1;
}

uint64_t sub_100C76708(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = off_10217C410;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_100C7686C((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5));
  sub_1009EF950(a1 + 32, a2 + 32);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  sub_100C7686C((_QWORD *)(a1 + 344), *(const void **)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 5));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  sub_1008BC19C((_QWORD *)(a1 + 368), *(const void **)(a2 + 368), *(_QWORD *)(a2 + 376), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 3));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  v4 = *(_OWORD *)(a2 + 400);
  v5 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v5;
  *(_OWORD *)(a1 + 400) = v4;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  sub_100C768E4((_QWORD *)(a1 + 448), *(const void **)(a2 + 448), *(_QWORD *)(a2 + 456), (uint64_t)(*(_QWORD *)(a2 + 456) - *(_QWORD *)(a2 + 448)) >> 6);
  v6 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v6;
  return a1;
}

void sub_100C76818(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  void *v5;

  sub_100C6A35C(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_100C7686C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100675778(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100C768C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100C768E4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100C7695C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100C76940(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100C7695C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    sub_100259694();
  result = (char *)sub_1002697F0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

char *sub_100C7699C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 5) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x155555555555555)
      v12 = 0x2AAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_100675778(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 5) >= a4)
    goto LABEL_16;
  v16 = &__src[32 * ((v15 - v9) >> 5)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_100C76AD4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 6)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 58)
      sub_100259694();
    v10 = v8 >> 5;
    if (v8 >> 5 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_100C7695C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 6;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_100C76BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a1;
  v11 = a4;
  v12 = a3;
  sub_100C76280(a1, a2, a3);
  if (*(_BYTE *)(a4 + 476))
    v8 = *(_BYTE *)(a3 + 476) == 0;
  else
    v8 = 0;
  if (v8 || *(double *)(a4 + 488) < *(double *)(a3 + 488))
  {
    sub_100C760F0(&v12, &v11);
    v9 = *(_BYTE *)(v12 + 476) && *(_BYTE *)(a2 + 476) == 0;
    if (v9 || *(double *)(v12 + 488) < *(double *)(a2 + 488))
    {
      sub_100C760F0(&v13, &v12);
      if (*(_BYTE *)(v13 + 476))
        v10 = *(_BYTE *)(a1 + 476) == 0;
      else
        v10 = 0;
      if (v10 || *(double *)(v13 + 488) < *(double *)(a1 + 488))
        sub_100C760F0(&v14, &v13);
    }
  }
}

uint64_t sub_100C76D64(uint64_t a1, uint64_t a2)
{
  _BYTE v5[32];
  _QWORD v6[7];

  sub_100166054(v6);
  sub_10010F434((uint64_t)v5);
  sub_100C8A6D8(a1, (uint64_t)v5, a2, (uint64_t)v6);
  return sub_100166004(v6);
}

void sub_100C76DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C76E6C(uint64_t result, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[32];
  _QWORD v7[7];

  v3 = result;
  if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
  {
    sub_100166054(v7);
    sub_10010F434((uint64_t)v6);
    sub_100C8B9E0(v4, (uint64_t)v6, a2, v5, (uint64_t)v7);
    sub_1001668A0(v3, (uint64_t)v7, 0);
    return sub_100166004(v7);
  }
  return result;
}

void sub_100C76EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C76F1C(uint64_t result, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[32];
  _QWORD v7[7];

  v3 = result;
  if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
  {
    sub_100166054(v7);
    sub_10010F434((uint64_t)v6);
    sub_100C8BAF8(v4, (uint64_t)v6, a2, v5, (uint64_t)v7);
    sub_1001668A0(v3, (uint64_t)v7, 0);
    return sub_100166004(v7);
  }
  return result;
}

void sub_100C76F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C76FCC(uint64_t result, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[32];
  _QWORD v7[7];

  v3 = result;
  if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
  {
    sub_100166054(v7);
    sub_10010F434((uint64_t)v6);
    sub_100C8BC34(v4, (uint64_t)v6, a2, v5, (uint64_t)v7);
    sub_1001668A0(v3, (uint64_t)v7, 0);
    return sub_100166004(v7);
  }
  return result;
}

void sub_100C77040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C77068()
{
  _opaque_pthread_t *v0;
  NSObject *v1;
  int v2;
  int *v3;
  char *v4;
  uint64_t v5;
  int v6;
  int *v7;
  char *v8;
  const char *v9;
  uint8_t *v10;
  NSString *v11;
  const char *label;
  const char *v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  int *v17;
  char *v18;
  uint64_t v19;
  int v20;
  int *v21;
  char *v22;
  double v23;
  uint8_t *v24;
  NSObject *v25;
  int v26;
  int sched_priority;
  int priority_min;
  int priority_max;
  int v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  double v39;
  uint8_t *v40;
  uint64_t v41;
  sched_param v42;
  __uint64_t v43;
  int v44;
  _BYTE v45[26];
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint8_t buf[4];
  _BYTE v51[26];
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  v0 = pthread_self();
  v43 = 0;
  if (pthread_threadid_np(v0, &v43))
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v1 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      v2 = *__error();
      v3 = __error();
      v4 = strerror(*v3);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)v51 = v2;
      *(_WORD *)&v51[4] = 2082;
      *(_QWORD *)&v51[6] = v4;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Raven: rct,threadParam,threadid,failed,%{public}d,%{public}s", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    v6 = *__error();
    v7 = __error();
    v8 = strerror(*v7);
    v44 = 67240450;
    *(_DWORD *)v45 = v6;
    *(_WORD *)&v45[4] = 2082;
    *(_QWORD *)&v45[6] = v8;
    LODWORD(v41) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "Raven: rct,threadParam,threadid,failed,%{public}d,%{public}s", &v44, v41);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "static void CLRavenController::RavenThread::LogThreadParam()", "%s\n", v9);
    if (v10 == buf)
      return;
LABEL_42:
    free(v10);
    return;
  }
  v11 = -[NSThread name](+[NSThread currentThread](NSThread, "currentThread"), "name");
  if (-[NSString length](v11, "length"))
    label = -[NSString UTF8String](v11, "UTF8String");
  else
    label = dispatch_queue_get_label(0);
  v13 = label;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v14 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)v51 = v13;
    *(_WORD *)&v51[8] = 2050;
    *(_QWORD *)&v51[10] = v43;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Raven: rct,threadParam,%{public}s,id,0x%{public}llx", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v44 = 136446466;
    *(_QWORD *)v45 = v13;
    *(_WORD *)&v45[8] = 2050;
    *(_QWORD *)&v45[10] = v43;
    LODWORD(v41) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: rct,threadParam,%{public}s,id,0x%{public}llx", &v44, v41);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::RavenThread::LogThreadParam()", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  HIDWORD(v41) = -1;
  if (pthread_getschedparam(v0, (int *)&v41 + 1, &v42))
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v15 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      v16 = *__error();
      v17 = __error();
      v18 = strerror(*v17);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v51 = v13;
      *(_WORD *)&v51[8] = 1026;
      *(_DWORD *)&v51[10] = v16;
      *(_WORD *)&v51[14] = 2082;
      *(_QWORD *)&v51[16] = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Raven: rct,threadParam,getschedparam,%{public}s,failed,%{public}d,%{public}s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v19 = qword_1022A00A8;
      v20 = *__error();
      v21 = __error();
      v22 = strerror(*v21);
      v44 = 136446722;
      *(_QWORD *)v45 = v13;
      *(_WORD *)&v45[8] = 1026;
      *(_DWORD *)&v45[10] = v20;
      *(_WORD *)&v45[14] = 2082;
      *(_QWORD *)&v45[16] = v22;
      LODWORD(v41) = 28;
      v23 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 16, "Raven: rct,threadParam,getschedparam,%{public}s,failed,%{public}d,%{public}s", &v44, v41);
      v10 = v24;
      sub_100512490("Generic", 1, 0, 0, "static void CLRavenController::RavenThread::LogThreadParam()", "%s\n", v23);
      goto LABEL_41;
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v25 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      v26 = HIDWORD(v41);
      sched_priority = v42.sched_priority;
      priority_min = sched_get_priority_min(SHIDWORD(v41));
      priority_max = sched_get_priority_max(SHIDWORD(v41));
      v30 = sched_get_priority_max(4);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)v51 = v13;
      *(_WORD *)&v51[8] = 1026;
      *(_DWORD *)&v51[10] = v26;
      *(_WORD *)&v51[14] = 1026;
      *(_DWORD *)&v51[16] = sched_priority;
      *(_WORD *)&v51[20] = 1026;
      *(_DWORD *)&v51[22] = priority_min;
      v52 = 1026;
      v53 = priority_max;
      v54 = 1026;
      v55 = v30;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Raven: rct,threadParam,%{public}s,policy,%{public}d,priority,%{public}d,currMin,%{public}d,currMax,%{public}d,allMax,%{public}d", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v33 = qword_1022A00A8;
      v34 = HIDWORD(v41);
      v35 = v42.sched_priority;
      v36 = sched_get_priority_min(SHIDWORD(v41));
      v37 = sched_get_priority_max(SHIDWORD(v41));
      v38 = sched_get_priority_max(4);
      v44 = 136447490;
      *(_QWORD *)v45 = v13;
      *(_WORD *)&v45[8] = 1026;
      *(_DWORD *)&v45[10] = v34;
      *(_WORD *)&v45[14] = 1026;
      *(_DWORD *)&v45[16] = v35;
      *(_WORD *)&v45[20] = 1026;
      *(_DWORD *)&v45[22] = v36;
      v46 = 1026;
      v47 = v37;
      v48 = 1026;
      v49 = v38;
      LODWORD(v41) = 42;
      v39 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "Raven: rct,threadParam,%{public}s,policy,%{public}d,priority,%{public}d,currMin,%{public}d,currMax,%{public}d,allMax,%{public}d", &v44, v41);
      v10 = v40;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::RavenThread::LogThreadParam()", "%s\n", v39);
LABEL_41:
      if (v10 == buf)
        return;
      goto LABEL_42;
    }
  }
}

void sub_100C77780(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  std::thread v7;
  uint8_t buf[8];
  uint64_t v9;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1018212795;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  std::promise<void>::promise((std::promise<void> *)(a1 + 176));
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a2;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Raven: rct,RavenThread,enter", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v7.__t_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: rct,RavenThread,enter", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLRavenController::RavenThread::RavenThread(CLRavenController &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100009EA0(a1, 1u);
  *(_QWORD *)buf = sub_100066180;
  v9 = 0;
  sub_100C96BC0();
}

void sub_100C77B20(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  std::condition_variable *v3;
  std::promise<void> *v4;
  std::thread *v5;

  std::thread::~thread(v5);
  std::promise<void>::~promise(v4);
  sub_100C95458((_QWORD *)(v1 + 128));
  std::condition_variable::~condition_variable(v3);
  std::mutex::~mutex(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100C77B70()
{
  return 1;
}

uint64_t sub_100C77B78()
{
  return 0;
}

_QWORD *sub_100C77B80@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "RavenControllerDisabledState");
}

void sub_100C77B90(uint64_t a1, int a2)
{
  double v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  double v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  double v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  double v18;

  v4 = sub_1001FCBB4();
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v5 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (v4 - *(double *)(a1 + 40)) * 1000.0;
    *(_DWORD *)buf = 67240448;
    v16 = a2;
    v17 = 2050;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGLS,Raven,RavenControllerDisabledState,pauseResetAndFreeRavenSupervisorWithCompletion,success,%{public}d,time,%{public}.1lfms", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v8 = (v4 - *(double *)(a1 + 40)) * 1000.0;
    v12[0] = 67240448;
    v12[1] = a2;
    v13 = 2050;
    v14 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLGLS,Raven,RavenControllerDisabledState,pauseResetAndFreeRavenSupervisorWithCompletion,success,%{public}d,time,%{public}.1lfms", v12, 18);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRavenController::RavenControllerDisabledState::HandleStateEntry()_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  if ((a2 & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGLS,Raven,Failed to pause, reset, and free raven supervisor", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v12[0]) = 0;
      LODWORD(v11) = 2;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLGLS,Raven,Failed to pause, reset, and free raven supervisor", v12, v11);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLRavenController::RavenControllerDisabledState::HandleStateEntry()_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
}

void sub_100C77ECC(std::string *a1@<X8>)
{
  id v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void **v12;
  void **v13;
  size_t v14;
  std::string *v15;
  void **v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  uint8_t *v23;
  std::string::size_type v24;
  void **v25;
  void **v26;
  const char *v27;
  uint8_t *v28;
  id v29;
  uint64_t v30;
  std::string v31;
  void *__p[2];
  unsigned __int8 v33;
  void *v34[2];
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::string v40;
  uint8_t buf[1640];
  _BYTE v42[128];

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_1001E4804(buf);
  v2 = sub_10056A79C(*(uint64_t *)buf);
  v3 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v6 = objc_msgSend(v2, "allKeys");
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v37;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v37 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)v9);
        if (objc_msgSend(v10, "hasPrefix:", CFSTR("ravenconfig_")))
        {
          sub_1015A2E04(v34, (char *)objc_msgSend(objc_msgSend(v10, "substringFromIndex:", objc_msgSend(CFSTR("ravenconfig_"), "length")), "UTF8String"));
          sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectForKeyedSubscript:", v10), "description"), "UTF8String"));
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v11 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
          {
            v12 = v34;
            if ((v35 & 0x80u) != 0)
              v12 = (void **)v34[0];
            v13 = __p;
            if ((v33 & 0x80u) != 0)
              v13 = (void **)__p[0];
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = v12;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)&buf[14] = v13;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Raven: daemon setting,%{private}s,%{private}s", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v25 = v34;
            if ((v35 & 0x80u) != 0)
              v25 = (void **)v34[0];
            v26 = __p;
            if ((v33 & 0x80u) != 0)
              v26 = (void **)__p[0];
            LODWORD(v40.__r_.__value_.__l.__data_) = 136380931;
            *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
            WORD2(v40.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
            LODWORD(v30) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: daemon setting,%{private}s,%{private}s", &v40, v30);
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "std::string RavenParametersStringFromDaemonDefaults()", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
          if ((v35 & 0x80u) == 0)
            v14 = v35;
          else
            v14 = (size_t)v34[1];
          sub_100259584((uint64_t)&v31, v14 + 2);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v15 = &v31;
          else
            v15 = (std::string *)v31.__r_.__value_.__r.__words[0];
          if (v14)
          {
            if ((v35 & 0x80u) == 0)
              v16 = v34;
            else
              v16 = (void **)v34[0];
            memmove(v15, v16, v14);
          }
          strcpy((char *)v15 + v14, ": ");
          if ((v33 & 0x80u) == 0)
            v17 = __p;
          else
            v17 = (void **)__p[0];
          if ((v33 & 0x80u) == 0)
            v18 = v33;
          else
            v18 = (std::string::size_type)__p[1];
          v19 = std::string::append(&v31, (const std::string::value_type *)v17, v18);
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          v21 = std::string::append(&v40, "\n");
          v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          if ((buf[23] & 0x80u) == 0)
            v23 = buf;
          else
            v23 = *(uint8_t **)buf;
          if ((buf[23] & 0x80u) == 0)
            v24 = buf[23];
          else
            v24 = *(_QWORD *)&buf[8];
          std::string::append(a1, (const std::string::value_type *)v23, v24);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
          if ((char)v33 < 0)
            operator delete(__p[0]);
          if ((char)v35 < 0)
            operator delete(v34[0]);
        }
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v29 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
      v7 = v29;
    }
    while (v29);
  }

}

void sub_100C7837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (*(char *)(v54 + 23) < 0)
    operator delete(*(void **)v54);
  _Unwind_Resume(exception_object);
}

BOOL sub_100C7843C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  int v6;
  std::string::size_type v7;
  NSStringEncoding v8;
  std::string *v9;
  NSString *v10;
  char v11;
  void *v12;
  uint64_t v13;
  NSData *v14;
  double v15;
  std::timed_mutex *v16;
  void *v17;
  std::timed_mutex *v18;
  NSObject *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _BOOL8 v45;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  _QWORD v52[6];
  __int16 v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  _BYTE v62[8];
  void *v63;
  char v64;
  void *__p;
  char v66;
  _QWORD v67[7];
  uint8_t buf[1640];

  *(double *)(a1 + 16) = sub_1001FCBB4();
  *(_WORD *)(a1 + 24) = 0;
  sub_100166054(v67);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v2 + 4680)
    && (sub_10114C4C0(*(_QWORD *)(v2 + 4680)), v2 = *(_QWORD *)(a1 + 8), *(_QWORD *)(v2 + 4680))
    || *(_BYTE *)(v2 + 4664))
  {
    sub_100C78C88(v2, (uint64_t)v67, (uint64_t)v62);
    if (v66 < 0)
      operator delete(__p);
    if (v64 < 0)
      operator delete(v63);
  }
  v58 = 0;
  v59 = &v58;
  v60 = 0x2020000000;
  v61 = 1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 4664))
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGLS,CLRavenController", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v57.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLGLS,CLRavenController", &v57, 2);
      v48 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRavenController::RavenControllerBestEffortState::HandleStateEntry()", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
    sub_100C77ECC(&v57);
    v6 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
    v7 = v57.__r_.__value_.__r.__words[0];
    v8 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
    if (v6 >= 0)
      v9 = &v57;
    else
      v9 = (std::string *)v7;
    v10 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v9, v8);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v11 = wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v67, &v54);
    if ((v11 & 1) != 0)
    {
      if (v56 >= 0)
        v12 = &v54;
      else
        v12 = v54;
      if (v56 >= 0)
        v13 = HIBYTE(v56);
      else
        v13 = v55;
      v14 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v12, v13);
      v15 = sub_1001FCBB4();
      v16 = (std::timed_mutex *)(*(_QWORD *)(a1 + 8) + 320);
      std::timed_mutex::lock(v16);
      v17 = *(void **)(*(_QWORD *)(a1 + 8) + 4672);
      v52[0] = _NSConcreteStackBlock;
      v52[1] = 3221225472;
      v52[2] = sub_100C790AC;
      v52[3] = &unk_10217C4F8;
      *(double *)&v52[5] = v15;
      v52[4] = &v58;
      objc_msgSend(v17, "configureInitializeAndStartRavenSupervisorWithPlatformInfo:withParametersOverrideString:withCompletion:", v14, v10, v52);
      std::timed_mutex::unlock(v16);
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v19 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Raven: Could not serialize protobuf message", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v53 = 0;
        LODWORD(v51) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: Could not serialize protobuf message", &v53, v51);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLRavenController::RavenControllerBestEffortState::HandleStateEntry()", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
    }
    if (SHIBYTE(v56) < 0)
      operator delete(v54);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    objc_autoreleasePoolPop(v4);
    if ((v11 & 1) == 0)
      goto LABEL_81;
  }
  else if (*(_QWORD *)(v3 + 312))
  {
    v18 = (std::timed_mutex *)(v3 + 320);
    std::timed_mutex::lock((std::timed_mutex *)(v3 + 320));
    cnframework::Supervisor::Start(*(cnframework::Supervisor **)(*(_QWORD *)(a1 + 8) + 312));
    std::timed_mutex::unlock(v18);
  }
  if (!*((_BYTE *)v59 + 24))
  {
LABEL_81:
    v45 = 0;
    goto LABEL_82;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    sub_100C793E8(*(_QWORD *)(a1 + 8));
    sub_100C795A8(*(_QWORD *)(a1 + 8));
    sub_100C79768(*(_QWORD *)(a1 + 8));
    sub_100C79954(*(_QWORD *)(a1 + 8));
    sub_100C79B1C(*(_QWORD *)(a1 + 8));
  }
  sub_100C79CDC(*(_QWORD *)(a1 + 8));
  sub_100C79E98(*(_QWORD *)(a1 + 8));
  v20 = *(_QWORD *)(a1 + 8);
  v21 = (_BYTE *)(v20 + 4637);
  if (!*(_BYTE *)(v20 + 4637))
  {
    v22 = *(_QWORD *)(v20 + 136);
    if (v22)
    {
      objc_msgSend(*(id *)(v22 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v22 + 8), 36, 0);
      v20 = *(_QWORD *)(a1 + 8);
    }
    *v21 = 1;
  }
  v23 = (_BYTE *)(v20 + 4638);
  if (!*(_BYTE *)(v20 + 4638))
  {
    v24 = *(_QWORD *)(v20 + 144);
    if (v24)
    {
      objc_msgSend(*(id *)(v24 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v24 + 8), 10, 0);
      v20 = *(_QWORD *)(a1 + 8);
    }
    *v23 = 1;
  }
  sub_100C7A078(v20);
  v25 = *(_QWORD *)(a1 + 8);
  v26 = (_BYTE *)(v25 + 4641);
  if (!*(_BYTE *)(v25 + 4641))
  {
    v27 = *(_QWORD *)(v25 + 168);
    if (v27)
    {
      objc_msgSend(*(id *)(v27 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v27 + 8), 0, 0);
      v25 = *(_QWORD *)(a1 + 8);
    }
    *v26 = 1;
  }
  v28 = (_BYTE *)(v25 + 4642);
  if (!*(_BYTE *)(v25 + 4642))
  {
    v29 = *(_QWORD *)(v25 + 176);
    if (v29)
    {
      objc_msgSend(*(id *)(v29 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v29 + 8), 25, 0);
      v25 = *(_QWORD *)(a1 + 8);
    }
    *v28 = 1;
  }
  v30 = (_BYTE *)(v25 + 4643);
  if (!*(_BYTE *)(v25 + 4643))
  {
    v31 = *(_QWORD *)(v25 + 184);
    if (v31)
    {
      objc_msgSend(*(id *)(v31 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v31 + 8), 1, 0);
      v25 = *(_QWORD *)(a1 + 8);
    }
    *v30 = 1;
  }
  v32 = (_BYTE *)(v25 + 4644);
  if (!*(_BYTE *)(v25 + 4644))
  {
    v33 = *(_QWORD *)(v25 + 192);
    if (v33)
    {
      objc_msgSend(*(id *)(v33 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v33 + 8), 0, 0);
      v25 = *(_QWORD *)(a1 + 8);
    }
    *v32 = 1;
  }
  v34 = (_BYTE *)(v25 + 4645);
  if (!*(_BYTE *)(v25 + 4645))
  {
    v35 = *(_QWORD *)(v25 + 200);
    if (v35)
    {
      objc_msgSend(*(id *)(v35 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v35 + 8), 2, 0);
      v25 = *(_QWORD *)(a1 + 8);
    }
    *v34 = 1;
  }
  sub_100C7A3C0(v25);
  sub_100C7A710(*(_QWORD *)(a1 + 8));
  v36 = *(_QWORD *)(a1 + 8);
  v37 = (_BYTE *)(v36 + 4649);
  if (!*(_BYTE *)(v36 + 4649))
  {
    v38 = *(_QWORD *)(v36 + 248);
    if (v38)
    {
      objc_msgSend(*(id *)(v38 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v38 + 8), 0, 0);
      *v37 = 1;
      v36 = *(_QWORD *)(a1 + 8);
    }
  }
  v39 = (_BYTE *)(v36 + 4650);
  if (!*(_BYTE *)(v36 + 4650))
  {
    v40 = *(_QWORD *)(v36 + 256);
    if (v40)
    {
      objc_msgSend(*(id *)(v40 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v40 + 8), 0, 0);
      *v39 = 1;
      v36 = *(_QWORD *)(a1 + 8);
    }
  }
  v41 = (_BYTE *)(v36 + 4651);
  if (!*(_BYTE *)(v36 + 4651))
  {
    objc_msgSend(*(id *)(v36 + 264), "setNextFireDelay:interval:", 0.1, 0.1);
    *v41 = 1;
    v36 = *(_QWORD *)(a1 + 8);
  }
  sub_100C7A8D8(v36);
  sub_100C7AA94(*(_QWORD *)(a1 + 8));
  v42 = *(_QWORD *)(a1 + 8);
  v43 = (_BYTE *)(v42 + 4654);
  if (!*(_BYTE *)(v42 + 4654))
  {
    v44 = *(_QWORD *)(v42 + 272);
    if (v44)
    {
      objc_msgSend(*(id *)(v44 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v44 + 8), 30, 0);
      v42 = *(_QWORD *)(a1 + 8);
    }
    *v43 = 1;
  }
  sub_100C7AC50(v42);
  sub_100C7AE10(*(_QWORD *)(a1 + 8));
  v45 = *((_BYTE *)v59 + 24) != 0;
LABEL_82:
  _Block_object_dispose(&v58, 8);
  sub_100166004(v67);
  return v45;
}

void sub_100C78BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Block_object_dispose(&a30, 8);
  sub_100166004(&a42);
  _Unwind_Resume(a1);
}

void sub_100C78C88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void **v7;
  void **v8;
  int v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  uint64_t v20;
  uint8_t buf[16];
  uint64_t v22;

  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_100C9559C(a3);
  sub_100197040();
  *(_DWORD *)buf = sub_1001AA9A8();
  v6 = sub_100241564();
  *(_WORD *)a3 = sub_100C7B0D8(v6, (int *)buf, v6);
  sub_100197040();
  *(_BYTE *)(a3 + 2) = sub_10075D288();
  sub_100197040();
  sub_10075ACDC((uint64_t)buf);
  v7 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 24) = v22;
  sub_100197040();
  sub_10075A1D4((uint64_t)buf);
  v8 = (void **)(a3 + 32);
  if (*(char *)(a3 + 55) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 48) = v22;
  if (sub_100195F08())
  {
    v9 = 3;
LABEL_11:
    *(_DWORD *)(a3 + 56) = v9;
    goto LABEL_12;
  }
  if (sub_1000C4240())
  {
    v9 = 1;
    goto LABEL_11;
  }
  if (sub_100081BD0())
  {
    v9 = 2;
    goto LABEL_11;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v13 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Raven: platform info creation on unknown category", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v19) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: platform info creation on unknown category", &v19, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "raven::RavenPlatformInfo CLRavenController::CreateAndLogRavenPlatformInfo(CLP::LogEntry::LogEntry &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
LABEL_12:
  if (sub_1002416E0())
    v10 = 2;
  else
    v10 = 1;
  *(_DWORD *)(a3 + 60) = v10;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v11 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a3 + 55) >= 0)
      v12 = a3 + 32;
    else
      v12 = *(_QWORD *)(a3 + 32);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Raven: system version, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    if (*(char *)(a3 + 55) >= 0)
      v16 = a3 + 32;
    else
      v16 = *(_QWORD *)(a3 + 32);
    v19 = 136315138;
    v20 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: system version, %s", (const char *)&v19);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "raven::RavenPlatformInfo CLRavenController::CreateAndLogRavenPlatformInfo(CLP::LogEntry::LogEntry &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  sub_100C7B8F4(a1, (unsigned __int16 *)a3, a2);
}

void sub_100C79084(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007217D0(v1);
  _Unwind_Resume(a1);
}

void sub_100C790AC(uint64_t a1, int a2)
{
  double v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  double v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  double v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  double v20;

  v4 = sub_1001FCBB4();
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v5 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (v4 - *(double *)(a1 + 40)) * 1000.0;
    *(_DWORD *)buf = 67240448;
    v18 = a2;
    v19 = 2050;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGLS,Raven,RavenControllerBestEffortState,configureInitializeAndStartRavenSupervisorWithPlatformInfo,success,%{public}d,time,%{public}.1lfms", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v8 = (v4 - *(double *)(a1 + 40)) * 1000.0;
    v14[0] = 67240448;
    v14[1] = a2;
    v15 = 2050;
    v16 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLGLS,Raven,RavenControllerBestEffortState,configureInitializeAndStartRavenSupervisorWithPlatformInfo,success,%{public}d,time,%{public}.1lfms", v14, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRavenController::RavenControllerBestEffortState::HandleStateEntry()_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if ((a2 & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGLS,Raven,Failed to configure, initialize, and start raven supervisor", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v14[0]) = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLGLS,Raven,Failed to configure, initialize, and start raven supervisor", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLRavenController::RavenControllerBestEffortState::HandleStateEntry()_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100C793E8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4632);
  if (!*(_BYTE *)(a1 + 4632))
  {
    v3 = sub_10024095C();
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 24);
      if (v4)
        sub_1000A4FD8(v3, 0, v4, 0.01);
    }
    *v1 = 1;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: registering for accelerometer notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for accelerometer notifications", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForAccelerometerNotifications()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100C795A8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4634);
  if (!*(_BYTE *)(a1 + 4634))
  {
    v3 = sub_1000824CC();
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 40);
      if (v4)
        sub_1000A4FD8(v3, 0, v4, 0.04);
    }
    *v1 = 1;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: registering for barometer notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for barometer notifications", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForBarometerNotifications()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100C79768(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4636);
  if (*(_BYTE *)(a1 + 4636) || !*(_BYTE *)(a1 + 4658))
    return;
  v3 = sub_1002433D4();
  if (v3 && *(_QWORD *)(a1 + 64))
  {
    v4 = v3;
    if ((sub_1001B7910() & 0x10) != 0)
    {
      v5 = 4;
      goto LABEL_9;
    }
    if ((sub_1001B7910() & 8) != 0)
    {
      v5 = 1;
LABEL_9:
      sub_1000A4FD8(v4, v5, *(_QWORD *)(a1 + 64), 0.01);
    }
  }
  *v1 = 1;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v6 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Raven: registering for device motion notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for device motion notifications", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForDeviceMotionNotifications()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100C79954(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4639);
  if (!*(_BYTE *)(a1 + 4639) && *(_BYTE *)(a1 + 4659))
  {
    v3 = sub_1000A6A30();
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 152);
      if (v4)
        sub_1000A4FD8(v3, 0, v4, 0.01);
    }
    *v1 = 1;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: registering for magnetometer notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for magnetometer notifications", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForMagnetometerNotifications()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100C79B1C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4647);
  if (!*(_BYTE *)(a1 + 4647))
  {
    v3 = sub_10021C350();
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 208);
      if (v4)
        sub_1000A4FD8(v3, 0, v4, 0.01);
    }
    *v1 = 1;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: registering for rate gyro notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for rate gyro notifications", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForRateGyroNotifications()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100C79CDC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4633);
  if (!*(_BYTE *)(a1 + 4633))
  {
    v2 = *(_QWORD *)(a1 + 168);
    if (v2)
      objc_msgSend(*(id *)(v2 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2 + 8), 2, 0);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: registering for Accessory Vehicle Speed notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for Accessory Vehicle Speed notifications", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForAccessoryVehicleSpeedNotifications()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    *v1 = 1;
  }
}

void sub_100C79E98(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4635);
  if (!*(_BYTE *)(a1 + 4635))
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      objc_msgSend(*(id *)(v3 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v3 + 8), 7, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 15, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 13, 0);
    }
    *v1 = 1;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v4 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: registering for Daemon status notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for Daemon status notifications", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForDaemonStatusNotifications()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100C7A078(uint64_t a1)
{
  _BYTE *v1;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  void *__p[2];
  uint64_t v20;
  uint8_t buf[8];
  std::__shared_weak_count *v22;
  _QWORD v23[3];
  _QWORD *v24;

  v1 = (_BYTE *)(a1 + 4640);
  if (*(_BYTE *)(a1 + 4640))
    return;
  sub_1007208BC(buf, (_QWORD *)a1);
  v4 = *(_QWORD *)buf;
  v3 = v22;
  if (v22)
  {
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v9 = sub_10022B068();
  if (byte_102307937 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_102307920, *((unint64_t *)&xmmword_102307920 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_102307920;
    v20 = unk_102307930;
  }
  v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "queue");
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v23[0] = off_10217C940;
  v23[1] = v4;
  v23[2] = v3;
  v24 = v23;
  sub_10001CFEC(v9, (char *)__p, (uint64_t)v10, (uint64_t)v23);
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
    goto LABEL_19;
  }
  if (v24)
  {
    v14 = 5;
LABEL_19:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  *v1 = 1;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Raven:RouteHints,RegisterForMapRouteHintNotifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven:RouteHints,RegisterForMapRouteHintNotifications", v18, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForMapRouteHintNotifications()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_100C7A350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count *v18;

  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(exception_object);
}

void sub_100C7A3C0(uint64_t a1)
{
  _BYTE *v1;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  _BOOL4 v16;
  uint8_t buf[4];
  _BOOL4 v18;
  __int16 v19;
  _BOOL4 v20;

  v1 = (_BYTE *)(a1 + 4646);
  if (!*(_BYTE *)(a1 + 4646) && *(_BYTE *)(a1 + 4660))
  {
    if (*(_QWORD *)(a1 + 232) && (v3 = *(void **)(a1 + 240)) != 0)
    {
      objc_msgSend(v3, "registerForUpdates:");
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v4 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Raven: registering for outdoor service notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: registering for outdoor service notifications", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForOutdoorServiceNotifications()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      *v1 = 1;
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v5 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 232) == 0;
        v7 = *(_QWORD *)(a1 + 240) == 0;
        *(_DWORD *)buf = 67109376;
        v18 = v6;
        v19 = 1024;
        v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Raven: Failed to register for outdoor service notifications,fAdapterOutdoorUpdateIsNil,%d,fOutdoorServiceProxyIsNil,%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v8 = *(_QWORD *)(a1 + 232) == 0;
        v9 = *(_QWORD *)(a1 + 240) == 0;
        v14[0] = 67109376;
        v14[1] = v8;
        v15 = 1024;
        v16 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Failed to register for outdoor service notifications,fAdapterOutdoorUpdateIsNil,%d,fOutdoorServiceProxyIsNil,%d", v14, 14);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForOutdoorServiceNotifications()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

void sub_100C7A710(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (sub_100DED3C8(v2))
    {
      if (!*(_BYTE *)(a1 + 4648))
      {
        v3 = *(_QWORD *)(a1 + 304);
        if (v3)
        {
          objc_msgSend(*(id *)(v3 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v3 + 8), 0, 0);
          *(_BYTE *)(a1 + 4648) = 1;
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v4 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: registering for RayTracing tile notifications", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v7[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for RayTracing tile notifications", v7, 2);
            v6 = (uint8_t *)v5;
            sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForRayTracingTileNotifications()", "%s\n", v5);
            if (v6 != buf)
              free(v6);
          }
        }
      }
    }
  }
}

void sub_100C7A8D8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4652);
  if (!*(_BYTE *)(a1 + 4652))
  {
    v2 = *(_QWORD *)(a1 + 168);
    if (v2)
      objc_msgSend(*(id *)(v2 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2 + 8), 4, 0);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: registering for tunnel bridge assistance (TBA) notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for tunnel bridge assistance (TBA) notifications", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForTunnelBridgeAssistanceNotifications()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    *v1 = 1;
  }
}

void sub_100C7AA94(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4653);
  if (!*(_BYTE *)(a1 + 4653))
  {
    v2 = *(_QWORD *)(a1 + 168);
    if (v2)
      objc_msgSend(*(id *)(v2 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2 + 8), 5, 0);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: registering for tunnel end point assistance (TEPA) notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for tunnel end point assistance (TEPA) notifications", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForTunnelEndPointAssistanceNotifications()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    *v1 = 1;
  }
}

void sub_100C7AC50(uint64_t a1)
{
  _BYTE *v1;
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4655);
  if (!*(_BYTE *)(a1 + 4655) && *(_BYTE *)(a1 + 4661))
  {
    if (*(_QWORD *)(a1 + 280))
    {
      v2 = *(void **)(a1 + 288);
      if (v2)
        objc_msgSend(v2, "registerForVisionNotifications:");
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: registering for vision notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for vision notifications", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForVisionNotifications()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    *v1 = 1;
  }
}

void sub_100C7AE10(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4656);
  if (!*(_BYTE *)(a1 + 4656) && *(_BYTE *)(a1 + 4662))
  {
    v3 = *(_QWORD *)(a1 + 296);
    if (v3)
    {
      objc_msgSend(*(id *)(v3 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v3 + 8), 0, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8), 1, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8), 2, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8), 3, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8), 4, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8), 5, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8), 6, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8), 7, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 296) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8), 12, 0);
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v4 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: registering for wifi notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: registering for wifi notifications", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RegisterForWifiNotifications()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    *v1 = 1;
  }
}

uint64_t sub_100C7B078(uint64_t a1, CLMotionActivity *this)
{
  uint64_t result;
  char v5;

  *(_BYTE *)(a1 + 24) |= CLMotionActivity::isMoving(this);
  result = CLMotionActivity::isMoving(this);
  if ((_DWORD)result)
  {
    result = CLMotionActivity::isUnclassifiedMoving(this);
    v5 = result ^ 1;
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)(a1 + 25) |= v5;
  return result;
}

uint64_t sub_100C7B0D8(uint64_t a1, int *a2, char a3)
{
  uint64_t result;
  NSObject *v5;
  int v6;
  _BOOL4 v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  int v17;
  uint8_t buf[4];
  int v19;

  if ((a3 & 1) != 0)
  {
    result = 2;
    switch(*a2)
    {
      case 78:
        return result;
      case 79:
        result = 3;
        break;
      case 80:
        result = 4;
        break;
      case 82:
        result = 15;
        break;
      case 84:
        result = 16;
        break;
      case 86:
        result = 17;
        break;
      case 88:
        result = 18;
        break;
      case 89:
        result = 19;
        break;
      case 90:
        result = 20;
        break;
      case 91:
        result = 21;
        break;
      case 92:
        result = 22;
        break;
      case 95:
        result = 23;
        break;
      case 96:
        result = 24;
        break;
      case 97:
        result = 25;
        break;
      case 98:
        result = 26;
        break;
      case 99:
        result = 27;
        break;
      case 100:
        result = 28;
        break;
      case 101:
        result = 29;
        break;
      case 102:
        result = 30;
        break;
      case 103:
        result = 31;
        break;
      case 104:
        result = 32;
        break;
      case 105:
        result = 33;
        break;
      case 106:
        result = 34;
        break;
      case 107:
      case 108:
        result = 60;
        break;
      case 109:
      case 110:
        result = 61;
        break;
      case 111:
      case 112:
        result = 62;
        break;
      case 113:
      case 114:
        result = 63;
        break;
      case 115:
        result = 64;
        break;
      case 116:
      case 117:
        result = 67;
        break;
      case 118:
      case 119:
        result = 68;
        break;
      case 120:
      case 121:
        result = 72;
        break;
      case 122:
      case 123:
        result = 73;
        break;
      case 124:
        result = 69;
        break;
      case 125:
        result = 74;
        break;
      case 139:
        result = 5;
        break;
      case 141:
        result = 6;
        break;
      case 142:
        result = 8;
        break;
      case 143:
        result = 7;
        break;
      case 168:
        result = 9;
        break;
      case 169:
        result = 10;
        break;
      case 170:
        result = 12;
        break;
      case 171:
        result = 11;
        break;
      case 172:
        result = 37;
        break;
      case 173:
        result = 38;
        break;
      case 174:
      case 175:
        result = 75;
        break;
      case 176:
        result = 35;
        break;
      case 177:
        result = 36;
        break;
      case 178:
        result = 58;
        break;
      case 179:
        result = 59;
        break;
      case 180:
        result = 65;
        break;
      case 181:
        result = 66;
        break;
      case 182:
        result = 70;
        break;
      case 183:
        result = 71;
        break;
      case 189:
        result = 39;
        break;
      case 198:
        result = 13;
        break;
      case 200:
        result = 14;
        break;
      case 206:
        result = 41;
        break;
      case 210:
        result = 40;
        break;
      case 214:
        result = 54;
        break;
      case 216:
        result = 55;
        break;
      case 217:
        result = 42;
        break;
      case 218:
        result = 43;
        break;
      case 219:
        result = 44;
        break;
      case 220:
        result = 50;
        break;
      case 221:
        result = 51;
        break;
      case 222:
        result = 56;
        break;
      case 223:
        result = 57;
        break;
      case 226:
        result = 45;
        break;
      case 228:
        result = 46;
        break;
      case 230:
        result = 52;
        break;
      case 232:
        result = 53;
        break;
      case 238:
        result = 48;
        break;
      case 239:
        result = 49;
        break;
      case 241:
        result = 47;
        break;
      default:
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v8 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
        {
          v9 = *a2;
          *(_DWORD *)buf = 67109120;
          v19 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Raven: Supported hardware detected but not mapped to explicit HW type: %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v13 = *a2;
          v16 = 67109120;
          v17 = v13;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: Supported hardware detected but not mapped to explicit HW type: %d", &v16);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "raven::RavenPlatformInfo::Hardware CLRavenController::ConvertCLPlatformInfoHardwareToRavenPlatformInfoHardware(const CLPlatformInfo::Hardware &, const BOOL) const", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        result = 1;
        break;
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      v6 = *a2;
      *(_DWORD *)buf = 67109120;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Raven: Unsupported hardware detected, type: %d", buf, 8u);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v10 = *a2;
      v16 = 67109120;
      v17 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: Unsupported hardware detected, type: %d", &v16);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "raven::RavenPlatformInfo::Hardware CLRavenController::ConvertCLPlatformInfoHardwareToRavenPlatformInfoHardware(const CLPlatformInfo::Hardware &, const BOOL) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
      return 0;
    }
  }
  return result;
}

void sub_100C7B8F4(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7[4];

  sub_10010F434((uint64_t)v7);
  sub_100C91100(v6, v7, a2, a3);
  if (*(_QWORD *)(a1 + 4680))
    sub_1001668A0(a1, a3, 1);
}

void sub_100C7B958(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  uint8_t v20;
  int v21;
  uint8_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  const char *v27;
  int v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  int v34;
  int v35;
  uint8_t v36;
  int v37;
  uint8_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint8_t v42;
  int v43;
  uint8_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  int v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  NSObject *v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  NSObject *v64;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  NSObject *v69;
  uint64_t v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  NSObject *v75;
  std::string::size_type size;
  std::string *v77;
  int ConfigurationString;
  std::string::size_type v79;
  std::string *v80;
  NSObject *v81;
  std::string *v82;
  int v83;
  std::string::size_type v84;
  NSStringEncoding v85;
  std::string *v86;
  NSString *v87;
  void *v88;
  uint64_t v89;
  NSData *v90;
  double v91;
  CLGnssLocationXPCServiceManager *v92;
  NSObject *v93;
  const char *v94;
  uint8_t *v95;
  NSObject *v96;
  NSObject *v97;
  int v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  NSObject *v102;
  int v103;
  const char *v104;
  char *v105;
  const char *v106;
  char *v107;
  const char *v108;
  const char *v109;
  char *v110;
  const char *v111;
  const char *v112;
  char *v113;
  const char *v114;
  char *v115;
  const char *v116;
  char *v117;
  const char *v118;
  char *v119;
  const char *v120;
  char *v121;
  const char *v122;
  char *v123;
  int v124;
  const char *v125;
  std::string *v126;
  std::string *v127;
  const char *v128;
  uint8_t *v129;
  const char *v130;
  std::string *v131;
  const char *v132;
  std::string *v133;
  uint64_t v134;
  void *context;
  std::timed_mutex *v136;
  _QWORD v137[6];
  unsigned __int8 v138[16];
  std::string v139;
  _QWORD v140[7];
  void *v141;
  __int128 v142;
  std::string __dst[68];
  uint8_t buf[4];
  _BYTE v145[14];
  char v146;
  void *__p;
  char v148;
  _OWORD v149[239];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = nullsub_1094;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = nullsub_1095;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = nullsub_1096;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  v4 = a1 + 224;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 160) = nullsub_1097;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = nullsub_1098;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  v136 = (std::timed_mutex *)(a1 + 320);
  std::timed_mutex::timed_mutex((std::timed_mutex *)(a1 + 320));
  sub_100C95624(a1 + 440);
  v5 = (_BYTE *)(v4 + 4240);
  sub_100129CA0(a1 + 2872);
  v6 = 0;
  *(_QWORD *)(a1 + 4400) = 850045863;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4408) = 0u;
  *(_OWORD *)(a1 + 4424) = 0u;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4449) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_OWORD *)(a1 + 4488) = 0u;
  *(_OWORD *)(a1 + 4497) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_QWORD *)(a1 + 4552) = 0;
  do
  {
    v7 = a1 + v6;
    *(_DWORD *)(v7 + 4560) = 0;
    *(_OWORD *)(a1 + 4568 + v6) = xmmword_101BBE610;
    *(_QWORD *)(v7 + 4584) = 0xBFF0000000000000;
    v6 += 32;
  }
  while (v6 != 64);
  *(_QWORD *)(a1 + 4656) = 0;
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_OWORD *)(a1 + 4624) = 0u;
  *(_BYTE *)(v4 + 4440) = 1;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_QWORD *)(a1 + 4696) = a1;
  *(_QWORD *)(a1 + 4688) = off_10217C4C0;
  *(_QWORD *)(a1 + 4712) = a1;
  *(_QWORD *)(a1 + 4704) = off_10217C528;
  *(_QWORD *)(a1 + 4720) = 0xBFF0000000000000;
  *(_WORD *)(v4 + 4504) = 0;
  *(_BYTE *)(v4 + 4506) = 0;
  *(_QWORD *)(a1 + 4736) = 0;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v8 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v149[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Raven: constructing CLRavenController", (uint8_t *)v149, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v149, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    *(_WORD *)buf = 0;
    v2 = v149;
    _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: constructing CLRavenController", buf, 2);
    v105 = (char *)v104;
    sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v104);
    if (v105 != (char *)v149)
      free(v105);
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    sub_101924294();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Raven/CLRavenController.mm", 1022, "CLRavenController");
    __break(1u);
    goto LABEL_267;
  }
  v9 = sub_100C7E9C4();
  *(_BYTE *)(v4 + 4439) = v9;
  if (v9)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v10 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v149[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Raven: Raven estimator enabled", (uint8_t *)v149, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v149, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      *(_WORD *)buf = 0;
      LODWORD(v134) = 2;
      _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: Raven estimator enabled", buf, v134);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v11);
LABEL_278:
      if (v12 != (char *)v149)
        free(v12);
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v13 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v149[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Raven: Raven estimator disabled", (uint8_t *)v149, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v149, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      *(_WORD *)buf = 0;
      LODWORD(v134) = 2;
      _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: Raven estimator disabled", buf, v134);
      v12 = (char *)v111;
      sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v111);
      goto LABEL_278;
    }
  }
  sub_1001E4804(v149);
  v14 = *(_QWORD *)&v149[0];
  v15 = sub_100D990D0();
  buf[0] = 0;
  if (sub_1001E4874(v14, "EnableRavenRecorder", (BOOL *)buf))
    LODWORD(v2) = buf[0] != 0;
  else
    LODWORD(v2) = v15;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
  if (*((_QWORD *)&v149[0] + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v19 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v149[0]) = 67240192;
    DWORD1(v149[0]) = (_DWORD)v2;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Raven: EnableRavenRecorder,%{public}d", (uint8_t *)v149, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v149, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v145 = (_DWORD)v2;
    LODWORD(v134) = 8;
    _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: EnableRavenRecorder,%{public}d", buf, v134);
    v107 = (char *)v106;
    sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v106);
    if (v107 != (char *)v149)
      free(v107);
  }
  if ((_DWORD)v2)
    operator new();
  sub_1001E4804(v149);
  v20 = *(_BYTE *)(v4 + 4440);
  buf[0] = 0;
  v21 = sub_1001E4874(*(uint64_t *)&v149[0], "EnableGNSSLocationService", (BOOL *)buf);
  v22 = buf[0];
  if (!v21)
    v22 = v20;
  *(_BYTE *)(v4 + 4440) = v22;
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
  if (*((_QWORD *)&v149[0] + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (!*(_BYTE *)(v4 + 4439))
  {
LABEL_68:
    if (*(_BYTE *)(v4 + 4439))
      v34 = 1;
    else
      v34 = (int)v2;
    if (v34 == 1)
    {
      if (*(_BYTE *)(v4 + 4433))
      {
        v35 = sub_1000FDB0C();
        if (v35)
          LOBYTE(v35) = sub_1002416E0();
      }
      else
      {
        LOBYTE(v35) = 0;
      }
      *(_BYTE *)(v4 + 4433) = v35;
      sub_1001E4804(v149);
      v36 = *(_BYTE *)(v4 + 4433);
      buf[0] = 0;
      v37 = sub_1001E4874(*(uint64_t *)&v149[0], "EnableRavenBuildingDataQuery", (BOOL *)buf);
      v38 = buf[0];
      if (!v37)
        v38 = v36;
      *(_BYTE *)(v4 + 4433) = v38;
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
      if (*((_QWORD *)&v149[0] + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      sub_1001E4804(v149);
      v42 = *(_BYTE *)(a1 + 128);
      buf[0] = 0;
      v43 = sub_1001E4874(*(uint64_t *)&v149[0], "ForceRayTracingOutsideSupportedRegion", (BOOL *)buf);
      v44 = buf[0];
      if (!v43)
        v44 = v42;
      *(_BYTE *)(a1 + 128) = v44;
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
      if (*((_QWORD *)&v149[0] + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      sub_1001E4804(v149);
      buf[0] = 0;
      v48 = sub_1001E4874(*(uint64_t *)&v149[0], "EnableRavenDeviceMotionNotifications", (BOOL *)buf);
      if (buf[0])
        v49 = v48;
      else
        v49 = 0;
      *(_BYTE *)(v4 + 4434) = v49;
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
      if (*((_QWORD *)&v149[0] + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        v49 = *(unsigned __int8 *)(v4 + 4434);
      }
      if (v49)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v53 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v149[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Raven: device motion notifications allowed", (uint8_t *)v149, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v149, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          *(_WORD *)buf = 0;
          LODWORD(v134) = 2;
          _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: device motion notifications allowed", buf, v134);
          v115 = (char *)v114;
          sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v114);
          if (v115 != (char *)v149)
            free(v115);
        }
      }
      sub_1001E4804(v149);
      buf[0] = 0;
      v54 = sub_1001E4874(*(uint64_t *)&v149[0], "EnableRavenMagnetometerNotifications", (BOOL *)buf);
      if (buf[0])
        v55 = v54;
      else
        v55 = 0;
      *(_BYTE *)(v4 + 4435) = v55;
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
      if (*((_QWORD *)&v149[0] + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        v55 = *(unsigned __int8 *)(v4 + 4435);
      }
      if (v55)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v59 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v149[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "Raven: magnetometer notifications allowed", (uint8_t *)v149, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v149, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          *(_WORD *)buf = 0;
          LODWORD(v134) = 2;
          _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: magnetometer notifications allowed", buf, v134);
          v117 = (char *)v116;
          sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v116);
          if (v117 != (char *)v149)
            free(v117);
        }
      }
      sub_1001E4804(v149);
      buf[0] = 0;
      v60 = sub_1001E4874(*(uint64_t *)&v149[0], "EnableRavenVisionNotifications", (BOOL *)buf) ^ 1;
      if (buf[0])
        v60 = 1;
      *(_BYTE *)(v4 + 4437) = v60;
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
      if (*((_QWORD *)&v149[0] + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
        v60 = *(unsigned __int8 *)(v4 + 4437);
      }
      if (v60)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v64 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v149[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "Raven: vision notifications allowed", (uint8_t *)v149, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v149, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          *(_WORD *)buf = 0;
          LODWORD(v134) = 2;
          _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: vision notifications allowed", buf, v134);
          v119 = (char *)v118;
          sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v118);
          if (v119 != (char *)v149)
            free(v119);
        }
      }
      sub_1001E4804(v149);
      buf[0] = 0;
      v65 = sub_1001E4874(*(uint64_t *)&v149[0], "EnableRavenOutdoorServiceNotifications", (BOOL *)buf) ^ 1;
      if (buf[0])
        v65 = 1;
      *(_BYTE *)(v4 + 4436) = v65;
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
      if (*((_QWORD *)&v149[0] + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
        v65 = *(unsigned __int8 *)(v4 + 4436);
      }
      if (v65)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v69 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v149[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "Raven: outdoor service notifications allowed", (uint8_t *)v149, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v149, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          *(_WORD *)buf = 0;
          LODWORD(v134) = 2;
          _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: outdoor service notifications allowed", buf, v134);
          v121 = (char *)v120;
          sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v120);
          if (v121 != (char *)v149)
            free(v121);
        }
      }
      sub_1001E4804(v149);
      buf[0] = 0;
      v70 = sub_1001E4874(*(uint64_t *)&v149[0], "EnableRavenWifiNotifications", (BOOL *)buf);
      if (buf[0])
        v71 = v70;
      else
        v71 = 0;
      *(_BYTE *)(v4 + 4438) = v71;
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
      if (*((_QWORD *)&v149[0] + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
        v71 = *(unsigned __int8 *)(v4 + 4438);
      }
      if (v71)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v75 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v149[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "Raven: wifi notifications allowed", (uint8_t *)v149, 2u);
        }
        v70 = sub_1001BFF7C(115, 2);
        if ((_DWORD)v70)
        {
          bzero(v149, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          *(_WORD *)buf = 0;
          LODWORD(v134) = 2;
          _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: wifi notifications allowed", buf, v134);
          v123 = (char *)v122;
          v70 = sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v122);
          if (v123 != (char *)v149)
            free(v123);
        }
      }
      if (*(_BYTE *)(v4 + 4439) && (*(_BYTE *)(v4 + 4440) || *(_QWORD *)(a1 + 312)))
      {
        cnprint::CNPrinter::GetCNPrinter((cnprint::CNPrinter *)v70);
        *(_QWORD *)&v149[0] = 0;
        cnprint::CNPrinter::EnableLogStream(v149);
        sub_100166054(v140);
        sub_100C78C88(a1, (uint64_t)v140, (uint64_t)buf);
        raven::RavenParameters::RavenParameters(v149, buf);
        if (v148 < 0)
          operator delete(__p);
        if (v146 < 0)
          operator delete(*(void **)&v145[4]);
        sub_100C77ECC(&v139);
        size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v139.__r_.__value_.__l.__size_;
        if (size && !*(_BYTE *)(v4 + 4440))
        {
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = &v139;
          else
            v77 = (std::string *)v139.__r_.__value_.__r.__words[0];
          ConfigurationString = raven::RavenParameters::LoadConfigurationString((raven::RavenParameters *)v149, (const char *)v77, 0);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
            sub_100115CE4(__dst, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
          else
            __dst[0] = v139;
          v79 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
          v80 = __dst;
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v79 = __dst[0].__r_.__value_.__l.__size_;
            v80 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
          }
          for (; v79; --v79)
          {
            if (v80->__r_.__value_.__s.__data_[0] == 10)
              v80->__r_.__value_.__s.__data_[0] = 44;
            v80 = (std::string *)((char *)v80 + 1);
          }
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v81 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
          {
            v82 = __dst;
            if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v82 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 67174915;
            *(_DWORD *)v145 = ConfigurationString;
            *(_WORD *)&v145[4] = 2081;
            *(_QWORD *)&v145[6] = v82;
            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "Raven: overriding raven parameters,success,%{private}d,%{private}s", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v127 = __dst;
            if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v127 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
            LODWORD(v141) = 67174915;
            HIDWORD(v141) = ConfigurationString;
            LOWORD(v142) = 2081;
            *(_QWORD *)((char *)&v142 + 2) = v127;
            LODWORD(v134) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: overriding raven parameters,success,%{private}d,%{private}s", &v141, v134);
            v129 = (uint8_t *)v128;
            sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v128);
            if (v129 != buf)
              free(v129);
          }
          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst[0].__r_.__value_.__l.__data_);
        }
        if (raven::RavenParameters::IsInitialized((raven::RavenParameters *)v149))
        {
          sub_100C95B04((uint64_t)buf);
          sub_100C7EA98((uint64_t)buf, (uint64_t)v149);
          std::timed_mutex::lock(v136);
          if (*(_BYTE *)(v4 + 4440))
          {
            context = objc_autoreleasePoolPush();
            v83 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
            v84 = v139.__r_.__value_.__r.__words[0];
            v85 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
            if (v83 >= 0)
              v86 = &v139;
            else
              v86 = (std::string *)v84;
            v87 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v86, v85);
            v141 = 0;
            v142 = 0uLL;
            if ((wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v140, &v141) & 1) != 0)
            {
              if (v142 >= 0)
                v88 = &v141;
              else
                v88 = v141;
              if (v142 >= 0)
                v89 = HIBYTE(v142);
              else
                v89 = v142;
              v90 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v88, v89);
              v91 = sub_1001FCBB4();
              v92 = *(CLGnssLocationXPCServiceManager **)(a1 + 4672);
              if (!v92)
              {
                v92 = objc_alloc_init(CLGnssLocationXPCServiceManager);
                *(_QWORD *)(a1 + 4672) = v92;
              }
              v137[0] = _NSConcreteStackBlock;
              v137[1] = 3221225472;
              v137[2] = sub_10020AE34;
              v137[3] = &unk_10217C558;
              v137[4] = a1;
              *(double *)&v137[5] = v91;
              -[CLGnssLocationXPCServiceManager configureInitializeAndStartRavenSupervisorWithPlatformInfo:withParametersOverrideString:withCompletion:](v92, "configureInitializeAndStartRavenSupervisorWithPlatformInfo:withParametersOverrideString:withCompletion:", v90, v87, v137);
            }
            else
            {
              if (qword_1022A00A0 != -1)
                dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
              v97 = qword_1022A00A8;
              if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "Raven: Could not serialize protobuf message, estimator disabled", (uint8_t *)__dst, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__dst, 0x65CuLL);
                if (qword_1022A00A0 != -1)
                  dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                *(_WORD *)v138 = 0;
                LODWORD(v134) = 2;
                _os_log_send_and_compose_impl(2, 0, __dst, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: Could not serialize protobuf message, estimator disabled", v138, v134);
                v131 = (std::string *)v130;
                sub_100512490("Generic", 1, 0, 0, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v130);
                if (v131 != __dst)
                  free(v131);
              }
              *(_BYTE *)(v4 + 4439) = 0;
            }
            if (SHIBYTE(v142) < 0)
              operator delete(v141);
            objc_autoreleasePoolPop(context);
          }
          else
          {
            if ((raven::RavenSupervisor::Configure(*(_QWORD *)(a1 + 312), buf) & 1) == 0)
            {
              *(_BYTE *)(v4 + 4439) = 0;
              if (qword_1022A00A0 != -1)
                dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
              v96 = qword_1022A00A8;
              if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_FAULT))
              {
                LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_FAULT, "Raven: could not configure Raven supervisor; estimator disabled",
                  (uint8_t *)__dst,
                  2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__dst, 0x65CuLL);
                if (qword_1022A00A0 != -1)
                  dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                LOWORD(v141) = 0;
                LODWORD(v134) = 2;
                _os_log_send_and_compose_impl(2, 0, __dst, 1628, &_mh_execute_header, qword_1022A00A8, 17, "Raven: could not configure Raven supervisor; estimator disabled",
                  &v141,
                  v134);
                v133 = (std::string *)v132;
                sub_100512490("Generic", 1, 0, 0, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v132);
                if (v133 != __dst)
                  free(v133);
              }
            }
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 64))(*(_QWORD *)(a1 + 312));
          }
          *v5 = 1;
          v138[0] = 0;
          sub_1001E4804(__dst);
          v98 = sub_1001E4874((uint64_t)__dst[0].__r_.__value_.__l.__data_, "RunRavenInWorkerThread", (BOOL *)v138);
          v99 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
          if (__dst[0].__r_.__value_.__l.__size_)
          {
            v100 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          if (v98)
            *v5 = v138[0];
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v102 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
          {
            v103 = *v5;
            LODWORD(__dst[0].__r_.__value_.__l.__data_) = 67240448;
            HIDWORD(__dst[0].__r_.__value_.__r.__words[0]) = v103;
            LOWORD(__dst[0].__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&__dst[0].__r_.__value_.__r.__words[1] + 2) = v138[0];
            _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "Raven: rct,RunInWorkerThread,%{public}d,set,%{public}d", (uint8_t *)__dst, 0xEu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__dst, 0x65CuLL);
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v124 = *v5;
            LODWORD(v141) = 67240448;
            HIDWORD(v141) = v124;
            LOWORD(v142) = 1026;
            *(_DWORD *)((char *)&v142 + 2) = v138[0];
            LODWORD(v134) = 14;
            _os_log_send_and_compose_impl(2, 0, __dst, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: rct,RunInWorkerThread,%{public}d,set,%{public}d", &v141, v134);
            v126 = (std::string *)v125;
            sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v125);
            if (v126 != __dst)
              free(v126);
          }
          std::timed_mutex::unlock(v136);
          sub_100C965F8((uint64_t)buf);
        }
        else
        {
          *(_BYTE *)(v4 + 4439) = 0;
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v93 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_FAULT, "Raven: could not load Raven parameters; estimator disabled",
              buf,
              2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
            LODWORD(v134) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 17, "Raven: could not load Raven parameters; estimator disabled",
              __dst,
              v134);
            v95 = (uint8_t *)v94;
            sub_100512490("Generic", 1, 0, 0, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v94);
            if (v95 != buf)
              free(v95);
          }
        }
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v139.__r_.__value_.__l.__data_);
        sub_100C965F8((uint64_t)v149);
        sub_100166004(v140);
      }
    }
    if (sub_10024095C())
      operator new();
    if (sub_1000824CC())
      operator new();
    sub_100647FA8();
  }
  if (qword_1022A00A0 == -1)
  {
LABEL_47:
    v26 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v4 + 4440))
        v27 = "enabled";
      else
        v27 = "disabled";
      LODWORD(v149[0]) = 136446210;
      *(_QWORD *)((char *)v149 + 4) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Raven: CLGLS,Raven XPC service status, %{public}s", (uint8_t *)v149, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v149, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      if (*(_BYTE *)(v4 + 4440))
        v108 = "enabled";
      else
        v108 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v145 = v108;
      LODWORD(v134) = 12;
      _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: CLGLS,Raven XPC service status, %{public}s", buf, v134);
      v110 = (char *)v109;
      sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v109);
      if (v110 != (char *)v149)
        free(v110);
    }
    if (!*(_BYTE *)(v4 + 4440))
      operator new();
    sub_1001E4804(v149);
    buf[0] = 0;
    v28 = sub_1001E4874(*(uint64_t *)&v149[0], "EnableRavenRegisteringForSensorNotificationsImmediately", (BOOL *)buf);
    if (buf[0])
      v29 = v28;
    else
      v29 = 0;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v149[0] + 1);
    if (*((_QWORD *)&v149[0] + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v149[0] + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    *(_BYTE *)(v4 + 4506) = v29;
    if (v29)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v33 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v149[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Raven: registering for sensor notifications immediately after startup", (uint8_t *)v149, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v149, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        *(_WORD *)buf = 0;
        LODWORD(v134) = 2;
        _os_log_send_and_compose_impl(2, 0, v149, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: registering for sensor notifications immediately after startup", buf, v134);
        v113 = (char *)v112;
        sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v112);
        if (v113 != (char *)v149)
          free(v113);
      }
    }
    goto LABEL_68;
  }
LABEL_267:
  dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  goto LABEL_47;
}

void sub_100C7E458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t *a15, uint64_t a16, raven::RavenSolutionEvent *a17, std::timed_mutex *a18, uint64_t *a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;
  std::mutex *v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  std::timed_mutex::unlock(a18);
  sub_100C965F8((uint64_t)&STACK[0x7B0]);
  if (a42 < 0)
    operator delete(__p);
  sub_100C965F8((uint64_t)&STACK[0x16B0]);
  sub_100166004(&a43);
  *(_QWORD *)(v43 + 4704) = off_10217C480;
  *(_QWORD *)(v43 + 4688) = off_10217C480;
  v46 = *(_QWORD *)(v43 + 4680);
  *(_QWORD *)(v43 + 4680) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *(_QWORD *)(v43 + 4552);
  *(_QWORD *)(v43 + 4552) = 0;
  if (v47)
    operator delete();
  v48 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v43 + 4528) = v48;
    operator delete(v48);
  }
  sub_100C841D4(a15, 0);
  std::mutex::~mutex(v44);
  sub_1004B4F0C(a16);
  raven::RavenSolutionEvent::~RavenSolutionEvent(a17);
  std::timed_mutex::~timed_mutex(a18);
  v49 = *(_QWORD *)(v43 + 312);
  *(_QWORD *)(v43 + 312) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(v43 + 304);
  *(_QWORD *)(v43 + 304) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *(_QWORD *)(v43 + 296);
  *(_QWORD *)(v43 + 296) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(_QWORD *)(v43 + 272);
  *(_QWORD *)(v43 + 272) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *(_QWORD *)(v43 + 256);
  *(_QWORD *)(v43 + 256) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *(_QWORD *)(v43 + 248);
  *(_QWORD *)(v43 + 248) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *(_QWORD *)(v43 + 208);
  *(_QWORD *)(v43 + 208) = 0;
  if (v55)
    (*(void (**)(void))(v43 + 216))();
  v56 = *(_QWORD *)(v43 + 200);
  *(_QWORD *)(v43 + 200) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *(_QWORD *)(v43 + 192);
  *(_QWORD *)(v43 + 192) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(_QWORD *)(v43 + 184);
  *(_QWORD *)(v43 + 184) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *(_QWORD *)(v43 + 176);
  *(_QWORD *)(v43 + 176) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *a22;
  *a22 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *(_QWORD *)(v43 + 152);
  *(_QWORD *)(v43 + 152) = 0;
  if (v61)
    (*(void (**)(void))(v43 + 160))();
  v62 = *(_QWORD *)(v43 + 144);
  *(_QWORD *)(v43 + 144) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *a21;
  *a21 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  sub_100C96DE4(a23, 0);
  sub_100C84198(a19, 0);
  v64 = *(_QWORD *)(v43 + 64);
  *(_QWORD *)(v43 + 64) = 0;
  if (v64)
    (*(void (**)(void))(v43 + 72))();
  v65 = *a20;
  *a20 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *(_QWORD *)(v43 + 40);
  *(_QWORD *)(v43 + 40) = 0;
  if (v66)
    (*(void (**)(void))(v43 + 48))();
  v67 = *(_QWORD *)(v43 + 24);
  *(_QWORD *)(v43 + 24) = 0;
  if (v67)
    (*(void (**)(void))(v43 + 32))();
  v68 = *(std::__shared_weak_count **)(v43 + 8);
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  _Unwind_Resume(a1);
}

uint64_t sub_100C7E9C4()
{
  int v0;
  int v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  int v9;

  v0 = sub_10075CD10();
  v9 = 0;
  sub_1001E4804(&v7);
  v1 = sub_1001E4B84(v7, "EnableRavenEstimator", &v9);
  v2 = v1;
  v3 = v8;
  if (!v8)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v2)
      return sub_100C848FC() & v0;
  }
  else
  {
LABEL_5:
    if (!v1)
      return sub_100C848FC() & v0;
  }
  if (v9 == 1)
    v0 = sub_100241564();
  else
    v0 = 0;
  return sub_100C848FC() & v0;
}

void sub_100C7EA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C7EA98(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  char v5;
  char v6;
  __int128 v7;
  __int128 v8;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  if (a1 != a2)
    sub_101892BBC(a1 + 40, *(std::string **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  memcpy((void *)(a1 + 64), (const void *)(a2 + 64), 0x8D0uLL);
  sub_100349198((_QWORD *)(a1 + 2320), (uint64_t *)(a2 + 2320));
  *(_OWORD *)(a1 + 2336) = *(_OWORD *)(a2 + 2336);
  memcpy((void *)(a1 + 2352), (const void *)(a2 + 2352), 0x519uLL);
  std::string::operator=((std::string *)(a1 + 3664), (const std::string *)(a2 + 3664));
  v4 = *(_WORD *)(a2 + 3692);
  *(_DWORD *)(a1 + 3688) = *(_DWORD *)(a2 + 3688);
  *(_WORD *)(a1 + 3692) = v4;
  std::string::operator=((std::string *)(a1 + 3696), (const std::string *)(a2 + 3696));
  v5 = *(_BYTE *)(a2 + 3722);
  *(_WORD *)(a1 + 3720) = *(_WORD *)(a2 + 3720);
  *(_BYTE *)(a1 + 3722) = v5;
  std::string::operator=((std::string *)(a1 + 3728), (const std::string *)(a2 + 3728));
  v6 = *(_BYTE *)(a2 + 3754);
  *(_WORD *)(a1 + 3752) = *(_WORD *)(a2 + 3752);
  *(_BYTE *)(a1 + 3754) = v6;
  std::string::operator=((std::string *)(a1 + 3760), (const std::string *)(a2 + 3760));
  v7 = *(_OWORD *)(a2 + 3813);
  v8 = *(_OWORD *)(a2 + 3800);
  *(_OWORD *)(a1 + 3784) = *(_OWORD *)(a2 + 3784);
  *(_OWORD *)(a1 + 3800) = v8;
  *(_OWORD *)(a1 + 3813) = v7;
  return a1;
}

void sub_100C7EBAC(float32x2_t *a1, unsigned int a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const char *v19;
  uint8_t *v20;
  os_activity_scope_state_s state;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;

  CLProfilingIdentify("CLRavenController::HandleAccelerometerNotification");
  if (a3)
  {
    v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      v7 = *a3;
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v23 = 0;
      v10 = std::__shared_weak_count::lock(v6);
      v24 = v10;
      if (v10)
      {
        v23 = v7;
        if (v7)
        {
          objc_msgSend(objc_msgSend(*(id *)(v7 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v22 = 1;
            v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleAccelerometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v11, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v12 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v26 = 0;
              v27 = 2082;
              v28 = "";
              v29 = 2082;
              v30 = "activity";
              v31 = 2050;
              v32 = v7;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleAccelerometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v22 = 0;
          }
          sub_100C85134(v7, a1, a2);
          if (v22)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
LABEL_38:
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
          return;
        }
      }
    }
    else
    {
      v10 = 0;
      v23 = 0;
      v24 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v16 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleAccelerometerNotification_bounce(const CLAccelerometer::Sample *, unsigned int, void *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (!v10)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v13 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleAccelerometerNotification_bounce(const CLAccelerometer::Sample *, unsigned int, void *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100C7F064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C7F0B4(double *a1, unsigned int a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const char *v19;
  uint8_t *v20;
  os_activity_scope_state_s state;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;

  CLProfilingIdentify("CLRavenController::HandleBarometerNotification");
  if (a3)
  {
    v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      v7 = *a3;
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v23 = 0;
      v10 = std::__shared_weak_count::lock(v6);
      v24 = v10;
      if (v10)
      {
        v23 = v7;
        if (v7)
        {
          objc_msgSend(objc_msgSend(*(id *)(v7 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v22 = 1;
            v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleBarometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v11, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v12 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v26 = 0;
              v27 = 2082;
              v28 = "";
              v29 = 2082;
              v30 = "activity";
              v31 = 2050;
              v32 = v7;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleBarometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v22 = 0;
          }
          sub_100C85988(v7, a1, a2);
          if (v22)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
LABEL_38:
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
          return;
        }
      }
    }
    else
    {
      v10 = 0;
      v23 = 0;
      v24 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v16 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleBarometerNotification_bounce(const CLPressure::Sample *, unsigned int, void *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (!v10)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v13 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleBarometerNotification_bounce(const CLPressure::Sample *, unsigned int, void *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100C7F56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C7F5BC(uint64_t a1, int *a2, char *a3, uint64_t *a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleDaemonStatusNotification");
  if (a4)
  {
    v7 = (std::__shared_weak_count *)a4[1];
    if (v7)
    {
      v8 = *a4;
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      v25 = 0;
      v11 = std::__shared_weak_count::lock(v7);
      v26 = v11;
      if (v11)
      {
        v25 = v8;
        if (v8)
        {
          objc_msgSend(objc_msgSend(*(id *)(v8 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v12 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v12, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v8;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          v18 = *(_QWORD *)(v8 + 80);
          if (v18)
            sub_1008C574C(v18, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_36:
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
LABEL_40:
          if (v7)
            std::__shared_weak_count::__release_weak(v7);
          return;
        }
      }
    }
    else
    {
      v11 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v17 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleDaemonStatusNotification_bounce(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v11)
      goto LABEL_40;
    goto LABEL_36;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v14 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleDaemonStatusNotification_bounce(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &, void *)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_100C7FA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C7FAC8(double *a1, unsigned int a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const char *v19;
  uint8_t *v20;
  os_activity_scope_state_s state;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;

  CLProfilingIdentify("CLRavenController::HandleDeviceMotionNotification");
  if (a3)
  {
    v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      v7 = *a3;
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v23 = 0;
      v10 = std::__shared_weak_count::lock(v6);
      v24 = v10;
      if (v10)
      {
        v23 = v7;
        if (v7)
        {
          objc_msgSend(objc_msgSend(*(id *)(v7 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v22 = 1;
            v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleDeviceMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v11, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v12 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v26 = 0;
              v27 = 2082;
              v28 = "";
              v29 = 2082;
              v30 = "activity";
              v31 = 2050;
              v32 = v7;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleDeviceMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v22 = 0;
          }
          sub_100C86DAC(v7, a1, a2);
          if (v22)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
LABEL_38:
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
          return;
        }
      }
    }
    else
    {
      v10 = 0;
      v23 = 0;
      v24 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v16 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleDeviceMotionNotification_bounce(const CLDeviceMotion::Sample *, unsigned int, void *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (!v10)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v13 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleDeviceMotionNotification_bounce(const CLDeviceMotion::Sample *, unsigned int, void *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100C7FF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C7FFD0(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleLocationNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C873D0(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C80490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C804E0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleMeasurementNotification");
  if (a4)
  {
    v7 = (std::__shared_weak_count *)a4[1];
    if (v7)
    {
      v8 = *a4;
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      v25 = 0;
      v11 = std::__shared_weak_count::lock(v7);
      v26 = v11;
      if (v11)
      {
        v25 = v8;
        if (v8)
        {
          objc_msgSend(objc_msgSend(*(id *)(v8 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleMeasurementNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v8;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleMeasurementNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C897A4(v8, v12, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
LABEL_38:
          if (v7)
            std::__shared_weak_count::__release_weak(v7);
          return;
        }
      }
    }
    else
    {
      v11 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleMeasurementNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v11)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleMeasurementNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C80998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C809E8(double *a1, unsigned int a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const char *v19;
  uint8_t *v20;
  os_activity_scope_state_s state;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;

  CLProfilingIdentify("CLRavenController::HandleMagnetometerNotification");
  if (a3)
  {
    v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      v7 = *a3;
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v23 = 0;
      v10 = std::__shared_weak_count::lock(v6);
      v24 = v10;
      if (v10)
      {
        v23 = v7;
        if (v7)
        {
          objc_msgSend(objc_msgSend(*(id *)(v7 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v22 = 1;
            v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleMagnetometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v11, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v12 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v26 = 0;
              v27 = 2082;
              v28 = "";
              v29 = 2082;
              v30 = "activity";
              v31 = 2050;
              v32 = v7;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleMagnetometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v22 = 0;
          }
          sub_100C87EB0(v7, a1, a2);
          if (v22)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
LABEL_38:
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
          return;
        }
      }
    }
    else
    {
      v10 = 0;
      v23 = 0;
      v24 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v16 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleMagnetometerNotification_bounce(const CLMagnetometer::Sample *, unsigned int, void *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (!v10)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v13 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleMagnetometerNotification_bounce(const CLMagnetometer::Sample *, unsigned int, void *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100C80EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C80EF0(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleGpsAssistantNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleGpsAssistantNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleGpsAssistantNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C886C8(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleGpsAssistantNotification_bounce(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleGpsAssistantNotification_bounce(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C813B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C81400(int a1, _DWORD *a2, CLMotionActivity *a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleMotionStateNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C89AF4(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleMotionStateNotification_bounce(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleMotionStateNotification_bounce(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C818C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C81910(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleMotionStateObserverNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C89F54(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleMotionStateObserverNotification_bounce(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleMotionStateObserverNotification_bounce(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C81DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C81E20(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleNatalimetryNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C8A314(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleNatalimetryNotification_bounce(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleNatalimetryNotification_bounce(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C822E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C82330(float32x2_t *a1, unsigned int a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const char *v19;
  uint8_t *v20;
  os_activity_scope_state_s state;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;

  CLProfilingIdentify("CLRavenController::HandleRateGyroNotification");
  if (a3)
  {
    v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      v7 = *a3;
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v23 = 0;
      v10 = std::__shared_weak_count::lock(v6);
      v24 = v10;
      if (v10)
      {
        v23 = v7;
        if (v7)
        {
          objc_msgSend(objc_msgSend(*(id *)(v7 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v22 = 1;
            v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleRateGyroNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v11, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v12 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v26 = 0;
              v27 = 2082;
              v28 = "";
              v29 = 2082;
              v30 = "activity";
              v31 = 2050;
              v32 = v7;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleRateGyroNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v22 = 0;
          }
          sub_100C8A7E0(v7, a1, a2);
          if (v22)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
LABEL_38:
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
          return;
        }
      }
    }
    else
    {
      v10 = 0;
      v23 = 0;
      v24 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v16 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleRateGyroNotification_bounce(const CLGyro::Sample *, unsigned int, void *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (!v10)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v13 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleRateGyroNotification_bounce(const CLGyro::Sample *, unsigned int, void *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100C827E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C82838(int a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleSignalEnvironmentNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C8B030(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleSignalEnvironmentNotification_bounce(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleSignalEnvironmentNotification_bounce(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C82CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C82D48(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleStepCountNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C8B3D8(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleStepCountNotification_bounce(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleStepCountNotification_bounce(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C83208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C83258(uint64_t a1)
{
  sub_100165968(*(_QWORD *)(a1 + 32));
}

void sub_100C83260(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleVendorLocationNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleVendorLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleVendorLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C8B798(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleVendorLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleVendorLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C83720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C83770(int a1, int *a2, char *a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleWifiNotification");
  if (a4)
  {
    v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      v9 = *a4;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      v25 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      v26 = v12;
      if (v12)
      {
        v25 = v9;
        if (v9)
        {
          objc_msgSend(objc_msgSend(*(id *)(v9 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C8BD70(v9, a1, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
LABEL_38:
          if (v8)
            std::__shared_weak_count::__release_weak(v8);
          return;
        }
      }
    }
    else
    {
      v12 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleWifiNotification_bounce(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v12)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleWifiNotification_bounce(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C83C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void sub_100C83C80(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleRayTracingTileNotification");
  if (a4)
  {
    v7 = (std::__shared_weak_count *)a4[1];
    if (v7)
    {
      v8 = *a4;
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      v25 = 0;
      v11 = std::__shared_weak_count::lock(v7);
      v26 = v11;
      if (v11)
      {
        v25 = v8;
        if (v8)
        {
          objc_msgSend(objc_msgSend(*(id *)(v8 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleRayTracingTileNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v8;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleRayTracingTileNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_100C8BF8C(v8, v12, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
LABEL_38:
          if (v7)
            std::__shared_weak_count::__release_weak(v7);
          return;
        }
      }
    }
    else
    {
      v11 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleRayTracingTileNotification_bounce(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v11)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleRayTracingTileNotification_bounce(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100C84138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

_QWORD *sub_100C84188(_QWORD *result)
{
  *result = off_10217C480;
  return result;
}

uint64_t sub_100C84198(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1008C44EC();
    operator delete();
  }
  return result;
}

uint64_t sub_100C841D4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10004380C(result);
    operator delete();
  }
  return result;
}

void sub_100C84210(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t *v4;
  uint64_t v5;
  double v6;
  std::timed_mutex *v7;
  void *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];
  _BYTE v17[12];
  char v18;
  int v19;
  _BYTE *v20;
  uint8_t buf[8];
  char v22;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Raven: resetting CLRavenController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    *(_WORD *)v17 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: resetting CLRavenController", v17, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::Reset()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_10005A9B0(a1);
  *(_QWORD *)(a1 + 4736) = a1 + 4688;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v3 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 4736) + 16))(buf);
    v4 = v22 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v17 = 136446210;
    *(_QWORD *)&v17[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: entering %{public}s", v17, 0xCu);
    if (v22 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 4736) + 16))(v17);
    if (v18 >= 0)
      v12 = v17;
    else
      v12 = *(_BYTE **)v17;
    v19 = 136446210;
    v20 = v12;
    LODWORD(v15) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "Raven: entering %{public}s", &v19, v15);
    v14 = v13;
    if (v18 < 0)
      operator delete(*(void **)v17);
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::Reset()", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
    sub_1008C56B0(v5);
  if (*(_BYTE *)(a1 + 4664))
  {
    v6 = sub_1001FCBB4();
    v7 = (std::timed_mutex *)(a1 + 320);
    std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
    v8 = *(void **)(a1 + 4672);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100C90A98;
    v16[3] = &unk_102148D08;
    *(double *)&v16[4] = v6;
    objc_msgSend(v8, "pauseResetAndFreeRavenSupervisorWithCompletion:", v16);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 312))
      return;
    v7 = (std::timed_mutex *)(a1 + 320);
    std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
    cnframework::Supervisor::Reset(*(cnframework::Supervisor **)(a1 + 312));
  }
  std::timed_mutex::unlock(v7);
}

void sub_100C84600(_Unwind_Exception *a1)
{
  std::timed_mutex *v1;

  std::timed_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100C84620(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[1640];

  v11 = a2;
  v12 = a1;
  if (sub_100C848FC())
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v4 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: feature enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: feature enabled", v10, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "static std::shared_ptr<CLRavenController> CLRavenController::CreateRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_100C97664((uint64_t)buf, &v12);
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v5 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: feature disabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: feature disabled", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static std::shared_ptr<CLRavenController> CLRavenController::CreateRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *a3 = 0;
  a3[1] = 0;
}

uint64_t sub_100C848FC()
{
  uint64_t v0;
  int v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  int v9;

  v0 = sub_10075CD10();
  v9 = 0;
  sub_1001E4804(&v7);
  v1 = sub_1001E4B84(v7, "EnableRaven", &v9);
  v2 = v1;
  v3 = v8;
  if (!v8)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v2)
      return v0;
  }
  else
  {
LABEL_5:
    if (!v1)
      return v0;
  }
  if (v9 == 1)
    return sub_100241564();
  else
    return 0;
}

void sub_100C849B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C849CC(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *p_s1;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  __int128 __s1;
  unsigned __int8 v27;
  __int128 v28;
  unsigned __int8 v29;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 4736) + 16))(&__s1);
  sub_1015A2E04(&v28, "RavenControllerBestEffortState");
  v2 = v27;
  if ((v27 & 0x80u) == 0)
    v3 = v27;
  else
    v3 = *((_QWORD *)&__s1 + 1);
  v4 = v29;
  v5 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v4 = *((_QWORD *)&v28 + 1);
  if (v3 != v4)
  {
    v15 = 0;
    if (((char)v29 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  if ((v29 & 0x80u) == 0)
    v6 = (unsigned __int8 *)&v28;
  else
    v6 = (unsigned __int8 *)v28;
  if ((char)v27 < 0)
  {
    v15 = memcmp((const void *)__s1, v6, *((size_t *)&__s1 + 1)) == 0;
    goto LABEL_22;
  }
  if (v27)
  {
    v7 = v27 - 1;
    p_s1 = (unsigned __int8 *)&__s1;
    do
    {
      v10 = *p_s1++;
      v9 = v10;
      v12 = *v6++;
      v11 = v12;
      v14 = v7-- != 0;
      v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  v15 = 1;
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
LABEL_28:
    operator delete((void *)__s1);
    if (v15)
      return;
    goto LABEL_29;
  }
LABEL_27:
  operator delete((void *)v28);
  if ((v27 & 0x80) != 0)
    goto LABEL_28;
LABEL_24:
  if (v15)
    return;
LABEL_29:
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v16 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Raven: received external enable best effort command", (uint8_t *)&__s1, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v28) = 0;
    _os_log_send_and_compose_impl(2, 0, &__s1, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: received external enable best effort command", &v28, 2);
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::EnableRavenBestEffort()", "%s\n", v20);
    if (v21 != (char *)&__s1)
      free(v21);
  }
  sub_100C850E4(a1 + 4560);
  if (*(_BYTE *)(a1 + 4464))
  {
    v17 = (uint64_t *)(a1 + 4472);
    if (*(_QWORD *)(a1 + 4472))
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v18 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
      {
        v19 = *v17;
        LODWORD(__s1) = 134349056;
        *(_QWORD *)((char *)&__s1 + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Raven: #warning,rct,threadExists,%{public}p", (uint8_t *)&__s1, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&__s1, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v22 = *v17;
        LODWORD(v28) = 134349056;
        *(_QWORD *)((char *)&v28 + 4) = v22;
        LODWORD(v25) = 12;
        _os_log_send_and_compose_impl(2, 0, &__s1, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: #warning,rct,threadExists,%{public}p", &v28, v25);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 0, "void CLRavenController::EnableRavenBestEffort()", "%s\n", v23);
        if (v24 != (char *)&__s1)
          free(v24);
      }
      sub_100C841D4((uint64_t *)(a1 + 4472), 0);
    }
    operator new();
  }
  sub_100059DD8(a1, a1 + 4704);
}

void sub_100C850A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete();
}

void sub_100C850E4(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1001FCBB4();
  v3 = 0;
  *(double *)(a1 + 64) = v2;
  do
  {
    v4 = a1 + v3;
    *(_DWORD *)v4 = 0;
    *(_OWORD *)(v4 + 8) = xmmword_101BBE610;
    *(_QWORD *)(v4 + 24) = 0xBFF0000000000000;
    v3 += 32;
  }
  while (v3 != 64);
}

void sub_100C85134(uint64_t a1, float32x2_t *a2, unsigned int a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v10;
  float32x2_t v11;
  float32x2_t v12;
  const char *v13;
  const char *v14;
  int v15;
  float32x2_t v16;
  uint8_t buf[4];
  float32x2_t v18;

  if (a2 && a3)
  {
    if (a3 < 0xB)
    {
      if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
      {
        if (sub_100AD2554(a1 + 4480, (double *)a2))
        {
          sub_100166054(buf);
          sub_10010F434((uint64_t)&v15);
          sub_100C855E0(a1, (uint64_t)&v15, a2, a3, (uint64_t)buf);
          sub_1001668A0(a1, (uint64_t)buf, 0);
          sub_100166004(buf);
          return;
        }
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v10 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *a2;
          *(_DWORD *)buf = 134349056;
          v18 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,accel sample is before sleep,%{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v12 = *a2;
          v15 = 134349056;
          v16 = v12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning,accel sample is before sleep,%{public}.3f", &v15, 12);
          v6 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleAccelerometerNotification(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v13);
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v4 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v18.i32[0] = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected accelerometer batch size of %u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v15 = 67109120;
        v16.i32[0] = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered unexpected accelerometer batch size of %u", &v15);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleAccelerometerNotification(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v5);
LABEL_33:
        if (v6 != buf)
          free(v6);
      }
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty accelerometer notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered empty accelerometer notification", &v15, 2);
      v6 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleAccelerometerNotification(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v14);
      goto LABEL_33;
    }
  }
}

void sub_100C855C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C855E0(uint64_t a1, uint64_t a2, float32x2_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  float32x2_t v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  _WORD v20[8];
  uint8_t buf[8];
  float32x2_t v22;
  double v23;
  char v24;

  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  v9 = *(_QWORD *)(a5 + 40);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 488) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  sub_10017552C(a2, a5);
  *(_DWORD *)(v10 + 44) |= 1u;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    operator new();
  if ((sub_100178094((uint64_t *)a2, v11) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v12 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Error: Failed to convert accelerometer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v20[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert accelerometer notification receipt time to protobuf", v20, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeAccelerometerNotification(const CLUtils::Timestamp &, const CLAccelerometer::Sample *, const unsigned int, CLP::LogEntry::LogEntry &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  if ((_DWORD)v5)
  {
    v5 = v5;
    do
    {
      v13 = *a3;
      v14 = *(double *)a3 - *(double *)(a2 + 8);
      *(double *)buf = v14 + *(double *)a2;
      v22 = v13;
      v23 = v14 + *(double *)(a2 + 16);
      v24 = *(_BYTE *)(a2 + 24);
      v15 = *(_DWORD *)(v10 + 28);
      v16 = *(int *)(v10 + 24);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(v10 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v10 + 16), v15 + 1);
          v15 = *(_DWORD *)(v10 + 28);
        }
        *(_DWORD *)(v10 + 28) = v15 + 1;
        sub_100C9677C();
      }
      v17 = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v10 + 24) = v16 + 1;
      sub_10136E3EC(a3, *(float32x2_t **)(v17 + 8 * v16), (uint64_t *)buf);
      a3 += 3;
      --v5;
    }
    while (v5);
  }
  else
  {
    v14 = 0.0;
  }
  sub_100C90DC0(a1 + 4560, 0, *(double *)a2, -v14);
}

void sub_100C8592C()
{
  operator delete();
}

void sub_100C85988(uint64_t a1, double *a2, unsigned int a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  uint64_t v10;
  NSObject *v11;
  double v12;
  double v13;
  const char *v14;
  const char *v15;
  int v16;
  double v17;
  uint8_t buf[4];
  double v19;

  if (a2 && a3)
  {
    if (a3 < 6)
    {
      if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
      {
        if (sub_100AD2554(a1 + 4480, a2))
        {
          sub_100166054(buf);
          sub_10010F434((uint64_t)&v16);
          sub_100C85E30(v10, (uint64_t)&v16, a2, a3, (uint64_t)buf);
          sub_1001668A0(a1, (uint64_t)buf, 0);
          sub_100166004(buf);
          return;
        }
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v11 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *a2;
          *(_DWORD *)buf = 134349056;
          v19 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,baro sample is before sleep,%{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v13 = *a2;
          v16 = 134349056;
          v17 = v13;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning,baro sample is before sleep,%{public}.3f", &v16, 12);
          v6 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleBarometerNotification(const CLPressure::Sample *, unsigned int)", "%s\n", v14);
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v4 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v19) = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected barometer batch size of %u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v16 = 67109120;
        LODWORD(v17) = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered unexpected barometer batch size of %u", &v16);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleBarometerNotification(const CLPressure::Sample *, unsigned int)", "%s\n", v5);
LABEL_33:
        if (v6 != buf)
          free(v6);
      }
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty barometer notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v16) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered empty barometer notification", &v16, 2);
      v6 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleBarometerNotification(const CLPressure::Sample *, unsigned int)", "%s\n", v15);
      goto LABEL_33;
    }
  }
}

void sub_100C85E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C85E30(uint64_t a1, uint64_t a2, double *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  double v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  _WORD v19[8];
  uint8_t buf[8];
  double v21;
  double v22;
  char v23;

  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 4u;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    operator new();
  sub_10017552C(a2, a5);
  *(_DWORD *)(v9 + 44) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094((uint64_t *)a2, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert barometer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert barometer notification receipt time to protobuf", v19, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeBarometerNotification(const CLUtils::Timestamp &, const CLPressure::Sample *, const unsigned int, CLP::LogEntry::LogEntry &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  if ((_DWORD)v5)
  {
    v5 = v5;
    do
    {
      v12 = *a3;
      v13 = *a3 - *(double *)(a2 + 8);
      *(double *)buf = v13 + *(double *)a2;
      v21 = v12;
      v22 = v13 + *(double *)(a2 + 16);
      v23 = *(_BYTE *)(a2 + 24);
      v14 = *(_DWORD *)(v9 + 28);
      v15 = *(int *)(v9 + 24);
      if ((int)v15 >= v14)
      {
        if (v14 == *(_DWORD *)(v9 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 16), v14 + 1);
          v14 = *(_DWORD *)(v9 + 28);
        }
        *(_DWORD *)(v9 + 28) = v14 + 1;
        sub_100C967DC();
      }
      v16 = *(_QWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 24) = v15 + 1;
      sub_1013797DC((uint64_t)a3, *(_QWORD *)(v16 + 8 * v15), (uint64_t *)buf);
      a3 += 2;
      --v5;
    }
    while (v5);
  }
}

void sub_100C86148()
{
  operator delete();
}

uint64_t sub_100C861A4(uint64_t a1, void *a2, double *a3, double *a4)
{
  NSObject *v8;
  double v9;
  char v10;
  double v11;
  double v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  id v20;
  NSObject *v21;
  NSObject *v23;
  id v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  id v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  _DWORD v39[2];
  __int16 v40;
  id v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  char *v47;
  int v48;
  id v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  uint64_t v54;
  int v55;
  uint8_t buf[4];
  _BYTE v57[34];
  __int16 v58;
  char *v59;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v8 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "clrgmd,Entering HandleBuildingDataAndQueryCompletion()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v48) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "clrgmd,Entering HandleBuildingDataAndQueryCompletion()", &v48, 2);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleBuildingDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  v9 = COERCE_DOUBLE(sub_10077CD18(*(_QWORD *)(a1 + 80)));
  if (v10)
    v11 = v9;
  else
    v11 = NAN;
  v12 = (sub_1001FCBB4() - *a4) * 1000.0;
  if (!*(_BYTE *)(a1 + 4663) && !*(_QWORD *)(a1 + 4680))
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v23 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      v24 = objc_msgSend(a2, "count");
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)v57 = v24;
      *(_WORD *)&v57[8] = 2050;
      *(double *)&v57[10] = v11;
      *(_WORD *)&v57[18] = 2050;
      *(double *)&v57[20] = v12;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "clrgmd,No serialization per configuration,%{public}lu,buildings received during query after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v34 = qword_1022A00A8;
      v35 = objc_msgSend(a2, "count");
      v48 = 134349568;
      v49 = v35;
      v50 = 2050;
      v51 = v11;
      v52 = 2050;
      v53 = v12;
      LODWORD(v38) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "clrgmd,No serialization per configuration,%{public}lu,buildings received during query after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms", &v48, v38);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleBuildingDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    return sub_10077E950(*(_QWORD *)(a1 + 80), a3);
  }
  v13 = sub_100166054(&v48);
  if ((sub_100C8691C((uint64_t)v13, a2, a3, (_QWORD *)(*(_QWORD *)(a1 + 80) + 320), (uint64_t)&v48) & 1) != 0)
  {
    v14 = (char *)objc_msgSend(a2, "count");
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 336);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v16 = &v14[-v15];
    v17 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      v55 |= 2u;
      if (!v54)
        operator new();
      v18 = *(_QWORD *)(v54 + 232);
      if (!v18)
        v18 = *(_QWORD *)(qword_102310D28 + 232);
      v19 = *(_DWORD *)(v18 + 24);
      v20 = objc_msgSend(a2, "count");
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)v57 = v19;
      *(_WORD *)&v57[4] = 2050;
      *(_QWORD *)&v57[6] = v20;
      *(_WORD *)&v57[14] = 2050;
      *(double *)&v57[16] = v11;
      *(_WORD *)&v57[24] = 2050;
      *(double *)&v57[26] = v12;
      v58 = 2050;
      v59 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "clrgmd,serializing,%{public}d, out of,%{public}lu,buildings received after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms,numrepeatedBldg,%{public}lu", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v29 = qword_1022A00A8;
      v30 = *(_QWORD *)(sub_100C86D30((uint64_t)&v48) + 232);
      if (!v30)
        v30 = *(_QWORD *)(qword_102310D28 + 232);
      v31 = *(_DWORD *)(v30 + 24);
      v39[0] = 67241216;
      v39[1] = v31;
      v40 = 2050;
      v41 = objc_msgSend(a2, "count");
      v42 = 2050;
      v43 = v11;
      v44 = 2050;
      v45 = v12;
      v46 = 2050;
      v47 = v16;
      LODWORD(v38) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "clrgmd,serializing,%{public}d, out of,%{public}lu,buildings received after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms,numrepeatedBldg,%{public}lu", v39, v38);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleBuildingDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    sub_1001668A0(a1, (uint64_t)&v48, 0);
    sub_100166004(&v48);
    return sub_10077E950(*(_QWORD *)(a1 + 80), a3);
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v21 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "clrgmd,SerializeBuildingData failed, no data sent downstream", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v39[0]) = 0;
    LODWORD(v38) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "clrgmd,SerializeBuildingData failed, no data sent downstream", v39, v38);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 0, "void CLRavenController::HandleBuildingDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  return sub_100166004(&v48);
}

void sub_100C868CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C8691C(uint64_t a1, void *a2, double *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t result;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  _WORD v19[8];
  uint64_t v20[4];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v9 = *(_QWORD *)(a5 + 40);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 488) |= 0x10000000u;
  v10 = *(_QWORD *)(v9 + 232);
  if (!v10)
    operator new();
  sub_10010F434((uint64_t)v20);
  sub_10017552C((uint64_t)v20, a5);
  *(_DWORD *)(v10 + 68) |= 1u;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    operator new();
  if ((sub_100178094(v20, v11) & 1) != 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v12 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "clrgmd,Calling functionality to convert building data to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "clrgmd,Calling functionality to convert building data to protobuf", v19, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::SerializeBuildingData(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::LogEntry &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    return sub_1013716AC(a2, a3, a4, v10);
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v14 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to convert building data receipt time to protobuf", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Failed to convert building data receipt time to protobuf", v19, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRavenController::SerializeBuildingData(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::LogEntry &) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
      return 0;
    }
  }
  return result;
}

void sub_100C86CCC()
{
  operator delete();
}

uint64_t sub_100C86D30(uint64_t a1)
{
  *(_DWORD *)(a1 + 52) |= 2u;
  if (!*(_QWORD *)(a1 + 40))
    operator new();
  return *(_QWORD *)(a1 + 40);
}

void sub_100C86D88()
{
  operator delete();
}

void sub_100C86DAC(uint64_t a1, double *a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  double v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  const char *v16;
  int v17;
  double v18;
  uint8_t buf[4];
  double v20;

  if (!a2 || !a3)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v8 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty device motion notification", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered empty device motion notification", &v17, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleDeviceMotionNotification(const CLDeviceMotion::Sample *, unsigned int)", "%s\n", v9);
LABEL_33:
    if (v10 != buf)
      free(v10);
    return;
  }
  if (a3 >= 0xB)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v6 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v20) = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected device motion batch size of %u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v17 = 67109120;
      LODWORD(v18) = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered unexpected device motion batch size of %u", &v17);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleDeviceMotionNotification(const CLDeviceMotion::Sample *, unsigned int)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  if (*(_QWORD *)(a1 + 4680))
  {
    if (sub_100AD2554(a1 + 4480, a2))
    {
      sub_100166054(buf);
      sub_10010F434((uint64_t)&v17);
      sub_100C87260(v7, (uint64_t)&v17, (uint64_t)a2, a3, (uint64_t)buf);
      sub_1001668A0(a1, (uint64_t)buf, 1);
      sub_100166004(buf);
      return;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a2;
      *(_DWORD *)buf = 134349056;
      v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,device motion sample is before sleep,%{public}.3f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v15 = *a2;
      v17 = 134349056;
      v18 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning,device motion sample is before sleep,%{public}.3f", &v17, 12);
      v10 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleDeviceMotionNotification(const CLDeviceMotion::Sample *, unsigned int)", "%s\n", v16);
      goto LABEL_33;
    }
  }
}

void sub_100C87240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C87260(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  v7 = *(_QWORD *)(a5 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 488) |= 0x4000000u;
  v8 = *(int **)(v7 + 216);
  if (!v8)
    operator new();
  sub_10017552C(a2, a5);
  if ((_DWORD)v5)
  {
    v5 = v5;
    do
    {
      v9 = v8[7];
      v10 = v8[6];
      if ((int)v10 >= v9)
      {
        if (v9 == v8[8])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v8 + 4), v9 + 1);
          v9 = v8[7];
        }
        v8[7] = v9 + 1;
        sub_100959818();
      }
      v11 = *((_QWORD *)v8 + 2);
      v8[6] = v10 + 1;
      sub_1013729CC(a3, *(_QWORD *)(v11 + 8 * v10));
      a3 += 120;
      --v5;
    }
    while (v5);
  }
}

void sub_100C87398()
{
  operator delete();
}

uint64_t sub_100C873D0(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  double *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[7];
  uint64_t v26[4];
  int v27;

  v27 = a2;
  if (*a3 == 10)
  {
    v5 = result;
    if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
    {
      sub_10010F434((uint64_t)v26);
      if ((*(_DWORD *)(a4 + 96) & 0xFFFFFFF7) == 1)
      {
        sub_100166054(v25);
        if (sub_100C875FC(v5, v26, &v27, a4, (uint64_t)v25))
          sub_1001668A0(v5, (uint64_t)v25, 0);
        if (*(_QWORD *)(v5 + 80)
          && (*(_BYTE *)(v5 + 128)
           || sub_100C87B74((double *)(v5 + 96), *(double *)(a4 + 4), *(double *)(a4 + 12))))
        {
          sub_1007208BC(&v23, (_QWORD *)v5);
          v7 = v23;
          v6 = v24;
          if (v24)
          {
            p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
            do
              v9 = __ldxr(p_shared_weak_owners);
            while (__stxr(v9 + 1, p_shared_weak_owners));
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            v12 = *(_QWORD *)(v5 + 80);
            v21 = v7;
            v22 = v6;
            do
              v13 = __ldxr(p_shared_weak_owners);
            while (__stxr(v13 + 1, p_shared_weak_owners));
          }
          else
          {
            v12 = *(_QWORD *)(v5 + 80);
            v21 = v23;
            v22 = 0;
          }
          v15 = (double *)(a4 + 4);
          sub_1008C4730(v12, v15, &v21);
          if (v22)
            std::__shared_weak_count::__release_weak(v22);
          v16 = *(_QWORD *)(v5 + 88);
          if (v16)
          {
            v19 = v7;
            v20 = v6;
            if (v6)
            {
              v17 = (unint64_t *)&v6->__shared_weak_owners_;
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            sub_100DEB1E8(v16, v15, &v19);
            if (v20)
              std::__shared_weak_count::__release_weak(v20);
          }
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
        }
      }
      else
      {
        v14 = sub_100166054(v25);
        sub_100C87BCC((uint64_t)v14, v26, &v27, a4, (uint64_t)v25);
        sub_1001668A0(v5, (uint64_t)v25, 0);
      }
      return sub_100166004(v25);
    }
  }
  return result;
}

void sub_100C875B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;

  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  sub_100166004(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100C875FC(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  double v39;
  int v40;
  _BYTE v41[96];
  __int128 v42;
  __int128 v43;
  _BYTE v44[28];
  double v45[66];
  std::__shared_weak_count *v46;
  int v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint8_t buf[4];
  uint64_t v52;
  __int16 v53;
  uint64_t v54;

  *(_DWORD *)v41 = 0xFFFF;
  *(_OWORD *)&v41[4] = 0uLL;
  *(_OWORD *)&v41[20] = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v41[36] = _Q0;
  *(_OWORD *)&v41[52] = _Q0;
  *(_OWORD *)&v41[68] = _Q0;
  *(_DWORD *)&v41[84] = 0;
  v42 = 0uLL;
  *(_QWORD *)&v41[88] = 0xBFF0000000000000;
  *(_QWORD *)((char *)&v43 + 4) = 0xBFF0000000000000;
  LODWORD(v43) = 0;
  HIDWORD(v43) = 0x7FFFFFFF;
  memset(v44, 0, 25);
  sub_10012A33C(v45);
  v15 = *(_OWORD *)(a4 + 112);
  v42 = *(_OWORD *)(a4 + 96);
  v43 = v15;
  *(_OWORD *)v44 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)&v44[12] = *(_OWORD *)(a4 + 140);
  v16 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)&v41[32] = *(_OWORD *)(a4 + 32);
  *(_OWORD *)&v41[48] = v16;
  v17 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)&v41[64] = *(_OWORD *)(a4 + 64);
  *(_OWORD *)&v41[80] = v17;
  v18 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v41 = *(_OWORD *)a4;
  *(_OWORD *)&v41[16] = v18;
  v40 = 0;
  v39 = 0.0;
  v19 = objc_msgSend(*(id *)(a1 + 224), "syncgetAltitude:rel:undulation:", v41, &v40, &v39);
  if (v45[48] >= 0.0)
    v20 = v19;
  else
    v20 = 0;
  if ((v20 & 1) != 0)
  {
    *(_DWORD *)(a5 + 52) |= 2u;
    v21 = *(_QWORD *)(a5 + 40);
    if (!v21)
      operator new();
    *(_DWORD *)(v21 + 488) |= 0x100u;
    v22 = *(_QWORD *)(v21 + 72);
    if (!v22)
      operator new();
    sub_10017552C((uint64_t)a2, a5);
    *(_DWORD *)(v22 + 52) |= 1u;
    v23 = *(_QWORD *)(v22 + 8);
    if (!v23)
      operator new();
    if ((sub_100178094(a2, v23) & 1) == 0)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v24 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Error: Failed to convert DEM update receipt time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        LOWORD(v47) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert DEM update receipt time to protobuf", &v47, 2);
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::SerializeDEMUpdate(const CLUtils::Timestamp &, const int &, const CLDaemonLocation &, CLP::LogEntry::LogEntry &) const", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
    }
    sub_101370CA4((uint64_t)v41, &v39, v22);
    v25 = *a3;
    *(_DWORD *)(v22 + 52) |= 0x40u;
    *(_DWORD *)(v22 + 44) = v25;
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v26 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_QWORD *)(a4 + 4);
      v28 = *(_QWORD *)(a4 + 12);
      *(_DWORD *)buf = 134283777;
      v52 = v27;
      v53 = 2049;
      v54 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Raven: Dem unavailable at,lat,%{private}.8lf,lon,%{private}.8lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v33 = *(_QWORD *)(a4 + 4);
      v34 = *(_QWORD *)(a4 + 12);
      v47 = 134283777;
      v48 = v33;
      v49 = 2049;
      v50 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: Dem unavailable at,lat,%{private}.8lf,lon,%{private}.8lf", &v47, 22);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::SerializeDEMUpdate(const CLUtils::Timestamp &, const int &, const CLDaemonLocation &, CLP::LogEntry::LogEntry &) const", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
  }
  v29 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v20;
}

void sub_100C87B00(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

uint64_t sub_100C87B74(double *a1, double a2, double a3)
{
  double v3;
  double v4;

  if (*a1 <= a2 && a1[2] >= a2)
  {
    v3 = a1[3];
    v4 = a1[1];
    if (v3 <= v4)
    {
      if (v3 < v4 && (v3 > a3 || v4 < a3))
        return 1;
    }
    else if (v3 >= a3 && v4 <= a3)
    {
      return 1;
    }
  }
  return 0;
}

void sub_100C87BCC(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 8u;
  v9 = *(_QWORD *)(v8 + 32);
  if (!v9)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 100) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert location notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert location notification receipt time to protobuf", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeLocationNotification(const CLUtils::Timestamp &, const int &, const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v12 = *a3;
  *(_DWORD *)(v9 + 100) |= 2u;
  *(_DWORD *)(v9 + 32) = v12;
  sub_101376EAC(a4, v9);
}

void sub_100C87E54()
{
  operator delete();
}

void sub_100C87EB0(uint64_t a1, double *a2, unsigned int a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v10;
  NSObject *v11;
  double v12;
  double v13;
  const char *v14;
  const char *v15;
  int v16;
  double v17;
  _DWORD v18[8];
  uint8_t buf[4];
  double v20;

  if (a2 && a3)
  {
    if (a3 < 0xB)
    {
      if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
      {
        sub_10010F434((uint64_t)v18);
        if (sub_100AD2554(a1 + 4480, a2))
        {
          v10 = sub_100166054(buf);
          sub_100C88354((uint64_t)v10, (uint64_t)v18, a2, a3, (uint64_t)buf);
          sub_1001668A0(a1, (uint64_t)buf, 0);
          sub_100166004(buf);
          return;
        }
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v11 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *a2;
          *(_DWORD *)buf = 134349056;
          v20 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,mag sample is before sleep,%{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v13 = *a2;
          v16 = 134349056;
          v17 = v13;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning,mag sample is before sleep,%{public}.3f", &v16, 12);
          v6 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleMagnetometerNotification(const CLMagnetometer::Sample *, unsigned int)", "%s\n", v14);
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v4 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v20) = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected magnetometer batch size of %u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v18[0] = 67109120;
        v18[1] = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered unexpected magnetometer batch size of %u", v18);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleMagnetometerNotification(const CLMagnetometer::Sample *, unsigned int)", "%s\n", v5);
LABEL_33:
        if (v6 != buf)
          free(v6);
      }
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty magnetometer notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v18[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered empty magnetometer notification", v18, 2);
      v6 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleMagnetometerNotification(const CLMagnetometer::Sample *, unsigned int)", "%s\n", v15);
      goto LABEL_33;
    }
  }
}

void sub_100C88338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C88354(uint64_t a1, uint64_t a2, double *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  double v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  _WORD v19[8];
  uint8_t buf[8];
  double v21;
  double v22;
  char v23;

  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x2000u;
  v9 = *(_QWORD *)(v8 + 112);
  if (!v9)
    operator new();
  sub_10017552C(a2, a5);
  *(_DWORD *)(v9 + 44) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094((uint64_t *)a2, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert magnetometer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert magnetometer notification receipt time to protobuf", v19, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeMagnetometerNotification(const CLUtils::Timestamp &, const CLMagnetometer::Sample *, const unsigned int, CLP::LogEntry::LogEntry &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  if ((_DWORD)v5)
  {
    v5 = v5;
    do
    {
      v12 = *a3;
      v13 = *a3 - *(double *)(a2 + 8);
      *(double *)buf = v13 + *(double *)a2;
      v21 = v12;
      v22 = v13 + *(double *)(a2 + 16);
      v23 = *(_BYTE *)(a2 + 24);
      v14 = *(_DWORD *)(v9 + 28);
      v15 = *(int *)(v9 + 24);
      if ((int)v15 >= v14)
      {
        if (v14 == *(_DWORD *)(v9 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 16), v14 + 1);
          v14 = *(_DWORD *)(v9 + 28);
        }
        *(_DWORD *)(v9 + 28) = v14 + 1;
        sub_100C9683C();
      }
      v16 = *(_QWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 24) = v15 + 1;
      sub_101377384((uint64_t)a3, *(_QWORD *)(v16 + 8 * v15), (uint64_t *)buf);
      a3 += 3;
      --v5;
    }
    while (v5);
  }
}

void sub_100C8866C()
{
  operator delete();
}

void sub_100C886C8(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  double v17;
  double v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  float v29;
  int v30;
  double v31;
  uint64_t v32[4];
  int v33;
  int v34;
  double v35;
  __int16 v36;
  uint64_t v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  uint64_t v41;

  v33 = a2;
  if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
  {
    sub_10010F434((uint64_t)v32);
    switch(*a3)
    {
      case 0:
        v7 = sub_100166054(buf);
        sub_100C88CD0((uint64_t)v7, v32, &v33, a4, (uint64_t)buf);
        sub_1001668A0(a1, (uint64_t)buf, 0);
        goto LABEL_21;
      case 2:
        v8 = sub_100166054(buf);
        sub_100C892D4((uint64_t)v8, v32, &v33, a4, (uint64_t)buf);
        sub_1001668A0(a1, (uint64_t)buf, 0);
        goto LABEL_21;
      case 4:
        v9 = sub_100166054(buf);
        sub_100C88FF4((uint64_t)v9, v32, &v33, a4, (uint64_t)buf);
        sub_1001668A0(a1, (uint64_t)buf, 0);
        goto LABEL_21;
      case 5:
        v31 = 0.0;
        v30 = -1;
        sub_10015F970(*(_QWORD *)(a1 + 4552), &v31, &v30, *(double *)a4);
        if (v30 != -1)
          goto LABEL_15;
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v10 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
        {
          v11 = *(double *)a4;
          *(_DWORD *)buf = 134217984;
          v39 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Could not get undulation from CLGnssUndulation to convert TEPA MSL altitude to reference ellipsoid altitude at iOSTime,%.3lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v25 = *(double *)a4;
          v34 = 134217984;
          v35 = v25;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Could not get undulation from CLGnssUndulation to convert TEPA MSL altitude to reference ellipsoid altitude at iOSTime,%.3lf", COERCE_DOUBLE(&v34));
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        v29 = 0.0;
        if (sub_100208AC8(&v29, *(double *)(a4 + 8), *(double *)(a4 + 16)))
        {
          v31 = v29;
LABEL_15:
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v12 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
          {
            v13 = *(double *)a4;
            v14 = *(_QWORD *)(a4 + 48);
            *(_DWORD *)buf = 134218240;
            v39 = v13;
            v40 = 2048;
            v41 = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Inject TEPA to raven at ios_t,%.3lf,altitude,%.3lf", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v21 = *(double *)a4;
            v22 = *(_QWORD *)(a4 + 48);
            v34 = 134218240;
            v35 = v21;
            v36 = 2048;
            v37 = v22;
            LODWORD(v28) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Inject TEPA to raven at ios_t,%.3lf,altitude,%.3lf", COERCE_DOUBLE(&v34), v28);
            v24 = (uint8_t *)v23;
            sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          v15 = sub_100166054(buf);
          sub_100C8915C((uint64_t)v15, v32, &v33, a4, &v31, (uint64_t)buf);
          sub_1001668A0(a1, (uint64_t)buf, 0);
LABEL_21:
          sub_100166004(buf);
        }
        else
        {
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v16 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
          {
            v17 = *(double *)a4;
            *(_DWORD *)buf = 134217984;
            v39 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Could not get undulation from CLGeoidModel to convert TEPA MSL altitude to reference ellipsoid altitude at iOSTime,%.3lf", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v18 = *(double *)a4;
            v34 = 134217984;
            v35 = v18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Could not get undulation from CLGeoidModel to convert TEPA MSL altitude to reference ellipsoid altitude at iOSTime,%.3lf", COERCE_DOUBLE(&v34));
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 0, "void CLRavenController::HandleGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
        }
        break;
      default:
        return;
    }
  }
}

void sub_100C88C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C88CD0(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x200u;
  v9 = *(_QWORD *)(v8 + 80);
  if (!v9)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert map vector notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert map vector notification receipt time to protobuf", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeMapVectorDirectionOfTravelNotification(const CLUtils::Timestamp &, const int &, const CLGpsAssistant_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    operator new();
  sub_1013708F4(a4, v13);
}

void sub_100C88F84()
{
  operator delete();
}

void sub_100C88FF4(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x100000u;
  v9 = *(_QWORD *)(v8 + 168);
  if (!v9)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  sub_100178094(a2, v10);
  v11 = *a3;
  *(_DWORD *)(v9 + 32) |= 2u;
  *(_DWORD *)(v9 + 24) = v11;
  sub_10137ACF4(a4, v9);
}

void sub_100C89108()
{
  operator delete();
}

void sub_100C8915C(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, double *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  *(_DWORD *)(a6 + 52) |= 2u;
  v10 = *(_QWORD *)(a6 + 40);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 488) |= 0x400000u;
  v11 = *(_QWORD *)(v10 + 184);
  if (!v11)
    operator new();
  sub_10017552C((uint64_t)a2, a6);
  *(_DWORD *)(v11 + 32) |= 1u;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    operator new();
  sub_100178094(a2, v12);
  v13 = *a3;
  *(_DWORD *)(v11 + 32) |= 2u;
  *(_DWORD *)(v11 + 24) = v13;
  sub_10137B0C8(a4, v11, *a5);
}

void sub_100C89280()
{
  operator delete();
}

void sub_100C892D4(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x800000u;
  v9 = *(_QWORD *)(v8 + 192);
  if (!v9)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 80) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  sub_100178094(a2, v10);
  v11 = *a3;
  *(_DWORD *)(v9 + 80) |= 4u;
  *(_DWORD *)(v9 + 24) = v11;
  sub_10136E64C(a4, v9);
}

void sub_100C893E8()
{
  operator delete();
}

uint64_t sub_100C8943C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[4];
  _QWORD v6[7];

  v3 = result;
  if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
  {
    sub_100166054(v6);
    sub_10010F434((uint64_t)v5);
    sub_100C894C8(v4, v5, a2, (uint64_t)v6);
    sub_1001668A0(v3, (uint64_t)v6, 0);
    return sub_100166004(v6);
  }
  return result;
}

void sub_100C894B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

double sub_100C894C8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  double result;
  const char *v11;
  uint8_t *v12;
  double v13[2];
  uint8_t buf[8];

  *(_DWORD *)(a4 + 52) |= 2u;
  v6 = *(_QWORD *)(a4 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 488) |= 0x1000000u;
  v7 = *(_QWORD *)(v6 + 200);
  if (!v7)
    operator new();
  sub_10017552C((uint64_t)a2, a4);
  *(_DWORD *)(v7 + 60) |= 1u;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    operator new();
  if ((sub_100178094(a2, v8) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v9 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Error: Failed to convert MapMatchingRouteHint notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert MapMatchingRouteHint notification receipt time to protobuf", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeMapMatchingRouteHint(const CLUtils::Timestamp &, const CLMapsRouteHintData &, CLP::LogEntry::LogEntry &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
  v13[0] = sub_1001FCBB4();
  *(_QWORD *)&result = sub_1013775B0(a3, v7, (uint64_t *)buf, v13).n128_u64[0];
  return result;
}

void sub_100C89748()
{
  operator delete();
}

uint64_t sub_100C897A4(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];
  _QWORD v11[7];

  if (*a3 == 25)
  {
    v5 = result;
    if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
    {
      v6 = *(_QWORD **)(a4 + 1160);
      if (v6)
        v7 = sub_100D03144(v6, 1) ^ 1;
      else
        v7 = 1;
      sub_100166054(v11);
      sub_10010F434((uint64_t)v10);
      sub_100C89860(v8, (uint64_t)v10, v9, a4, (uint64_t)v11);
      sub_1001668A0(v5, (uint64_t)v11, v7);
      return sub_100166004(v11);
    }
  }
  return result;
}

void sub_100C89848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C89860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v6 = *(_QWORD *)(a5 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 488) |= 0x1000u;
  v7 = *(_QWORD *)(v6 + 104);
  if (!v7)
    operator new();
  if (*(_QWORD *)(a4 + 1160))
  {
    sub_10017552C(a2, a5);
    sub_101373768(*(_QWORD *)(a4 + 1160), v7);
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v8 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Raven: missing gnss meas data", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: missing gnss meas data", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLRavenController::SerializeMeasurementNotification(const CLUtils::Timestamp &, const int &, const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_100C89AB4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100C89AF4(uint64_t a1, int a2, _DWORD *a3, CLMotionActivity *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[7];
  uint64_t v11[4];
  int v12;

  v12 = a2;
  if (*a3 == 1)
  {
    sub_10010F434((uint64_t)v11);
    if (*a3 == 1)
    {
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        sub_100DEC7E4(v7, (uint64_t)a4);
      v8 = *(_QWORD *)(a1 + 80);
      if (v8)
        sub_1008C5704(v8, (uint64_t)a4);
      sub_100C7B078(a1 + 4704, a4);
    }
    if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
    {
      v9 = sub_100166054(v10);
      sub_100C89BD8((uint64_t)v9, v11, &v12, (uint64_t)a4, (uint64_t)v10);
      sub_1001668A0(a1, (uint64_t)v10, 0);
      sub_100166004(v10);
    }
  }
}

void sub_100C89BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100166004(&a9);
  _Unwind_Resume(a1);
}

void sub_100C89BD8(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x10u;
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert motion state notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert motion state notification receipt time to protobuf", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeMotionStateNotification(const CLUtils::Timestamp &, const int &, const CLMotionState_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *(_DWORD *)(v9 + 32) |= 1u;
    v12 = *(_QWORD *)(v9 + 8);
    if (!v12)
      operator new();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  }
  v13 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v13 | 6;
  v14 = *(_QWORD *)(v9 + 16);
  if (!v14)
    operator new();
  sub_10137854C(a4, v14, 0);
}

void sub_100C89ED8()
{
  operator delete();
}

uint64_t sub_100C89F54(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[4];
  _QWORD v8[7];
  int v9;

  v9 = a2;
  if (!*a3)
  {
    v5 = result;
    if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
    {
      sub_100166054(v8);
      sub_10010F434((uint64_t)v7);
      sub_100C89FF0(v6, v7, &v9, a4, (uint64_t)v8);
      sub_1001668A0(v5, (uint64_t)v8, 0);
      return sub_100166004(v8);
    }
  }
  return result;
}

void sub_100C89FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C89FF0(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x20u;
  v9 = *(_QWORD *)(v8 + 48);
  if (!v9)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert motion state observer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert motion state observer notification receipt time to protobuf", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeMotionStateObserverNotification(const CLUtils::Timestamp &, const int &, const CLMotionStateObserver_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    operator new();
  sub_10137F6A4(a4, v13);
}

void sub_100C8A2A4()
{
  operator delete();
}

uint64_t sub_100C8A314(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[4];
  _QWORD v8[7];
  int v9;

  v9 = a2;
  if (*a3 == 2)
  {
    v5 = result;
    if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
    {
      sub_100166054(v8);
      sub_10010F434((uint64_t)v7);
      sub_100C8A3B4(v6, v7, &v9, a4, (uint64_t)v8);
      sub_1001668A0(v5, (uint64_t)v8, 0);
      return sub_100166004(v8);
    }
  }
  return result;
}

void sub_100C8A39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C8A3B4(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x40u;
  v9 = *(_QWORD *)(v8 + 56);
  if (!v9)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert natalimetry notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert natalimetry notification receipt time to protobuf", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeNatalimetryNotification(const CLUtils::Timestamp &, const int &, const CLNatalimetryNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    operator new();
  sub_10136F654(a4, v13);
}

void sub_100C8A668()
{
  operator delete();
}

void sub_100C8A6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  sub_10017552C(a2, a4);
  *(_DWORD *)(a4 + 52) |= 2u;
  v7 = *(_QWORD *)(a4 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 492) |= 4u;
  v8 = *(_QWORD *)(v7 + 280);
  if (!v8)
    operator new();
  sub_101383CFC(a3, v8);
  sub_1001668A0(a1, a4, 0);
}

void sub_100C8A7A0()
{
  operator delete();
}

void sub_100C8A7E0(uint64_t a1, float32x2_t *a2, unsigned int a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v10;
  float32x2_t v11;
  float32x2_t v12;
  const char *v13;
  const char *v14;
  int v15;
  float32x2_t v16;
  _DWORD v17[8];
  uint8_t buf[4];
  float32x2_t v19;

  if (a2 && a3)
  {
    if (a3 < 0xB)
    {
      if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
      {
        sub_10010F434((uint64_t)v17);
        if (sub_100AD2554(a1 + 4480, (double *)a2))
        {
          sub_100166054(buf);
          sub_100C8AC88(a1, (uint64_t)v17, a2, a3, (uint64_t)buf);
          sub_1001668A0(a1, (uint64_t)buf, 0);
          sub_100166004(buf);
          return;
        }
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v10 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *a2;
          *(_DWORD *)buf = 134349056;
          v19 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,gyro sample is before sleep,%{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v12 = *a2;
          v15 = 134349056;
          v16 = v12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning,gyro sample is before sleep,%{public}.3f", &v15, 12);
          v6 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleRateGyroNotification(const CLGyro::Sample *, unsigned int)", "%s\n", v13);
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v4 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v19.i32[0] = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected rate gyro batch size of %u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v17[0] = 67109120;
        v17[1] = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered unexpected rate gyro batch size of %u", v17);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleRateGyroNotification(const CLGyro::Sample *, unsigned int)", "%s\n", v5);
LABEL_33:
        if (v6 != buf)
          free(v6);
      }
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty rate gyro notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "#Warning Raven: encountered empty rate gyro notification", v17, 2);
      v6 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleRateGyroNotification(const CLGyro::Sample *, unsigned int)", "%s\n", v14);
      goto LABEL_33;
    }
  }
}

void sub_100C8AC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C8AC88(uint64_t a1, uint64_t a2, float32x2_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  float32x2_t v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  _WORD v20[8];
  uint8_t buf[8];
  float32x2_t v22;
  double v23;
  char v24;

  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  v9 = *(_QWORD *)(a5 + 40);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 488) |= 2u;
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    operator new();
  sub_10017552C(a2, a5);
  *(_DWORD *)(v10 + 44) |= 1u;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    operator new();
  if ((sub_100178094((uint64_t *)a2, v11) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v12 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Error: Failed to convert gyro notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v20[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert gyro notification receipt time to protobuf", v20, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeRateGyroNotification(const CLUtils::Timestamp &, const CLGyro::Sample *, const unsigned int, CLP::LogEntry::LogEntry &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  if ((_DWORD)v5)
  {
    v5 = v5;
    do
    {
      v13 = *a3;
      v14 = *(double *)a3 - *(double *)(a2 + 8);
      *(double *)buf = v14 + *(double *)a2;
      v22 = v13;
      v23 = v14 + *(double *)(a2 + 16);
      v24 = *(_BYTE *)(a2 + 24);
      v15 = *(_DWORD *)(v10 + 28);
      v16 = *(int *)(v10 + 24);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(v10 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v10 + 16), v15 + 1);
          v15 = *(_DWORD *)(v10 + 28);
        }
        *(_DWORD *)(v10 + 28) = v15 + 1;
        sub_100C9689C();
      }
      v17 = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v10 + 24) = v16 + 1;
      sub_101376C4C(a3, *(float32x2_t **)(v17 + 8 * v16), (uint64_t *)buf);
      a3 += 3;
      --v5;
    }
    while (v5);
  }
  else
  {
    v14 = 0.0;
  }
  sub_100C90DC0(a1 + 4560, 1u, *(double *)a2, -v14);
}

void sub_100C8AFD4()
{
  operator delete();
}

uint64_t sub_100C8B030(uint64_t result, int a2, _DWORD *a3, int *a4)
{
  uint64_t v5;
  uint64_t v6[4];
  _QWORD v7[7];
  int v8;

  v8 = a2;
  if (!*a3)
  {
    v5 = result;
    if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
    {
      sub_100166054(v7);
      sub_10010F434((uint64_t)v6);
      sub_100C8B0D0(v5, v6, &v8, a4, (uint64_t)v7);
      sub_1001668A0(v5, (uint64_t)v7, 0);
      return sub_100166004(v7);
    }
  }
  return result;
}

void sub_100C8B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C8B0D0(uint64_t a1, uint64_t *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v9 = *(_QWORD *)(a5 + 40);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 488) |= 0x800u;
  v10 = *(_QWORD *)(v9 + 96);
  if (!v10)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v10 + 32) |= 1u;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    operator new();
  if ((sub_100178094(a2, v11) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v12 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Error: Failed to convert signal environment notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v18[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert signal environment notification receipt time to protobuf", v18, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeSignalEnvironmentNotification(const CLUtils::Timestamp &, const int &, const CLSignalEnvironmentProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  v13 = *a3;
  *(_DWORD *)(v10 + 32) |= 8u;
  *(_DWORD *)(v10 + 24) = v13;
  v14 = *(_QWORD *)(a1 + 80);
  if (v14)
    sub_1008C5744(v14, *a4);
  v15 = *(_QWORD *)(a1 + 88);
  if (v15)
    sub_100DEC818(v15, *a4);
  sub_101379A00(a4, (_DWORD *)v10);
}

void sub_100C8B37C()
{
  operator delete();
}

uint64_t sub_100C8B3D8(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[4];
  _QWORD v8[7];
  int v9;

  v9 = a2;
  if (!*a3)
  {
    v5 = result;
    if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
    {
      sub_100166054(v8);
      sub_10010F434((uint64_t)v7);
      sub_100C8B474(v6, v7, &v9, a4, (uint64_t)v8);
      sub_1001668A0(v5, (uint64_t)v8, 0);
      return sub_100166004(v8);
    }
  }
  return result;
}

void sub_100C8B45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

BOOL sub_100C8B474(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x8000u;
  v9 = *(_QWORD *)(v8 + 128);
  if (!v9)
    operator new();
  sub_10017552C((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert step count notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert step count notification receipt time to protobuf", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeStepCountNotification(const CLUtils::Timestamp &, const int &, const CLStepCountNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    operator new();
  return sub_101379D40(a4, v13);
}

void sub_100C8B728()
{
  operator delete();
}

void sub_100C8B798(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13[4];
  uint8_t buf[1640];

  v12 = a2;
  if (*a3 == 30)
  {
    if ((*(_DWORD *)(a4 + 96) & 0xFFFFFFF7) == 1)
    {
      if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
      {
        sub_100166054(buf);
        sub_10010F434((uint64_t)v13);
        sub_100C87BCC(v6, v13, &v12, a4, (uint64_t)buf);
        sub_1001668A0(a1, (uint64_t)buf, 0);
        sub_100166004(buf);
      }
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v7 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_DWORD *)(a4 + 96);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "HandleVendorLocationNotification received non-GNSS location,type,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v9 = *(_DWORD *)(a4 + 96);
        LODWORD(v13[0]) = 67109120;
        HIDWORD(v13[0]) = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "HandleVendorLocationNotification received non-GNSS location,type,%d", v13);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLRavenController::HandleVendorLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

void sub_100C8B9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

BOOL sub_100C8B9E0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;
  int v11;

  v11 = 0;
  sub_10017552C(a2, a5);
  sub_10086B16C(*a3, &v11);
  *(_DWORD *)(a5 + 52) |= 2u;
  v7 = *(_QWORD *)(a5 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 492) |= 0x20u;
  v8 = *(_QWORD *)(v7 + 304);
  if (!v8)
    operator new();
  v9 = v11;
  result = sub_100177AB4(v11);
  if (!result)
    sub_101921B40();
  *(_DWORD *)(v8 + 40) |= 1u;
  *(_DWORD *)(v8 + 32) = v9;
  return result;
}

void sub_100C8BAC0()
{
  operator delete();
}

uint64_t sub_100C8BAF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a5 + 52) |= 2u;
  v6 = *(_QWORD *)(a5 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 492) |= 0x20u;
  v7 = *(_QWORD *)(v6 + 304);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 40) |= 2u;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    operator new();
  sub_10017552C(a2, a5);
  return sub_10086B338(a3, v8);
}

void sub_100C8BBE8()
{
  operator delete();
}

uint64_t sub_100C8BC34(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a5 + 52) |= 2u;
  v6 = *(_QWORD *)(a5 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 492) |= 0x20u;
  v7 = *(_QWORD *)(v6 + 304);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 40) |= 8u;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    operator new();
  sub_10017552C(a2, a5);
  return sub_10086CB10(a3, v8);
}

void sub_100C8BD24()
{
  operator delete();
}

uint64_t sub_100C8BD70(uint64_t result, int a2, int *a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[4];
  _QWORD v9[7];
  int v10;

  v6 = result;
  v10 = a2;
  if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
  {
    sub_100166054(v9);
    sub_10010F434((uint64_t)v8);
    sub_100C8BE14(v7, v8, &v10, a3, a4, (uint64_t)v9);
    sub_1001668A0(v6, (uint64_t)v9, 1);
    return sub_100166004(v9);
  }
  return result;
}

void sub_100C8BDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100C8BE14(uint64_t a1, uint64_t *a2, int *a3, int *a4, char *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  *(_DWORD *)(a6 + 52) |= 2u;
  v10 = *(_QWORD *)(a6 + 40);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 488) |= 0x200000u;
  v11 = *(_QWORD *)(v10 + 176);
  if (!v11)
    operator new();
  sub_10017552C((uint64_t)a2, a6);
  *(_DWORD *)(v11 + 56) |= 1u;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    operator new();
  sub_100178094(a2, v12);
  v13 = *a3;
  *(_DWORD *)(v11 + 56) |= 2u;
  *(_DWORD *)(v11 + 16) = v13;
  sub_10000D5F4(a4, a5, v11);
}

void sub_100C8BF38()
{
  operator delete();
}

void sub_100C8BF8C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  int v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t *i;
  uint64_t *v25;
  NSObject *v26;
  uint64_t *v27;
  uint64_t *v28;
  const char *v29;
  uint8_t *v30;
  NSObject *v31;
  const char *v32;
  uint8_t *v33;
  int v34;
  uint64_t *v35;
  uint8_t buf[4];
  _BYTE v37[14];
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t *v47;
  __int16 v48;
  int v49;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5 || (sub_100DED3C8(v5) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v12 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v37 = 0;
      *(_WORD *)&v37[4] = 2082;
      *(_QWORD *)&v37[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification,unexpected\"}", buf, 0x12u);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    }
    v9 = qword_1022A00A8;
    if (!os_signpost_enabled((os_log_t)qword_1022A00A8))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v37 = 0;
    *(_WORD *)&v37[4] = 2082;
    *(_QWORD *)&v37[6] = "";
    v10 = "CLRavenController,HandleRayTracingTileNotification,unexpected";
    v11 = "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification,unexpected\"}";
LABEL_18:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v10, v11, buf, 0x12u);
    return;
  }
  if (*a3 || !*(_QWORD *)(a1 + 88))
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v8 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v37 = 0;
      *(_WORD *)&v37[4] = 2082;
      *(_QWORD *)&v37[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification,parameter error\"}", buf, 0x12u);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    }
    v9 = qword_1022A00A8;
    if (!os_signpost_enabled((os_log_t)qword_1022A00A8))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v37 = 0;
    *(_WORD *)&v37[4] = 2082;
    *(_QWORD *)&v37[6] = "";
    v10 = "CLRavenController,HandleRayTracingTileNotification,parameter error";
    v11 = "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification,parameter error\"}";
    goto LABEL_18;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v13 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *((unsigned __int8 *)a4 + 20);
    v15 = *a4;
    v16 = a4[1];
    v17 = *((_DWORD *)a4 + 4);
    if (*((char *)a4 + 47) >= 0)
      v18 = a4 + 3;
    else
      v18 = (uint64_t *)a4[3];
    v19 = *((unsigned __int8 *)a4 + 72);
    *(_DWORD *)buf = 68290562;
    *(_DWORD *)v37 = 0;
    *(_WORD *)&v37[4] = 2082;
    *(_QWORD *)&v37[6] = "";
    v38 = 1026;
    v39 = v14;
    v40 = 2050;
    v41 = v15;
    v42 = 2050;
    v43 = v16;
    v44 = 1026;
    v45 = v17;
    v46 = 2082;
    v47 = v18;
    v48 = 1026;
    v49 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification\", \"responseCode\":%{public}u, \"requestedLatitude\":\"%{public}f\", \"requestedLongitude\":\"%{public}f\", \"tileBoundarySize\":%{public}d, \"dir\":%{public, location:escape_only}s, \"complete\":%{public}hhd}", buf, 0x42u);
  }
  if (*((_BYTE *)a4 + 72))
    sub_100DEB1E0(*(_QWORD *)(a1 + 88));
  if (*((_BYTE *)a4 + 20))
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v20 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLRavenController,HandleRayTracingTileNotification,failure response code", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLRavenController,HandleRayTracingTileNotification,failure response code", &v34, 2);
LABEL_39:
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleRayTracingTileNotification(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  else if (a4[6] == a4[7])
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v31 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "CLRavenController,HandleRayTracingTileNotification,NO tile files are provided", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLRavenController,HandleRayTracingTileNotification,NO tile files are provided", &v34, 2);
      goto LABEL_39;
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v23 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "CLRavenController,HandleRayTracingTileNotification,List of downloaded tile files:", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLRavenController,HandleRayTracingTileNotification,List of downloaded tile files:", &v34, 2);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleRayTracingTileNotification(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    v25 = (uint64_t *)a4[6];
    for (i = (uint64_t *)a4[7]; v25 != i; v25 += 3)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v26 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        v27 = v25;
        if (*((char *)v25 + 23) < 0)
          v27 = (uint64_t *)*v25;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v37 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CLRavenController,HandleRayTracingTileNotification,tileFile:%s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v28 = v25;
        if (*((char *)v25 + 23) < 0)
          v28 = (uint64_t *)*v25;
        v34 = 136315138;
        v35 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLRavenController,HandleRayTracingTileNotification,tileFile:%s", (const char *)&v34);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::HandleRayTracingTileNotification(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
    }
    if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
    {
      sub_100DECC68(*(_QWORD *)(a1 + 88), (uint64_t)(a4 + 6), (uint64_t)(a4 + 3));
      sub_100C8C810(a1);
    }
  }
}

void sub_100C8C810(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  CLOSTransaction *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *__p[2];
  uint64_t v14;
  uint8_t v15[4];
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t buf;
  __int16 v20;
  const char *v21;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
  {
    buf = 68289026;
    v20 = 2082;
    v21 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend\"}", (uint8_t *)&buf, 0x12u);
  }
  if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
    {
      __p[0] = 0;
      __p[1] = 0;
      v14 = 0;
      v12 = 0;
      if (sub_100DED3C8(v3) && (sub_100DEC918(*(_QWORD *)(a1 + 88), (uint64_t)__p) & 1) == 0)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v7 = qword_1022A00A8;
        if (!os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
          goto LABEL_43;
      }
      else
      {
        if ((sub_100DED3C8(*(_QWORD *)(a1 + 88)) & 1) != 0 || (sub_100DECB48(*(_QWORD **)(a1 + 88), &v12) & 1) != 0)
        {
          v4 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "HandleRayTracingSerializeAndSend");
          if (!v4)
          {
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v8 = qword_1022A00A8;
            if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
            {
              buf = 68289026;
              v20 = 2082;
              v21 = "";
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,os_transaction,failed\"}", (uint8_t *)&buf, 0x12u);
              if (qword_1022A00A0 != -1)
                dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            }
            v9 = qword_1022A00A8;
            if (os_signpost_enabled((os_log_t)qword_1022A00A8))
            {
              buf = 68289026;
              v20 = 2082;
              v21 = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenController,HandleRayTracingSerializeAndSend,os_transaction,failed", "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,os_transaction,failed\"}", (uint8_t *)&buf, 0x12u);
            }
            goto LABEL_43;
          }
          sub_100166054(&buf);
          if (sub_100DED3C8(*(_QWORD *)(a1 + 88)))
          {
            sub_10010F434((uint64_t)v15);
            if ((sub_100C8CD50(v5, (uint64_t)v15, (const char *)__p, (uint64_t)&buf) & 1) == 0)
              goto LABEL_40;
          }
          else
          {
            sub_10010F434((uint64_t)v15);
            if (!sub_100C8D4A0(v10, (uint64_t)v15, v12, (uint64_t)&buf))
            {
LABEL_40:
              if (v12)
              {
                sub_100DED22C(*(_QWORD *)(a1 + 88), v12);
                v12 = 0;
              }

              sub_100DECF3C(*(_QWORD *)(a1 + 88));
              sub_100166004(&buf);
              goto LABEL_43;
            }
          }
          sub_1001668A0(a1, (uint64_t)&buf, 0);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v11 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v15 = 68289026;
            v16 = 0;
            v17 = 2082;
            v18 = "";
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,After Send\"}", v15, 0x12u);
          }
          goto LABEL_40;
        }
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v7 = qword_1022A00A8;
        if (!os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
          goto LABEL_43;
      }
      buf = 68289026;
      v20 = 2082;
      v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,GetNextTile,FALSE\"}", (uint8_t *)&buf, 0x12u);
LABEL_43:
      if (SHIBYTE(v14) < 0)
        operator delete(__p[0]);
      return;
    }
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v6 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v20 = 2082;
    v21 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,parameter error\"}", (uint8_t *)&buf, 0x12u);
  }
}

void sub_100C8CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_100166004(&a20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100C8CD50(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  NSObject *v7;
  const char *v8;
  int v9;
  int v10;
  off_t st_size;
  std::string::value_type *v12;
  uint64_t v13;
  uint64_t v14;
  off_t v15;
  std::string *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  const char *v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  uint32_t v31;
  NSObject *v32;
  uint64_t *v33;
  const char *v34;
  int v36;
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  uint64_t *v41;
  stat buf;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v7 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
  {
    buf.st_dev = 68289026;
    *(_DWORD *)&buf.st_mode = 0;
    LOWORD(buf.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\"}", (uint8_t *)&buf, 0x12u);
  }
  if (a3[23] >= 0)
    v8 = a3;
  else
    v8 = *(const char **)a3;
  v9 = open(v8, 0);
  v10 = v9;
  if (v9 != -1)
  {
    if (fstat(v9, &buf) == -1)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v22 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
      {
        v23 = a3[23] >= 0 ? (uint64_t *)a3 : *(uint64_t **)a3;
        v36 = 68289282;
        v37 = 0;
        v38 = 2082;
        v39 = "";
        v40 = 2082;
        v41 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"statFailedFor\":%{public, location:escape_only}s}", (uint8_t *)&v36, 0x1Cu);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      }
      v24 = qword_1022A00A8;
      if (!os_signpost_enabled((os_log_t)qword_1022A00A8))
        goto LABEL_68;
      if (a3[23] >= 0)
        v25 = a3;
      else
        v25 = *(const char **)a3;
      v36 = 68289282;
      v37 = 0;
      v38 = 2082;
      v39 = "";
      v40 = 2082;
      v41 = (uint64_t *)v25;
      v26 = "CLRavenController,SerializeRayTracingTileData";
      v27 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"statFailedFor\":%{public, location:escape_only}s}";
    }
    else
    {
      st_size = buf.st_size;
      if (buf.st_size <= 0)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v28 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
        {
          v36 = 68289026;
          v37 = 0;
          v38 = 2082;
          v39 = "";
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,0 fileSize\"}", (uint8_t *)&v36, 0x12u);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        }
        v29 = qword_1022A00A8;
        if (!os_signpost_enabled((os_log_t)qword_1022A00A8))
          goto LABEL_68;
        v36 = 68289026;
        v37 = 0;
        v38 = 2082;
        v39 = "";
        v26 = "CLRavenController,SerializeRayTracingTileData,0 fileSize";
        v27 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,0 fileSize\"}";
        v30 = v29;
        v31 = 18;
        goto LABEL_67;
      }
      v12 = (std::string::value_type *)mmap(0, buf.st_size, 1, 2, v10, 0);
      if (v12 != (std::string::value_type *)-1)
      {
        *(_DWORD *)(a4 + 52) |= 2u;
        v13 = *(_QWORD *)(a4 + 40);
        if (!v13)
          operator new();
        *(_DWORD *)(v13 + 492) |= 0x400u;
        v14 = *(_QWORD *)(v13 + 344);
        if (!v14)
          operator new();
        sub_10017552C(a2, a4);
        v15 = buf.st_size;
        *(_DWORD *)(v14 + 36) |= 4u;
        v16 = *(std::string **)(v14 + 24);
        if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::assign(v16, v12, v15);
        munmap(v12, st_size);
        v17 = 1;
        goto LABEL_69;
      }
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v32 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
      {
        v33 = a3[23] >= 0 ? (uint64_t *)a3 : *(uint64_t **)a3;
        v36 = 68289282;
        v37 = 0;
        v38 = 2082;
        v39 = "";
        v40 = 2082;
        v41 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"mmapFailedFor\":%{public, location:escape_only}s}", (uint8_t *)&v36, 0x1Cu);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      }
      v24 = qword_1022A00A8;
      if (!os_signpost_enabled((os_log_t)qword_1022A00A8))
      {
LABEL_68:
        v17 = 0;
LABEL_69:
        close(v10);
        return v17;
      }
      if (a3[23] >= 0)
        v34 = a3;
      else
        v34 = *(const char **)a3;
      v36 = 68289282;
      v37 = 0;
      v38 = 2082;
      v39 = "";
      v40 = 2082;
      v41 = (uint64_t *)v34;
      v26 = "CLRavenController,SerializeRayTracingTileData";
      v27 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"mmapFailedFor\":%{public, location:escape_only}s}";
    }
    v30 = v24;
    v31 = 28;
LABEL_67:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v26, v27, (uint8_t *)&v36, v31);
    goto LABEL_68;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v18 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
  {
    v19 = a3[23] >= 0 ? (uint64_t)a3 : *(_QWORD *)a3;
    buf.st_dev = 68289282;
    *(_DWORD *)&buf.st_mode = 0;
    LOWORD(buf.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
    HIWORD(buf.st_uid) = 2082;
    *(_QWORD *)&buf.st_gid = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"FailedToOpenFile\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  }
  v20 = qword_1022A00A8;
  if (os_signpost_enabled((os_log_t)qword_1022A00A8))
  {
    if (a3[23] >= 0)
      v21 = a3;
    else
      v21 = *(const char **)a3;
    buf.st_dev = 68289282;
    *(_DWORD *)&buf.st_mode = 0;
    LOWORD(buf.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
    HIWORD(buf.st_uid) = 2082;
    *(_QWORD *)&buf.st_gid = v21;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenController,SerializeRayTracingTileData", "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"FailedToOpenFile\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  return 0;
}

void sub_100C8D460()
{
  operator delete();
}

BOOL sub_100C8D4A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  NSObject *v8;
  id v9;
  void *v10;
  id v11;
  const std::string::value_type *v12;
  const std::string::value_type *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  uint32_t v33;
  NSObject *v34;
  id v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  id v44;
  __int16 v45;
  id v46;

  v7 = objc_autoreleasePoolPush();
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v8 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v38 = 0;
    v39 = 2082;
    v40 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\"}", buf, 0x12u);
  }
  if (!a3)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v38 = 0;
      v39 = 2082;
      v40 = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,null geoRayTracingTile\"}", buf, 0x12u);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    }
    v19 = qword_1022A00A8;
    if (!os_signpost_enabled((os_log_t)qword_1022A00A8))
      goto LABEL_46;
    *(_DWORD *)buf = 68289026;
    v38 = 0;
    v39 = 2082;
    v40 = "";
    v20 = "CLRavenController,SerializeRayTracingTileData,null geoRayTracingTile";
    v21 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,null geoRayTracingTile\"}";
LABEL_44:
    v32 = v19;
    v33 = 18;
LABEL_45:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v20, v21, buf, v33);
LABEL_46:
    v17 = 1;
    goto LABEL_47;
  }
  v36 = 0;
  v9 = objc_msgSend(a3, "readDataWithOptions:error:", 1, &v36);
  v10 = v9;
  if (!v9)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v22 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v38 = 0;
      v39 = 2082;
      v40 = "";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,readDataWithOptions returned null\"}", buf, 0x12u);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    }
    v23 = qword_1022A00A8;
    if (os_signpost_enabled((os_log_t)qword_1022A00A8))
    {
      *(_DWORD *)buf = 68289026;
      v38 = 0;
      v39 = 2082;
      v40 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenController,SerializeRayTracingTileData,readDataWithOptions returned null", "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,readDataWithOptions returned null\"}", buf, 0x12u);
    }
    if (!v36)
      goto LABEL_46;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C668);
    v24 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v25 = objc_msgSend(v36, "code");
      v26 = objc_msgSend(objc_msgSend(v36, "domain"), "UTF8String");
      v27 = objc_msgSend(objc_msgSend(v36, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 68289795;
      v38 = 0;
      v39 = 2082;
      v40 = "";
      v41 = 2050;
      v42 = v25;
      v43 = 2082;
      v44 = v26;
      v45 = 2081;
      v46 = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,readDataWithOptions error\", \"error\":%{public}lld, \"domain\":%{public, location:escape_only}s, \"description\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C668);
    }
    v28 = qword_1022A0028;
    if (!os_signpost_enabled((os_log_t)qword_1022A0028))
      goto LABEL_46;
    v29 = objc_msgSend(v36, "code");
    v30 = objc_msgSend(objc_msgSend(v36, "domain"), "UTF8String");
    v31 = objc_msgSend(objc_msgSend(v36, "localizedDescription"), "UTF8String");
    *(_DWORD *)buf = 68289795;
    v38 = 0;
    v39 = 2082;
    v40 = "";
    v41 = 2050;
    v42 = v29;
    v43 = 2082;
    v44 = v30;
    v45 = 2081;
    v46 = v31;
    v20 = "CLRavenController,readDataWithOptions error";
    v21 = "{\"msg%{public}.0s\":\"CLRavenController,readDataWithOptions error\", \"error\":%{public}lld, \"domain\":%{pub"
          "lic, location:escape_only}s, \"description\":%{private, location:escape_only}s}";
    v32 = v28;
    v33 = 48;
    goto LABEL_45;
  }
  v11 = objc_msgSend(v9, "length");
  v12 = (const std::string::value_type *)objc_msgSend(v10, "bytes");
  if (!v11)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v34 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v38 = 0;
      v39 = 2082;
      v40 = "";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,invalid tileSize\"}", buf, 0x12u);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    }
    v19 = qword_1022A00A8;
    if (!os_signpost_enabled((os_log_t)qword_1022A00A8))
      goto LABEL_46;
    *(_DWORD *)buf = 68289026;
    v38 = 0;
    v39 = 2082;
    v40 = "";
    v20 = "CLRavenController,SerializeRayTracingTileData,invalid tileSize";
    v21 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,invalid tileSize\"}";
    goto LABEL_44;
  }
  v13 = v12;
  *(_DWORD *)(a4 + 52) |= 2u;
  v14 = *(_QWORD *)(a4 + 40);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 492) |= 0x400u;
  v15 = *(_QWORD *)(v14 + 344);
  if (!v15)
    operator new();
  sub_10017552C(a2, a4);
  *(_DWORD *)(v15 + 36) |= 4u;
  v16 = *(std::string **)(v15 + 24);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::assign(v16, v13, (std::string::size_type)v11);
  v17 = 0;
LABEL_47:
  objc_autoreleasePoolPop(v7);
  return v17 == 0;
}

void sub_100C8DB88()
{
  operator delete();
}

uint64_t sub_100C8DBC8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  _QWORD v10[5];
  uint64_t v11;
  int v12;
  uint8_t buf[1640];

  v3 = result;
  if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
  {
    sub_100166054(v10);
    sub_10010F434((uint64_t)buf);
    sub_10017552C((uint64_t)buf, (uint64_t)v10);
    v12 |= 2u;
    v4 = v11;
    if (!v11)
      operator new();
    *(_DWORD *)(v11 + 492) |= 2u;
    v5 = *(_QWORD *)(v4 + 272);
    if (!v5)
      operator new();
    if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString(v5, a2) & 1) != 0)
    {
      sub_1001668A0(v3, (uint64_t)v10, 0);
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v6 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#rof,failed to parse wire format", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v9 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "#rof,failed to parse wire format", &v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "void CLRavenController::HandleRavenOrbitFile(const std::string &)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    return sub_100166004(v10);
  }
  return result;
}

void sub_100C8DE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

BOOL sub_100C8DE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double Current;
  NSObject *v7;
  _BOOL8 v8;
  NSObject *v9;
  double v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v30;
  BOOL v32;
  BOOL v33;
  NSObject *v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  const char *v38;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  const char *v44;
  double v45;
  double v46;
  double v47;
  double v49;
  void *v50;
  NSObject *v51;
  const char *v52;
  char *v53;
  NSObject *v54;
  NSObject *v55;
  double v56;
  int v57;
  NSObject *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  _BOOL4 v62;
  _BOOL4 v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v74;
  NSObject *v75;
  double v78;
  int v79;
  int v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  unsigned int v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  NSObject *v92;
  const char *v93;
  NSObject *v94;
  const char *v95;
  char *v96;
  const char *v97;
  const char *v98;
  char *v99;
  NSObject *v100;
  _BOOL4 v101;
  const char *v102;
  char *v103;
  NSObject *v104;
  double v105;
  double v106;
  double v107;
  const char *v108;
  char *v109;
  const char *v110;
  char *v111;
  const char *v112;
  const char *v113;
  char *v114;
  const char *v115;
  char *v116;
  const char *v117;
  char *v118;
  uint64_t v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  float64x2_t v129;
  double v130;
  _BYTE v131[16];
  int v132;
  double *v133;
  _DWORD v134[14];
  long double v135;
  long double v136;
  double v137;
  __int128 v138;
  uint64_t v139;
  _BYTE v140[52];
  __int128 v141;
  __int128 v142;
  int v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  int v156;
  double v157;
  void (**v158)(void);
  char v159;
  uint64_t (**v160)();
  __int128 v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  double v165[3];
  char v166;
  int v167;
  double v168;
  _BYTE v169[24];
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  double v178;
  _BYTE v179[24];
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t (**v183)();
  __int128 v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  _BYTE buf[24];
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;

  if (*(_BYTE *)(a2 + 1264))
  {
    sub_10010F434((uint64_t)v165);
    if (v166)
      Current = v165[2] + *(double *)(a2 + 1176) + (double)*(uint64_t *)(a2 + 1168) - v165[0];
    else
      Current = CFAbsoluteTimeGetCurrent();
    v159 = 0;
    v162 = 0x300000003;
    v160 = off_102167280;
    v161 = xmmword_101C05640;
    v163 = &v164;
    *(_OWORD *)v169 = *(_OWORD *)(a2 + 1272);
    *(_QWORD *)&v169[16] = *(_QWORD *)(a2 + 1288);
    if (cnnavigation::ECEFToLLA(v169, 1, &v183))
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v9 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed in ECEF to LLA conversion.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      *(_WORD *)v140 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed in ECEF to LLA conversion.", v140, 2);
      v36 = (char *)v97;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v97);
      goto LABEL_204;
    }
    v11 = *(double *)&v183;
    v12 = v184;
    sub_100C96700((uint64_t)buf);
    v159 = buf[8];
    sub_10007A0C8((uint64_t)&v160, (uint64_t)&buf[16]);
    cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)buf);
    if (!v159)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v37 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: ENU Jacobian.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      *(_WORD *)v140 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed: ENU Jacobian.", v140, 2);
      v36 = (char *)v38;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v38);
      goto LABEL_204;
    }
    *(_QWORD *)&v140[24] = 0x300000003;
    *(_QWORD *)v140 = off_102167280;
    *(_OWORD *)&v140[8] = xmmword_101C05640;
    *(_QWORD *)&v140[32] = &v140[40];
    if (!sub_100C900E0(a2 + 1168, v140))
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v39 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: Get user ECEF position covariance.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      *(_WORD *)v179 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed: Get user ECEF position covariance.", v179, 2);
      v36 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v40);
      goto LABEL_204;
    }
    v180 = 0x300000003;
    *(_QWORD *)v179 = off_102167280;
    *(_OWORD *)&v179[8] = xmmword_101C05640;
    v181 = &v182;
    if (!sub_100C90208((uint64_t)&v158, (uint64_t)v140, (uint64_t)v179))
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v41 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: rotate variance.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v173) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed: rotate variance.", &v173, 2);
      v36 = (char *)v42;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v42);
      goto LABEL_204;
    }
    v13 = *(double *)sub_100206B6C((uint64_t)v179, 0, 0);
    v14 = sqrt(v13 + *(double *)sub_100206B6C((uint64_t)v179, 1, 1));
    v15 = sqrt(*(double *)sub_100206B6C((uint64_t)v179, 2, 2));
    _ZF = *(uint64_t *)&v14 > -1 && ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
       || (unint64_t)(*(_QWORD *)&v14 - 1) < 0xFFFFFFFFFFFFFLL
       || (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (!_ZF || v15 <= 0.0 || v15 == INFINITY || v14 <= 0.0)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v43 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v15;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: Invalid accuracy: horizontalAccuracy %{public}.4f, verticalAccuracy %{public}.4f", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v173 = 134349312;
      v174 = v14;
      v175 = 2050;
      v176 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed: Invalid accuracy: horizontalAccuracy %{public}.4f, verticalAccuracy %{public}.4f", &v173, 22);
      v36 = (char *)v44;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v44);
      goto LABEL_204;
    }
    v128 = v15;
    v19 = *(double *)sub_100206B6C((uint64_t)v179, 0, 0);
    v20 = *(double *)sub_100206B6C((uint64_t)v179, 0, 1);
    v21 = *(double *)sub_100206B6C((uint64_t)v179, 1, 1);
    v22 = v19 + v21;
    v23 = (v20 * v20 - v19 * v21) * 4.0 + v22 * v22;
    v24 = fabs(v23);
    v25 = sqrt(v23);
    if (v24 <= 0.0000001)
      v25 = 0.0;
    v26.f64[0] = v22 + v25;
    v26.f64[1] = v22 - v25;
    __asm { FMOV            V0.2D, #0.5 }
    v30 = vmulq_f64(v26, _Q0);
    v32 = (*(uint64_t *)&v30.f64[0] <= -1
        || ((*(_QWORD *)&v30.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
       && (unint64_t)(*(_QWORD *)&v30.f64[0] - 1) >= 0xFFFFFFFFFFFFFLL;
    v129 = v30;
    v33 = !v32 && (*(_QWORD *)&v30.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v33 || v30.f64[1] <= 0.0)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v34 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = v19;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2050;
        v189 = *(_QWORD *)&v21;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed in computing error ellipse: a, %{public}.4f, b, %{public}.4f, c, %{public}.4f.", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v173 = 134349568;
      v174 = v19;
      v175 = 2050;
      v176 = v20;
      v177 = 2050;
      v178 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed in computing error ellipse: a, %{public}.4f, b, %{public}.4f, c, %{public}.4f.", &v173, 32);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v35);
      goto LABEL_204;
    }
    v45 = v11 * 57.2957795;
    v46 = *(double *)&v12 * 57.2957795;
    if (fabs(v20) <= 0.0000001)
    {
      if (v21 >= v19 + -0.0000001)
        v47 = 0.0;
      else
        v47 = 90.0;
    }
    else
    {
      v47 = atan((v30.f64[0] - v21) / v20) * 57.2957795;
    }
    v157 = 0.0;
    v156 = -1;
    *(_QWORD *)&v140[12] = 0;
    *(_QWORD *)&v140[4] = 0;
    *(_OWORD *)&v140[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v140[36] = _Q0;
    v141 = _Q0;
    v142 = _Q0;
    *(_DWORD *)v140 = 0xFFFF;
    v143 = 0;
    v145 = 0;
    v146 = 0;
    v144 = 0xBFF0000000000000;
    v148 = 0xBFF0000000000000;
    v147 = 0;
    v149 = 0x7FFFFFFF;
    v151 = 0;
    v152 = 0;
    v150 = 0;
    v153 = 0;
    *(_QWORD *)&v49 = sub_10012A33C(&v154).n128_u64[0];
    *(double *)&v140[4] = v45;
    *(double *)&v140[12] = *(double *)&v12 * 57.2957795;
    *((double *)&v142 + 1) = Current;
    if (*(_BYTE *)(a2 + 1344))
    {
      v49 = *(double *)(a2 + 1352);
      *(double *)&v140[44] = v49;
    }
    v173 = 0;
    v50 = *(void **)(a1 + 224);
    if (v50 && objc_msgSend(v50, "syncgetAltitude:rel:undulation:", v140, &v173, &v157, v49))
    {
      sub_100168414(*(_QWORD *)(a1 + 4552), 2, v157, Current);
      sub_10015F970(*(_QWORD *)(a1 + 4552), &v157, &v156, Current);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v51 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283777;
        *(double *)&buf[4] = v157;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v156;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Raven: DEM,EGM08,undulation,%{private}.2lf,undulationModel,%{public}d", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_118;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      *(_DWORD *)v179 = 134283777;
      *(double *)&v179[4] = v157;
      *(_WORD *)&v179[12] = 1026;
      *(_DWORD *)&v179[14] = v156;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: DEM,EGM08,undulation,%{private}.2lf,undulationModel,%{public}d", v179, 18);
      v53 = (char *)v52;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v52);
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v54 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Raven: DEM unavailable. Using DMA instead.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        *(_WORD *)v179 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: DEM unavailable. Using DMA instead.", v179, 2);
        v109 = (char *)v108;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v108);
        if (v109 != buf)
          free(v109);
      }
      *(_DWORD *)v169 = 0;
      if (!sub_100208AC8((float *)v169, v45, v46))
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v58 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed in computing undulation.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          *(_WORD *)v179 = 0;
          LODWORD(v119) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed in computing undulation.", v179, v119);
          v111 = (char *)v110;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v110);
          if (v111 != buf)
            free(v111);
        }
        v57 = 0;
        v56 = -1.0;
LABEL_125:
        v59 = v155;
        if (v155)
        {
          p_shared_owners = (unint64_t *)&v155->__shared_owners_;
          do
            v61 = __ldaxr(p_shared_owners);
          while (__stlxr(v61 - 1, p_shared_owners));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        if (!v57)
          goto LABEL_17;
        v125 = -1.0;
        v122 = v45;
        if (*(_BYTE *)(a2 + 1344))
        {
          v123 = sqrt(*(double *)(a2 + 1384));
          v124 = *(double *)(a2 + 1352);
          if (*(_BYTE *)(a2 + 1345))
          {
            v138 = *(_OWORD *)(a2 + 1360);
            v139 = *(_QWORD *)(a2 + 1376);
            v185 = 0x300000003;
            *(double *)&v183 = COERCE_DOUBLE(off_102167280);
            v184 = xmmword_101C05640;
            v186 = &v187;
            *(_QWORD *)&v140[24] = 0x400000004;
            *(_QWORD *)v140 = off_10217C6E0;
            *(_OWORD *)&v140[8] = xmmword_101C1F5E0;
            *(_QWORD *)&v140[32] = &v140[40];
            v62 = sub_100C90344((uint64_t)&v158, (double *)&v138, &v135);
            v63 = v159 && v62;
            v125 = -1.0;
            if (v63)
            {
              sub_10007A0C8((uint64_t)&v183, (uint64_t)&v160);
              if (sub_100C90478(a2 + 1168, v140))
              {
                v120 = v136;
                v121 = v135;
                v64 = sqrt(v120 * v120 + v121 * v121);
                v65 = -1.0;
                if (v64 != INFINITY)
                {
                  v66 = v64;
                  if (fabs(v64) > 0.0000001 && fabs(v137) <= 0.866025404)
                  {
                    v126 = v56;
                    sub_100C906A4(1, 3, (uint64_t)buf);
                    sub_100C90658((uint64_t)buf, v134);
                    sub_100C9070C(4u, 4u, v179);
                    *(_QWORD *)sub_100206B6C((uint64_t)v179, 0, 0) = 0x3FF0000000000000;
                    sub_100C9787C((uint64_t)buf, (uint64_t)v179, (uint64_t)v134, (uint64_t)v134);
                    sub_100C907D4((uint64_t)buf, (uint64_t)&v183);
                    sub_100C908D4((uint64_t)v179, (uint64_t)v140, (uint64_t)buf);
                    sub_100C90938((uint64_t)v179, v169);
                    sub_100C908D4((uint64_t)buf, (uint64_t)v169, (uint64_t)&v173);
                    v67 = 1.0 / v66;
                    v68 = *(double *)(a2 + 1352);
                    v69 = v66 * v68;
                    v70 = fabs(v66 * v68);
                    if (COERCE__INT64(v66 * v68) > -1
                      && (unint64_t)(*(_QWORD *)&v70 - 0x10000000000000) >> 53 < 0x3FF
                      || (unint64_t)(COERCE__INT64(v66 * v68) - 1) < 0xFFFFFFFFFFFFFLL
                      || *(_QWORD *)&v70 == 0)
                    {
                      v170 = 0x400000001;
                      *(_QWORD *)v169 = off_10217C8F8;
                      *(_OWORD *)&v169[8] = xmmword_101C1F5F0;
                      v171 = &v172;
                      *(double *)sub_100206B6C((uint64_t)v169, 0, 0) = v66;
                      *(double *)sub_100206B6C((uint64_t)v169, 0, 1) = v67 * (v121 * v68);
                      *(double *)sub_100206B6C((uint64_t)v169, 0, 2) = v67 * (v120 * v68);
                      *(_QWORD *)sub_100206B6C((uint64_t)v169, 0, 3) = 0;
                      sub_100C909E4((uint64_t)v169, (uint64_t)&v173, (uint64_t)buf);
                      sub_100C90A4C((uint64_t)v169, &v167);
                      sub_100C90984((uint64_t)buf, (uint64_t)&v167, (uint64_t)v131);
                      if (v132 != 1)
                        __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
                      v74 = *v133;
                      if ((*(_QWORD *)v133 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v74 <= 0.0)
                      {
                        if (qword_1022A00A0 != -1)
                          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                        v75 = qword_1022A00A8;
                        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 134349056;
                          *(double *)&buf[4] = v74;
                          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Raven: using simplified speed uncertainty formulation,speedVar,%{public}.2lf", buf, 0xCu);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A00A0 != -1)
                            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                          v167 = 134349056;
                          v168 = v74;
                          LODWORD(v119) = 12;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: using simplified speed uncertainty formulation,speedVar,%{public}.2lf", &v167, v119);
                          v116 = (char *)v115;
                          sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v115);
                          if (v116 != buf)
                            free(v116);
                        }
                        v74 = v66 * (v66 * *(double *)sub_100206B6C((uint64_t)&v173, 0, 0));
                      }
                      if ((*(uint64_t *)&v74 <= -1
                         || ((*(_QWORD *)&v74 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
                        && (unint64_t)(*(_QWORD *)&v74 - 1) >= 0xFFFFFFFFFFFFFLL)
                      {
                        if (qword_1022A00A0 != -1)
                          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                        v104 = qword_1022A00A8;
                        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134349056;
                          *(double *)&buf[4] = v74;
                          _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "Raven: client speed uncertainty invalid,speedVar,%{public}.2lf", buf, 0xCu);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A00A0 != -1)
                            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                          v167 = 134349056;
                          v168 = v74;
                          LODWORD(v119) = 12;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: client speed uncertainty invalid,speedVar,%{public}.2lf", &v167, v119);
                          v118 = (char *)v117;
                          sub_100512490("Generic", 1, 0, 0, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v117);
                          if (v118 != buf)
                            free(v118);
                        }
                        v78 = -1.0;
                        v124 = -1.0;
                      }
                      else
                      {
                        v124 = v69;
                        v78 = sqrt(v74);
                      }
                    }
                    else
                    {
                      if (qword_1022A00A0 != -1)
                        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                      v100 = qword_1022A00A8;
                      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 134283521;
                        *(double *)&buf[4] = v66 * v68;
                        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "Raven: client speed invalid,speed,%{private}.2lf", buf, 0xCu);
                      }
                      v101 = sub_1001BFF7C(115, 0);
                      v78 = -1.0;
                      v124 = -1.0;
                      if (v101)
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A00A0 != -1)
                          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                        *(_DWORD *)v169 = 134283521;
                        *(double *)&v169[4] = v66 * v68;
                        LODWORD(v119) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: client speed invalid,speed,%{private}.2lf", v169, v119);
                        v103 = (char *)v102;
                        sub_100512490("Generic", 1, 0, 0, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v102);
                        if (v103 != buf)
                          free(v103);
                        v78 = -1.0;
                      }
                    }
                    v123 = v78;
                    v105 = atan2(v135, v136) * 57.2957795;
                    if (v105 >= 0.0)
                      v106 = v105;
                    else
                      v106 = v105 + 360.0;
                    v125 = -1.0;
                    if ((*(_QWORD *)&v106 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                      goto LABEL_234;
                    v189 = 0x400000001;
                    *(_QWORD *)buf = off_10217C8F8;
                    *(_OWORD *)&buf[8] = xmmword_101C1F5F0;
                    v190 = &v191;
                    *(_QWORD *)sub_100206B6C((uint64_t)buf, 0, 0) = 0;
                    *(double *)sub_100206B6C((uint64_t)buf, 0, 1) = v120 * v67;
                    *(double *)sub_100206B6C((uint64_t)buf, 0, 2) = -(v121 * v67);
                    *(_QWORD *)sub_100206B6C((uint64_t)buf, 0, 3) = 0;
                    sub_100C909E4((uint64_t)buf, (uint64_t)&v173, (uint64_t)v169);
                    sub_100C90A4C((uint64_t)buf, &v167);
                    sub_100C90984((uint64_t)v169, (uint64_t)&v167, (uint64_t)v131);
                    if (v132 != 1)
                      __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
                    v107 = *v133;
                    if ((*(_QWORD *)v133 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v107 <= 0.0)
                    {
LABEL_234:
                      v65 = -1.0;
                    }
                    else
                    {
                      v65 = fmin(sqrt(v107) * 57.2957795, 180.0);
                      v125 = v106;
                    }
                    v46 = *(double *)&v12 * 57.2957795;
                    v56 = v126;
                  }
                }
                goto LABEL_171;
              }
            }
          }
        }
        else
        {
          v123 = -1.0;
          v124 = -1.0;
        }
        v65 = -1.0;
LABEL_171:
        v79 = vcvtmd_s64_f64(*(double *)(a2 + 216) * 100.0);
        if (v79 >= 95)
          v80 = 95;
        else
          v80 = v79;
        if (*(_BYTE *)(a2 + 1184))
        {
          v81 = v56;
          v82 = *(_QWORD *)(a2 + 1192);
          v83 = *(double *)(a2 + 1200);
          *(_QWORD *)v140 = *(_QWORD *)(a3 + 192);
          *(double *)buf = *(double *)(a2 + 1176) + (double)*(uint64_t *)(a2 + 1168);
          v8 = sub_100AD25A0(a1 + 4480, (double *)buf, (double *)v140);
          if (v8)
          {
            v130 = v47;
            v84 = *(_QWORD *)(a2 + 1168);
            v127 = *(double *)(a2 + 1176);
            v85 = *(unsigned __int8 *)(a2 + 2400);
            if (v85 >= 3)
            {
              if (qword_1022A00A0 != -1)
                dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
              v86 = qword_1022A00A8;
              if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "Raven: Received unhandled position context state type", buf, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00A0 != -1)
                  dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
                *(_WORD *)v179 = 0;
                LODWORD(v119) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: Received unhandled position context state type", v179, v119);
                v114 = (char *)v113;
                sub_100512490("Generic", 1, 0, 0, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v113);
                if (v114 != buf)
                  free(v114);
              }
              LOBYTE(v85) = 0;
            }
            v87 = *(_QWORD *)(a2 + 2408);
            v88 = *(_QWORD *)(a2 + 2416);
            *(_DWORD *)a3 = 0xFFFF;
            *(double *)(a3 + 4) = v122;
            *(double *)(a3 + 12) = v46;
            *(double *)(a3 + 20) = v14;
            *(double *)(a3 + 28) = v81;
            *(double *)(a3 + 36) = v128;
            *(double *)(a3 + 44) = v124;
            *(double *)(a3 + 52) = v123;
            *(double *)(a3 + 60) = v125;
            *(double *)(a3 + 68) = v65;
            *(double *)(a3 + 76) = Current;
            *(_DWORD *)(a3 + 84) = v80 & ~(v80 >> 31);
            *(_QWORD *)(a3 + 88) = 0x4024000000000000;
            *(_DWORD *)(a3 + 96) = 1;
            *(double *)(a3 + 100) = v122;
            *(double *)(a3 + 108) = v46;
            *(double *)(a3 + 116) = v125;
            *(_QWORD *)(a3 + 128) = 0x100000032;
            *(_DWORD *)(a3 + 136) = 1;
            v89 = *(_QWORD *)v140;
            *(double *)(a3 + 184) = v83 + (double)v82;
            *(_QWORD *)(a3 + 192) = v89;
            *(float32x2_t *)(a3 + 200) = vcvt_f32_f64(vmulq_f64(vsqrtq_f64(v129), (float64x2_t)vdupq_n_s64(0x400394FC4A554B4FuLL)));
            v90 = v130;
            *(float *)(a3 + 208) = v90;
            *(_DWORD *)(a3 + 472) = v156;
            v91 = v157;
            *(float *)(a3 + 476) = v91;
            *(double *)(a3 + 504) = v127 + (double)v84;
            *(_BYTE *)(a3 + 736) = v85;
            *(_QWORD *)(a3 + 744) = v87;
            *(_QWORD *)(a3 + 752) = v88;
            *(_BYTE *)(a3 + 792) = 1;
          }
          else
          {
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v94 = qword_1022A00A8;
            if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed in mach time conversion.", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00A0 != -1)
                dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
              *(_WORD *)v179 = 0;
              LODWORD(v119) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed in mach time conversion.", v179, v119);
              v96 = (char *)v95;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v95);
              if (v96 != buf)
                free(v96);
            }
          }
          goto LABEL_18;
        }
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v92 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: iOS time not valid", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
        {
LABEL_17:
          v8 = 0;
LABEL_18:
          cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&v158);
          return v8;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        *(_WORD *)v140 = 0;
        LODWORD(v119) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed: iOS time not valid", v140, v119);
        v36 = (char *)v93;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v93);
LABEL_204:
        if (v36 != buf)
          free(v36);
        goto LABEL_17;
      }
      v157 = *(float *)v169;
      sub_100168414(*(_QWORD *)(a1 + 4552), 1, *(float *)v169, Current);
      sub_10015F970(*(_QWORD *)(a1 + 4552), &v157, &v156, Current);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v55 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283777;
        *(double *)&buf[4] = v157;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v156;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "Raven: DEM,DMA,undulation,%{private}.2lf,undulationModel,%{public}d", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_118:
        v56 = *((double *)&v12 + 1) - v157;
        v57 = 1;
        goto LABEL_125;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      *(_DWORD *)v179 = 134283777;
      *(double *)&v179[4] = v157;
      *(_WORD *)&v179[12] = 1026;
      *(_DWORD *)&v179[14] = v156;
      LODWORD(v119) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: DEM,DMA,undulation,%{private}.2lf,undulationModel,%{public}d", v179, v119);
      v53 = (char *)v112;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v112);
    }
    if (v53 != buf)
      free(v53);
    goto LABEL_118;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v7 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed due to invalid user position.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    *(_WORD *)v140 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Conversion to client location failed due to invalid user position.", v140, 2);
    v99 = (char *)v98;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v98);
    if (v99 != buf)
      free(v99);
  }
  return 0;
}

void sub_100C8FFD8(_Unwind_Exception *a1)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&STACK[0x440]);
  _Unwind_Resume(a1);
}

BOOL sub_100C900E0(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a1 + 96))
  {
    sub_100079AC4(a2, 3, 3);
    v5 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 0, 0) = v5;
    v6 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 0, 1) = v6;
    v7 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 0, 2) = v7;
    v8 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 1, 0) = v8;
    v9 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 1, 1) = v9;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 1, 2) = v10;
    v11 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 2, 0) = v11;
    v12 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 2, 1) = v12;
    v13 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)sub_100206B6C((uint64_t)a2, 2, 2) = v13;
  }
  return v2 != 0;
}

BOOL sub_100C90208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t (**v10)();
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = a1 + 16;
    v20 = 0x300000003;
    v18 = off_102167280;
    v19 = xmmword_101C05640;
    v21 = &v22;
    sub_10021BDF0(a1 + 16, a2, (uint64_t)&v18);
    v8 = *(_DWORD *)(a1 + 24);
    v7 = *(_DWORD *)(a1 + 28);
    v15 = 0x300000003;
    v10 = off_102167280;
    if (v7 > 3)
      sub_1019184AC(422, "this->max_num_rows_ >= num_rows");
    if (v8 >= 4)
      sub_1019184AC(423, "this->max_num_cols_ >= num_cols");
    v11 = v7;
    v12 = v8;
    v13 = v8 * v7;
    v14 = v7;
    v16 = &v17;
    sub_100AA0214(v6, &v10);
    v25 = 0x300000003;
    v23 = off_102167280;
    v24 = xmmword_101C05640;
    v26 = &v27;
    sub_10021BDF0((uint64_t)&v18, (uint64_t)&v10, (uint64_t)&v23);
    sub_10007A0C8(a3, (uint64_t)&v23);
  }
  return v3 != 0;
}

BOOL sub_100C90344(uint64_t a1, double *a2, double *a3)
{
  int v3;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = a1 + 16;
    v7 = sub_100208094(a1 + 16, 0, 0);
    v8 = *a2;
    v9 = sub_100208094(v6, 0, 1) * a2[1] + v7 * v8;
    *a3 = v9 + sub_100208094(v6, 0, 2) * a2[2];
    v10 = sub_100208094(v6, 1, 0);
    v11 = *a2;
    v12 = sub_100208094(v6, 1, 1) * a2[1] + v10 * v11;
    a3[1] = v12 + sub_100208094(v6, 1, 2) * a2[2];
    v13 = sub_100208094(v6, 2, 0);
    v14 = *a2;
    v15 = sub_100208094(v6, 2, 1) * a2[1] + v13 * v14;
    a3[2] = v15 + sub_100208094(v6, 2, 2) * a2[2];
  }
  return v3 != 0;
}

uint64_t sub_100C90478(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_BYTE *)(a1 + 176) || !*(_BYTE *)(a1 + 177))
    return 0;
  sub_100079AC4(a2, 4, 4);
  v4 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 0, 0) = v4;
  v5 = *(_QWORD *)(a1 + 224);
  v6 = 1;
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 0, 1) = v5;
  v7 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 0, 2) = v7;
  v8 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 0, 3) = v8;
  v9 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 1, 0) = v9;
  v10 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 1, 1) = v10;
  v11 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 1, 2) = v11;
  v12 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 1, 3) = v12;
  v13 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 2, 0) = v13;
  v14 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 2, 1) = v14;
  v15 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 2, 2) = v15;
  v16 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 2, 3) = v16;
  v17 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 3, 0) = v17;
  v18 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 3, 1) = v18;
  v19 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 3, 2) = v19;
  v20 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)sub_100206B6C((uint64_t)a2, 3, 3) = v20;
  return v6;
}

_DWORD *sub_100C90658@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100C96A58((uint64_t)a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  return sub_100C969B0(a1, a2);
}

void sub_100C90690(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1021673B0;
  _Unwind_Resume(a1);
}

_DWORD *sub_100C906A4@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x300000001;
  *(_QWORD *)a3 = off_10217C728;
  *(_OWORD *)(a3 + 8) = xmmword_101C05660;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  return sub_100AA0390(a1, a2, (_DWORD *)a3);
}

void sub_100C906F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1021673B0;
  _Unwind_Resume(a1);
}

uint64_t sub_100C9070C@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  const char *v7;
  int v8;

  if ((a1 & 0x80000000) != 0)
    sub_101924804();
  if ((a2 & 0x80000000) != 0)
    sub_10192482C();
  sub_100C9776C((uint64_t)a3, a1, a2);
  if (a3[6] < a1)
  {
    v7 = "nr <= Z.MaxNumRows()";
    v8 = 3363;
    goto LABEL_10;
  }
  if (a3[7] < a2)
  {
    v7 = "nc <= Z.MaxNumCols()";
    v8 = 3364;
LABEL_10:
    __assert_rtn("Zeros", "cnmatrixbase.h", v8, v7);
  }
  sub_100079AC4(a3, a1, a2);
  return sub_100C97818((uint64_t)a3, 0.0);
}

void sub_100C907C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

uint64_t sub_100C907D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 8))
    sub_101918798();
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
    sub_101918770();
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i != v5; ++i)
    {
      if ((_DWORD)v2)
      {
        for (j = 0; j != v2; ++j)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v6 + j));
          *(_QWORD *)sub_100A9EB8C(*(_QWORD *)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * i)) = v9;
          *(_QWORD *)sub_100206B6C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

_QWORD *sub_100C908AC(_QWORD *result)
{
  result[22] = off_1021673B0;
  result[15] = off_1021673B0;
  *result = off_102155D60;
  return result;
}

void sub_100C908D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x400000004;
  *(_QWORD *)a3 = off_10217C6E0;
  *(_OWORD *)(a3 + 8) = xmmword_101C1F5E0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_10021BDF0(a1, a2, a3);
}

void sub_100C90924(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

double *sub_100C90938@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100C9776C((uint64_t)a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  return sub_100AA0214(a1, a2);
}

void sub_100C90970(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

__n128 sub_100C90984@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)(a3 + 24) = 0x100000001;
  *(_QWORD *)a3 = off_102167548;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  *(_OWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_10021BDF0(a1, a2, a3);
  return result;
}

void sub_100C909D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

void sub_100C909E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x400000001;
  *(_QWORD *)a3 = off_10217C8F8;
  *(_OWORD *)(a3 + 8) = xmmword_101C1F5F0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_10021BDF0(a1, a2, a3);
}

void sub_100C90A38(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

double *sub_100C90A4C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100C97A2C((uint64_t)a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  return sub_100AA0214(a1, a2);
}

void sub_100C90A84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

void sub_100C90A98(uint64_t a1, int a2)
{
  double v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  double v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  double v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  double v20;

  v4 = sub_1001FCBB4();
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v5 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (v4 - *(double *)(a1 + 32)) * 1000.0;
    *(_DWORD *)buf = 67240448;
    v18 = a2;
    v19 = 2050;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGLS,Raven,CLRavenController,Reset,pauseResetAndFreeRavenSupervisorWithCompletion,success,%{public}d,time,%{public}.1lfms", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v8 = (v4 - *(double *)(a1 + 32)) * 1000.0;
    v14[0] = 67240448;
    v14[1] = a2;
    v15 = 2050;
    v16 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLGLS,Raven,CLRavenController,Reset,pauseResetAndFreeRavenSupervisorWithCompletion,success,%{public}d,time,%{public}.1lfms", v14, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::Reset()_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if ((a2 & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGLS,Raven,Failed to pause, reset, and free raven supervisor", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v14[0]) = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLGLS,Raven,Failed to pause, reset, and free raven supervisor", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLRavenController::Reset()_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_100C90DC0(uint64_t a1, unsigned int a2, double a3, double a4)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  char v8;
  const char *v9;
  char v10;
  const char *v11;
  int *v12;
  NSObject *v13;
  int v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  int v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  if (a2 <= 1)
  {
    v5 = a1 + 32 * a2;
    ++*(_DWORD *)v5;
    v6 = *(double *)(v5 + 16);
    if (v6 >= a4)
      v6 = a4;
    *(double *)(v5 + 8) = *(double *)(v5 + 8) + a4;
    *(double *)(v5 + 16) = v6;
    if (*(double *)(v5 + 24) > a4)
      a4 = *(double *)(v5 + 24);
    *(double *)(v5 + 24) = a4;
    if (a3 - *(double *)(a1 + 64) > 30.0)
    {
      v7 = 0;
      v8 = 1;
      *(double *)(a1 + 64) = a3;
      v9 = "unk";
      do
      {
        v10 = v8;
        if ((v8 & 1) != 0)
          v11 = "accel";
        else
          v11 = v9;
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v12 = (int *)(a1 + 32 * v7);
        v13 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
        {
          v14 = *v12;
          v15 = (double *)(a1 + 32 * v7);
          if (*v12)
            v16 = v15[1] * 1000.0 / (double)v14;
          else
            v16 = 0.0;
          v17 = v15[2] * 1000.0;
          v18 = v15[3] * 1000.0;
          *(_DWORD *)buf = 136447234;
          v39 = v11;
          v40 = 1026;
          v41 = v14;
          v42 = 2050;
          v43 = v17;
          v44 = 2050;
          v45 = v16;
          v46 = 2050;
          v47 = v18;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "IfcTelem,%{public}s,count,%{public}d,minAgeMs,%{public}.1f,meanAgeMs,%{public}.1f,maxAgeMs,%{public}.1f", buf, 0x30u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v20 = *v12;
          v21 = (double *)(a1 + 32 * v7);
          if (*v12)
            v22 = v21[1] * 1000.0 / (double)v20;
          else
            v22 = 0.0;
          v23 = v21[2] * 1000.0;
          v24 = v21[3] * 1000.0;
          v28 = 136447234;
          v29 = v11;
          v30 = 1026;
          v31 = v20;
          v32 = 2050;
          v33 = v23;
          v34 = 2050;
          v35 = v22;
          v36 = 2050;
          v37 = v24;
          LODWORD(v27) = 48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "IfcTelem,%{public}s,count,%{public}d,minAgeMs,%{public}.1f,meanAgeMs,%{public}.1f,maxAgeMs,%{public}.1f", &v28, v27);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 2, "void CLRavenController::InterfaceTelemeter::tick(CLRavenController::InterfaceTelemeter::MessageType, double, double)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
        v8 = 0;
        *v12 = 0;
        v19 = a1 + 32 * v7;
        *(_OWORD *)(v19 + 8) = xmmword_101BBE610;
        *(_QWORD *)(v19 + 24) = 0xBFF0000000000000;
        v9 = "gyro";
        v7 = 1;
      }
      while ((v10 & 1) != 0);
    }
  }
}

std::string *sub_100C91100(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  *(_DWORD *)(a4 + 52) |= 2u;
  v6 = *(_QWORD *)(a4 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 492) |= 0x10u;
  v7 = *(_QWORD *)(v6 + 296);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 28) |= 2u;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    operator new();
  sub_10017552C((uint64_t)a2, a4);
  *(_DWORD *)(v8 + 52) |= 1u;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    operator new();
  if (!sub_10137A734(a2, v9))
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v10 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Error: Failed to convert raven platform info receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert raven platform info receipt time to protobuf", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeRavenPlatformInfo(const CLUtils::Timestamp &, const raven::RavenPlatformInfo &, CLP::LogEntry::LogEntry &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  return sub_10137FA50(a3, v8);
}

void sub_100C913A0()
{
  operator delete();
}

BOOL sub_100C91410(uint64_t a1)
{
  return *(_BYTE *)(a1 + 4663)
      && (*(_BYTE *)(a1 + 4664) || *(_QWORD *)(a1 + 312))
      && *(_QWORD *)(a1 + 4736) != a1 + 4688;
}

uint64_t sub_100C91450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void **v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void **v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int RavenSolution;
  NSObject *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void **v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  NSObject *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  void *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  NSObject *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  void **v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  const char *v174;
  char *v175;
  const char *v176;
  char *v177;
  const char *v178;
  char *v179;
  const char *v180;
  char *v181;
  const char *v182;
  char *v183;
  uint64_t v184;
  int v185;
  double v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;
  _BYTE buf[32];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  _OWORD v198[2];
  _BYTE v199[513];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  char v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  __int128 __p;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  id v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  _OWORD v256[152];

  v4 = a1 + 4663;
  if (*(_BYTE *)(a1 + 4663) && (*(_BYTE *)(a1 + 4664) || *(_QWORD *)(a1 + 312)) && *(_QWORD *)(a1 + 4736) != a1 + 4688)
  {
    sub_100C95624((uint64_t)v256);
    if (*(_BYTE *)(v4 + 1))
    {
      if (!sub_100C929F0(a1, (uint64_t)v256, 0, 0))
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v7 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLGAS,Raven,GetRavenSolutionFromService,could not retrieve latest Raven solution", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          LOWORD(v185) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "CLGAS,Raven,GetRavenSolutionFromService,could not retrieve latest Raven solution", &v185, 2);
          v179 = (char *)v178;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v178);
          if (v179 != buf)
            free(v179);
        }
        sub_100129CA0((uint64_t)buf);
        v8 = v197;
        *(_OWORD *)(a2 + 96) = v196;
        *(_OWORD *)(a2 + 112) = v8;
        *(_OWORD *)(a2 + 128) = v198[0];
        *(_OWORD *)(a2 + 140) = *(_OWORD *)((char *)v198 + 12);
        v9 = v193;
        *(_OWORD *)(a2 + 32) = v192;
        *(_OWORD *)(a2 + 48) = v9;
        v10 = v195;
        *(_OWORD *)(a2 + 64) = v194;
        *(_OWORD *)(a2 + 80) = v10;
        v11 = *(_OWORD *)&buf[16];
        *(_OWORD *)a2 = *(_OWORD *)buf;
        *(_OWORD *)(a2 + 16) = v11;
        memcpy((void *)(a2 + 160), v199, 0x201uLL);
        sub_1002B7674(a2 + 680, &v200);
        v12 = v206;
        *(_OWORD *)(a2 + 760) = v205;
        *(_OWORD *)(a2 + 776) = v12;
        *(_BYTE *)(a2 + 792) = v207;
        v13 = v202;
        *(_OWORD *)(a2 + 696) = v201;
        *(_OWORD *)(a2 + 712) = v13;
        v14 = v204;
        *(_OWORD *)(a2 + 728) = v203;
        *(_OWORD *)(a2 + 744) = v14;
        sub_1002B7674(a2 + 800, &v208);
        v15 = v212;
        *(_OWORD *)(a2 + 848) = v211;
        *(_OWORD *)(a2 + 864) = v15;
        *(_OWORD *)(a2 + 880) = v213;
        v16 = v210;
        *(_OWORD *)(a2 + 816) = v209;
        *(_OWORD *)(a2 + 832) = v16;
        *(_QWORD *)(a2 + 896) = v214;
        v17 = (void **)(a2 + 904);
        if (*(char *)(a2 + 927) < 0)
          operator delete(*v17);
        *(_QWORD *)(a2 + 920) = v216;
        *(_OWORD *)v17 = __p;
        HIBYTE(v216) = 0;
        LOBYTE(__p) = 0;
        *(_OWORD *)(a2 + 1104) = v228;
        *(_OWORD *)(a2 + 1120) = v229;
        *(_OWORD *)(a2 + 1136) = v230;
        *(_QWORD *)(a2 + 1152) = v231;
        *(_OWORD *)(a2 + 1040) = v224;
        *(_OWORD *)(a2 + 1056) = v225;
        *(_OWORD *)(a2 + 1072) = v226;
        *(_OWORD *)(a2 + 1088) = v227;
        v18 = v222;
        *(_OWORD *)(a2 + 992) = v221;
        *(_OWORD *)(a2 + 1008) = v18;
        *(_OWORD *)(a2 + 1024) = v223;
        v19 = v218;
        *(_OWORD *)(a2 + 928) = v217;
        *(_OWORD *)(a2 + 944) = v19;
        v20 = v220;
        *(_OWORD *)(a2 + 960) = v219;
        *(_OWORD *)(a2 + 976) = v20;
        sub_1002B7674(a2 + 1160, &v232);
        v21 = v240;
        *(_OWORD *)(a2 + 1272) = v239;
        *(_OWORD *)(a2 + 1288) = v21;
        *(_OWORD *)(a2 + 1304) = v241;
        v22 = v236;
        *(_OWORD *)(a2 + 1208) = v235;
        *(_OWORD *)(a2 + 1224) = v22;
        v23 = v238;
        *(_OWORD *)(a2 + 1240) = v237;
        *(_OWORD *)(a2 + 1256) = v23;
        v24 = v234;
        *(_OWORD *)(a2 + 1176) = v233;
        *(_OWORD *)(a2 + 1192) = v24;
        v25 = *(void **)(a2 + 1320);
        *(_QWORD *)(a2 + 1320) = v242;
        v242 = 0;

        *(_OWORD *)(a2 + 1472) = v252;
        *(_OWORD *)(a2 + 1488) = v253;
        *(_OWORD *)(a2 + 1504) = v254;
        *(_QWORD *)(a2 + 1520) = v255;
        *(_OWORD *)(a2 + 1408) = v248;
        *(_OWORD *)(a2 + 1424) = v249;
        *(_OWORD *)(a2 + 1440) = v250;
        *(_OWORD *)(a2 + 1456) = v251;
        *(_OWORD *)(a2 + 1344) = v244;
        *(_OWORD *)(a2 + 1360) = v245;
        *(_OWORD *)(a2 + 1376) = v246;
        *(_OWORD *)(a2 + 1392) = v247;
        *(_OWORD *)(a2 + 1328) = v243;

        v26 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
        if (*((_QWORD *)&v232 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (SHIBYTE(v216) < 0)
          operator delete((void *)__p);
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
        if (*((_QWORD *)&v208 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
        if (!*((_QWORD *)&v200 + 1))
          goto LABEL_110;
        v33 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        goto LABEL_108;
      }
    }
    else
    {
      std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
      RavenSolution = raven::RavenSupervisor::GetRavenSolution(*(raven::RavenSupervisor **)(a1 + 312), (raven::RavenSolutionEvent *)v256);
      std::timed_mutex::unlock((std::timed_mutex *)(a1 + 320));
      if (RavenSolution)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v65 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "Raven: could not retrieve latest Raven solution", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          LOWORD(v185) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: could not retrieve latest Raven solution", &v185, 2);
          v181 = (char *)v180;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v180);
          if (v181 != buf)
            free(v181);
        }
        sub_100129CA0((uint64_t)buf);
        v66 = v197;
        *(_OWORD *)(a2 + 96) = v196;
        *(_OWORD *)(a2 + 112) = v66;
        *(_OWORD *)(a2 + 128) = v198[0];
        *(_OWORD *)(a2 + 140) = *(_OWORD *)((char *)v198 + 12);
        v67 = v193;
        *(_OWORD *)(a2 + 32) = v192;
        *(_OWORD *)(a2 + 48) = v67;
        v68 = v195;
        *(_OWORD *)(a2 + 64) = v194;
        *(_OWORD *)(a2 + 80) = v68;
        v69 = *(_OWORD *)&buf[16];
        *(_OWORD *)a2 = *(_OWORD *)buf;
        *(_OWORD *)(a2 + 16) = v69;
        memcpy((void *)(a2 + 160), v199, 0x201uLL);
        sub_1002B7674(a2 + 680, &v200);
        v70 = v206;
        *(_OWORD *)(a2 + 760) = v205;
        *(_OWORD *)(a2 + 776) = v70;
        *(_BYTE *)(a2 + 792) = v207;
        v71 = v202;
        *(_OWORD *)(a2 + 696) = v201;
        *(_OWORD *)(a2 + 712) = v71;
        v72 = v204;
        *(_OWORD *)(a2 + 728) = v203;
        *(_OWORD *)(a2 + 744) = v72;
        sub_1002B7674(a2 + 800, &v208);
        v73 = v212;
        *(_OWORD *)(a2 + 848) = v211;
        *(_OWORD *)(a2 + 864) = v73;
        *(_OWORD *)(a2 + 880) = v213;
        v74 = v210;
        *(_OWORD *)(a2 + 816) = v209;
        *(_OWORD *)(a2 + 832) = v74;
        *(_QWORD *)(a2 + 896) = v214;
        v75 = (void **)(a2 + 904);
        if (*(char *)(a2 + 927) < 0)
          operator delete(*v75);
        *(_QWORD *)(a2 + 920) = v216;
        *(_OWORD *)v75 = __p;
        HIBYTE(v216) = 0;
        LOBYTE(__p) = 0;
        *(_OWORD *)(a2 + 1104) = v228;
        *(_OWORD *)(a2 + 1120) = v229;
        *(_OWORD *)(a2 + 1136) = v230;
        *(_QWORD *)(a2 + 1152) = v231;
        *(_OWORD *)(a2 + 1040) = v224;
        *(_OWORD *)(a2 + 1056) = v225;
        *(_OWORD *)(a2 + 1072) = v226;
        *(_OWORD *)(a2 + 1088) = v227;
        v76 = v222;
        *(_OWORD *)(a2 + 992) = v221;
        *(_OWORD *)(a2 + 1008) = v76;
        *(_OWORD *)(a2 + 1024) = v223;
        v77 = v218;
        *(_OWORD *)(a2 + 928) = v217;
        *(_OWORD *)(a2 + 944) = v77;
        v78 = v220;
        *(_OWORD *)(a2 + 960) = v219;
        *(_OWORD *)(a2 + 976) = v78;
        sub_1002B7674(a2 + 1160, &v232);
        v79 = v240;
        *(_OWORD *)(a2 + 1272) = v239;
        *(_OWORD *)(a2 + 1288) = v79;
        *(_OWORD *)(a2 + 1304) = v241;
        v80 = v236;
        *(_OWORD *)(a2 + 1208) = v235;
        *(_OWORD *)(a2 + 1224) = v80;
        v81 = v238;
        *(_OWORD *)(a2 + 1240) = v237;
        *(_OWORD *)(a2 + 1256) = v81;
        v82 = v234;
        *(_OWORD *)(a2 + 1176) = v233;
        *(_OWORD *)(a2 + 1192) = v82;
        v83 = *(void **)(a2 + 1320);
        *(_QWORD *)(a2 + 1320) = v242;
        v242 = 0;

        *(_OWORD *)(a2 + 1472) = v252;
        *(_OWORD *)(a2 + 1488) = v253;
        *(_OWORD *)(a2 + 1504) = v254;
        *(_QWORD *)(a2 + 1520) = v255;
        *(_OWORD *)(a2 + 1408) = v248;
        *(_OWORD *)(a2 + 1424) = v249;
        *(_OWORD *)(a2 + 1440) = v250;
        *(_OWORD *)(a2 + 1456) = v251;
        *(_OWORD *)(a2 + 1344) = v244;
        *(_OWORD *)(a2 + 1360) = v245;
        *(_OWORD *)(a2 + 1376) = v246;
        *(_OWORD *)(a2 + 1392) = v247;
        *(_OWORD *)(a2 + 1328) = v243;

        v84 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
        if (*((_QWORD *)&v232 + 1))
        {
          v85 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        if (SHIBYTE(v216) < 0)
          operator delete((void *)__p);
        v87 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
        if (*((_QWORD *)&v208 + 1))
        {
          v88 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
        if (!*((_QWORD *)&v200 + 1))
          goto LABEL_110;
        v90 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
        do
          v34 = __ldaxr(v90);
        while (__stlxr(v34 - 1, v90));
        goto LABEL_108;
      }
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v91 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = *((double *)&v256[73] + 1) + (double)*(uint64_t *)&v256[73];
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = BYTE1(v256[13]);
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = LOBYTE(v256[13]);
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "Raven: obtained latest Raven solution with time %{public}.3lf and health %{public}d from estimator %{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v185 = 134349568;
      v186 = *((double *)&v256[73] + 1) + (double)*(uint64_t *)&v256[73];
      v187 = 1026;
      v188 = BYTE1(v256[13]);
      v189 = 1026;
      v190 = LOBYTE(v256[13]);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: obtained latest Raven solution with time %{public}.3lf and health %{public}d from estimator %{public}d", &v185, 24);
      v177 = (char *)v176;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v176);
      if (v177 != buf)
        free(v177);
    }
    v92 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v92;
    v93 = *(_OWORD *)(a3 + 32);
    v94 = *(_OWORD *)(a3 + 48);
    v95 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 80) = v95;
    *(_OWORD *)(a2 + 32) = v93;
    *(_OWORD *)(a2 + 48) = v94;
    v96 = *(_OWORD *)(a3 + 96);
    v97 = *(_OWORD *)(a3 + 112);
    v98 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 140) = *(_OWORD *)(a3 + 140);
    *(_OWORD *)(a2 + 112) = v97;
    *(_OWORD *)(a2 + 128) = v98;
    *(_OWORD *)(a2 + 96) = v96;
    memcpy((void *)(a2 + 160), (const void *)(a3 + 160), 0x201uLL);
    sub_100349198((_QWORD *)(a2 + 680), (uint64_t *)(a3 + 680));
    v99 = (_OWORD *)(a2 + 696);
    v101 = *(_OWORD *)(a3 + 712);
    v100 = *(_OWORD *)(a3 + 728);
    *(_OWORD *)(a2 + 696) = *(_OWORD *)(a3 + 696);
    *(_OWORD *)(a2 + 712) = v101;
    *(_OWORD *)(a2 + 728) = v100;
    v103 = *(_OWORD *)(a3 + 760);
    v102 = *(_OWORD *)(a3 + 776);
    v104 = *(_OWORD *)(a3 + 744);
    *(_BYTE *)(a2 + 792) = *(_BYTE *)(a3 + 792);
    *(_OWORD *)(a2 + 760) = v103;
    *(_OWORD *)(a2 + 776) = v102;
    *(_OWORD *)(a2 + 744) = v104;
    if (sub_100C8DE80(a1, (uint64_t)v256, a2))
    {
      std::mutex::lock((std::mutex *)(a1 + 4400));
      memcpy((void *)(a1 + 448), (char *)v256 + 8, 0x971uLL);
      v105 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 2872) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 2888) = v105;
      v106 = *(_OWORD *)(a2 + 80);
      v108 = *(_OWORD *)(a2 + 32);
      v107 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 2936) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 2952) = v106;
      *(_OWORD *)(a1 + 2904) = v108;
      *(_OWORD *)(a1 + 2920) = v107;
      v110 = *(_OWORD *)(a2 + 112);
      v109 = *(_OWORD *)(a2 + 128);
      v111 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 3012) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 2984) = v110;
      *(_OWORD *)(a1 + 3000) = v109;
      *(_OWORD *)(a1 + 2968) = v111;
      memcpy((void *)(a1 + 3032), (const void *)(a2 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 3552), (uint64_t *)(a2 + 680));
      v113 = *(_OWORD *)(a2 + 712);
      v112 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 3568) = *v99;
      *(_OWORD *)(a1 + 3584) = v113;
      *(_OWORD *)(a1 + 3600) = v112;
      v115 = *(_OWORD *)(a2 + 760);
      v114 = *(_OWORD *)(a2 + 776);
      v116 = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 3616) = *(_OWORD *)(a2 + 744);
      *(_BYTE *)(a1 + 3664) = v116;
      *(_OWORD *)(a1 + 3648) = v114;
      *(_OWORD *)(a1 + 3632) = v115;
      sub_100349198((_QWORD *)(a1 + 3672), (uint64_t *)(a2 + 800));
      *(_OWORD *)(a1 + 3688) = *(_OWORD *)(a2 + 816);
      v117 = *(_OWORD *)(a2 + 880);
      v119 = *(_OWORD *)(a2 + 832);
      v118 = *(_OWORD *)(a2 + 848);
      *(_OWORD *)(a1 + 3736) = *(_OWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 3752) = v117;
      *(_OWORD *)(a1 + 3704) = v119;
      *(_OWORD *)(a1 + 3720) = v118;
      *(_QWORD *)(a1 + 3768) = *(_QWORD *)(a2 + 896);
      std::string::operator=((std::string *)(a1 + 3776), (const std::string *)(a2 + 904));
      v120 = *(_OWORD *)(a2 + 928);
      v121 = *(_OWORD *)(a2 + 960);
      *(_OWORD *)(a1 + 3816) = *(_OWORD *)(a2 + 944);
      *(_OWORD *)(a1 + 3832) = v121;
      *(_OWORD *)(a1 + 3800) = v120;
      v122 = *(_OWORD *)(a2 + 976);
      v123 = *(_OWORD *)(a2 + 992);
      v124 = *(_OWORD *)(a2 + 1024);
      *(_OWORD *)(a1 + 3880) = *(_OWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 3896) = v124;
      *(_OWORD *)(a1 + 3848) = v122;
      *(_OWORD *)(a1 + 3864) = v123;
      v125 = *(_OWORD *)(a2 + 1040);
      v126 = *(_OWORD *)(a2 + 1056);
      v127 = *(_OWORD *)(a2 + 1072);
      *(_OWORD *)(a1 + 3960) = *(_OWORD *)(a2 + 1088);
      *(_OWORD *)(a1 + 3944) = v127;
      *(_OWORD *)(a1 + 3928) = v126;
      *(_OWORD *)(a1 + 3912) = v125;
      v128 = *(_OWORD *)(a2 + 1104);
      v129 = *(_OWORD *)(a2 + 1120);
      v130 = *(_OWORD *)(a2 + 1136);
      *(_QWORD *)(a1 + 4024) = *(_QWORD *)(a2 + 1152);
      *(_OWORD *)(a1 + 4008) = v130;
      *(_OWORD *)(a1 + 3992) = v129;
      *(_OWORD *)(a1 + 3976) = v128;
      sub_100349198((_QWORD *)(a1 + 4032), (uint64_t *)(a2 + 1160));
      *(_OWORD *)(a1 + 4048) = *(_OWORD *)(a2 + 1176);
      v131 = *(_OWORD *)(a2 + 1224);
      v132 = *(_OWORD *)(a2 + 1240);
      v133 = *(_OWORD *)(a2 + 1208);
      *(_OWORD *)(a1 + 4064) = *(_OWORD *)(a2 + 1192);
      *(_OWORD *)(a1 + 4112) = v132;
      *(_OWORD *)(a1 + 4096) = v131;
      *(_OWORD *)(a1 + 4080) = v133;
      v134 = *(_OWORD *)(a2 + 1288);
      v135 = *(_OWORD *)(a2 + 1304);
      v136 = *(_OWORD *)(a2 + 1272);
      *(_OWORD *)(a1 + 4128) = *(_OWORD *)(a2 + 1256);
      *(_OWORD *)(a1 + 4176) = v135;
      *(_OWORD *)(a1 + 4160) = v134;
      *(_OWORD *)(a1 + 4144) = v136;
      v137 = *(void **)(a1 + 4192);
      *(_QWORD *)(a1 + 4192) = *(id *)(a2 + 1320);

      *(_OWORD *)(a1 + 4200) = *(_OWORD *)(a2 + 1328);
      v138 = *(_OWORD *)(a2 + 1344);
      v139 = *(_OWORD *)(a2 + 1360);
      v140 = *(_OWORD *)(a2 + 1376);
      *(_OWORD *)(a1 + 4264) = *(_OWORD *)(a2 + 1392);
      *(_OWORD *)(a1 + 4248) = v140;
      *(_OWORD *)(a1 + 4232) = v139;
      *(_OWORD *)(a1 + 4216) = v138;
      v141 = *(_OWORD *)(a2 + 1408);
      v142 = *(_OWORD *)(a2 + 1424);
      v143 = *(_OWORD *)(a2 + 1440);
      *(_OWORD *)(a1 + 4328) = *(_OWORD *)(a2 + 1456);
      *(_OWORD *)(a1 + 4312) = v143;
      *(_OWORD *)(a1 + 4296) = v142;
      *(_OWORD *)(a1 + 4280) = v141;
      v144 = *(_OWORD *)(a2 + 1472);
      v145 = *(_OWORD *)(a2 + 1488);
      v146 = *(_OWORD *)(a2 + 1504);
      *(_QWORD *)(a1 + 4392) = *(_QWORD *)(a2 + 1520);
      *(_OWORD *)(a1 + 4376) = v146;
      *(_OWORD *)(a1 + 4360) = v145;
      *(_OWORD *)(a1 + 4344) = v144;
      std::mutex::unlock((std::mutex *)(a1 + 4400));
      v63 = 1;
LABEL_111:
      raven::RavenSolutionEvent::~RavenSolutionEvent((raven::RavenSolutionEvent *)v256);
      return v63;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v147 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_INFO, "Raven: could not convert latest Raven solution to client location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v185) = 0;
      LODWORD(v184) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: could not convert latest Raven solution to client location", &v185, v184);
      v183 = (char *)v182;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v182);
      if (v183 != buf)
        free(v183);
    }
    sub_100129CA0((uint64_t)buf);
    v148 = v197;
    *(_OWORD *)(a2 + 96) = v196;
    *(_OWORD *)(a2 + 112) = v148;
    *(_OWORD *)(a2 + 128) = v198[0];
    *(_OWORD *)(a2 + 140) = *(_OWORD *)((char *)v198 + 12);
    v149 = v193;
    *(_OWORD *)(a2 + 32) = v192;
    *(_OWORD *)(a2 + 48) = v149;
    v150 = v195;
    *(_OWORD *)(a2 + 64) = v194;
    *(_OWORD *)(a2 + 80) = v150;
    v151 = *(_OWORD *)&buf[16];
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 16) = v151;
    memcpy((void *)(a2 + 160), v199, 0x201uLL);
    sub_1002B7674(a2 + 680, &v200);
    v152 = v206;
    *(_OWORD *)(a2 + 760) = v205;
    *(_OWORD *)(a2 + 776) = v152;
    *(_BYTE *)(a2 + 792) = v207;
    v153 = v202;
    *v99 = v201;
    *(_OWORD *)(a2 + 712) = v153;
    v154 = v204;
    *(_OWORD *)(a2 + 728) = v203;
    *(_OWORD *)(a2 + 744) = v154;
    sub_1002B7674(a2 + 800, &v208);
    v155 = v212;
    *(_OWORD *)(a2 + 848) = v211;
    *(_OWORD *)(a2 + 864) = v155;
    *(_OWORD *)(a2 + 880) = v213;
    v156 = v210;
    *(_OWORD *)(a2 + 816) = v209;
    *(_OWORD *)(a2 + 832) = v156;
    *(_QWORD *)(a2 + 896) = v214;
    v157 = (void **)(a2 + 904);
    if (*(char *)(a2 + 927) < 0)
      operator delete(*v157);
    *(_QWORD *)(a2 + 920) = v216;
    *(_OWORD *)v157 = __p;
    HIBYTE(v216) = 0;
    LOBYTE(__p) = 0;
    *(_OWORD *)(a2 + 1104) = v228;
    *(_OWORD *)(a2 + 1120) = v229;
    *(_OWORD *)(a2 + 1136) = v230;
    *(_QWORD *)(a2 + 1152) = v231;
    *(_OWORD *)(a2 + 1040) = v224;
    *(_OWORD *)(a2 + 1056) = v225;
    *(_OWORD *)(a2 + 1072) = v226;
    *(_OWORD *)(a2 + 1088) = v227;
    v158 = v222;
    *(_OWORD *)(a2 + 992) = v221;
    *(_OWORD *)(a2 + 1008) = v158;
    *(_OWORD *)(a2 + 1024) = v223;
    v159 = v218;
    *(_OWORD *)(a2 + 928) = v217;
    *(_OWORD *)(a2 + 944) = v159;
    v160 = v220;
    *(_OWORD *)(a2 + 960) = v219;
    *(_OWORD *)(a2 + 976) = v160;
    sub_1002B7674(a2 + 1160, &v232);
    v161 = v240;
    *(_OWORD *)(a2 + 1272) = v239;
    *(_OWORD *)(a2 + 1288) = v161;
    *(_OWORD *)(a2 + 1304) = v241;
    v162 = v236;
    *(_OWORD *)(a2 + 1208) = v235;
    *(_OWORD *)(a2 + 1224) = v162;
    v163 = v238;
    *(_OWORD *)(a2 + 1240) = v237;
    *(_OWORD *)(a2 + 1256) = v163;
    v164 = v234;
    *(_OWORD *)(a2 + 1176) = v233;
    *(_OWORD *)(a2 + 1192) = v164;
    v165 = *(void **)(a2 + 1320);
    *(_QWORD *)(a2 + 1320) = v242;
    v242 = 0;

    *(_OWORD *)(a2 + 1472) = v252;
    *(_OWORD *)(a2 + 1488) = v253;
    *(_OWORD *)(a2 + 1504) = v254;
    *(_QWORD *)(a2 + 1520) = v255;
    *(_OWORD *)(a2 + 1408) = v248;
    *(_OWORD *)(a2 + 1424) = v249;
    *(_OWORD *)(a2 + 1440) = v250;
    *(_OWORD *)(a2 + 1456) = v251;
    *(_OWORD *)(a2 + 1344) = v244;
    *(_OWORD *)(a2 + 1360) = v245;
    *(_OWORD *)(a2 + 1376) = v246;
    *(_OWORD *)(a2 + 1392) = v247;
    *(_OWORD *)(a2 + 1328) = v243;

    v166 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
    if (*((_QWORD *)&v232 + 1))
    {
      v167 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    if (SHIBYTE(v216) < 0)
      operator delete((void *)__p);
    v169 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v170 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
    if (!*((_QWORD *)&v200 + 1))
    {
LABEL_110:
      v63 = 0;
      goto LABEL_111;
    }
    v172 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v34 = __ldaxr(v172);
    while (__stlxr(v34 - 1, v172));
LABEL_108:
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_110;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v35 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v256[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Raven: location requested when estimator not enabled", (uint8_t *)v256, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v256, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, v256, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: location requested when estimator not enabled", buf, 2);
    v175 = (char *)v174;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v174);
    if (v175 != (char *)v256)
      free(v175);
  }
  sub_100129CA0((uint64_t)v256);
  v36 = v256[7];
  *(_OWORD *)(a2 + 96) = v256[6];
  *(_OWORD *)(a2 + 112) = v36;
  *(_OWORD *)(a2 + 128) = v256[8];
  *(_OWORD *)(a2 + 140) = *(_OWORD *)((char *)&v256[8] + 12);
  v37 = v256[3];
  *(_OWORD *)(a2 + 32) = v256[2];
  *(_OWORD *)(a2 + 48) = v37;
  v38 = v256[5];
  *(_OWORD *)(a2 + 64) = v256[4];
  *(_OWORD *)(a2 + 80) = v38;
  v39 = v256[1];
  *(_OWORD *)a2 = v256[0];
  *(_OWORD *)(a2 + 16) = v39;
  memcpy((void *)(a2 + 160), &v256[10], 0x201uLL);
  sub_1002B7674(a2 + 680, (_OWORD *)((char *)&v256[42] + 8));
  v40 = *(_OWORD *)((char *)&v256[48] + 8);
  *(_OWORD *)(a2 + 760) = *(_OWORD *)((char *)&v256[47] + 8);
  *(_OWORD *)(a2 + 776) = v40;
  *(_BYTE *)(a2 + 792) = BYTE8(v256[49]);
  v41 = *(_OWORD *)((char *)&v256[44] + 8);
  *(_OWORD *)(a2 + 696) = *(_OWORD *)((char *)&v256[43] + 8);
  *(_OWORD *)(a2 + 712) = v41;
  v42 = *(_OWORD *)((char *)&v256[46] + 8);
  *(_OWORD *)(a2 + 728) = *(_OWORD *)((char *)&v256[45] + 8);
  *(_OWORD *)(a2 + 744) = v42;
  sub_1002B7674(a2 + 800, &v256[50]);
  v43 = v256[54];
  *(_OWORD *)(a2 + 848) = v256[53];
  *(_OWORD *)(a2 + 864) = v43;
  *(_OWORD *)(a2 + 880) = v256[55];
  v44 = v256[52];
  *(_OWORD *)(a2 + 816) = v256[51];
  *(_OWORD *)(a2 + 832) = v44;
  *(_QWORD *)(a2 + 896) = *(_QWORD *)&v256[56];
  v45 = (void **)(a2 + 904);
  if (*(char *)(a2 + 927) < 0)
    operator delete(*v45);
  *(_QWORD *)(a2 + 920) = *((_QWORD *)&v256[57] + 1);
  *(_OWORD *)v45 = *(_OWORD *)((char *)&v256[56] + 8);
  HIBYTE(v256[57]) = 0;
  BYTE8(v256[56]) = 0;
  *(_OWORD *)(a2 + 1104) = v256[69];
  *(_OWORD *)(a2 + 1120) = v256[70];
  *(_OWORD *)(a2 + 1136) = v256[71];
  *(_QWORD *)(a2 + 1152) = *(_QWORD *)&v256[72];
  *(_OWORD *)(a2 + 1040) = v256[65];
  *(_OWORD *)(a2 + 1056) = v256[66];
  *(_OWORD *)(a2 + 1072) = v256[67];
  *(_OWORD *)(a2 + 1088) = v256[68];
  v46 = v256[63];
  *(_OWORD *)(a2 + 992) = v256[62];
  *(_OWORD *)(a2 + 1008) = v46;
  *(_OWORD *)(a2 + 1024) = v256[64];
  v47 = v256[59];
  *(_OWORD *)(a2 + 928) = v256[58];
  *(_OWORD *)(a2 + 944) = v47;
  v48 = v256[61];
  *(_OWORD *)(a2 + 960) = v256[60];
  *(_OWORD *)(a2 + 976) = v48;
  sub_1002B7674(a2 + 1160, (_OWORD *)((char *)&v256[72] + 8));
  v49 = *(_OWORD *)((char *)&v256[80] + 8);
  *(_OWORD *)(a2 + 1272) = *(_OWORD *)((char *)&v256[79] + 8);
  *(_OWORD *)(a2 + 1288) = v49;
  *(_OWORD *)(a2 + 1304) = *(_OWORD *)((char *)&v256[81] + 8);
  v50 = *(_OWORD *)((char *)&v256[76] + 8);
  *(_OWORD *)(a2 + 1208) = *(_OWORD *)((char *)&v256[75] + 8);
  *(_OWORD *)(a2 + 1224) = v50;
  v51 = *(_OWORD *)((char *)&v256[78] + 8);
  *(_OWORD *)(a2 + 1240) = *(_OWORD *)((char *)&v256[77] + 8);
  *(_OWORD *)(a2 + 1256) = v51;
  v52 = *(_OWORD *)((char *)&v256[74] + 8);
  *(_OWORD *)(a2 + 1176) = *(_OWORD *)((char *)&v256[73] + 8);
  *(_OWORD *)(a2 + 1192) = v52;
  v53 = *(void **)(a2 + 1320);
  *(_QWORD *)(a2 + 1320) = *((_QWORD *)&v256[82] + 1);
  *((_QWORD *)&v256[82] + 1) = 0;

  *(_OWORD *)(a2 + 1472) = v256[92];
  *(_OWORD *)(a2 + 1488) = v256[93];
  *(_OWORD *)(a2 + 1504) = v256[94];
  *(_QWORD *)(a2 + 1520) = *(_QWORD *)&v256[95];
  *(_OWORD *)(a2 + 1408) = v256[88];
  *(_OWORD *)(a2 + 1424) = v256[89];
  *(_OWORD *)(a2 + 1440) = v256[90];
  *(_OWORD *)(a2 + 1456) = v256[91];
  *(_OWORD *)(a2 + 1344) = v256[84];
  *(_OWORD *)(a2 + 1360) = v256[85];
  *(_OWORD *)(a2 + 1376) = v256[86];
  *(_OWORD *)(a2 + 1392) = v256[87];
  *(_OWORD *)(a2 + 1328) = v256[83];

  v54 = *(std::__shared_weak_count **)&v256[73];
  if (*(_QWORD *)&v256[73])
  {
    v55 = (unint64_t *)(*(_QWORD *)&v256[73] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (SHIBYTE(v256[57]) < 0)
    operator delete(*((void **)&v256[56] + 1));
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v256[50] + 1);
  if (*((_QWORD *)&v256[50] + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v256[50] + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = *(std::__shared_weak_count **)&v256[43];
  if (*(_QWORD *)&v256[43])
  {
    v61 = (unint64_t *)(*(_QWORD *)&v256[43] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return 0;
}

void sub_100C92954(_Unwind_Exception *a1)
{
  raven::RavenSolutionEvent::~RavenSolutionEvent((raven::RavenSolutionEvent *)&STACK[0x690]);
  _Unwind_Resume(a1);
}

BOOL sub_100C929F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v8;
  NSObject *v9;
  _BOOL8 v10;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[7];
  _WORD v15[8];
  uint8_t buf[8];
  uint8_t *v17;
  uint64_t v18;
  char v19;

  if (*(_BYTE *)(a1 + 4664))
  {
    *(_QWORD *)buf = 0;
    v17 = buf;
    v18 = 0x2020000000;
    v19 = 1;
    v8 = objc_autoreleasePoolPush();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100C92CB0;
    v14[3] = &unk_10217C580;
    v14[5] = sub_1001FCBB4();
    v14[4] = buf;
    v14[6] = a2;
    std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
    if (a4)
      objc_msgSend(*(id *)(a1 + 4672), "getRavenSolutionAtMCTime:WithReply:", v14, *(double *)&a3);
    else
      objc_msgSend(*(id *)(a1 + 4672), "getRavenSolutionWithReply:", v14);
    std::timed_mutex::unlock((std::timed_mutex *)(a1 + 320));
    objc_autoreleasePoolPop(v8);
    v10 = v17[24] != 0;
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v9 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLGLS,Raven Location XPC Service not enabled. Cannot get a solution", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLGLS,Raven Location XPC Service not enabled. Cannot get a solution", v15, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRavenController::GetRavenSolutionFromService(raven::RavenSolutionEvent &, const std::optional<CFTimeInterval>) const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
  return v10;
}

void sub_100C92C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::timed_mutex *v21;

  std::timed_mutex::unlock(v21);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_100C92CB0(uint64_t a1, void *a2)
{
  NSObject *v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  __int16 v22;
  void *__p[2];
  char v24;
  int v25;
  double v26;
  uint64_t v27;
  char v28;
  uint8_t buf[4];
  double v30;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (sub_1001FCBB4() - *(double *)(a1 + 40)) * 1000.0;
    *(_DWORD *)buf = 134349056;
    v30 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGLS,CLRavenController,GetRavenSolutionFromService,responseTimeMs,%{public}.1lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v13 = qword_1022A00A8;
    v14 = (sub_1001FCBB4() - *(double *)(a1 + 40)) * 1000.0;
    v25 = 134349056;
    v26 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "CLGLS,CLRavenController,GetRavenSolutionFromService,responseTimeMs,%{public}.1lf", &v25, 12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetRavenSolutionFromService(raven::RavenSolutionEvent &, const std::optional<CFTimeInterval>) const_block_invoke", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (!a2)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v6 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLGLS,CLRavenController,GetRavenSolutionFromService,Could not get a solution", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v25) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLGLS,CLRavenController,GetRavenSolutionFromService,Could not get a solution", &v25, v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRavenController::GetRavenSolutionFromService(raven::RavenSolutionEvent &, const std::optional<CFTimeInterval>) const_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  sub_10035ACF4(__p, objc_msgSend(a2, "bytes"), (size_t)objc_msgSend(a2, "length"));
  CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)&v25);
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString(&v25, __p) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGLS,Could not parse raven solution protobuf message from serialized byte array", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v22 = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLGLS,Could not parse raven solution protobuf message from serialized byte array", &v22, v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRavenController::GetRavenSolutionFromService(raven::RavenSolutionEvent &, const std::optional<CFTimeInterval>) const_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  if ((v28 & 2) != 0)
  {
    v8 = v27;
    if (v27)
    {
      v9 = v27;
      if ((*(_BYTE *)(v27 + 320) & 2) == 0)
        goto LABEL_35;
    }
    else
    {
      v9 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
      if ((*(_BYTE *)(v9 + 320) & 2) == 0)
        goto LABEL_35;
    }
    v10 = *(_QWORD *)(v9 + 272);
    if (!v10)
      v10 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 272);
    if ((*(_BYTE *)(v10 + 28) & 1) != 0)
    {
      if (!v27)
        v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
      v11 = *(_QWORD *)(v8 + 272);
      if (!v11)
        v11 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 272);
      v12 = *(_QWORD *)(v11 + 8);
      if (!v12)
        v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::LogEntry::default_instance_ + 8);
      raven::ConvertProtobufToRavenSolutionEvent(v12, *(_QWORD *)(a1 + 48));
    }
  }
LABEL_35:
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)&v25);
  if (v24 < 0)
    operator delete(__p[0]);
}

void sub_100C931FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)&a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100C93234(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  NSObject *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void **v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v95;
  int RavenSolution;
  NSObject *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  void **v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _OWORD *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  char v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  void *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  NSObject *v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  void **v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  void *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  uint64_t v206;
  const char *v207;
  char *v208;
  const char *v209;
  char *v210;
  uint64_t v211;
  const char *v212;
  uint8_t *v213;
  uint64_t v214;
  const char *v215;
  uint8_t *v216;
  uint64_t v217;
  const char *v218;
  uint8_t *v219;
  int v220;
  uint64_t v221;
  uint8_t buf[16];
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  _OWORD v230[2];
  _BYTE v231[513];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  char v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  __int128 __p;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  id v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  __int128 v288;
  _OWORD v289[152];

  if ((*a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)a2 < 0.0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v38 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      v39 = *a2;
      LODWORD(v289[0]) = 134349056;
      *(_QWORD *)((char *)v289 + 4) = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Raven: solution requested at invalid time: %{public}.3lf", (uint8_t *)v289, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(v289, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v206 = *a2;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v206;
      _os_log_send_and_compose_impl(2, 0, v289, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: solution requested at invalid time: %{public}.3lf", buf, 12);
      v208 = (char *)v207;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v207);
      if (v208 != (char *)v289)
        free(v208);
    }
    sub_100129CA0((uint64_t)v289);
    v40 = v289[7];
    *(_OWORD *)(a3 + 96) = v289[6];
    *(_OWORD *)(a3 + 112) = v40;
    *(_OWORD *)(a3 + 128) = v289[8];
    *(_OWORD *)(a3 + 140) = *(_OWORD *)((char *)&v289[8] + 12);
    v41 = v289[3];
    *(_OWORD *)(a3 + 32) = v289[2];
    *(_OWORD *)(a3 + 48) = v41;
    v42 = v289[5];
    *(_OWORD *)(a3 + 64) = v289[4];
    *(_OWORD *)(a3 + 80) = v42;
    v43 = v289[1];
    *(_OWORD *)a3 = v289[0];
    *(_OWORD *)(a3 + 16) = v43;
    memcpy((void *)(a3 + 160), &v289[10], 0x201uLL);
    sub_1002B7674(a3 + 680, (_OWORD *)((char *)&v289[42] + 8));
    v44 = *(_OWORD *)((char *)&v289[48] + 8);
    *(_OWORD *)(a3 + 760) = *(_OWORD *)((char *)&v289[47] + 8);
    *(_OWORD *)(a3 + 776) = v44;
    *(_BYTE *)(a3 + 792) = BYTE8(v289[49]);
    v45 = *(_OWORD *)((char *)&v289[44] + 8);
    *(_OWORD *)(a3 + 696) = *(_OWORD *)((char *)&v289[43] + 8);
    *(_OWORD *)(a3 + 712) = v45;
    v46 = *(_OWORD *)((char *)&v289[46] + 8);
    *(_OWORD *)(a3 + 728) = *(_OWORD *)((char *)&v289[45] + 8);
    *(_OWORD *)(a3 + 744) = v46;
    sub_1002B7674(a3 + 800, &v289[50]);
    v47 = v289[54];
    *(_OWORD *)(a3 + 848) = v289[53];
    *(_OWORD *)(a3 + 864) = v47;
    *(_OWORD *)(a3 + 880) = v289[55];
    v48 = v289[52];
    *(_OWORD *)(a3 + 816) = v289[51];
    *(_OWORD *)(a3 + 832) = v48;
    *(_QWORD *)(a3 + 896) = *(_QWORD *)&v289[56];
    v49 = (void **)(a3 + 904);
    if (*(char *)(a3 + 927) < 0)
      operator delete(*v49);
    *(_QWORD *)(a3 + 920) = *((_QWORD *)&v289[57] + 1);
    *(_OWORD *)v49 = *(_OWORD *)((char *)&v289[56] + 8);
    HIBYTE(v289[57]) = 0;
    BYTE8(v289[56]) = 0;
    *(_OWORD *)(a3 + 1104) = v289[69];
    *(_OWORD *)(a3 + 1120) = v289[70];
    *(_OWORD *)(a3 + 1136) = v289[71];
    *(_QWORD *)(a3 + 1152) = *(_QWORD *)&v289[72];
    *(_OWORD *)(a3 + 1040) = v289[65];
    *(_OWORD *)(a3 + 1056) = v289[66];
    *(_OWORD *)(a3 + 1072) = v289[67];
    *(_OWORD *)(a3 + 1088) = v289[68];
    v50 = v289[63];
    *(_OWORD *)(a3 + 992) = v289[62];
    *(_OWORD *)(a3 + 1008) = v50;
    *(_OWORD *)(a3 + 1024) = v289[64];
    v51 = v289[59];
    *(_OWORD *)(a3 + 928) = v289[58];
    *(_OWORD *)(a3 + 944) = v51;
    v52 = v289[61];
    *(_OWORD *)(a3 + 960) = v289[60];
    *(_OWORD *)(a3 + 976) = v52;
    sub_1002B7674(a3 + 1160, (_OWORD *)((char *)&v289[72] + 8));
    v53 = *(_OWORD *)((char *)&v289[80] + 8);
    *(_OWORD *)(a3 + 1272) = *(_OWORD *)((char *)&v289[79] + 8);
    *(_OWORD *)(a3 + 1288) = v53;
    *(_OWORD *)(a3 + 1304) = *(_OWORD *)((char *)&v289[81] + 8);
    v54 = *(_OWORD *)((char *)&v289[76] + 8);
    *(_OWORD *)(a3 + 1208) = *(_OWORD *)((char *)&v289[75] + 8);
    *(_OWORD *)(a3 + 1224) = v54;
    v55 = *(_OWORD *)((char *)&v289[78] + 8);
    *(_OWORD *)(a3 + 1240) = *(_OWORD *)((char *)&v289[77] + 8);
    *(_OWORD *)(a3 + 1256) = v55;
    v56 = *(_OWORD *)((char *)&v289[74] + 8);
    *(_OWORD *)(a3 + 1176) = *(_OWORD *)((char *)&v289[73] + 8);
    *(_OWORD *)(a3 + 1192) = v56;
    v57 = *(void **)(a3 + 1320);
    *(_QWORD *)(a3 + 1320) = *((_QWORD *)&v289[82] + 1);
    *((_QWORD *)&v289[82] + 1) = 0;

    *(_OWORD *)(a3 + 1472) = v289[92];
    *(_OWORD *)(a3 + 1488) = v289[93];
    *(_OWORD *)(a3 + 1504) = v289[94];
    *(_QWORD *)(a3 + 1520) = *(_QWORD *)&v289[95];
    *(_OWORD *)(a3 + 1408) = v289[88];
    *(_OWORD *)(a3 + 1424) = v289[89];
    *(_OWORD *)(a3 + 1440) = v289[90];
    *(_OWORD *)(a3 + 1456) = v289[91];
    *(_OWORD *)(a3 + 1344) = v289[84];
    *(_OWORD *)(a3 + 1360) = v289[85];
    *(_OWORD *)(a3 + 1376) = v289[86];
    *(_OWORD *)(a3 + 1392) = v289[87];
    *(_OWORD *)(a3 + 1328) = v289[83];

    v58 = *(std::__shared_weak_count **)&v289[73];
    if (*(_QWORD *)&v289[73])
    {
      v59 = (unint64_t *)(*(_QWORD *)&v289[73] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (SHIBYTE(v289[57]) < 0)
      operator delete(*((void **)&v289[56] + 1));
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v289[50] + 1);
    if (*((_QWORD *)&v289[50] + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v289[50] + 1) + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = *(std::__shared_weak_count **)&v289[43];
    if (!*(_QWORD *)&v289[43])
      return 0;
    v65 = (unint64_t *)(*(_QWORD *)&v289[43] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    goto LABEL_77;
  }
  v7 = a1 + 4663;
  if (*(_BYTE *)(a1 + 4663) && (*(_BYTE *)(a1 + 4664) || *(_QWORD *)(a1 + 312)) && *(_QWORD *)(a1 + 4736) != a1 + 4688)
  {
    sub_100C95624((uint64_t)v289);
    if (*(_BYTE *)(v7 + 1))
    {
      if (!sub_100C929F0(a1, (uint64_t)v289, *a2, 1))
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v9 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
        {
          v10 = *a2;
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Raven: could not retrieve Raven solution at time %{public}.3lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v211 = *a2;
          LODWORD(v288) = 134349056;
          *(_QWORD *)((char *)&v288 + 4) = v211;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: could not retrieve Raven solution at time %{public}.3lf", &v288, 12);
          v213 = (uint8_t *)v212;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v212);
          if (v213 != buf)
            free(v213);
        }
        sub_100129CA0((uint64_t)buf);
        v11 = v229;
        *(_OWORD *)(a3 + 96) = v228;
        *(_OWORD *)(a3 + 112) = v11;
        *(_OWORD *)(a3 + 128) = v230[0];
        *(_OWORD *)(a3 + 140) = *(_OWORD *)((char *)v230 + 12);
        v12 = v225;
        *(_OWORD *)(a3 + 32) = v224;
        *(_OWORD *)(a3 + 48) = v12;
        v13 = v227;
        *(_OWORD *)(a3 + 64) = v226;
        *(_OWORD *)(a3 + 80) = v13;
        v14 = v223;
        *(_OWORD *)a3 = *(_OWORD *)buf;
        *(_OWORD *)(a3 + 16) = v14;
        memcpy((void *)(a3 + 160), v231, 0x201uLL);
        sub_1002B7674(a3 + 680, &v232);
        v15 = v238;
        *(_OWORD *)(a3 + 760) = v237;
        *(_OWORD *)(a3 + 776) = v15;
        *(_BYTE *)(a3 + 792) = v239;
        v16 = v234;
        *(_OWORD *)(a3 + 696) = v233;
        *(_OWORD *)(a3 + 712) = v16;
        v17 = v236;
        *(_OWORD *)(a3 + 728) = v235;
        *(_OWORD *)(a3 + 744) = v17;
        sub_1002B7674(a3 + 800, &v240);
        v18 = v244;
        *(_OWORD *)(a3 + 848) = v243;
        *(_OWORD *)(a3 + 864) = v18;
        *(_OWORD *)(a3 + 880) = v245;
        v19 = v242;
        *(_OWORD *)(a3 + 816) = v241;
        *(_OWORD *)(a3 + 832) = v19;
        *(_QWORD *)(a3 + 896) = v246;
        v20 = (void **)(a3 + 904);
        if (*(char *)(a3 + 927) < 0)
          operator delete(*v20);
        *(_QWORD *)(a3 + 920) = v248;
        *(_OWORD *)v20 = __p;
        HIBYTE(v248) = 0;
        LOBYTE(__p) = 0;
        *(_OWORD *)(a3 + 1104) = v260;
        *(_OWORD *)(a3 + 1120) = v261;
        *(_OWORD *)(a3 + 1136) = v262;
        *(_QWORD *)(a3 + 1152) = v263;
        *(_OWORD *)(a3 + 1040) = v256;
        *(_OWORD *)(a3 + 1056) = v257;
        *(_OWORD *)(a3 + 1072) = v258;
        *(_OWORD *)(a3 + 1088) = v259;
        v21 = v254;
        *(_OWORD *)(a3 + 992) = v253;
        *(_OWORD *)(a3 + 1008) = v21;
        *(_OWORD *)(a3 + 1024) = v255;
        v22 = v250;
        *(_OWORD *)(a3 + 928) = v249;
        *(_OWORD *)(a3 + 944) = v22;
        v23 = v252;
        *(_OWORD *)(a3 + 960) = v251;
        *(_OWORD *)(a3 + 976) = v23;
        sub_1002B7674(a3 + 1160, &v264);
        v24 = v272;
        *(_OWORD *)(a3 + 1272) = v271;
        *(_OWORD *)(a3 + 1288) = v24;
        *(_OWORD *)(a3 + 1304) = v273;
        v25 = v268;
        *(_OWORD *)(a3 + 1208) = v267;
        *(_OWORD *)(a3 + 1224) = v25;
        v26 = v270;
        *(_OWORD *)(a3 + 1240) = v269;
        *(_OWORD *)(a3 + 1256) = v26;
        v27 = v266;
        *(_OWORD *)(a3 + 1176) = v265;
        *(_OWORD *)(a3 + 1192) = v27;
        v28 = *(void **)(a3 + 1320);
        *(_QWORD *)(a3 + 1320) = v274;
        v274 = 0;

        *(_OWORD *)(a3 + 1472) = v284;
        *(_OWORD *)(a3 + 1488) = v285;
        *(_OWORD *)(a3 + 1504) = v286;
        *(_QWORD *)(a3 + 1520) = v287;
        *(_OWORD *)(a3 + 1408) = v280;
        *(_OWORD *)(a3 + 1424) = v281;
        *(_OWORD *)(a3 + 1440) = v282;
        *(_OWORD *)(a3 + 1456) = v283;
        *(_OWORD *)(a3 + 1344) = v276;
        *(_OWORD *)(a3 + 1360) = v277;
        *(_OWORD *)(a3 + 1376) = v278;
        *(_OWORD *)(a3 + 1392) = v279;
        *(_OWORD *)(a3 + 1328) = v275;

        v29 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
        if (*((_QWORD *)&v264 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (SHIBYTE(v248) < 0)
          operator delete((void *)__p);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
        if (*((_QWORD *)&v240 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
        if (!*((_QWORD *)&v232 + 1))
          goto LABEL_131;
        v36 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        goto LABEL_129;
      }
    }
    else
    {
      v95 = *a2;
      memset(buf, 0, sizeof(buf));
      CNTimeSpan::SetTimeSpan((CNTimeSpan *)buf, 0, *(double *)&v95);
      v288 = *(_OWORD *)buf;
      std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
      RavenSolution = raven::RavenSupervisor::GetRavenSolution(*(_QWORD *)(a1 + 312), &v288, v289);
      std::timed_mutex::unlock((std::timed_mutex *)(a1 + 320));
      if (RavenSolution)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v97 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
        {
          v98 = *a2;
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v98;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "Raven: could not retrieve Raven solution at time %{public}.3lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v214 = *a2;
          v220 = 134349056;
          v221 = v214;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: could not retrieve Raven solution at time %{public}.3lf", &v220, 12);
          v216 = (uint8_t *)v215;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v215);
          if (v216 != buf)
            free(v216);
        }
        sub_100129CA0((uint64_t)buf);
        v99 = v229;
        *(_OWORD *)(a3 + 96) = v228;
        *(_OWORD *)(a3 + 112) = v99;
        *(_OWORD *)(a3 + 128) = v230[0];
        *(_OWORD *)(a3 + 140) = *(_OWORD *)((char *)v230 + 12);
        v100 = v225;
        *(_OWORD *)(a3 + 32) = v224;
        *(_OWORD *)(a3 + 48) = v100;
        v101 = v227;
        *(_OWORD *)(a3 + 64) = v226;
        *(_OWORD *)(a3 + 80) = v101;
        v102 = v223;
        *(_OWORD *)a3 = *(_OWORD *)buf;
        *(_OWORD *)(a3 + 16) = v102;
        memcpy((void *)(a3 + 160), v231, 0x201uLL);
        sub_1002B7674(a3 + 680, &v232);
        v103 = v238;
        *(_OWORD *)(a3 + 760) = v237;
        *(_OWORD *)(a3 + 776) = v103;
        *(_BYTE *)(a3 + 792) = v239;
        v104 = v234;
        *(_OWORD *)(a3 + 696) = v233;
        *(_OWORD *)(a3 + 712) = v104;
        v105 = v236;
        *(_OWORD *)(a3 + 728) = v235;
        *(_OWORD *)(a3 + 744) = v105;
        sub_1002B7674(a3 + 800, &v240);
        v106 = v244;
        *(_OWORD *)(a3 + 848) = v243;
        *(_OWORD *)(a3 + 864) = v106;
        *(_OWORD *)(a3 + 880) = v245;
        v107 = v242;
        *(_OWORD *)(a3 + 816) = v241;
        *(_OWORD *)(a3 + 832) = v107;
        *(_QWORD *)(a3 + 896) = v246;
        v108 = (void **)(a3 + 904);
        if (*(char *)(a3 + 927) < 0)
          operator delete(*v108);
        *(_QWORD *)(a3 + 920) = v248;
        *(_OWORD *)v108 = __p;
        HIBYTE(v248) = 0;
        LOBYTE(__p) = 0;
        *(_OWORD *)(a3 + 1104) = v260;
        *(_OWORD *)(a3 + 1120) = v261;
        *(_OWORD *)(a3 + 1136) = v262;
        *(_QWORD *)(a3 + 1152) = v263;
        *(_OWORD *)(a3 + 1040) = v256;
        *(_OWORD *)(a3 + 1056) = v257;
        *(_OWORD *)(a3 + 1072) = v258;
        *(_OWORD *)(a3 + 1088) = v259;
        v109 = v254;
        *(_OWORD *)(a3 + 992) = v253;
        *(_OWORD *)(a3 + 1008) = v109;
        *(_OWORD *)(a3 + 1024) = v255;
        v110 = v250;
        *(_OWORD *)(a3 + 928) = v249;
        *(_OWORD *)(a3 + 944) = v110;
        v111 = v252;
        *(_OWORD *)(a3 + 960) = v251;
        *(_OWORD *)(a3 + 976) = v111;
        sub_1002B7674(a3 + 1160, &v264);
        v112 = v272;
        *(_OWORD *)(a3 + 1272) = v271;
        *(_OWORD *)(a3 + 1288) = v112;
        *(_OWORD *)(a3 + 1304) = v273;
        v113 = v268;
        *(_OWORD *)(a3 + 1208) = v267;
        *(_OWORD *)(a3 + 1224) = v113;
        v114 = v270;
        *(_OWORD *)(a3 + 1240) = v269;
        *(_OWORD *)(a3 + 1256) = v114;
        v115 = v266;
        *(_OWORD *)(a3 + 1176) = v265;
        *(_OWORD *)(a3 + 1192) = v115;
        v116 = *(void **)(a3 + 1320);
        *(_QWORD *)(a3 + 1320) = v274;
        v274 = 0;

        *(_OWORD *)(a3 + 1472) = v284;
        *(_OWORD *)(a3 + 1488) = v285;
        *(_OWORD *)(a3 + 1504) = v286;
        *(_QWORD *)(a3 + 1520) = v287;
        *(_OWORD *)(a3 + 1408) = v280;
        *(_OWORD *)(a3 + 1424) = v281;
        *(_OWORD *)(a3 + 1440) = v282;
        *(_OWORD *)(a3 + 1456) = v283;
        *(_OWORD *)(a3 + 1344) = v276;
        *(_OWORD *)(a3 + 1360) = v277;
        *(_OWORD *)(a3 + 1376) = v278;
        *(_OWORD *)(a3 + 1392) = v279;
        *(_OWORD *)(a3 + 1328) = v275;

        v117 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
        if (*((_QWORD *)&v264 + 1))
        {
          v118 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        if (SHIBYTE(v248) < 0)
          operator delete((void *)__p);
        v120 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
        if (*((_QWORD *)&v240 + 1))
        {
          v121 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
        if (!*((_QWORD *)&v232 + 1))
          goto LABEL_131;
        v123 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
        do
          v37 = __ldaxr(v123);
        while (__stlxr(v37 - 1, v123));
        goto LABEL_129;
      }
    }
    v124 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v124;
    v125 = *(_OWORD *)(a4 + 32);
    v126 = *(_OWORD *)(a4 + 48);
    v127 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 80) = v127;
    *(_OWORD *)(a3 + 32) = v125;
    *(_OWORD *)(a3 + 48) = v126;
    v128 = *(_OWORD *)(a4 + 96);
    v129 = *(_OWORD *)(a4 + 112);
    v130 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 140) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a3 + 112) = v129;
    *(_OWORD *)(a3 + 128) = v130;
    *(_OWORD *)(a3 + 96) = v128;
    memcpy((void *)(a3 + 160), (const void *)(a4 + 160), 0x201uLL);
    sub_100349198((_QWORD *)(a3 + 680), (uint64_t *)(a4 + 680));
    v131 = (_OWORD *)(a3 + 696);
    v133 = *(_OWORD *)(a4 + 712);
    v132 = *(_OWORD *)(a4 + 728);
    *(_OWORD *)(a3 + 696) = *(_OWORD *)(a4 + 696);
    *(_OWORD *)(a3 + 712) = v133;
    *(_OWORD *)(a3 + 728) = v132;
    v135 = *(_OWORD *)(a4 + 760);
    v134 = *(_OWORD *)(a4 + 776);
    v136 = *(_OWORD *)(a4 + 744);
    *(_BYTE *)(a3 + 792) = *(_BYTE *)(a4 + 792);
    *(_OWORD *)(a3 + 760) = v135;
    *(_OWORD *)(a3 + 776) = v134;
    *(_OWORD *)(a3 + 744) = v136;
    if (sub_100C8DE80(a1, (uint64_t)v289, a3))
    {
      std::mutex::lock((std::mutex *)(a1 + 4400));
      memcpy((void *)(a1 + 448), (char *)v289 + 8, 0x971uLL);
      v137 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 2872) = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 2888) = v137;
      v138 = *(_OWORD *)(a3 + 80);
      v140 = *(_OWORD *)(a3 + 32);
      v139 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 2936) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a1 + 2952) = v138;
      *(_OWORD *)(a1 + 2904) = v140;
      *(_OWORD *)(a1 + 2920) = v139;
      v142 = *(_OWORD *)(a3 + 112);
      v141 = *(_OWORD *)(a3 + 128);
      v143 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a1 + 3012) = *(_OWORD *)(a3 + 140);
      *(_OWORD *)(a1 + 2984) = v142;
      *(_OWORD *)(a1 + 3000) = v141;
      *(_OWORD *)(a1 + 2968) = v143;
      memcpy((void *)(a1 + 3032), (const void *)(a3 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 3552), (uint64_t *)(a3 + 680));
      v145 = *(_OWORD *)(a3 + 712);
      v144 = *(_OWORD *)(a3 + 728);
      *(_OWORD *)(a1 + 3568) = *v131;
      *(_OWORD *)(a1 + 3584) = v145;
      *(_OWORD *)(a1 + 3600) = v144;
      v147 = *(_OWORD *)(a3 + 760);
      v146 = *(_OWORD *)(a3 + 776);
      v148 = *(_BYTE *)(a3 + 792);
      *(_OWORD *)(a1 + 3616) = *(_OWORD *)(a3 + 744);
      *(_BYTE *)(a1 + 3664) = v148;
      *(_OWORD *)(a1 + 3648) = v146;
      *(_OWORD *)(a1 + 3632) = v147;
      sub_100349198((_QWORD *)(a1 + 3672), (uint64_t *)(a3 + 800));
      *(_OWORD *)(a1 + 3688) = *(_OWORD *)(a3 + 816);
      v149 = *(_OWORD *)(a3 + 880);
      v151 = *(_OWORD *)(a3 + 832);
      v150 = *(_OWORD *)(a3 + 848);
      *(_OWORD *)(a1 + 3736) = *(_OWORD *)(a3 + 864);
      *(_OWORD *)(a1 + 3752) = v149;
      *(_OWORD *)(a1 + 3704) = v151;
      *(_OWORD *)(a1 + 3720) = v150;
      *(_QWORD *)(a1 + 3768) = *(_QWORD *)(a3 + 896);
      std::string::operator=((std::string *)(a1 + 3776), (const std::string *)(a3 + 904));
      v152 = *(_OWORD *)(a3 + 928);
      v153 = *(_OWORD *)(a3 + 960);
      *(_OWORD *)(a1 + 3816) = *(_OWORD *)(a3 + 944);
      *(_OWORD *)(a1 + 3832) = v153;
      *(_OWORD *)(a1 + 3800) = v152;
      v154 = *(_OWORD *)(a3 + 976);
      v155 = *(_OWORD *)(a3 + 992);
      v156 = *(_OWORD *)(a3 + 1024);
      *(_OWORD *)(a1 + 3880) = *(_OWORD *)(a3 + 1008);
      *(_OWORD *)(a1 + 3896) = v156;
      *(_OWORD *)(a1 + 3848) = v154;
      *(_OWORD *)(a1 + 3864) = v155;
      v157 = *(_OWORD *)(a3 + 1040);
      v158 = *(_OWORD *)(a3 + 1056);
      v159 = *(_OWORD *)(a3 + 1072);
      *(_OWORD *)(a1 + 3960) = *(_OWORD *)(a3 + 1088);
      *(_OWORD *)(a1 + 3944) = v159;
      *(_OWORD *)(a1 + 3928) = v158;
      *(_OWORD *)(a1 + 3912) = v157;
      v160 = *(_OWORD *)(a3 + 1104);
      v161 = *(_OWORD *)(a3 + 1120);
      v162 = *(_OWORD *)(a3 + 1136);
      *(_QWORD *)(a1 + 4024) = *(_QWORD *)(a3 + 1152);
      *(_OWORD *)(a1 + 4008) = v162;
      *(_OWORD *)(a1 + 3992) = v161;
      *(_OWORD *)(a1 + 3976) = v160;
      sub_100349198((_QWORD *)(a1 + 4032), (uint64_t *)(a3 + 1160));
      *(_OWORD *)(a1 + 4048) = *(_OWORD *)(a3 + 1176);
      v163 = *(_OWORD *)(a3 + 1224);
      v164 = *(_OWORD *)(a3 + 1240);
      v165 = *(_OWORD *)(a3 + 1208);
      *(_OWORD *)(a1 + 4064) = *(_OWORD *)(a3 + 1192);
      *(_OWORD *)(a1 + 4112) = v164;
      *(_OWORD *)(a1 + 4096) = v163;
      *(_OWORD *)(a1 + 4080) = v165;
      v166 = *(_OWORD *)(a3 + 1288);
      v167 = *(_OWORD *)(a3 + 1304);
      v168 = *(_OWORD *)(a3 + 1272);
      *(_OWORD *)(a1 + 4128) = *(_OWORD *)(a3 + 1256);
      *(_OWORD *)(a1 + 4176) = v167;
      *(_OWORD *)(a1 + 4160) = v166;
      *(_OWORD *)(a1 + 4144) = v168;
      v169 = *(void **)(a1 + 4192);
      *(_QWORD *)(a1 + 4192) = *(id *)(a3 + 1320);

      *(_OWORD *)(a1 + 4200) = *(_OWORD *)(a3 + 1328);
      v170 = *(_OWORD *)(a3 + 1344);
      v171 = *(_OWORD *)(a3 + 1360);
      v172 = *(_OWORD *)(a3 + 1376);
      *(_OWORD *)(a1 + 4264) = *(_OWORD *)(a3 + 1392);
      *(_OWORD *)(a1 + 4248) = v172;
      *(_OWORD *)(a1 + 4232) = v171;
      *(_OWORD *)(a1 + 4216) = v170;
      v173 = *(_OWORD *)(a3 + 1408);
      v174 = *(_OWORD *)(a3 + 1424);
      v175 = *(_OWORD *)(a3 + 1440);
      *(_OWORD *)(a1 + 4328) = *(_OWORD *)(a3 + 1456);
      *(_OWORD *)(a1 + 4312) = v175;
      *(_OWORD *)(a1 + 4296) = v174;
      *(_OWORD *)(a1 + 4280) = v173;
      v176 = *(_OWORD *)(a3 + 1472);
      v177 = *(_OWORD *)(a3 + 1488);
      v178 = *(_OWORD *)(a3 + 1504);
      *(_QWORD *)(a1 + 4392) = *(_QWORD *)(a3 + 1520);
      *(_OWORD *)(a1 + 4376) = v178;
      *(_OWORD *)(a1 + 4360) = v177;
      *(_OWORD *)(a1 + 4344) = v176;
      std::mutex::unlock((std::mutex *)(a1 + 4400));
      v93 = 1;
LABEL_132:
      raven::RavenSolutionEvent::~RavenSolutionEvent((raven::RavenSolutionEvent *)v289);
      return v93;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v179 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
    {
      v180 = *a2;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v180;
      _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_INFO, "Raven: could not convert Raven solution to client location at time %{public}.3lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v217 = *a2;
      LODWORD(v288) = 134349056;
      *(_QWORD *)((char *)&v288 + 4) = v217;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: could not convert Raven solution to client location at time %{public}.3lf", &v288, 12);
      v219 = (uint8_t *)v218;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v218);
      if (v219 != buf)
        free(v219);
    }
    sub_100129CA0((uint64_t)buf);
    v181 = v229;
    *(_OWORD *)(a3 + 96) = v228;
    *(_OWORD *)(a3 + 112) = v181;
    *(_OWORD *)(a3 + 128) = v230[0];
    *(_OWORD *)(a3 + 140) = *(_OWORD *)((char *)v230 + 12);
    v182 = v225;
    *(_OWORD *)(a3 + 32) = v224;
    *(_OWORD *)(a3 + 48) = v182;
    v183 = v227;
    *(_OWORD *)(a3 + 64) = v226;
    *(_OWORD *)(a3 + 80) = v183;
    v184 = v223;
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_OWORD *)(a3 + 16) = v184;
    memcpy((void *)(a3 + 160), v231, 0x201uLL);
    sub_1002B7674(a3 + 680, &v232);
    v185 = v238;
    *(_OWORD *)(a3 + 760) = v237;
    *(_OWORD *)(a3 + 776) = v185;
    *(_BYTE *)(a3 + 792) = v239;
    v186 = v234;
    *v131 = v233;
    *(_OWORD *)(a3 + 712) = v186;
    v187 = v236;
    *(_OWORD *)(a3 + 728) = v235;
    *(_OWORD *)(a3 + 744) = v187;
    sub_1002B7674(a3 + 800, &v240);
    v188 = v244;
    *(_OWORD *)(a3 + 848) = v243;
    *(_OWORD *)(a3 + 864) = v188;
    *(_OWORD *)(a3 + 880) = v245;
    v189 = v242;
    *(_OWORD *)(a3 + 816) = v241;
    *(_OWORD *)(a3 + 832) = v189;
    *(_QWORD *)(a3 + 896) = v246;
    v190 = (void **)(a3 + 904);
    if (*(char *)(a3 + 927) < 0)
      operator delete(*v190);
    *(_QWORD *)(a3 + 920) = v248;
    *(_OWORD *)v190 = __p;
    HIBYTE(v248) = 0;
    LOBYTE(__p) = 0;
    *(_OWORD *)(a3 + 1104) = v260;
    *(_OWORD *)(a3 + 1120) = v261;
    *(_OWORD *)(a3 + 1136) = v262;
    *(_QWORD *)(a3 + 1152) = v263;
    *(_OWORD *)(a3 + 1040) = v256;
    *(_OWORD *)(a3 + 1056) = v257;
    *(_OWORD *)(a3 + 1072) = v258;
    *(_OWORD *)(a3 + 1088) = v259;
    v191 = v254;
    *(_OWORD *)(a3 + 992) = v253;
    *(_OWORD *)(a3 + 1008) = v191;
    *(_OWORD *)(a3 + 1024) = v255;
    v192 = v250;
    *(_OWORD *)(a3 + 928) = v249;
    *(_OWORD *)(a3 + 944) = v192;
    v193 = v252;
    *(_OWORD *)(a3 + 960) = v251;
    *(_OWORD *)(a3 + 976) = v193;
    sub_1002B7674(a3 + 1160, &v264);
    v194 = v272;
    *(_OWORD *)(a3 + 1272) = v271;
    *(_OWORD *)(a3 + 1288) = v194;
    *(_OWORD *)(a3 + 1304) = v273;
    v195 = v268;
    *(_OWORD *)(a3 + 1208) = v267;
    *(_OWORD *)(a3 + 1224) = v195;
    v196 = v270;
    *(_OWORD *)(a3 + 1240) = v269;
    *(_OWORD *)(a3 + 1256) = v196;
    v197 = v266;
    *(_OWORD *)(a3 + 1176) = v265;
    *(_OWORD *)(a3 + 1192) = v197;
    v198 = *(void **)(a3 + 1320);
    *(_QWORD *)(a3 + 1320) = v274;
    v274 = 0;

    *(_OWORD *)(a3 + 1472) = v284;
    *(_OWORD *)(a3 + 1488) = v285;
    *(_OWORD *)(a3 + 1504) = v286;
    *(_QWORD *)(a3 + 1520) = v287;
    *(_OWORD *)(a3 + 1408) = v280;
    *(_OWORD *)(a3 + 1424) = v281;
    *(_OWORD *)(a3 + 1440) = v282;
    *(_OWORD *)(a3 + 1456) = v283;
    *(_OWORD *)(a3 + 1344) = v276;
    *(_OWORD *)(a3 + 1360) = v277;
    *(_OWORD *)(a3 + 1376) = v278;
    *(_OWORD *)(a3 + 1392) = v279;
    *(_OWORD *)(a3 + 1328) = v275;

    v199 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
    if (*((_QWORD *)&v264 + 1))
    {
      v200 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 - 1, v200));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
    }
    if (SHIBYTE(v248) < 0)
      operator delete((void *)__p);
    v202 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
    if (*((_QWORD *)&v240 + 1))
    {
      v203 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
    if (!*((_QWORD *)&v232 + 1))
    {
LABEL_131:
      v93 = 0;
      goto LABEL_132;
    }
    v205 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v37 = __ldaxr(v205);
    while (__stlxr(v37 - 1, v205));
LABEL_129:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    goto LABEL_131;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v67 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v289[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "Raven: location requested with estimator not enabled", (uint8_t *)v289, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v289, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, v289, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: location requested with estimator not enabled", buf, 2);
    v210 = (char *)v209;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v209);
    if (v210 != (char *)v289)
      free(v210);
  }
  sub_100129CA0((uint64_t)v289);
  v68 = v289[7];
  *(_OWORD *)(a3 + 96) = v289[6];
  *(_OWORD *)(a3 + 112) = v68;
  *(_OWORD *)(a3 + 128) = v289[8];
  *(_OWORD *)(a3 + 140) = *(_OWORD *)((char *)&v289[8] + 12);
  v69 = v289[3];
  *(_OWORD *)(a3 + 32) = v289[2];
  *(_OWORD *)(a3 + 48) = v69;
  v70 = v289[5];
  *(_OWORD *)(a3 + 64) = v289[4];
  *(_OWORD *)(a3 + 80) = v70;
  v71 = v289[1];
  *(_OWORD *)a3 = v289[0];
  *(_OWORD *)(a3 + 16) = v71;
  memcpy((void *)(a3 + 160), &v289[10], 0x201uLL);
  sub_1002B7674(a3 + 680, (_OWORD *)((char *)&v289[42] + 8));
  v72 = *(_OWORD *)((char *)&v289[48] + 8);
  *(_OWORD *)(a3 + 760) = *(_OWORD *)((char *)&v289[47] + 8);
  *(_OWORD *)(a3 + 776) = v72;
  *(_BYTE *)(a3 + 792) = BYTE8(v289[49]);
  v73 = *(_OWORD *)((char *)&v289[44] + 8);
  *(_OWORD *)(a3 + 696) = *(_OWORD *)((char *)&v289[43] + 8);
  *(_OWORD *)(a3 + 712) = v73;
  v74 = *(_OWORD *)((char *)&v289[46] + 8);
  *(_OWORD *)(a3 + 728) = *(_OWORD *)((char *)&v289[45] + 8);
  *(_OWORD *)(a3 + 744) = v74;
  sub_1002B7674(a3 + 800, &v289[50]);
  v75 = v289[54];
  *(_OWORD *)(a3 + 848) = v289[53];
  *(_OWORD *)(a3 + 864) = v75;
  *(_OWORD *)(a3 + 880) = v289[55];
  v76 = v289[52];
  *(_OWORD *)(a3 + 816) = v289[51];
  *(_OWORD *)(a3 + 832) = v76;
  *(_QWORD *)(a3 + 896) = *(_QWORD *)&v289[56];
  v77 = (void **)(a3 + 904);
  if (*(char *)(a3 + 927) < 0)
    operator delete(*v77);
  *(_QWORD *)(a3 + 920) = *((_QWORD *)&v289[57] + 1);
  *(_OWORD *)v77 = *(_OWORD *)((char *)&v289[56] + 8);
  HIBYTE(v289[57]) = 0;
  BYTE8(v289[56]) = 0;
  *(_OWORD *)(a3 + 1104) = v289[69];
  *(_OWORD *)(a3 + 1120) = v289[70];
  *(_OWORD *)(a3 + 1136) = v289[71];
  *(_QWORD *)(a3 + 1152) = *(_QWORD *)&v289[72];
  *(_OWORD *)(a3 + 1040) = v289[65];
  *(_OWORD *)(a3 + 1056) = v289[66];
  *(_OWORD *)(a3 + 1072) = v289[67];
  *(_OWORD *)(a3 + 1088) = v289[68];
  v78 = v289[63];
  *(_OWORD *)(a3 + 992) = v289[62];
  *(_OWORD *)(a3 + 1008) = v78;
  *(_OWORD *)(a3 + 1024) = v289[64];
  v79 = v289[59];
  *(_OWORD *)(a3 + 928) = v289[58];
  *(_OWORD *)(a3 + 944) = v79;
  v80 = v289[61];
  *(_OWORD *)(a3 + 960) = v289[60];
  *(_OWORD *)(a3 + 976) = v80;
  sub_1002B7674(a3 + 1160, (_OWORD *)((char *)&v289[72] + 8));
  v81 = *(_OWORD *)((char *)&v289[80] + 8);
  *(_OWORD *)(a3 + 1272) = *(_OWORD *)((char *)&v289[79] + 8);
  *(_OWORD *)(a3 + 1288) = v81;
  *(_OWORD *)(a3 + 1304) = *(_OWORD *)((char *)&v289[81] + 8);
  v82 = *(_OWORD *)((char *)&v289[76] + 8);
  *(_OWORD *)(a3 + 1208) = *(_OWORD *)((char *)&v289[75] + 8);
  *(_OWORD *)(a3 + 1224) = v82;
  v83 = *(_OWORD *)((char *)&v289[78] + 8);
  *(_OWORD *)(a3 + 1240) = *(_OWORD *)((char *)&v289[77] + 8);
  *(_OWORD *)(a3 + 1256) = v83;
  v84 = *(_OWORD *)((char *)&v289[74] + 8);
  *(_OWORD *)(a3 + 1176) = *(_OWORD *)((char *)&v289[73] + 8);
  *(_OWORD *)(a3 + 1192) = v84;
  v85 = *(void **)(a3 + 1320);
  *(_QWORD *)(a3 + 1320) = *((_QWORD *)&v289[82] + 1);
  *((_QWORD *)&v289[82] + 1) = 0;

  *(_OWORD *)(a3 + 1472) = v289[92];
  *(_OWORD *)(a3 + 1488) = v289[93];
  *(_OWORD *)(a3 + 1504) = v289[94];
  *(_QWORD *)(a3 + 1520) = *(_QWORD *)&v289[95];
  *(_OWORD *)(a3 + 1408) = v289[88];
  *(_OWORD *)(a3 + 1424) = v289[89];
  *(_OWORD *)(a3 + 1440) = v289[90];
  *(_OWORD *)(a3 + 1456) = v289[91];
  *(_OWORD *)(a3 + 1344) = v289[84];
  *(_OWORD *)(a3 + 1360) = v289[85];
  *(_OWORD *)(a3 + 1376) = v289[86];
  *(_OWORD *)(a3 + 1392) = v289[87];
  *(_OWORD *)(a3 + 1328) = v289[83];

  v86 = *(std::__shared_weak_count **)&v289[73];
  if (*(_QWORD *)&v289[73])
  {
    v87 = (unint64_t *)(*(_QWORD *)&v289[73] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (SHIBYTE(v289[57]) < 0)
    operator delete(*((void **)&v289[56] + 1));
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v289[50] + 1);
  if (*((_QWORD *)&v289[50] + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v289[50] + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v64 = *(std::__shared_weak_count **)&v289[43];
  if (*(_QWORD *)&v289[43])
  {
    v92 = (unint64_t *)(*(_QWORD *)&v289[43] + 8);
    do
      v66 = __ldaxr(v92);
    while (__stlxr(v66 - 1, v92));
LABEL_77:
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return 0;
}

void sub_100C94A54(_Unwind_Exception *a1)
{
  raven::RavenSolutionEvent::~RavenSolutionEvent((raven::RavenSolutionEvent *)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_100C94AF8(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  const char *v44;
  const char *v45;
  uint8_t *v46;
  uint64_t v47;
  _DWORD v48[2];
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  const char *v90;
  uint8_t buf[4];
  int v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  const char *v134;

  v2 = (std::mutex *)(a1 + 4400);
  std::mutex::lock((std::mutex *)(a1 + 4400));
  v47 = 0;
  sub_100073658((int *)&v47 + 1, &v47, *(double *)(a1 + 3056));
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v3 = (uint64_t *)(a1 + 2876);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 648);
    v6 = *v3;
    v7 = *(_QWORD *)(a1 + 2884);
    v8 = *(_QWORD *)(a1 + 2892);
    v9 = *(_QWORD *)(a1 + 2900);
    v10 = *(_QWORD *)(a1 + 2908);
    v11 = *(_QWORD *)(a1 + 2916);
    v12 = *(_QWORD *)(a1 + 2924);
    v13 = *(_QWORD *)(a1 + 2932);
    v14 = *(_QWORD *)(a1 + 2940);
    v15 = *(double *)(a1 + 1616) + (double)*(uint64_t *)(a1 + 1608);
    v16 = *(float *)(a1 + 3072);
    v17 = *(float *)(a1 + 3076);
    v18 = *(float *)(a1 + 3080);
    v19 = *(_QWORD *)(a1 + 1584);
    v20 = *(_QWORD *)(a1 + 1592);
    v21 = *(_QWORD *)(a1 + 1600);
    v22 = *(double *)(a1 + 2440) * 1000000000.0;
    v23 = sqrt(*(double *)(a1 + 2464)) * 1000000000.0;
    if (*(_BYTE *)(a1 + 4664))
      v24 = "GNSSLocationService";
    else
      v24 = "locationd";
    *(_DWORD *)buf = 67245571;
    v92 = v5;
    v93 = 2049;
    v94 = v6;
    v95 = 2049;
    v96 = v7;
    v97 = 2050;
    v98 = v8;
    v99 = 2049;
    v100 = v9;
    v101 = 2050;
    v102 = v10;
    v103 = 2049;
    v104 = v11;
    v105 = 2050;
    v106 = v12;
    v107 = 2049;
    v108 = v13;
    v109 = 2050;
    v110 = v14;
    v111 = 1026;
    v112 = HIDWORD(v47);
    v113 = 1026;
    v114 = v47;
    v115 = 2050;
    v116 = v15;
    v117 = 2050;
    v118 = v16;
    v119 = 2050;
    v120 = v17;
    v121 = 2050;
    v122 = v18;
    v123 = 2050;
    v124 = v19;
    v125 = 2050;
    v126 = v20;
    v127 = 2050;
    v128 = v21;
    v129 = 2050;
    v130 = v22;
    v131 = 2050;
    v132 = v23;
    v133 = 2082;
    v134 = v24;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Raven,Fix,1,solution_type,%{public}d,lat,%{private}.8f,lon,%{private}.8f,hunc,%{public}.1f,alt,%{private}.2f,alt_unc,%{public}.1f,speed,%{private}.2f,speed_unc,%{public}.1f,course,%{private}.1f,course_unc,%{public}.1f,gps_week,%{public}d,gps_tow_ms,%{public}d,raven_time,%{public}.3f,err_elp_A,%{public}.1f,err_elp_B,%{public}.1f,err_elp_AZ,%{public}.1f,weight_PT,%{public}.1f,weight_CE,%{public}.1f,weight_PNT,%{public}.1f,clkD,%{public}.1f,clkD_unc,%{public}.1f,generatingProcess,%{public}s", buf, 0xD2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v25 = *(unsigned __int8 *)(a1 + 648);
    v26 = *v3;
    v27 = *(_QWORD *)(a1 + 2884);
    v28 = *(_QWORD *)(a1 + 2892);
    v29 = *(_QWORD *)(a1 + 2900);
    v30 = *(_QWORD *)(a1 + 2908);
    v31 = *(_QWORD *)(a1 + 2916);
    v32 = *(_QWORD *)(a1 + 2924);
    v33 = *(_QWORD *)(a1 + 2932);
    v34 = *(_QWORD *)(a1 + 2940);
    v35 = *(double *)(a1 + 1616) + (double)*(uint64_t *)(a1 + 1608);
    v36 = *(float *)(a1 + 3072);
    v37 = *(float *)(a1 + 3076);
    v38 = *(float *)(a1 + 3080);
    v39 = *(_QWORD *)(a1 + 1584);
    v40 = *(_QWORD *)(a1 + 1592);
    v41 = *(_QWORD *)(a1 + 1600);
    v42 = *(double *)(a1 + 2440) * 1000000000.0;
    v43 = sqrt(*(double *)(a1 + 2464)) * 1000000000.0;
    if (*(_BYTE *)(a1 + 4664))
      v44 = "GNSSLocationService";
    else
      v44 = "locationd";
    v48[0] = 67245571;
    v48[1] = v25;
    v49 = 2049;
    v50 = v26;
    v51 = 2049;
    v52 = v27;
    v53 = 2050;
    v54 = v28;
    v55 = 2049;
    v56 = v29;
    v57 = 2050;
    v58 = v30;
    v59 = 2049;
    v60 = v31;
    v61 = 2050;
    v62 = v32;
    v63 = 2049;
    v64 = v33;
    v65 = 2050;
    v66 = v34;
    v67 = 1026;
    v68 = HIDWORD(v47);
    v69 = 1026;
    v70 = v47;
    v71 = 2050;
    v72 = v35;
    v73 = 2050;
    v74 = v36;
    v75 = 2050;
    v76 = v37;
    v77 = 2050;
    v78 = v38;
    v79 = 2050;
    v80 = v39;
    v81 = 2050;
    v82 = v40;
    v83 = 2050;
    v84 = v41;
    v85 = 2050;
    v86 = v42;
    v87 = 2050;
    v88 = v43;
    v89 = 2082;
    v90 = v44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven,Fix,1,solution_type,%{public}d,lat,%{private}.8f,lon,%{private}.8f,hunc,%{public}.1f,alt,%{private}.2f,alt_unc,%{public}.1f,speed,%{private}.2f,speed_unc,%{public}.1f,course,%{private}.1f,course_unc,%{public}.1f,gps_week,%{public}d,gps_tow_ms,%{public}d,raven_time,%{public}.3f,err_elp_A,%{public}.1f,err_elp_B,%{public}.1f,err_elp_AZ,%{public}.1f,weight_PT,%{public}.1f,weight_CE,%{public}.1f,weight_PNT,%{public}.1f,clkD,%{public}.1f,clkD_unc,%{public}.1f,generatingProcess,%{public}s", v48, 210);
    v46 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::LogMostRecentRavenSolution() const", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
  std::mutex::unlock(v2);
}

void sub_100C94F68(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100C94F80(uint64_t a1)
{
  std::mutex *v2;
  void *__p[2];
  uint64_t v4;

  if (*(_QWORD *)(a1 + 4680))
  {
    __p[0] = 0;
    __p[1] = 0;
    v4 = 0;
    v2 = (std::mutex *)(a1 + 4400);
    std::mutex::lock((std::mutex *)(a1 + 4400));
    raven::ConvertRavenSolutionEventToSerializedProtobufLogEntry(a1 + 440, __p);
    std::mutex::unlock(v2);
    sub_100166CE0(*(_QWORD *)(a1 + 4680), (uint64_t)__p);
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
}

void sub_100C94FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100C95024(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BOOL8 result;
  __int128 v5;
  CNTimeSpan v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int RavenIonosphereParameters;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  int64x2_t v17;
  _WORD v18[8];
  uint8_t buf[16];
  _OWORD v20[2];
  unsigned __int128 v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;

  if (!*(_BYTE *)(a1 + 4663) || *(_BYTE *)(a1 + 4664) || !*(_QWORD *)(a1 + 312) || *(_QWORD *)(a1 + 4736) == a1 + 4688)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Raven: Ionosphere coefficients requested when estimator not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v18[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: Ionosphere coefficients requested when estimator not enabled", v18, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetIonosphereParameters(cnnavigation::ThinShellIonosphereParameters &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    memset(v20, 0, sizeof(v20));
    *(_OWORD *)buf = 0u;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&buf[8], 0, 0.0);
    v17 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)((char *)v20 + 8) = v17;
    v21 = 0uLL;
    *((_QWORD *)&v20[1] + 1) = 0x7FF8000000000000;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v21, 0, 0.0);
    result = 0;
    v22 = v17;
    v23 = v17;
    v24 = v17;
    v25 = v17;
    v26 = v17;
    v27 = v17;
    v28 = v17;
    v5 = v20[0];
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 16) = v5;
    v6 = (CNTimeSpan)v21;
    *(_OWORD *)(a2 + 32) = v20[1];
    *(CNTimeSpan *)(a2 + 48) = v6;
    v7 = v27;
    *(int64x2_t *)(a2 + 128) = v26;
    *(int64x2_t *)(a2 + 144) = v7;
    *(int64x2_t *)(a2 + 160) = v28;
    v8 = v23;
    *(int64x2_t *)(a2 + 64) = v22;
    *(int64x2_t *)(a2 + 80) = v8;
    v9 = v25;
    *(int64x2_t *)(a2 + 96) = v24;
    *(int64x2_t *)(a2 + 112) = v9;
  }
  else
  {
    std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
    RavenIonosphereParameters = raven::RavenSupervisor::GetRavenIonosphereParameters(*(raven::RavenSupervisor **)(a1 + 312), (ThinShellIonosphereParameters *)a2);
    std::timed_mutex::unlock((std::timed_mutex *)(a1 + 320));
    if (RavenIonosphereParameters)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v12 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Raven: could not retrieve Ionosphere parameters", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v18[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 1, "Raven: could not retrieve Ionosphere parameters", v18, 2);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRavenController::GetIonosphereParameters(cnnavigation::ThinShellIonosphereParameters &) const", "%s\n", v13);
        if (v14 != buf)
          free(v14);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_100C953F0(_Unwind_Exception *a1)
{
  std::timed_mutex *v1;

  std::timed_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100C9540C(_QWORD *a1)
{
  *a1 = off_10217C480;
  operator delete();
}

void sub_100C9542C(id a1)
{
  qword_1022A00A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

uint64_t sub_100C95458(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_100C9559C(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 8), "");
  sub_1015A2E04((_QWORD *)(a1 + 32), "");
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_100C955F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C95624(uint64_t a1)
{
  sub_100C9572C(a1 + 8);
  sub_100C957B8((int64x2_t *)(a1 + 104));
  sub_100C958D4((_OWORD *)(a1 + 1168));
  sub_100C959AC(a1 + 2032);
  sub_100C9568C(a1);
  return a1;
}

void sub_100C95678(_Unwind_Exception *a1)
{
  cnframework::TimestampedEvent *v1;

  cnframework::TimestampedEvent::~TimestampedEvent(v1);
  _Unwind_Resume(a1);
}

double sub_100C9568C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[54];

  memset(v6, 0, 96);
  sub_100C9572C((uint64_t)v6);
  v2 = v6[3];
  *(_OWORD *)(a1 + 40) = v6[2];
  *(_OWORD *)(a1 + 56) = v2;
  v3 = v6[5];
  *(_OWORD *)(a1 + 72) = v6[4];
  *(_OWORD *)(a1 + 88) = v3;
  v4 = v6[1];
  *(_OWORD *)(a1 + 8) = v6[0];
  *(_OWORD *)(a1 + 24) = v4;
  sub_100C95808(a1 + 104);
  bzero(v6, 0x360uLL);
  sub_100C958D4(v6);
  memcpy((void *)(a1 + 1168), v6, 0x360uLL);
  return sub_100C95A24(a1 + 2032);
}

uint64_t sub_100C9572C(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)a1, 0, 0.0);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 24), 0, 0.0);
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 48), 0, 0.0);
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 72), 0, 0.0);
  *(_QWORD *)(a1 + 88) = 0x7FF8000000000000;
  return a1;
}

int64x2_t *sub_100C957B8(int64x2_t *a1)
{
  a1->i8[0] = 0;
  sub_100C9572C((uint64_t)&a1->i64[1]);
  a1[6].i16[4] = 0;
  a1[7].i64[1] = 0;
  a1[8].i64[0] = 0;
  a1[60] = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[61].i64[0] = 0;
  a1[61].i64[1] = 0x7FF8000000000000;
  sub_100C95808((uint64_t)a1);
  return a1;
}

void sub_100C95808(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unsigned __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_BYTE *)a1 = 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  sub_100C9572C((uint64_t)&v5);
  v2 = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v2;
  v3 = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 88) = v3;
  v4 = v6;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v5 = 0uLL;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v5, 0, 0.0);
  *(_OWORD *)(a1 + 120) = v5;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_QWORD *)(a1 + 1056) = 0;
  *(int64x2_t *)(a1 + 960) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 984) = 0x7FF8000000000000;
  bzero((void *)(a1 + 164), 0x318uLL);
}

int64x2_t sub_100C958D4(_OWORD *a1)
{
  uint64_t v1;
  int64x2_t result;

  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  v1 = sub_100C9572C((uint64_t)a1);
  *(_BYTE *)(v1 + 96) = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v1 + 104) = result;
  *(int64x2_t *)(v1 + 120) = result;
  *(int64x2_t *)(v1 + 136) = result;
  *(int64x2_t *)(v1 + 152) = result;
  *(_QWORD *)(v1 + 168) = 0x7FF8000000000000;
  *(_WORD *)(v1 + 176) = 0;
  *(int64x2_t *)(v1 + 184) = result;
  *(int64x2_t *)(v1 + 200) = result;
  *(int64x2_t *)(v1 + 216) = result;
  *(int64x2_t *)(v1 + 232) = result;
  *(int64x2_t *)(v1 + 248) = result;
  *(_QWORD *)(v1 + 264) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 272) = result;
  *(_QWORD *)(v1 + 288) = 0x7FF8000000000000;
  *(_BYTE *)(v1 + 296) = 0;
  *(int64x2_t *)(v1 + 304) = result;
  *(int64x2_t *)(v1 + 320) = result;
  *(int64x2_t *)(v1 + 336) = result;
  *(int64x2_t *)(v1 + 352) = result;
  *(_QWORD *)(v1 + 368) = 0x7FF8000000000000;
  *(_BYTE *)(v1 + 376) = 0;
  *(int64x2_t *)(v1 + 384) = result;
  *(int64x2_t *)(v1 + 400) = result;
  *(int64x2_t *)(v1 + 416) = result;
  *(int64x2_t *)(v1 + 432) = result;
  *(_QWORD *)(v1 + 448) = 0x7FF8000000000000;
  *(_BYTE *)(v1 + 456) = 0;
  *(int64x2_t *)(v1 + 464) = result;
  *(int64x2_t *)(v1 + 480) = result;
  *(int64x2_t *)(v1 + 496) = result;
  *(int64x2_t *)(v1 + 512) = result;
  *(int64x2_t *)(v1 + 528) = result;
  *(int64x2_t *)(v1 + 544) = result;
  *(int64x2_t *)(v1 + 560) = result;
  *(_BYTE *)(v1 + 576) = 0;
  *(_QWORD *)(v1 + 584) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 592) = result;
  *(int64x2_t *)(v1 + 608) = result;
  *(int64x2_t *)(v1 + 624) = result;
  *(int64x2_t *)(v1 + 640) = result;
  *(_BYTE *)(v1 + 656) = 0;
  *(_QWORD *)(v1 + 664) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 672) = result;
  *(int64x2_t *)(v1 + 688) = result;
  *(int64x2_t *)(v1 + 704) = result;
  *(int64x2_t *)(v1 + 720) = result;
  *(_BYTE *)(v1 + 736) = 0;
  *(_QWORD *)(v1 + 744) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 752) = result;
  *(int64x2_t *)(v1 + 768) = result;
  *(int64x2_t *)(v1 + 784) = result;
  *(int64x2_t *)(v1 + 800) = result;
  *(_BYTE *)(v1 + 816) = 0;
  *(_QWORD *)(v1 + 824) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 832) = result;
  *(int64x2_t *)(v1 + 848) = result;
  return result;
}

uint64_t sub_100C959AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100C9572C(a1);
  *(_BYTE *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  sub_100C9572C(v2 + 192);
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 384) = 0x3FE0000000000000;
  *(_BYTE *)(a1 + 392) = 0;
  sub_100C95A24(a1);
  return a1;
}

double sub_100C95A24(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  sub_100C9572C((uint64_t)&v10);
  v2 = v13;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v2;
  v3 = v15;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v3;
  v4 = v11;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  sub_100C9572C((uint64_t)&v10 + 8);
  v5 = v12;
  *(_OWORD *)(a1 + 232) = v13;
  v6 = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 264) = v6;
  result = *(double *)&v10;
  v8 = v11;
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 200) = v8;
  v9 = v16;
  *(_OWORD *)(a1 + 216) = v5;
  *(_QWORD *)(a1 + 280) = v9;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 384) = 0x3FE0000000000000;
  *(_BYTE *)(a1 + 392) = 0;
  return result;
}

uint64_t sub_100C95B04(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 547;
  *(_QWORD *)a1 = off_10217C610;
  sub_1015A2E04((_QWORD *)(a1 + 8), "");
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 33) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = xmmword_101BAFDC0;
  *(_OWORD *)(a1 + 88) = xmmword_101C1F600;
  *(_OWORD *)(a1 + 104) = xmmword_101C1F610;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_OWORD *)(a1 + 136) = xmmword_101C1F610;
  *(_OWORD *)(a1 + 152) = xmmword_101C1F600;
  *(_OWORD *)(a1 + 168) = xmmword_101C1F610;
  *(int64x2_t *)(a1 + 184) = vdupq_n_s64(0x3F9B573EAB367A10uLL);
  *(_OWORD *)(a1 + 200) = xmmword_101C1F610;
  *(_OWORD *)(a1 + 216) = xmmword_101C1F600;
  *(_OWORD *)(a1 + 232) = xmmword_101C1F610;
  *(_OWORD *)(a1 + 248) = xmmword_101C1F620;
  *(_QWORD *)(a1 + 264) = 0x3FF0000000000000;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 272) = _Q2;
  *(_OWORD *)(a1 + 288) = xmmword_101C1F630;
  *(_OWORD *)(a1 + 304) = xmmword_101C1F640;
  *(_OWORD *)(a1 + 320) = xmmword_101C1F650;
  *(_OWORD *)(a1 + 336) = xmmword_101C1F660;
  *(_OWORD *)(a1 + 352) = xmmword_101C1F670;
  *(_OWORD *)(a1 + 368) = xmmword_101C1F680;
  *(_OWORD *)(a1 + 384) = xmmword_101C1F690;
  *(_OWORD *)(a1 + 400) = xmmword_101C1F6A0;
  *(_QWORD *)(a1 + 416) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 424) = 2;
  *(_OWORD *)(a1 + 432) = xmmword_101C1F6B0;
  *(_OWORD *)(a1 + 448) = xmmword_101C1F6C0;
  *(_OWORD *)(a1 + 464) = xmmword_101C1F6D0;
  *(_OWORD *)(a1 + 480) = xmmword_101C1F6E0;
  *(_OWORD *)(a1 + 496) = xmmword_101C1F6F0;
  *(_OWORD *)(a1 + 512) = xmmword_101C1F700;
  *(_OWORD *)(a1 + 528) = xmmword_101C1F710;
  *(_WORD *)(a1 + 544) = 257;
  *(_BYTE *)(a1 + 546) = 1;
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(a1 + 551) = 1;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_101C1F720;
  *(_DWORD *)(a1 + 576) = 0x1000000;
  *(_BYTE *)(a1 + 580) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_WORD *)(a1 + 588) = 256;
  *(_BYTE *)(a1 + 590) = 1;
  *(_DWORD *)(a1 + 592) = 16843009;
  *(_WORD *)(a1 + 596) = 1;
  *(_QWORD *)(a1 + 598) = 0x101010101010101;
  *(_QWORD *)(a1 + 603) = 0x101010101010101;
  *(_DWORD *)(a1 + 612) = 1096810496;
  *(_QWORD *)(a1 + 616) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 624) = xmmword_101C1F730;
  *(_WORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 648) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 656) = xmmword_101C1F740;
  *(_OWORD *)(a1 + 672) = xmmword_101C1F750;
  *(_OWORD *)(a1 + 688) = xmmword_101C1F760;
  *(_OWORD *)(a1 + 704) = xmmword_101C1F770;
  *(_OWORD *)(a1 + 720) = xmmword_101C1F780;
  *(_OWORD *)(a1 + 736) = xmmword_101C1F790;
  *(_OWORD *)(a1 + 752) = xmmword_101C1F7A0;
  *(_OWORD *)(a1 + 768) = xmmword_101C1F7B0;
  *(_OWORD *)(a1 + 784) = xmmword_101C1F7C0;
  *(_OWORD *)(a1 + 800) = xmmword_101C1F7D0;
  *(_QWORD *)(a1 + 816) = 0x3DB5FD7FE1796495;
  *(_DWORD *)(a1 + 824) = 2;
  *(_QWORD *)(a1 + 832) = 0x3FE0000000000000;
  *(_WORD *)(a1 + 840) = 256;
  *(_OWORD *)(a1 + 848) = xmmword_101C1F7E0;
  *(_OWORD *)(a1 + 864) = xmmword_101C1F7F0;
  *(_OWORD *)(a1 + 880) = xmmword_101C1F800;
  *(_OWORD *)(a1 + 896) = xmmword_101C1F810;
  *(_OWORD *)(a1 + 912) = xmmword_101C1F820;
  *(_OWORD *)(a1 + 928) = xmmword_101C1F830;
  *(_OWORD *)(a1 + 944) = xmmword_101C1F840;
  *(_OWORD *)(a1 + 960) = xmmword_101BDB780;
  *(_QWORD *)(a1 + 976) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 984) = 350;
  *(_OWORD *)(a1 + 992) = xmmword_101C1F850;
  *(_OWORD *)(a1 + 1008) = xmmword_101C1F860;
  *(_QWORD *)(a1 + 1024) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 1032) = 3;
  *(_OWORD *)(a1 + 1040) = xmmword_101C1F870;
  *(_OWORD *)(a1 + 1056) = xmmword_101C1F880;
  *(_OWORD *)(a1 + 1072) = xmmword_101C1F890;
  *(_OWORD *)(a1 + 1088) = _Q2;
  *(_OWORD *)(a1 + 1104) = xmmword_101C1F8A0;
  *(_OWORD *)(a1 + 1120) = xmmword_101C1F8B0;
  *(_OWORD *)(a1 + 1136) = xmmword_101C1F8C0;
  *(_OWORD *)(a1 + 1152) = xmmword_101C1F8D0;
  *(_OWORD *)(a1 + 1168) = xmmword_101C1F8E0;
  *(_QWORD *)(a1 + 1184) = 0x4018000000000000;
  *(_DWORD *)(a1 + 1192) = 3;
  *(_OWORD *)(a1 + 1200) = xmmword_101C1F8F0;
  *(_OWORD *)(a1 + 1216) = xmmword_101C15ED0;
  *(_OWORD *)(a1 + 1232) = xmmword_101C1F900;
  *(_OWORD *)(a1 + 1248) = xmmword_101C1F910;
  *(_OWORD *)(a1 + 1264) = xmmword_101C1F8F0;
  *(_DWORD *)(a1 + 1280) = 6;
  *(_QWORD *)(a1 + 1288) = 0x4000000000000000;
  *(_DWORD *)(a1 + 1296) = 6;
  *(_QWORD *)(a1 + 1304) = 0x4000000000000000;
  *(_DWORD *)(a1 + 1312) = 2;
  *(_QWORD *)(a1 + 1320) = 0x4000000000000000;
  *(_OWORD *)(a1 + 1328) = xmmword_101C1F920;
  *(_OWORD *)(a1 + 1344) = xmmword_101C1F930;
  *(_OWORD *)(a1 + 1360) = xmmword_101C1F940;
  *(_OWORD *)(a1 + 1376) = xmmword_101C1F950;
  __asm { FMOV            V2.2D, #6.0 }
  *(_OWORD *)(a1 + 1392) = _Q2;
  *(_OWORD *)(a1 + 1408) = xmmword_101C1F960;
  __asm { FMOV            V2.2D, #3.0 }
  *(_OWORD *)(a1 + 1424) = _Q2;
  *(_OWORD *)(a1 + 1440) = _Q2;
  *(_OWORD *)(a1 + 1456) = xmmword_101C1F970;
  *(_DWORD *)(a1 + 1472) = 2;
  *(_QWORD *)(a1 + 1480) = 0x4024000000000000;
  *(int64x2_t *)(a1 + 1488) = vdupq_n_s64(0x3FE0CCCCCCCCCCCDuLL);
  *(_OWORD *)(a1 + 1504) = xmmword_101C1F980;
  *(_OWORD *)(a1 + 1520) = xmmword_101C1F990;
  *(_OWORD *)(a1 + 1536) = xmmword_101C1F9A0;
  *(int64x2_t *)(a1 + 1552) = vdupq_n_s64(0x4066800000000000uLL);
  *(_OWORD *)(a1 + 1568) = xmmword_101C1F9B0;
  *(_OWORD *)(a1 + 1584) = xmmword_101C1F9C0;
  *(_OWORD *)(a1 + 1600) = xmmword_101C1F9D0;
  *(_OWORD *)(a1 + 1616) = xmmword_101C1F9E0;
  *(_OWORD *)(a1 + 1632) = xmmword_101C1F9F0;
  *(_QWORD *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1656) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 1672) = unk_101C1FD90;
  *(_OWORD *)(a1 + 1688) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 1704) = unk_101C1FD90;
  *(_OWORD *)(a1 + 1720) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 1736) = unk_101C1FD90;
  *(_OWORD *)(a1 + 1752) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 1768) = unk_101C1FD90;
  *(_OWORD *)(a1 + 1784) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 1800) = unk_101C1FD90;
  *(_OWORD *)(a1 + 1816) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 1832) = unk_101C1FD90;
  *(_OWORD *)(a1 + 1848) = xmmword_101C1FD40;
  *(_OWORD *)(a1 + 1864) = unk_101C1FD50;
  *(_OWORD *)(a1 + 1880) = xmmword_101C1FD20;
  *(_OWORD *)(a1 + 1896) = unk_101C1FD30;
  *(_OWORD *)(a1 + 1912) = xmmword_101C1FD40;
  *(_OWORD *)(a1 + 1928) = unk_101C1FD50;
  *(_OWORD *)(a1 + 1944) = xmmword_101C1FD60;
  *(_OWORD *)(a1 + 1960) = unk_101C1FD70;
  *(_OWORD *)(a1 + 1976) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 1992) = unk_101C1FD90;
  *(_OWORD *)(a1 + 2008) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 2024) = unk_101C1FD90;
  *(_OWORD *)(a1 + 2040) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 2056) = unk_101C1FD90;
  *(_OWORD *)(a1 + 2072) = xmmword_101C1FD80;
  *(_OWORD *)(a1 + 2088) = unk_101C1FD90;
  *(_BYTE *)(a1 + 2104) = 0;
  *(_OWORD *)(a1 + 2112) = xmmword_101C1FA00;
  *(_OWORD *)(a1 + 2128) = xmmword_101C1FA10;
  *(_OWORD *)(a1 + 2144) = xmmword_101C1F970;
  *(_OWORD *)(a1 + 2160) = xmmword_101C1FA20;
  *(_OWORD *)(a1 + 2176) = xmmword_101C1FA30;
  *(_WORD *)(a1 + 2192) = 0;
  *(_QWORD *)(a1 + 2200) = 0x4034000000000000;
  *(_DWORD *)(a1 + 2208) = 0;
  *(_QWORD *)(a1 + 2216) = 0x404E000000000000;
  *(_OWORD *)(a1 + 2224) = xmmword_101C1FA40;
  *(_OWORD *)(a1 + 2240) = xmmword_101C1FA50;
  *(_OWORD *)(a1 + 2256) = xmmword_101C1FA60;
  *(_QWORD *)(a1 + 2272) = 0x3FE3333333333333;
  *(_DWORD *)(a1 + 2280) = 1;
  *(int64x2_t *)(a1 + 2288) = vdupq_n_s64(0x3FE3333333333333uLL);
  *(_WORD *)(a1 + 2304) = 0;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_QWORD *)(a1 + 2352) = 0x3FD51EB851EB851FLL;
  *(_OWORD *)(a1 + 2360) = xmmword_101C1FDA0;
  *(_OWORD *)(a1 + 2376) = unk_101C1FDB0;
  *(_WORD *)(a1 + 2392) = 257;
  *(_BYTE *)(a1 + 2394) = 1;
  *(_OWORD *)(a1 + 2400) = xmmword_101C1FDC0;
  *(_OWORD *)(a1 + 2416) = unk_101C1FDD0;
  *(_OWORD *)(a1 + 2432) = xmmword_101C1FA70;
  *(_OWORD *)(a1 + 2448) = xmmword_101C1FA80;
  *(_OWORD *)(a1 + 2464) = xmmword_101C1FA90;
  __asm { FMOV            V1.2D, #0.5 }
  *(_OWORD *)(a1 + 2480) = _Q1;
  *(int64x2_t *)(a1 + 2496) = vdupq_n_s64(0x3FEE666666666666uLL);
  *(_OWORD *)(a1 + 2512) = xmmword_101BE78D0;
  *(_OWORD *)(a1 + 2528) = xmmword_101C1FAA0;
  *(_BYTE *)(a1 + 2544) = 1;
  *(_QWORD *)(a1 + 2552) = 0x40BC200000000000;
  *(_WORD *)(a1 + 2560) = 1;
  *(_BYTE *)(a1 + 2562) = 0;
  *(_QWORD *)(a1 + 2568) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2576) = xmmword_101C1FED0;
  *(_OWORD *)(a1 + 2640) = xmmword_101C1FF10;
  *(_OWORD *)(a1 + 2656) = xmmword_101C1FDE0;
  *(_OWORD *)(a1 + 2720) = xmmword_101C1FE20;
  *(_OWORD *)(a1 + 2704) = unk_101C1FE10;
  *(_OWORD *)(a1 + 2624) = unk_101C1FF00;
  *(_OWORD *)(a1 + 2608) = xmmword_101C1FEF0;
  *(_OWORD *)(a1 + 2592) = unk_101C1FEE0;
  *(_OWORD *)(a1 + 2688) = xmmword_101C1FE00;
  *(_OWORD *)(a1 + 2672) = unk_101C1FDF0;
  *(_BYTE *)(a1 + 2736) = 0;
  *(_OWORD *)(a1 + 2808) = xmmword_101C1FE70;
  *(_OWORD *)(a1 + 2776) = xmmword_101C1FE50;
  *(_OWORD *)(a1 + 2792) = unk_101C1FE60;
  *(_OWORD *)(a1 + 2744) = xmmword_101C1FE30;
  *(_OWORD *)(a1 + 2760) = unk_101C1FE40;
  *(_OWORD *)(a1 + 2888) = xmmword_101C1FEC0;
  *(_OWORD *)(a1 + 2856) = xmmword_101C1FEA0;
  *(_OWORD *)(a1 + 2872) = unk_101C1FEB0;
  *(_OWORD *)(a1 + 2824) = xmmword_101C1FE80;
  *(_OWORD *)(a1 + 2840) = unk_101C1FE90;
  *(_OWORD *)(a1 + 2952) = unk_101C1FF00;
  *(_OWORD *)(a1 + 2968) = xmmword_101C1FF10;
  *(_OWORD *)(a1 + 2920) = unk_101C1FEE0;
  *(_OWORD *)(a1 + 2936) = xmmword_101C1FEF0;
  *(_OWORD *)(a1 + 2904) = xmmword_101C1FED0;
  *(_OWORD *)(a1 + 3032) = unk_101C1FF50;
  *(_OWORD *)(a1 + 3048) = xmmword_101C1FF60;
  *(_OWORD *)(a1 + 3000) = unk_101C1FF30;
  *(_OWORD *)(a1 + 3016) = xmmword_101C1FF40;
  *(_OWORD *)(a1 + 2984) = xmmword_101C1FF20;
  *(_QWORD *)(a1 + 3064) = 0x3FEE666666666666;
  *(_OWORD *)(a1 + 3072) = xmmword_101C1FAB0;
  *(_OWORD *)(a1 + 3088) = xmmword_101C1FAC0;
  *(_OWORD *)(a1 + 3104) = xmmword_101C1FAD0;
  *(_OWORD *)(a1 + 3120) = xmmword_101C1FAE0;
  *(_OWORD *)(a1 + 3136) = xmmword_101C1FAF0;
  *(_OWORD *)(a1 + 3152) = xmmword_101C1FB00;
  *(_OWORD *)(a1 + 3168) = xmmword_101C1FB10;
  *(_OWORD *)(a1 + 3184) = xmmword_101C1FB20;
  *(_OWORD *)(a1 + 3200) = xmmword_101C1FB30;
  *(_OWORD *)(a1 + 3216) = xmmword_101C1FB40;
  *(_OWORD *)(a1 + 3232) = xmmword_101C1F6F0;
  *(_OWORD *)(a1 + 3248) = xmmword_101C1FB50;
  *(_OWORD *)(a1 + 3264) = xmmword_101C1FB60;
  *(_OWORD *)(a1 + 3280) = xmmword_101C1FB70;
  *(_OWORD *)(a1 + 3296) = xmmword_101C1FB80;
  __asm { FMOV            V0.2D, #5.0 }
  *(_OWORD *)(a1 + 3312) = _Q0;
  *(_OWORD *)(a1 + 3328) = xmmword_101C1FB90;
  *(_QWORD *)(a1 + 3344) = 0x3FE999999999999ALL;
  *(_BYTE *)(a1 + 3352) = 1;
  *(_OWORD *)(a1 + 3360) = xmmword_101C1FBA0;
  *(_QWORD *)(a1 + 3376) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 3384) = 0x400000005;
  *(_OWORD *)(a1 + 3392) = xmmword_101C1FBB0;
  *(_OWORD *)(a1 + 3408) = xmmword_101C1FBC0;
  *(_OWORD *)(a1 + 3424) = xmmword_101C1FBD0;
  *(int64x2_t *)(a1 + 3440) = vdupq_n_s64(0x4014880F19EA2B99uLL);
  *(_OWORD *)(a1 + 3456) = xmmword_101C1FBE0;
  *(_OWORD *)(a1 + 3472) = xmmword_101C1FBF0;
  *(_QWORD *)(a1 + 3488) = 0x4022000000000000;
  *(_BYTE *)(a1 + 3496) = 0;
  *(_OWORD *)(a1 + 3504) = xmmword_101C1FC00;
  *(_WORD *)(a1 + 3520) = 257;
  *(_QWORD *)(a1 + 3528) = 0x4072C00000000000;
  *(_QWORD *)(a1 + 3536) = 0x412E848000000000;
  *(_QWORD *)(a1 + 3544) = 2;
  *(_BYTE *)(a1 + 3552) = 1;
  *(_QWORD *)(a1 + 3560) = 0x4014000000000000;
  *(_QWORD *)(a1 + 3568) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 3576) = 5;
  *(_BYTE *)(a1 + 3580) = 1;
  *(_OWORD *)(a1 + 3584) = xmmword_101C1FC10;
  *(_QWORD *)(a1 + 3600) = 0x4014000000000000;
  *(_QWORD *)(a1 + 3608) = 100;
  *(_OWORD *)(a1 + 3616) = xmmword_101C1FC20;
  *(_QWORD *)(a1 + 3632) = 0x3FD3333333333333;
  *(_QWORD *)(a1 + 3640) = 3;
  *(_BYTE *)(a1 + 3648) = 0;
  *(_DWORD *)(a1 + 3652) = 0;
  *(_BYTE *)(a1 + 3656) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 3664), "");
  *(_DWORD *)(a1 + 3688) = 10;
  *(_WORD *)(a1 + 3692) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 3696), "raven_output.bin");
  *(_WORD *)(a1 + 3720) = 256;
  *(_BYTE *)(a1 + 3722) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 3728), "raven_debug.txt");
  *(_WORD *)(a1 + 3752) = 0;
  *(_BYTE *)(a1 + 3754) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 3760), "raven_msr.txt");
  *(_BYTE *)(a1 + 3788) = 1;
  *(_DWORD *)(a1 + 3784) = 16843009;
  *(_WORD *)(a1 + 3789) = 0;
  *(_QWORD *)(v2 + 3244) = 0x101010101010101;
  *(_BYTE *)(a1 + 3799) = 0;
  *(_DWORD *)(a1 + 3800) = 16843009;
  *(_BYTE *)(a1 + 3804) = 0;
  *(_DWORD *)(a1 + 3808) = 16843009;
  *(_DWORD *)(a1 + 3805) = 16843009;
  *(_BYTE *)(a1 + 3812) = 0;
  *(_BYTE *)(a1 + 3817) = 1;
  *(_DWORD *)(a1 + 3813) = 16843009;
  *(_WORD *)(a1 + 3818) = 256;
  *(_BYTE *)(a1 + 3820) = 1;
  *(_DWORD *)(a1 + 3824) = 0;
  *(_BYTE *)(a1 + 3828) = 0;
  return a1;
}

void sub_100C96578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 3751) < 0)
    operator delete(*v6);
  if (*(char *)(v2 + 3719) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 3687) < 0)
    operator delete(*v4);
  sub_100261F44(v2 + 2320);
  sub_100259608((void ***)va);
  *(_QWORD *)v2 = v7 + 16;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100C965F8(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 3783) < 0)
    operator delete(*(void **)(a1 + 3760));
  if (*(char *)(a1 + 3751) < 0)
    operator delete(*(void **)(a1 + 3728));
  if (*(char *)(a1 + 3719) < 0)
    operator delete(*(void **)(a1 + 3696));
  if (*(char *)(a1 + 3687) < 0)
    operator delete(*(void **)(a1 + 3664));
  sub_100261F44(a1 + 2320);
  v3 = (void **)(a1 + 40);
  sub_100259608(&v3);
  *(_QWORD *)a1 = off_10217C610;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100C966A8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C966D4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100C96700(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0x300000003;
  *(_QWORD *)(a1 + 16) = off_102167280;
  *(_OWORD *)(a1 + 24) = xmmword_101C05640;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  return a1;
}

void sub_100C96768(_Unwind_Exception *a1)
{
  cnnavigation::details::JacobianBase *v1;

  cnnavigation::details::JacobianBase::~JacobianBase(v1);
  _Unwind_Resume(a1);
}

void sub_100C9677C()
{
  operator new();
}

void sub_100C967B8()
{
  operator delete();
}

void sub_100C967DC()
{
  operator new();
}

void sub_100C96818()
{
  operator delete();
}

void sub_100C9683C()
{
  operator new();
}

void sub_100C96878()
{
  operator delete();
}

void sub_100C9689C()
{
  operator new();
}

void sub_100C968D8()
{
  operator delete();
}

void sub_100C968FC(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100C96920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[4];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_100C96940(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_100C96964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[16];

  sub_100A9DEA4(a1, v3, a3);
}

_DWORD *sub_100C969B0(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;
  int v5;
  int v6;
  int v7;
  int i;
  int v9;

  if ((_DWORD *)a1 == a2)
    sub_101919348();
  result = sub_100079AC4(a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  v5 = a2[2];
  if (v5)
  {
    v6 = 0;
    v7 = a2[3];
    do
    {
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v9 = sub_100C96B08(a1, i, v6);
          result = (_DWORD *)sub_100C96B48((uint64_t)a2, v6, i);
          *result = v9;
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_100C96A58(uint64_t result, unsigned int a2, unsigned int a3)
{
  const char *v3;
  int v4;

  *(_QWORD *)(result + 24) = 0x100000003;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1021673E0;
  *(_QWORD *)(result + 8) = 0;
  if (a2 > 3)
  {
    v3 = "this->max_num_rows_ >= num_rows";
    v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 2)
  {
    v3 = "this->max_num_cols_ >= num_cols";
    v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_100C96AF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1021673B0;
  _Unwind_Resume(a1);
}

uint64_t sub_100C96B08(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_101919370();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_101919398();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1019193C0();
  return *(unsigned int *)(v3 + 4 * v4);
}

uint64_t sub_100C96B48(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_101918570();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_101918598();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1019185C0();
  return v3 + 4 * v4;
}

void sub_100C96B88(_QWORD *a1)
{
  a1[22] = off_1021673B0;
  a1[15] = off_1021673B0;
  *a1 = off_102155D60;
  operator delete();
}

void sub_100C96BC0()
{
  operator new();
}

void sub_100C96C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C96DA8((std::__thread_struct **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100C96CD4(std::__thread_struct **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  std::__thread_struct *v3;
  uint64_t v4;
  _QWORD *v5;
  std::__thread_struct **v7;

  v7 = a1;
  v1 = std::__thread_local_data();
  v2 = *v7;
  *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = v7[1];
  v4 = (uint64_t)v7[2];
  v5 = (std::__thread_struct_imp **)((char *)&v7[3]->__p_ + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(std::__thread_struct **)(*v5 + v3);
  ((void (*)(_QWORD *))v3)(v5);
  sub_100C96D58(&v7, 0);
  return 0;
}

void sub_100C96D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C96D58((std::__thread_struct ***)va, 0);
  _Unwind_Resume(a1);
}

std::__thread_struct ***sub_100C96D58(std::__thread_struct ***result, std::__thread_struct **a2)
{
  std::__thread_struct **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100C96DA8(v2, 0);
    operator delete();
  }
  return result;
}

std::__thread_struct *sub_100C96DA8(std::__thread_struct **a1, std::__thread_struct *a2)
{
  std::__thread_struct *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__thread_struct::~__thread_struct(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100C96DE4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100DEACBC();
    operator delete();
  }
  return result;
}

void sub_100C96E20(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_10217C7B8;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C96F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

BOOL sub_100C96F80(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

__n128 sub_100C96F9C(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[8];
  unsigned int v12;

  result = *a3;
  *(__n128 *)(*(_QWORD *)(a1 + 56) + 16 * *(unsigned int *)(a1 + 64)) = *a3;
  v4 = *(_DWORD *)(a1 + 68);
  v5 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v5;
  if (v5 >= v4)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(void **)(a1 + 16);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100C97054;
    v11[3] = &unk_1021579E0;
    v11[4] = v8;
    v11[5] = v7;
    v12 = v5;
    v11[6] = v9;
    v11[7] = v6;
    objc_msgSend(v10, "async:", v11);
    operator new[]();
  }
  return result;
}

uint64_t sub_100C97054(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_100C970B4(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_10217C808;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C97210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

BOOL sub_100C97238(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

__n128 sub_100C97254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[8];
  unsigned int v18;

  v3 = *(_QWORD *)(a1 + 56) + 120 * *(unsigned int *)(a1 + 64);
  v5 = *(_OWORD *)(a3 + 80);
  v4 = *(_OWORD *)(a3 + 96);
  v6 = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(a3 + 112);
  *(_OWORD *)(v3 + 80) = v5;
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 64) = v6;
  result = *(__n128 *)a3;
  v8 = *(_OWORD *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v3 + 48) = v9;
  *(__n128 *)v3 = result;
  *(_OWORD *)(v3 + 16) = v8;
  v10 = *(_DWORD *)(a1 + 68);
  v11 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v11;
  if (v11 >= v10)
  {
    v13 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(void **)(a1 + 16);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100C97358;
    v17[3] = &unk_1021579E0;
    v17[4] = v14;
    v17[5] = v13;
    v18 = v11;
    v17[6] = v15;
    v17[7] = v12;
    objc_msgSend(v16, "async:", v17);
    operator new[]();
  }
  return result;
}

uint64_t sub_100C97358(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_100C973B8(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_10217C858;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C974F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

BOOL sub_100C9751C(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

__n128 sub_100C97538(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 *v3;
  __n128 result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[8];
  unsigned int v13;

  v3 = (__n128 *)(*(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 64));
  result = *a3;
  v3[1].n128_u64[0] = a3[1].n128_u64[0];
  *v3 = result;
  v5 = *(_DWORD *)(a1 + 68);
  v6 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v6;
  if (v6 >= v5)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(void **)(a1 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100C97604;
    v12[3] = &unk_1021579E0;
    v12[4] = v9;
    v12[5] = v8;
    v13 = v6;
    v12[6] = v10;
    v12[7] = v7;
    objc_msgSend(v11, "async:", v12);
    operator new[]();
  }
  return result;
}

uint64_t sub_100C97604(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_100C97664(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = operator new(0x12A0uLL);
  sub_100C976CC(v3, a2);
}

void sub_100C976B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100C976CC(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = off_10217C8A8;
  a1[1] = 0;
  sub_100C7B958((uint64_t)(a1 + 3), *a2);
}

void sub_100C9770C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100C97720(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217C8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C97734(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217C8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100C9776C(uint64_t result, unsigned int a2, unsigned int a3)
{
  const char *v3;
  int v4;

  *(_QWORD *)(result + 24) = 0x400000004;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10217C6E0;
  *(_QWORD *)(result + 8) = 0;
  if (a2 > 4)
  {
    v3 = "this->max_num_rows_ >= num_rows";
    v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 5)
  {
    v3 = "this->max_num_cols_ >= num_cols";
    v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_100C97804(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

uint64_t sub_100C97818(uint64_t result, double a2)
{
  int64x2_t *v2;
  uint64_t v3;
  int64x2_t *v4;
  uint64_t v5;
  int64x2_t v6;

  v2 = *(int64x2_t **)(result + 32);
  if (!v2)
    sub_1019248CC();
  v3 = *(unsigned int *)(result + 16);
  if ((int)v3 > 3)
  {
    v4 = (int64x2_t *)((char *)v2 + 8 * (v3 - 2));
    v5 = (v3 - 1) >> 1;
    v6 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
    do
    {
      *v2++ = v6;
      --v5;
    }
    while (v5);
    *v4 = v6;
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      *(double *)v2->i64 = a2;
      v2 = (int64x2_t *)((char *)v2 + 8);
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_100C9787C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t j;
  const char *v13;
  int v14;

  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_OWORD *)(a1 + 8) = xmmword_101C05640;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_10217C770;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 144) = 0x100000003;
  *(_QWORD *)(a1 + 120) = off_1021673E0;
  *(_OWORD *)(a1 + 128) = xmmword_101C05680;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 176) = off_1021673E0;
  *(_QWORD *)(a1 + 200) = 0x100000003;
  *(_OWORD *)(a1 + 184) = xmmword_101C05680;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  sub_100A9EC04(a1 + 120, a3);
  sub_100A9EC04(a1 + 176, a4);
  v7 = *(unsigned int *)(a1 + 136);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    v13 = "this->max_num_rows_ >= num_rows";
    v14 = 422;
    goto LABEL_12;
  }
  v8 = *(unsigned int *)(a1 + 192);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    v13 = "this->max_num_cols_ >= num_cols";
    v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (j = 0; j != v7; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v9 + j)) = *(_QWORD *)sub_100A9EB8C(a2, *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * i));
      }
      v9 += v7;
    }
  }
  return a1;
}

void sub_100C97A00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[22] = off_1021673B0;
  v1[15] = off_1021673B0;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

uint64_t sub_100C97A2C(uint64_t result, unsigned int a2, unsigned int a3)
{
  const char *v3;
  int v4;

  *(_QWORD *)(result + 24) = 0x100000004;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10217C698;
  *(_QWORD *)(result + 8) = 0;
  if (a2 > 4)
  {
    v3 = "this->max_num_rows_ >= num_rows";
    v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 2)
  {
    v3 = "this->max_num_cols_ >= num_cols";
    v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_100C97AC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

_QWORD *sub_100C97ADC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_10217C940;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_100C97B14(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = off_10217C940;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  operator delete();
}

_QWORD *sub_100C97B5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_10217C940;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_100C97BAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = off_10217C940;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_100C97BDC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_100C97C08(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (v6)
      {
        sub_100C8943C(v6, a2);
LABEL_12:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v7 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Raven: RouteHints CB called after controller deletion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: RouteHints CB called after controller deletion", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "auto CLRavenController::RegisterForMapRouteHintNotifications()::(anonymous class)::operator()(const CLMapsRouteHintData &) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (v5)
    goto LABEL_12;
}

void sub_100C97DFC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C97E40(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100C97E7C()
{
}

BOOL sub_100C97E88()
{
  return os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100C97E9C()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 168), OS_LOG_TYPE_INFO);
}

BOOL sub_100C97EAC()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 168));
}

void sub_100C97ECC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C1FC50;
      v1[3] = unk_101C1FC60;
      v1[4] = xmmword_101C1FC70;
      v1[0] = xmmword_101C1FC30;
      v1[1] = unk_101C1FC40;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100C97FA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100C97FB8()
{
  sub_1015A2E04(qword_102307908, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307908, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102307920, "CLRavenController");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102307920, (void *)&_mh_execute_header);
}

BOOL sub_100C98034(unsigned int a1, unsigned int *a2)
{
  if (a1 <= 2)
    *a2 = a1;
  return a1 < 3;
}

void sub_100C980F0(id a1)
{
  qword_102307950 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSignificantChangeManagerSilo"));
}

void sub_100C981A4()
{
  operator new();
}

void sub_100C981E8()
{
  operator delete();
}

void sub_100C98348(uint64_t a1, void *a2)
{
  NSObject *v4;
  double v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CFAbsoluteTime Current;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_10217CBD0);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v11[0] = 68289026;
    WORD4(v11[0]) = 2082;
    *(_QWORD *)((char *)v11 + 10) = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SLC simulation request received by CLSignificantChangeManager\"}", (uint8_t *)v11, 0x12u);
  }
  *(_QWORD *)(a1 + 184) = 0;
  objc_msgSend(objc_msgSend(a2, "timestamp"), "timeIntervalSinceReferenceDate");
  *(double *)(a1 + 192) = v5 - *(double *)(a1 + 276);
  v17 = 0u;
  memset(v18, 0, 28);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  if (a2)
    objc_msgSend(a2, "clientLocation");
  v6 = v13;
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 248) = v6;
  v7 = v11[1];
  *(_OWORD *)(a1 + 200) = v11[0];
  *(_OWORD *)(a1 + 216) = v7;
  v8 = v17;
  *(_OWORD *)(a1 + 296) = v16;
  *(_OWORD *)(a1 + 312) = v8;
  *(_OWORD *)(a1 + 328) = v18[0];
  *(_OWORD *)(a1 + 340) = *(_OWORD *)((char *)v18 + 12);
  v9 = v15;
  *(_OWORD *)(a1 + 264) = v14;
  *(_OWORD *)(a1 + 280) = v9;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 276) = Current;
  *(CFAbsoluteTime *)(a1 + 408) = Current;
  sub_100C99F44(a1);
}

void sub_100C984D4(uint64_t a1, void *a2)
{
  _QWORD *v3;
  int64x2_t v9;

  v3 = (_QWORD *)sub_1006DAF10(a1, "FenceManager", a2);
  *v3 = off_10217C9E0;
  sub_1002433B8((uint64_t)(v3 + 15));
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = objc_msgSend(objc_alloc((Class)CLSettingsMirror), "initInUniverse:", *(_QWORD *)(a1 + 32));
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 184) = _Q0;
  *(_DWORD *)(a1 + 200) = 0xFFFF;
  *(_QWORD *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 220) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 236) = _Q0;
  *(_OWORD *)(a1 + 252) = _Q0;
  *(_OWORD *)(a1 + 268) = _Q0;
  *(_DWORD *)(a1 + 284) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 316) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 324) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 356) = 0;
  v9 = vdupq_n_s64(0x7FF0000000000000uLL);
  *(int64x2_t *)(a1 + 360) = v9;
  *(_BYTE *)(a1 + 376) = 0;
  *(int64x2_t *)(a1 + 384) = v9;
  *(_BYTE *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 432) = 1;
  *(_QWORD *)(a1 + 440) = 0x4000000000000000;
  *(_QWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLClientAuthorizationCache"), CFSTR("CLSignificantChangeManager"));
  sub_1006DC56C(a1, 0);
  sub_1001B6A0C();
}

void sub_100C98E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  if (a31 < 0)
    operator delete(__p);
  v33 = *(_QWORD *)(v31 + 424);
  *(_QWORD *)(v31 + 424) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(v31 + 416);
  *(_QWORD *)(v31 + 416) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  sub_1006DB4AC(v31);
  _Unwind_Resume(a1);
}

void sub_100C98ED4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSignificantChangeManager::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217CB70);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSignificantChangeManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217CB70);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSignificantChangeManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100C9A89C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C9908C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C990AC(uint64_t a1)
{
  sub_100C990B4(*(_QWORD *)(a1 + 32));
}

void sub_100C990B4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v20;
  uint8_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  _BYTE v41[12];
  char v42;
  int v43;
  _BYTE *v44;
  uint8_t buf[8];
  char v46;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#SLC onSettingsNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    LOWORD(v32) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC onSettingsNotification", &v32, 2);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::refreshSettings()", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v3 = objc_msgSend(*(id *)(a1 + 176), "dictionaryForKey:defaultValue:", CFSTR("SpoofSignificantLocationChange"), 0);
  if (objc_msgSend(v3, "hasValueForKey:", CFSTR("Latitude"))
    && objc_msgSend(v3, "hasValueForKey:", CFSTR("Longitude")))
  {
    v4 = *(_OWORD *)(a1 + 248);
    v34 = *(_OWORD *)(a1 + 232);
    v35 = v4;
    v5 = *(_OWORD *)(a1 + 216);
    v32 = *(_OWORD *)(a1 + 200);
    v33 = v5;
    v6 = *(_OWORD *)(a1 + 312);
    v38 = *(_OWORD *)(a1 + 296);
    v39 = v6;
    v40[0] = *(_OWORD *)(a1 + 328);
    *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)(a1 + 340);
    v7 = *(_OWORD *)(a1 + 280);
    v36 = *(_OWORD *)(a1 + 264);
    v37 = v7;
    objc_msgSend(v3, "doubleForKey:defaultValue:", CFSTR("Latitude"), 0.0);
    v9 = v8;
    objc_msgSend(v3, "doubleForKey:defaultValue:", CFSTR("Longitude"), 0.0);
    v11 = v10;
    objc_msgSend(*(id *)(a1 + 176), "doubleForKey:defaultValue:", CFSTR("Timestamp"), CFAbsoluteTimeGetCurrent());
    v13 = v12;
    objc_msgSend(*(id *)(a1 + 176), "doubleForKey:defaultValue:", CFSTR("HorizontalAccuracy"), 1.0);
    *(_DWORD *)(a1 + 200) = 0xFFFF;
    *(_QWORD *)(a1 + 204) = v9;
    *(_QWORD *)(a1 + 212) = v11;
    *(_QWORD *)(a1 + 220) = v14;
    *(_OWORD *)(a1 + 228) = xmmword_101BAFEE0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 244) = _Q0;
    *(_OWORD *)(a1 + 260) = _Q0;
    *(_QWORD *)(a1 + 276) = v13;
    *(_DWORD *)(a1 + 284) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 316) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 324) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 328) = &_mh_execute_header;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_BYTE *)(a1 + 352) = 0;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      sub_100071A00(a1 + 200, buf);
      v21 = v46 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v41 = 136315138;
      *(_QWORD *)&v41[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#SLC Spoofing a Significant Location Change: %s", v41, 0xCu);
      if (v46 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      v28 = qword_1022A01D8;
      sub_100071A00(a1 + 200, v41);
      if (v42 >= 0)
        v29 = v41;
      else
        v29 = *(_BYTE **)v41;
      v43 = 136315138;
      v44 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "#SLC Spoofing a Significant Location Change: %s", (const char *)&v43);
      v31 = v30;
      if (v42 < 0)
        operator delete(*(void **)v41);
      sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::refreshSettings()", "%s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
    sub_100C99F44(a1);
    v22 = v39;
    *(_OWORD *)(a1 + 296) = v38;
    *(_OWORD *)(a1 + 312) = v22;
    *(_OWORD *)(a1 + 328) = v40[0];
    *(_OWORD *)(a1 + 340) = *(_OWORD *)((char *)v40 + 12);
    v23 = v35;
    *(_OWORD *)(a1 + 232) = v34;
    *(_OWORD *)(a1 + 248) = v23;
    v24 = v37;
    *(_OWORD *)(a1 + 264) = v36;
    *(_OWORD *)(a1 + 280) = v24;
    v25 = v33;
    *(_OWORD *)(a1 + 200) = v32;
    *(_OWORD *)(a1 + 216) = v25;
    *(_BYTE *)(a1 + 357) = 1;
  }
  else if (*(_BYTE *)(a1 + 357))
  {
    *(_BYTE *)(a1 + 357) = 0;
  }
}

void sub_100C9959C(uint64_t a1)
{
  sub_100C995A4(*(_QWORD *)(a1 + 32));
}

void sub_100C995A4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#SLC Booting up", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#SLC Booting up", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::onStartSLC(CLPersistentTimer *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
    sub_1001F40D0(v3, 1.79769313e308);
  *(_BYTE *)(a1 + 160) = 1;
  sub_100C99B98((_BYTE *)a1);
}

void sub_100C99758(uint64_t a1)
{
  sub_100C99760(*(_QWORD *)(a1 + 32));
}

void sub_100C99760(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 448))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#SLC onConsolidatedTrigger, calling requestLocationUpdate", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC onConsolidatedTrigger, calling requestLocationUpdate", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::onConsolidatedTrigger()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    sub_100C9A614(a1);
    objc_msgSend(*(id *)(a1 + 448), "setNextFireDelay:", 1.79769313e308);
    *(_BYTE *)(a1 + 456) = 0;
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#SLC ignore, onConsolidatedTrigger, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC ignore, onConsolidatedTrigger, shutdown?", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::onConsolidatedTrigger()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

uint64_t sub_100C99A40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_10217C9E0;
  sub_100C99ACC((uint64_t)a1);
  v2 = a1[53];
  a1[53] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[52];
  a1[52] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_1006DB4AC(a1);
}

void sub_100C99AA8(_QWORD *a1)
{
  sub_100C99A40(a1);
  operator delete();
}

void sub_100C99ACC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 464) = 0;
  objc_msgSend(*(id *)(a1 + 448), "invalidate");

  *(_QWORD *)(a1 + 448) = 0;
  v2 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 168);
  if (v4)
  {
    sub_1009865B8(v4);
    operator delete();
  }
  objc_msgSend(*(id *)(a1 + 176), "invalidate");

}

BOOL sub_100C99B68(_BYTE *a1, int a2, unsigned int *a3, uint64_t *a4)
{
  _BOOL8 v5;

  v5 = sub_1000C349C((uint64_t)a1, a2, a3, a4);
  sub_100C99B98(a1);
  return v5;
}

void sub_100C99B98(_BYTE *a1)
{
  int v2;
  NSObject *v3;
  int v4;
  int v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  _BOOL4 v11;

  if (a1[160])
  {
    v5[0] = 0;
    v2 = sub_1001B7864((uint64_t)a1, v5, 1);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v4 = a1[356];
      v5[0] = 68289538;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v4;
      v10 = 1026;
      v11 = v2 != 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SLC Checking whether we should be monitoring\", \"activeNow\":%{public}hhd, \"hasNotifierClients\":%{public}hhd}", (uint8_t *)v5, 0x1Eu);
    }
    if (a1[356])
    {
      if (!v2)
        sub_100C9A0C8(a1);
    }
    else if (v2)
    {
      sub_100C9A1C0((uint64_t)a1);
    }
  }
}

BOOL sub_100C99CD8(char *a1, int a2, int *a3)
{
  _BOOL8 v4;

  v4 = sub_1000B0BF8(a1, a2, a3);
  sub_100C99B98(a1);
  return v4;
}

void sub_100C99D08(double a1, uint64_t a2, uint64_t a3)
{
  NSDate *v5;
  NSDateComponents *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  const __CFString *v16;
  __int128 v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  CFAbsoluteTime Current;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;

  if (dword_102307960)
  {
    v5 = +[NSDate date](NSDate, "date");
    v6 = -[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 252, v5);
    if (sub_10051247C())
    {
      v8 = sub_10014D1E0(*(_DWORD *)(a3 + 96));
      v17 = *(_OWORD *)(a3 + 4);
      v9 = *(_QWORD *)(a3 + 20);
      v10 = -[NSDateComponents month](v6, "month");
      v11 = -[NSDateComponents day](v6, "day");
      v12 = -[NSDateComponents hour](v6, "hour");
      v13 = -[NSDateComponents minute](v6, "minute");
      v14 = -[NSDateComponents second](v6, "second");
      -[NSDate timeIntervalSinceReferenceDate](v5, "timeIntervalSinceReferenceDate");
      v16 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("location: %s\n %+.8lf, %+.8lf\n acc:±%.2lfm\n distance:±%.2lfm\n date: %ld/%ld, %ld:%ld:%ld\n time: %.2lf"), v8, v17, v9, *(_QWORD *)&a1, v10, v11, v12, v13, v14, v15);
      sub_100D78C28(CFSTR("SLC"), 0, v16);
      CFRelease(v16);
    }
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290051;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2050;
    Current = CFAbsoluteTimeGetCurrent();
    v24 = 1040;
    v25 = 156;
    v26 = 2097;
    v27 = a3;
    v28 = 2049;
    v29 = a1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC location changed\", \"now_s\":\"%{public}.09f\", \"location\":%{private, location:CLClientLocation}.*P, \"distance\":\"%{private}f\"}", buf, 0x36u);
  }
}

void sub_100C99F44(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  _OWORD v17[8];
  _OWORD v18[35];
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  void *v21;
  char v22;
  std::__shared_weak_count *v23;
  id v24;

  sub_100129CA0((uint64_t)v17);
  v2 = *(_OWORD *)(a1 + 312);
  v17[6] = *(_OWORD *)(a1 + 296);
  v17[7] = v2;
  v18[0] = *(_OWORD *)(a1 + 328);
  *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(a1 + 340);
  v3 = *(_OWORD *)(a1 + 248);
  v17[2] = *(_OWORD *)(a1 + 232);
  v17[3] = v3;
  v4 = *(_OWORD *)(a1 + 280);
  v17[4] = *(_OWORD *)(a1 + 264);
  v17[5] = v4;
  v5 = *(_OWORD *)(a1 + 216);
  v17[0] = *(_OWORD *)(a1 + 200);
  v17[1] = v5;
  v16 = 0;
  v6 = (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v16, v17, 1, 0xFFFFFFFFLL, 0);
  sub_100C99D08(*(double *)(a1 + 184), v6, a1 + 200);

  v7 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v22 < 0)
    operator delete(v21);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_100C9A0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_100C9A0C8(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (result[356])
  {
    v1 = result;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Stopping\"}", (uint8_t *)v3, 0x12u);
    }
    result = objc_msgSend(*(id *)(*((_QWORD *)v1 + 52) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 52) + 8), 0);
    *((_QWORD *)v1 + 51) = 0;
    v1[356] = 0;
  }
  return result;
}

void sub_100C9A1C0(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Starting\"}", (uint8_t *)v3, 0x12u);
  }
  *(_BYTE *)(a1 + 356) = 1;
  *(_QWORD *)(a1 + 408) = 0;
  sub_100C9ADA8();
}

void sub_100C9A2C8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  if (*(_BYTE *)(a1 + 356))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(unsigned __int8 *)(a1 + 456);
      v5 = *(_QWORD *)(a1 + 440);
      v4 = *(_QWORD *)(a1 + 448);
      *(_DWORD *)buf = 134218496;
      v23 = v4;
      v24 = 1024;
      v25 = v3;
      v26 = 2048;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#SLC slcConsolidate, schedule a consolidated scan, %p, fIsConsolidatedTriggerPending, %d, fConsolidatedTriggersTimeInterval, %.2lf", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      v8 = *(unsigned __int8 *)(a1 + 456);
      v10 = *(_QWORD *)(a1 + 440);
      v9 = *(_QWORD *)(a1 + 448);
      v16 = 134218496;
      v17 = v9;
      v18 = 1024;
      v19 = v8;
      v20 = 2048;
      v21 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC slcConsolidate, schedule a consolidated scan, %p, fIsConsolidatedTriggerPending, %d, fConsolidatedTriggersTimeInterval, %.2lf", &v16, 28);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::enableBackgroundWakeServices_nl()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    if (*(_BYTE *)(a1 + 432) && (v6 = *(void **)(a1 + 448)) != 0)
    {
      if (!*(_BYTE *)(a1 + 456))
      {
        objc_msgSend(v6, "setNextFireDelay:", *(double *)(a1 + 440));
        *(_BYTE *)(a1 + 456) = 1;
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#SLC enableBackgroundWakeServices_nl, calling requestLocationUpdate", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10217CB90);
        LOWORD(v16) = 0;
        LODWORD(v15) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC enableBackgroundWakeServices_nl, calling requestLocationUpdate", &v16, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::enableBackgroundWakeServices_nl()", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      sub_100C9A614(a1);
    }
  }
}

void sub_100C9A614(uint64_t a1)
{
  NSObject *v2;
  double Current;
  id v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  uint8_t buf[8];
  __int16 v18;
  _BYTE v19[22];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v18 = 2082;
    *(_QWORD *)v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SLC Request location update\"}", buf, 0x12u);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_1015A2E04(__p, "slc");
  sub_100225558((uint64_t)buf, 4, 1, (__int128 *)__p, Current);
  if (v16 < 0)
    operator delete(__p[0]);
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLWifiLocationProvider"));
  v5 = *(_QWORD *)buf;
  v6 = v18;
  if (SHIBYTE(v20) < 0)
  {
    sub_100115CE4(&v7, *(void **)&v19[6], *(unint64_t *)&v19[14]);
  }
  else
  {
    v7 = *(_OWORD *)&v19[6];
    v8 = v20;
  }
  v10 = v22;
  v11 = v23;
  v12[0] = v24[0];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v24 + 12);
  v9 = v21;
  if (SHIBYTE(v26) < 0)
  {
    sub_100115CE4(&v13, (void *)v25, *((unint64_t *)&v25 + 1));
  }
  else
  {
    v13 = v25;
    v14 = v26;
  }
  objc_msgSend(v4, "requestLocationUpdateWithParameters:", sub_10061AB3C((uint64_t)&v5));
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)v7);
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  if (SHIBYTE(v20) < 0)
    operator delete(*(void **)&v19[6]);
}

void sub_100C9A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a17 < 0)
    operator delete(__p);
  sub_10055A600((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_100C9A89C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  id v11;
  uint64_t *v12;
  NSObject *v13;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;

  v5 = a1 + 268;
  if (*a3 == 4)
  {
    if (*(_DWORD *)(a4 + 188) != 1)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      v13 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v20 = 68289026;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Location services is now disabled; Clearing cached location\"}",
          (uint8_t *)&v20,
          0x12u);
      }
      *(_DWORD *)(a1 + 200) = 0xFFFF;
      *(_QWORD *)(a1 + 212) = 0;
      *(_QWORD *)(a1 + 204) = 0;
      *(_OWORD *)(a1 + 220) = xmmword_101BAFC90;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 236) = _Q0;
      *(_OWORD *)(a1 + 252) = _Q0;
      *(_OWORD *)v5 = _Q0;
      *(_DWORD *)(a1 + 284) = 0;
      *(_QWORD *)(a1 + 296) = 0;
      *(_QWORD *)(a1 + 304) = 0;
      *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 312) = 0;
      *(_QWORD *)(v5 + 48) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 324) = 0x7FFFFFFF;
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
      *(_QWORD *)(a1 + 328) = 0;
      *(_BYTE *)(a1 + 352) = 0;
      v20 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v20);
    }
  }
  else if (*a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v16 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v17 = *a3;
      v20 = 68289282;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 1026;
      v25 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SLC Got unknown client notification\", \"notification\":%{public}d}", (uint8_t *)&v20, 0x18u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    }
    v18 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v19 = *a3;
      v20 = 68289282;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 1026;
      v25 = v19;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SLC Got unknown client notification", "{\"msg%{public}.0s\":\"#SLC Got unknown client notification\", \"notification\":%{public}d}", (uint8_t *)&v20, 0x18u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 200) = 0xFFFF;
    *(_QWORD *)(a1 + 212) = 0;
    *(_QWORD *)(a1 + 204) = 0;
    *(_OWORD *)(a1 + 220) = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 236) = _Q0;
    *(_OWORD *)(a1 + 252) = _Q0;
    *(_OWORD *)v5 = _Q0;
    *(_DWORD *)(a1 + 284) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 316) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 324) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    *(_BYTE *)(a1 + 352) = 0;
    v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    if (byte_10230794F >= 0)
      v12 = &qword_102307938;
    else
      v12 = (uint64_t *)qword_102307938;
    objc_msgSend(v11, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  }
}

void sub_100C9AC14()
{
  operator new();
}

void sub_100C9ACBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100C9ACF8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C9AD24(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100C9AD50(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_100C9AD7C(id a1)
{
  qword_1022A0248 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

void sub_100C9ADA8()
{
  operator new();
}

uint64_t sub_100C9AE40(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_100C9AE60()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C20278;
      v1[3] = unk_101C20288;
      v1[4] = xmmword_101C20298;
      v1[0] = xmmword_101C20258;
      v1[1] = unk_101C20268;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100C9AF34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100C9AF4C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100C9AFE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100C9B000()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100C9B08C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100C9B0A4()
{
  sub_1015A2E04(&qword_102307938, "SignificantChangeManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307938, (void *)&_mh_execute_header);
}

uint64_t sub_100C9B0EC(uint64_t a1)
{
  _BYTE v3[32];
  int v4;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  *(_QWORD *)(a1 + 208) = 0x800000000;
  *(_OWORD *)(a1 + 312) = xmmword_101C20310;
  *(_OWORD *)(a1 + 328) = xmmword_101C20320;
  *(_WORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 353) = 0;
  *(_OWORD *)(a1 + 376) = xmmword_101C20364;
  *(_OWORD *)(a1 + 392) = unk_101C20374;
  *(_OWORD *)(a1 + 408) = xmmword_101C20384;
  *(_DWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_QWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 468) = 1;
  *(_DWORD *)(a1 + 488) = 8;
  *(_QWORD *)(a1 + 480) = 1031798784;
  *(_OWORD *)&v3[8] = 0uLL;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)v3;
  *(_DWORD *)&v3[24] = 0;
  *(_OWORD *)(a1 + 540) = *(_OWORD *)&v3[12];
  v4 = 973279855;
  *(_OWORD *)v3 = xmmword_101C20340;
  *(_OWORD *)&v3[16] = unk_101C20350;
  sub_100C9B770(a1 + 32, (uint64_t)v3);
  *(int32x2_t *)(a1 + 56) = vdup_n_s32(0x3A03126Fu);
  *(_DWORD *)(a1 + 64) = 973279855;
  return a1;
}

uint64_t sub_100C9B20C(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

double sub_100C9B21C(uint64_t a1)
{
  _OWORD *v2;
  double result;
  _BYTE v4[32];
  int v5;

  v2 = (_OWORD *)(a1 + 312);
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_OWORD *)v4 = xmmword_101C20340;
  *(_OWORD *)&v4[16] = unk_101C20350;
  v5 = 973279855;
  sub_100C9B770(a1 + 32, (uint64_t)v4);
  *(int32x2_t *)(a1 + 56) = vdup_n_s32(0x3A03126Fu);
  *(_DWORD *)(a1 + 64) = 973279855;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 484) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_QWORD *)&v4[7] = 0;
  *(_QWORD *)&v4[2] = 0;
  *v2 = xmmword_101C20310;
  v2[1] = xmmword_101C20320;
  *(_WORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 346) = *(_QWORD *)v4;
  *(_QWORD *)(a1 + 353) = *(_QWORD *)&v4[7];
  *(_DWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  v2[4] = xmmword_101C20364;
  v2[5] = unk_101C20374;
  v2[6] = xmmword_101C20384;
  *(_DWORD *)(a1 + 424) = 0;
  *(_DWORD *)&v4[24] = 0;
  *(_DWORD *)&v4[12] = 0;
  *(_QWORD *)&v4[16] = 0;
  *(_OWORD *)(a1 + 528) = *(unint64_t *)v4;
  result = *(double *)&v4[12];
  *(_OWORD *)(a1 + 540) = *(_OWORD *)&v4[12];
  return result;
}

BOOL sub_100C9B364(float32x4_t *a1, float *a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  _BOOL8 v23;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  _WORD v33[8];
  float32x4_t v34;
  _BYTE v35[36];
  _DWORD v36[3];
  uint8_t buf[16];
  __int128 v38;
  int v39;
  float v40[2];

  v14 = sub_1006877E0(&a1[6].u16[4], 0, a1[6].u16[5]);
  v18 = v17;
  v19 = 0;
  *(float *)v36 = v14;
  *(float *)&v36[1] = v17;
  *(float *)&v36[2] = v13;
  v20 = 0.0;
  do
  {
    v20 = v20 + (float)(*(float *)&v36[v19] * *(float *)&v36[v19]);
    ++v19;
  }
  while (v19 != 3);
  v21 = sqrtf(v20);
  if (v21 <= 0.0)
    return 0;
  v22 = fabsf(v21 + -1.0) / v21;
  if (v22 > 0.40825)
    return 0;
  v40[0] = 1.0 / a4;
  v40[1] = 1.0 / (float)((float)(0.001 / (float)(v21 * v21)) + (float)((float)(v22 * 6.0) * v22));
  v34.i64[0] = 0;
  v34.i64[1] = 0x3F80000000000000;
  LODWORD(v15) = *(_DWORD *)(a3 + 8);
  v23 = sub_100B62074(v40, &v34, (uint64_t)v35, *a2, a2[1], a2[2], v14, v18, v13, v15, v16, v8, v9, v10, v11, v12, *(_QWORD *)a3, *(float *)&v15);
  if (v23)
  {
    if (&a1[1] != &v34)
      a1[1] = v34;
    v25 = (uint64_t)&a1[2];
    if (!sub_100C9B770(v25, (uint64_t)v35))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v26 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "invalid initializeDown covariance !(P > 0), reseting", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10217CC10);
        v33[0] = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "invalid initializeDown covariance !(P > 0), reseting", v33, v32);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "BOOL CMSensorFusionSwimMekf::initializeAttitude(const CMVector3d &, const CMVector3d &, float)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      v39 = 973279855;
      *(_OWORD *)buf = xmmword_101C20340;
      v38 = unk_101C20350;
      sub_100C9B770(v25, (uint64_t)buf);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v27 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "northAndGravity failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v33[0] = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "northAndGravity failed", v33, v32);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMSensorFusionSwimMekf::initializeAttitude(const CMVector3d &, const CMVector3d &, float)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  return v23;
}

BOOL sub_100C9B770(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  unint64_t v23;
  uint8_t buf[4];
  unint64_t v25;

  result = sub_100C9CF24(a2);
  if (result)
  {
    v5 = 3;
    v6 = 2;
    while (1)
    {
      v7 = v6;
      v8 = sub_100534784(a2, v6, v6);
      v9 = v5;
      v10 = v5 - 2;
      if (v5 <= 2)
      {
        do
        {
          v11 = *(float *)sub_100C9CFC4(a1 + 12, v7, v9);
          v12 = *(float *)sub_100C9CFC4(a1 + 12, v7, v9);
          v8 = v8 + (float)((float)-(float)(v11 * v12) * *(float *)sub_100C9D31C(a1, v9++));
        }
        while (v9 != 3);
      }
      *(float *)sub_100C9D31C(a1, v7) = v8;
      if (*(float *)sub_100C9D31C(a1, v7) <= 0.0)
        break;
      if (v7)
      {
        do
        {
          v13 = v10;
          v14 = sub_100534784(a2, v10, v7);
          v15 = v5;
          if (v5 <= 2)
          {
            do
            {
              v16 = *(float *)sub_100C9CFC4(a1 + 12, v13, v15);
              v17 = *(float *)sub_100C9CFC4(a1 + 12, v7, v15);
              v14 = v14 + (float)((float)-(float)(v16 * v17) * *(float *)sub_100C9D31C(a1, v15++));
            }
            while (v15 != 3);
          }
          v18 = v14 / *(float *)sub_100C9D31C(a1, v7);
          *(float *)sub_100C9CFC4(a1 + 12, v13, v7) = v18;
          v10 = v13 - 1;
        }
        while (v13);
      }
      v6 = v7 - 1;
      v5 = v7;
      if (!v7)
        return 1;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v22 = 134217984;
      v23 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "D(%zu) <= 0 non-positive definite matrix!", (size_t)&v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<float, 3>::factor(const CMMatrix<T, N, N> &) [T = float, N = 3]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
      return 0;
    }
  }
  return result;
}

void sub_100C9BAA0(uint64_t a1)
{
  if (*(_WORD *)(a1 + 106))
  {
    sub_100C9BB0C((unsigned __int16 *)(a1 + 104));
    sub_10012C7A4((float *)(a1 + 16));
  }
}

float sub_100C9BB0C(unsigned __int16 *a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (!a1[1])
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 145,back() on empty buffer.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 145,back() on empty buffer.", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 3>::back() const [T = float, N = 3]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  return *(float *)sub_100687A34(a1, a1[1] - 1);
}

float sub_100C9BCBC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  float result;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = *a2;
  *(_DWORD *)(a1 + 8) = a2[1];
  *(_DWORD *)(a1 + 12) = a2[2];
  *(_DWORD *)(a1 + 56) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *(float *)(a1 + 64) = result;
  return result;
}

float sub_100C9BCF8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  float v5;
  float result;

  if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 1))
  {
    v5 = *(float *)(a1 + 88) - *(float *)(a1 + 12);
    *(float32x2_t *)(a1 + 92) = vsub_f32(*(float32x2_t *)(a1 + 80), *(float32x2_t *)(a1 + 4));
    *(float *)(a1 + 100) = v5;
    sub_100C9BD6C(a1, a3);
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 4);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 88) = result;
  return result;
}

void sub_100C9BD6C(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  int32x2_t v9;
  int32x2_t v10;
  float32x4_t v11;
  float32x4_t *v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float v17;
  uint64_t v18;
  __int32 v19;
  float32x2_t v20;
  float v21;

  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
  {
    v4 = a2 - v3;
    if (a2 > v3)
    {
      v5 = 0;
      v6 = (float)v4 * 0.000001;
      *(_QWORD *)(a1 + 72) = a2;
      v7 = v6 * *(float *)(a1 + 100);
      v13 = v6;
      v20 = vmul_n_f32(*(float32x2_t *)(a1 + 92), v6);
      v21 = v7;
      v18 = (uint64_t)v20;
      v19 = LODWORD(v7);
      do
      {
        *(float *)((char *)&v18 + v5) = -*(float *)((char *)&v18 + v5);
        v5 += 4;
      }
      while (v5 != 12);
      v15.i64[0] = v18;
      v15.i32[2] = v19;
      sub_100B278EC(v15.f32, (uint64_t)&v18);
      v8 = v13 * *(float *)(a1 + 64);
      *(float *)v9.i32 = v13 * 0.00032;
      v16 = vadd_f32((float32x2_t)vdup_lane_s32(v9, 0), vmul_n_f32(*(float32x2_t *)(a1 + 56), v13));
      v17 = (float)(v13 * 0.00032) + v8;
      sub_100C9BEC8(a1 + 32, (uint64_t)&v18, (uint64_t)&v16);
      *(float *)v10.i32 = v13 * 0.00000005;
      *(float32x2_t *)(a1 + 56) = vadd_f32((float32x2_t)vdup_lane_s32(v10, 0), *(float32x2_t *)(a1 + 56));
      *(float *)(a1 + 64) = (float)(v13 * 0.00000005) + *(float *)(a1 + 64);
      *(double *)v11.i64 = sub_100B61FD0(&v15, (float *)&v20);
      v12 = (float32x4_t *)(a1 + 16);
      sub_100B61EC4((uint64_t)&v15, v12->f32, &v14, v11);
      if (v12 != &v14)
        *v12 = v14;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a2;
  }
}

void sub_100C9BEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  float *v13;
  uint64_t i;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t k;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unint64_t v31;
  float v32;
  float v33;
  float *v34;
  float v35;
  float v36;
  float *v37;
  unint64_t j;
  float v39;
  NSObject *v40;
  const char *v41;
  uint8_t *v42;
  _BYTE v43[36];
  int v44;
  unint64_t v45;
  uint8_t buf[4];
  unint64_t v47;
  float v48[3];

  v6 = 0;
  v7 = a1 + 12;
  do
  {
    v8 = 2;
    while (1)
    {
      v9 = v8;
      if (!v8)
        break;
      v10 = 0;
      do
      {
        v11 = *(float *)sub_100534AE0(a2, v6, v10);
        v12 = *(float *)sub_100C9CFC4(v7, v10, v9);
        v13 = (float *)sub_100534AE0(a2, v6, v9);
        *v13 = *v13 + (float)(v11 * v12);
        ++v10;
      }
      while (v9 != v10);
      *(_DWORD *)sub_100534AE0((uint64_t)v43, v6, v9) = 0;
      v8 = v9 - 1;
      if (!v9)
        goto LABEL_9;
    }
    *(_DWORD *)sub_100534AE0((uint64_t)v43, v6, 0) = 0;
LABEL_9:
    *(_DWORD *)sub_100534AE0((uint64_t)v43, v6, v6) = 1065353216;
    ++v6;
  }
  while (v6 != 3);
  for (i = 2; ; i = v16 - 1)
  {
    v15 = 0;
    v16 = i;
    v48[i] = 0.0;
    v17 = 0.0;
    do
    {
      v18 = *(float *)sub_100534AE0(a2, v16, v15);
      v19 = v18 * *(float *)sub_100534AE0(a2, v16, v15);
      v20 = v17 + (float)(v19 * *(float *)sub_100C9D31C(a1, v15));
      v21 = *(float *)sub_100534AE0((uint64_t)v43, v16, v15);
      v22 = v21 * *(float *)sub_100534AE0((uint64_t)v43, v16, v15);
      v17 = v20 + (float)(v22 * sub_100533668(a3, v15));
      v48[v16] = v17;
      ++v15;
    }
    while (v15 != 3);
    if (v17 <= 0.0)
      break;
    if (!v16)
    {
      for (j = 0; j != 3; ++j)
      {
        v39 = v48[j];
        *(float *)sub_100C9D31C(a1, j) = v39;
      }
      return;
    }
    for (k = 0; k != v16; ++k)
    {
      v24 = 0;
      v25 = 0.0;
      do
      {
        v26 = *(float *)sub_100534AE0(a2, k, v24);
        v27 = v26 * *(float *)sub_100C9D31C(a1, v24);
        v28 = v25 + (float)(v27 * *(float *)sub_100534AE0(a2, v16, v24));
        v29 = *(float *)sub_100534AE0((uint64_t)v43, k, v24);
        v30 = v29 * sub_100533668(a3, v24);
        v25 = v28 + (float)(v30 * *(float *)sub_100534AE0((uint64_t)v43, v16, v24++));
      }
      while (v24 != 3);
      v31 = 0;
      *(float *)sub_100C9CFC4(v7, k, v16) = v25 / v17;
      do
      {
        v32 = *(float *)sub_100C9CFC4(v7, k, v16);
        v33 = *(float *)sub_100534AE0(a2, v16, v31);
        v34 = (float *)sub_100534AE0(a2, k, v31);
        *v34 = *v34 - (float)(v32 * v33);
        v35 = *(float *)sub_100C9CFC4(v7, k, v16);
        v36 = *(float *)sub_100534AE0((uint64_t)v43, v16, v31);
        v37 = (float *)sub_100534AE0((uint64_t)v43, k, v31);
        *v37 = *v37 - (float)(v35 * v36);
        ++v31;
      }
      while (v31 != 3);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217CC10);
  v40 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v47 = v16;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v44 = 134217984;
    v45 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "D[%zu] <= 0, matrix ! positive definite", (size_t)&v44);
    v42 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CMFactoredMatrix<float, 3>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, const CMVector<T, N> &) [T = float, N = 3]", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
}

void sub_100C9C38C(float32x4_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE v22[12];
  float v23;
  float v24;
  float v25;

  v5 = &a1[6].u16[4];
  sub_100687774(&a1[6].u16[4], a2);
  v6 = sub_1006877E0(v5, 0, a1[6].u16[5]);
  v9 = 0;
  v23 = v6;
  v24 = v7;
  v25 = v8;
  v10 = 0.0;
  do
  {
    v10 = v10 + (float)(*(float *)((char *)&v23 + v9) * *(float *)((char *)&v23 + v9));
    v9 += 4;
  }
  while (v9 != 12);
  v11 = sqrtf(v10);
  v12 = 1.0;
  if (v11 > 0.0)
    v12 = fabsf(v11 + -1.0) / v11;
  v13 = v6 / v11;
  v14 = v7 / v11;
  v23 = v13;
  v24 = v7 / v11;
  v25 = v8 / v11;
  if (a1->i8[1] || a1[6].i32[3] != a1[6].u16[5])
  {
    if (v12 <= 0.40825)
    {
      v15 = 1.0;
      v16 = fabsf(v11 + -1.0) / v11;
      if (v11 > 0.0)
        v15 = v16;
      sub_100C9C590(a1, &v23, (float)(0.001 / (float)(v11 * v11)) + (float)((float)(v15 * 6.0) * v15));
      if (v11 > 0.9 && v11 < 1.1)
      {
        v17 = a1[33].u64[1];
        if (v17)
        {
          v18 = v17 + 1;
          v19 = a1[34].i64[0] + a3 - a1[33].i64[0];
          a1[34].i64[0] = v19;
          a1[34].f32[2] = (float)((float)v19 / (float)v17) / 1000.0;
        }
        else
        {
          v18 = 1;
        }
        a1[33].i64[0] = a3;
        a1[33].i64[1] = v18;
      }
    }
  }
  else
  {
    *(_QWORD *)v22 = 0x3F80000000000000;
    *(_DWORD *)&v22[8] = 0;
    if (v14 != 0.0 && fabsf((float)(fabsf(v14) + -1.0) / v14) < 0.1)
      *(_QWORD *)&v22[4] = 0xBF80000000000000;
    v20 = 1065353216;
    v21 = 0;
    a1->i8[1] = sub_100C9B364(a1, (float *)v22, (uint64_t)&v20, 1.0);
  }
}

void sub_100C9C590(float32x4_t *a1, float *a2, float a3)
{
  float32x4_t *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x4_t *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24[3];
  uint64_t v25;
  float v26;
  _OWORD v27[2];
  int v28;
  uint64_t v29;
  __int32 v30;
  uint64_t v31;
  __int32 v32;
  _DWORD v33[3];
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  float v38;

  v6 = a1 + 1;
  v7 = sub_10012C7A4(a1[1].f32);
  v9 = v8;
  v11 = v10;
  v12 = *a2 - v7;
  v13 = a2[1] - v8;
  v14 = a2[2] - v10;
  *(float *)&v37 = v12;
  *((float *)&v37 + 1) = v13;
  v38 = v14;
  LODWORD(v34) = 0;
  *((float *)&v34 + 1) = v10;
  *((float *)&v34 + 2) = -v8;
  *((float *)&v34 + 3) = -v10;
  LODWORD(v35) = 0;
  *(_QWORD *)((char *)&v35 + 4) = __PAIR64__(LODWORD(v8), LODWORD(v7));
  *((float *)&v35 + 3) = -v7;
  v36 = 0;
  *(float *)v33 = a3;
  *(float *)&v33[1] = a3;
  *(float *)&v33[2] = a3;
  v16 = a1[2].i64[0];
  v15 = a1 + 2;
  v28 = 0;
  v27[0] = v34;
  v27[1] = v35;
  v29 = v16;
  v30 = v15->i32[2];
  v31 = *(uint64_t *)((char *)&v15->i64[1] + 4);
  v32 = v15[1].i32[1];
  sub_100C9BEC8((uint64_t)&v29, (uint64_t)v27, (uint64_t)v33);
  v25 = v37;
  v26 = v38;
  if (sub_100C9C740((uint64_t)&v29, (uint64_t)&v25)
    && (float)((float)((float)(v14 * v26) + (float)(v13 * *((float *)&v25 + 1))) + (float)(v12 * *(float *)&v25)) <= 6.75)
  {
    sub_100C9CA4C(v15->f32, (uint64_t)&v34, (uint64_t)v33, (uint64_t)&v37);
    v20 = (float)((float)(v11 * v17) + (float)(v18 * v9)) + (float)(v19 * v7);
    v24[0] = v19 - (float)(v7 * v20);
    v24[1] = v18 - (float)(v9 * v20);
    v24[2] = v17 - (float)(v11 * v20);
    *(double *)v21.i64 = sub_100B61FD0(&v23, v24);
    sub_100B61EC4((uint64_t)&v23, v6->f32, &v22, v21);
    if (v6 != &v22)
      *v6 = v22;
  }
}

uint64_t sub_100C9C740(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  float *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;

  if (sub_100C9D84C(a1, 0) == 0.0)
  {
    v4 = 0;
    v5 = 0;
LABEL_7:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v28 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "D[%zu] == 0, semidefinite matrix!", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v25 = 134217984;
      v26 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "D[%zu] == 0, semidefinite matrix!", (size_t)&v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<float, 3>::solve(CMVector<T, N> &) const [T = float, N = 3]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
    v5 = 0;
    while (v5 != 2)
    {
      if (sub_100C9D84C(a1, ++v5) == 0.0)
      {
        v4 = (unint64_t)(v5 - 1) > 1;
        goto LABEL_7;
      }
    }
    v8 = a1 + 12;
    v9 = 2;
    v10 = 1;
    do
    {
      v11 = v9;
      v9 = v10;
      do
      {
        v12 = *(float *)sub_100534E68(a2, v11);
        v13 = sub_100C9D4F4(a1 + 12, v9, v11);
        v14 = (float *)sub_100534E68(a2, v9);
        *v14 = *v14 - (float)(v12 * v13);
        ++v11;
      }
      while (v11 != 3);
      v10 = v9 - 1;
    }
    while (v9);
    do
    {
      v15 = sub_100C9D84C(a1, v9);
      v16 = (float *)sub_100534E68(a2, v9);
      *v16 = *v16 / v15;
      ++v9;
    }
    while (v9 != 3);
    v17 = 0;
    do
    {
      v18 = v17++;
      if (v18 <= 1)
      {
        v19 = v17;
        do
        {
          v20 = *(float *)sub_100534E68(a2, v18);
          v21 = sub_100C9D4F4(v8, v18, v19);
          v22 = (float *)sub_100534E68(a2, v19);
          *v22 = *v22 - (float)(v20 * v21);
          ++v19;
        }
        while (v19 != 3);
      }
    }
    while (v17 != 3);
    return 1;
  }
  return v4;
}

void sub_100C9CA4C(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  unint64_t v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  unint64_t v27;
  float v28;
  float v29;
  float *v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  uint8_t buf[4];
  unint64_t v41;
  float v42[3];
  float v43[3];

  v7 = 0;
  v36 = 0;
  v37 = 0;
  v8 = (uint64_t)(a1 + 3);
LABEL_2:
  v9 = 0;
  v10 = -1;
  do
  {
    v11 = sub_100534784(a2, v7, v9);
    v12 = v10;
    if (v9)
    {
      do
      {
        v13 = sub_100534784(a2, v7, v12);
        v11 = v11 + (float)(v13 * *(float *)sub_100C9CFC4(v8, v12--, v9));
      }
      while (v12 != -1);
    }
    v43[v9] = v11;
    v42[v9] = v11 * *(float *)sub_100C9D31C((uint64_t)a1, v9);
    ++v9;
    ++v10;
  }
  while (v9 != 3);
  v14 = sub_100533668(a3, v7);
  v15 = v14 + (float)(v43[0] * v42[0]);
  if (v15 > 0.0)
  {
    v16 = 1.0 / v15;
    *a1 = *a1 * (float)((float)(1.0 / v15) * sub_100533668(a3, v7));
    v17 = 1;
    while (1)
    {
      v18 = v43[v17];
      v19 = v15 + (float)(v18 * v42[v17]);
      if (v19 <= 0.0)
        break;
      v20 = -(float)(v18 * v16);
      v16 = 1.0 / v19;
      v21 = (float *)sub_100C9D31C((uint64_t)a1, v17);
      v22 = 0;
      *v21 = (float)(v15 * (float)(1.0 / v19)) * *v21;
      do
      {
        v23 = *(float *)sub_100C9CFC4(v8, v22, v17);
        v24 = v42[v22];
        v25 = (float *)sub_100C9CFC4(v8, v22, v17);
        v26 = v42[v17];
        *v25 = v23 + (float)(v24 * v20);
        v42[v22++] = v24 + (float)(v26 * v23);
      }
      while (v17 != v22);
      ++v17;
      v15 = v19;
      if (v17 == 3)
      {
        v27 = 0;
        v28 = v16 * sub_100533668(a4, v7);
        do
        {
          v29 = v42[v27];
          v30 = (float *)sub_100534E68((uint64_t)&v36, v27);
          *v30 = *v30 + (float)(v28 * v29);
          ++v27;
        }
        while (v27 != 3);
        if (++v7 != 3)
          goto LABEL_2;
        return;
      }
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v31 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v41 = v7;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      goto LABEL_32;
    goto LABEL_30;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217CC10);
  v32 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v41 = v7;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
LABEL_32:
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
LABEL_30:
    v38 = 134217984;
    v39 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%zu: alpha <= 0, matrix ! positive definite", &v38);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "CMVector<T, N> CMFactoredMatrix<float, 3>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = float, N = 3, P = 3UL]", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
}

void sub_100C9CEF8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_100C9CF24(uint64_t a1)
{
  unint64_t v2;
  char v3;
  char v4;
  unint64_t v5;
  float v6;
  float v7;

  v2 = 0;
  v3 = 1;
LABEL_2:
  v4 = v3;
  v5 = v2 + 1;
  while (1)
  {
    v6 = sub_100534784(a1, v2, v5);
    v7 = v6 - sub_100534784(a1, v5, v2);
    if (v7 <= 0.0)
      v7 = -v7;
    if (v7 > 1.0e-16)
      return v7 <= 1.0e-16;
    if (++v5 == 3)
    {
      v3 = 0;
      v2 = 1;
      if ((v4 & 1) != 0)
        goto LABEL_2;
      return v7 <= 1.0e-16;
    }
  }
}

uint64_t sub_100C9CFC4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a3 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 3]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = a2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 3]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_100C9D31C(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::DiagonalMatrix::operator()(size_t) [T = float, N = 3]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1 + 4 * a2;
}

float sub_100C9D4F4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a3 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 231,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 231,invalid col %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = float, N = 3]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = a2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = float, N = 3]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return *(float *)(a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1)));
}

float sub_100C9D84C(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CC10);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 186,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CC10);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 186,invalid row %zu > %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 3>::DiagonalMatrix::operator()(size_t) const [T = float, N = 3]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

BOOL sub_100C9DA24(float a1, float a2)
{
  return a2 < a1;
}

void sub_100C9DAD8(id a1)
{
  qword_1023079A8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLApplicationLifecycleManagerSilo"));
}

void sub_100C9DB50(id a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  _QWORD v7[2];
  uint8_t buf[1640];

  if (!objc_opt_class(FBSOpenApplicationService, v1))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217CD38);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ALM: not supported on this platform because FrontBoardServices.framework is not present", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_16;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217CD38);
    LOWORD(v7[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "ALM: not supported on this platform because FrontBoardServices.framework is not present", v7, 2, v7[0]);
    goto LABEL_21;
  }
  if (objc_opt_class(RBSAssertion, v2))
    return;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217CD38);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ALM: not supported on this platform because AssertionServices.framework is not present", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217CD38);
    LOWORD(v7[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "ALM: not supported on this platform because AssertionServices.framework is not present", v7, 2, v7[0]);
LABEL_21:
    v6 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "+[CLApplicationLifecycleManagerAdapter isSupported]_block_invoke", "%s\n", v4);
    if (v6 != buf)
      free(v6);
  }
LABEL_16:
  byte_1023079B8 = 1;
}

void sub_100C9DE70()
{
  operator delete();
}

void sub_100C9DF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C9DF60(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  id v6;
  uint64_t *v7;
  id v8;
  id v9;
  unsigned __int8 *v10;
  unint64_t v11;
  id v12;
  void **v13;
  unint64_t v14;
  id v15;
  void **v16;
  id v17;
  _BYTE *v18;
  id v19;
  void **v20;
  id v21;
  NSObject *v22;
  void **v23;
  NSString *v24;
  NSDictionary *v25;
  FBSOpenApplicationOptions *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t *v33;
  uint64_t *v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  uint64_t *v38;
  void **v39;
  const char *v40;
  char *v41;
  _QWORD v42[6];
  std::__shared_weak_count *v43;
  __int128 v44;
  uint64_t v45;
  void *v46[2];
  char v47;
  void *v48[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  std::string v60;
  NSString *v61;
  void *v62;
  _QWORD v63[2];
  _QWORD v64[2];
  int v65;
  void **v66;
  void *v67[2];
  uint64_t v68;
  _BYTE __p[18];
  __int16 v70;
  _BYTE v71[14];

  objc_msgSend(*(id *)a1, "silo");
  v6 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLClientAuthorizationCache"));
  if ((a2[23] & 0x80u) == 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  v8 = objc_msgSend(v6, "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  if (!a3
    || (v9 = v8, (objc_msgSend(v8, "isNonProvisionallyAuthorizedForServiceTypeMask:", a3) & 1) != 0))
  {
    memset(&v60, 0, sizeof(v60));
    v10 = sub_1001986C8(&xmmword_102307968, a2);
    if (!v10)
      sub_100263950("unordered_map::at: key not found");
    std::string::operator=(&v60, (const std::string *)(v10 + 40));
    sub_100204320(&v60, (uint64_t)v46);
    v11 = v51;
    if ((v51 & 0x80u) != 0)
      v11 = (unint64_t)v50[1];
    if (v11)
    {
      v12 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLClientManager"));
      if ((v51 & 0x80u) == 0)
        v13 = v50;
      else
        v13 = (void **)v50[0];
      objc_msgSend(v12, "wakeUpLaunchdManagedClient:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    }
    v14 = v49;
    if ((v49 & 0x80u) != 0)
      v14 = (unint64_t)v48[1];
    if (v14)
    {
      v15 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLClientManager"));
      if ((v49 & 0x80u) == 0)
        v16 = v48;
      else
        v16 = (void **)v48[0];
      objc_msgSend(v15, "wakeUpLaunchdManagedClient:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
    }
    sub_100C39348((uint64_t)v46, (uint64_t)__p);
    if ((v71[3] & 0x80000000) != 0)
    {
      v31 = *(_QWORD *)&__p[8];
      operator delete(*(void **)__p);
      if (v31)
        goto LABEL_23;
    }
    else if (v71[3])
    {
LABEL_23:
      sub_100C39348((uint64_t)v46, (uint64_t)__p);
      v17 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLClientManager"));
      if (v71[3] >= 0)
        v18 = __p;
      else
        v18 = *(_BYTE **)__p;
      objc_msgSend(v17, "wakeUpLaunchdManagedClient:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
      if ((v71[3] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (*(_BYTE *)(a1 + 48))
      {
        sub_100C39348((uint64_t)v46, (uint64_t)v67);
        v19 = objc_alloc((Class)NSString);
        if (v68 >= 0)
          v20 = v67;
        else
          v20 = (void **)v67[0];
        v21 = objc_msgSend(v19, "initWithUTF8String:", v20);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10217CD38);
        v22 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
        {
          v23 = v67;
          if (v68 < 0)
            v23 = (void **)v67[0];
          *(_DWORD *)__p = 136380675;
          *(_QWORD *)&__p[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "ALM: %{private}s launching...", __p, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217CD38);
          v39 = v67;
          if (v68 < 0)
            v39 = (void **)v67[0];
          v65 = 136380675;
          v66 = v39;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "ALM: %{private}s launching...", &v65, 12);
          v41 = (char *)v40;
          sub_100512490("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::launchApplication(const std::string &, CLClientServiceTypeMask)", "%s\n", v40);
          if (v41 != __p)
            free(v41);
        }
        v24 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CLLaunchOptionsLocation");
        v63[0] = FBSOpenApplicationOptionKeyPayloadOptions;
        v61 = v24;
        v62 = &__kCFBooleanTrue;
        v25 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1);
        v63[1] = FBSOpenApplicationOptionKeyActivateSuspended;
        v64[0] = v25;
        v64[1] = &__kCFBooleanTrue;
        v26 = +[FBSOpenApplicationOptions optionsWithDictionary:](FBSOpenApplicationOptions, "optionsWithDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v64, v63, 2));
        sub_10052D218(a1 + 56, __p);
        v27 = *(void **)(a1 + 80);
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3321888768;
        v42[2] = sub_10020DB74;
        v42[3] = &unk_10217CD08;
        v42[4] = a1;
        v42[5] = *(_QWORD *)__p;
        v43 = *(std::__shared_weak_count **)&__p[8];
        if (*(_QWORD *)&__p[8])
        {
          v28 = (unint64_t *)(*(_QWORD *)&__p[8] + 16);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        if (SHIBYTE(v68) < 0)
        {
          sub_100115CE4(&v44, v67[0], (unint64_t)v67[1]);
        }
        else
        {
          v44 = *(_OWORD *)v67;
          v45 = v68;
        }
        objc_msgSend(v27, "openApplication:withOptions:completion:", v21, v26, v42);

        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        if (v43)
          std::__shared_weak_count::__release_weak(v43);
        if (*(_QWORD *)&__p[8])
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
        if (SHIBYTE(v68) < 0)
          operator delete(v67[0]);
      }
      else
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10217CD38);
        v37 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          if ((a2[23] & 0x80u) == 0)
            v38 = (uint64_t *)a2;
          else
            v38 = *(uint64_t **)a2;
          *(_QWORD *)__p = 68289283;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          v70 = 2081;
          *(_QWORD *)v71 = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ALM: failed attempt to launch before device unlocked since boot\", \"clientKey\":%{private, location:escape_only}s}", __p, 0x1Cu);
        }
      }
LABEL_80:
      if (v59 < 0)
        operator delete(v58);
      if (v57 < 0)
        operator delete(v56);
      if (v55 < 0)
        operator delete(v54);
      if (v53 < 0)
        operator delete(v52);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if ((char)v49 < 0)
        operator delete(v48[0]);
      if (v47 < 0)
        operator delete(v46[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      return;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CD78);
    v32 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      if ((a2[23] & 0x80u) == 0)
        v33 = (uint64_t *)a2;
      else
        v33 = *(uint64_t **)a2;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%s doesn't have a bundle ID; not going to bug SpringBoard.",
        __p,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CD78);
      if ((a2[23] & 0x80u) == 0)
        v34 = (uint64_t *)a2;
      else
        v34 = *(uint64_t **)a2;
      LODWORD(v67[0]) = 136315138;
      *(void **)((char *)v67 + 4) = v34;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%s doesn't have a bundle ID; not going to bug SpringBoard.",
        (const char *)v67);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::launchApplication(const std::string &, CLClientServiceTypeMask)", "%s\n", v35);
      if (v36 != __p)
        free(v36);
    }
    goto LABEL_80;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217CD38);
  v30 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)__p = 68289538;
    *(_WORD *)&__p[8] = 2082;
    *(_QWORD *)&__p[10] = "";
    v70 = 1026;
    *(_DWORD *)v71 = a3;
    *(_WORD *)&v71[4] = 2114;
    *(_QWORD *)&v71[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning ALM: dropping launchApplication request for unauthorized purpose\", \"RequiredServiceMask\":%{public}d, \"AuthContext\":%{public, location:escape_only}@}", __p, 0x22u);
  }
}

void sub_100C9E7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_100010174((uint64_t)&a21);
  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100C9E980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C9E9BC(uint64_t a1, void *a2)
{
  _QWORD *v4;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = off_102141E98;
  v4 = operator new(0x20uLL);
  v4[2] = 0;
  *v4 = off_102141ED0;
  v4[1] = 0;
  *((_DWORD *)v4 + 6) = 31337;
  *(_QWORD *)(a1 + 64) = v4 + 3;
  *(_QWORD *)(a1 + 72) = v4;
  objc_msgSend(a2, "silo");
  sub_1011482D0();
}

void sub_100C9EB84(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  sub_100090A0C(v3);
  sub_100C9F6D4(v2);
  v6 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  _Unwind_Resume(a1);
}

void sub_100C9EBF4()
{
  JUMPOUT(0x100C9EBB4);
}

void sub_100C9EBFC(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLApplicationLifecycleManager::onDataProtectionManagerNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217CD58);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLApplicationLifecycleManager::onDataProtectionManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217CD58);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLApplicationLifecycleManager::onDataProtectionManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100C9F424((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C9EDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C9EDD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  sub_100090A0C((_QWORD *)(a1 + 56));
  sub_100C9F6D4((_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_100C9EE70(id *a1, unsigned int *a2, const void **a3, int a4)
{
  NSObject *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t *v14;
  const void **v15;
  const __CFString *v16;
  RBSDomainAttribute **v17;
  id v18;
  id v19;
  const void *v20;
  unsigned int v21;
  const void *v22;
  NSString *v23;
  id v24;
  NSObject *v25;
  unsigned int v26;
  void *v27;
  _QWORD v28[6];
  unsigned int v29;
  uint64_t v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  _BYTE v38[18];
  RBSDomainAttribute *v39;
  RBSDomainAttribute *v40;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217CD38);
  v8 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a2;
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = (void *)*a3;
    *(_DWORD *)buf = 68289795;
    v32 = 0;
    v33 = 2082;
    v34 = "";
    v35 = 1026;
    v36 = v9;
    v37 = 1026;
    *(_DWORD *)v38 = a4;
    *(_WORD *)&v38[4] = 2081;
    *(_QWORD *)&v38[6] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@ALM: Taking process assertion for process\", \"processId\":%{public}u, \"justLaunched\":%{public}hhd, \"clientKey\":%{private, location:escape_only}s}", buf, 0x28u);
  }
  v11 = *((unsigned __int8 *)a3 + 23);
  if ((v11 & 0x80u) == 0)
    v12 = (const void *)*((unsigned __int8 *)a3 + 23);
  else
    v12 = a3[1];
  v13 = qword_102307998;
  if (byte_1023079A7 >= 0)
    v13 = byte_1023079A7;
  if (v12 != (const void *)v13)
    goto LABEL_24;
  if (byte_1023079A7 >= 0)
    v14 = &qword_102307990;
  else
    v14 = (uint64_t *)qword_102307990;
  if ((v11 & 0x80) != 0)
  {
    if (!memcmp(*a3, v14, (size_t)a3[1]))
      goto LABEL_25;
LABEL_24:
    v39 = +[RBSDomainAttribute attributeWithDomain:name:](RBSDomainAttribute, "attributeWithDomain:name:", CFSTR("com.apple.locationd"), CFSTR("FenceEvent"));
    v16 = CFSTR("locationd.fence");
    v17 = &v39;
    goto LABEL_26;
  }
  if (*((_BYTE *)a3 + 23))
  {
    v15 = a3;
    while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
    {
      v15 = (const void **)((char *)v15 + 1);
      v14 = (uint64_t *)((char *)v14 + 1);
      if (!--v11)
        goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_25:
  v40 = +[RBSDomainAttribute attributeWithDomain:name:](RBSDomainAttribute, "attributeWithDomain:name:", CFSTR("com.apple.locationd"), CFSTR("ShowAlert"));
  v16 = CFSTR("locationd.fence.elevatedPriority");
  v17 = &v40;
LABEL_26:
  v18 = objc_msgSend(objc_alloc((Class)RBSAssertion), "initWithExplanation:target:attributes:", v16, +[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", *a2), +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v17, 1));
  v19 = objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  if (*((char *)a3 + 23) >= 0)
    v20 = a3;
  else
    v20 = *a3;
  objc_msgSend(v19, "appLaunchedByAppLifecycleManager:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
  v30 = 0;
  if (objc_msgSend(v18, "acquireWithError:", &v30))
  {
    v21 = *a2;
    if (*((char *)a3 + 23) >= 0)
      v22 = a3;
    else
      v22 = *a3;
    v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22);
    v24 = objc_msgSend(*a1, "silo");
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100C9F254;
    v28[3] = &unk_10217CC78;
    v29 = v21;
    v28[4] = v23;
    v28[5] = v18;
    objc_msgSend(v24, "afterInterval:async:", v28, 10.0);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217CD38);
    v25 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *a2;
      if (*((char *)a3 + 23) >= 0)
        v27 = a3;
      else
        v27 = (void *)*a3;
      *(_DWORD *)buf = 68289794;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 1026;
      v36 = v26;
      v37 = 2082;
      *(_QWORD *)v38 = v27;
      *(_WORD *)&v38[8] = 2114;
      *(_QWORD *)&v38[10] = v30;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning ALM: Couldn't create assertion for process\", \"processId\":%{public}u, \"client\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x2Cu);
    }
    objc_msgSend(v18, "invalidate");

  }
}

void sub_100C9F254(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217CD38);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 32);
    v5[0] = 68289538;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v3;
    v10 = 2114;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@ALM: Releasing process assertion for process\", \"processId\":%{public}u, \"client\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x22u);
  }
  objc_msgSend(*(id *)(a1 + 40), "invalidate");

}

_QWORD *sub_100C9F35C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  v3 = *(_OWORD *)(a2 + 56);
  result[2] = *(_QWORD *)(a2 + 72);
  *(_OWORD *)result = v3;
  return result;
}

void sub_100C9F38C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

_BYTE *sub_100C9F3A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BYTE *result;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = a1 + 7;
  if (*(char *)(a2 + 79) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  v7 = *(_OWORD *)(a2 + 56);
  a1[9] = *(_QWORD *)(a2 + 72);
  *(_OWORD *)result = v7;
  return result;
}

void sub_100C9F40C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_100C9F424(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  const char *v22;

  objc_msgSend(*(id *)a1, "silo");
  if (*a3 == 1)
  {
    v7 = *(unsigned __int8 *)(a4 + 4);
    *(_BYTE *)(a1 + 48) = v7;
    if (v7)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217CD38);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(a1 + 48))
        v9 = "YES";
      else
        v9 = "NO";
      v10 = "en";
      if (!*(_BYTE *)(a1 + 48))
        v10 = "dis";
      *(_DWORD *)buf = 136380931;
      v20 = v9;
      v21 = 2081;
      v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ALM: device unlocked since boot, %{private}s, application launch capability, %{private}sabled", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217CD38);
      if (*(_BYTE *)(a1 + 48))
        v11 = "YES";
      else
        v11 = "NO";
      v12 = "en";
      if (!*(_BYTE *)(a1 + 48))
        v12 = "dis";
      v15 = 136380931;
      v16 = v11;
      v17 = 2081;
      v18 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "ALM: device unlocked since boot, %{private}s, application launch capability, %{private}sabled", &v15, 22);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_100C9F67C(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100C9F6A8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C9F6D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      sub_100C9F734((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

void sub_100C9F734(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void sub_100C9F764(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_100C9F790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _BYTE *v8;

  v7 = operator new(0x30uLL);
  *v7 = a2;
  v7[1] = a3;
  v8 = v7 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100115CE4(v8, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a4;
    v7[4] = *(_QWORD *)(a4 + 16);
  }
  v7[5] = *(_QWORD *)(a4 + 24);
  return v7;
}

void sub_100C9F7FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C9F810()
{
  xmmword_102307968 = 0u;
  unk_102307978 = 0u;
  dword_102307988 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_100C9DA30, &xmmword_102307968, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102307990, "com.apple.NanoCompass.watchkitapp");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307990, (void *)&_mh_execute_header);
}

void sub_100C9FA50(uint64_t a1, void *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  unsigned __int8 v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  id v14;
  int v15;
  id v16;
  __int16 v17;
  unsigned int v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  unsigned int v22;

  -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
  v5 = v4;
  objc_msgSend(a2, "bleAdvertisementTimestamp");
  v7 = v6;
  v8 = objc_msgSend(a2, "contactID");
  v9 = objc_msgSend(a2, "nearbyInfoV2DecryptedFlags");
  if (!v8 || (v9 & 2) != 0)
  {
    if (v7 > 0.0)
      v5 = v7 + kCFAbsoluteTimeIntervalSince1970;
    v14 = objc_msgSend(objc_alloc((Class)CLGatheringBleAdvertisement), "initWithAddress:contactId:flags:eFlags:authTag:iTag:rssi:count:unixTime:", objc_msgSend(a2, "btAddressData"), objc_msgSend(a2, "contactID"), objc_msgSend(a2, "nearbyInfoV2Flags"), objc_msgSend(a2, "nearbyInfoV2DecryptedFlags"), objc_msgSend(a2, "nearbyInfoV2AuthTagData"), objc_msgSend(a2, "nearbyInfoV2AuthIntegrityTagData"), v5, (int)objc_msgSend(a2, "bleRSSI"), 1);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "delegate"), "didReceiveAdvertisement:", v14);

  }
  else
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217CDC0);
    v10 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v20 = objc_msgSend(a2, "contactID");
      v21 = 1024;
      v22 = objc_msgSend(a2, "nearbyInfoV2DecryptedFlags");
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ContactID %@ opted out, niv2df %x", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217CDC0);
      v11 = qword_1022A0158;
      v15 = 138412546;
      v16 = objc_msgSend(a2, "contactID");
      v17 = 1024;
      v18 = objc_msgSend(a2, "nearbyInfoV2DecryptedFlags");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "ContactID %@ opted out, niv2df %x", &v15, 18);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "-[CLGatheringBluetoothScanner initWithQueue:withSettings:withPolicy:]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_100C9FD90(uint64_t a1, void *a2)
{
  double Current;
  id v5;
  id v6;
  id v7;
  int v8;
  int v9;
  double v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  double v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v22;
  id v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  id v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  id v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  _BYTE v47[128];

  Current = CFAbsoluteTimeGetCurrent();
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "settings"), "loggingVolatileMaxAge");
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v47, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = 0;
    v10 = Current - (double)(uint64_t)v5;
    v11 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v11)
          objc_enumerationMutation(a2);
        v13 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v14 = objc_autoreleasePoolPush();
        objc_msgSend(v13, "bleAdvertisementTimestamp");
        if (v15 >= *(double *)(*(_QWORD *)(a1 + 32) + 8))
        {
          objc_msgSend(v13, "bleAdvertisementTimestamp");
          if (v16 >= v10)
          {
            (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
            objc_msgSend(v13, "bleAdvertisementTimestamp");
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v17;
          }
          else
          {
            ++v8;
          }
        }
        else
        {
          ++v9;
        }
        objc_autoreleasePoolPop(v14);
      }
      v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v47, 16);
    }
    while (v7);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (qword_1022A0150 != -1)
    dispatch_once(&qword_1022A0150, &stru_10217CDC0);
  v18 = qword_1022A0158;
  if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
  {
    v19 = objc_msgSend(a2, "count");
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_DWORD *)buf = 134218752;
    v40 = v19;
    v41 = 1024;
    v42 = v9;
    v43 = 1024;
    v44 = v8;
    v45 = 2048;
    v46 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received %zu buffered devices, seenBefore %d, tooOld %d, last timestamp %.3lf", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217CDC0);
    v22 = qword_1022A0158;
    v23 = objc_msgSend(a2, "count");
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v31 = 134218752;
    v32 = v23;
    v33 = 1024;
    v34 = v9;
    v35 = 1024;
    v36 = v8;
    v37 = 2048;
    v38 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "Received %zu buffered devices, seenBefore %d, tooOld %d, last timestamp %.3lf", (size_t)&v31, 34, (_DWORD)v27, *((double *)&v27 + 1));
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "-[CLGatheringBluetoothScanner initWithQueue:withSettings:withPolicy:]_block_invoke", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLLocationManagerGatheringBufferedDevicesReceived, 0, 0, 0);
}

void sub_100CA00F0(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  if (a2)
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217CDC0);
    v4 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v11 = objc_msgSend(a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217CDC0);
      v5 = qword_1022A0158;
      v8 = 138412290;
      v9 = objc_msgSend(a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "%@", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "-[CLGatheringBluetoothScanner initWithQueue:withSettings:withPolicy:]_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "invalidate");

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  }
}

void sub_100CA02D4(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  if (a2)
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217CDC0);
    v4 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v11 = objc_msgSend(a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217CDC0);
      v5 = qword_1022A0158;
      v8 = 138412290;
      v9 = objc_msgSend(a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "%@", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "-[CLGatheringBluetoothScanner initWithQueue:withSettings:withPolicy:]_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "invalidate");

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  }
}

void sub_100CA0B4C(id a1)
{
  qword_1022A0158 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

void sub_100CA0CF0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v36[3];
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v10 = (std::__shared_weak_count *)a4[1];
  v41 = *a4;
  v42 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a5[1];
  v39 = *a5;
  v40 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  v37 = *a6;
  v38 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v36[0] = xmmword_1023079E0;
  v36[1] = *(_OWORD *)algn_1023079F0;
  v36[2] = xmmword_102307A00;
  sub_100D04860(a1, a2, 11, &v41, &v39, &v37, a8, a7, v36);
  v19 = v38;
  if (v38)
  {
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v40;
  if (v40)
  {
    v23 = (unint64_t *)&v40->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v42;
  if (v42)
  {
    v26 = (unint64_t *)&v42->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)a1 = off_10217CDF0;
  *(_QWORD *)(a1 + 352) = off_10217CF18;
  *(_QWORD *)(a1 + 360) = off_1021A5968;
  *(_OWORD *)(a1 + 368) = xmmword_101C1F230;
  *(_OWORD *)(a1 + 384) = xmmword_101C1F240;
  *(_QWORD *)(a1 + 400) = 0x12000001F4;
  *(_DWORD *)(a1 + 408) = 72;
  *(_QWORD *)(a1 + 416) = 0x40CC200000000000;
  *(_BYTE *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 428) = 1;
  *(_OWORD *)(a1 + 432) = xmmword_101C1F250;
  *(_OWORD *)(a1 + 448) = xmmword_101C1F260;
  *(_QWORD *)(a1 + 464) = 0x40B2C00000000000;
  *(_BYTE *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = xmmword_101C1F270;
  *(_DWORD *)(a1 + 496) = 1;
  *(_QWORD *)(a1 + 504) = 0x4122750000000000;
  *(_OWORD *)(a1 + 512) = xmmword_101C203A0;
  *(_OWORD *)(a1 + 528) = xmmword_101C203B0;
  *(_OWORD *)(a1 + 544) = xmmword_101C203C0;
  *(_OWORD *)(a1 + 560) = xmmword_101C203D0;
  *(_QWORD *)(a1 + 576) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 584) = 4;
  *(_OWORD *)(a1 + 592) = xmmword_101C1F280;
  *(_QWORD *)(a1 + 608) = 0x405E000000000000;
  *(_QWORD *)(a1 + 616) = *a3;
  v28 = a3[1];
  *(_QWORD *)(a1 + 624) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 796) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 1440) = 0;
  *(_DWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1456) = objc_alloc_init((Class)SPFinderInterface);
  *(_QWORD *)(a1 + 1464) = objc_alloc_init((Class)NSMutableArray);
  *(_QWORD *)(a1 + 1472) = objc_alloc_init((Class)NSMutableArray);
  *(_QWORD *)(a1 + 1480) = objc_alloc_init(CLAvengerBeaconPayloadDedupingCache);
  *(_BYTE *)(a1 + 1488) = 0;
  *(_BYTE *)(a1 + 1492) = 0;
  *(_BYTE *)(a1 + 1496) = 0;
  *(_BYTE *)(a1 + 1632) = 0;
  *(_WORD *)(a1 + 1640) = 0;
  *(_QWORD *)(a1 + 1648) = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
  *(_BYTE *)(a1 + 1664) = 0;
  *(_QWORD *)(a1 + 1672) = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
  *(_WORD *)(a1 + 1696) = 0;
  *(_BYTE *)(a1 + 1712) = 0;
  *(_DWORD *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1792) = _Q0;
  *(_QWORD *)(a1 + 1808) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1816) = 0;
  *(_QWORD *)(a1 + 1832) = 0;
  *(_QWORD *)(a1 + 1824) = 0;
  *(_DWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_DWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 1901) = 0;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_WORD *)(a1 + 1920) = 0;
  *(_BYTE *)(a1 + 1922) = 0;
  *(_QWORD *)(a1 + 1872) = 0;
  *(_QWORD *)(a1 + 1880) = 0;
  *(_WORD *)(a1 + 1888) = 0;
  sub_100197040();
  *(_BYTE *)(a1 + 1923) = sub_10076021C();
  *(_BYTE *)(a1 + 1924) = 0;
  *(_WORD *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_DWORD *)(a1 + 2079) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2147) = 0u;
  *(_BYTE *)(a1 + 2168) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 616) + 32))(*(_QWORD *)(a1 + 616), a1 + 360);
  *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + 368);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 616) + 16))(*(_QWORD *)(a1 + 616), a1 + 352);
  operator new();
}

void sub_100CA1A74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  sub_100010174(v2);
  if (*(_BYTE *)(v1 + 1440))
    sub_100261F44(v1 + 1320);
  sub_100261F44(v1 + 616);
  sub_100429668(v1);
  _Unwind_Resume(a1);
}

void sub_100CA1BF4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLSubHarvesterAvenger::onPerformanceAnalyticsTimerFired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217D048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvenger::onPerformanceAnalyticsTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217D048);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvenger::onPerformanceAnalyticsTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100CA77E8(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100CA1DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100CA1DC4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLSubHarvesterAvenger::onEnabledAnalyticsTimerFired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217D048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvenger::onEnabledAnalyticsTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217D048);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvenger::onEnabledAnalyticsTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100CA7F28(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100CA1F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100CA1F94(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLSubHarvesterAvenger::onDeferredSaveBeaconPayloadTimerFired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217D048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvenger::onDeferredSaveBeaconPayloadTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217D048);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvenger::onDeferredSaveBeaconPayloadTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100CA8D48(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100CA2144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100CA2164(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  sub_100CA0CF0(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100CA2170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_10217CDF0;
  *(_QWORD *)(a1 + 352) = off_10217CF18;

  v2 = *(_QWORD *)(a1 + 1720);
  if (v2)
  {
    sub_1009865B8(v2);
    operator delete();
  }
  v3 = *(_QWORD *)(a1 + 1728);
  if (v3)
  {
    sub_1009865B8(v3);
    operator delete();
  }
  v4 = *(_QWORD *)(a1 + 1680);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 1656);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 1928);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);

  v7 = *(_QWORD *)(a1 + 1968);
  if (v7)
  {
    sub_1009865B8(v7);
    operator delete();
  }
  sub_100010174(a1 + 1984);
  if (*(_BYTE *)(a1 + 1440))
    sub_100261F44(a1 + 1320);
  sub_100261F44(a1 + 616);
  return sub_100429668(a1);
}

uint64_t sub_100CA22B0(uint64_t a1)
{
  return sub_100CA2170(a1 - 352);
}

void sub_100CA22B8(uint64_t a1)
{
  sub_100CA2170(a1);
  operator delete();
}

void sub_100CA22DC(uint64_t a1)
{
  sub_100CA2170(a1 - 352);
  operator delete();
}

uint64_t sub_100CA2304(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 616) + 200))(*(_QWORD *)(a1 + 616));
}

uint64_t sub_100CA2314(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  NSObject *v5;
  unsigned int v6;
  std::string *v7;
  NSObject *v8;
  unsigned int v9;
  std::string *p_p;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  std::string __p;
  _QWORD v16[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  std::string *v24;

  sub_100119F3C(v16);
  v4 = *(_OWORD *)algn_1023079F0;
  *(_OWORD *)(a1 + 280) = xmmword_1023079E0;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = *(_OWORD *)&algn_1023079F0[9];
  if (sub_100006BB4(a2, "Avenger", v16))
  {
    sub_1011E7A6C(a1 + 280, (uint64_t)v16);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      sub_100201404(a1);
      v6 = sub_100201404(a1);
      sub_1011E7898((double *)(a1 + 280), &__p);
      v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289539;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2050;
      v22 = v6;
      v23 = 2081;
      v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100119F3C(v14);
    if (sub_100006BB4((uint64_t)v16, "Settings", v14))
    {
      sub_1011C08B8(a1 + 360, (uint64_t)v14);
      memset(&__p, 0, sizeof(__p));
      sub_10052ACB4((uint64_t)v14, &__p);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v8 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        sub_100201404(a1);
        v9 = sub_100201404(a1);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289539;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        v21 = 2050;
        v22 = v9;
        v23 = 2081;
        v24 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-settings\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"settings\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      v11 = *(_QWORD *)(a1 + 1680);
      if (v11)
        sub_101247A78(v11, *(_DWORD *)(a1 + 404));
      v12 = *(_QWORD *)(a1 + 1656);
      if (v12)
        sub_101247A78(v12, *(_DWORD *)(a1 + 408));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_10011A5A8(v14);
  }
  return sub_10011A5A8(v16);
}

void sub_100CA25F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  sub_10011A5A8(&a10);
  sub_10011A5A8(&a18);
  _Unwind_Resume(a1);
}

id sub_100CA264C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 1464), "count");
}

uint64_t sub_100CA2658()
{
  return 0;
}

uint64_t sub_100CA2660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  char v8;
  char v9;
  const char *v10;

  if (*(_BYTE *)(a1 + 1921))
  {
    v2 = *(_QWORD *)(a1 + 616);
    v7 = 12;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v2 + 96))(v2, &v7);
    *(_BYTE *)(a1 + 1921) = 0;
  }
  v7 = 3600;
  v8 = 0;
  v3 = *(_QWORD *)(a1 + 1912);
  if (v3 == 2 || v3 == 1 && !*(_BYTE *)(a1 + 1920))
    v8 = 1;
  v10 = "avengers";
  v9 = 0;
  v4 = *(_QWORD *)(a1 + 616);
  v6 = 12;
  result = (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v4 + 80))(v4, &v6, &v7);
  *(_BYTE *)(a1 + 1921) = 1;
  return result;
}

uint64_t sub_100CA2714(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFAbsoluteTime Current;
  _DWORD v27[2];
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;

  objc_msgSend(*(id *)(a1 + 1464), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 1472), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 1480), "removeAllObjects");
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 1697);
    v27[0] = 68289538;
    v27[1] = 0;
    v28 = 2082;
    v29 = "";
    v30 = 1026;
    v31 = v3;
    v32 = 2050;
    v33 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"avenger: derivedEnableHarvesting\", \"optInScreenOffScan\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v27, 0x22u);
  }
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 1);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7, 3);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v9, 7);
  v10 = *(_QWORD *)(a1 + 616);
  v27[0] = 22;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v10 + 48))(v10, v27);
  v11 = *(_QWORD *)(a1 + 616);
  v27[0] = 0;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v11 + 64))(v11, v27);
  v12 = *(_QWORD *)(a1 + 616);
  v27[0] = 0;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v12 + 104))(v12, v27);
  v13 = *(_QWORD *)(a1 + 616);
  v27[0] = 6;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v13 + 88))(v13, v27);
  v14 = *(_QWORD *)(a1 + 616);
  v27[0] = 7;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v14 + 88))(v14, v27);
  sub_100CA2660(a1);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 616) + 144))(*(_QWORD *)(a1 + 616), *(unsigned __int8 *)(a1 + 1697));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 616) + 192))(*(_QWORD *)(a1 + 616));
  v15 = *(_QWORD *)(a1 + 616);
  v27[0] = 4;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v15 + 120))(v15, v27);
  v16 = *(_QWORD *)(a1 + 616);
  v27[0] = 3;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v16 + 120))(v16, v27);
  v17 = *(_QWORD *)(a1 + 616);
  v27[0] = 2;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v17 + 120))(v17, v27);
  v18 = *(_QWORD *)(a1 + 616);
  v27[0] = 1;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 120))(v18, v27);
  v19 = *(_QWORD *)(a1 + 1720);
  if (v19)
  {
    *(_DWORD *)(a1 + 1784) = 0;
    *(_OWORD *)(a1 + 1752) = 0u;
    *(_OWORD *)(a1 + 1768) = 0u;
    *(_OWORD *)(a1 + 1736) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 1792) = _Q0;
    *(_QWORD *)(a1 + 1808) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 1816) = 0;
    *(_QWORD *)(a1 + 1880) = 0;
    *(_QWORD *)(a1 + 1872) = 0;
    *(_QWORD *)(a1 + 1832) = 0;
    *(_QWORD *)(a1 + 1824) = 0;
    *(_DWORD *)(a1 + 1840) = 0;
    *(_QWORD *)(a1 + 1856) = 0;
    *(_QWORD *)(a1 + 1848) = 0;
    *(_DWORD *)(a1 + 1864) = 0;
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001F40D0(v19, Current + *(double *)(a1 + 416));
  }
  return 1;
}

id sub_100CA2A28(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  const char *v28;
  uint8_t *v29;
  _WORD v30[8];
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v32 = 0;
    v33 = 2082;
    v34 = "";
    v35 = 2050;
    v36 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"avenger: derivedDisableHarvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
  v3 = *(_QWORD *)(a1 + 56);
  v4 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v4, 1);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v6, 3);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v8, 7);
  v9 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 22;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 56))(v9, buf);
  v10 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 72))(v10, buf);
  v11 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 12;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 96))(v11, buf);
  *(_BYTE *)(a1 + 1921) = 0;
  v12 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 6;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 96))(v12, buf);
  v13 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 7;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 96))(v13, buf);
  v14 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 112))(v14, buf);
  v15 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 4;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 128))(v15, buf);
  v16 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 3;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 128))(v16, buf);
  v17 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 2;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v17 + 128))(v17, buf);
  v18 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)buf = 1;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v18 + 128))(v18, buf);
  if (*(_BYTE *)(a1 + 1664))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10217D088);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#wigo,off,BlueAvengerHarvest", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10217D088);
      v30[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,BlueAvengerHarvest", v30, 2);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterAvenger::derivedDisableHarvesting()", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10217CF78);
    v20 = *(_QWORD *)(a1 + 616);
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v20 + 56))(v20, buf);
  }
  if (*(_BYTE *)(a1 + 1641))
  {
    v21 = *(_QWORD *)(a1 + 616);
    *(_DWORD *)buf = 1;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v21 + 56))(v21, buf);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 616) + 152))(*(_QWORD *)(a1 + 616));
  objc_msgSend(*(id *)(a1 + 1464), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 1472), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 1480), "removeAllObjects");
  result = *(id *)(a1 + 1720);
  if (result)
  {
    *(_DWORD *)(a1 + 1784) = 0;
    *(_OWORD *)(a1 + 1752) = 0u;
    *(_OWORD *)(a1 + 1768) = 0u;
    *(_OWORD *)(a1 + 1736) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 1792) = _Q0;
    *(_QWORD *)(a1 + 1808) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 1816) = 0;
    *(_QWORD *)(a1 + 1880) = 0;
    *(_QWORD *)(a1 + 1872) = 0;
    *(_QWORD *)(a1 + 1832) = 0;
    *(_QWORD *)(a1 + 1824) = 0;
    *(_DWORD *)(a1 + 1840) = 0;
    *(_QWORD *)(a1 + 1856) = 0;
    *(_QWORD *)(a1 + 1848) = 0;
    *(_DWORD *)(a1 + 1864) = 0;
    return sub_10016E3C4((uint64_t)result);
  }
  return result;
}

NSDictionary *__cdecl sub_100CA2EA4(id a1)
{
  return (NSDictionary *)&off_102220088;
}

id sub_100CA2EB0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  id v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 1464), "count");
    v4 = objc_msgSend(*(id *)(a1 + 1472), "count");
    v7[0] = 68289794;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v3;
    v12 = 2050;
    v13 = v4;
    v14 = 2050;
    v15 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"derivedPruneHarvest\", \"cacheSize\":%{public}lu, \"beaconPayloadCacheSize\":%{public}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v7, 0x30u);
  }
  while ((unint64_t)objc_msgSend(*(id *)(a1 + 1464), "count") > *(int *)(a1 + 400))
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1464), "objectAtIndexedSubscript:", 0), "advertisement");
    if (sub_100CA3058((uint64_t)v5, (uint64_t)v5))
      ++*(_DWORD *)(a1 + 1768);
    else
      ++*(_DWORD *)(a1 + 1764);
    objc_msgSend(*(id *)(a1 + 1464), "removeObjectAtIndex:", 0);
    ++*(_DWORD *)(a1 + 1760);
  }
  while ((unint64_t)objc_msgSend(*(id *)(a1 + 1472), "count") > *(int *)(a1 + 400))
    objc_msgSend(*(id *)(a1 + 1472), "removeObjectAtIndex:", 0);
  return objc_msgSend(*(id *)(a1 + 1480), "pruneCacheWithSize:");
}

uint64_t sub_100CA3058(uint64_t a1, uint64_t a2)
{
  SEL v3;
  uint64_t v4;
  NSInvocation *v5;
  unsigned __int8 v7;

  v7 = 0;
  v3 = NSSelectorFromString(CFSTR("isPosh"));
  v5 = +[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", objc_msgSend((id)objc_opt_class(a2, v4), "instanceMethodSignatureForSelector:", v3));
  -[NSInvocation setSelector:](v5, "setSelector:", v3);
  -[NSInvocation setTarget:](v5, "setTarget:", a2);
  -[NSInvocation invoke](v5, "invoke");
  -[NSInvocation getReturnValue:](v5, "getReturnValue:", &v7);
  return v7;
}

id sub_100CA30EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 11);
}

void sub_100CA30F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = 11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got location notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v7, 0x1Cu);
  }
  sub_100CA31FC(a1, a4, a4 + 160);
}

void sub_100CA31FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  NSObject *v6;
  uint32_t v7;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  NSObject *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  double v55;
  double v56;
  _OWORD v57[8];
  _OWORD v58[2];
  _OWORD v59[8];
  _OWORD v60[2];
  uint64_t buf;
  __int16 v62;
  const char *v63;
  __int16 v64;
  _BYTE v65[10];
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  _BYTE v71[10];
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  uint64_t v77;

  if (*(_BYTE *)(a1 + 1923))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289282;
      v62 = 2082;
      v63 = "";
      v64 = 2050;
      *(_QWORD *)v65 = 11;
      v4 = "{\"msg%{public}.0s\":\"device SKU is restricted; discarding location\", \"subHarvester\":%{public, location:C"
           "LSubHarvesterIdentifier}lld}";
LABEL_11:
      v6 = v3;
      v7 = 28;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&buf, v7);
      return;
    }
    return;
  }
  if (!*(_BYTE *)(a1 + 1922))
  {
    v10 = *(_QWORD *)(a1 + 1928);
    LOBYTE(buf) = 0;
    if (sub_100179958(v10, (double *)(a2 + 4), (double *)(a2 + 12), (double *)(a2 + 20), &buf))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v11 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        buf = 68289282;
        v62 = 2082;
        v63 = "";
        v64 = 2050;
        *(_QWORD *)v65 = 11;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"location inside excluded zone; discarding\", \"subHarvester\":%{public, location:CLSubH"
          "arvesterIdentifier}lld}",
          (uint8_t *)&buf,
          0x1Cu);
      }
      *(_BYTE *)(a1 + 1924) = 1;
      return;
    }
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 176))(*(_QWORD *)(a1 + 56)) & 1) == 0)
    {
      v12 = *(void **)(a1 + 1952);
      v13 = *(_OWORD *)(a2 + 112);
      v59[6] = *(_OWORD *)(a2 + 96);
      v59[7] = v13;
      v60[0] = *(_OWORD *)(a2 + 128);
      *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)(a2 + 140);
      v14 = *(_OWORD *)(a2 + 48);
      v59[2] = *(_OWORD *)(a2 + 32);
      v59[3] = v14;
      v15 = *(_OWORD *)(a2 + 80);
      v59[4] = *(_OWORD *)(a2 + 64);
      v59[5] = v15;
      v16 = *(_OWORD *)(a2 + 16);
      v59[0] = *(_OWORD *)a2;
      v59[1] = v16;
      objc_msgSend(v12, "receiveLocation:", v59);
    }
    if (!sub_100CA723C(a1, a2))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v24 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v25 = (int)*(double *)(a2 + 4);
        v26 = (int)*(double *)(a2 + 12);
        v27 = (int)*(double *)(a2 + 20);
        v28 = (int)*(double *)(a2 + 76);
        v29 = *(unsigned __int8 *)(a1 + 796);
        if (*(_BYTE *)(a1 + 796))
        {
          v30 = (int)*(double *)(a1 + 644);
          v31 = (int)*(double *)(a1 + 652);
          v29 = (int)*(double *)(a1 + 660);
          v32 = (int)*(double *)(a1 + 716);
        }
        else
        {
          v30 = 0;
          v31 = 0;
          v32 = 0;
        }
        buf = 68291331;
        v62 = 2082;
        v63 = "";
        v64 = 1025;
        *(_DWORD *)v65 = v25;
        *(_WORD *)&v65[4] = 1025;
        *(_DWORD *)&v65[6] = v26;
        v66 = 1025;
        v67 = v27;
        v68 = 1025;
        v69 = v28;
        v70 = 1025;
        *(_DWORD *)v71 = v30;
        *(_WORD *)&v71[4] = 1025;
        *(_DWORD *)&v71[6] = v31;
        v72 = 1025;
        v73 = v29;
        v74 = 1025;
        v75 = v32;
        v76 = 2050;
        v77 = 11;
        v4 = "{\"msg%{public}.0s\":\"location is filtered due to lack of additional information\", \"lat\":%{private}d, \""
             "lng\":%{private}d, \"ucc\":%{private}d, \"timestamp\":%{private}d, \"last.lat\":%{private}d, \"last.lng\":%"
             "{private}d, \"last.ucc\":%{private}d, \"last.timestamp\":%{private}d, \"subHarvester\":%{public, location:C"
             "LSubHarvesterIdentifier}lld}";
        v6 = v24;
        v7 = 76;
        goto LABEL_12;
      }
      return;
    }
    v17 = *(void **)(a1 + 1944);
    v18 = *(_OWORD *)(a2 + 112);
    v57[6] = *(_OWORD *)(a2 + 96);
    v57[7] = v18;
    v58[0] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(a2 + 140);
    v19 = *(_OWORD *)(a2 + 48);
    v57[2] = *(_OWORD *)(a2 + 32);
    v57[3] = v19;
    v20 = *(_OWORD *)(a2 + 80);
    v57[4] = *(_OWORD *)(a2 + 64);
    v57[5] = v20;
    v21 = *(_OWORD *)(a2 + 16);
    v57[0] = *(_OWORD *)a2;
    v57[1] = v21;
    objc_msgSend(v17, "receiveLocation:", v57);
    if (*(_BYTE *)(a1 + 1664) && (v22 = *(_DWORD *)(a2 + 96), v22 <= 0xB) && ((1 << v22) & 0xC02) != 0)
    {
      v23 = 2;
    }
    else if (*(_BYTE *)(a1 + 1641))
    {
      v33 = *(_DWORD *)(a2 + 96);
      if (v33 == 4 || v33 == 13)
        v23 = 3;
      else
        v23 = 1;
    }
    else
    {
      v23 = 1;
    }
    *(_DWORD *)(a1 + 1448) = v23;
    v35 = (_OWORD *)(a1 + 640);
    if (*(_BYTE *)(a1 + 796))
    {
      if (*(double *)(a1 + 716) >= *(double *)(a2 + 76))
      {
LABEL_48:
        if (*(_BYTE *)(a1 + 796))
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 176))(*(_QWORD *)(a1 + 56)) & 1) == 0)
          {
            v55 = *(double *)(a1 + 1792);
            if (v55 > 0.0)
            {
              v56 = *(double *)(a1 + 716) - v55;
              if (v56 > 0.0)
              {
                ++*(_DWORD *)(a1 + 1864);
                *(double *)(a1 + 1872) = v56 + *(double *)(a1 + 1872);
                *(double *)(a1 + 1880) = *(double *)(a1 + 1880) + v56 * v56;
              }
            }
          }
        }
        if (objc_msgSend(*(id *)(a1 + 1464), "count"))
          sub_100CA61EC(a1);
        sub_100CA54F0((_BYTE *)a1, 0);
        sub_100CA4270((_QWORD *)a1, 0);
        return;
      }
      v36 = *(_OWORD *)(a2 + 16);
      *v35 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 656) = v36;
      v37 = *(_OWORD *)(a2 + 32);
      v38 = *(_OWORD *)(a2 + 48);
      v39 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 720) = v39;
      *(_OWORD *)(a1 + 672) = v37;
      *(_OWORD *)(a1 + 688) = v38;
      v40 = *(_OWORD *)(a2 + 96);
      v41 = *(_OWORD *)(a2 + 112);
      v42 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 780) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 752) = v41;
      *(_OWORD *)(a1 + 768) = v42;
      *(_OWORD *)(a1 + 736) = v40;
    }
    else
    {
      v43 = *(_OWORD *)(a2 + 16);
      *v35 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 656) = v43;
      v44 = *(_OWORD *)(a2 + 32);
      v45 = *(_OWORD *)(a2 + 48);
      v46 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 720) = v46;
      *(_OWORD *)(a1 + 672) = v44;
      *(_OWORD *)(a1 + 688) = v45;
      v47 = *(_OWORD *)(a2 + 96);
      v48 = *(_OWORD *)(a2 + 112);
      v49 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 780) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 752) = v48;
      *(_OWORD *)(a1 + 768) = v49;
      *(_OWORD *)(a1 + 736) = v47;
      *(_BYTE *)(a1 + 796) = 1;
    }
    sub_100CA72E8(a1 + 800, a3);
    *(_BYTE *)(a1 + 1712) = 0;
    *(double *)(a1 + 1936) = sub_100CA3CC8((_QWORD *)a1, a1 + 1496);
    sub_100CA3D88(a1);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v50 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v51 = (int)*(double *)(a2 + 4);
      v52 = (int)*(double *)(a2 + 12);
      v53 = (int)*(double *)(a2 + 20);
      v54 = (int)*(double *)(a2 + 76);
      buf = 68290307;
      v62 = 2082;
      v63 = "";
      v64 = 1025;
      *(_DWORD *)v65 = v51;
      *(_WORD *)&v65[4] = 1025;
      *(_DWORD *)&v65[6] = v52;
      v66 = 1025;
      v67 = v53;
      v68 = 1025;
      v69 = v54;
      v70 = 2050;
      *(_QWORD *)v71 = 11;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"location is set\", \"lat\":%{private}d, \"lng\":%{private}d, \"ucc\":%{private}d, \"timestamp\":%{private}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x34u);
    }
    goto LABEL_48;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v3 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    buf = 68289282;
    v62 = 2082;
    v63 = "";
    v64 = 2050;
    *(_QWORD *)v65 = 11;
    v4 = "{\"msg%{public}.0s\":\"the country code is restricted; discarding location\", \"subHarvester\":%{public, locati"
         "on:CLSubHarvesterIdentifier}lld}";
    goto LABEL_11;
  }
}

void sub_100CA389C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  const CLMotionActivity *v17;
  int *v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double v39;
  double v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  void *i;
  void *v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[8];
  uint64_t v53;
  _OWORD v54[8];
  uint64_t v55;
  uint8_t v56[128];
  _BYTE buf[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;

  v6 = *(void **)(a1 + 1944);
  v7 = *((_OWORD *)a4 + 7);
  v54[6] = *((_OWORD *)a4 + 6);
  v54[7] = v7;
  v55 = *((_QWORD *)a4 + 16);
  v8 = *((_OWORD *)a4 + 3);
  v54[2] = *((_OWORD *)a4 + 2);
  v54[3] = v8;
  v9 = *((_OWORD *)a4 + 5);
  v54[4] = *((_OWORD *)a4 + 4);
  v54[5] = v9;
  v10 = *((_OWORD *)a4 + 1);
  v54[0] = *(_OWORD *)a4;
  v54[1] = v10;
  objc_msgSend(v6, "receiveMotionActivity:", v54);
  v11 = *(void **)(a1 + 1952);
  v12 = *((_OWORD *)a4 + 7);
  v52[6] = *((_OWORD *)a4 + 6);
  v52[7] = v12;
  v53 = *((_QWORD *)a4 + 16);
  v13 = *((_OWORD *)a4 + 3);
  v52[2] = *((_OWORD *)a4 + 2);
  v52[3] = v13;
  v14 = *((_OWORD *)a4 + 5);
  v52[4] = *((_OWORD *)a4 + 4);
  v52[5] = v14;
  v15 = *((_OWORD *)a4 + 1);
  v52[0] = *(_OWORD *)a4;
  v52[1] = v15;
  objc_msgSend(v11, "receiveMotionActivity:", v52);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v16 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289282;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 11;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got motion state notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
  v18 = (int *)(a1 + 1496);
  if (!*(_BYTE *)(a1 + 1632)
    || (CLMotionActivity::isSimilar((CLMotionActivity *)(a1 + 1496), (const CLMotionActivity *)a4, v17) & 1) == 0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v19 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(unsigned __int8 *)(a1 + 1632);
      if (*(_BYTE *)(a1 + 1632))
        v20 = *v18;
      v21 = *a4;
      *(_QWORD *)buf = 68289794;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v20;
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = v21;
      *(_WORD *)&buf[30] = 2050;
      *(_QWORD *)&v58 = 11;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updated avenger harvester motion activity state\", \"fLastMotionActivity\":%{public}d, \"nextMotionActivity\":%{public}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x28u);
    }
    if ((!*(_BYTE *)(a1 + 1632) || CLMotionActivity::isMoving((CLMotionActivity *)(a1 + 1496)))
      && (CLMotionActivity::isMoving((CLMotionActivity *)a4) & 1) == 0)
    {
      *(_BYTE *)(a1 + 1712) = 1;
    }
    v22 = *(unsigned __int8 *)(a1 + 1632);
    if (*(_BYTE *)(a1 + 1632) && *v18 <= 0x38 && ((1 << *v18) & 0x110000000000C20) != 0)
    {
      *(_OWORD *)v18 = *(_OWORD *)a4;
      v23 = *((_OWORD *)a4 + 1);
      v24 = *((_OWORD *)a4 + 2);
      v25 = *((_OWORD *)a4 + 4);
      *(_OWORD *)(a1 + 1544) = *((_OWORD *)a4 + 3);
      *(_OWORD *)(a1 + 1560) = v25;
      *(_OWORD *)(a1 + 1512) = v23;
      *(_OWORD *)(a1 + 1528) = v24;
      v26 = *((_OWORD *)a4 + 5);
      v27 = *((_OWORD *)a4 + 6);
      v28 = *((_OWORD *)a4 + 7);
      *(_QWORD *)(a1 + 1624) = *((_QWORD *)a4 + 16);
      *(_OWORD *)(a1 + 1592) = v27;
      *(_OWORD *)(a1 + 1608) = v28;
      *(_OWORD *)(a1 + 1576) = v26;
    }
    else
    {
      if (*a4 <= 0x38 && ((1 << *a4) & 0x110000000000C20) != 0)
      {
        objc_msgSend(*(id *)(a1 + 1960), "regeotagBeaconPayloads");
        v22 = *(unsigned __int8 *)(a1 + 1632);
      }
      *(_OWORD *)v18 = *(_OWORD *)a4;
      v29 = *((_OWORD *)a4 + 1);
      v30 = *((_OWORD *)a4 + 2);
      v31 = *((_OWORD *)a4 + 4);
      *(_OWORD *)(a1 + 1544) = *((_OWORD *)a4 + 3);
      *(_OWORD *)(a1 + 1560) = v31;
      *(_OWORD *)(a1 + 1512) = v29;
      *(_OWORD *)(a1 + 1528) = v30;
      v32 = *((_OWORD *)a4 + 5);
      v33 = *((_OWORD *)a4 + 6);
      v34 = *((_OWORD *)a4 + 7);
      *(_QWORD *)(a1 + 1624) = *((_QWORD *)a4 + 16);
      *(_OWORD *)(a1 + 1592) = v33;
      *(_OWORD *)(a1 + 1608) = v34;
      *(_OWORD *)(a1 + 1576) = v32;
      if (!v22)
        *(_BYTE *)(a1 + 1632) = 1;
    }
    v35 = *((_OWORD *)a4 + 7);
    v62 = *((_OWORD *)a4 + 6);
    v63 = v35;
    v64 = *((_QWORD *)a4 + 16);
    v36 = *((_OWORD *)a4 + 3);
    v58 = *((_OWORD *)a4 + 2);
    v59 = v36;
    v37 = *((_OWORD *)a4 + 5);
    v60 = *((_OWORD *)a4 + 4);
    v61 = v37;
    v38 = *((_OWORD *)a4 + 1);
    *(_OWORD *)buf = *(_OWORD *)a4;
    *(_OWORD *)&buf[16] = v38;
    v65 = 1;
    v39 = sub_100CA3CC8((_QWORD *)a1, (uint64_t)buf);
    v40 = *(double *)(a1 + 1936);
    if (v40 < v39)
      v40 = v39;
    *(double *)(a1 + 1936) = v40;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v41 = *(void **)(a1 + 1464);
    v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
    if (v42)
    {
      v43 = v42;
      v44 = *(_QWORD *)v49;
      do
      {
        for (i = 0; i != v43; i = (char *)i + 1)
        {
          if (*(_QWORD *)v49 != v44)
            objc_enumerationMutation(v41);
          v46 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v46, "maxActivityBasedSpeedSinceAdvertisement");
          if (v47 < v39)
            v47 = v39;
          objc_msgSend(v46, "setMaxActivityBasedSpeedSinceAdvertisement:", v47);
        }
        v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
      }
      while (v43);
    }
    sub_100CA3D88(a1);
  }
}

double sub_100CA3CC8(_QWORD *a1, uint64_t a2)
{
  double v4;
  int v5;
  _QWORD *v6;

  sub_100197040();
  v4 = 0.0;
  if ((sub_10011E0F0() & 1) != 0)
    return v4;
  if (!*(_BYTE *)(a2 + 136))
    goto LABEL_9;
  v5 = *(_DWORD *)a2;
  if (*(int *)a2 > 51)
  {
    if (v5 > 99)
    {
      if (v5 == 100 || v5 == 19150)
      {
LABEL_14:
        v6 = a1 + 67;
        return *(double *)v6;
      }
    }
    else if (v5 == 52 || v5 == 56)
    {
LABEL_9:
      v6 = a1 + 66;
      return *(double *)v6;
    }
LABEL_15:
    v6 = a1 + 69;
    return *(double *)v6;
  }
  switch(v5)
  {
    case 1:
    case 2:
      return v4;
    case 5:
    case 10:
    case 11:
      goto LABEL_9;
    case 6:
      goto LABEL_14;
    case 8:
      v6 = a1 + 68;
      return *(double *)v6;
    default:
      goto LABEL_15;
  }
  return v4;
}

void sub_100CA3D88(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v2 = sub_100CA5BF8(a1);
  v3 = 376;
  if (v2)
    v3 = 368;
  *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + v3);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 1688);
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2050;
    v10 = v5;
    v11 = 2050;
    v12 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updateOperationalModeIfNecessary\", \"fCurrentTimeOffsetThreshold\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v6, 0x26u);
  }
}

void sub_100CA3E98()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v0 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289282;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    v4 = 2050;
    v5 = 11;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got step count notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v1, 0x1Cu);
  }
}

_QWORD *sub_100CA3F80(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  NSObject *v19;
  int v20;
  int v22;
  const char *v23;
  char *v24;
  _DWORD v25[4];
  _BYTE buf[48];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[28];

  if (*a3 == 22)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_10104BD1C(*(int **)(a4 + 800));
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v7;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got batched wifi provider location\", \"batchSize\":%{public}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x26u);
    }
    if (sub_10104BD1C(*(int **)(a4 + 800)))
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = sub_1003471B4(*(_QWORD *)(a4 + 800));
        v11 = *(_OWORD *)(v10 + v8 + 16);
        *(_OWORD *)buf = *(_OWORD *)(v10 + v8);
        *(_OWORD *)&buf[16] = v11;
        v12 = *(_OWORD *)(v10 + v8 + 80);
        v14 = *(_OWORD *)(v10 + v8 + 32);
        v13 = *(_OWORD *)(v10 + v8 + 48);
        v28 = *(_OWORD *)(v10 + v8 + 64);
        v29 = v12;
        *(_OWORD *)&buf[32] = v14;
        v27 = v13;
        v16 = *(_OWORD *)(v10 + v8 + 112);
        v15 = *(_OWORD *)(v10 + v8 + 128);
        v17 = *(_OWORD *)(v10 + v8 + 96);
        *(_OWORD *)&v32[12] = *(_OWORD *)(v10 + v8 + 140);
        v31 = v16;
        *(_OWORD *)v32 = v15;
        v30 = v17;
        sub_100CA31FC((uint64_t)a1, (uint64_t)buf, a4 + 160);
        ++v9;
        v8 += 156;
      }
      while (v9 < sub_10104BD1C(*(int **)(a4 + 800)));
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v19 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      v20 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v22 = *a3;
      v25[0] = 67240192;
      v25[1] = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 17, "received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d", v25, 8);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLSubHarvesterAvenger::onBatchedLocationReceived(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  return sub_100CA4270(a1, 0);
}

_QWORD *sub_100CA4270(_QWORD *result, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  double v6;
  double v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  double v14;
  __int16 v15;
  uint64_t v16;

  if (*((_BYTE *)result + 1641))
  {
    v3 = result;
    v4 = result[77];
    v8[0] = 1;
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v4 + 56))(v4, v8);
    *((_BYTE *)v3 + 1641) = 0;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((double *)v3 + 49);
      if ((a2 & 1) == 0)
      {
        objc_msgSend((id)v3[206], "nextFireDelay");
        v6 = v6 - v7;
      }
      v8[0] = 68289794;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = a2;
      v13 = 2050;
      v14 = v6;
      v15 = 2050;
      v16 = 11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: terminate active fine location request\", \"didTimeout\":%{public}hhd, \"runtime\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v8, 0x2Cu);
    }
    return objc_msgSend((id)v3[206], "invalidate");
  }
  return result;
}

_QWORD *sub_100CA43C4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  return sub_100CA3F80((_QWORD *)(a1 - 352), a2, a3, a4);
}

void sub_100CA43CC(uint64_t a1, void *a2)
{
  unsigned int v4;
  NSObject *v5;
  id v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;

  v4 = objc_msgSend(a2, "isEqualToString:", CFSTR("KR"));
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v6 = objc_msgSend(a2, "UTF8String");
    v7 = *(unsigned __int8 *)(a1 + 1922);
    v8[0] = 68290051;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = v6;
    v13 = 1025;
    v14 = v7;
    v15 = 1025;
    v16 = v4;
    v17 = 2050;
    v18 = 11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onGeoCountryConfigurationChanged\", \"countryCode\":%{private, location:escape_only}s, \"fIsRestrictedCountryCode\":%{private}hhd, \"updatedIsRestrictedCountryCode\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v8, 0x32u);
  }
  if (*(unsigned __int8 *)(a1 + 1922) != v4)
    *(_BYTE *)(a1 + 1922) = v4;
}

void sub_100CA4514(uint64_t a1, void *a2)
{
  sub_100CA43CC(a1 - 352, a2);
}

id sub_100CA451C(uint64_t a1, void *a2)
{
  id result;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  NSObject *v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void **v29;
  void *v30;
  id v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  NSNumber *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  NSObject *log;
  uint64_t v58;
  id v59;
  double v60;
  uint64_t v61;
  double *v62;
  id v63;
  void *v64;
  id v65;
  void *__dst[2];
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *__p[2];
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint8_t buf[8];
  _BYTE v88[32];
  id v89;
  _BYTE v90[20];
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  double v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  _BYTE v119[128];

  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v83, v119, 16);
  v59 = result;
  if (result)
  {
    v62 = (double *)(a1 + 644);
    v50 = (__int128 *)(a1 + 1984);
    v58 = *(_QWORD *)v84;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v84 != v58)
        {
          v4 = v3;
          objc_enumerationMutation(a2);
          v3 = v4;
        }
        v61 = v3;
        v64 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * v3);
        v65 = objc_msgSend(v64, "advertisement");
        v63 = objc_msgSend(objc_msgSend(v65, "address"), "mutableCopy");
        objc_msgSend(v63, "appendData:", objc_msgSend(v65, "advertisementData"));
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217D068);
        v5 = (_BYTE *)a1;
        v6 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          v7 = objc_msgSend(objc_msgSend(objc_msgSend(v63, "cl_hexadecimalString"), "lowercaseString"), "UTF8String");
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v88 = 2082;
          *(_QWORD *)&v88[2] = "";
          *(_WORD *)&v88[10] = 2082;
          *(_QWORD *)&v88[12] = v7;
          *(_WORD *)&v88[20] = 2050;
          *(_QWORD *)&v88[22] = 11;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder\", \"avengerPublicKey\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x26u);
          v5 = (_BYTE *)a1;
        }
        if (v5[796])
        {
          v8 = *(double *)(a1 + 716);
          objc_msgSend(objc_msgSend(v65, "scanDate"), "timeIntervalSinceReferenceDate");
          v10 = v9;
          objc_msgSend(v64, "maxActivityBasedSpeedSinceAdvertisement");
          if (*(double *)(a1 + 1936) >= v11)
            v11 = *(double *)(a1 + 1936);
          v12 = fmax(*(double *)(a1 + 684), 0.0);
          if (!*(_BYTE *)(a1 + 1632)
            || (v13 = *(_DWORD *)(a1 + 1496), v13 <= 0x38) && ((1 << v13) & 0x110000000000CA8) != 0)
          {
            v12 = v12 + fmax(*(double *)(a1 + 692), 0.0);
          }
          if (v11 < v12)
            v11 = v12;
          v14 = (v8 - v10) * v11 * ((v8 - v10) * v11) + *(double *)(a1 + 660) * *(double *)(a1 + 660);
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)v88 = 3221225472;
          *(_QWORD *)&v88[8] = sub_100CA8404;
          *(_QWORD *)&v88[16] = &unk_10217CFE0;
          v89 = (id)a1;
          *(_QWORD *)&v88[24] = v64;
          *(_WORD *)&v90[16] = 256;
          *(double *)v90 = v11;
          v60 = sqrt(v14);
          *(double *)&v90[8] = v60;
          AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.ba.geotagging"), buf);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10217D068);
          v15 = a1;
          v16 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          {
            log = v16;
            v56 = objc_msgSend(objc_msgSend(objc_msgSend(v63, "cl_hexadecimalString"), "lowercaseString"), "UTF8String");
            v55 = *(_QWORD *)(a1 + 716);
            v17 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(v64, "advertisement"), "scanDate"), "description"), "UTF8String");
            v18 = *v62;
            v19 = *(_QWORD *)(a1 + 652);
            v21 = *(_QWORD *)(a1 + 660);
            v20 = *(_QWORD *)(a1 + 668);
            v22 = *(_QWORD *)(a1 + 676);
            v23 = *(_QWORD *)(a1 + 684);
            v24 = *(_QWORD *)(a1 + 692);
            v25 = *(_QWORD *)(a1 + 700);
            v26 = *(_QWORD *)(a1 + 708);
            v51 = *(unsigned int *)(a1 + 736);
            v52 = *(unsigned int *)(a1 + 768);
            v53 = *(int *)(a1 + 764);
            v54 = *(_QWORD *)(a1 + 1936);
            objc_msgSend(v64, "maxActivityBasedSpeedSinceAdvertisement");
            *(_DWORD *)buf = 68293891;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v88 = 2082;
            *(_QWORD *)&v88[2] = "";
            *(_WORD *)&v88[10] = 2082;
            *(_QWORD *)&v88[12] = v56;
            *(_WORD *)&v88[20] = 2049;
            *(_QWORD *)&v88[22] = v55;
            *(_WORD *)&v88[30] = 2081;
            v89 = v17;
            *(_WORD *)v90 = 2049;
            *(double *)&v90[2] = v18;
            *(_WORD *)&v90[10] = 2049;
            *(_QWORD *)&v90[12] = v19;
            v91 = 2049;
            v92 = v20;
            v93 = 2049;
            v94 = v21;
            v95 = 2049;
            v96 = v60;
            v97 = 2049;
            v98 = v22;
            v99 = 2049;
            v100 = v23;
            v101 = 2049;
            v102 = v24;
            v103 = 2049;
            v104 = v25;
            v105 = 2049;
            v106 = v26;
            v107 = 2049;
            v108 = v51;
            v109 = 2049;
            v110 = v52;
            v111 = 2049;
            v112 = v53;
            v113 = 2049;
            v114 = v54;
            v115 = 2049;
            v116 = v27;
            v117 = 2050;
            v118 = 11;
            _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder\", \"avengerPublicKey\":%{public, location:escape_only}s, \"timestamp\":\"%{private}f\", \"scantime\":%{private, location:escape_only}s, \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"altitude\":\"%{private}f\", \"rawHorizontalAccuracy\":\"%{private}f\", \"horizontalAccuracy\":\"%{private}f\", \"verticalAccuracy\":\"%{private}f\", \"speed\":\"%{private}f\", \"speedAccuracy\":\"%{private}f\", \"course\":\"%{private}f\", \"courseAccuracy\":\"%{private}f\", \"type\":%{private}lu, \"integrity\":%{private}lu, \"floor\":%{private}lu, \"maxActivityBasedSpeedSinceLastLocation\":\"%{private}f\", \"maxActivityBasedSpeedSinceAdvertisement\":\"%{private}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0xD0u);
            v15 = a1;
          }
          if (*(_QWORD *)(v15 + 632))
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10217D0A8);
            v28 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
            {
              sub_1001A885C((uint64_t)v50, (uint64_t)__p);
              v29 = __p;
              if (v82 < 0)
                v29 = (void **)__p[0];
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v88 = 2082;
              *(_QWORD *)&v88[2] = "";
              *(_WORD *)&v88[10] = 2082;
              *(_QWORD *)&v88[12] = v29;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (v82 < 0)
                operator delete(__p[0]);
              v15 = a1;
            }
            v30 = *(void **)(v15 + 632);
            sub_1001AF190((char *)__dst, v50);
            objc_msgSend(v30, "markReceivingLocationInformation:", sub_1001AE728((__int128 *)__dst));
            if (v80 < 0)
              operator delete(v79);
            if (v78 < 0)
              operator delete(v77);
            if (v76 < 0)
              operator delete(v75);
            if (v74 < 0)
              operator delete(v73);
            if (v72 < 0)
              operator delete(v71);
            if (v70 < 0)
              operator delete(v69);
            if (v68 < 0)
              operator delete(__dst[0]);
          }
          v31 = objc_alloc((Class)SPEstimatedLocation);
          v32 = objc_msgSend(objc_msgSend(v64, "advertisement"), "scanDate");
          v33 = *v62;
          v34 = *(double *)(a1 + 652);
          v35 = *(double *)(a1 + 668);
          v36 = *(double *)(a1 + 676);
          v37 = *(double *)(a1 + 684);
          v38 = *(double *)(a1 + 692);
          v40 = *(double *)(a1 + 700);
          v39 = *(_QWORD *)(a1 + 708);
          if (*(_DWORD *)(a1 + 736) == 10)
            v41 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 764));
          else
            v41 = 0;
          v42 = objc_msgSend(v31, "initWithTimestamp:latitude:longitude:horizontalAccuracy:altitude:verticalAccuracy:speed:speedAccuracy:course:courseAccuracy:floorLevel:", v32, v41, v33, v34, v60, v35, v36, v37, v38, v40, v39);
        }
        else
        {
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)v88 = 3221225472;
          *(_QWORD *)&v88[8] = sub_100CA8404;
          *(_QWORD *)&v88[16] = &unk_10217CFE0;
          v89 = v5;
          *(_QWORD *)&v88[24] = v64;
          memset(v90, 0, 18);
          AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.ba.geotagging"), buf);
          v42 = 0;
        }
        v43 = objc_msgSend(objc_alloc((Class)SPBeaconPayload), "initWithAdvertisement:location:", v65, v42);
        v44 = v43;
        if (v42)
        {
          v45 = *(int *)(a1 + 1448);
          if (v45 <= 3)
            objc_msgSend(v43, "setObservationValue:", qword_101C20430[v45]);
        }
        objc_msgSend(v44, "setRefreshGeotag:", 0);
        if (objc_msgSend(*(id *)(a1 + 1480), "isNewPayload:", v44))
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10217D068);
          v46 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v88 = 2082;
            *(_QWORD *)&v88[2] = "";
            *(_WORD *)&v88[10] = 2050;
            *(_QWORD *)&v88[12] = 11;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder: added beacon payload to fBeaconPayloadCache\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
          }
          if (!((v42 == 0) | objc_msgSend(v64, "fromOwnerDevice") & 1))
          {
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_10217D068);
            v47 = qword_1022A0208;
            if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v88 = 2082;
              *(_QWORD *)&v88[2] = "";
              *(_WORD *)&v88[10] = 2050;
              *(_QWORD *)&v88[12] = 11;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder: added beacon payload to ActivityBasedBeaconPayloadCache for second geotagging\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
            }
            objc_msgSend(*(id *)(a1 + 1960), "receiveBeaconPayload:", v44);
          }
          objc_msgSend(*(id *)(a1 + 1472), "addObject:", v44);
          objc_msgSend(*(id *)(a1 + 1952), "receiveBeaconPayload:", v44);
        }
        else
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10217D068);
          v48 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v88 = 2082;
            *(_QWORD *)&v88[2] = "";
            *(_WORD *)&v88[10] = 2050;
            *(_QWORD *)&v88[12] = 11;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder: beacon payload is redundant, skipped\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
          }
        }

        v3 = v61 + 1;
      }
      while (v59 != (id)(v61 + 1));
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v83, v119, 16);
      v59 = result;
    }
    while (result);
  }
  return result;
}

void sub_100CA4F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_100010174((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_100CA4F3C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  _QWORD v17[5];
  __int16 v18;
  _QWORD v19[5];
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 1680);
  if (v2 && *(_QWORD *)(a1 + 1656))
  {
    if (!*(_BYTE *)(a1 + 1640))
    {
      v3 = 1;
      goto LABEL_9;
    }
    if (!*(_BYTE *)(a1 + 1664))
    {
      sub_101247A80(v2);
      if (sub_1012479D0(*(_QWORD *)(a1 + 1680)))
      {
        v4 = *(void **)(a1 + 1672);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_100CA54E4;
        v19[3] = &unk_10212ECA0;
        v19[4] = a1;
        objc_msgSend(v4, "setHandler:", v19);
        objc_msgSend(*(id *)(a1 + 1672), "setNextFireDelay:", *(double *)(a1 + 384));
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217D068);
        v5 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          v6 = *(_QWORD *)(a1 + 384);
          *(_DWORD *)buf = 68289538;
          v21 = 0;
          v22 = 2082;
          v23 = "";
          v24 = 2050;
          v25 = v6;
          v26 = 2050;
          v27 = 11;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: actively requesting best location\", \"timeout\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x26u);
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10217D088);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#wigo,on,BlueAvengerHarvest", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10217D088);
          v18 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,BlueAvengerHarvest", &v18, 2);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterAvenger::startProactiveLocationRequestIfNecessaryAndAllowed()", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
        AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10217CF98);
        v8 = *(_QWORD *)(a1 + 616);
        *(_DWORD *)buf = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 48))(v8, buf);
        v3 = 0;
        *(_BYTE *)(a1 + 1664) = 1;
        ++*(_DWORD *)(a1 + 1772);
LABEL_6:
        if (*(_BYTE *)(a1 + 1640))
          goto LABEL_10;
LABEL_9:
        if (*(_BYTE *)(a1 + 1641))
          goto LABEL_10;
        sub_101247A80(*(_QWORD *)(a1 + 1656));
        if (sub_1012479D0(*(_QWORD *)(a1 + 1656)))
        {
          v9 = *(void **)(a1 + 1648);
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          v17[2] = sub_100CA5798;
          v17[3] = &unk_10212ECA0;
          v17[4] = a1;
          objc_msgSend(v9, "setHandler:", v17);
          objc_msgSend(*(id *)(a1 + 1648), "setNextFireDelay:", *(double *)(a1 + 392));
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10217D068);
          v10 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
          {
            v11 = *(_QWORD *)(a1 + 392);
            *(_DWORD *)buf = 68289538;
            v21 = 0;
            v22 = 2082;
            v23 = "";
            v24 = 2050;
            v25 = v11;
            v26 = 2050;
            v27 = 11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: actively requesting fine location\", \"timeout\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x26u);
          }
          v12 = *(_QWORD *)(a1 + 616);
          *(_DWORD *)buf = 1;
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
          *(_BYTE *)(a1 + 1641) = 1;
          ++*(_DWORD *)(a1 + 1776);
        }
        else
        {
          ++*(_DWORD *)(a1 + 1784);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10217D068);
          v14 = qword_1022A0208;
          if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
          {
LABEL_10:
            if (v3)
            {
LABEL_11:
              *(CFAbsoluteTime *)(a1 + 1808) = CFAbsoluteTimeGetCurrent();
              return;
            }
            goto LABEL_29;
          }
          *(_DWORD *)buf = 68289282;
          v21 = 0;
          v22 = 2082;
          v23 = "";
          v24 = 2050;
          v25 = 11;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: rejected proactive fine location request\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
          if ((v3 & 1) != 0)
            goto LABEL_11;
        }
LABEL_29:
        *(_QWORD *)(a1 + 1800) = *(_QWORD *)(a1 + 1792);
        *(CFAbsoluteTime *)(a1 + 1792) = CFAbsoluteTimeGetCurrent();
        return;
      }
      ++*(_DWORD *)(a1 + 1780);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v13 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2050;
        v25 = 11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: rejected proactive best location request\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      }
    }
    v3 = 1;
    goto LABEL_6;
  }
}

_BYTE *sub_100CA54E4(uint64_t a1)
{
  return sub_100CA54F0(*(_BYTE **)(a1 + 32), 1);
}

_BYTE *sub_100CA54F0(_BYTE *result, int a2)
{
  _BYTE *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  double v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  if (result[1664])
  {
    v3 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10217D088);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,BlueAvengerHarvest", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10217D088);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,BlueAvengerHarvest", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterAvenger::unregisterForBestLocationNotificationIfNecessary(BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10217CFB8);
    v5 = *((_QWORD *)v3 + 77);
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v5 + 56))(v5, buf);
    v3[1664] = 0;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((double *)v3 + 48);
      if ((a2 & 1) == 0)
      {
        objc_msgSend(*((id *)v3 + 209), "nextFireDelay");
        v7 = v7 - v8;
      }
      *(_DWORD *)buf = 68289794;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = a2;
      v18 = 2050;
      v19 = v7;
      v20 = 2050;
      v21 = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: terminate active best location request\", \"didTimeout\":%{public}hhd, \"runtime\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x2Cu);
    }
    return objc_msgSend(*((id *)v3 + 209), "invalidate");
  }
  return result;
}

NSDictionary *__cdecl sub_100CA578C(id a1)
{
  return (NSDictionary *)&off_1022200B0;
}

_QWORD *sub_100CA5798(uint64_t a1)
{
  return sub_100CA4270(*(_QWORD **)(a1 + 32), 1);
}

BOOL sub_100CA57A4(int a1, char a2, char a3, int a4)
{
  NSObject *v4;
  _BOOL8 result;
  const char *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if ((a2 & 1) != 0 || (a3 & 1) != 0 || a1)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v4 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2050;
      v12 = 11;
      v6 = "{\"msg%{public}.0s\":\"Device is inside Korea; location is not needed\", \"subHarvester\":%{public, location:"
           "CLSubHarvesterIdentifier}lld}";
      goto LABEL_13;
    }
  }
  else if (a4)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v4 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2050;
      v12 = 11;
      v6 = "{\"msg%{public}.0s\":\"Location is simulated\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v7, 0x1Cu);
      return 0;
    }
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t sub_100CA592C(double a1, double a2)
{
  NSObject *v4;
  _BOOL4 v5;
  uint64_t result;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  double v13;
  __int16 v14;
  double v15;
  __int16 v16;
  uint64_t v17;

  if (a1 <= a2)
  {
    if (fabs(a1) <= a2)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v7 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 68289794;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        v12 = 2050;
        v13 = a1;
        v14 = 2050;
        v15 = a2;
        v16 = 2050;
        v17 = 11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"geotagSingleAdvertisement: advertisement within valid time window for location\", \"timeOffset\":\"%{public}f\", \"fCurrentTimeOffsetThreshold\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v8, 0x30u);
      }
      return 1;
    }
    else
    {
      return 2;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v4 = qword_1022A0208;
    v5 = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v5)
    {
      v8 = 68289794;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2050;
      v13 = a1;
      v14 = 2050;
      v15 = a2;
      v16 = 2050;
      v17 = 11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"geotagSingleAdvertisement: dropping avenger advertisement, too old\", \"timeOffset\":\"%{public}f\", \"fCurrentTimeOffsetThreshold\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v8, 0x30u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100CA5B08(uint64_t a1, void *a2, double a3)
{
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  id v11;

  *(_DWORD *)(a1 + 1904) = 0;
  *(_BYTE *)(a1 + 1908) = 0;
  *(_WORD *)(a1 + 1888) = 1;
  *(double *)(a1 + 1896) = a3;
  if (sub_100CA5BF8(a1))
  {
    *(_BYTE *)(a1 + 1904) = 1;
    if (*(double *)(a1 + 376) > a3)
      *(_BYTE *)(a1 + 1905) = 1;
  }
  v6 = *(double *)(a1 + 1808);
  if (v6 > *(double *)(a1 + 1800) && v6 < *(double *)(a1 + 1792))
  {
    *(_BYTE *)(a1 + 1906) = 1;
    v7 = *(_DWORD *)(a1 + 1864);
    if (v7)
      v8 = *(double *)(a1 + 1872) / (double)v7;
    else
      v8 = INFINITY;
    v9 = v6 + v8;
    objc_msgSend(objc_msgSend(objc_msgSend(a2, "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate");
    if (vabdd_f64(v9, v10) < *(double *)(a1 + 1688))
      *(_BYTE *)(a1 + 1907) = 1;
  }
  v11 = objc_msgSend(a2, "advertisement");
  *(_BYTE *)(a1 + 1908) = sub_100CA3058((uint64_t)v11, (uint64_t)v11);
  return sub_100CA5C3C(a1);
}

uint64_t sub_100CA5BF8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1632) && (*(_DWORD *)(a1 + 1496) - 1) <= 1 && !*(_BYTE *)(a1 + 1712))
    return 0;
  sub_100197040();
  return sub_10011E0F0() ^ 1;
}

uint64_t sub_100CA5C3C(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[5];
  _QWORD v4[8];
  _QWORD v5[8];

  v4[0] = CFSTR("isLocationUnusable");
  v5[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1888));
  v4[1] = CFSTR("isLocationStale");
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1889));
  v4[2] = CFSTR("locationTimeOffset");
  v5[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 1896));
  v4[3] = CFSTR("isInMotion");
  v5[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1904));
  v4[4] = CFSTR("wouldSucceedIfInStatic");
  v5[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1905));
  v4[5] = CFSTR("hasRejectedProactiveRequest");
  v5[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1906));
  v4[6] = CFSTR("wouldSucceedIfProactiveRequestNotRejected");
  v5[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1907));
  v4[7] = CFSTR("isPosh");
  v5[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1908));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100CA7F20;
  v3[3] = &unk_10215F370;
  v3[4] = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 8));
  result = AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.ba.geotag.failure"), v3);
  *(_WORD *)(a1 + 1888) = 0;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1901) = 0;
  return result;
}

uint64_t sub_100CA5DF4(uint64_t result, void *a2, int a3, double a4)
{
  uint64_t v5;
  _QWORD v7[8];
  __int16 v8;

  v5 = result;
  ++*(_DWORD *)(result + 1816);
  *(double *)(result + 1824) = *(double *)(result + 1824) + a4;
  *(double *)(result + 1832) = *(double *)(result + 1832) + a4 * a4;
  if (a3 == 1)
  {
    ++*(_DWORD *)(result + 1840);
    *(double *)(result + 1848) = *(double *)(result + 1848) + a4;
    *(double *)(result + 1856) = *(double *)(result + 1856) + a4 * a4;
  }
  else if (!a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100CA8404;
    v7[3] = &unk_10217CFE0;
    v7[4] = a2;
    v7[5] = result;
    v8 = 1;
    v7[6] = 0;
    v7[7] = 0;
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.ba.geotagging"), v7);
    return sub_100CA5B08(v5, a2, a4);
  }
  return result;
}

NSArray *sub_100CA5EDC(uint64_t a1, void *a2, double a3, double a4)
{
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  id v15;
  int v16;
  double v17;
  double v18;
  int v19;
  int v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  NSArray *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  __int16 v41;
  uint64_t v42;
  _BYTE v43[128];

  v8 = objc_alloc_init((Class)NSMutableArray);
  v9 = objc_alloc_init((Class)NSMutableArray);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v43, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v12)
          objc_enumerationMutation(a2);
        v14 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v15 = objc_msgSend(v14, "advertisement");
        v16 = sub_100CA3058((uint64_t)v15, (uint64_t)v15);
        objc_msgSend(objc_msgSend(objc_msgSend(v14, "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate");
        v18 = a4 - v17;
        v19 = sub_100CA592C(a4 - v17, a3);
        v20 = v19;
        if (v19 == 1)
        {
          objc_msgSend(v9, "addObject:", v14);
          ++*(_DWORD *)(a1 + 1748);
          if (v16)
            ++*(_DWORD *)(a1 + 1756);
          else
            ++*(_DWORD *)(a1 + 1752);
        }
        else if (!v19)
        {
          objc_msgSend(v8, "addObject:", v14);
          ++*(_DWORD *)(a1 + 1760);
          if (v16)
            ++*(_DWORD *)(a1 + 1768);
          else
            ++*(_DWORD *)(a1 + 1764);
        }
        sub_100CA5DF4(a1, v14, v20, v18);
      }
      v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v43, 16);
    }
    while (v11);
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v21 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v22 = objc_msgSend(*(id *)(a1 + 1464), "count");
    v23 = objc_msgSend(v9, "count");
    v24 = objc_msgSend(v8, "count");
    *(_DWORD *)buf = 68290050;
    v33 = 2082;
    v32 = 0;
    v34 = "";
    v35 = 2050;
    v36 = v22;
    v37 = 2050;
    v38 = v23;
    v39 = 2050;
    v40 = v24;
    v41 = 2050;
    v42 = 11;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"geotagAdvertisements: completed process\", \"fAdvertisementCache.count\":%{public}lu, \"saveableAdvertisements.count\":%{public}lu, \"purgeableAdvertisements.count\":%{public}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x3Au);
  }
  sub_100CA451C(a1, v9);
  objc_msgSend(v8, "addObjectsFromArray:", v9);
  v25 = +[NSArray array](NSArray, "array");
  if (objc_msgSend(v8, "count"))
    v25 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v8);

  return v25;
}

void sub_100CA61EC(uint64_t a1)
{
  int v2;
  char v3;
  char v4;
  int v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  id v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t buf;
  __int16 v31;
  const char *v32;
  __int16 v33;
  _BYTE v34[28];

  v2 = *(unsigned __int8 *)(a1 + 1923);
  v3 = *(_BYTE *)(a1 + 1922);
  v4 = *(_BYTE *)(a1 + 1924);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 176))(*(_QWORD *)(a1 + 56));
  if (sub_100CA57A4(v2, v3, v4, v5))
  {
    if (!*(_BYTE *)(a1 + 796))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v24 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        goto LABEL_40;
      buf = 68289282;
      v31 = 2082;
      v32 = "";
      v33 = 2050;
      *(_QWORD *)v34 = 11;
      v21 = "{\"msg%{public}.0s\":\"WARN: processAdvertisementCache no last location\", \"subHarvester\":%{public, locati"
            "on:CLSubHarvesterIdentifier}lld}";
      v22 = v24;
      v23 = 28;
      goto LABEL_39;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      buf = 68289282;
      v31 = 2082;
      v32 = "";
      v33 = 2050;
      *(_QWORD *)v34 = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"processAdvertisementCache with last location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x1Cu);
    }
    v7 = objc_msgSend(*(id *)(a1 + 1464), "copy");
    objc_msgSend(*(id *)(a1 + 1464), "removeObjectsInArray:", sub_100CA5EDC(a1, v7, *(double *)(a1 + 1688), *(double *)(a1 + 716)));

    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(*(id *)(a1 + 1464), "count");
      v10 = objc_msgSend(*(id *)(a1 + 1472), "count");
      buf = 68289794;
      v31 = 2082;
      v32 = "";
      v33 = 2050;
      *(_QWORD *)v34 = v9;
      *(_WORD *)&v34[8] = 2050;
      *(_QWORD *)&v34[10] = v10;
      *(_WORD *)&v34[18] = 2050;
      *(_QWORD *)&v34[20] = 11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"processAdvertisementCache: completed process\", \"Remaining fAdvertisementCache.count\":%{public}lu, \"fBeaconPayloadCache.count\":%{public}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x30u);
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v11 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      buf = 68289282;
      v31 = 2082;
      v32 = "";
      v33 = 2050;
      *(_QWORD *)v34 = 11;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"processAdvertisementCache: drop advertisements since geotagging is not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x1Cu);
    }
    *(_DWORD *)(a1 + 1760) += objc_msgSend(*(id *)(a1 + 1464), "count");
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v12 = *(void **)(a1 + 1464);
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v26 != v15)
            objc_enumerationMutation(v12);
          v17 = objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i), "advertisement");
          if (sub_100CA3058((uint64_t)v17, (uint64_t)v17))
            ++*(_DWORD *)(a1 + 1768);
          else
            ++*(_DWORD *)(a1 + 1764);
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      }
      while (v14);
    }
    objc_msgSend(*(id *)(a1 + 1464), "removeAllObjects");
  }
  if (objc_msgSend(*(id *)(a1 + 1472), "count"))
  {
    if (*(double *)(a1 + 560) <= 0.0)
      sub_100CA682C(a1);
    else
      sub_100CA66F4(a1, 0);
  }
  if (objc_msgSend(*(id *)(a1 + 1464), "count"))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v18 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      goto LABEL_40;
    v19 = (int)*(double *)(a1 + 716);
    v20 = *(_QWORD *)(a1 + 1688);
    buf = 68289794;
    v31 = 2082;
    v32 = "";
    v33 = 1026;
    *(_DWORD *)v34 = v19;
    *(_WORD *)&v34[4] = 2050;
    *(_QWORD *)&v34[6] = v20;
    *(_WORD *)&v34[14] = 2050;
    *(_QWORD *)&v34[16] = 11;
    v21 = "{\"msg%{public}.0s\":\"processAdvertisementCache: have last location, but it is stale\", \"lastLocation.timest"
          "amp\":%{public}d, \"fCurrentTimeOffsetThreshold\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHar"
          "vesterIdentifier}lld}";
    v22 = v18;
    v23 = 44;
LABEL_39:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&buf, v23);
LABEL_40:
    sub_100CA4F3C(a1);
  }
}

void sub_100CA66F4(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  CFAbsoluteTime Current;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v5 = *(unsigned __int8 *)(a1 + 1976);
    v8[0] = 68289795;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1025;
    v12 = v5;
    v13 = 1025;
    v14 = a2;
    v15 = 2050;
    v16 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"requestDeferredSaveBeaconPayloadCache\", \"fPendingSaveBeaconPayloadRequest\":%{private}hhd, \"forceScheduleNextFireData\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v8, 0x28u);
  }
  if (!*(_BYTE *)(a1 + 1976) || a2)
  {
    v6 = *(_QWORD *)(a1 + 1968);
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001F40D0(v6, Current + *(double *)(a1 + 560));
    *(_BYTE *)(a1 + 1976) = 1;
  }
}

void sub_100CA682C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  id v5;
  id v6;
  _QWORD v7[5];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v3 = objc_msgSend(*(id *)(a1 + 1472), "count");
    v4 = *(unsigned __int8 *)(a1 + 1977);
    *(_DWORD *)buf = 68289795;
    v10 = 2082;
    v9 = 0;
    v11 = "";
    v12 = 2049;
    v13 = v3;
    v14 = 1025;
    v15 = v4;
    v16 = 2050;
    v17 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"saveBeaconPayloadCacheToSPFinder\", \"fBeaconPayloadCache.count\":%{private}lu, \"fIsCameraAppRunning\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x2Cu);
  }
  if (objc_msgSend(*(id *)(a1 + 1472), "count"))
  {
    if (!*(_BYTE *)(a1 + 1977))
    {
      v5 = objc_msgSend(*(id *)(a1 + 1472), "copy");
      objc_msgSend(*(id *)(a1 + 1472), "removeAllObjects");
      v6 = objc_msgSend(*(id *)(a1 + 1456), "beaconPayloadCache");
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100CA8F24;
      v7[3] = &unk_102130FC8;
      v7[4] = a1;
      objc_msgSend(v6, "saveBeaconPayloads:completion:", v5, v7);

    }
  }
}

void sub_100CA69A8(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  id v12;
  unsigned int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  CLSubHarvesterAvengerAdvertisement *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  __int16 v41;
  unsigned int v42;
  __int16 v43;
  id v44;
  __int16 v45;
  uint64_t v46;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2050;
    v34 = 11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"onAvengerAdvertisementDetected: got avenger advertisement\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
  }
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(a2, "address"), "cl_hexadecimalString"), "lowercaseString"), "UTF8String");
    v8 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(a2, "advertisementData"), "cl_hexadecimalString"), "lowercaseString"), "UTF8String");
    v9 = objc_msgSend(a2, "scanDate");
    v10 = objc_msgSend(a2, "rssi");
    v11 = objc_msgSend(a2, "status");
    v12 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(a2, "reserved"), "cl_hexadecimalString"), "lowercaseString"), "UTF8String");
    *(_DWORD *)buf = 68290819;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2081;
    v34 = (uint64_t)v7;
    v35 = 2081;
    v36 = v8;
    v37 = 2113;
    v38 = v9;
    v39 = 2049;
    v40 = v10;
    v41 = 1025;
    v42 = v11;
    v43 = 2081;
    v44 = v12;
    v45 = 2050;
    v46 = 11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"convertToSPAdvertisement\", \"address\":%{private, location:escape_only}s, \"data\":%{private, location:escape_only}s, \"date\":%{private, location:escape_only}@, \"rssi\":%{private}lu, \"status\":%{private}u, \"reserved\":%{private, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x54u);
  }
  if (_os_feature_enabled_impl("CoreLocation", "StandardUT")
    && (objc_msgSend(a2, "isApple") & 1) == 0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v25 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289282;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2050;
    v34 = 11;
    v26 = "{\"msg%{public}.0s\":\"onAvengerAdvertisementDetected: dropping non-Apple advertisement\", \"subHarvester\":%{"
          "public, location:CLSubHarvesterIdentifier}lld}";
LABEL_32:
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, buf, 0x1Cu);
    return;
  }
  v13 = +[SPAdvertisement instancesRespondToSelector:](SPAdvertisement, "instancesRespondToSelector:", NSSelectorFromString(CFSTR("initWithAddress:advertisementData:status:reserved:rssi:scanDate:isPosh:")));
  v14 = objc_alloc((Class)SPAdvertisement);
  v15 = objc_msgSend(a2, "address");
  v16 = objc_msgSend(a2, "advertisementData");
  v17 = objc_msgSend(a2, "status");
  v18 = objc_msgSend(a2, "reserved");
  v19 = objc_msgSend(a2, "rssi");
  v20 = objc_msgSend(a2, "scanDate");
  if (v13)
  {
    LOBYTE(v27) = objc_msgSend(a2, "isPosh");
    v21 = objc_msgSend(v14, "initWithAddress:advertisementData:status:reserved:rssi:scanDate:isPosh:", v15, v16, v17, v18, v19, v20, v27);
  }
  else
  {
    v21 = objc_msgSend(v14, "initWithAddress:advertisementData:status:reserved:rssi:scanDate:", v15, v16, v17, v18, v19, v20);
  }
  v22 = v21;
  if (!v22)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v25 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289282;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2050;
    v34 = 11;
    v26 = "{\"msg%{public}.0s\":\"onAvengerAdvertisementDetected: could not convert advertisement into SPAdvertisement\","
          " \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    goto LABEL_32;
  }
  v23 = v22;
  v24 = -[CLSubHarvesterAvengerAdvertisement initWithAdvertisement:maxActivityBasedSpeedSinceAdvertisement:]([CLSubHarvesterAvengerAdvertisement alloc], "initWithAdvertisement:maxActivityBasedSpeedSinceAdvertisement:", v22, sub_100CA3CC8((_QWORD *)a1, a1 + 1496));
  -[CLSubHarvesterAvengerAdvertisement setFromOwnerDevice:](v24, "setFromOwnerDevice:", objc_msgSend(a3, "type") == (id)1);
  if (-[CLSubHarvesterAvengerAdvertisement type](v24, "type")
    || -[CLSubHarvesterAvengerAdvertisement fromOwnerDevice](v24, "fromOwnerDevice"))
  {
    ++*(_DWORD *)(a1 + 1736);
    if (objc_msgSend(a2, "isPosh"))
      ++*(_DWORD *)(a1 + 1744);
    else
      ++*(_DWORD *)(a1 + 1740);
    objc_msgSend(*(id *)(a1 + 1952), "receiveAdvertisement:", v23);
    objc_msgSend(*(id *)(a1 + 1464), "addObject:", v24);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
    sub_100CA61EC(a1);
    return;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v25 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2050;
    v34 = 11;
    v26 = "{\"msg%{public}.0s\":\"onAvengerAdvertisementDetected: advertisement is near-owner from other people and do no"
          "t process it\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    goto LABEL_32;
  }
}

void sub_100CA6F50(uint64_t a1, void *a2, void *a3)
{
  sub_100CA69A8(a1 - 352, a2, a3);
}

uint64_t sub_100CA6F58(uint64_t result)
{
  *(_BYTE *)(result + 2168) = 1;
  return result;
}

uint64_t sub_100CA6F64(uint64_t result)
{
  *(_BYTE *)(result + 1816) = 1;
  return result;
}

uint64_t sub_100CA6F70(uint64_t result)
{
  *(_BYTE *)(result + 2168) = 0;
  return result;
}

uint64_t sub_100CA6F78(uint64_t result)
{
  *(_BYTE *)(result + 1816) = 0;
  return result;
}

id sub_100CA6F80(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  _BYTE v20[20];

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 68289282;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2050;
    *(_QWORD *)v20 = 11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got signal environment provider notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
  }
  if (!*(_BYTE *)(a1 + 1492) || *(_DWORD *)(a1 + 1488) != *a4)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(unsigned __int8 *)(a1 + 1492);
      if (*(_BYTE *)(a1 + 1492))
        v8 = *(_DWORD *)(a1 + 1488);
      v9 = *a4;
      v15 = 68289794;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      *(_DWORD *)v20 = v8;
      *(_WORD *)&v20[4] = 1026;
      *(_DWORD *)&v20[6] = v9;
      *(_WORD *)&v20[10] = 2050;
      *(_QWORD *)&v20[12] = 11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updated avenger harvester signal environment\", \"fLastSignalEnvironment\":%{public}d, \"nextSignalEnvironment\":%{public}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x28u);
    }
    LOBYTE(v10) = 0;
    *(_DWORD *)(a1 + 1488) = *a4;
    *(_BYTE *)(a1 + 1492) = 1;
    v11 = *(_QWORD *)(a1 + 1488);
    if ((v11 & 0xFF00000000) != 0 && v11 <= 6)
      v10 = (0x42u >> v11) & 1;
    *(_BYTE *)(a1 + 1640) = v10;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v12 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned __int8 *)(a1 + 1640);
      v15 = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      *(_DWORD *)v20 = v13;
      *(_WORD *)&v20[4] = 2050;
      *(_QWORD *)&v20[6] = 11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update isAllowedToUseBest for location request\", \"fIsAllowedToUseBest\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x22u);
    }
  }
  objc_msgSend(*(id *)(a1 + 1944), "receiveSignalEnvironment:", *a4);
  objc_msgSend(*(id *)(a1 + 1952), "receiveSignalEnvironment:", *a4);
  return objc_msgSend(*(id *)(a1 + 1960), "receiveSignalEnvironment:", *a4);
}

id sub_100CA7234(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return sub_100CA6F80(a1 - 352, a2, a3, a4);
}

BOOL sub_100CA723C(uint64_t a1, uint64_t a2)
{
  double *v4;

  if (!*(_BYTE *)(a1 + 796))
    return 1;
  v4 = (double *)(a1 + 644);
  if ((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) - *(double *)(a1 + 716) >= *(double *)(a1 + 1688)
    || *(double *)(a2 + 20) <= 250.0)
  {
    return 1;
  }
  if (!*(_BYTE *)(a1 + 796))
    sub_10028DF3C();
  return sub_100124100(*(double *)(a2 + 4), *(double *)(a2 + 12), *v4, v4[1]) - *(double *)(a2 + 20) - v4[2] > 0.0;
}

uint64_t sub_100CA72E8(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *(unsigned __int8 *)(a1 + 640);
  memcpy((void *)a1, (const void *)a2, 0x201uLL);
  if (v4)
  {
    sub_100349198((_QWORD *)(a1 + 520), (uint64_t *)(a2 + 520));
    v6 = *(_OWORD *)(a2 + 552);
    v5 = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(a1 + 552) = v6;
    *(_OWORD *)(a1 + 568) = v5;
    v8 = *(_OWORD *)(a2 + 600);
    v7 = *(_OWORD *)(a2 + 616);
    v9 = *(_OWORD *)(a2 + 584);
    *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
    *(_OWORD *)(a1 + 600) = v8;
    *(_OWORD *)(a1 + 616) = v7;
    *(_OWORD *)(a1 + 584) = v9;
  }
  else
  {
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    v10 = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 528) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(_OWORD *)(a2 + 536);
    v14 = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 568) = v14;
    *(_OWORD *)(a1 + 536) = v13;
    v15 = *(_OWORD *)(a2 + 584);
    v16 = *(_OWORD *)(a2 + 600);
    v17 = *(_OWORD *)(a2 + 616);
    *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
    *(_OWORD *)(a1 + 600) = v16;
    *(_OWORD *)(a1 + 616) = v17;
    *(_OWORD *)(a1 + 584) = v15;
    *(_BYTE *)(a1 + 640) = 1;
  }
  return a1;
}

void sub_100CA73C4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  BOOL v5;
  int v6;
  NSObject *v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  if ((*a3 & 0xFFFFFFFE) == 6)
  {
    if (*(_BYTE *)(a4 + 96))
      v5 = *(_DWORD *)(a4 + 48) <= 0;
    else
      v5 = 1;
    v6 = !v5;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(unsigned __int8 *)(a1 + 1920);
      v9[0] = 68289795;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1025;
      v13 = v8;
      v14 = 1025;
      v15 = v6;
      v16 = 2050;
      v17 = 11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"onWifiServiceNotification::kNotificationLinkStatus\", \"previousIsWifiAssociated\":%{private}hhd, \"updatedIsWifiAssociated\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v9, 0x28u);
    }
    if (*(unsigned __int8 *)(a1 + 1920) != v6)
    {
      *(_BYTE *)(a1 + 1920) = v6;
      sub_100CA2660(a1);
    }
  }
}

void sub_100CA7508(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  sub_100CA73C4(a1 - 352, a2, a3, a4);
}

NSDictionary *__cdecl sub_100CA7510(id a1)
{
  return (NSDictionary *)&off_1022200D8;
}

void sub_100CA751C(uint64_t a1, void *a2)
{
  NSObject *v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _DWORD v19[2];
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  uint64_t v31;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 1696);
    v6 = objc_msgSend(a2, "state");
    v7 = *(unsigned __int8 *)(a1 + 1697);
    v19[0] = 68290306;
    v19[1] = 0;
    v20 = 2082;
    v21 = "";
    v22 = 1026;
    v23 = v5;
    v24 = 1026;
    v25 = v6;
    v26 = 1026;
    v27 = v7;
    v28 = 1026;
    v29 = objc_msgSend(a2, "optInScreenOffScan");
    v30 = 2050;
    v31 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"onFinderStateChangeReceived\", \"previousFinderState\":%{public}hhd, \"updatedFinderState\":%{public}hhd, \"previousOptInScreenOffScane\":%{public}hhd, \"optInScreenOffScan\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v19, 0x34u);
  }
  *(_BYTE *)(a1 + 1696) = objc_msgSend(a2, "state");
  v8 = *(unsigned __int8 *)(a1 + 1697);
  v9 = objc_msgSend(a2, "optInScreenOffScan");
  *(_BYTE *)(a1 + 1697) = objc_msgSend(a2, "optInScreenOffScan");
  v10 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1698) = objc_msgSend(v10, "containsObject:", SPFinderDisabledReasoniCloudSignedOut);
  v11 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1699) = objc_msgSend(v11, "containsObject:", SPFinderDisabledReasonLowAccountSecurity);
  v12 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1700) = objc_msgSend(v12, "containsObject:", SPFinderDisabledReasonUserOptOut);
  v13 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1701) = objc_msgSend(v13, "containsObject:", SPFinderDisabledReasonFindMyiPhoneOff);
  v14 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1702) = objc_msgSend(v14, "containsObject:", SPFinderDisabledReasonServiceDisabled);
  v15 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1703) = objc_msgSend(v15, "containsObject:", SPFinderDisabledReasonLocationServices);
  v16 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1704) = objc_msgSend(v16, "containsObject:", SPFinderDisabledReasonLocationServicesFindMyFramework);
  v17 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1705) = objc_msgSend(v17, "containsObject:", SPFinderDisabledReasonCannotPublishAnonymously);
  v18 = objc_msgSend(a2, "disabledReasons");
  *(_BYTE *)(a1 + 1706) = objc_msgSend(v18, "containsObject:", SPFinderDisabledReasonNone);
  *(_DWORD *)(a1 + 1708) = objc_msgSend(objc_msgSend(a2, "disabledReasons"), "count");
  if (*(_BYTE *)(a1 + 1696)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)))
  {
    sub_100201690(a1);
    if (v8 != v9)
    {
      if (*(_BYTE *)(a1 + 88))
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 616) + 144))(*(_QWORD *)(a1 + 616), *(unsigned __int8 *)(a1 + 1697));
    }
  }
  else
  {
    sub_100201924(a1);
  }
}

void sub_100CA77E0(uint64_t a1, void *a2)
{
  sub_100CA751C(a1 - 352, a2);
}

void sub_100CA77E8(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  NSMutableDictionary *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  uint8_t *v18;
  _QWORD v19[5];
  _WORD v20[8];
  _QWORD v21[13];
  _QWORD v22[13];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 1720) != a2)
    return;
  Current = CFAbsoluteTimeGetCurrent();
  sub_1001F40D0(a2, Current + *(double *)(a1 + 416));
  if (*(_DWORD *)(a1 + 1736) != *(_DWORD *)(a1 + 1740) + *(_DWORD *)(a1 + 1744))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v14 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "CLSubHarvesterAvenger submitting invalid receivedBeacons in daily metrics, aborting", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 17, "CLSubHarvesterAvenger submitting invalid receivedBeacons in daily metrics, aborting", v20, 2);
LABEL_42:
    v18 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "void CLSubHarvesterAvenger::onPerformanceAnalyticsTimerFired(CLPersistentTimer *)", "%s\n", v15);
    if (v18 != buf)
      free(v18);
    return;
  }
  if (*(_DWORD *)(a1 + 1748) != *(_DWORD *)(a1 + 1752) + *(_DWORD *)(a1 + 1756))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v16 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "CLSubHarvesterAvenger submitting invalid savedBeacons in daily metrics, aborting", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 17, "CLSubHarvesterAvenger submitting invalid savedBeacons in daily metrics, aborting", v20, 2);
    goto LABEL_42;
  }
  if (*(_DWORD *)(a1 + 1760) == *(_DWORD *)(a1 + 1764) + *(_DWORD *)(a1 + 1768))
  {
    v21[0] = CFSTR("received");
    v22[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    v21[1] = CFSTR("receivedPosh");
    v22[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1744));
    v21[2] = CFSTR("receivedType18");
    v22[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1740));
    v21[3] = CFSTR("saved");
    v22[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1748));
    v21[4] = CFSTR("savedPosh");
    v22[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1756));
    v21[5] = CFSTR("savedType18");
    v22[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1752));
    v21[6] = CFSTR("purged");
    v22[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1760));
    v21[7] = CFSTR("purgedPosh");
    v22[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1768));
    v21[8] = CFSTR("purgedType18");
    v22[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1764));
    v21[9] = CFSTR("proactiveLocationGPSRequest");
    v22[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1772));
    v21[10] = CFSTR("proactiveLocationWifiRequests");
    v22[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1776));
    v21[11] = CFSTR("rejectedProactiveGPSRequests");
    v22[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1780));
    v21[12] = CFSTR("rejectedProactiveWifiRequests");
    v22[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1784));
    v5 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 13));
    v6 = *(_DWORD *)(a1 + 1816);
    if (v6 && *(double *)(a1 + 1824) / (double)v6 != INFINITY)
      -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("beaconTagTimeOffsetToLocationTimestamp"));
    v7 = *(_DWORD *)(a1 + 1840);
    if (v7 && *(double *)(a1 + 1848) / (double)v7 != INFINITY)
      -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("payloadTimeOffset"));
    v8 = *(_DWORD *)(a1 + 1864);
    if (v8)
    {
      if (*(double *)(a1 + 1872) / (double)v8 == INFINITY
        || (-[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("locationUpdateDelayMean")), (v8 = *(_DWORD *)(a1 + 1864)) != 0))
      {
        if (sqrt(*(double *)(a1 + 1880) / (double)v8- *(double *)(a1 + 1872) / (double)v8 * (*(double *)(a1 + 1872) / (double)v8)) != INFINITY)-[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("locationUpdateDelayStd"));
      }
    }
    -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSDateComponents hour](-[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 32, +[NSDate now](NSDate, "now")), "hour")), CFSTR("timeOfDay"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100CA7F18;
    v19[3] = &unk_10215F370;
    v19[4] = v5;
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.ba"), v19);
    *(_OWORD *)(a1 + 1736) = 0u;
    *(_OWORD *)(a1 + 1752) = 0u;
    *(_OWORD *)(a1 + 1768) = 0u;
    *(_DWORD *)(a1 + 1784) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 1792) = _Q0;
    *(_QWORD *)(a1 + 1808) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 1816) = 0;
    *(_QWORD *)(a1 + 1880) = 0;
    *(_QWORD *)(a1 + 1872) = 0;
    *(_QWORD *)(a1 + 1832) = 0;
    *(_QWORD *)(a1 + 1824) = 0;
    *(_DWORD *)(a1 + 1840) = 0;
    *(_QWORD *)(a1 + 1856) = 0;
    *(_QWORD *)(a1 + 1848) = 0;
    *(_DWORD *)(a1 + 1864) = 0;
    return;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v17 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "CLSubHarvesterAvenger submitting invalid purgedBeacons in daily metrics, aborting", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 17, "CLSubHarvesterAvenger submitting invalid purgedBeacons in daily metrics, aborting", v20, 2);
    goto LABEL_42;
  }
}

uint64_t sub_100CA7F18(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_100CA7F20(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_100CA7F28(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  CFAbsoluteTime Current;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v30[5];
  _QWORD v31[25];
  _QWORD v32[25];

  if (*(_QWORD *)(result + 1728) == a2)
  {
    v3 = result;
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001F40D0(a2, Current + *(double *)(v3 + 488));
    v5 = *(unsigned __int8 *)(v3 + 88);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
    v7 = *(unsigned __int8 *)(v3 + 280);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 248))(*(_QWORD *)(v3 + 56));
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 160))(*(_QWORD *)(v3 + 56));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 256))(*(_QWORD *)(v3 + 56));
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 264))(*(_QWORD *)(v3 + 56));
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 272))(*(_QWORD *)(v3 + 56));
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 280))(*(_QWORD *)(v3 + 56));
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 288))(*(_QWORD *)(v3 + 56));
    v15 = *(unsigned __int8 *)(v3 + 1696);
    v16 = *(unsigned __int8 *)(v3 + 1922);
    v17 = *(unsigned __int8 *)(v3 + 1923);
    v18 = *(unsigned __int8 *)(v3 + 1924);
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 616) + 184))(*(_QWORD *)(v3 + 616));
    v20 = *(unsigned __int8 *)(v3 + 1698);
    v21 = *(unsigned __int8 *)(v3 + 1699);
    v22 = *(unsigned __int8 *)(v3 + 1700);
    v23 = *(unsigned __int8 *)(v3 + 1701);
    v24 = *(unsigned __int8 *)(v3 + 1702);
    v25 = *(unsigned __int8 *)(v3 + 1703);
    v26 = *(unsigned __int8 *)(v3 + 1704);
    v27 = *(unsigned __int8 *)(v3 + 1705);
    v28 = *(unsigned __int8 *)(v3 + 1706);
    v29 = *(_DWORD *)(v3 + 1708);
    v31[0] = CFSTR("isHarvesting");
    v32[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5);
    v31[1] = CFSTR("isSupported");
    v32[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6);
    v31[2] = CFSTR("isEnabledByRule");
    v32[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7);
    v31[3] = CFSTR("isHarvestingEnabled");
    v32[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8);
    v31[4] = CFSTR("isHarvestingAllowed");
    v32[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9);
    v31[5] = CFSTR("isLocationServicesEnabled");
    v32[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10);
    v31[6] = CFSTR("isThermalLevelAcceptableLowCpu");
    v32[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11);
    v31[7] = CFSTR("isInPrivateMode");
    v32[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v12);
    v31[8] = CFSTR("isBatterySaverModeEnabled");
    v32[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v13);
    v31[9] = CFSTR("hasAuthorizedClients");
    v32[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v14);
    v31[10] = CFSTR("isFinderStateManagerEnabled");
    v32[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v15);
    v31[11] = CFSTR("isRestrictedCountryCode");
    v32[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v16);
    v31[12] = CFSTR("isRestrictedSKU");
    v32[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v17);
    v31[13] = CFSTR("isLastLocationInRestrictedZone");
    v32[13] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v18);
    v31[14] = CFSTR("isScanning");
    v32[14] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v19);
    v31[15] = CFSTR("isICloudSingedOut");
    v32[15] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v20);
    v31[16] = CFSTR("isLowAccountSecurity");
    v32[16] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v21);
    v31[17] = CFSTR("isUserOptOut");
    v32[17] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v22);
    v31[18] = CFSTR("isFindMyiPhoneOff");
    v32[18] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v23);
    v31[19] = CFSTR("isServiceDisabled");
    v32[19] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v24);
    v31[20] = CFSTR("isLocationServiceDisabled");
    v32[20] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v25);
    v31[21] = CFSTR("isFmpLocationServicesDisabled");
    v32[21] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v26);
    v31[22] = CFSTR("isPublishAnonymouslyDisallowed");
    v32[22] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v27);
    v31[23] = CFSTR("isNoReason");
    v32[23] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v28);
    v31[24] = CFSTR("reasonCount");
    v32[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100CA83FC;
    v30[3] = &unk_10215F370;
    v30[4] = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 25));
    return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.ba.enabled"), v30);
  }
  return result;
}

uint64_t sub_100CA83FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

id sub_100CA8404(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  const char *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSNumber *v12;
  const __CFString *v13;
  double v14;
  double v15;
  unsigned int v16;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSDateComponents hour](-[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 32, +[NSDate now](NSDate, "now")), "hour")), CFSTR("timeOfDay"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 32), "type")), CFSTR("advType"));
  v4 = objc_msgSend(*(id *)(a1 + 32), "advertisement");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100CA3058((uint64_t)v4, (uint64_t)v4)), CFSTR("isPoshAdv"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(v2 + 1688)), CFSTR("timeThreshold"));
  if (*(_BYTE *)(v2 + 1492))
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 1488)), CFSTR("sigEnv"));
  if (*(_BYTE *)(v2 + 1632))
  {
    v5 = *(unsigned int *)(v2 + 1496);
    if ((_DWORD)v5 == 19150 || v5 <= 0x7D0)
      v6 = (const char *)CLMotionActivity::activityTypeToString(v5);
    else
      v6 = "workoutSub";
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), CFSTR("motionActivity"));
  }
  v7 = (double *)(v2 + 660);
  if (*(_BYTE *)(v2 + 796))
  {
    v8 = *(double *)(v2 + 716);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate");
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8 - v9), CFSTR("timeOffsetToLocation"));
    if (!*(_BYTE *)(v2 + 796))
      sub_10028DF3C();
    v10 = *(double *)(v2 + 716);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate");
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100CA88C8(v10 - v11)), CFSTR("timeOffsetToLocationBounded"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 736)), CFSTR("geotagLocationType"));
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v12 = (NSNumber *)CFSTR("DropAdv");
LABEL_14:
    v13 = CFSTR("geotagResult");
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a1 + 65))
  {
    v12 = (NSNumber *)CFSTR("GeotagWithNil");
    goto LABEL_14;
  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("GeotagWithLocation"), CFSTR("geotagResult"));
  objc_msgSend(*(id *)(a1 + 32), "maxActivityBasedSpeedSinceAdvertisement");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v14), CFSTR("activityBasedSpeed"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(v2 + 1936)), CFSTR("activityBasedSpeedLastLocation"));
  v15 = *(double *)(v2 + 684);
  if (v15 >= 0.0)
  {
    if (!*(_BYTE *)(v2 + 1632)
      || (v16 = *(_DWORD *)(v2 + 1496), v16 <= 0x38) && ((1 << v16) & 0x110000000000CA8) != 0)
    {
      v15 = v15 + fmax(*(double *)(v2 + 692), 0.0);
    }
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15), CFSTR("locationBasedSpeed"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100CA8A74(v15)), CFSTR("locationBasedSpeedBounded"));
  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)), CFSTR("finalSpeed"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100CA8A74(*(double *)(a1 + 48))), CFSTR("finalSpeedBounded"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *v7), CFSTR("originalHAC"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100CA8BB0(*v7)), CFSTR("originalHACBounded"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56)), CFSTR("inflatedHAC"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100CA8BB0(*(double *)(a1 + 56))), CFSTR("inflatedHACBounded"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56) - *v7), CFSTR("HACdelta"));
  v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100CA8BB0(*(double *)(a1 + 56) - *v7));
  v13 = CFSTR("HACdeltaBounded");
LABEL_23:
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, v13);
  return v3;
}

uint64_t sub_100CA88C8(double a1)
{
  if (a1 <= -600.0)
    return 4294966696;
  if (a1 <= -480.0)
    return 4294966816;
  if (a1 <= -360.0)
    return 4294966936;
  if (a1 <= -120.0)
    return 4294967176;
  if (a1 <= -60.0)
    return 4294967236;
  if (a1 <= -45.0)
    return 4294967251;
  if (a1 <= -25.0)
    return 4294967271;
  if (a1 <= -15.0)
    return 4294967281;
  if (a1 <= -10.0)
    return 4294967286;
  if (a1 <= 0.0)
    return 0;
  if (a1 <= 10.0)
    return 10;
  if (a1 <= 15.0)
    return 15;
  if (a1 <= 25.0)
    return 25;
  if (a1 <= 45.0)
    return 45;
  if (a1 <= 60.0)
    return 60;
  if (a1 <= 120.0)
    return 120;
  if (a1 <= 360.0)
    return 360;
  if (a1 <= 480.0)
    return 480;
  if (a1 <= 600.0)
    return 600;
  return 700;
}

uint64_t sub_100CA8A74(double a1)
{
  if (a1 <= 0.0)
    return 0;
  if (a1 <= 1.0)
    return 1;
  if (a1 <= 2.0)
    return 2;
  if (a1 <= 3.0)
    return 3;
  if (a1 <= 5.0)
    return 5;
  if (a1 <= 7.0)
    return 7;
  if (a1 <= 10.0)
    return 10;
  if (a1 <= 15.0)
    return 15;
  if (a1 <= 20.0)
    return 20;
  if (a1 <= 25.0)
    return 25;
  if (a1 <= 30.0)
    return 30;
  if (a1 <= 35.0)
    return 35;
  if (a1 <= 40.0)
    return 40;
  if (a1 <= 45.0)
    return 45;
  if (a1 <= 50.0)
    return 50;
  return 60;
}

uint64_t sub_100CA8BB0(double a1)
{
  if (a1 <= 0.0)
    return 0;
  if (a1 <= 5.0)
    return 5;
  if (a1 <= 10.0)
    return 10;
  if (a1 <= 15.0)
    return 15;
  if (a1 <= 25.0)
    return 25;
  if (a1 <= 50.0)
    return 50;
  if (a1 <= 75.0)
    return 75;
  if (a1 <= 100.0)
    return 100;
  if (a1 <= 125.0)
    return 125;
  if (a1 <= 250.0)
    return 250;
  if (a1 <= 500.0)
    return 500;
  if (a1 <= 750.0)
    return 750;
  if (a1 <= 1000.0)
    return 1000;
  if (a1 <= 5000.0)
    return 5000;
  if (a1 <= 10000.0)
    return 10000;
  return 20000;
}

id sub_100CA8D04(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  if (!a3)
    return _objc_msgSend(*(id *)(a1 + 1944), "receiveCLVisit:", a2);
  result = objc_msgSend(a3, "type");
  if (result)
    return _objc_msgSend(*(id *)(a1 + 1944), "receiveCLVisit:", a2);
  return result;
}

void sub_100CA8D48(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  id v4;
  NSObject *v5;
  id v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;

  if (*(_QWORD *)(a1 + 1968) == a2 && objc_msgSend(*(id *)(a1 + 1472), "count"))
  {
    if (*(_BYTE *)(a1 + 1977))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v3 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v4 = objc_msgSend(*(id *)(a1 + 1472), "count");
        v7 = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2049;
        v12 = v4;
        v13 = 2050;
        v14 = 11;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onDeferredSaveBeaconPayloadTimerFired, camera running, re-arming timer\", \"fBeaconPayloadCache.count\":%{private}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v7, 0x26u);
      }
      sub_100CA66F4(a1, 1);
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
      v5 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v6 = objc_msgSend(*(id *)(a1 + 1472), "count");
        v7 = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2049;
        v12 = v6;
        v13 = 2050;
        v14 = 11;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onDeferredSaveBeaconPayloadTimerFired\", \"fBeaconPayloadCache.count\":%{private}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v7, 0x26u);
      }
      sub_100CA682C(a1);
      *(_BYTE *)(a1 + 1976) = 0;
    }
  }
}

id sub_100CA8F24(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD v5[5];

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100CA8F8C;
  v5[3] = &unk_10212BB58;
  v5[4] = a2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_100CA8F8C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D068);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v6 = 68289538;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = v3;
      v12 = 2050;
      v13 = 11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x26u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217D068);
    }
    v4 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v6 = 68289538;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = v5;
      v12 = 2050;
      v13 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received", "{\"msg%{public}.0s\":\"WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x26u);
    }
  }
}

void sub_100CA9148(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  int v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  _QWORD v33[2];

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D068);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v8 = sub_1000BD874(a3);
    v9 = a4 + 8;
    if (*(char *)(a4 + 31) < 0)
      v9 = *(_QWORD *)(a4 + 8);
    v24 = 68289795;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2081;
    v29 = v8;
    v30 = 2081;
    v31 = v9;
    v32 = 2050;
    v33[0] = 11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onAppMonitorNotification\", \"notification\":%{private, location:escape_only}s, \"bundleId\":%{private, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v24, 0x30u);
  }
  v10 = *(unsigned __int8 *)(a4 + 31);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a4 + 31);
  else
    v11 = *(_QWORD *)(a4 + 16);
  v12 = qword_1023079D0;
  if (byte_1023079DF >= 0)
    v12 = byte_1023079DF;
  if (v11 != v12)
    return;
  if (byte_1023079DF >= 0)
    v13 = &qword_1023079C8;
  else
    v13 = (uint64_t *)qword_1023079C8;
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(a4 + 8), v13, *(_QWORD *)(a4 + 16)))
      return;
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a4 + 31))
  {
LABEL_23:
    if (*a3 <= 0xB)
    {
      v15 = 1 << *a3;
      if ((v15 & 0xDA1) != 0)
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217D068);
        v16 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
        {
          v17 = sub_1000BD874(a3);
          v24 = 68289539;
          v25 = 0;
          v26 = 2082;
          v27 = "";
          v28 = 2081;
          v29 = v17;
          v30 = 2050;
          v31 = 11;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WARN, Received expected CLAppMonitor notification type for camera bundle ID\", \"notification\":%{private, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v24, 0x26u);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10217D068);
        }
        v18 = qword_1022A0208;
        if (os_signpost_enabled((os_log_t)qword_1022A0208))
        {
          v19 = sub_1000BD874(a3);
          v24 = 68289539;
          v25 = 0;
          v26 = 2082;
          v27 = "";
          v28 = 2081;
          v29 = v19;
          v30 = 2050;
          v31 = 11;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WARN, Received expected CLAppMonitor notification type for camera bundle ID", "{\"msg%{public}.0s\":\"WARN, Received expected CLAppMonitor notification type for camera bundle ID\", \"notification\":%{private, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v24, 0x26u);
        }
      }
      else if ((v15 & 0x258) != 0)
      {
        *(_BYTE *)(a1 + 1977) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 1977) = 0;
        if (!*(_BYTE *)(a1 + 1976))
          sub_100CA682C(a1);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217D068);
        v20 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          v21 = sub_1000BD874(a3);
          if (*(char *)(a4 + 31) >= 0)
            v22 = a4 + 8;
          else
            v22 = *(_QWORD *)(a4 + 8);
          v23 = *(unsigned __int8 *)(a1 + 1977);
          v24 = 68290051;
          v25 = 0;
          v26 = 2082;
          v27 = "";
          v28 = 2081;
          v29 = v21;
          v30 = 2081;
          v31 = v22;
          v32 = 1025;
          LODWORD(v33[0]) = v23;
          WORD2(v33[0]) = 2050;
          *(_QWORD *)((char *)v33 + 6) = 11;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onAppMonitorNotification:receivedCameraBundleId-setting fIsCameraAppRunning false\", \"notification\":%{private, location:escape_only}s, \"bundleId\":%{private, location:escape_only}s, \"fIsCameraAppRunning\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v24, 0x36u);
        }
      }
    }
    objc_msgSend(*(id *)(a1 + 1960), "updateCameraRunning:", *(unsigned __int8 *)(a1 + 1977));
    return;
  }
  v14 = (unsigned __int8 *)(a4 + 8);
  while (*v14 == *(unsigned __int8 *)v13)
  {
    ++v14;
    v13 = (uint64_t *)((char *)v13 + 1);
    if (!--v10)
      goto LABEL_23;
  }
}

void sub_100CA9588(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  sub_100CA9148(a1 - 352, a2, a3, a4);
}

void sub_100CA9590(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CA95BC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100CA95E8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100CA9614(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100CA9640()
{
  sub_1015A2E04(&qword_1023079C8, "com.apple.camera");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023079C8, (void *)&_mh_execute_header);
  return sub_1011E780C((uint64_t)&xmmword_1023079E0, 1, 2, 2, 1, -1.0, 43200.0, 43200.0);
}

void sub_100CA96B4()
{
  operator new();
}

void sub_100CA96F4()
{
  operator delete();
}

uint64_t sub_100CA9718()
{
  if (qword_102307A10 != -1)
    dispatch_once(&qword_102307A10, &stru_10217D0C8);
  return qword_102311410;
}

void sub_100CA975C(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLGestureNotifier", 1);
}

void sub_100CA9A4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_100CAA0E8(v2, 0);
  sub_1009BAD18(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100CA9A8C(_QWORD *a1)
{
  *a1 = off_10217D0F8;
  sub_100CA9ACC((uint64_t)a1);
  sub_100CAA0E8(a1 + 4, 0);
  return sub_1009BAD18(a1);
}

void sub_100CA9ACC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (sub_10024095C())
  {
    if (*(_BYTE *)(a1 + 64))
    {
      if (!*(_QWORD *)(a1 + 56))
        return;
      v2 = (uint64_t *)(a1 + 48);
      if (!*(_QWORD *)(a1 + 48))
        return;
      v3 = sub_100D8B660();
      sub_1000A4A6C(v3, 0, *(_QWORD *)(a1 + 56));
      v4 = *(_QWORD *)(a1 + 56);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *(_QWORD *)(a1 + 56) = 0;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 48);
      v8 = (uint64_t *)(a1 + 48);
      if (!v9)
        return;
      v2 = v8;
    }
    v10 = sub_10024095C();
    sub_1000A4A6C(v10, 0, *v2);
    if (*v2)
      (*(void (**)(uint64_t))(*(_QWORD *)*v2 + 8))(*v2);
    *v2 = 0;
  }
  else
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217D140);
    v5 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "No accelerometer; not detecting gestures",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217D140);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 17, "No accelerometer; not detecting gestures",
        v11,
        2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLGestureNotifier::stopDetectingGestures()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100CA9CDC(_QWORD *a1)
{
  sub_100CA9A8C(a1);
  operator delete();
}

void sub_100CA9D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100CA9D64;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  sub_1000A50A8(v4, (uint64_t)v5);
}

void sub_100CA9D64()
{
  operator new();
}

void sub_100CAA05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CAA0E8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100CBFB88();
    operator delete();
  }
  return result;
}

void sub_100CAA124(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint8_t *v10;
  void *__p[2];
  char v12;
  uint8_t buf[8];
  uint64_t v14;
  void (*v15)();
  void *v16;
  uint64_t v17;
  void **v18;

  if (*(double *)(a1 + 40) >= 0.0)
  {
    if (sub_10024095C())
    {
      if (!*(_QWORD *)(a1 + 32))
      {
        sub_1015A2E04(__p, "EarGesture_Prototypes_Siri_1");
        v5 = sub_100127B9C();
        *(_QWORD *)buf = _NSConcreteStackBlock;
        v14 = 3221225472;
        v15 = sub_100CA9D64;
        v16 = &unk_102143528;
        v17 = a1;
        v18 = __p;
        sub_1000A50A8(v5, (uint64_t)buf);
        if (v12 < 0)
          operator delete(__p[0]);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217D140);
        v6 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Gesture prototype was not setup. Using default prototype", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217D140);
          LOWORD(__p[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 17, "Gesture prototype was not setup. Using default prototype", __p, 2);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 0, "void CLGestureNotifier::startDetectingGestures()", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
      }
      if ((!*(_BYTE *)(a1 + 64) || !*(_QWORD *)(a1 + 56)) && !*(_QWORD *)(a1 + 48))
      {
        sub_100CBE804(*(_QWORD *)(a1 + 32));
        operator new();
      }
    }
    else
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217D140);
      v7 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "No accelerometer; not detecting gestures",
          buf,
          2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217D140);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 17, "No accelerometer; not detecting gestures",
          __p,
          2);
        v3 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "void CLGestureNotifier::startDetectingGestures()", "%s\n", v8);
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217D140);
    v1 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Not starting gesture detection since requested accelerometer interval < 0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217D140);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "Not starting gesture detection since requested accelerometer interval < 0", __p, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLGestureNotifier::startDetectingGestures()", "%s\n", v2);
LABEL_32:
      if (v3 != buf)
        free(v3);
    }
  }
}

void sub_100CAA66C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete();
}

const char *sub_100CAA6CC(uint64_t a1, uint64_t a2, __n128 a3, int8x16_t a4)
{
  const char *result;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char __dst[16];
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v10 = 0;
  v11 = 0;
  v8.n128_u64[0] = *(_QWORD *)(a1 + 8);
  v8.n128_u64[1] = *(unsigned int *)(a1 + 16);
  v9 = *(_QWORD *)a1;
  a3.n128_u64[0] = v9;
  result = (const char *)sub_100CBFB8C(*(unsigned int **)(a2 + 32), &v8, (_DWORD *)&v11 + 1, &v11, &v10, a3, a4);
  if (result)
  {
    strncpy(__dst, result, 0x10uLL);
    v13 = v11;
    v7 = *(_QWORD *)a1;
    v14 = v10;
    v15 = v7;
    return (const char *)sub_10014C2F4(a2, 0, (uint64_t)__dst, 40);
  }
  return result;
}

void sub_100CAA790(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = sub_10024095C();
  v5 = *(_QWORD *)(a2 + 48);
  if (v3)
  {
    sub_1000A4A6C(v4, 0, v5);
    sub_100CBE804(*(_QWORD *)(a2 + 32));
  }
  else
  {
    sub_1000A4FD8(v4, 0, v5, *(double *)(a2 + 40));
  }
}

void sub_100CAA7DC(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217D140);
    v3 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217D140);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 17, "Unrecognized notification", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLGestureNotifier::numberOfSpectatorsChanged(int, size_t)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else if (a3)
  {
    sub_100CAA124(a1);
  }
  else
  {
    sub_100CA9ACC(a1);
  }
}

void sub_100CAA9C0(id a1)
{
  qword_10229FCF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

_QWORD *sub_100CAA9EC(_QWORD *a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  *a1 = off_1021D5F20;
  *a1 = &off_10217D170;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = a3;
  sub_100CB0540(a1 + 4, *a4, *a5, *a6, 0.04);
  return a1;
}

void sub_100CAAA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

void sub_100CAAA88(uint64_t a1)
{
  sub_100015E88(a1);
  operator delete();
}

uint64_t sub_100CAAAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  double v6;
  float32x2_t v7[2];

  result = sub_100CB0544(a1 + 32, (float *)(a3 + 8), (double *)a3, v7);
  if ((_DWORD)result)
  {
    v6 = *(double *)a3;
    return (*(uint64_t (**)(double *, _QWORD))(a1 + 16))(&v6, *(_QWORD *)(a1 + 24));
  }
  return result;
}

void sub_100CAAB00(uint64_t a1, char a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[8];

  v7 = sub_1005821F4(a1, a3);
  *(_QWORD *)v7 = off_10217D210;
  *(_QWORD *)(v7 + 200) = off_10217D280;
  sub_100DA368C(v7 + 200, *(unsigned __int8 *)(v7 + 8), 0);
  *(_QWORD *)a1 = off_10217D210;
  *(_QWORD *)(a1 + 200) = off_10217D280;
  *(_DWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = -1;
  *(_BYTE *)(a1 + 292) = a4;
  *(_DWORD *)(a1 + 296) = 1127481344;
  v8 = sub_10021C350();
  *(_QWORD *)buf = sub_1009EC168(v8, (double *)(a1 + 24));
  sub_100C149C4(a1 + 304, buf, a1 + 16, (double *)(a1 + 32), a2);
}

void sub_100CAAD2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_100C14A48(v3);
  sub_100DA36BC(v2);
  sub_100582BD8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CAAD68(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_10217D210;
  a1[25] = off_10217D280;
  v2 = a1 + 25;
  sub_100CAAE98((uint64_t)a1);
  sub_100C14A48(a1 + 38);
  sub_100DA36BC(v2);
  return sub_100582BD8((uint64_t)a1);
}

uint64_t sub_100CAADBC(uint64_t a1)
{
  return sub_100CAAD68((_QWORD *)(a1 - 200));
}

void sub_100CAADC4(_QWORD *a1)
{
  sub_100CAAD68(a1);
  operator delete();
}

void sub_100CAADE8(uint64_t a1)
{
  sub_100CAAD68((_QWORD *)(a1 - 200));
  operator delete();
}

uint64_t sub_100CAAE10(uint64_t a1)
{
  uint64_t v3;

  sub_100C14A78(a1 + 304);
  *(_DWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = -1;
  *(_DWORD *)(a1 + 296) = 1127481344;
  sub_100DA39D4(a1 + 200);
  sub_100DA3814(a1 + 200);
  sub_100DA38F0(a1 + 200);
  sub_100DA3AB0(a1 + 200);
  v3 = 2;
  return sub_1005837B8(a1, &v3);
}

_QWORD *sub_100CAAE98(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 200);
  sub_100DA3798((_QWORD *)(a1 + 200));
  sub_100DA39A4((uint64_t)v1);
  sub_100DA3700(v1);
  return sub_100DA374C(v1);
}

void sub_100CAAED0(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*(_QWORD *)(a1 + 56))
  {
    if (*(unsigned __int8 *)(a1 + 292) != a2)
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217D2E8);
      v3 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(unsigned __int8 *)(a1 + 292);
        *(_DWORD *)buf = 67240192;
        v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "North reference overridden as %{public}d by first client", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217D2E8);
        v5 = *(unsigned __int8 *)(a1 + 292);
        v8[0] = 67240192;
        v8[1] = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "North reference overridden as %{public}d by first client", v8, 8);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionService9Axis::useNorthRef(BOOL)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 292) = a2;
  }
}

void sub_100CAB098(uint64_t a1, uint64_t a2)
{
  double *v4;
  float v5;
  float32x2_t v6;
  float v7;
  unsigned int v8;
  __int128 v9;
  int v10;
  unsigned int v11;
  __int16 v12;
  int v13;
  float32x4_t v14;
  float64x2_t v15;
  uint64_t v16;
  float32x4_t v17;
  double v18[2];
  _BYTE v19[24];
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;

  v4 = (double *)(a1 + 304);
  v5 = *(float *)(a2 + 12);
  *(double *)v19 = *(float *)(a2 + 8);
  *(double *)v17.i64 = v5;
  v18[0] = *(float *)(a2 + 16);
  sub_100C14D94(a1 + 304, (float64x2_t *)v19, (uint64_t)&v17, v18, (_QWORD *)a2);
  if (*(double *)(a1 + 480) <= 0.0)
  {
    v6 = 0;
    v7 = 0.0;
  }
  else
  {
    sub_100AD855C((double *)v19, (double *)(a1 + 320));
    v6 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 656)), *(float64x2_t *)v19));
    v7 = *(float *)(a1 + 664) - *(double *)&v19[16];
  }
  v8 = *(_DWORD *)(a1 + 460);
  v16 = *(_QWORD *)(a1 + 464);
  sub_100C14D5C((uint64_t)v4, (uint64_t)v18);
  *(_QWORD *)&v19[16] = 0;
  *(_OWORD *)v19 = 0xBFF0000000000000;
  v14 = *(float32x4_t *)(a1 + 320);
  v15 = *(float64x2_t *)(a1 + 336);
  sub_10012C97C((float32x4_t *)&v19[8], v14);
  v22 = 0;
  v21 = 0u;
  v20 = 0u;
  v23 = xmmword_101BB2F90;
  v24 = 0x1FF00000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  *(_QWORD *)v19 = *(_QWORD *)a2;
  v17 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v14), v15);
  sub_10012C97C(&v17, v17);
  *(_QWORD *)&v9 = v16;
  *(float32x4_t *)&v19[8] = v17;
  *(float32x2_t *)&v20 = v6;
  *((_QWORD *)&v20 + 1) = __PAIR64__(v8, LODWORD(v7));
  v10 = *(_DWORD *)(a1 + 284);
  *((_QWORD *)&v9 + 1) = *(_QWORD *)(a1 + 276);
  v21 = v9;
  v22 = v10;
  BYTE4(v24) = *(_DWORD *)(a1 + 288);
  *(float *)&v11 = sub_100C15998(v4);
  *(_QWORD *)&v23 = __PAIR64__(*(_DWORD *)(a1 + 296), v11);
  BYTE5(v24) = 1;
  HIWORD(v24) = HIWORD(v24) & 0xFFE7 | (8 * *(unsigned __int8 *)(a1 + 313)) | (16 * *(unsigned __int8 *)(a1 + 252));
  if (sub_100C14A70((uint64_t)v4))
    v12 = 256;
  else
    v12 = 0;
  HIWORD(v24) = HIWORD(v24) & 0xDEFF | v12 | (*(unsigned __int8 *)(a1 + 315) << 13);
  if (*(_BYTE *)(a1 + 292))
    v13 = 15;
  else
    v13 = 7;
  v25 = v13;
  v27 = 0;
  v26 = *(_BYTE *)(a2 + 22);
  sub_100582E8C(a1, (uint64_t)v19);
}

void sub_100CAB2E8(uint64_t a1, uint64_t a2)
{
  sub_100CAB098(a1 - 200, a2);
}

double sub_100CAB2F0(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100C15590(a1 + 304, a2, a3);
}

double sub_100CAB2F8(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100C15590(a1 + 104, a2, a3);
}

void sub_100CAB300(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  double v4;
  double v5;

  v2 = *(float *)(a2 + 12);
  v5 = *(float *)(a2 + 8);
  v3 = *(float *)(a2 + 16);
  v4 = v2;
  sub_100C15B44(a1 + 304, &v5, &v4, &v3, (_QWORD *)a2);
}

void sub_100CAB34C(uint64_t a1, uint64_t a2)
{
  sub_100CAB300(a1 - 200, a2);
}

void sub_100CAB354(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  double v16;
  float v17;
  float v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BOOL4 v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BOOL4 v43;

  v4 = *(_OWORD *)(a2 + 56);
  v20 = *(_OWORD *)(a2 + 40);
  v21 = v4;
  v22 = *(_OWORD *)(a2 + 72);
  v23 = *(_QWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)v19 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v19[16] = v5;
  if ((sub_1001B7910() & 0x10) != 0 && (DWORD1(v20) - 1) <= 4)
    DWORD1(v20) = dword_101C20520[DWORD1(v20) - 1];
  buf[0] = *(_BYTE *)(a1 + 272);
  v6 = sub_100C17C30(a1 + 304, (uint64_t *)v19, buf, (_BYTE *)(a1 + 292), (double *)a2);
  sub_100C14D5C(a1 + 304, (uint64_t)&v16 + 4);
  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10217D2E8);
    v7 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(unsigned __int8 *)(a1 + 272);
      *(_DWORD *)buf = 134219008;
      v35 = *((float *)&v16 + 1);
      v36 = 2048;
      v37 = v17;
      v38 = 2048;
      v39 = v18;
      v40 = 1024;
      v41 = v8;
      v42 = 1024;
      v43 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "correctedCompassExt, %.3f, %.3f, %.3f, %u, %u", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217D2E8);
      v12 = *(unsigned __int8 *)(a1 + 272);
      v24 = 134219008;
      v25 = *((float *)&v16 + 1);
      v26 = 2048;
      v27 = v17;
      v28 = 2048;
      v29 = v18;
      v30 = 1024;
      v31 = v12;
      v32 = 1024;
      v33 = v6;
      LODWORD(v15) = 44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "correctedCompassExt, %.3f, %.3f, %.3f, %u, %u", COERCE_DOUBLE(&v24), v15, v16, LODWORD(v17), *(_DWORD *)v19);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionService9Axis::feedCompassData(const CLCompass_Type::Sample *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  if (v6)
  {
    v9 = sub_1000A5944();
    sub_100A4212C(1, (uint64_t)&v16 + 4, v9);
  }
  v10 = DWORD1(v20);
  *(_DWORD *)(a1 + 288) = DWORD1(v20);
  *(_DWORD *)(a1 + 296) = v20;
  if (v10 <= 0)
  {
    *(_DWORD *)(a1 + 276) = 0;
    *(_QWORD *)(a1 + 280) = 0;
  }
  else
  {
    if ((sub_1001B7910() & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 284) = *(_DWORD *)&v19[20];
      v11 = *(_QWORD *)&v19[12];
    }
    else
    {
      *(_DWORD *)(a1 + 284) = *(_DWORD *)&v19[8];
      v11 = *(_QWORD *)v19;
    }
    *(_QWORD *)(a1 + 276) = v11;
  }
}

void sub_100CAB680(uint64_t a1, uint64_t a2)
{
  sub_100CAB354(a1 - 200, a2);
}

void sub_100CAB688(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_100CAB6B4(_DWORD *a1, uint64_t a2)
{
  sub_1001E4B84(a2, "maxCacheCount", a1 + 2);
  sub_1001E4B84(a2, "maxHarvest", a1 + 3);
  sub_1001FD98C(a2, "minGapTime", a1 + 4);
  sub_1001FD98C(a2, "maxGapTime", a1 + 6);
  sub_1001FD98C(a2, "minWifiTimespan", a1 + 8);
  sub_1001FD98C(a2, "targetCompassUpdateInterval", a1 + 10);
  sub_1001FD98C(a2, "traceDuration", a1 + 12);
  return sub_1001FD98C(a2, "traceFuzzInterval", a1 + 14);
}

uint64_t sub_100CAB790(_DWORD *a1, uint64_t *a2)
{
  sub_1001E4B84(*a2, "HarvestIndoorMaxCacheCount", a1 + 2);
  sub_1001E4B84(*a2, "HarvestIndoorMaxEvents", a1 + 3);
  sub_1001FD98C(*a2, "HarvestIndoorMaxGapTime", a1 + 6);
  sub_1001FD98C(*a2, "HarvestIndoorMinGapTime", a1 + 4);
  sub_1001FD98C(*a2, "HarvestIndoorMinWifiTimespan", a1 + 8);
  sub_1001FD98C(*a2, "HarvestIndoorTargetCompassUpdateInterval", a1 + 10);
  sub_1001FD98C(*a2, "HarvestIndoorTraceDuration", a1 + 12);
  return sub_1001FD98C(*a2, "HarvestIndoorTraceFuzzInterval", a1 + 14);
}

uint64_t sub_100CAB86C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  __int128 v50[3];
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;

  v10 = (std::__shared_weak_count *)a4[1];
  v55 = *a4;
  v56 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a5[1];
  v53 = *a5;
  v54 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  v51 = *a6;
  v52 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v50[0] = xmmword_102307A18;
  v50[1] = unk_102307A28;
  v50[2] = xmmword_102307A38;
  sub_100D04860(a1, a2, 7, &v55, &v53, &v51, a8, a7, v50);
  v19 = v52;
  if (v52)
  {
    v20 = (unint64_t *)&v52->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v54;
  if (v54)
  {
    v23 = (unint64_t *)&v54->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v56;
  if (v56)
  {
    v26 = (unint64_t *)&v56->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)a1 = off_10217D318;
  v29 = *a3;
  v28 = a3[1];
  *(_QWORD *)(a1 + 352) = off_10217D438;
  *(_QWORD *)(a1 + 360) = v29;
  *(_QWORD *)(a1 + 368) = v28;
  if (v28)
  {
    v30 = (unint64_t *)(v28 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_QWORD *)(a1 + 384) = off_10217D4C0;
  *(_QWORD *)(a1 + 392) = 0x61A8000003E8;
  *(_OWORD *)(a1 + 400) = xmmword_101C20540;
  *(_OWORD *)(a1 + 416) = xmmword_101C1F960;
  *(_OWORD *)(a1 + 432) = xmmword_101C158F0;
  *(_QWORD *)(a1 + 448) = &_mh_execute_header;
  *(_QWORD *)(a1 + 456) = 0x4022000000000000;
  v32 = *(std::__shared_weak_count **)(a1 + 64);
  v48 = *(_QWORD *)(a1 + 56);
  v49 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *(std::__shared_weak_count **)(a1 + 368);
  v46 = *(_QWORD *)(a1 + 360);
  v47 = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = sub_100201404(a1);
  sub_100FEA240(a1 + 464, a1 + 384, &v48, &v46, v38);
  v39 = v47;
  if (v47)
  {
    v40 = (unint64_t *)&v47->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v49;
  if (v49)
  {
    v43 = (unint64_t *)&v49->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *(_BYTE *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 768) = 0x7FEFFFFFFFFFFFFFLL;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 32))(*(_QWORD *)(a1 + 360), a1 + 384);
  sub_100FEA27C(a1 + 464);
  *(_QWORD *)(a1 + 376) = objc_msgSend(*(id *)(a1 + 72), "archiveForHarvester:", 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 16))(*(_QWORD *)(a1 + 360), a1 + 352);
  return a1;
}

void sub_100CABB94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 - 80);
  sub_100261F44(v1 - 64);
  sub_100261F44(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_100CABBF4(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217D318;
  *(_QWORD *)(a1 + 352) = off_10217D438;

  sub_100FEA278(a1 + 464);
  sub_100261F44(a1 + 360);
  return sub_100429668(a1);
}

uint64_t sub_100CABC48(uint64_t a1)
{
  return sub_100CABBF4(a1 - 352);
}

void sub_100CABC50(uint64_t a1)
{
  sub_100CABBF4(a1);
  operator delete();
}

void sub_100CABC74(uint64_t a1)
{
  sub_100CABBF4(a1 - 352);
  operator delete();
}

uint64_t sub_100CABC9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 24))(*(_QWORD *)(a1 + 360));
}

uint64_t sub_100CABCAC(uint64_t a1, uint64_t a2)
{
  double *v4;
  __int128 v5;
  NSObject *v6;
  unsigned int v7;
  void **v8;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  uint64_t buf;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  sub_100119F3C(v12);
  v4 = (double *)(a1 + 280);
  v5 = unk_102307A28;
  *(_OWORD *)(a1 + 280) = xmmword_102307A18;
  *(_OWORD *)(a1 + 296) = v5;
  *(_OWORD *)(a1 + 305) = unk_102307A31;
  if (sub_100006BB4(a2, "Indoor", v12))
  {
    sub_1011E7A6C(a1 + 280, (uint64_t)v12);
    sub_100119F3C(&buf);
    sub_100006BB4((uint64_t)v12, "Settings", &buf);
    sub_100CAB6B4((_DWORD *)(a1 + 384), (uint64_t)&buf);
    sub_10011A5A8(&buf);
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D5E0);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_100201404(a1);
    v7 = sub_100201404(a1);
    sub_1011E7898(v4, __p);
    if (v11 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    buf = 68289539;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = v7;
    v18 = 2081;
    v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return sub_10011A5A8(v12);
}

void sub_100CABE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CABEB0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_102307A50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_102307A50))
  {
    byte_102307A48 = ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0;
    __cxa_guard_release(&qword_102307A50);
  }
  return byte_102307A48;
}

void sub_100CABF2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102307A50);
  _Unwind_Resume(a1);
}

void sub_100CABF44(uint64_t a1)
{
  CLHUploadRequest *v2;
  id v3;

  if (objc_msgSend(*(id *)(a1 + 376), "count"))
  {
    v3 = objc_alloc_init((Class)CLPIndoorCollectionRequest);
    objc_msgSend(v3, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
    objc_msgSend(*(id *)(a1 + 376), "overwritePrimaryObject:", v3);
    v2 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(a1 + 376));
    -[CLHUploadRequest setEndpoint:](v2, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "indoorEndpoint"));
    objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v2);

  }
}

void sub_100CABFFC(uint64_t a1)
{
  double v2;
  double v3;

  sub_100D058B4((unsigned int *)a1);
  *(_BYTE *)(a1 + 760) = 1;
  sub_100FEA50C((_QWORD *)(a1 + 464));
  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v3 = *(double *)(a1 + 400);
  *(double *)(a1 + 768) = v2 + *(double *)(a1 + 432) + v3 + (double)rand() / 2147483650.0 * (*(double *)(a1 + 408) - v3);
  sub_100FEAACC((_QWORD *)(a1 + 464));
}

uint64_t sub_100CAC084(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 1);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 3);
  return 1;
}

uint64_t sub_100CAC0E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100204E3C((_QWORD *)(a1 + 464));
  *(_BYTE *)(a1 + 760) = 0;
  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3, 1);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5, 3);
}

uint64_t sub_100CAC154(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v7;

  v7 = a3;
  result = sub_100CAC19C(a1);
  if ((result & 1) == 0)
    return sub_100FEA5A4(a1 + 464, (uint64_t)&v7, a4, 1);
  return result;
}

uint64_t sub_100CAC19C(uint64_t a1)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56))
    && *(_BYTE *)(a1 + 88)
    && (sub_1002041F0(a1) & 1) != 0)
  {
    return 0;
  }
  sub_100204E3C((_QWORD *)(a1 + 464));
  return 1;
}

void sub_100CAC1F4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  _QWORD v5[5];
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  v2 = a1 + 464;
  if (!sub_1001FEC2C(a1 + 464))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D5E0);
    v3 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      return;
    sub_100201404(a1);
    *(_DWORD *)buf = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = sub_100201404(a1);
    v4 = "{\"msg%{public}.0s\":\"Cache is empty, not harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, v4, buf, 0x1Cu);
    return;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)) & 1) == 0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D5E0);
    v3 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      return;
    sub_100201404(a1);
    *(_DWORD *)buf = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = sub_100201404(a1);
    v4 = "{\"msg%{public}.0s\":\"Harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLSubHa"
         "rvesterIdentifier}lld}";
    goto LABEL_17;
  }
  if ((sub_1002041F0(a1) & 1) != 0)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100CAC6D4;
    v5[3] = &unk_10217D490;
    v5[4] = a1;
    sub_100FEB7E0(v2, (uint64_t)v5);
    sub_100D05194(a1);
    return;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D5E0);
  v3 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_100201404(a1);
    *(_DWORD *)buf = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = sub_100201404(a1);
    v4 = "{\"msg%{public}.0s\":\"no active trace, not harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    goto LABEL_17;
  }
}

uint64_t sub_100CAC494(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v7;

  v7 = a3;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56));
  if ((_DWORD)result && *(_BYTE *)(a1 + 88))
  {
    result = sub_1002041F0(a1);
    if ((_DWORD)result)
      return sub_100FEA9C0(a1 + 464, &v7, a4);
  }
  return result;
}

void sub_100CAC4F8(uint64_t a1)
{
  if ((sub_100CAC19C(a1) & 1) == 0)
    sub_10020539C((double *)(a1 + 464));
}

void sub_100CAC53C(uint64_t a1, uint64_t a2)
{
  if ((sub_100CAC19C(a1) & 1) == 0)
    sub_100203774(a1 + 464, a2);
}

void sub_100CAC578(uint64_t a1, uint64_t a2)
{
  if ((sub_100CAC19C(a1 - 352) & 1) == 0)
    sub_100203774(a1 + 112, a2);
}

void sub_100CAC5B8(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if ((sub_100CAC19C(a1) & 1) == 0)
    sub_100FEAD1C(a1 + 464, a3, a4);
}

void sub_100CAC608(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if ((sub_100CAC19C(a1 - 352) & 1) == 0)
    sub_100FEAD1C(a1 + 112, a3, a4);
}

uint64_t sub_100CAC660(uint64_t a1)
{
  return sub_100CAC19C(a1 - 352);
}

id sub_100CAC670(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 376), "count");
}

id sub_100CAC678(uint64_t a1)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 376), "pruneSecondaryDataOlderThan:", v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1));
}

id sub_100CAC6C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 7);
}

void sub_100CAC6D4(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  int v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _DWORD v21[4];
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;

  v3 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 396) & 0x80000000) != 0
    || (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 160))(*(_QWORD *)(a1 + 32)) < (unint64_t)*(int *)(v3 + 396))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D5E0);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      sub_100201404(v3);
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2050;
      v27 = sub_100201404(v3);
      v28 = 2113;
      v29 = objc_msgSend(a2, "formattedText");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{private, location:escape_only}@}", buf, 0x26u);
    }
    switch(objc_msgSend(a2, "type"))
    {
      case 1u:
        v5 = *(void **)(v3 + 376);
        v6 = objc_msgSend(a2, "cmAttitude");
        v7 = v5;
        v8 = 4;
        goto LABEL_27;
      case 2u:
        v16 = *(void **)(v3 + 376);
        v6 = objc_msgSend(a2, "cmPedometer");
        v7 = v16;
        v8 = 5;
        goto LABEL_27;
      case 3u:
        v17 = *(void **)(v3 + 376);
        v6 = objc_msgSend(a2, "location");
        v7 = v17;
        v8 = 3;
        goto LABEL_27;
      case 4u:
        v18 = *(void **)(v3 + 376);
        v6 = objc_msgSend(a2, "motionActivity");
        v7 = v18;
        v8 = 6;
        goto LABEL_27;
      case 5u:
        v19 = *(void **)(v3 + 376);
        v6 = objc_msgSend(a2, "pressure");
        v7 = v19;
        v8 = 7;
        goto LABEL_27;
      case 6u:
        v20 = *(void **)(v3 + 376);
        v6 = objc_msgSend(a2, "wifiScan");
        v7 = v20;
        v8 = 2;
LABEL_27:
        objc_msgSend(v7, "writeSecondaryObject:toField:", v6, v8);
        break;
      case 7u:
        break;
      default:
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217D5E0);
        v12 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
        {
          v13 = objc_msgSend(a2, "type");
          *(_DWORD *)buf = 67109120;
          v23 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Attempting to write unknown event with type %d, consider updating this switch statement", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10217D5E0);
          v14 = qword_1022A0208;
          v21[0] = 67109120;
          v21[1] = objc_msgSend(a2, "type");
          v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 17, "Attempting to write unknown event with type %d, consider updating this switch statement", v21);
          sub_100512490("Generic", 1, 0, 0, "void CLSubHarvesterIndoor::harvestIndoor()_block_invoke", "%s\n", v15);
          if (v15 != (char *)buf)
            free(v15);
        }
        break;
    }
    ++*(_DWORD *)(v3 + 208);
    *(double *)(v3 + 752) = (*(double (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 64))(*(_QWORD *)(v3 + 56));
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217D5E0);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      sub_100201404(v3);
      v10 = sub_100201404(v3);
      v11 = *(_DWORD *)(v3 + 396);
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2050;
      v27 = v10;
      v28 = 1025;
      LODWORD(v29) = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"max scans exceeded, removing from cache\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxEvents\":%{private}d}", buf, 0x22u);
    }
  }
}

void sub_100CACB40()
{
  operator delete();
}

double sub_100CACB54(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

double sub_100CACB5C@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

void sub_100CACB70(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100CACB9C()
{
  return sub_1011E780C((uint64_t)&xmmword_102307A18, 1, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

void sub_100CACBD8(uint64_t a1, double a2)
{
  double v3;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  float *v11;
  float *v12;
  uint64_t v13;

  v3 = *(double *)(a1 + 24);
  if (v3 == -1.0)
    return;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  sub_10027205C(&v11, (const void *)qword_102307A70, qword_102307A78, (qword_102307A78 - qword_102307A70) >> 2);
  v5 = (char *)v12 - (char *)v11;
  if (v12 != v11)
  {
    v6 = 0;
    v8 = v5 >> 2;
    if ((unint64_t)(v5 >> 2) <= 1)
      v8 = 1;
    while (1)
    {
      v7 = (a2 - v3) / 60.0;
      if (v11[v6] >= v7)
        goto LABEL_9;
      if (v8 == ++v6)
      {
        LODWORD(v6) = v8;
        goto LABEL_9;
      }
    }
  }
  LODWORD(v6) = 0;
  if (v12)
  {
LABEL_9:
    v12 = v11;
    operator delete(v11);
    LODWORD(v5) = v6;
  }
  v9 = (unint64_t)(qword_102307A60 - qword_102307A58) >> 2;
  v10 = v5 & ~((int)v5 >> 31);
  if (v10 < (int)v9)
    LODWORD(v9) = v10;
  ++*(_DWORD *)(*(_QWORD *)a1 + 4 * (int)v9);
  *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
}

double sub_100CACCD8(uint64_t a1)
{
  void *v2;
  double result;
  int v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  sub_100CB0348(&v5, ((qword_102307A78 - qword_102307A70) >> 2) + 1, &v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void sub_100CACD44(uint64_t a1)
{
  int v7;

  *(_QWORD *)a1 = off_10217D610;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = 0;
  sub_100CB0348((_QWORD *)(a1 + 48), ((qword_102307A60 - qword_102307A58) >> 2) + 1, &v7);
  v7 = 0;
  sub_100CB0348((_QWORD *)(a1 + 72), ((qword_102307A60 - qword_102307A58) >> 2) + 1, &v7);
  v7 = 0;
  sub_100CB0348((_QWORD *)(a1 + 96), ((qword_102307A60 - qword_102307A58) >> 2) + 1, &v7);
  v7 = 0;
  sub_100CB0348((_QWORD *)(a1 + 120), ((qword_102307A78 - qword_102307A70) >> 2) + 1, &v7);
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 152) = 1153138688;
  v7 = 0;
  sub_100CB0348((_QWORD *)(a1 + 160), ((qword_102307A78 - qword_102307A70) >> 2) + 1, &v7);
  *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 192) = 1112014848;
  *(_WORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 202) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 232) = _Q0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 264) = 6;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 303) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_WORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  sub_1009BA7BC(a1 + 376, 1, -90, 60);
  sub_1009BA7BC(a1 + 424, 1, -90, 60);
  sub_1015A2E04((_QWORD *)(a1 + 472), "Null");
  v7 = 12;
  sub_1018C1A0C((unsigned __int8 *)(a1 + 496), "FitnessOutdoorAnalyticsSegmentsPerDay", &v7, 0);
  *(_QWORD *)(a1 + 512) = 0x4000000000000000;
  LOBYTE(v7) = 1;
  sub_1018BF25C((unsigned __int8 *)(a1 + 520), "FitnessOutdoorAnalyticsEnableSubsampling", (unsigned __int8 *)&v7, 0);
  LOBYTE(v7) = 1;
  sub_1018BF25C((unsigned __int8 *)(a1 + 523), "FitnessOutdoorAnalyticsEnableWeatherRequirement", (unsigned __int8 *)&v7, 0);
  sub_100CAD084(a1);
}

void sub_100CACF98(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  if (*(char *)(v2 + 495) < 0)
    operator delete(*v8);
  v10 = *(void **)(v2 + 448);
  if (v10)
  {
    *(_QWORD *)(v2 + 456) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(v2 + 400);
  if (v11)
  {
    *(_QWORD *)(v2 + 408) = v11;
    operator delete(v11);
  }
  v12 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v2 + 168) = v12;
    operator delete(v12);
  }
  v13 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v2 + 128) = v13;
    operator delete(v13);
  }
  v14 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v2 + 104) = v14;
    operator delete(v14);
  }
  v15 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 80) = v15;
    operator delete(v15);
  }
  v16 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 56) = v16;
    operator delete(v16);
  }
  v17 = *v1;
  *v1 = 0;
  if (v17)
    sub_100CB03C8((uint64_t)v1, v17);
  _Unwind_Resume(exception_object);
}

void sub_100CAD084(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  double v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  double *v14;
  uint64_t v15;
  void *__p;
  double *v17;
  double *v18;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    sub_100CB03C8(a1 + 16, v2);
  v3 = *(_DWORD *)(a1 + 500);
  v4 = 2.0;
  if (v3 - 1 <= 0x59F)
    v4 = 24.0 / (double)v3;
  v5 = 0;
  *(double *)(a1 + 512) = v4;
  __p = 0;
  v17 = 0;
  v18 = 0;
  v6 = 0.0;
  while (1)
  {
    if (v5 >= v18)
    {
      v8 = (double *)__p;
      v9 = ((char *)v5 - (_BYTE *)__p) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_100259694();
      v11 = (char *)v18 - (_BYTE *)__p;
      if (((char *)v18 - (_BYTE *)__p) >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        v13 = (char *)sub_10025E6A0((uint64_t)&v18, v12);
        v8 = (double *)__p;
        v5 = v17;
      }
      else
      {
        v13 = 0;
      }
      v14 = (double *)&v13[8 * v9];
      *v14 = v6;
      v7 = v14 + 1;
      while (v5 != v8)
      {
        v15 = *((_QWORD *)v5-- - 1);
        *((_QWORD *)v14-- - 1) = v15;
      }
      __p = v14;
      v17 = v7;
      v18 = (double *)&v13[8 * v12];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v5 = v6;
      v7 = v5 + 1;
    }
    v17 = v7;
    v6 = v6 + *(double *)(a1 + 512);
    v5 = v7;
    if (v6 >= 24.0)
      operator new();
  }
}

void sub_100CAD228(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete();
}

std::string *sub_100CAD26C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  std::string *result;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[16];
  uint64_t v14;

  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_10217D640);
  v2 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, reset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "FitnessOutdoorAnalyticsAggregator, reset", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::reset()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(double *)(a1 + 24) = sub_100C28B7C(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  v12[0] = 0;
  sub_100CB0348(buf, ((qword_102307A60 - qword_102307A58) >> 2) + 1, v12);
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 64) = v14;
  v12[0] = 0;
  sub_100CB0348(buf, ((qword_102307A60 - qword_102307A58) >> 2) + 1, v12);
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 88) = v14;
  v12[0] = 0;
  sub_100CB0348(buf, ((qword_102307A60 - qword_102307A58) >> 2) + 1, v12);
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 112) = v14;
  sub_100CACCD8(a1 + 120);
  sub_100CACCD8(a1 + 160);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  v7 = *(_QWORD *)(a1 + 392);
  *(_DWORD *)buf = 0;
  sub_1004AF5E4((char **)(a1 + 400), v7, buf);
  v8 = *(_QWORD *)(a1 + 440);
  *(_DWORD *)buf = 0;
  sub_1004AF5E4((char **)(a1 + 448), v8, buf);
  result = std::string::assign((std::string *)(a1 + 472), "Null");
  *(_WORD *)(a1 + 305) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  return result;
}

uint64_t sub_100CAD550(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 200) = *(_BYTE *)(a2 + 9);
  return result;
}

void sub_100CAD55C(uint64_t a1, double a2)
{
  double v3;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  double v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  uint64_t v18;

  v3 = *(double *)(a1 + 8);
  if (v3 != 0.0 && v3 >= a2)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v5 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134218240;
      v16 = a2;
      v17 = 2048;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "FitnessOutdoorAnalyticsAggregator, updates not strictly increasing, time, %f, prevTime, %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_10217D640);
      v7 = *(_QWORD *)(a1 + 8);
      v11 = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = v7;
      LODWORD(v10) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 2, "FitnessOutdoorAnalyticsAggregator, updates not strictly increasing, time, %f, prevTime, %f", COERCE_DOUBLE(&v11), v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLFitnessOutdoorAnalyticsAggregator::estimateDurationBetweenUpdates(CFAbsoluteTime) const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

std::string *sub_100CAD76C(uint64_t a1, uint64_t a2)
{
  __n128 v4;

  *(_BYTE *)(a1 + 202) = CLMotionActivity::isTypeStatic(*(unsigned int *)(a2 + 144));
  *(_BYTE *)(a1 + 201) = CLMotionActivity::isTypeInVehicle(*(unsigned int *)(a2 + 144), v4);
  return sub_100CAD7AC(a1, *(double *)a2);
}

std::string *sub_100CAD7AC(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  int v14;
  double v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  std::string *result;

  sub_100CAD55C(a1, a2);
  v5 = v4;
  *(double *)(a1 + 8) = a2;
  v6 = 0.0;
  if (!*(_BYTE *)(a1 + 200) && !*(_BYTE *)(a1 + 202))
    v6 = v5;
  *(double *)(a1 + 208) = v6 + *(double *)(a1 + 208);
  sub_100CAD960(a1);
  v7 = *(unsigned __int8 *)(a1 + 288);
  if (*(_BYTE *)(a1 + 288))
    v8 = v5;
  else
    v8 = 0.0;
  *(double *)(a1 + 280) = *(double *)(a1 + 280) + v8;
  if (v7)
  {
    v9 = 0.0;
    if (*(_BYTE *)(a1 + 305))
      v10 = v5;
    else
      v10 = 0.0;
    *(double *)(a1 + 312) = *(double *)(a1 + 312) + v10;
    if (*(_BYTE *)(a1 + 336))
      v9 = v5;
  }
  else
  {
    v9 = 0.0;
    *(double *)(a1 + 312) = *(double *)(a1 + 312) + 0.0;
  }
  *(double *)(a1 + 344) = v9 + *(double *)(a1 + 344);
  v11 = *(unsigned __int8 *)(a1 + 304);
  v12 = 0.0;
  if (*(_BYTE *)(a1 + 304))
    v13 = v5;
  else
    v13 = 0.0;
  *(double *)(a1 + 296) = *(double *)(a1 + 296) + v13;
  if (v11)
  {
    v14 = *(unsigned __int8 *)(a1 + 305);
    if (*(_BYTE *)(a1 + 305))
      v15 = v5;
    else
      v15 = 0.0;
    *(double *)(a1 + 320) = *(double *)(a1 + 320) + v15;
    v16 = *(unsigned __int8 *)(a1 + 336);
    if (*(_BYTE *)(a1 + 336))
      v12 = v5;
  }
  else
  {
    *(double *)(a1 + 320) = *(double *)(a1 + 320) + 0.0;
    v14 = *(unsigned __int8 *)(a1 + 305);
    v16 = *(unsigned __int8 *)(a1 + 336);
  }
  v17 = *(double *)(a1 + 360);
  v18 = v12 + *(double *)(a1 + 352);
  *(double *)(a1 + 40) = v5 + *(double *)(a1 + 40);
  v19 = 0.0;
  if (v14)
    v20 = v5;
  else
    v20 = 0.0;
  *(double *)(a1 + 328) = *(double *)(a1 + 328) + v20;
  if (v16)
    v19 = v5;
  *(double *)(a1 + 352) = v18;
  *(double *)(a1 + 360) = v17 + v19;
  result = (std::string *)sub_100C28FD0(*(_QWORD *)(a1 + 16), a2);
  if ((_DWORD)result)
  {
    sub_100CACBD8(a1 + 120, a2);
    sub_100CACBD8(a1 + 160, a2);
    sub_100CADD3C(a1, a2);
    return sub_100CAD26C(a1);
  }
  return result;
}

void sub_100CAD960(uint64_t a1)
{
  double v2;
  double v3;
  _BOOL4 v5;
  double v6;
  BOOL v8;
  double v9;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  int v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint8_t buf[4];
  _BOOL4 v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  v2 = *(double *)(a1 + 8);
  if (v2 == -1.0)
  {
    v5 = 0;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v3 = *(double *)(a1 + 240);
  v5 = v3 != -1.0 && v2 >= v3 + 30.0 && *(_BYTE *)(a1 + 248) != 0;
  v6 = *(double *)(a1 + 232);
  if (v6 == -1.0)
    goto LABEL_14;
  if (v2 < v6 + 30.0 || v3 != -1.0)
    goto LABEL_14;
  v8 = v2 < v6 + 3600.0;
LABEL_15:
  v9 = *(double *)(a1 + 256);
  if (v9 == -1.0 || v2 > v9 + 180.0)
  {
    v11 = 0;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 264);
    if (v12)
      v13 = v12 == 3;
    else
      v13 = 1;
    v11 = v13;
  }
  v14 = *(_QWORD *)(a1 + 272);
  v15 = (v14 < 0x1D) & (0x10050A20u >> v14);
  v16 = (v14 < 0x1C) & (0x9B28010u >> v14);
  if (*(_BYTE *)(a1 + 201) || *(_BYTE *)(a1 + 200))
  {
    v17 = 0;
    *(_BYTE *)(a1 + 305) = 0;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    *(_BYTE *)(a1 + 305) = v5 | v15;
    if (v8)
      v17 = 1;
    else
      v17 = v11 | v16;
  }
  *(_BYTE *)(a1 + 336) = v17;
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_10217D640);
  v19 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(unsigned __int8 *)(a1 + 201);
    v21 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)buf = 67110912;
    v32 = v5;
    v33 = 1024;
    v34 = v8;
    v35 = 1024;
    v36 = v11;
    v37 = 1024;
    v38 = v15;
    v39 = 1024;
    v40 = v16;
    v41 = 1024;
    v42 = v18;
    v43 = 1024;
    v44 = v20;
    v45 = 1024;
    v46 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "FitnessOutdoorAnalyticsAggregator, update priors, loiIndoor, %d, loiOutdoor, %d, mapsRouteOutdoor, %d, workoutIndoor, %d, workoutOutdoor, %d, suppressPriors, %d, inVehicle, %d, onCharger, %d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v22 = *(unsigned __int8 *)(a1 + 201);
    v23 = *(unsigned __int8 *)(a1 + 200);
    LOWORD(v27) = 1024;
    HIWORD(v27) = v8;
    LOWORD(v28) = HIWORD(v15);
    HIWORD(v28) = 1024;
    LOWORD(v29) = 1024;
    HIWORD(v29) = v18;
    HIWORD(v30) = HIWORD(v23);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 2, "FitnessOutdoorAnalyticsAggregator, update priors, loiIndoor, %d, loiOutdoor, %d, mapsRouteOutdoor, %d, workoutIndoor, %d, workoutOutdoor, %d, suppressPriors, %d, inVehicle, %d, onCharger, %d", &v26, 50, 67110912, v27, v11, v28, v29, v22);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::updatePriors()", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  if ((v18 & 1) != 0)
    return;
  if (v5)
  {
    *(_BYTE *)(a1 + 306) |= 1u;
    if (!v8)
    {
LABEL_38:
      if (!v11)
        goto LABEL_39;
LABEL_45:
      *(_BYTE *)(a1 + 337) |= 2u;
      if (!v15)
      {
LABEL_40:
        if (!v16)
          return;
        goto LABEL_41;
      }
      goto LABEL_46;
    }
  }
  else if (!v8)
  {
    goto LABEL_38;
  }
  *(_BYTE *)(a1 + 337) |= 1u;
  if (v11)
    goto LABEL_45;
LABEL_39:
  if (!v15)
    goto LABEL_40;
LABEL_46:
  *(_BYTE *)(a1 + 306) |= 4u;
  if (v16)
LABEL_41:
    *(_BYTE *)(a1 + 337) |= 4u;
}

void sub_100CADD3C(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  _BOOL4 v7;
  _BOOL4 v8;
  BOOL v10;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  int v29;
  uint8_t *v30;
  _BYTE v31[24];
  uint64_t v32;
  _BYTE v33[32];
  __int128 v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  _BOOL4 v52;

  v4 = *(double *)(a1 + 512);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v12 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, not sending analytics, no IHA permission", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    *(_WORD *)v31 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "FitnessOutdoorAnalyticsAggregator, not sending analytics, no IHA permission", v31, 2, *(_OWORD *)v31, *(_QWORD *)&v31[16], v32, *(_OWORD *)v33, *(_OWORD *)&v33[16], v34);
LABEL_33:
    v30 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::attemptSendAnalytics(CFAbsoluteTime) const", "%s\n", v13);
    if (v30 != buf)
      free(v30);
    return;
  }
  v5 = *(double *)(a1 + 40);
  v6 = vabdd_f64(a2, *(double *)(a1 + 32));
  v7 = sub_100CB0174(a1);
  v8 = v7;
  v10 = v5 < (double)(int)(v4 * 0.95 * 3600.0) || v5 > (double)(int)(v4 * 1.05 * 3600.0) || v6 > 10.0;
  if (!v10 && (*(_BYTE *)(a1 + 368) || !*(_BYTE *)(a1 + 524)) && *(_BYTE *)(a1 + 217) && v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    return;
  }
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_10217D640);
  v14 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(double *)(a1 + 24);
    v16 = sub_100C28C84(v15);
    v17 = *(double *)(a1 + 32);
    v18 = sub_100C28C84(v17);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = *(unsigned __int8 *)(a1 + 368);
    v21 = *(unsigned __int8 *)(a1 + 217);
    *(_DWORD *)buf = 134351104;
    v36 = a2;
    v37 = 2050;
    v38 = v15;
    v39 = 2050;
    v40 = v16;
    v41 = 2050;
    v42 = v17;
    v43 = 2050;
    v44 = v18;
    v45 = 2050;
    v46 = v19;
    v47 = 1026;
    v48 = v20;
    v49 = 1026;
    v50 = v21;
    v51 = 1024;
    v52 = v8;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, not sending analytics due to insufficient data, currentTime, %{public}.2f, binStartTime, %{public}.2f, binStartWallHour, %{public}.2f, binEndTime, %{public}.2f, binEndWallHour, %{public}.2f, accumulatedDurationInSeconds, %{public}.2f, hasRecentWeatherUpdate, %{public}d, hasLatLong, %{public}d, isCurrentBinEligibleSubsample, %d", buf, 0x50u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v22 = qword_10229FF18;
    v23 = *(double *)(a1 + 24);
    v24 = sub_100C28C84(v23);
    v25 = *(double *)(a1 + 32);
    v26 = sub_100C28C84(v25);
    v27 = *(_QWORD *)(a1 + 40);
    v28 = *(unsigned __int8 *)(a1 + 368);
    v29 = *(unsigned __int8 *)(a1 + 217);
    *(_DWORD *)v31 = 134351104;
    *(double *)&v31[4] = a2;
    *(_WORD *)&v31[12] = 2050;
    *(double *)&v31[14] = v23;
    *(_WORD *)&v31[22] = 2050;
    *(_WORD *)v33 = 2050;
    *(double *)&v33[2] = v25;
    *(_WORD *)&v33[10] = 2050;
    *(double *)&v33[12] = v26;
    *(_WORD *)&v33[20] = 2050;
    *(_QWORD *)&v33[22] = v27;
    *(_WORD *)&v33[30] = 1026;
    LODWORD(v34) = v28;
    WORD2(v34) = 1026;
    *(_DWORD *)((char *)&v34 + 6) = v29;
    WORD5(v34) = 1024;
    HIDWORD(v34) = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "FitnessOutdoorAnalyticsAggregator, not sending analytics due to insufficient data, currentTime, %{public}.2f, binStartTime, %{public}.2f, binStartWallHour, %{public}.2f, binEndTime, %{public}.2f, binEndWallHour, %{public}.2f, accumulatedDurationInSeconds, %{public}.2f, hasRecentWeatherUpdate, %{public}d, hasLatLong, %{public}d, isCurrentBinEligibleSubsample, %d", v31, 80, *(_OWORD *)v31, *(_QWORD *)&v31[16], *(_QWORD *)&v24, *(_OWORD *)v33, *(_OWORD *)&v33[16], v34);
    goto LABEL_33;
  }
}

uint64_t sub_100CAE1D4(uint64_t result, double a2, double a3)
{
  *(_BYTE *)(result + 217) = 1;
  *(_DWORD *)(result + 220) = llround(a2);
  *(_DWORD *)(result + 224) = llround(a3);
  return result;
}

std::string *sub_100CAE1EC(std::string *result, void *a2)
{
  std::string *v3;
  float v4;
  int data;
  int v6;
  float v7;
  int v8;
  int v9;

  if (a2)
  {
    v3 = result;
    result[15].__r_.__value_.__s.__data_[8] = 1;
    objc_msgSend(a2, "temperature");
    data = (int)v4;
    v6 = HIDWORD(v3[15].__r_.__value_.__r.__words[2]);
    if (v6 > (int)v4)
      data = HIDWORD(v3[15].__r_.__value_.__r.__words[2]);
    if (data >= SLODWORD(v3[16].__r_.__value_.__l.__data_))
      data = (int)v3[16].__r_.__value_.__l.__data_;
    ++*(_DWORD *)(v3[16].__r_.__value_.__r.__words[2]
                + 4 * ((data - v6) / SLODWORD(v3[15].__r_.__value_.__r.__words[2])));
    objc_msgSend(a2, "feelsLikeTemperature");
    v8 = (int)v7;
    v9 = HIDWORD(v3[17].__r_.__value_.__r.__words[2]);
    if (v9 > (int)v7)
      v8 = HIDWORD(v3[17].__r_.__value_.__r.__words[2]);
    if (v8 >= SLODWORD(v3[18].__r_.__value_.__l.__data_))
      v8 = (int)v3[18].__r_.__value_.__l.__data_;
    ++*(_DWORD *)(v3[18].__r_.__value_.__r.__words[2] + 4
                                                      * ((v8 - v9)
                                                       / SLODWORD(v3[17].__r_.__value_.__r.__words[2])));
    result = (std::string *)objc_msgSend(objc_msgSend(a2, "precipitationType"), "isEqualToString:", CFSTR("Null"));
    if ((result & 1) == 0)
      return std::string::assign((std::string *)((char *)v3 + 472), (const std::string::value_type *)objc_msgSend(objc_msgSend(a2, "precipitationType"), "UTF8String"));
  }
  return result;
}

BOOL sub_100CAE2D0(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  int v9;
  void *v10;
  __int128 *p_dst;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _BOOL8 v21;
  char *v23;
  char *v24;
  char *v25;
  _QWORD v26[2];
  char v27;
  __int128 __dst;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31[3];
  uint64_t v32[3];
  uint64_t v33[3];
  uint64_t v34[3];
  uint64_t v35[3];
  uint64_t v36[3];
  uint64_t v37[3];
  _QWORD v38[3];
  __int128 v39;

  sub_1015A2E04(&__dst, "Trail");
  sub_1015A2E04(v30, "Park");
  sub_1015A2E04(v31, "Field");
  sub_1015A2E04(v32, "Golf");
  sub_1015A2E04(v33, "Preserve");
  sub_1015A2E04(v34, "Recreation Area");
  sub_1015A2E04(v35, "Beach");
  sub_1015A2E04(v36, "Bay");
  sub_1015A2E04(v37, "River");
  sub_1015A2E04(v38, "Creek");
  v24 = 0;
  v25 = 0;
  v26[0] = 0;
  v26[1] = &v24;
  v27 = 0;
  v24 = (char *)operator new(0xF0uLL);
  v25 = v24;
  v26[0] = v24 + 240;
  v3 = 0;
  v25 = sub_10028E070((uint64_t)v26, &__dst, &v39, v24);
  do
  {
    if (SHIBYTE(v38[v3 + 2]) < 0)
      operator delete((void *)v38[v3]);
    v3 -= 3;
  }
  while (v3 != -30);
  v5 = v24;
  v4 = v25;
  if (v24 == v25)
  {
    v21 = 0;
  }
  else
  {
    v23 = a2;
    do
    {
      if (v5[23] < 0)
      {
        sub_100115CE4(&__dst, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *(_OWORD *)v5;
        v29 = *((_QWORD *)v5 + 2);
        __dst = v6;
      }
      if (a2[23] < 0)
      {
        v8 = *(char **)a2;
        v7 = *((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = a2[23];
        v8 = a2;
      }
      v9 = SHIBYTE(v29);
      v10 = (void *)__dst;
      if (v29 >= 0)
        p_dst = &__dst;
      else
        p_dst = (__int128 *)__dst;
      if (v29 >= 0)
        v12 = HIBYTE(v29);
      else
        v12 = *((_QWORD *)&__dst + 1);
      if (v12)
      {
        v13 = &v8[v7];
        if (v7 >= v12)
        {
          v16 = v4;
          v17 = *(char *)p_dst;
          v18 = v8;
          do
          {
            v19 = v7 - v12;
            if (v19 == -1)
              break;
            v20 = (char *)memchr(v18, v17, v19 + 1);
            if (!v20)
              break;
            v14 = v20;
            if (!memcmp(v20, p_dst, v12))
              goto LABEL_29;
            v18 = v14 + 1;
            v7 = v13 - (v14 + 1);
          }
          while (v7 >= v12);
          v14 = v13;
LABEL_29:
          v4 = v16;
          a2 = v23;
        }
        else
        {
          v14 = &v8[v7];
        }
        if (v14 == v13)
          v15 = -1;
        else
          v15 = v14 - v8;
      }
      else
      {
        v15 = 0;
      }
      v21 = v15 != -1;
      if (v9 < 0)
        operator delete(v10);
      if (v15 != -1)
        break;
      v5 += 24;
    }
    while (v5 != v4);
  }
  *(_QWORD *)&__dst = &v24;
  sub_100259608((void ***)&__dst);
  return v21;
}

void sub_100CAE5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;

  sub_100259608(&a13);
  v16 = 0;
  while (1)
  {
    if (*((char *)&a15 + v16 + 239) < 0)
      operator delete(*(void **)((char *)&a15 + v16 + 216));
    v16 -= 24;
    if (v16 == -240)
      _Unwind_Resume(a1);
  }
}

void sub_100CAE640(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  _BOOL4 v10;
  char v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *__p[2];
  char v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  void *v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  void *v32;

  if (a2)
  {
    if (objc_msgSend(a2, "hasDepartureDate"))
    {
      objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
      *(_QWORD *)(a1 + 232) = v4;
      *(_QWORD *)(a1 + 240) = 0xBFF0000000000000;
    }
    else
    {
      if (!objc_msgSend(a2, "hasArrivalDate"))
        goto LABEL_21;
      objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
      *(_QWORD *)(a1 + 240) = v8;
      if (objc_msgSend(a2, "_placeInference"))
      {
        v9 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType");
        if (objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType")
          || !objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"))
        {
          LOBYTE(v10) = 0;
        }
        else
        {
          v15 = sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"), "UTF8String"));
          v10 = !sub_100CAE2D0((uint64_t)v15, (char *)__p);
          if (v20 < 0)
            operator delete(__p[0]);
        }
        if (v9)
          v11 = 1;
        else
          v11 = v10;
        *(_BYTE *)(a1 + 248) = v11;
        goto LABEL_21;
      }
    }
    *(_BYTE *)(a1 + 248) = 0;
LABEL_21:
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v12 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)(a1 + 232);
      v14 = *(_QWORD *)(a1 + 240);
      *(_DWORD *)buf = 134218498;
      v28 = v13;
      v29 = 2048;
      v30 = v14;
      v31 = 2112;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, received leeched visit notification, fPrevLoiVisitEnd, %.2f, fCurrentLoiVisitStart, .%2f, visit, %@", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v16 = *(_QWORD *)(a1 + 232);
    v17 = *(_QWORD *)(a1 + 240);
    v21 = 134218498;
    v22 = v16;
    v23 = 2048;
    v24 = v17;
    v25 = 2112;
    v26 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 1, "FitnessOutdoorAnalyticsAggregator, received leeched visit notification, fPrevLoiVisitEnd, %.2f, fCurrentLoiVisitStart, .%2f, visit, %@", &v21, 32);
    v7 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::feedLocationOfInterest(CLVisit *)", "%s\n", v18);
LABEL_33:
    if (v7 != buf)
      free(v7);
    return;
  }
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_10217D640);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, #warning, Received null visit", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    LOWORD(v21) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 1, "FitnessOutdoorAnalyticsAggregator, #warning, Received null visit", &v21, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::feedLocationOfInterest(CLVisit *)", "%s\n", v6);
    goto LABEL_33;
  }
}

void sub_100CAEA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100CAEA3C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;

  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)a2;
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_10217D640);
  v3 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 256);
    v5 = *(_DWORD *)(a1 + 264);
    *(_DWORD *)buf = 134218240;
    v15 = v4;
    v16 = 1024;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "FitnessOutdoorAnalyticsAggregator, received maps route hint, iosTime, %f, routingType, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v6 = *(_QWORD *)(a1 + 256);
    v7 = *(_DWORD *)(a1 + 264);
    v10 = 134218240;
    v11 = v6;
    v12 = 1024;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 2, "FitnessOutdoorAnalyticsAggregator, received maps route hint, iosTime, %f, routingType, %d", COERCE_DOUBLE(&v10), 18);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::feedMapsRouteHint(const CLMapsRouteHintData &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

uint64_t sub_100CAEC1C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2 == 15)
  {
    v3 = 0;
  }
  else
  {
    if (v2 != 13)
      return result;
    v3 = *(_QWORD *)(a2 + 112);
  }
  *(_QWORD *)(result + 272) = v3;
  return result;
}

uint64_t sub_100CAEC44(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 288) = *(_QWORD *)(a2 + 16) == 2;
  *(_BYTE *)(result + 304) = (*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL) == 2;
  return result;
}

id sub_100CAEC6C(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  float v8;
  int v9;
  int v10;
  _QWORD *v11;
  NSDictionary *v12;
  NSDictionary *v13;
  NSDictionary *v14;
  NSDictionary *v15;
  NSDictionary *v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  NSDictionary *v36;
  uint8_t buf[4];
  NSDictionary *v38;
  _QWORD v39[20];
  _QWORD v40[20];
  _QWORD v41[20];
  _QWORD v42[20];
  _QWORD v43[12];
  _QWORD v44[12];
  _QWORD v45[16];
  _QWORD v46[16];
  _QWORD v47[13];
  _QWORD v48[13];

  v4 = (int)sub_100C28C84(*(double *)(a1 + 24));
  v5 = (int)sub_100C28C84(*(double *)(a1 + 32));
  if (v5)
    v6 = v5;
  else
    v6 = 24;
  v47[0] = CFSTR("startTime");
  v48[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4);
  v47[1] = CFSTR("endTime");
  v48[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v47[2] = CFSTR("wearTime");
  v48[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 208) / 60.0));
  v47[3] = CFSTR("outdoorTime");
  v48[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 280) / 60.0));
  v47[4] = CFSTR("daylightTime");
  v48[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 296) / 60.0));
  v47[5] = CFSTR("latitude");
  v48[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 220));
  v47[6] = CFSTR("longitude");
  v48[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 224));
  v47[7] = CFSTR("sunElevationAngleStart");
  v7 = sub_1000F1DBC(*(double *)(a1 + 24), (float)*(int *)(a1 + 220), (float)*(int *)(a1 + 224));
  v48[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sub_1011A2E30(5u, v7));
  v47[8] = CFSTR("sunElevationAngleEnd");
  v8 = sub_1000F1DBC(*(double *)(a1 + 32), (float)*(int *)(a1 + 220), (float)*(int *)(a1 + 224));
  v48[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sub_1011A2E30(5u, v8));
  v47[9] = CFSTR("currentTemp");
  v9 = sub_1009B962C(a1 + 376);
  v48[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sub_1011A2E1C((double)v9));
  v47[10] = CFSTR("feelsLikeTemp");
  v10 = sub_1009B962C(a1 + 424);
  v48[10] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sub_1011A2E1C((double)v10));
  v47[11] = CFSTR("precipitationType");
  v11 = (_QWORD *)(a1 + 472);
  if (*(char *)(a1 + 495) < 0)
    v11 = (_QWORD *)*v11;
  v48[11] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
  v47[12] = CFSTR("enabledAlwaysOnDisplay");
  v48[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 216));
  v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v48, v47, 13);
  v45[0] = CFSTR("timeLuxBin01");
  v46[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 4) + **(_DWORD **)(a1 + 48)));
  v45[1] = CFSTR("timeLuxBin02");
  v46[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 8));
  v45[2] = CFSTR("timeLuxBin03");
  v46[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 12));
  v45[3] = CFSTR("timeLuxBin04");
  v46[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 16));
  v45[4] = CFSTR("timeLuxBin05");
  v46[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 20));
  v45[5] = CFSTR("timeLuxBin06");
  v46[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24));
  v45[6] = CFSTR("timeLuxBin07");
  v46[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 28));
  v45[7] = CFSTR("timeLuxBin08");
  v46[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 32));
  v45[8] = CFSTR("timeLuxBin09");
  v46[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 36));
  v45[9] = CFSTR("timeLuxBin10");
  v46[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 40));
  v45[10] = CFSTR("timeLuxBin11");
  v46[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 44));
  v45[11] = CFSTR("timeLuxBin12");
  v46[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 48));
  v45[12] = CFSTR("timeLuxBin13");
  v46[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 52));
  v45[13] = CFSTR("timeLuxBin14");
  v46[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 56));
  v45[14] = CFSTR("timeLuxBin15");
  v46[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 60));
  v45[15] = CFSTR("timeLuxBin16");
  v46[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 64));
  v13 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v45, 16);
  v43[0] = CFSTR("intervalOccludedAlsBin01");
  v44[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 120) + 4));
  v43[1] = CFSTR("intervalOccludedAlsBin02");
  v44[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 120) + 8));
  v43[2] = CFSTR("intervalOccludedAlsBin03");
  v44[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 120) + 12));
  v43[3] = CFSTR("intervalOccludedAlsBin04");
  v44[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 120) + 16));
  v43[4] = CFSTR("intervalOccludedAlsBin05");
  v44[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 120) + 20));
  v43[5] = CFSTR("intervalOccludedAlsBin06");
  v44[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 120) + 24));
  v43[6] = CFSTR("intervalOccludedAlsT2Bin01");
  v44[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 160) + 4));
  v43[7] = CFSTR("intervalOccludedAlsT2Bin02");
  v44[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 160) + 8));
  v43[8] = CFSTR("intervalOccludedAlsT2Bin03");
  v44[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 160) + 12));
  v43[9] = CFSTR("intervalOccludedAlsT2Bin04");
  v44[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16));
  v43[10] = CFSTR("intervalOccludedAlsT2Bin05");
  v44[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 160) + 20));
  v43[11] = CFSTR("intervalOccludedAlsT2Bin06");
  v44[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 160) + 24));
  v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v44, v43, 12);
  v41[0] = CFSTR("outdoorTimeWithIndoorPrior");
  v42[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 312) / 60.0));
  v41[1] = CFSTR("daylightTimeWithIndoorPrior");
  v42[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 320) / 60.0));
  v41[2] = CFSTR("totalTimeWithIndoorPrior");
  v42[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 328) / 60.0));
  v41[3] = CFSTR("indoorPriorType");
  v42[3] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 306));
  v41[4] = CFSTR("luxWithIndoorPriorBin01");
  v42[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 4) + **(_DWORD **)(a1 + 72)));
  v41[5] = CFSTR("luxWithIndoorPriorBin02");
  v42[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 8));
  v41[6] = CFSTR("luxWithIndoorPriorBin03");
  v42[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 12));
  v41[7] = CFSTR("luxWithIndoorPriorBin04");
  v42[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 16));
  v41[8] = CFSTR("luxWithIndoorPriorBin05");
  v42[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 20));
  v41[9] = CFSTR("luxWithIndoorPriorBin06");
  v42[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 24));
  v41[10] = CFSTR("luxWithIndoorPriorBin07");
  v42[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 28));
  v41[11] = CFSTR("luxWithIndoorPriorBin08");
  v42[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 32));
  v41[12] = CFSTR("luxWithIndoorPriorBin09");
  v42[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 36));
  v41[13] = CFSTR("luxWithIndoorPriorBin10");
  v42[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 40));
  v41[14] = CFSTR("luxWithIndoorPriorBin11");
  v42[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 44));
  v41[15] = CFSTR("luxWithIndoorPriorBin12");
  v42[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 48));
  v41[16] = CFSTR("luxWithIndoorPriorBin13");
  v42[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 52));
  v41[17] = CFSTR("luxWithIndoorPriorBin14");
  v42[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 56));
  v41[18] = CFSTR("luxWithIndoorPriorBin15");
  v42[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 60));
  v41[19] = CFSTR("luxWithIndoorPriorBin16");
  v42[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 72) + 64));
  v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v42, v41, 20);
  v39[0] = CFSTR("outdoorTimeWithOutdoorPrior");
  v40[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 344) / 60.0));
  v39[1] = CFSTR("daylightTimeWithOutdoorPrior");
  v40[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 352) / 60.0));
  v39[2] = CFSTR("totalTimeWithOutdoorPrior");
  v40[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 360) / 60.0));
  v39[3] = CFSTR("outdoorPriorType");
  v40[3] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 337));
  v39[4] = CFSTR("luxWithOutdoorPriorBin01");
  v40[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 4) + **(_DWORD **)(a1 + 96)));
  v39[5] = CFSTR("luxWithOutdoorPriorBin02");
  v40[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 8));
  v39[6] = CFSTR("luxWithOutdoorPriorBin03");
  v40[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 12));
  v39[7] = CFSTR("luxWithOutdoorPriorBin04");
  v40[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 16));
  v39[8] = CFSTR("luxWithOutdoorPriorBin05");
  v40[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 20));
  v39[9] = CFSTR("luxWithOutdoorPriorBin06");
  v40[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 24));
  v39[10] = CFSTR("luxWithOutdoorPriorBin07");
  v40[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 28));
  v39[11] = CFSTR("luxWithOutdoorPriorBin08");
  v40[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 32));
  v39[12] = CFSTR("luxWithOutdoorPriorBin09");
  v40[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 36));
  v39[13] = CFSTR("luxWithOutdoorPriorBin10");
  v40[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 40));
  v39[14] = CFSTR("luxWithOutdoorPriorBin11");
  v40[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 44));
  v39[15] = CFSTR("luxWithOutdoorPriorBin12");
  v40[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 48));
  v39[16] = CFSTR("luxWithOutdoorPriorBin13");
  v40[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 52));
  v39[17] = CFSTR("luxWithOutdoorPriorBin14");
  v40[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 56));
  v39[18] = CFSTR("luxWithOutdoorPriorBin15");
  v40[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 60));
  v39[19] = CFSTR("luxWithOutdoorPriorBin16");
  v40[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 96) + 64));
  v16 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v40, v39, 20);
  v17 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v17, "addEntriesFromDictionary:", v12);
  objc_msgSend(v17, "addEntriesFromDictionary:", v13);
  objc_msgSend(v17, "addEntriesFromDictionary:", v14);
  objc_msgSend(v17, "addEntriesFromDictionary:", v15);
  objc_msgSend(v17, "addEntriesFromDictionary:", v16);
  if (a2)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v18 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v38 = v12;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, event basic info, %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_10217D640);
      v35 = 138477827;
      v36 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "FitnessOutdoorAnalyticsAggregator, event basic info, %{private}@", &v35, 12);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionary(BOOL) const", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v19 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138477827;
      v38 = v13;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event overall lux info, %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_10217D640);
      v35 = 138477827;
      v36 = v13;
      LODWORD(v34) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 1, "FitnessOutdoorAnalyticsAggregator, event overall lux info, %{private}@", &v35, v34);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionary(BOOL) const", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v20 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138477827;
      v38 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event als occlusion info, %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_10217D640);
      v35 = 138477827;
      v36 = v14;
      LODWORD(v34) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 1, "FitnessOutdoorAnalyticsAggregator, event als occlusion info, %{private}@", &v35, v34);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionary(BOOL) const", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v21 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138477827;
      v38 = v15;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event indoorPrior info, %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_10217D640);
      v35 = 138477827;
      v36 = v15;
      LODWORD(v34) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 1, "FitnessOutdoorAnalyticsAggregator, event indoorPrior info, %{private}@", &v35, v34);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionary(BOOL) const", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v22 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138477827;
      v38 = v16;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event outdoorPrior info, %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_10217D640);
      v35 = 138477827;
      v36 = v16;
      LODWORD(v34) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 1, "FitnessOutdoorAnalyticsAggregator, event outdoorPrior info, %{private}@", &v35, v34);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionary(BOOL) const", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  return v17;
}

id sub_100CAFECC(uint64_t a1, uint64_t a2)
{
  id result;

  result = (id)objc_opt_class(MCProfileConnection, a2);
  if (result)
    return objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed");
  return result;
}

uint64_t sub_100CAFF08(uint64_t a1)
{
  id v1;
  NSObject *v2;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[5];
  _DWORD v8[2];
  __int16 v9;
  unsigned int v10;
  uint8_t buf[4];
  unsigned int v12;
  __int16 v13;
  unsigned int v14;

  v1 = sub_100CAEC6C(a1, 1);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_10217D640);
  v2 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v12 = objc_msgSend(objc_msgSend(v1, "objectForKey:", CFSTR("startTime")), "intValue");
    v13 = 1024;
    v14 = objc_msgSend(objc_msgSend(v1, "objectForKey:", CFSTR("endTime")), "intValue");
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, sending analytics, startTime, %d, endTime, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_10217D640);
    v4 = qword_10229FF18;
    v8[0] = 67109376;
    v8[1] = objc_msgSend(objc_msgSend(v1, "objectForKey:", CFSTR("startTime")), "intValue");
    v9 = 1024;
    v10 = objc_msgSend(objc_msgSend(v1, "objectForKey:", CFSTR("endTime")), "intValue");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 0, "FitnessOutdoorAnalyticsAggregator, sending analytics, startTime, %d, endTime, %d", v8, 14);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFitnessOutdoorAnalyticsAggregator::sendAnalytics() const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100CB016C;
  v7[3] = &unk_102132010;
  v7[4] = v1;
  return AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FitnessOutdoor2"), v7);
}

uint64_t sub_100CB016C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

BOOL sub_100CB0174(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  int v5;
  double v7;

  v2 = *(double *)(a1 + 24);
  v3 = sub_100C28C84(v2);
  v4 = sub_100C28C84(*(double *)(a1 + 32));
  if (v4 < v3)
    v4 = v3 + 24.0;
  if (!*(_BYTE *)(a1 + 521))
    return 1;
  v5 = 2 * ((int)vcvtmd_s64_f64(v2 / 86400.0) % 6);
  if (v3 <= (double)v5 && v4 > (double)v5)
    return 1;
  v7 = (double)(v5 + 12);
  return v4 > v7 && v3 <= v7;
}

void sub_100CB0238(uint64_t a1)
{
  sub_100CB0288(a1);
  operator delete();
}

void sub_100CB025C(id a1)
{
  qword_10229FF18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

uint64_t sub_100CB0288(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_10217D610;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(_QWORD *)(a1 + 456) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 400);
  if (v3)
  {
    *(_QWORD *)(a1 + 408) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 160);
  if (v4)
  {
    *(_QWORD *)(a1 + 168) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
    sub_100CB03C8(a1 + 16, v9);
  return a1;
}

_QWORD *sub_100CB0348(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1002720D4(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100CB03AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CB03C8(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

uint64_t sub_100CB0410()
{
  _DWORD *v0;
  _QWORD *v1;

  qword_102307A58 = 0;
  qword_102307A60 = 0;
  qword_102307A68 = 0;
  v0 = operator new(0x44uLL);
  qword_102307A60 = (uint64_t)(v0 + 17);
  qword_102307A68 = (uint64_t)(v0 + 17);
  v0[16] = 1193033728;
  *(_OWORD *)v0 = xmmword_101C205B0;
  *((_OWORD *)v0 + 1) = unk_101C205C0;
  *((_OWORD *)v0 + 2) = xmmword_101C205D0;
  *((_OWORD *)v0 + 3) = unk_101C205E0;
  qword_102307A58 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102307A58, (void *)&_mh_execute_header);
  qword_102307A78 = 0;
  unk_102307A80 = 0;
  qword_102307A70 = 0;
  v1 = operator new(0x18uLL);
  qword_102307A78 = (uint64_t)(v1 + 3);
  unk_102307A80 = v1 + 3;
  *(_OWORD *)v1 = xmmword_101C205F4;
  v1[2] = 0x4270000041F00000;
  qword_102307A70 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102307A70, (void *)&_mh_execute_header);
}

uint64_t sub_100CB04E0(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a5;
  *(double *)(a1 + 16) = a3;
  *(double *)(a1 + 24) = 1.0 - a3;
  *(double *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  bzero((void *)(a1 + 40), 0x18uLL);
  bzero((void *)(a1 + 64), 0x18uLL);
  bzero((void *)(a1 + 104), 0x18uLL);
  return a1;
}

uint64_t sub_100CB0544(uint64_t a1, float *a2, double *a3, float32x2_t *a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  BOOL v27;
  BOOL v28;
  int v29;
  float32_t v30;

  v6 = *(double *)(a1 + 96);
  v7 = *a2;
  if (v6 <= 0.0)
  {
    v11 = a2[1];
    *(double *)(a1 + 40) = v7;
    *(double *)(a1 + 48) = v11;
    v13 = a2[2];
    *(double *)(a1 + 56) = v13;
    v15 = 0.02;
    v14 = v13;
    v12 = v11;
    v10 = v7;
  }
  else
  {
    v9 = *(double *)(a1 + 16);
    v8 = *(double *)(a1 + 24);
    v10 = v9 * v7 + *(double *)(a1 + 40) * v8;
    v11 = a2[1];
    v12 = v9 * v11 + *(double *)(a1 + 48) * v8;
    *(double *)(a1 + 40) = v10;
    *(double *)(a1 + 48) = v12;
    v13 = a2[2];
    v14 = v9 * v13 + *(double *)(a1 + 56) * v8;
    *(double *)(a1 + 56) = v14;
    v15 = *a3 - v6;
  }
  v16 = *(double *)(a1 + 120);
  v17 = *(double *)(a1 + 112) + v11;
  *(double *)(a1 + 104) = *(double *)(a1 + 104) + v7;
  *(double *)(a1 + 112) = v17;
  *(double *)(a1 + 120) = v16 + v13;
  ++*(_DWORD *)(a1 + 128);
  v18 = (void *)(a1 + 64);
  v19 = *(double *)(a1 + 64) + (v7 - v10) * v15;
  *(double *)(a1 + 64) = v19;
  v20 = *(double *)(a1 + 72) + (v11 - v12) * v15;
  v21 = *(double *)(a1 + 80) + (v13 - v14) * v15;
  *(double *)(a1 + 72) = v20;
  *(double *)(a1 + 80) = v21;
  v22 = *a3;
  *(double *)(a1 + 96) = *a3;
  v23 = *a3 - *(double *)(a1 + 88);
  if (v23 <= *(double *)(a1 + 8) && v22 > 0.0)
    return 0;
  v24 = *(double *)(a1 + 32);
  v25 = fabs(v20);
  v26 = fabs(v21);
  v27 = fabs(v19) <= v24 && v25 <= v24;
  v28 = v27 && v26 <= v24;
  if (v28 && v23 <= *(double *)a1)
    return 0;
  *(double *)(a1 + 88) = *a3;
  bzero(v18, 0x18uLL);
  v29 = *(_DWORD *)(a1 + 128);
  *a4 = vcvt_f32_f64(vdivq_f64(*(float64x2_t *)(a1 + 104), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v29), 0)));
  v30 = *(double *)(a1 + 120) / (double)v29;
  a4[1].f32[0] = v30;
  bzero((void *)(a1 + 104), 0x18uLL);
  *(_DWORD *)(a1 + 128) = 0;
  return 1;
}

id sub_100CB06F4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("StartDND"));
  if (!*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 32) = 1;
    return objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("DNDTriggered"));
  }
  return result;
}

id sub_100CB0758(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("StartDWR"));
  if (!*(_BYTE *)(a1 + 33))
  {
    *(_BYTE *)(a1 + 33) = 1;
    return objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("DWRTriggered"));
  }
  return result;
}

id sub_100CB07BC(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("TransitionDND"));
  if (!*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 32) = 1;
    return objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("DNDTriggered"));
  }
  return result;
}

id sub_100CB0820(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("TransitionDWR"));
  if (!*(_BYTE *)(a1 + 33))
  {
    *(_BYTE *)(a1 + 33) = 1;
    return objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("DWRTriggered"));
  }
  return result;
}

id sub_100CB088C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 24), "removeAllObjects");
}

id sub_100CB0894(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 24), "removeAllObjects");
}

id sub_100CB089C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 24), "removeAllObjects");
}

uint64_t sub_100CB08A4(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_10217D660;
  *(_QWORD *)(a1 + 8) = 9;
  *(_WORD *)(a1 + 16) = 512;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = objc_opt_new(NSMutableDictionary);
  return a1;
}

uint64_t sub_100CB08F0(uint64_t a1)
{

  return a1;
}

id sub_100CB091C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend(*(id *)(a1 + 24), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a4), CFSTR("VehicularHints"));
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2), CFSTR("StateSourcesVehicle"));
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3), CFSTR("StateSourcesOperator"));
  return objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3 + 10 * a2), CFSTR("StateSourcesCompounded"));
}

id sub_100CB09E4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 24), "count");
  if (result)
    return *(id *)(a1 + 24);
  return result;
}

id sub_100CB0A10(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("EndDND"));
  if (*(_BYTE *)(a1 + 33) || *(_BYTE *)(a1 + 32))
  {
    *(_WORD *)(a1 + 32) = 0;
    return objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("DNDDWRCleared"));
  }
  return result;
}

id sub_100CB0A78(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("EndDWR"));
  if (*(_BYTE *)(a1 + 33) || *(_BYTE *)(a1 + 32))
  {
    *(_WORD *)(a1 + 32) = 0;
    return objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", &off_10221BF00, CFSTR("DNDDWRCleared"));
  }
  return result;
}

uint64_t sub_100CB0AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  int v9;
  char v11;
  char v12;
  char v13;

  sub_100CB091C(a1, a2, a3, a4);
  if (a2 != 2 || (a3 & 0xFFFFFFFFFFFFFFFDLL) != 0)
  {
    if (a2 == 2 && a3 == 1)
    {
      v7 = &v12;
      v8 = a1;
      v9 = 2;
    }
    else
    {
      v7 = &v11;
      v8 = a1;
      v9 = 3;
    }
  }
  else
  {
    v7 = &v13;
    v8 = a1;
    v9 = 1;
  }
  return sub_10023195C(v8, v9, (uint64_t)v7);
}

void sub_100CB0C0C(id a1)
{
  qword_102307AA0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCoarseCellTilesManagerSilo"));
}

uint64_t sub_100CB0CC0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100CB2FB0;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102307AB0 != -1)
    dispatch_once(&qword_102307AB0, block);
  return qword_102311418;
}

BOOL sub_100CB1038(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  NSObject *v18;
  unsigned int v19;
  const char *v20;
  _BYTE *v21;
  int v22;
  int v23;
  NSObject *v24;
  uint64_t v26;
  unsigned int v27;
  const char *v28;
  void **v29;
  int v30;
  char *v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  void *v35[2];
  char v36;
  __int128 v37;
  uint64_t v38;
  std::string __p;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  unsigned int v43;
  _BYTE v44[28];
  __int16 v45;
  _BYTE v46[10];
  void **v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  uint8_t buf[4];
  _BYTE v53[24];
  __int16 v54;
  _BYTE v55[10];
  _BYTE *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;

  v43 = a2;
  sub_1000C1928((uint64_t)&v40, &v43);
  std::string::assign(&v42, "");
  v11 = sub_1001CDE58(v40, (_QWORD *)(a1 + 216));
  sub_1001CB024((uint64_t)&v40, a3, a4, a5, *(double *)(v11 + 152), *(double *)(v11 + 160));
  v12 = sub_1001C8DA8((unsigned int *)&v40);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 176);
    v37 = v40;
    v38 = v41;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&__p, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    else
      __p = v42;
    v17 = sub_1001CB2A4(v13, (uint64_t)&v37, a6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v19 = v43;
      v20 = sub_1001CC818(v43);
      sub_100BCC240((unsigned int *)&v40, v44);
      v21 = v44[23] >= 0 ? v44 : *(_BYTE **)v44;
      v22 = *(_DWORD *)(a1 + 148);
      *(_DWORD *)buf = 67241731;
      *(_DWORD *)v53 = v19;
      *(_WORD *)&v53[4] = 2082;
      *(_QWORD *)&v53[6] = v20;
      *(_WORD *)&v53[14] = 2049;
      *(double *)&v53[16] = a4;
      v54 = 2049;
      *(double *)v55 = a5;
      *(_WORD *)&v55[8] = 2081;
      v56 = v21;
      v57 = 1026;
      v58 = v17;
      v59 = 1026;
      v60 = v22;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, updated, %{public}d, reachbility, %{public}d", buf, 0x3Cu);
      if ((v44[23] & 0x80000000) != 0)
        operator delete(*(void **)v44);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v26 = qword_1022A0048;
      v27 = v43;
      v28 = sub_1001CC818(v43);
      sub_100BCC240((unsigned int *)&v40, v35);
      if (v36 >= 0)
        v29 = v35;
      else
        v29 = (void **)v35[0];
      v30 = *(_DWORD *)(a1 + 148);
      *(_DWORD *)v44 = 67241731;
      *(_DWORD *)&v44[4] = v27;
      *(_WORD *)&v44[8] = 2082;
      *(_QWORD *)&v44[10] = v28;
      *(_WORD *)&v44[18] = 2049;
      *(double *)&v44[20] = a4;
      v45 = 2049;
      *(double *)v46 = a5;
      *(_WORD *)&v46[8] = 2081;
      v47 = v29;
      v48 = 1026;
      v49 = v17;
      v50 = 1026;
      v51 = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, updated, %{public}d, reachbility, %{public}d", v44, 60);
      v32 = v31;
      if (v36 < 0)
        operator delete(v35[0]);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v32);
      if (v32 != (char *)buf)
        free(v32);
    }
    if (!v17)
      goto LABEL_30;
    v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 40))(*(_QWORD *)(a1 + 168));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v24 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v53 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@TileSched, coarsecell, set, %{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_30;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    *(_DWORD *)v44 = 67240192;
    *(_DWORD *)&v44[4] = v23;
    LODWORD(v34) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, coarsecell, set, %{public}d", v44, v34);
    v16 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v33);
LABEL_45:
    if (v16 != buf)
      free(v16);
    goto LABEL_30;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134284545;
    *(double *)v53 = a4;
    *(_WORD *)&v53[8] = 2049;
    *(double *)&v53[10] = a5;
    *(_WORD *)&v53[18] = 1024;
    *(_DWORD *)&v53[20] = v40;
    v54 = 1024;
    *(_DWORD *)v55 = DWORD1(v40);
    *(_WORD *)&v55[4] = 1024;
    *(_DWORD *)&v55[6] = DWORD2(v40);
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    *(_DWORD *)v44 = 134284545;
    *(double *)&v44[4] = a4;
    *(_WORD *)&v44[12] = 2049;
    *(double *)&v44[14] = a5;
    *(_WORD *)&v44[22] = 1024;
    *(_DWORD *)&v44[24] = v40;
    v45 = 1024;
    *(_DWORD *)v46 = DWORD1(v40);
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = DWORD2(v40);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", v44, 40);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v15);
    goto LABEL_45;
  }
LABEL_30:
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  return v12;
}

void sub_100CB16E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100CB1748(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  int v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  _DWORD v33[4];
  __int128 buf;

  v7 = sub_100CB1FEC(a1, "CLCoarseCellTilesManager", a2);
  *(_QWORD *)v7 = off_10217D768;
  *(_QWORD *)(v7 + 112) = off_10217D850;
  *(_QWORD *)(v7 + 120) = 0;
  *(_QWORD *)(v7 + 136) = 0x415EA6E000000000;
  v8 = (uint64_t *)(v7 + 136);
  *(_WORD *)(v7 + 128) = 1;
  *(_DWORD *)(v7 + 148) = 0;
  *(_WORD *)(v7 + 152) = 0;
  *(_DWORD *)(v7 + 160) = 2;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(v7 + 168) = v9;
  *(_QWORD *)(v7 + 176) = 0;
  sub_10108270C((_QWORD *)(v7 + 184));
  sub_100F5A35C((_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 40));
  sub_101245358(a1 + 216);
  *(_BYTE *)(a1 + 240) = 0;
  sub_1001E4804(&buf);
  sub_1001FD98C(buf, "AncientTilesThreshold", v8);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
  v13 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v14 = *v8;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TILE: fMaxTileDataAge, %.1lf", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v25 = *v8;
    v33[0] = 134217984;
    *(_QWORD *)&v33[1] = v25;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: fMaxTileDataAge, %.1lf", COERCE_DOUBLE(v33));
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "CLCoarseCellTilesManager::CLCoarseCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICoarseCellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v26);
    if (v27 != (char *)&buf)
      free(v27);
  }
  *(_BYTE *)(a1 + 144) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168));
  v15 = (unsigned __int8 *)(a1 + 144);
  sub_1001E4804(&buf);
  sub_1001E4874(buf, "CellTilesActive", (BOOL *)(a1 + 144));
  v16 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v19 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v20 = *v15;
    LODWORD(buf) = 67240192;
    DWORD1(buf) = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TileCoarse, isActive, %{public}d", (uint8_t *)&buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v28 = *v15;
    v33[0] = 67240192;
    v33[1] = v28;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCoarse, isActive, %{public}d", v33, 8);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "CLCoarseCellTilesManager::CLCoarseCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICoarseCellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v29);
    if (v30 != (char *)&buf)
      free(v30);
  }
  if (*(_BYTE *)(a4 + 24))
  {
    sub_10124535C((__int128 *)(a1 + 216), (__int128 *)a4);
    sub_1001E4804(&buf);
    sub_1001FD98C(buf, "MTimeModificationPeriod", &qword_1022FDCC8);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v24 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = qword_1022FDCC8;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TILE: MTimeModificationPeriod, %.1lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v33[0] = 134217984;
      *(_QWORD *)&v33[1] = qword_1022FDCC8;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: MTimeModificationPeriod, %.1lf", COERCE_DOUBLE(v33));
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "CLCoarseCellTilesManager::CLCoarseCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICoarseCellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v31);
      if (v32 != (char *)&buf)
        free(v32);
    }
    if (_os_feature_enabled_impl("CoreLocation", "TilesService"))
      operator new();
    operator new();
  }
  sub_100CB2088((uint64_t)&buf);
}

void sub_100CB1EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a3);
  sub_100CBD658((void ***)va);
  nullsub_1409(v5);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    sub_100CBD6F8((uint64_t)v4, v7);
  v8 = *(_QWORD *)(v3 + 168);
  *(_QWORD *)(v3 + 168) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_100CB2D8C(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100CB1FEC(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10217DA30;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100CB206C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100CB2088(uint64_t a1@<X8>)
{
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  std::string *p_dst;
  std::string::size_type size;
  _BYTE *v9;
  std::string *v10;
  std::string::size_type v11;
  void **v12;
  std::string *v13;
  std::string::size_type v14;
  void **v15;
  std::string *v16;
  std::string::size_type v17;
  void **v18;
  std::string *v19;
  const char *v20;
  int v21;
  NSObject *v22;
  uint64_t *v23;
  std::string *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  const char *v29;
  char *v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  std::string __dst;
  _DWORD __p[3];
  __int16 v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  _BOOL4 v43;
  char v44;
  _BYTE buf[18];

  sub_100CB301C();
  if (byte_102307AE0[23] < 0)
    sub_100115CE4(&__dst, *(void **)byte_102307AE0, *(unint64_t *)&byte_102307AE0[8]);
  else
    __dst = *(std::string *)byte_102307AE0;
  sub_1001E4804(buf);
  v2 = sub_1000BCB64(*(uint64_t *)buf, "CellTilesServerUrl", &__dst);
  v3 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    p_dst = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = p_dst;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: fDefaultCellTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v24 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)v41 = 136380931;
    *(_QWORD *)&v41[4] = v24;
    v42 = 1026;
    v43 = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: fDefaultCellTilesServerUrl, %{private}s, overridden, %{public}d", v41, 18);
    v26 = (char *)v25;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLCoarseCellTilesManager::initializeProductionTilesSetCollection()", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v9 = v41;
  sub_100259584((uint64_t)v41, size + 5);
  if (v44 < 0)
    v9 = *(_BYTE **)v41;
  if (size)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &__dst;
    else
      v10 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v9, v10, size);
  }
  strcpy(&v9[size], "/6/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v11 = __dst.__r_.__value_.__l.__size_;
  v12 = v35;
  sub_100259584((uint64_t)v35, v11 + 5);
  if (v36 < 0)
    v12 = (void **)v35[0];
  if (v11)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &__dst;
    else
      v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "/7/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v14 = __dst.__r_.__value_.__l.__size_;
  v15 = v33;
  sub_100259584((uint64_t)v33, v14 + 5);
  if (v34 < 0)
    v15 = (void **)v33[0];
  if (v14)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__dst;
    else
      v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "/8/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v17 = __dst.__r_.__value_.__l.__size_;
  v18 = v31;
  sub_100259584((uint64_t)v31, v17 + 6);
  if (v32 < 0)
    v18 = (void **)v31[0];
  if (v17)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__dst;
    else
      v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, "/11/v1");
  sub_101245358(a1);
  sub_100CB30B0();
  if (byte_102307ACF >= 0)
    v20 = (const char *)&qword_102307AB8;
  else
    v20 = (const char *)qword_102307AB8;
  v21 = mkdir(v20, 0x1C0u);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
  v22 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100CB30B0();
    if (byte_102307ACF >= 0)
      v23 = &qword_102307AB8;
    else
      v23 = (uint64_t *)qword_102307AB8;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v21;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: mkdir, %s, ret, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v27 = qword_1022A02D8;
    sub_100CB30B0();
    if (byte_102307ACF >= 0)
      v28 = &qword_102307AB8;
    else
      v28 = (uint64_t *)qword_102307AB8;
    __p[0] = 136315394;
    *(_QWORD *)&__p[1] = v28;
    v39 = 1024;
    v40 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "TILE: mkdir, %s, ret, %d", (const char *)__p, 18);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLCoarseCellTilesManager::initializeProductionTilesSetCollection()", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  operator new();
}

void sub_100CB2BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54)
{
  sub_100CB3144(&a17, 0);
  sub_100CBD658((void ***)&a54);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a52 < 0)
    operator delete(a47);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

id sub_100CB2D2C(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[7];
  char v6;

  v3 = *(void **)(a3 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100CB704C;
  v5[3] = &unk_1021528C0;
  v6 = a2;
  v5[4] = a3;
  v5[5] = a1;
  v5[6] = a3;
  return objc_msgSend(v3, "async:", v5);
}

uint64_t sub_100CB2D8C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217DA30;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100CB2E00()
{
  sub_100427E74();
}

void sub_100CB2E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v13;

  if (a12)
  {
    *(_QWORD *)(v13 - 24) = &a9;
    sub_100CBD658((void ***)(v13 - 24));
  }
  sub_101924D98(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100CB2EB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = off_10217D768;
  *(_QWORD *)(a1 + 112) = off_10217D850;
  sub_100CB3180(a1);
  v6 = (void **)(a1 + 216);
  sub_100CBD658(&v6);
  nullsub_1409(a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v2)
    sub_100CBD6F8(a1 + 176, v2);
  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_100CB2D8C(a1);
}

uint64_t sub_100CB2F5C(uint64_t a1)
{
  return sub_100CB2EB4(a1 - 112);
}

void sub_100CB2F64(uint64_t a1)
{
  sub_100CB2EB4(a1);
  operator delete();
}

void sub_100CB2F88(uint64_t a1)
{
  sub_100CB2EB4(a1 - 112);
  operator delete();
}

void sub_100CB2FB0()
{
  operator new();
}

void sub_100CB2FF8()
{
  operator delete();
}

__int128 *sub_100CB301C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102307AF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102307AF8))
  {
    xmmword_102307AE0 = 0uLL;
    unk_102307AF0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102307AE0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102307AF8);
  }
  if (qword_102307B00 != -1)
    dispatch_once(&qword_102307B00, &stru_10217D8C8);
  return &xmmword_102307AE0;
}

uint64_t *sub_100CB30B0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102307AD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102307AD0))
  {
    qword_102307AB8 = 0;
    qword_102307AC0 = 0;
    unk_102307AC8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307AB8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102307AD0);
  }
  if (qword_102307AD8 != -1)
    dispatch_once(&qword_102307AD8, &stru_10217D8A8);
  return &qword_102307AB8;
}

uint64_t sub_100CB3144(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100CBD748(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100CB3180(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: CLCoarseCellTilesManager::shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: CLCoarseCellTilesManager::shutdown", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCoarseCellTilesManager::shutdown()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10107AC18(*(_QWORD *)(a1 + 176));
  result = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100CB3330(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  double v11;
  int v12;
  char v13;
  int v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  _QWORD v18[2];
  uint8_t buf[4];
  int v20;
  __int16 v21;
  _BOOL4 v22;

  if (*a3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67240192;
      v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TileCoarse, unexpected, dataprotection, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v7 = *a3;
      LODWORD(v18[0]) = 67240192;
      HIDWORD(v18[0]) = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCoarse, unexpected, dataprotection, %{public}d", v18, 8, v18[0], v18[1]);
LABEL_22:
      v17 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v8);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    v11 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
    v12 = *(unsigned __int8 *)(a1 + 128);
    v13 = *a4 != 1;
    *(_BYTE *)(a1 + 128) = v13;
    sub_10107BAF4(*(_QWORD *)(a1 + 176), v13);
    if (*(_BYTE *)(a1 + 128))
    {
      v14 = 1;
    }
    else
    {
      sub_100CB3684(a1, v11);
      v14 = *(unsigned __int8 *)(a1 + 128);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)buf = 67109376;
      v20 = v16;
      v21 = 1024;
      v22 = v12 != v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TileCoarse, kNotificationEncryptedDataAvailability, %d, changed, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCoarse, kNotificationEncryptedDataAvailability, %d, changed, %d", v18);
      goto LABEL_22;
    }
  }
}

void sub_100CB3684(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[6];
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)buf = 67240192;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileCoarse, listAvailableFilesAllTypes, indexed, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v8 = *(unsigned __int8 *)(a1 + 129);
    v17[0] = 67240192;
    v17[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCoarse, listAvailableFilesAllTypes, indexed, %{public}d", v17, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!*(_BYTE *)(a1 + 129))
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100CB5370;
    v16[3] = &unk_102154608;
    v16[4] = a1;
    *(double *)&v16[5] = a2;
    sub_100CB50F8(a1, (uint64_t)"indexTiles", (uint64_t)v16);
    *(_BYTE *)(a1 + 129) = 1;
    if (*(_BYTE *)(a1 + 240))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCoarse, clear on index", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        LOWORD(v17[0]) = 0;
        LODWORD(v15) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, clear on index", v17, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      sub_100CB4464(a1);
      *(_BYTE *)(a1 + 240) = 0;
    }
    else
    {
      sub_100CB5078(a1, a2);
    }
    sub_100CB46B4(a1, a2);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileCoarse, listAvailableFilesAllTypes, done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      LOWORD(v17[0]) = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCoarse, listAvailableFilesAllTypes, done", v17, v15);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_100CB3B18(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;

  if (*a3 == 6)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v8 = *a4;
      v7 = a4[1];
      *(_DWORD *)buf = 67240448;
      v25 = v7;
      v26 = 1026;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCoarse, kNotificationReachability, %{public}d, was, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v14 = *a4;
      v13 = a4[1];
      v20 = 67240448;
      v21 = v13;
      v22 = 1026;
      v23 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, kNotificationReachability, %{public}d, was, %{public}d", &v20, 14);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v9 = a4[1];
    *(_DWORD *)(a1 + 148) = v9;
    sub_10107B90C(*(_QWORD *)(a1 + 176), v9);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a3;
      *(_DWORD *)buf = 67240192;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TileCoarse, unexpected, status, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v17 = *a3;
      v20 = 67240192;
      v21 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCoarse, unexpected, status, %{public}d", &v20, 8);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

void sub_100CB3E50(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  double v7;
  int v8;
  double v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  int v27;
  uint8_t buf[4];
  int v29;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
  v8 = *a3;
  if (*a3 == 6)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TileCoarse, #CacheDelete kNotificationSoftwareUpdateStorageRecovery", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCoarse, #CacheDelete kNotificationSoftwareUpdateStorageRecovery", &v26, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    v9 = v7;
    if (v8 != 4)
    {
      if (v8)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v16 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *a3;
          *(_DWORD *)buf = 67240192;
          v29 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "TileCoarse, unexpected, status, %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217D9C0);
          v23 = *a3;
          v26 = 67240192;
          v27 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCoarse, unexpected, status, %{public}d", &v26, 8);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v10 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "TileCoarse, kNotificationReset", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217D9C0);
          LOWORD(v26) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, kNotificationReset", &v26, 2);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        sub_100CB4464(a1);
        sub_100CB46B4(a1, v9);
        if (!*(_BYTE *)(a1 + 129))
          *(_BYTE *)(a1 + 240) = 1;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 48))(*(_QWORD *)(a1 + 168));
      }
      return;
    }
    *(_BYTE *)(a1 + 152) = *(_DWORD *)(a4 + 188) == 1;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v15 = *(unsigned __int8 *)(a1 + 152);
      *(_DWORD *)buf = 67240192;
      v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "TileCoarse, kNotificationLocationServicesStatus, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v20 = *(unsigned __int8 *)(a1 + 152);
      v26 = 67240192;
      v27 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, kNotificationLocationServicesStatus, %{public}d", &v26, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (*(_BYTE *)(a1 + 152))
    {
      sub_100CB46B4(a1, v9);
      return;
    }
  }
  sub_100CB4464(a1);
  if (!*(_BYTE *)(a1 + 129))
    *(_BYTE *)(a1 + 240) = 1;
}

id *sub_100CB4464(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[5];
  id v8[2];
  int v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;

  sub_100131938(v8, (uint64_t)"clearLocationInformationCoarseCell", 0);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    v12 = "clearLocationInformationCoarseCell";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileCoarse, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v9 = 136446210;
    v10 = "clearLocationInformationCoarseCell";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileCoarse, %{public}s", &v9, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::clearLocationInformation()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  sub_10107AC18(*(_QWORD *)(a1 + 176));
  sub_100F5A36C(a1 + 192);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100CB9D80;
  v7[3] = &unk_10214C498;
  v7[4] = a1;
  sub_100CB50F8(a1, (uint64_t)"clearLocationInformationCoarseCell", (uint64_t)v7);
  return sub_100131740(v8);
}

void sub_100CB4694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_100CB46B4(uint64_t a1, double a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (*(_BYTE *)(a1 + 129) && *(_BYTE *)(a1 + 144))
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100CB702C;
    v10[3] = &unk_102154608;
    v10[4] = a1;
    *(double *)&v10[5] = a2;
    sub_100CB50F8(a1, (uint64_t)"predownloadTiles (Coarse)", (uint64_t)v10);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v4 = *(unsigned __int8 *)(a1 + 129);
      v5 = *(unsigned __int8 *)(a1 + 144);
      *(_DWORD *)buf = 67240448;
      v15 = v4;
      v16 = 1026;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "TileCoarse, skip predownload, fIndexedAvailableFiles, %{public}d, fIsActive, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v6 = *(unsigned __int8 *)(a1 + 129);
      v7 = *(unsigned __int8 *)(a1 + 144);
      v11[0] = 67240448;
      v11[1] = v6;
      v12 = 1026;
      v13 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, skip predownload, fIndexedAvailableFiles, %{public}d, fIsActive, %{public}d", v11, 14);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::predownloadTiles(CFAbsoluteTime)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_100CB48E0(uint64_t a1, uint64_t a2, int *a3, char *a4)
{
  double v6;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (*a3 == 5)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 24))(*(_QWORD *)(a1 + 168)))
    {
      v6 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
      *(_BYTE *)(a1 + 153) = *a4;
      sub_10107BABC(*(_QWORD *)(a1 + 176), *a4);
      if (*(_BYTE *)(a1 + 153))
        sub_100CB4B2C(a1, v6);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *a3;
      *(_DWORD *)buf = 67240192;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "TileCoarse, unexpected, companion, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v10 = *a3;
      v13[0] = 67240192;
      v13[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCoarse, unexpected, companion, %{public}d", v13, 8);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

BOOL sub_100CB4B2C(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v11;
  NSObject *v12;
  const char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 buf;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 152) && sub_1010784C0(*(_QWORD *)(a1 + 176)))
  {
    LODWORD(v34) = 13;
    sub_1000C1928((uint64_t)&buf, &v34);
    v4 = *(_QWORD *)(a1 + 176);
    v5 = *(_QWORD *)(a1 + 120);
    v16 = 0xFFFF;
    v17 = 0;
    v18 = 0;
    v19 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    v20 = _Q0;
    v21 = _Q0;
    v22 = _Q0;
    v23 = 0;
    v26 = 0;
    v24 = 0xBFF0000000000000;
    v25 = 0;
    v27 = 0;
    v28 = 0xBFF0000000000000;
    v29 = 0x7FFFFFFF;
    v31 = 0;
    v30 = 0;
    v33 = 0;
    v32 = 0;
    sub_10107881C(v4, v5, (uint64_t)&v16, (uint64_t)&v34, a2);
    buf = v34;
    v39 = v35;
    if (SHIBYTE(v41) < 0)
      operator delete((void *)v40);
    v40 = v36;
    v41 = v37;
    v11 = sub_1001C8DA8((unsigned int *)&buf);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)v40);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "@TileDl, coarse, failed criteria", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileDl, coarse, failed criteria", &v34, 2);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v14);
      if (v15 != (char *)&buf)
        free(v15);
    }
    return 0;
  }
  return v11;
}

void sub_100CB4DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a45 < 0)
    operator delete(*(void **)(v45 + 72));
  _Unwind_Resume(exception_object);
}

id sub_100CB4DE8(uint64_t a1)
{
  NSObject *v2;
  double v3;
  void *v4;
  const char *v6;
  uint8_t *v7;
  _QWORD v8[6];
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "TileCoarse, Cleanup", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, Cleanup", v9, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onCleanupAgedTiles()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
  v4 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100CB4FC8;
  v8[3] = &unk_102143528;
  v8[4] = a1;
  *(double *)&v8[5] = v3;
  return objc_msgSend(v4, "async:", v8);
}

void sub_100CB4FC8(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_100CB5078(v1, *(double *)(a1 + 40));
  v2 = _NSConcreteStackBlock;
  v3 = 3221225472;
  v4 = sub_100CBB06C;
  v5 = &unk_10214C498;
  v6 = v1;
  sub_100CB50F8(v1, (uint64_t)"updateTileRelevancy", (uint64_t)&v2);
  v2 = _NSConcreteStackBlock;
  v3 = 3221225472;
  v4 = sub_100CB8774;
  v5 = &unk_10214C498;
  v6 = v1;
  sub_100CB50F8(v1, (uint64_t)"refreshTilesDataIfNeeded", (uint64_t)&v2);
}

uint64_t *sub_100CB5078(uint64_t a1, double a2)
{
  _QWORD v5[6];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100CB9EC8;
  v5[3] = &unk_102154608;
  v5[4] = a1;
  *(double *)&v5[5] = a2;
  sub_100CB50F8(a1, (uint64_t)"deleteAgedTiles", (uint64_t)v5);
  return sub_10107A080(*(_QWORD *)(a1 + 176), a2);
}

void sub_100CB50F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  _QWORD *v7;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  CLOSTransaction *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v16 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLCoarseCellTilesManager::traverseAllTilesSets");
  v6 = 0;
  v7 = (_QWORD *)(a1 + 216);
  while (v6 - 6 < 3 || v6 == 12)
  {
    v9 = sub_1001CDE58(v6, v7);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = v9 + 8;
      if (*(char *)(v9 + 31) < 0)
        v11 = *(_QWORD *)(v9 + 8);
      *(_DWORD *)buf = 136315394;
      v22 = a2;
      v23 = 2080;
      v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: performing, sAction, %s, tilesSet, %s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v12 = v9 + 8;
      if (*(char *)(v9 + 31) < 0)
        v12 = *(_QWORD *)(v9 + 8);
      v17 = 136315394;
      v18 = a2;
      v19 = 2080;
      v20 = v12;
      LODWORD(v15) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: performing, sAction, %s, tilesSet, %s", (const char *)&v17, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v9);
LABEL_16:
    ++v6;
  }
  if (v6 != 13)
    goto LABEL_16;

}

BOOL sub_100CB5370(uint64_t a1, uint64_t a2)
{
  return sub_100CB5380(*(_QWORD *)(a1 + 32), a2, *(double *)(a1 + 40));
}

BOOL sub_100CB5380(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  const char *v8;
  DIR *v9;
  dirent *v10;
  int v11;
  size_t v12;
  std::string *p_buf;
  const void *v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  NSObject *v19;
  void **v20;
  int d_type;
  NSObject *v22;
  void **v23;
  void **v24;
  void **v25;
  int v26;
  NSObject *v27;
  void **v28;
  void **v29;
  const char *v30;
  std::string *v31;
  NSObject *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  NSObject *v37;
  const char *v38;
  double v39;
  double v40;
  uint64_t v41;
  void **v42;
  int v43;
  const char *v44;
  std::string *v45;
  void **v46;
  const char *v47;
  std::string *v48;
  void **v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  double v53;
  double v54;
  uint64_t v55;
  const char *v56;
  std::string *v57;
  NSObject *v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  std::string *v71;
  NSObject *v72;
  uint64_t v74;
  __darwin_ino64_t v75;
  const char *v76;
  std::string *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  void *__p[2];
  int64_t v83;
  void *__dst[2];
  unsigned __int8 v85;
  int v86;
  const char *v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  uint64_t v93;
  _BYTE v94[24];
  __int128 v95;
  uint64_t v96;
  stat v97;
  std::string buf;
  double v99;
  __int16 v100;
  uint64_t v101;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a2 + 32);
    if (*(char *)(a2 + 55) >= 0)
      v6 = a2 + 32;
    v7 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v7 = *(_QWORD *)(a2 + 8);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TileCoarse, indexTiles, rootDirectory, %{public}s, name, %{public}s", (uint8_t *)&buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v74 = *(_QWORD *)(a2 + 32);
    if (*(char *)(a2 + 55) >= 0)
      v74 = a2 + 32;
    v75 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v75 = *(_QWORD *)(a2 + 8);
    v97.st_dev = 136446466;
    *(_QWORD *)&v97.st_mode = v74;
    WORD2(v97.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&v97.st_ino + 6) = v75;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, indexTiles, rootDirectory, %{public}s, name, %{public}s", &v97, 22);
    v77 = (std::string *)v76;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v76);
    if (v77 != &buf)
      free(v77);
  }
  if (*(char *)(a2 + 55) >= 0)
    v8 = (const char *)(a2 + 32);
  else
    v8 = *(const char **)(a2 + 32);
  v9 = opendir(v8);
  sub_100CB6368(a1, 0, *(_DWORD *)(a2 + 4));
  if (!v9)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v72 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "TileCoarse, indexTiles, can't open dir, %{public}s, #CloneMe", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return v9 != 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v97.st_dev = 136446210;
    *(_QWORD *)&v97.st_mode = v8;
    LODWORD(v79) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileCoarse, indexTiles, can't open dir, %{public}s, #CloneMe", &v97, v79);
    v71 = (std::string *)v78;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v78);
    if (v71 == &buf)
      return v9 != 0;
LABEL_149:
    free(v71);
    return v9 != 0;
  }
  v10 = readdir(v9);
  if (v10)
  {
    v11 = 0;
    v80 = a2 + 184;
    while (1)
    {
      sub_10035ACF4(__dst, v10->d_name, v10->d_namlen);
      if (*(char *)(a2 + 55) >= 0)
        v12 = *(unsigned __int8 *)(a2 + 55);
      else
        v12 = *(_QWORD *)(a2 + 40);
      sub_100259584((uint64_t)&buf, v12 + 1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if (*(char *)(a2 + 55) >= 0)
          v14 = (const void *)(a2 + 32);
        else
          v14 = *(const void **)(a2 + 32);
        memmove(p_buf, v14, v12);
      }
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v12) = 47;
      if ((v85 & 0x80u) == 0)
        v15 = __dst;
      else
        v15 = (void **)__dst[0];
      if ((v85 & 0x80u) == 0)
        v16 = v85;
      else
        v16 = (std::string::size_type)__dst[1];
      v17 = std::string::append(&buf, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v83 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v19 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v20 = __p;
        if (v83 < 0)
          v20 = (void **)__p[0];
        d_type = v10->d_type;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = d_type;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "TileCoarse, indexTiles, absoluteFilename, '%{public}s', d_type, %{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v42 = __p;
        if (v83 < 0)
          v42 = (void **)__p[0];
        v43 = v10->d_type;
        v97.st_dev = 136446466;
        *(_QWORD *)&v97.st_mode = v42;
        WORD2(v97.st_ino) = 1026;
        *(_DWORD *)((char *)&v97.st_ino + 6) = v43;
        LODWORD(v79) = 18;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, indexTiles, absoluteFilename, '%{public}s', d_type, %{public}d", &v97, v79);
        v45 = (std::string *)v44;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v44);
        if (v45 != &buf)
          free(v45);
      }
      if (v10->d_type != 8)
        goto LABEL_77;
      if (!sub_1011920B4((uint64_t)__dst, (const void **)(a2 + 32)))
        break;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      ++v11;
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v23 = __p;
        if (v83 < 0)
          v23 = (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "TileCoarse, convert to class C, first unlock, %{public}s, files, %{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v46 = __p;
        if (v83 < 0)
          v46 = (void **)__p[0];
        v97.st_dev = 136446466;
        *(_QWORD *)&v97.st_mode = v46;
        WORD2(v97.st_ino) = 1026;
        *(_DWORD *)((char *)&v97.st_ino + 6) = v11;
        LODWORD(v79) = 18;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, convert to class C, first unlock, %{public}s, files, %{public}d", &v97, v79);
        v48 = (std::string *)v47;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v47);
        if (v48 != &buf)
          free(v48);
      }
      if (v83 >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      sub_100FA7578((const char *)v24);
      if (v83 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      v26 = stat((const char *)v25, &v97);
      if (!v26)
      {
        if (sub_100CB6A50(a1, *(_DWORD *)(a2 + 4), (char *)(a2 + 32), (std::string::value_type *)__dst, a3))
        {
          v35 = v34;
          *(_OWORD *)v94 = *(_OWORD *)(v34 + 48);
          *(_QWORD *)&v94[16] = *(_QWORD *)(v34 + 64);
          if (*(char *)(v34 + 95) < 0)
          {
            sub_100115CE4(&v95, *(void **)(v34 + 72), *(_QWORD *)(v34 + 80));
          }
          else
          {
            v95 = *(_OWORD *)(v34 + 72);
            v96 = *(_QWORD *)(v34 + 88);
          }
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217D9C0);
          v36 = (unsigned int *)(v35 + 48);
          v37 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v38 = sub_1001CC818(*v36);
            v39 = sub_1001C087C((uint64_t)v94);
            v40 = sub_1001C0858((uint64_t)v94);
            v41 = sub_100026CC8(v80);
            LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
            *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v39;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
            v99 = v40;
            v100 = 2050;
            v101 = v41;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, index, size, %{public}lu", (uint8_t *)&buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10217D9C0);
            v51 = qword_1022A0048;
            v52 = sub_1001CC818(*v36);
            v53 = sub_1001C087C((uint64_t)v94);
            v54 = sub_1001C0858((uint64_t)v94);
            v55 = sub_100026CC8(v80);
            v86 = 136446979;
            v87 = v52;
            v88 = 2049;
            v89 = v53;
            v90 = 2049;
            v91 = v54;
            v92 = 2050;
            v93 = v55;
            LODWORD(v79) = 42;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v51, 0, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, index, size, %{public}lu", &v86, v79);
            v57 = (std::string *)v56;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v56);
            if (v57 != &buf)
              free(v57);
          }
          if (SHIBYTE(v96) < 0)
            operator delete((void *)v95);
        }
        goto LABEL_77;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v27 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v28 = __dst;
        if ((v85 & 0x80u) != 0)
          v28 = (void **)__dst[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "TileCoarse, indexTiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", (uint8_t *)&buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v29 = __dst;
        if ((v85 & 0x80u) != 0)
          v29 = (void **)__dst[0];
        *(_DWORD *)v94 = 136446466;
        *(_QWORD *)&v94[4] = v29;
        *(_WORD *)&v94[12] = 1026;
        *(_DWORD *)&v94[14] = v26;
        LODWORD(v79) = 18;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileCoarse, indexTiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", v94, v79);
        v31 = (std::string *)v30;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v30);
LABEL_111:
        if (v31 != &buf)
          free(v31);
      }
LABEL_77:
      if (SHIBYTE(v83) < 0)
        operator delete(__p[0]);
      if ((char)v85 < 0)
        operator delete(__dst[0]);
      v10 = readdir(v9);
      if (!v10)
        goto LABEL_117;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v32 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v33 = __dst;
      if ((v85 & 0x80u) != 0)
        v33 = (void **)__dst[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "TileCoarse, indexTiles, invalid filename  %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_77;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v49 = __dst;
    if ((v85 & 0x80u) != 0)
      v49 = (void **)__dst[0];
    v97.st_dev = 136446210;
    *(_QWORD *)&v97.st_mode = v49;
    LODWORD(v79) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileCoarse, indexTiles, invalid filename  %{public}s", &v97, v79);
    v31 = (std::string *)v50;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v50);
    goto LABEL_111;
  }
LABEL_117:
  closedir(v9);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v58 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 31) >= 0)
      v59 = a2 + 8;
    else
      v59 = *(_QWORD *)(a2 + 8);
    v60 = sub_100026CC8(a2 + 184);
    v61 = sub_1008B97D0(a2 + 184);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v59;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v60;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
    v99 = *(double *)&v61;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "TileCoarse, indexTiles, done, %{public}s, size, %{public}lu, unprotected, %{public}lu", (uint8_t *)&buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v62 = qword_1022A0048;
    v65 = *(_QWORD *)(a2 + 8);
    v64 = a2 + 8;
    v63 = v65;
    v66 = *(char *)(v64 + 23) >= 0 ? v64 : v63;
    v67 = v64 + 176;
    v68 = sub_100026CC8(v64 + 176);
    v69 = sub_1008B97D0(v67);
    v97.st_dev = 136446722;
    *(_QWORD *)&v97.st_mode = v66;
    WORD2(v97.st_ino) = 2050;
    *(__darwin_ino64_t *)((char *)&v97.st_ino + 6) = v68;
    HIWORD(v97.st_gid) = 2050;
    *(_QWORD *)&v97.st_rdev = v69;
    LODWORD(v79) = 32;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v62, 1, "TileCoarse, indexTiles, done, %{public}s, size, %{public}lu, unprotected, %{public}lu", &v97, v79);
    v71 = (std::string *)v70;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", v70);
    if (v71 != &buf)
      goto LABEL_149;
  }
  return v9 != 0;
}

void sub_100CB62D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t *sub_100CB6368(uint64_t a1, int a2, unsigned int a3)
{
  BOOL v3;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  const char *v25;
  double v26;
  double v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint8_t *v47;
  uint64_t *result;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  unsigned int v52;
  uint64_t v53[2];
  int v54;
  const char *v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  uint64_t v61;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  uint64_t v69;

  v3 = a3 - 6 < 3 || a3 == 12;
  if (v3)
  {
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472;
    v51[2] = sub_100CB9D90;
    v51[3] = &unk_10217D868;
    v52 = a3;
    v53[0] = mach_absolute_time();
    v53[1] = (uint64_t)v51;
    v50 = sub_1001CDE58(a3, (_QWORD *)(a1 + 216));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(v50 + 8);
      v9 = *(char *)(v50 + 31);
      v10 = sub_100026CC8(v50 + 184);
      if (v9 >= 0)
        v11 = v50 + 8;
      else
        v11 = v8;
      *(_DWORD *)buf = 136446466;
      v63 = (const char *)v11;
      v64 = 2050;
      v65 = *(double *)&v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TileCoarse, %{public}s, removeAllTiles, size, %{public}lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v35 = qword_1022A0048;
      v36 = *(_QWORD *)(v50 + 8);
      v37 = *(char *)(v50 + 31);
      v38 = sub_100026CC8(v50 + 184);
      if (v37 >= 0)
        v39 = v50 + 8;
      else
        v39 = v36;
      v54 = 136446466;
      v55 = (const char *)v39;
      v56 = 2050;
      v57 = *(double *)&v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 1, "TileCoarse, %{public}s, removeAllTiles, size, %{public}lu", &v54, 22);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    v12 = v50 + 184;
    v13 = (_QWORD *)sub_100129380(v50 + 184);
    if (v13 != (_QWORD *)sub_1000DCFC0(v50 + 184))
    {
      do
      {
        if (a2)
        {
          v14 = v13[10];
          sub_100FA2CE0(v14);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217D9C0);
          v15 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v16 = sub_1001CC818(*(_DWORD *)(v14 + 48));
            v17 = sub_1001C087C(v14 + 48);
            v18 = sub_1001C0858(v14 + 48);
            v19 = sub_100026CC8(v12);
            *(_DWORD *)buf = 136446979;
            v63 = v16;
            v64 = 2049;
            v65 = v17;
            v66 = 2049;
            v67 = v18;
            v68 = 2050;
            v69 = v19;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10217D9C0);
            v22 = qword_1022A0048;
            v24 = *(_DWORD *)(v14 + 48);
            v23 = v14 + 48;
            v25 = sub_1001CC818(v24);
            v26 = sub_1001C087C(v23);
            v27 = sub_1001C0858(v23);
            v28 = sub_100026CC8(v12);
            v54 = 136446979;
            v55 = v25;
            v56 = 2049;
            v57 = v26;
            v58 = 2049;
            v59 = v27;
            v60 = 2050;
            v61 = v28;
            LODWORD(v49) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", &v54, v49);
            v30 = (uint8_t *)v29;
            sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v29);
            if (v30 != buf)
              free(v30);
          }
        }
        v20 = (_QWORD *)v13[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v13[2];
            v3 = *v21 == (_QWORD)v13;
            v13 = v21;
          }
          while (!v3);
        }
        v13 = v21;
      }
      while (v21 != (_QWORD *)sub_1000DCFC0(v12));
    }
    sub_1008B97D8(v12);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v31 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(v50 + 31) >= 0)
        v32 = v50 + 8;
      else
        v32 = *(_QWORD *)(v50 + 8);
      v33 = sub_100026CC8(v12);
      v34 = sub_1008B97D0(v12);
      *(_DWORD *)buf = 136446722;
      v63 = (const char *)v32;
      v64 = 2050;
      v65 = *(double *)&v33;
      v66 = 2050;
      v67 = *(double *)&v34;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "TileCoarse, removeAllTiles, end, name, %{public}s, size, %{public}lu, unprot size, %{public}lu", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v42 = qword_1022A0048;
      if (*(char *)(v50 + 31) >= 0)
        v43 = v50 + 8;
      else
        v43 = *(_QWORD *)(v50 + 8);
      v44 = sub_100026CC8(v12);
      v45 = sub_1008B97D0(v12);
      v54 = 136446722;
      v55 = (const char *)v43;
      v56 = 2050;
      v57 = *(double *)&v44;
      v58 = 2050;
      v59 = *(double *)&v45;
      LODWORD(v49) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 1, "TileCoarse, removeAllTiles, end, name, %{public}s, size, %{public}lu, unprot size, %{public}lu", &v54, v49);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
    return sub_100134E40(v53);
  }
  else
  {
    result = (uint64_t *)sub_101924DBC();
    __break(1u);
  }
  return result;
}

void sub_100CB6A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100134E40((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CB6A50(uint64_t a1, unsigned int a2, char *a3, std::string::value_type *a4, double a5)
{
  unsigned int v5;
  std::string::value_type *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v11;
  char *v12;
  std::string::value_type *v13;
  uint64_t *v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  std::string::value_type *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  const char *v32;
  char *v33;
  std::string::value_type *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  const char *v38;
  double v39;
  double v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  uint64_t *v44;
  int v45;
  const char *v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  uint64_t v52;
  _BYTE v53[24];
  __int128 __p;
  uint64_t v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;

  if (a2 - 6 >= 3 && a2 != 12)
  {
    sub_101924F24();
    __break(1u);
    goto LABEL_54;
  }
  v6 = a4;
  v7 = a3;
  v5 = a2;
  v11 = sub_1001CDE58(a2, (_QWORD *)(a1 + 216));
  sub_101191978(v5, &v44);
  if (v7[23] >= 0)
    v12 = v7;
  else
    v12 = *(char **)v7;
  if (v6[23] >= 0)
    v13 = v6;
  else
    v13 = *(std::string::value_type **)v6;
  if ((sub_100FA5198(v44, v12, v13, v5, 1, a5) & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v8 = &qword_1022A0000;
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v16 = sub_1001CC818(v5);
      if (v7[23] >= 0)
        v17 = v7;
      else
        v17 = *(char **)v7;
      if (v6[23] >= 0)
        v18 = v6;
      else
        v18 = *(std::string::value_type **)v6;
      *(_DWORD *)buf = 136446722;
      v57 = v16;
      v58 = 2082;
      v59 = *(double *)&v17;
      v60 = 2082;
      v61 = *(double *)&v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 == -1)
    {
LABEL_42:
      v31 = v8[9];
      v32 = sub_1001CC818(v5);
      if (v7[23] >= 0)
        v33 = v7;
      else
        v33 = *(char **)v7;
      if (v6[23] >= 0)
        v34 = v6;
      else
        v34 = *(std::string::value_type **)v6;
      *(_DWORD *)v53 = 136446722;
      *(_QWORD *)&v53[4] = v32;
      *(_WORD *)&v53[12] = 2082;
      *(_QWORD *)&v53[14] = v33;
      *(_WORD *)&v53[22] = 2082;
      *(_QWORD *)&__p = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", v53, 32);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLCoarseCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
LABEL_26:
      v19 = 0;
      goto LABEL_38;
    }
LABEL_54:
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    goto LABEL_42;
  }
  v14 = v44;
  *(_OWORD *)v53 = *((_OWORD *)v44 + 3);
  *(_QWORD *)&v53[16] = v44[8];
  if (*((char *)v44 + 95) < 0)
  {
    sub_100115CE4(&__p, (void *)v44[9], v44[10]);
    v14 = v44;
  }
  else
  {
    __p = *(_OWORD *)(v44 + 9);
    v55 = v44[11];
  }
  sub_101192204((uint64_t)v14, v11, (uint64_t)"lister");
  v20 = v11 + 184;
  v21 = sub_1008B985C((uint64_t **)(v11 + 184), (unsigned int *)v53);
  v22 = v44;
  v44 = 0;
  v23 = *v21;
  *v21 = (uint64_t)v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v24 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v25 = sub_1001CC818(v5);
    v26 = sub_1001C087C((uint64_t)v53);
    v27 = sub_1001C0858((uint64_t)v53);
    v28 = sub_100026CC8(v20);
    *(_DWORD *)buf = 136446979;
    v57 = v25;
    v58 = 2049;
    v59 = v26;
    v60 = 2049;
    v61 = v27;
    v62 = 2050;
    v63 = v28;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v37 = qword_1022A0048;
    v38 = sub_1001CC818(v5);
    v39 = sub_1001C087C((uint64_t)v53);
    v40 = sub_1001C0858((uint64_t)v53);
    v41 = sub_100026CC8(v20);
    v45 = 136446979;
    v46 = v38;
    v47 = 2049;
    v48 = v39;
    v49 = 2049;
    v50 = v40;
    v51 = 2050;
    v52 = v41;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 1, "@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu", &v45, 42);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLCoarseCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  sub_1001C85FC(v20, (unsigned int *)v53);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)__p);
  v19 = 1;
LABEL_38:
  v29 = v44;
  v44 = 0;
  if (v29)
    (*(void (**)(uint64_t *))(*v29 + 8))(v29);
  return v19;
}

void sub_100CB6FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

BOOL sub_100CB702C(uint64_t a1, uint64_t a2)
{
  return sub_100CB1038(*(_QWORD *)(a1 + 32), *(_DWORD *)(a2 + 4), -1, 0.0, 0.0, *(double *)(a1 + 40));
}

id *sub_100CB704C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileDl, tileDownloadedCallback, success, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v5 = *(unsigned __int8 *)(a1 + 56);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileDl, tileDownloadedCallback, success, %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static void CLCoarseCellTilesManager::tileDownloadCallback(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_100CB7208(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 56));
}

id *sub_100CB7208(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  double v5;
  uint64_t v6;
  _DWORD *v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int v16;
  const char *v17;
  double v18;
  double v19;
  int v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  int v31;
  NSObject *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  NSObject *v42;
  const char *v43;
  double v44;
  double v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  double v49;
  double v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v55;
  unsigned int v56;
  const char *v57;
  double v58;
  double v59;
  int v60;
  uint64_t v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  void **v65;
  int v66;
  uint64_t v67;
  int v68;
  _BOOL4 v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  const char *v74;
  double v75;
  double v76;
  uint64_t v77;
  const char *v78;
  char *v79;
  uint64_t v80;
  const char *v81;
  double v82;
  double v83;
  uint64_t v84;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  void *v103[2];
  char v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  id v110[2];
  unsigned __int8 v111;
  _BYTE __p[12];
  __int16 v113;
  _BYTE v114[10];
  double v115;
  _BYTE v116[12];
  int v117;
  __int16 v118;
  int v119;
  _BYTE buf[12];
  __int16 v121;
  _BYTE v122[10];
  double v123;
  _BYTE v124[12];
  int v125;
  __int16 v126;
  int v127;

  v111 = a3;
  sub_100131938(v110, (uint64_t)"coarseCellTileDownloaded", 0);
  v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
  v6 = sub_10107967C(*(_QWORD **)(a1 + 176), a2);
  v7 = (_DWORD *)v6;
  v109 = 0;
  if (v6)
  {
    v105 = *(_OWORD *)(v6 + 48);
    v106 = *(_QWORD *)(v6 + 64);
    if (*(char *)(v6 + 95) < 0)
    {
      sub_100115CE4(&v107, *(void **)(v6 + 72), *(_QWORD *)(v6 + 80));
    }
    else
    {
      v107 = *(_OWORD *)(v6 + 72);
      v108 = *(_QWORD *)(v6 + 88);
    }
    v11 = v7[12];
    v12 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
    v13 = a1 + 192;
    if (v111 || v12 == -1100)
      sub_100F5A36C(v13);
    else
      sub_100F5A398(v13, v5);
    v14 = sub_1001CDE58(v11, (_QWORD *)(a1 + 216));
    if (v111 && (_os_feature_enabled_impl("CoreLocation", "TilesService") & 1) == 0)
      v111 = (*(uint64_t (**)(_DWORD *, int *))(*(_QWORD *)v7 + 40))(v7, &v109);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v16 = v11;
      v17 = sub_1001CC818(v11);
      v18 = sub_1001C087C((uint64_t)&v105);
      v19 = sub_1001C0858((uint64_t)&v105);
      v20 = v111;
      v21 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      *(_DWORD *)buf = 136447235;
      *(_QWORD *)&buf[4] = v17;
      v121 = 2049;
      *(double *)v122 = v18;
      *(_WORD *)&v122[8] = 2049;
      v123 = v19;
      *(_WORD *)v124 = 1026;
      *(_DWORD *)&v124[2] = v20;
      *(_WORD *)&v124[6] = 1026;
      *(_DWORD *)&v124[8] = v21;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", buf, 0x2Cu);
      v11 = v16;
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v55 = qword_1022A0048;
      v56 = v11;
      v57 = sub_1001CC818(v11);
      v58 = sub_1001C087C((uint64_t)&v105);
      v59 = sub_1001C0858((uint64_t)&v105);
      v60 = v111;
      v61 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      *(_DWORD *)__p = 136447235;
      *(_QWORD *)&__p[4] = v57;
      v113 = 2049;
      *(double *)v114 = v58;
      *(_WORD *)&v114[8] = 2049;
      v115 = v59;
      *(_WORD *)v116 = 1026;
      *(_DWORD *)&v116[2] = v60;
      *(_WORD *)&v116[6] = 1026;
      *(_DWORD *)&v116[8] = v61;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 0, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", __p, 44);
      v63 = (char *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v62);
      v11 = v56;
      if (v63 != buf)
        free(v63);
    }
    if (v111)
    {
      v22 = v109;
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 232) + 16))(v14 + 232);
      *(_DWORD *)(v14 + 276) += v22;
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 232) + 24))(v14 + 232);
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 232) + 16))(v14 + 232);
      ++*(_DWORD *)(v14 + 284);
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 232) + 24))(v14 + 232);
      sub_1015A2E04(buf, "tileDownloadCompleted");
      sub_100CDC4CC(v14 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 148));
      if ((v122[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v23 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v90 = a2;
      v92 = v14;
      v24 = v12;
      v25 = v11;
      v26 = __p;
      (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(_QWORD *)v7 + 16))(__p, v7);
      if (v114[9] < 0)
        v26 = *(_BYTE **)__p;
      v27 = v111;
      v28 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      v29 = *(_DWORD *)(a1 + 148);
      v30 = sub_1001C8DA8((unsigned int *)&v105);
      v31 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)buf = 136382467;
      *(_QWORD *)&buf[4] = v26;
      v121 = 1026;
      *(_DWORD *)v122 = v27;
      *(_WORD *)&v122[4] = 1026;
      *(_DWORD *)&v122[6] = v28;
      LOWORD(v123) = 1026;
      *(_DWORD *)((char *)&v123 + 2) = v24 == -1100;
      HIWORD(v123) = 1026;
      *(_DWORD *)v124 = v29;
      *(_WORD *)&v124[4] = 1026;
      *(_DWORD *)&v124[6] = v30;
      *(_WORD *)&v124[10] = 1026;
      v125 = v31;
      v126 = 1026;
      v127 = v109;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "@TileDl, tileDecompressionCompleted, tile, %{private}s, decompress done, success, %{public}d, NSURLErrorCode, %{public}d, tileDoesNotExist, %{public}d, reachability, %{public}d, validId, %{public}d, locked, %{public}d, fileSize, %{public}d", buf, 0x36u);
      if ((v114[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v11 = v25;
      v12 = v24;
      a2 = v90;
      v14 = v92;
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v93 = v12;
      v64 = qword_1022A0048;
      v65 = v103;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v7 + 16))(v103, v7);
      v91 = v11;
      if (v104 < 0)
        v65 = (void **)v103[0];
      v66 = v111;
      v67 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      v68 = *(_DWORD *)(a1 + 148);
      v69 = sub_1001C8DA8((unsigned int *)&v105);
      v70 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)__p = 136382467;
      *(_QWORD *)&__p[4] = v65;
      v113 = 1026;
      *(_DWORD *)v114 = v66;
      *(_WORD *)&v114[4] = 1026;
      *(_DWORD *)&v114[6] = v67;
      LOWORD(v115) = 1026;
      *(_DWORD *)((char *)&v115 + 2) = v93 == -1100;
      HIWORD(v115) = 1026;
      *(_DWORD *)v116 = v68;
      *(_WORD *)&v116[4] = 1026;
      *(_DWORD *)&v116[6] = v69;
      *(_WORD *)&v116[10] = 1026;
      v117 = v70;
      v118 = 1026;
      v119 = v109;
      LODWORD(v89) = 54;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 2, "@TileDl, tileDecompressionCompleted, tile, %{private}s, decompress done, success, %{public}d, NSURLErrorCode, %{public}d, tileDoesNotExist, %{public}d, reachability, %{public}d, validId, %{public}d, locked, %{public}d, fileSize, %{public}d", __p, v89);
      v72 = v71;
      if (v104 < 0)
        operator delete(v103[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v72);
      v11 = v91;
      v12 = v93;
      if (v72 != buf)
        free(v72);
    }
    if (!sub_1001C8DA8((unsigned int *)&v105))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v32 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "@TileError, DecompressionID", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        *(_WORD *)__p = 0;
        LODWORD(v89) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileError, DecompressionID", __p, v89);
        v88 = (char *)v87;
        sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v87);
        if (v88 != buf)
          free(v88);
      }
    }
    v111 = sub_100FA3220((uint64_t)v7, v111, v12 == -1100, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    sub_100CB8344(a1, v111, v7, v14, v109);
    if (sub_1001DFAE8())
    {
      sub_100119F3C(buf);
      v33 = (char *)(v7 + 2);
      if (*((char *)v7 + 31) < 0)
        v33 = *(char **)v33;
      sub_1005285B4((uint64_t)buf, "gotTile", v33);
      sub_10011B47C((uint64_t)buf, "success", &v111);
      sub_10011B47C((uint64_t)buf, "protection", (_BYTE *)(a1 + 128));
      sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
      sub_10011A5A8(buf);
    }
    if (v111)
    {
      sub_101192204((uint64_t)v7, v14, (uint64_t)"download");
      v34 = *(_QWORD *)(a1 + 176);
      v99 = v105;
      v100 = v106;
      if (SHIBYTE(v108) < 0)
      {
        sub_100115CE4(&v101, (void *)v107, *((unint64_t *)&v107 + 1));
      }
      else
      {
        v101 = v107;
        v102 = v108;
      }
      sub_101079704(v34, (uint64_t)&v99, v111, v12 == -1100, (uint64_t *)v103, v5);
      if (SHIBYTE(v102) < 0)
        operator delete((void *)v101);
      if (v103[0])
      {
        v37 = sub_1008B985C((uint64_t **)(v14 + 184), (unsigned int *)&v105);
        v38 = v103[0];
        v103[0] = 0;
        v39 = *v37;
        *v37 = (uint64_t)v38;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      }
      v40 = sub_1001C85FC(v14 + 184, (unsigned int *)&v105);
      sub_1001C9C90(v40, v5);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v41 = v7 + 12;
      v42 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v43 = sub_1001CC818(*v41);
        v44 = sub_1001C087C((uint64_t)&v105);
        v45 = sub_1001C0858((uint64_t)&v105);
        v46 = sub_100026CC8(v14 + 184);
        *(_DWORD *)buf = 136446979;
        *(_QWORD *)&buf[4] = v43;
        v121 = 2049;
        *(double *)v122 = v44;
        *(_WORD *)&v122[8] = 2049;
        v123 = v45;
        *(_WORD *)v124 = 2050;
        *(_QWORD *)&v124[2] = v46;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v73 = qword_1022A0048;
        v74 = sub_1001CC818(*v41);
        v75 = sub_1001C087C((uint64_t)&v105);
        v76 = sub_1001C0858((uint64_t)&v105);
        v77 = sub_100026CC8(v14 + 184);
        *(_DWORD *)__p = 136446979;
        *(_QWORD *)&__p[4] = v74;
        v113 = 2049;
        *(double *)v114 = v75;
        *(_WORD *)&v114[8] = 2049;
        v115 = v76;
        *(_WORD *)v116 = 2050;
        *(_QWORD *)&v116[2] = v77;
        LODWORD(v89) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, 0, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", __p, v89);
        v79 = (char *)v78;
        sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v78);
        if (v79 != buf)
          free(v79);
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v47 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v48 = sub_1001CC818(v11);
        v49 = sub_1001C087C((uint64_t)&v105);
        v50 = sub_1001C0858((uint64_t)&v105);
        v51 = sub_100026CC8(v14 + 184);
        *(_DWORD *)buf = 136446979;
        *(_QWORD *)&buf[4] = v48;
        v121 = 2049;
        *(double *)v122 = v49;
        *(_WORD *)&v122[8] = 2049;
        v123 = v50;
        *(_WORD *)v124 = 2050;
        *(_QWORD *)&v124[2] = v51;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v80 = qword_1022A0048;
        v81 = sub_1001CC818(v11);
        v82 = sub_1001C087C((uint64_t)&v105);
        v83 = sub_1001C0858((uint64_t)&v105);
        v84 = sub_100026CC8(v14 + 184);
        *(_DWORD *)__p = 136446979;
        *(_QWORD *)&__p[4] = v81;
        v113 = 2049;
        *(double *)v114 = v82;
        *(_WORD *)&v114[8] = 2049;
        v115 = v83;
        *(_WORD *)v116 = 2050;
        *(_QWORD *)&v116[2] = v84;
        LODWORD(v89) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v80, 1, "@TileReq, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", __p, v89);
        v86 = (char *)v85;
        sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v85);
        if (v86 != buf)
          free(v86);
      }
      ++*(_DWORD *)(v14 + 288);
      if ((sub_1001CC83C(*(_DWORD *)(a1 + 148), *(unsigned __int8 *)(a1 + 153)) & 1) == 0)
        ++*(_DWORD *)(v14 + 292);
      sub_100CB5078(a1, v5);
      v52 = v103[0];
      v103[0] = 0;
      if (v52)
        (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
    }
    else
    {
      v35 = *(_QWORD *)(a1 + 176);
      v94 = v105;
      v95 = v106;
      if (SHIBYTE(v108) < 0)
      {
        sub_100115CE4(&v96, (void *)v107, *((unint64_t *)&v107 + 1));
        v36 = v111 != 0;
      }
      else
      {
        v36 = 0;
        v96 = v107;
        v97 = v108;
      }
      sub_101079704(v35, (uint64_t)&v94, v36, v12 == -1100, &v98, v5);
      v53 = v98;
      v98 = 0;
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      if (SHIBYTE(v97) < 0)
        operator delete((void *)v96);
    }
    if (SHIBYTE(v108) < 0)
      operator delete((void *)v107);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "@TileError, tile not on download list, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "@TileError, tile not on download list, #CloneMe", __p, 2);
      v10 = (char *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  sub_100CB4B2C(a1, v5);
  return sub_100131740(v110);
}

void sub_100CB8210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,id a43)
{
  if (a41 < 0)
    operator delete(__p);
  sub_100131740(&a43);
  _Unwind_Resume(a1);
}

void sub_100CB8344(uint64_t a1, char a2, _DWORD *a3, uint64_t a4, int a5)
{
  int v8;
  uint64_t v9;
  NSObject *v10;
  _BYTE *v11;
  void **v12;
  void **v13;
  std::string *v14;
  uint64_t v15;
  void **v16;
  void **v17;
  void **v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  void *v22[2];
  char v23;
  _BYTE v24[4];
  int v25;
  void *v26[2];
  void *__p[4];
  std::string v28;
  int v29;
  char v30;
  _BYTE v31[12];
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void **v37;
  __int16 v38;
  void **v39;
  __int16 v40;
  std::string *v41;
  std::string buf;
  __int16 v43;
  void **v44;
  __int16 v45;
  void **v46;
  __int16 v47;
  std::string *v48;

  v9 = (uint64_t)(a3 + 12);
  v8 = a3[12];
  memset(&v28, 0, sizeof(v28));
  *(_OWORD *)v26 = 0u;
  memset(__p, 0, sizeof(__p));
  v24[0] = a2;
  v25 = v8;
  std::string::operator=((std::string *)v26, (const std::string *)(a4 + 56));
  sub_100BCC62C(v9, &buf);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  *(std::string *)&__p[1] = buf;
  sub_100FA2C30((uint64_t)a3, &buf);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v28 = buf;
  v30 = 0;
  v29 = a5;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(v31, a3);
    v11 = v35 >= 0 ? v31 : *(_BYTE **)v31;
    v12 = SHIBYTE(__p[0]) >= 0 ? v26 : (void **)v26[0];
    v13 = SHIBYTE(__p[3]) >= 0 ? &__p[1] : (void **)__p[1];
    v14 = (v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v28
        : (std::string *)v28.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136381955;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v24[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v25;
    v43 = 2081;
    v44 = v12;
    v45 = 2081;
    v46 = v13;
    v47 = 2081;
    v48 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s", (uint8_t *)&buf, 0x36u);
    if (SHIBYTE(v35) < 0)
      operator delete(*(void **)v31);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v15 = qword_1022A0048;
    (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(v22, a3);
    if (v23 >= 0)
      v16 = v22;
    else
      v16 = (void **)v22[0];
    if (SHIBYTE(__p[0]) >= 0)
      v17 = v26;
    else
      v17 = (void **)v26[0];
    if (SHIBYTE(__p[3]) >= 0)
      v18 = &__p[1];
    else
      v18 = (void **)__p[1];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v28;
    else
      v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
    *(_DWORD *)v31 = 136381955;
    *(_QWORD *)&v31[4] = v16;
    v32 = 1026;
    v33 = v24[0];
    v34 = 1026;
    v35 = v25;
    v36 = 2081;
    v37 = v17;
    v38 = 2081;
    v39 = v18;
    v40 = 2081;
    v41 = v19;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v15, 2, "@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s", v31, 54);
    v21 = v20;
    if (v23 < 0)
      operator delete(v22[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &, unsigned int)", "%s\n", (const char *)v21);
    if (v21 != &buf)
      free(v21);
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &buf, v24, 0, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v26[0]);
}

void sub_100CB8748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100CB8774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[6];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100CB87CC;
  v5[3] = &unk_102143528;
  v5[4] = v2;
  v5[5] = a2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_100CB87CC(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  int v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(v2 + 168) + 16))(*(_QWORD *)(v2 + 168));
  v4 = *(_QWORD *)(a1 + 40) + 184;
  v5 = (_QWORD *)sub_100129380(v4);
  v6 = sub_1000DCFC0(v4);
  if (v5 != (_QWORD *)v6)
  {
    v7 = (_QWORD *)v6;
    v8 = 0;
    do
    {
      v9 = sub_101079AF0(*(_QWORD *)(v2 + 176), v5[10], v3);
      v10 = (_QWORD *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v12 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v8 |= v9;
      v5 = v11;
    }
    while (v11 != v7);
    if ((v8 & 1) != 0)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 168) + 40))(*(_QWORD *)(v2 + 168));
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v14 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v19 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileSched, coarsecell, set, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v17[0] = 67240192;
        v17[1] = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, coarsecell, set, %{public}d", v17, 8);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::refreshTilesDataIfNeeded()_block_invoke", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
  }
}

uint64_t sub_100CB8A24(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  int v13;
  void **v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  double v22;
  NSObject *v23;
  void **v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  NSObject *v29;
  void **v30;
  uint64_t v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _BYTE buf[22];
  char v50;
  int v51;
  _BYTE v52[18];
  void *__p[2];
  char v54;

  v9 = sub_1001EC348((uint64_t)a3);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_101347C78(a3, __p);
    v11 = v54 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s", buf, 0x16u);
    if (v54 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v32 = qword_1022A02D8;
    sub_101347C78(a3, buf);
    if (v50 >= 0)
      v33 = buf;
    else
      v33 = *(_BYTE **)buf;
    v51 = 134218242;
    *(_QWORD *)v52 = v9;
    *(_WORD *)&v52[8] = 2080;
    *(_QWORD *)&v52[10] = v33;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v32, 2, "TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s", &v51, 22);
    v35 = v34;
    if (v50 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v35);
    if (v35 != (char *)__p)
      free(v35);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
  v12 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v13 = sub_1001C9408(a2, *(_BYTE *)(a1 + 128));
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    v14 = v54 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, in tile, accessible, %d, %s", buf, 0x12u);
    if (v54 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v36 = qword_1022A02D8;
    v37 = sub_1001C9408(a2, *(_BYTE *)(a1 + 128));
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
    if (v50 >= 0)
      v38 = buf;
    else
      v38 = *(_BYTE **)buf;
    v51 = 67109378;
    *(_DWORD *)v52 = v37;
    *(_WORD *)&v52[4] = 2080;
    *(_QWORD *)&v52[6] = v38;
    LODWORD(v45) = 18;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v36, 2, "TILE: getLocationByCellFromTile, in tile, accessible, %d, %s", &v51, v45);
    v40 = v39;
    if (v50 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v40);
    if (v40 != (char *)__p)
      free(v40);
  }
  if (!sub_1001C9408(a2, *(_BYTE *)(a1 + 128)))
    return 0;
  v46 = 0;
  v47 = 0;
  v48 = (unsigned __int16)sub_1001EE1E8((uint64_t)a3);
  v15 = a3[2];
  if (v15 <= 7 && ((1 << v15) & 0x87) != 0)
  {
    WORD1(v48) = *(_DWORD *)(sub_1007057DC((uint64_t)a3) + 4);
    v16 = sub_1007057DC((uint64_t)a3);
LABEL_23:
    v17 = (_DWORD *)(v16 + 8);
    goto LABEL_24;
  }
  if (v15 - 3 > 2)
  {
    if (v15 == 10)
    {
      WORD1(v48) = *(_DWORD *)(sub_1007073B4((uint64_t)a3) + 4);
      v16 = sub_1007073B4((uint64_t)a3);
      goto LABEL_23;
    }
    if (v15 == 6)
    {
      WORD1(v48) = *(_DWORD *)(sub_1001E3CA4((uint64_t)a3) + 4);
      v16 = sub_1001E3CA4((uint64_t)a3);
      goto LABEL_23;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v29 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_101347C78(a3, __p);
      v30 = v54 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: no lac tile for, %s", buf, 0xCu);
      if (v54 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v41 = qword_1022A02D8;
      sub_101347C78(a3, buf);
      if (v50 >= 0)
        v42 = buf;
      else
        v42 = *(_BYTE **)buf;
      v51 = 136315138;
      *(_QWORD *)v52 = v42;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v41, 2, "TILE: no lac tile for, %s", (const char *)&v51);
      v44 = v43;
      if (v50 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v44);
      if (v44 != (char *)__p)
        free(v44);
    }
    return 0;
  }
  WORD1(v48) = *(_DWORD *)(sub_100704A28((uint64_t)a3) + 32);
  v17 = (_DWORD *)(sub_100704A28((uint64_t)a3) + 36);
LABEL_24:
  DWORD1(v48) = *v17;
  v18 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)a2 + 176))(a2, &v48, &v46);
  if ((_DWORD)v18)
  {
    v20 = (unsigned __int16)v47;
    v21 = WORD1(v47);
    LOBYTE(v19) = BYTE4(v47);
    *(double *)(a5 + 20) = (double)v19 * 1000.0;
    sub_100FA6940(a2, v20, v21, (double *)(a5 + 4), (double *)(a5 + 12));
    *(_OWORD *)(a5 + 28) = xmmword_101BAFEE0;
    *(double *)(a5 + 76) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
    *(_QWORD *)(a5 + 88) = 0xBFF0000000000000;
    *(_DWORD *)(a5 + 96) = 7;
    *(_QWORD *)(a5 + 128) = 0x100000032;
    *(_DWORD *)(a5 + 84) = 70;
    if (sub_1001C9408(a2, *(_BYTE *)(a1 + 128)))
    {
      v22 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
      sub_1001C9C90(a2, v22);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100071A00(a5, __p);
    v24 = v54 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v18;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, isFound, %d, locationd, %s", buf, 0x12u);
    if (v54 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v25 = qword_1022A02D8;
    sub_100071A00(a5, buf);
    if (v50 >= 0)
      v26 = buf;
    else
      v26 = *(_BYTE **)buf;
    v51 = 67109378;
    *(_DWORD *)v52 = v18;
    *(_WORD *)&v52[4] = 2080;
    *(_QWORD *)&v52[6] = v26;
    LODWORD(v45) = 18;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 2, "TILE: getLocationByCellFromTile, isFound, %d, locationd, %s", &v51, v45);
    v28 = v27;
    if (v50 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v28);
    if (v28 != (char *)__p)
      free(v28);
  }
  return v18;
}

uint64_t sub_100CB9364(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  NSObject *v21;
  int v22;
  int v23;
  const char *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  _BYTE buf[12];
  char v49;
  int v50;
  _BYTE *v51;
  _BYTE __p[12];
  char v53;

  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(_DWORD *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 136) = 0;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 128) = 0;
  *(_BYTE *)(a5 + 152) = 0;
  *(_DWORD *)a5 = 0xFFFF;
  *(_QWORD *)(a5 + 12) = 0;
  *(_QWORD *)(a5 + 4) = 0;
  *(_OWORD *)(a5 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a5 + 36) = _Q0;
  *(_OWORD *)(a5 + 52) = _Q0;
  *(_OWORD *)(a5 + 68) = _Q0;
  *(_DWORD *)(a5 + 84) = 0;
  *(_QWORD *)(a5 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a5 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 124) = 0x7FFFFFFF;
  if (!*(_BYTE *)(a1 + 129))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v21 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d", __p, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v23 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v23;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d", buf);
    v20 = (char *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v24);
    goto LABEL_93;
  }
  v13 = a2[2];
  v14 = 6;
  if (v13 >= 3 && v13 != 7)
  {
    if (v13 == 9)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        sub_101347C78(a2, __p);
        v16 = v53 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: no tiles for, %s", buf, 0xCu);
        if (v53 < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v17 = qword_1022A02D8;
      sub_101347C78(a2, buf);
      if (v49 >= 0)
        v18 = buf;
      else
        v18 = *(_BYTE **)buf;
      v50 = 136315138;
      v51 = v18;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 2, "TILE: no tiles for, %s", (const char *)&v50);
      v20 = v19;
      if (v49 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v20);
LABEL_22:
      if (v20 == __p)
        return 0;
      goto LABEL_94;
    }
    if (v13 - 3 > 2)
    {
      if (v13 == 6)
      {
        v14 = 8;
      }
      else
      {
        if (v13 != 10)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217D9C0);
          v37 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
          {
            sub_101347C78(a2, __p);
            v38 = v53 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)&buf[4] = v38;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "CoarseTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe", buf, 0xCu);
            if (v53 < 0)
              operator delete(*(void **)__p);
          }
          if (!sub_1001BFF7C(115, 0))
            return 0;
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217D9C0);
          v39 = qword_1022A0048;
          sub_101347C78(a2, buf);
          if (v49 >= 0)
            v40 = buf;
          else
            v40 = *(_BYTE **)buf;
          v50 = 136380675;
          v51 = v40;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v39, 16, "CoarseTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe", &v50, 12);
          v20 = v41;
          if (v49 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 0, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v20);
          goto LABEL_22;
        }
        v14 = 12;
      }
    }
    else
    {
      if (v13 != 3)
        return 0;
      v14 = 7;
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
  v25 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, search for LAC", __p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByCell, search for LAC", buf, 2);
    v43 = (char *)v42;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v42);
    if (v43 != __p)
      free(v43);
  }
  v26 = sub_1001CDE58(v14, (_QWORD *)(a1 + 216));
  if (!*(_BYTE *)(a1 + 144))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v34 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v35 = v26 + 8;
      if (*(char *)(v26 + 31) < 0)
        v35 = *(_QWORD *)(v26 + 8);
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, LAC tiles for, %s, are not active", __p, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v46 = *(_QWORD *)(v26 + 8);
    v45 = v26 + 8;
    v44 = v46;
    if (*(char *)(v45 + 23) >= 0)
      v44 = v45;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v44;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByCell, LAC tiles for, %s, are not active", buf);
    v20 = (char *)v47;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v47);
LABEL_93:
    if (v20 != __p)
LABEL_94:
      free(v20);
    return 0;
  }
  sub_1001C36E4(a2, buf);
  v27 = v26 + 184;
  if (sub_100026CC8(v27))
  {
    v28 = sub_100129380(v27);
    v30 = sub_100CB8A24(a1, *(_QWORD *)(v28 + 80), a2, v29, a5);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v31 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, search for LAC, isFound, %d", __p, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v50 = 67109120;
      LODWORD(v51) = v30;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByCell, search for LAC, isFound, %d", &v50);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v32);
      if (v33 != __p)
        free(v33);
    }
  }
  else
  {
    v30 = 0;
  }
  if (v49 < 0)
    operator delete(*(void **)buf);
  return v30;
}

void sub_100CB9D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100CB9D80(uint64_t a1, uint64_t a2)
{
  return sub_100CB6368(*(_QWORD *)(a1 + 32), 1, *(_DWORD *)(a2 + 4));
}

void sub_100CB9D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  int v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217DA00);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_DWORD *)(a1 + 32);
    v9[0] = 68290307;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 1025;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCoarseCellTilesManager::removeAllTiles\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"type\":%{private}d}", (uint8_t *)v9, 0x40u);
  }
}

id sub_100CB9EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[7];
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v6 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446210;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TileCoarse, deleteAgedTiles, dispatch, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v9 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v9 = *(_QWORD *)(a2 + 8);
    v13 = 136446210;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TileCoarse, deleteAgedTiles, dispatch, %{public}s", &v13, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v7 = *(void **)(v4 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100CBA0EC;
  v12[3] = &unk_102143548;
  v12[4] = v4;
  v12[5] = a2;
  v12[6] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v7, "async:", v12);
}

unint64_t sub_100CBA0EC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (_QWORD *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 136446466;
    v18 = v5;
    v19 = 2050;
    v20 = sub_100026CC8(v4 + 184);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TileCoarse, deleteAgedTiles, start, name, %{public}s, size, %{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v8 = qword_1022A0048;
    v9 = *(_QWORD *)(a1 + 40);
    v10 = (_QWORD *)(v9 + 8);
    if (*(char *)(v9 + 31) < 0)
      v10 = (_QWORD *)*v10;
    v13 = 136446466;
    v14 = v10;
    v15 = 2050;
    v16 = sub_100026CC8(v9 + 184);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "TileCoarse, deleteAgedTiles, start, name, %{public}s, size, %{public}lu", &v13, 22);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v6 = *(_QWORD *)(a1 + 40) + 184;
  do
  {
    sub_100CBA31C(v2, *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
    result = sub_100026CC8(v6);
  }
  while (result > 1);
  return result;
}

uint64_t *sub_100CBA31C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned int *v13;
  double v14;
  double v15;
  _BOOL4 v16;
  NSObject *v17;
  uint64_t v18;
  _BOOL4 v19;
  _BYTE *v20;
  NSObject *v21;
  const char *v22;
  double v23;
  double v24;
  _BOOL4 v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  void **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  double v36;
  double v37;
  _BOOL4 v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint8_t *v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  const char *v46;
  double v47;
  double v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  const char *v62;
  double v63;
  double v64;
  uint64_t v65;
  const char *v66;
  uint8_t *v67;
  uint64_t v68;
  double v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t v76;
  void *v77[2];
  char v78;
  _QWORD v79[5];
  uint64_t v80[2];
  _BYTE __p[34];
  _BYTE v82[10];
  uint64_t v83;
  uint8_t buf[4];
  _BYTE v85[30];
  _BYTE v86[10];
  uint64_t v87;

  v79[0] = _NSConcreteStackBlock;
  v79[1] = 3221225472;
  v79[2] = sub_100CBAE88;
  v79[3] = &unk_10217D888;
  *(double *)&v79[4] = a3;
  v80[0] = mach_absolute_time();
  v80[1] = (uint64_t)v79;
  v72 = a2;
  v5 = (uint64_t **)(a2 + 184);
  v6 = (_QWORD *)sub_100129380(a2 + 184);
  v7 = sub_1000DCFC0(a2 + 184);
  if (v6 == (_QWORD *)sub_1000DCFC0(a2 + 184))
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v73 = 136447235;
    v74 = (uint64_t **)(a2 + 184);
    do
    {
      v9 = v6;
      v10 = (_QWORD *)v6[1];
      v11 = v6;
      if (v10)
      {
        do
        {
          v6 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v11[2];
          v12 = *v6 == (_QWORD)v11;
          v11 = v6;
        }
        while (!v12);
      }
      v76 = (uint64_t)v9;
      v13 = (unsigned int *)v9[10];
      v14 = sub_100FA06F8((uint64_t)v13, a3);
      v15 = sub_100FA06EC((uint64_t)v13, a3);
      v16 = v15 >= *(double *)(a1 + 136) || sub_100FA7E88((uint64_t)v13);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v17 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(_QWORD *)(a1 + 136);
        v19 = sub_100FA7E88((uint64_t)v13);
        (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v13 + 16))(__p, v13);
        v20 = __p;
        if (__p[23] < 0)
          v20 = *(_BYTE **)__p;
        *(_DWORD *)buf = 134219010;
        *(double *)v85 = v15;
        *(_WORD *)&v85[8] = 2048;
        *(_QWORD *)&v85[10] = v18;
        *(_WORD *)&v85[18] = 1024;
        *(_DWORD *)&v85[20] = v19;
        *(_WORD *)&v85[24] = 1024;
        *(_DWORD *)&v85[26] = v16;
        *(_WORD *)v86 = 2080;
        *(_QWORD *)&v86[2] = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s", buf, 0x2Cu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v5 = v74;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        HIDWORD(v69) = v8;
        v70 = v7;
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
        v28 = qword_1022A02D8;
        v29 = *(_QWORD *)(a1 + 136);
        v30 = sub_100FA7E88((uint64_t)v13);
        (*(void (**)(void **__return_ptr, unsigned int *))(*(_QWORD *)v13 + 16))(v77, v13);
        v31 = v77;
        if (v78 < 0)
          v31 = (void **)v77[0];
        *(_DWORD *)__p = 134219010;
        *(double *)&__p[4] = v15;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v29;
        *(_WORD *)&__p[22] = 1024;
        *(_DWORD *)&__p[24] = v30;
        *(_WORD *)&__p[28] = 1024;
        *(_DWORD *)&__p[30] = v16;
        *(_WORD *)v82 = 2080;
        *(_QWORD *)&v82[2] = v31;
        LODWORD(v69) = 44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "TILE: deleteAgedTiles, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s", COERCE_DOUBLE(__p), v69, v70, v72, (const char *)v73);
        v33 = v32;
        if (v78 < 0)
          operator delete(v77[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v33);
        v8 = HIDWORD(v68);
        v7 = v71;
        if (v33 != (char *)buf)
          free(v33);
      }
      if (v16)
      {
        sub_100FA2CE0((uint64_t)v13);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217D9C0);
        v21 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v22 = sub_1001CC818(v13[12]);
          v23 = sub_1001C087C((uint64_t)(v13 + 12));
          v24 = sub_1001C0858((uint64_t)(v13 + 12));
          v25 = sub_100FA7E88((uint64_t)v13);
          v26 = sub_100026CC8((uint64_t)v5);
          *(_DWORD *)buf = v73;
          v27 = "age";
          if (v25)
            v27 = "corrupt";
          *(_QWORD *)v85 = v22;
          *(_WORD *)&v85[8] = 2049;
          *(double *)&v85[10] = v23;
          *(_WORD *)&v85[18] = 2049;
          *(double *)&v85[20] = v24;
          *(_WORD *)&v85[28] = 2082;
          *(_QWORD *)v86 = v27;
          *(_WORD *)&v86[8] = 2050;
          v87 = v26 - 1;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217D9C0);
          v34 = qword_1022A0048;
          v35 = sub_1001CC818(v13[12]);
          v36 = sub_1001C087C((uint64_t)(v13 + 12));
          v37 = sub_1001C0858((uint64_t)(v13 + 12));
          v38 = sub_100FA7E88((uint64_t)v13);
          v39 = sub_100026CC8((uint64_t)v5);
          *(_DWORD *)__p = v73;
          v40 = "age";
          if (v38)
            v40 = "corrupt";
          *(_QWORD *)&__p[4] = v35;
          *(_WORD *)&__p[12] = 2049;
          *(double *)&__p[14] = v36;
          *(_WORD *)&__p[22] = 2049;
          *(double *)&__p[24] = v37;
          *(_WORD *)&__p[32] = 2082;
          *(_QWORD *)v82 = v40;
          *(_WORD *)&v82[8] = 2050;
          v83 = v39 - 1;
          LODWORD(v68) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", __p, v68);
          v42 = (uint8_t *)v41;
          sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v41);
          if (v42 != buf)
            free(v42);
        }
        sub_1008B8DD8(v5, v76);
        ++v8;
      }
      else if (v7 == sub_1000DCFC0((uint64_t)v5))
      {
        v7 = v76;
      }
      else if (v7 != sub_1000DCFC0((uint64_t)v5) && fabs(v14) >= fabs(sub_100FA06F8(*(_QWORD *)(v7 + 80), a3)))
      {
        v7 = v76;
      }
    }
    while (v6 != (_QWORD *)sub_1000DCFC0((uint64_t)v5));
  }
  if (v7 != sub_1000DCFC0((uint64_t)v5) && (unint64_t)sub_100026CC8((uint64_t)v5) >= 2)
  {
    v43 = *(_QWORD *)(v7 + 80);
    if (sub_1001C94A8(v43))
    {
      sub_100FA2CE0(v43);
      ++v8;
    }
    v44 = v8;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v45 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v46 = sub_1001CC818(*(_DWORD *)(v43 + 48));
      v47 = sub_1001C087C(v43 + 48);
      v48 = sub_1001C0858(v43 + 48);
      v49 = sub_100026CC8((uint64_t)v5);
      *(_DWORD *)buf = 136446979;
      *(_QWORD *)v85 = v46;
      *(_WORD *)&v85[8] = 2049;
      *(double *)&v85[10] = v47;
      *(_WORD *)&v85[18] = 2049;
      *(double *)&v85[20] = v48;
      *(_WORD *)&v85[28] = 2050;
      *(_QWORD *)v86 = v49 - 1;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", buf, 0x2Au);
    }
    v8 = v44;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v59 = qword_1022A0048;
      v61 = *(_DWORD *)(v43 + 48);
      v60 = v43 + 48;
      v62 = sub_1001CC818(v61);
      v63 = sub_1001C087C(v60);
      v64 = sub_1001C0858(v60);
      v65 = sub_100026CC8((uint64_t)v5);
      *(_DWORD *)__p = 136446979;
      *(_QWORD *)&__p[4] = v62;
      *(_WORD *)&__p[12] = 2049;
      *(double *)&__p[14] = v63;
      *(_WORD *)&__p[22] = 2049;
      *(double *)&__p[24] = v64;
      *(_WORD *)&__p[32] = 2050;
      *(_QWORD *)v82 = v65 - 1;
      LODWORD(v68) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", __p, v68);
      v67 = (uint8_t *)v66;
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v66);
      v8 = v44;
      if (v67 != buf)
        free(v67);
    }
    sub_1008B8DD8(v5, v7);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v50 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v51 = sub_100026CC8((uint64_t)v5);
    v52 = v72 + 8;
    if (*(char *)(v72 + 31) < 0)
      v52 = *(_QWORD *)(v72 + 8);
    *(_DWORD *)buf = 67240707;
    *(_DWORD *)v85 = v8;
    *(_WORD *)&v85[4] = 2050;
    *(_QWORD *)&v85[6] = v51;
    *(_WORD *)&v85[14] = 2081;
    *(_QWORD *)&v85[16] = v52;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "TileCoarse, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v54 = qword_1022A0048;
    v55 = sub_100026CC8((uint64_t)v5);
    v56 = *(_QWORD *)(v72 + 8);
    if (*(char *)(v72 + 31) >= 0)
      v56 = v72 + 8;
    *(_DWORD *)__p = 67240707;
    *(_DWORD *)&__p[4] = v8;
    *(_WORD *)&__p[8] = 2050;
    *(_QWORD *)&__p[10] = v55;
    *(_WORD *)&__p[18] = 2081;
    *(_QWORD *)&__p[20] = v56;
    LODWORD(v68) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 0, "TileCoarse, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", __p, v68);
    v58 = (uint8_t *)v57;
    sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v57);
    if (v58 != buf)
      free(v58);
  }
  return sub_100134E40(v80);
}

void sub_100CBAE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_100134E40(&a29);
  _Unwind_Resume(a1);
}

void sub_100CBAE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217DA00);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 2050;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCoarseCellTilesManager::agedTileDeleter\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

void sub_100CBAFBC(id a1)
{
  std::string *p_p;
  std::string __p;

  sub_100584F4C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::assign((std::string *)&qword_102307AB8, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("tiles_cell")), "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100CBB03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100CBB058(id a1)
{
  std::string::assign((std::string *)&xmmword_102307AE0, "https://cl2.apple.com");
}

void sub_100CBB06C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  int v8;
  NSObject *v9;
  int v10;
  void **v11;
  uint64_t v12;
  int v13;
  void **v14;
  char *v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  NSObject *v24;
  const char *v25;
  const char *v26;
  void *v27[2];
  char v28;
  void *__p;
  __int16 v30;
  int v31;
  __int16 v32;
  void **v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint8_t buf[4];
  _BYTE v39[10];
  __int16 v40;
  void **v41;

  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 144))
  {
    v4 = (int *)(a2 + 4);
    sub_1000C1928((uint64_t)&v34, (_DWORD *)(a2 + 4));
    sub_1001CB024((uint64_t)&v34, -1, 0.0, 0.0, *(double *)(a2 + 152), *(double *)(a2 + 160));
    if (sub_1001C8DA8(&v34))
    {
      v5 = sub_1001C85FC(a2 + 184, &v34);
      v6 = v5;
      if (!v5 || !sub_1001C9408(v5, *(_BYTE *)(v3 + 128)))
        goto LABEL_41;
      v7 = (*(double (**)(_QWORD))(**(_QWORD **)(v3 + 168) + 16))(*(_QWORD *)(v3 + 168));
      v8 = sub_1001C9C90(v6, v7);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v10 = *v4;
        sub_100BCC240(&v34, &__p);
        v11 = SHIBYTE(v33) >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v39 = v8;
        *(_WORD *)&v39[4] = 1024;
        *(_DWORD *)&v39[6] = (__int16)v10;
        v40 = 2080;
        v41 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TILE: updating mtime, %d, type, %d, tileid, %s", buf, 0x18u);
        if (SHIBYTE(v33) < 0)
          operator delete(__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_41;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
      v12 = qword_1022A02D8;
      v13 = *v4;
      sub_100BCC240(&v34, v27);
      v14 = v28 >= 0 ? v27 : (void **)v27[0];
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v8;
      v30 = 1024;
      v31 = (__int16)v13;
      v32 = 2080;
      v33 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "TILE: updating mtime, %d, type, %d, tileid, %s", &__p, 24, v26);
      v16 = v15;
      if (v28 < 0)
        operator delete(v27[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::updateTileRelevancy()_block_invoke", "%s\n", v16);
      if (v16 == (char *)buf)
        goto LABEL_41;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      v24 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CoarseTile, Invalid tile id!, #CloneMe", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_41;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217D9C0);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "CoarseTile, Invalid tile id!, #CloneMe", &__p, 2);
      v16 = (char *)v25;
      sub_100512490("Generic", 1, 0, 0, "void CLCoarseCellTilesManager::updateTileRelevancy()_block_invoke", "%s\n", v25);
      if (v16 == (char *)buf)
        goto LABEL_41;
    }
    free(v16);
LABEL_41:
    if (v37 < 0)
      operator delete(v36);
    return;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
  v17 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v18 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v18 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v39 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: tiles, %s, not active", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217D9E0);
    v21 = *(_QWORD *)(a2 + 8);
    v20 = a2 + 8;
    v19 = v21;
    if (*(char *)(v20 + 23) >= 0)
      v19 = v20;
    v34 = 136315138;
    v35 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: tiles, %s, not active", (const char *)&v34);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::updateTileRelevancy()_block_invoke", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
}

void sub_100CBB5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100CBB624(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217D9C0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileSched, coarsecell, called, %{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217D9C0);
    v9 = 134349056;
    v10 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, coarsecell, called, %{public}ld", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCoarseCellTilesManager::onScheduledTileDownloadsCallback(CLTileDownloadReachabilityRequirement)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
  return sub_100CB4B2C(a1, v5);
}

BOOL sub_100CBB7E8(uint64_t a1, uint64_t a2)
{
  return sub_100CBB624(a1 - 112, a2);
}

void sub_100CBB7F0()
{
  operator new();
}

void sub_100CBB89C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100CBB8D8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10217DB80;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

id sub_100CBB9AC(uint64_t a1)
{
  return objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLCoarseCellTilesManager")), "syncgetDoSync:", a1);
}

void sub_100CBB9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217D9A0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10217D9A0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100CBBC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FAD80);
}

BOOL sub_100CBBC6C(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[52];
  void *__p[2];
  __int128 v46;
  char v47;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        buf[0] = 0;
        memset(&buf[4], 0, 48);
        *(_OWORD *)__p = 0u;
        v46 = 0u;
        v47 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100CBE484();
        }
        if (SBYTE11(v46) < 0)
          operator delete(*(void **)((char *)__p + 4));
        if (SBYTE3(__p[0]) < 0)
          operator delete(*(void **)&buf[32]);
        if ((buf[31] & 0x80000000) != 0)
          operator delete(*(void **)&buf[8]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FAD81;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217D9A0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217D9A0);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100CBC11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100CBC13C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217D9A0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217D9A0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100CBC3BC(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217D9A0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217D9A0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100CBC744(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  *(_QWORD *)a3 = *(_QWORD *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v12 + 56));
  v13 = *(_BYTE *)(v12 + 84);
  *(_DWORD *)(a3 + 80) = *(_DWORD *)(v12 + 80);
  *(_BYTE *)(a3 + 84) = v13;
  return 1;
}

uint64_t sub_100CBC7F0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100CBDD78(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100CBC89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CBC8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v4[4];
  void *v5[2];
  void *v6[4];
  void *__p[2];
  __int128 v8;
  char v9;

  v4[0] = 0;
  *(_OWORD *)v5 = 0u;
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (SBYTE11(v8) < 0)
    operator delete(*(void **)((char *)__p + 4));
  if (SBYTE3(__p[0]) < 0)
    operator delete(*(void **)((char *)&v6[1] + 4));
  if (SBYTE3(v6[1]) < 0)
    operator delete(*(void **)((char *)v5 + 4));
}

void sub_100CBC93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CBC950(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217D9A0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100CBDD78(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100CBD810();
    os_activity_scope_leave(&state);
  }
}

void sub_100CBCF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100CBCFB8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217D9A0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217D9A0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217D9A0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217D9A0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217D9A0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217D9A0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100CBD564(uint64_t a1)
{
  sub_100CBE424(a1);
  operator delete();
}

id sub_100CBD588(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100CBE000(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100CBD5D4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CBD600(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100CBD62C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CBD658(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_100CB3144(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100CBD6CC(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100CBD6F8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100067A00(a2 + 24, *(char **)(a2 + 32));
    sub_1008B9D24(a2, *(_QWORD **)(a2 + 8));
    operator delete();
  }
}

uint64_t sub_100CBD748(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  sub_10055D4D0(a1 + 232);
  sub_100067A00(a1 + 208, *(char **)(a1 + 216));
  sub_1008B9D24(a1 + 184, *(_QWORD **)(a1 + 192));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100CBD810()
{
  operator new();
}

void sub_100CBD8A4()
{
  operator delete();
}

void sub_100CBD8C8(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100CBE000(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100CBDC9C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217D9A0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217D9A0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100CBDC9C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100CBE000(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

_QWORD *sub_100CBDD78@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_100CBDDD0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100CBDDBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100CBDDD0(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = off_10217DB10;
  a1[1] = 0;
  sub_100CBDE8C((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100CBDE08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100CBDE1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217DB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CBDE30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217DB10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100CBDE64(uint64_t a1)
{
  char v1;

  sub_100C13204((uint64_t)&v1, a1 + 24);
}

uint64_t sub_100CBDE8C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  int v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  v6 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100115CE4(v6, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v6 = v7;
  }
  v8 = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v8;
  return a1;
}

void sub_100CBDF5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CBDF90(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

id sub_100CBE000(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100CBE04C(a1);
  else
    return 0;
}

id sub_100CBE04C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217DB50);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C20835 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217DB50);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217DB50);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C20835 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217DB50);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCoarseCellTilesManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100CBE3F8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100CBE424(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10217DB80;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100CBE484()
{
  operator new();
}

void sub_100CBE518()
{
  operator delete();
}

uint64_t sub_100CBE53C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

void sub_100CBE5AC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C20670;
      v1[3] = unk_101C20680;
      v1[4] = xmmword_101C20690;
      v1[0] = xmmword_101C20650;
      v1[1] = unk_101C20660;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100CBE680(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100CBE698()
{
  sub_1015A2E04(qword_102307A88, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307A88, (void *)&_mh_execute_header);
}

void sub_100CBE6DC(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  operator new[]();
}

void sub_100CBE7D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(char *)(v1 + 103) < 0)
    operator delete(*(void **)(v1 + 80));
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CBE804(uint64_t a1)
{
  uint64_t *i;
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 48);
  for (i = *(uint64_t **)(a1 + 56); v2 != i; ++v2)
  {
    if (*v2)
    {
      sub_100CD0D70(*v2);
      i = *(uint64_t **)(a1 + 56);
    }
  }
}

void sub_100CBE848(uint64_t a1, const char *a2)
{
  FILE *v4;
  FILE *v5;
  size_t v6;
  int v7;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  NSObject *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  __int16 v37;
  _WORD __nitems[7];
  int v39;
  int v40;
  _BYTE v41[11];
  _DWORD __ptr[2];
  __int16 v43;
  int v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  int v48;

  sub_100CBE804(a1);
  *(_QWORD *)&__nitems[3] = 0;
  *(_DWORD *)&__nitems[1] = 0;
  v4 = fopen(a2, "rb");
  if (!v4)
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
    v12 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Could not open prototype file", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
      LOWORD(__ptr[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Could not open prototype file", __ptr, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    goto LABEL_52;
  }
  v5 = v4;
  v6 = fread(&__nitems[5], 4uLL, 1uLL, v4);
  v7 = *(_DWORD *)&__nitems[5];
  if (v6 == 1 && *(_DWORD *)&__nitems[5] == 1611526157)
  {
    if (fread(&__nitems[2], 2uLL, 1uLL, v5) != 1)
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
      v21 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning Error reading number of prototypes", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_51;
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
      LOWORD(__ptr[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Error reading number of prototypes", __ptr, 2);
      v11 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v34);
      goto LABEL_103;
    }
    if (__nitems[2] >= 0x3E8u)
      v15 = 1000;
    else
      v15 = __nitems[2];
    __nitems[2] = v15;
    sub_100CC0150(a1 + 48, v15);
    if ((_DWORD)v15)
    {
      __nitems[0] = 0;
      if (fread((char *)__nitems + 1, 1uLL, 1uLL, v5) == 1)
      {
        v16 = HIBYTE(__nitems[0]);
        if (fread(__ptr, 1uLL, HIBYTE(__nitems[0]), v5) == v16)
        {
          if (fread(__nitems, 1uLL, 1uLL, v5) == 1)
          {
            v17 = LOBYTE(__nitems[0]);
            if (fread(v41, 1uLL, LOBYTE(__nitems[0]), v5) == v17)
            {
              if (fread(&__nitems[3], 4uLL, 1uLL, v5) == 1)
              {
                if (fread(&__nitems[1], 2uLL, 1uLL, v5) != 1)
                {
                  if (qword_10229FCF0 != -1)
                    dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
                  v18 = qword_10229FCF8;
                  if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "You are reading an older prototype file.", buf, 2u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_10229FCF0 != -1)
                      dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
                    LOWORD(v39) = 0;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "You are reading an older prototype file.", &v39, 2);
                    v20 = (uint8_t *)v19;
                    sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v19);
                    if (v20 != buf)
                      free(v20);
                  }
                  __nitems[1] = 0;
                }
                v37 = 0;
                if (fread(&v37, 2uLL, 1uLL, v5) == 1)
                  operator new[]();
                if (qword_10229FCF0 != -1)
                  dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
                v33 = qword_10229FCF8;
                if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67240192;
                  v46 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Error reading number of accelerometer samples for prototype %{public}d", buf, 8u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_99;
                bzero(buf, 0x65CuLL);
                if (qword_10229FCF0 != -1)
                  dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
                v39 = 67240192;
                v40 = 0;
                LODWORD(v36) = 8;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Error reading number of accelerometer samples for prototype %{public}d", &v39, v36);
                v24 = (uint8_t *)v35;
                sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v35);
              }
              else
              {
                if (qword_10229FCF0 != -1)
                  dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
                v31 = qword_10229FCF8;
                if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning Error reading max distance", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_99;
                bzero(buf, 0x65CuLL);
                if (qword_10229FCF0 != -1)
                  dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
                LOWORD(v39) = 0;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Error reading max distance", &v39, 2);
                v24 = (uint8_t *)v32;
                sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v32);
              }
            }
            else
            {
              if (qword_10229FCF0 != -1)
                dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
              v29 = qword_10229FCF8;
              if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67240192;
                v46 = 0;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning Error reading rawName of prototype %{public}d", buf, 8u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_99;
              bzero(buf, 0x65CuLL);
              if (qword_10229FCF0 != -1)
                dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
              v39 = 67240192;
              v40 = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Error reading rawName of prototype %{public}d", &v39, 8);
              v24 = (uint8_t *)v30;
              sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v30);
            }
          }
          else
          {
            if (qword_10229FCF0 != -1)
              dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
            v27 = qword_10229FCF8;
            if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67240192;
              v46 = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning Error reading rawName length of prototype %{public}d", buf, 8u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_99;
            bzero(buf, 0x65CuLL);
            if (qword_10229FCF0 != -1)
              dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
            v39 = 67240192;
            v40 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Error reading rawName length of prototype %{public}d", &v39, 8);
            v24 = (uint8_t *)v28;
            sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v28);
          }
        }
        else
        {
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
          v25 = qword_10229FCF8;
          if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67240192;
            v46 = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Error reading name of prototype %{public}d", buf, 8u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_99;
          bzero(buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
          v39 = 67240192;
          v40 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Error reading name of prototype %{public}d", &v39, 8);
          v24 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v26);
        }
      }
      else
      {
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
        v22 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          v46 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Error reading name length of prototype %{public}d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_99;
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
        v39 = 67240192;
        v40 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Error reading name length of prototype %{public}d", &v39, 8);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v23);
      }
      if (v24 != buf)
        free(v24);
    }
LABEL_99:
    fclose(v5);
    goto LABEL_53;
  }
  if (qword_10229FCF0 != -1)
    dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
  v9 = qword_10229FCF8;
  if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    v46 = v7;
    v47 = 1026;
    v48 = 1611526157;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Error reading magic number or number (%{public}x) does not match expected number (0x%{public}x)", buf, 0xEu);
  }
  if (!sub_1001BFF7C(115, 2))
    goto LABEL_51;
  bzero(buf, 0x65CuLL);
  if (qword_10229FCF0 != -1)
    dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
  __ptr[0] = 67240448;
  __ptr[1] = v7;
  v43 = 1026;
  v44 = 1611526157;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning Error reading magic number or number (%{public}x) does not match expected number (0x%{public}x)", __ptr, 14);
  v11 = (uint8_t *)v10;
  sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v10);
LABEL_103:
  if (v11 != buf)
    free(v11);
LABEL_51:
  fclose(v5);
LABEL_52:
  sub_100CBE804(a1);
LABEL_53:
  *(_DWORD *)(a1 + 40) = (int)((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) / *(_DWORD *)a1;
}

void sub_100CBFA3C()
{
  operator delete();
}

uint64_t sub_100CBFA6C(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 8))
    operator delete[]();
  if (*(_QWORD *)(a1 + 16))
    operator delete[]();
  if (*(_QWORD *)(a1 + 24))
    operator delete[]();
  if (*(_QWORD *)(a1 + 32))
    operator delete[]();
  sub_100CBFB28(a1);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100CBFB28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t i;
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 48);
  v1 = *(_QWORD **)(a1 + 56);
  for (i = a1 + 48; v3 != v1; ++v3)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v1 = *(_QWORD **)(a1 + 56);
    }
  }
  sub_100CC0150(i, 0);
}

uint64_t sub_100CBFB8C(unsigned int *a1, __n128 *a2, _DWORD *a3, _DWORD *a4, _QWORD *a5, __n128 a6, int8x16_t a7)
{
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t result;
  unsigned int v16;
  NSObject *v17;
  char *v18;
  unsigned int v19;
  NSObject *global_queue;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  float *v26;
  float v27;
  uint64_t i;
  float v29;
  uint64_t v30;
  _QWORD v31[6];
  unsigned int v32;
  int v33;
  _QWORD block[6];
  unsigned int v35;
  unsigned int v36;
  int v37;

  v12 = (_QWORD *)*((_QWORD *)a1 + 9);
  if (v12)
    a6 = sub_100CC01AC(v12, a2);
  if (*a1 == 1)
  {
    sub_100CBFDC8((uint64_t)a1, a2, 0, ((*((_QWORD *)a1 + 7) - *((_QWORD *)a1 + 6)) >> 3) - 1, *((__int32 **)a1 + 1), *((_DWORD **)a1 + 2), *((uint64_t **)a1 + 4), *((_QWORD **)a1 + 3), (int8x16_t)a6, a7);
    v13 = (_DWORD *)*((_QWORD *)a1 + 2);
    *a3 = **((_DWORD **)a1 + 1);
    *a4 = *v13;
    v14 = *((_QWORD *)a1 + 4);
    *a5 = **((_QWORD **)a1 + 3);
    return *(_QWORD *)v14;
  }
  else
  {
    v16 = a1[10];
    v17 = dispatch_group_create();
    v18 = "ix12CNMatrixBaseIiEE";
    if ((int)*a1 <= 1)
    {
      global_queue = dispatch_get_global_queue(2, 0);
      v22 = 0;
    }
    else
    {
      v19 = v16 - 1;
      global_queue = dispatch_get_global_queue(2, 0);
      v21 = 0;
      v22 = 0;
      do
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = sub_100CC00F4;
        block[3] = &unk_10217DB98;
        block[4] = a1;
        block[5] = a2;
        v35 = v22;
        v36 = v19;
        v37 = v21;
        dispatch_group_async(v17, global_queue, block);
        v22 = v19 + 1;
        v19 += a1[10];
        ++v21;
      }
      while (v21 < (int)(*a1 - 1));
      v18 = "N8cnmatrix12CNMatrixBaseIiEE" + 8;
    }
    v23 = ((*((_QWORD *)a1 + 7) - *((_QWORD *)a1 + 6)) >> 3) - 1;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = *((_QWORD *)v18 + 270);
    v31[2] = sub_100CC0120;
    v31[3] = &unk_10217DBB8;
    v31[4] = a1;
    v31[5] = a2;
    v32 = v22;
    v33 = v23;
    dispatch_group_async(v17, global_queue, v31);
    dispatch_group_wait(v17, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v17);
    v24 = (uint64_t *)*((_QWORD *)a1 + 4);
    result = *v24;
    v25 = *a1;
    if ((int)v25 >= 2)
    {
      v26 = (float *)*((_QWORD *)a1 + 1);
      v27 = *v26;
      for (i = 1; i != v25; ++i)
      {
        v29 = v26[i];
        if (v29 < v27)
        {
          v30 = *((_QWORD *)a1 + 3);
          *a4 = *(_DWORD *)(*((_QWORD *)a1 + 2) + 4 * i);
          result = v24[i];
          *a5 = *(_QWORD *)(v30 + 8 * i);
          v27 = v29;
        }
      }
    }
  }
  return result;
}

void sub_100CBFDC8(uint64_t a1, _QWORD *a2, int a3, int a4, __int32 *a5, _DWORD *a6, uint64_t *a7, _QWORD *a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  NSObject *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  int v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;

  *a5 = 2139095039;
  *a7 = 0;
  if (a3 <= a4)
  {
    v14 = 0;
    v15 = 8 * a3;
    v16 = a4 - a3 + 1;
    a9.i64[0] = 134349570;
    do
    {
      sub_100CD0D80(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15 + 8 * v14), a2, a9, a10);
      v18 = v17;
      v20 = v19;
      v21 = v17;
      if (sub_100CD0E00(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15 + 8 * v14)) < v17 && v21 != 3.4028e38)
      {
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
        v23 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
        {
          v24 = sub_100CD0E00(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15 + 8 * v14));
          v25 = sub_100CD0DE4(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15 + 8 * v14));
          *(_DWORD *)buf = 134349570;
          v41 = v21;
          v42 = 2050;
          v43 = v24;
          v44 = 2082;
          v45 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning Cost of match %{public}f exceeds max of %{public}f allowed for prototype %{public}s", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217DBF8);
          v26 = qword_10229FCF8;
          v27 = sub_100CD0E00(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15 + 8 * v14));
          v28 = sub_100CD0DE4(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15 + 8 * v14));
          v34 = 134349570;
          v35 = v21;
          v36 = 2050;
          v37 = v27;
          v38 = 2082;
          v39 = v28;
          LODWORD(v31) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Cost of match %{public}f exceeds max of %{public}f allowed for prototype %{public}s", &v34, v31);
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "void CLPrototypeSet::addSampleToSubset(const CLDtwSample &, int, int, float &, float &, const char *&, double &)", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
      }
      a9.i32[0] = *a5;
      if (*(float *)a5 > v21)
      {
        *(float *)a5 = v18;
        *a7 = sub_100CD0DE4(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15 + 8 * v14));
        *(float *)a9.i32 = sub_100CD0E00(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v15 + 8 * v14));
        *a6 = a9.i32[0];
        *a8 = v20;
      }
      ++v14;
    }
    while (v16 != (_DWORD)v14);
  }
}

void sub_100CC00F4(uint64_t a1, int8x16_t a2, int8x16_t a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 32);
  sub_100CBFDC8((uint64_t)v3, *(_QWORD **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), (__int32 *)(v3[1] + 4 * *(int *)(a1 + 56)), (_DWORD *)(v3[2] + 4 * *(int *)(a1 + 56)), (uint64_t *)(v3[4] + 8 * *(int *)(a1 + 56)), (_QWORD *)(v3[3] + 8 * *(int *)(a1 + 56)), a2, a3);
}

void sub_100CC0120(uint64_t a1, int8x16_t a2, int8x16_t a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 32);
  sub_100CBFDC8((uint64_t)v3, *(_QWORD **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), (__int32 *)(v3[1] + 4 * (*(int *)v3 - 1)), (_DWORD *)(v3[2] + 4 * (*(int *)v3 - 1)), (uint64_t *)(v3[4] + 8 * (*(int *)v3 - 1)), (_QWORD *)(v3[3] + 8 * (*(int *)v3 - 1)), a2, a3);
}

void sub_100CC0150(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_100CC056C((void **)a1, a2 - v2);
  }
}

void sub_100CC0180(id a1)
{
  qword_10229FCF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

__n128 sub_100CC01AC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100CC0258(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_100CC0258(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100CC0520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100CC056C(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      sub_100259694();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_10025E6A0(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t sub_100CC0944(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(objc_msgSend(*(id *)(a1 + 32), "delegate"), "fsm:didYieldTrack:");
  if ((result & 1) != 0)
    return (uint64_t)_objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "delegate"), "fsm:didYieldTrack:", *(_QWORD *)(a1 + 32), a2);
  return result;
}

void sub_100CC0BBC(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100CC0BE8(uint64_t *a1)
{
  uint64_t **v1;
  unsigned int v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = (uint64_t **)a1;
  v2 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    if ((unint64_t)a1[1] < 6)
      return 0;
    v3 = (char *)*a1;
  }
  else
  {
    v3 = (char *)a1;
    if (v2 < 6)
      return 0;
  }
  result = 0;
  v5 = ((((uint64_t)v3[2] << 8) | ((uint64_t)v3[1] << 16) | v3[3]) << 16) | ((uint64_t)v3[4] << 8) | v3[5];
  if (v5 <= 0x5041414343)
  {
    if (v5 <= 0x474E475340)
    {
      if (v5 <= 0x4742475355)
      {
        if (v5 > 0x4742474740)
        {
          v6 = v5 == 0x4742474741;
          v7 = 1111970625;
        }
        else
        {
          v6 = v5 == 0x4741475341;
          v7 = 1095193430;
        }
      }
      else if (v5 <= 0x4749475355)
      {
        v6 = v5 == 0x4742475356;
        v7 = 1112689987;
      }
      else
      {
        v6 = v5 == 0x4749475356 || v5 == 0x474C475356;
        v7 = 1313295955;
      }
      goto LABEL_57;
    }
    if (v5 <= 0x4750524D42)
    {
      if (v5 <= 0x4750475340)
      {
        v6 = v5 == 0x474E475341;
        v7 = 1346848577;
      }
      else
      {
        v6 = v5 == 0x4750475341 || v5 == 0x4750475356;
        v7 = 1346913364;
      }
      goto LABEL_57;
    }
    if (v5 <= 0x4751475340)
    {
      v6 = v5 == 0x4750524D43;
      v7 = 1347834951;
LABEL_57:
      v10 = v7 & 0xFFFF0000FFFFFFFFLL | 0x4700000000;
      goto LABEL_58;
    }
    v6 = v5 == 0x4751475341 || v5 == 0x4751475356;
    v10 = 0x494D475341;
LABEL_58:
    if (!v6 && v5 != v10)
      return result;
    return v5;
  }
  if (v5 <= 0x50514D4530)
  {
    if (v5 > 0x50474C4F51)
    {
      if (v5 == 0x50474C4F52)
      {
        result = 0x50474C4F52;
        if ((v2 & 0x80) != 0)
        {
          if ((unint64_t)v1[1] <= 0xB)
            return result;
          v1 = (uint64_t **)*v1;
        }
        else if (v2 <= 0xB)
        {
          return result;
        }
        result = ((uint64_t)*((char *)v1 + 10) << 8) | ((uint64_t)*((char *)v1 + 9) << 16) | *((char *)v1 + 11);
        if (result > 5260864)
        {
          if (result <= 5456211)
          {
            if (result > 5265233)
            {
              if (result == 5265234)
                return result;
              v12 = 5392708;
            }
            else
            {
              if (result == 5260865)
                return result;
              v12 = 5260877;
            }
          }
          else if (result <= 5461056)
          {
            if (result == 5456212)
              return result;
            v12 = 5458255;
          }
          else
          {
            if (result == 5461057 || result == 5461571)
              return result;
            v12 = 5590595;
          }
        }
        else if (result <= 4672590)
        {
          if (result > 4606285)
          {
            if (result == 4606286)
              return result;
            v12 = 4606296;
          }
          else
          {
            if (result == 4278083)
              return result;
            v12 = 4412504;
          }
        }
        else if (result <= 5002064)
        {
          if (result == 4672591)
            return result;
          v12 = 4738113;
        }
        else
        {
          if (result == 5002065 || result == 5129559)
            return result;
          v12 = 5133901;
        }
        if (result != v12)
          return 0x50474C4F52;
        return result;
      }
      v6 = v5 == 0x5051475341;
      v9 = 1363628886;
    }
    else
    {
      v6 = v5 == 0x5041414344 || v5 == 0x5041474344;
      v9 = 1095975748;
    }
LABEL_48:
    v10 = v9 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
    goto LABEL_58;
  }
  if (v5 > 0x5051504452)
  {
    if (v5 > 0x5051584648)
    {
      v6 = v5 == 0x5051584649 || v5 == 0x515A475341;
      v10 = 0x515A475356;
      goto LABEL_58;
    }
    v6 = v5 == 0x5051504453 || v5 == 0x5051504531;
    v9 = 1364215091;
    goto LABEL_48;
  }
  if ((unint64_t)(v5 - 0x50514D4531) <= 6 && v5 != 344961402166)
    return v5;
  return result;
}

uint64_t sub_100CC110C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = 0;
  if (a1 <= 0x4750474740)
  {
    if (a1 > 0x4742474740)
    {
      if (a1 <= 0x4742524D42)
      {
        if (a1 == 0x4742474741 || a1 == 0x4742475341)
          return 1;
        v5 = 1111970646;
      }
      else if (a1 > 0x474C475355)
      {
        if (a1 == 0x474C475356)
          return 1;
        v5 = 1313297217;
      }
      else
      {
        if (a1 == 0x4742524D43)
          return 1;
        v5 = 1229411158;
      }
    }
    else
    {
      if (a1 <= 5456211)
      {
        if (a1 == 4278083 || a1 == 4412504)
          return 1;
        v4 = 4738113;
LABEL_41:
        if (a1 != v4)
          return result;
        return 1;
      }
      if (a1 <= 5461570)
      {
        if (a1 != 5456212)
        {
          v4 = 5461057;
          goto LABEL_41;
        }
        return 1;
      }
      if (a1 == 5461571)
        return 1;
      v5 = 1095193430;
    }
LABEL_36:
    v4 = v5 & 0xFFFF0000FFFFFFFFLL | 0x4700000000;
    goto LABEL_41;
  }
  if (a1 <= 0x50514D4530)
  {
    if (a1 > 0x4750524D42)
    {
      if (a1 == 0x4750524D43 || a1 == 0x4751475356)
        return 1;
      v7 = 1095975748;
      goto LABEL_40;
    }
    if (a1 == 0x4750474741 || a1 == 0x4750475341)
      return 1;
    v5 = 1346851670;
    goto LABEL_36;
  }
  if (a1 > 0x5051504452)
  {
    if (a1 > 0x5051504532)
    {
      if (a1 != 0x5051584649)
      {
        v6 = 17715;
        goto LABEL_39;
      }
    }
    else if (a1 != 0x5051504453)
    {
      v6 = 17713;
LABEL_39:
      v7 = v6 & 0xFFFFFFFF0000FFFFLL | 0x51500000;
LABEL_40:
      v4 = v7 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
      goto LABEL_41;
    }
    return 1;
  }
  v3 = a1 - 0x50514D4531;
  if (v3 <= 6 && ((1 << v3) & 0x5B) != 0)
    return 1;
  return result;
}

void sub_100CC1394(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v2;
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = a1;
  if ((char)a1[23] < 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (!v4)
    {
      sub_100115CE4(a2, *(void **)a1, 0);
      return;
    }
  }
  else
  {
    v4 = a1[23];
    if (!a1[23])
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
      return;
    }
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, v4);
  v5 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80u) == 0)
  {
    v6 = v2[23];
  }
  else
  {
    v2 = *(unsigned __int8 **)v2;
    v6 = v5;
  }
  for (; v6; --v6)
  {
    v7 = *v2;
    if (v7 != 10 && v7 != 13)
      std::string::push_back(a2, v7);
    ++v2;
  }
}

void sub_100CC1458(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100CC1478(unsigned __int8 *a1, int a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  double v6;
  std::string *p_p;
  uint64_t v8;
  double v9;
  std::string *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  double v14;
  std::string *v15;
  uint64_t v16;
  double v17;
  std::string *v18;
  const char *v19;
  NSObject *v20;
  std::string *v21;
  std::string *v22;
  const char *v23;
  NSObject *v24;
  std::string *v25;
  std::string *v26;
  const char *v27;
  NSObject *v28;
  std::string *v29;
  std::string *v30;
  const char *v31;
  NSObject *v32;
  std::string *v33;
  std::string *v34;
  const char *v35;
  std::string __p;
  int v37;
  _BYTE v38[14];
  __int16 v39;
  std::string *v40;
  uint8_t buf[4];
  _BYTE v42[14];
  __int16 v43;
  std::string *v44;

  sub_100CC1394(a1, &__p);
  v3 = sub_100CC0BE8((uint64_t *)&__p);
  v4 = sub_100CC110C(v3);
  if (sub_100CC2558(v3))
  {
    if (v4)
    {
      if (v3 == 0x4750475341)
      {
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_10217DC60);
        v5 = qword_1022A0118;
        if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
        {
          v6 = sub_1001FCBB4();
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 134218499;
          *(double *)v42 = v6;
          *(_WORD *)&v42[8] = 1026;
          *(_DWORD *)&v42[10] = a2;
          v43 = 2081;
          v44 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%.1lf,%{public}c,NMEA:%{private}s", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0110 != -1)
            dispatch_once(&qword_1022A0110, &stru_10217DC60);
          v8 = qword_1022A0118;
          v9 = sub_1001FCBB4();
          v10 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v37 = 134218499;
          *(double *)v38 = v9;
          *(_WORD *)&v38[8] = 1026;
          *(_DWORD *)&v38[10] = a2;
          v39 = 2081;
          v40 = v10;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "%.1lf,%{public}c,NMEA:%{private}s", &v37, 28);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v11);
          goto LABEL_30;
        }
        goto LABEL_75;
      }
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_10217DC60);
      v28 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_INFO))
      {
        v29 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67240451;
        *(_DWORD *)v42 = a2;
        *(_WORD *)&v42[4] = 2081;
        *(_QWORD *)&v42[6] = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%{public}c,NMEA:%{private}s", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_75;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_10217DC60);
      v30 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v37 = 67240451;
      *(_DWORD *)v38 = a2;
      *(_WORD *)&v38[4] = 2081;
      *(_QWORD *)&v38[6] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 1, "%{public}c,NMEA:%{private}s", &v37, 18);
      v12 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v31);
    }
    else
    {
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_10217DC60);
      v20 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEBUG))
      {
        v21 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67240451;
        *(_DWORD *)v42 = a2;
        *(_WORD *)&v42[4] = 2081;
        *(_QWORD *)&v42[6] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%{public}c,NMEA:%{private}s", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_75;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_10217DC60);
      v22 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v37 = 67240451;
      *(_DWORD *)v38 = a2;
      *(_WORD *)&v38[4] = 2081;
      *(_QWORD *)&v38[6] = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 2, "%{public}c,NMEA:%{private}s", &v37, 18);
      v12 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v23);
    }
LABEL_83:
    if (v12 == buf)
      goto LABEL_75;
    goto LABEL_84;
  }
  if (!v4)
  {
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_10217DC60);
    v24 = qword_1022A0118;
    if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEBUG))
    {
      v25 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)v42 = a2;
      *(_WORD *)&v42[4] = 2082;
      *(_QWORD *)&v42[6] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%{public}c,NMEA:%{public}s", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_75;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_10217DC60);
    v26 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v37 = 67240450;
    *(_DWORD *)v38 = a2;
    *(_WORD *)&v38[4] = 2082;
    *(_QWORD *)&v38[6] = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 2, "%{public}c,NMEA:%{public}s", &v37, 18);
    v12 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v27);
    goto LABEL_83;
  }
  if (v3 != 5461057)
  {
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_10217DC60);
    v32 = qword_1022A0118;
    if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
    {
      v33 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)v42 = a2;
      *(_WORD *)&v42[4] = 2082;
      *(_QWORD *)&v42[6] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%{public}c,NMEA:%{public}s", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_75;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_10217DC60);
    v34 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v37 = 67240450;
    *(_DWORD *)v38 = a2;
    *(_WORD *)&v38[4] = 2082;
    *(_QWORD *)&v38[6] = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 0, "%{public}c,NMEA:%{public}s", &v37, 18);
    v12 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v35);
    goto LABEL_83;
  }
  if (qword_1022A0110 != -1)
    dispatch_once(&qword_1022A0110, &stru_10217DC60);
  v13 = qword_1022A0118;
  if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
  {
    v14 = sub_1001FCBB4();
    v15 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 134218498;
    *(double *)v42 = v14;
    *(_WORD *)&v42[8] = 1026;
    *(_DWORD *)&v42[10] = a2;
    v43 = 2082;
    v44 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%.1lf,%{public}c,NMEA:%{public}s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_10217DC60);
    v16 = qword_1022A0118;
    v17 = sub_1001FCBB4();
    v18 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v37 = 134218498;
    *(double *)v38 = v17;
    *(_WORD *)&v38[8] = 1026;
    *(_DWORD *)&v38[10] = a2;
    v39 = 2082;
    v40 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "%.1lf,%{public}c,NMEA:%{public}s", &v37, 28);
    v12 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v19);
LABEL_30:
    if (v12 == buf)
      goto LABEL_75;
LABEL_84:
    free(v12);
  }
LABEL_75:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100CC1E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100CC1EA4(unsigned __int8 *a1)
{
  sub_100CC1478(a1, 69);
}

void sub_100CC1EAC(unsigned __int8 *a1)
{
  sub_100CC1478(a1, 65);
}

void sub_100CC1EB8(unsigned __int8 *a1, int a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  std::string *p_p;
  std::string *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  std::string *v11;
  std::string *v12;
  const char *v13;
  NSObject *v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  NSObject *v18;
  std::string *v19;
  std::string *v20;
  const char *v21;
  std::string __p;
  int v23;
  std::string *v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  std::string *v28;
  __int16 v29;
  int v30;

  sub_100CC1394(a1, &__p);
  v3 = sub_100CC0BE8((uint64_t *)&__p);
  v4 = sub_100CC110C(v3);
  if (sub_100CC2558(v3))
  {
    if (v4)
    {
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_10217DC60);
      v5 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_INFO))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136380931;
        v28 = p_p;
        v29 = 1026;
        v30 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "STARK,NMEA:%{private}s,sampleCount,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_10217DC60);
        v7 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v23 = 136380931;
        v24 = v7;
        v25 = 1026;
        v26 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 1, "STARK,NMEA:%{private}s,sampleCount,%{public}d", &v23, 18);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "v lg(s, i)", "%s\n", v8);
LABEL_55:
        if (v9 != buf)
          free(v9);
      }
    }
    else
    {
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_10217DC60);
      v14 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEBUG))
      {
        v15 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136380931;
        v28 = v15;
        v29 = 1026;
        v30 = a2;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "STARK,NMEA:%{private}s,sampleCount,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_10217DC60);
        v16 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v23 = 136380931;
        v24 = v16;
        v25 = 1026;
        v26 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 2, "STARK,NMEA:%{private}s,sampleCount,%{public}d", &v23, 18);
        v9 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "v lg(s, i)", "%s\n", v17);
        goto LABEL_55;
      }
    }
  }
  else if (v4)
  {
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_10217DC60);
    v10 = qword_1022A0118;
    if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
    {
      v11 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446466;
      v28 = v11;
      v29 = 1026;
      v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "STARK,NMEA:%{public}s,sampleCount,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_10217DC60);
      v12 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v23 = 136446466;
      v24 = v12;
      v25 = 1026;
      v26 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 0, "STARK,NMEA:%{public}s,sampleCount,%{public}d", &v23, 18);
      v9 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "v lg(s, i)", "%s\n", v13);
      goto LABEL_55;
    }
  }
  else
  {
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_10217DC60);
    v18 = qword_1022A0118;
    if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEBUG))
    {
      v19 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446466;
      v28 = v19;
      v29 = 1026;
      v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "STARK,NMEA:%{public}s,sampleCount,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_10217DC60);
      v20 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v23 = 136446466;
      v24 = v20;
      v25 = 1026;
      v26 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 2, "STARK,NMEA:%{public}s,sampleCount,%{public}d", &v23, 18);
      v9 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "v lg(s, i)", "%s\n", v21);
      goto LABEL_55;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100CC2524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CC2558(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  result = 1;
  if (a1 <= 0x4750484453)
  {
    if (a1 <= 5260864)
    {
      if (a1 > 4672590)
      {
        if (a1 > 5129558)
        {
          if (a1 == 5129559)
            return 0;
          v3 = 5133901;
        }
        else
        {
          if (a1 == 4672591)
            return 0;
          v3 = 4738113;
        }
      }
      else if (a1 > 4606285)
      {
        if (a1 == 4606286)
          return 0;
        v3 = 4606296;
      }
      else
      {
        if (a1 == 4278083)
          return 0;
        v3 = 4412504;
      }
    }
    else if (a1 <= 5456211)
    {
      if (a1 > 5265233)
      {
        if (a1 == 5265234)
          return 0;
        v3 = 5392708;
      }
      else
      {
        if (a1 == 5260865)
          return 0;
        v3 = 5260877;
      }
    }
    else
    {
      if (a1 > 5461056)
      {
        if (a1 != 5461057 && a1 != 5461571)
        {
          v3 = 5590595;
          goto LABEL_45;
        }
        return 0;
      }
      if (a1 == 5456212)
        return 0;
      v3 = 5458255;
    }
LABEL_45:
    if (a1 != v3)
      return result;
    return 0;
  }
  if (a1 <= 0x50514D4530)
  {
    if (a1 > 0x5041474343)
    {
      if (a1 == 0x5041474344 || a1 == 0x5041534344)
        return 0;
      v5 = 1363628865;
    }
    else
    {
      if (a1 == 0x4750484454 || a1 == 0x4750565447)
        return 0;
      v5 = 1094796100;
    }
LABEL_42:
    v3 = v5 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
    goto LABEL_45;
  }
  if (a1 > 0x5051504452)
  {
    if (a1 > 0x5051504532)
    {
      if (a1 == 0x515A475341)
        return 0;
      v6 = 17715;
    }
    else
    {
      if (a1 == 0x5051504453)
        return 0;
      v6 = 17713;
    }
    v5 = v6 & 0xFFFFFFFF0000FFFFLL | 0x51500000;
    goto LABEL_42;
  }
  v4 = a1 - 0x50514D4531;
  if (v4 <= 6 && v4 != 5)
    return 0;
  return result;
}

void sub_100CC27FC(id a1)
{
  qword_1022A0118 = (uint64_t)os_log_create("com.apple.locationd.Position", "NMEA");
}

_QWORD *sub_100CC2828(_QWORD *result, unsigned int a2)
{
  result[2] = 0;
  *result = off_10217DC90;
  result[1] = result + 2;
  result[3] = 0;
  result[4] = result + 4;
  result[5] = result + 4;
  result[6] = 0;
  result[7] = a2;
  return result;
}

_QWORD *sub_100CC2854(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v3)
  {
    v4 = (uint64_t)(result + 1);
    do
    {
      LOBYTE(v5) = 0;
      v6 = 0;
      result = sub_100CC28B0(v4, v2++, &v5);
    }
    while (v2 != v3);
  }
  return result;
}

_QWORD *sub_100CC28B0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;

  result = sub_100191618(a1, a2);
  if ((_QWORD *)(a1 + 8) == result)
  {
    if (*(_QWORD *)(a1 + 16) >= *(_QWORD *)(a1 + 48))
      sub_100CC2C2C(a1);
    v7 = operator new(0x18uLL);
    v8 = *a2;
    v9 = *(_QWORD **)(a1 + 32);
    *v7 = a1 + 24;
    v7[1] = v9;
    v7[2] = v8;
    *v9 = v7;
    v10 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v10;
    v11 = *a3;
    v15 = a2;
    v16 = v11;
    v17 = *((_DWORD *)a3 + 2);
    v12 = *(uint64_t *)((char *)a3 + 12);
    v13 = *((unsigned __int8 *)a3 + 20);
    result = sub_100190878((uint64_t **)a1, a2, (uint64_t)&unk_101B9EB60, &v15);
    v14 = result + 5;
    if (*((unsigned __int8 *)result + 60) == v13)
    {
      if (*((_BYTE *)result + 60))
      {
        *v14 = v16;
        *((_WORD *)result + 24) = v17;
        *(_QWORD *)((char *)result + 52) = v12;
      }
    }
    else if (*((_BYTE *)result + 60))
    {
      *((_BYTE *)result + 60) = 0;
    }
    else
    {
      *v14 = v16;
      *((_DWORD *)result + 12) = v17;
      *(_QWORD *)((char *)result + 52) = v12;
      *((_BYTE *)result + 60) = 1;
    }
    result[8] = v7;
  }
  return result;
}

_QWORD *sub_100CC2A00(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  __int128 v8;
  int v9;
  char v10;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = (uint64_t)(result + 1);
    do
    {
      v8 = *(_OWORD *)(v3 + 5);
      v9 = *((_DWORD *)v3 + 14);
      v10 = 1;
      result = sub_100CC28B0(v4, v3 + 4, (uint64_t *)&v8);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  return result;
}

_QWORD *sub_100CC2A9C(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 16);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  return sub_1000F34E0(v1 + 2);
}

uint64_t sub_100CC2AD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_100CC2AD8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

void sub_100CC2AE0(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  sub_100CC2C74((uint64_t)&v6, *a1, a1[1]);
  a2[1] = 0;
  v3 = a2 + 1;
  *a2 = a2 + 1;
  a2[4] = 0;
  a2[2] = 0;
  a2[3] = a2 + 4;
  a2[8] = 0;
  a2[7] = 0;
  a2[5] = 0;
  a2[6] = a2 + 7;
  sub_100008848((uint64_t)a2, 0);
  v4 = v7;
  *a2 = v6;
  a2[1] = v4;
  v5 = v8;
  a2[2] = v8;
  if (v5)
  {
    v4[2] = v3;
    v6 = &v7;
    v7 = 0;
    v8 = 0;
    v4 = 0;
  }
  else
  {
    *a2 = v3;
  }
  sub_100008848((uint64_t)&v6, v4);
}

uint64_t sub_100CC2B94(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10217DC90;
  v2 = a1 + 8;
  sub_1000F34E0((_QWORD *)(a1 + 32));
  sub_100008848(v2, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_100CC2BD8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10217DC90;
  v2 = a1 + 8;
  sub_1000F34E0((_QWORD *)(a1 + 32));
  sub_100008848(v2, *(_QWORD **)(a1 + 16));
  operator delete();
}

void sub_100CC2C2C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a1 + 24);
  sub_10071D274((uint64_t **)a1, v2 + 2);
  v3 = *v2;
  *(_QWORD *)(v3 + 8) = v2[1];
  *(_QWORD *)v2[1] = v3;
  --*(_QWORD *)(a1 + 40);
  operator delete(v2);
}

uint64_t sub_100CC2C74(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_100CC2CF4((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_100CC2CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100CC2CF4(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_100572A20(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1000145B0(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t sub_100CC2D78(uint64_t a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  id *v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  const char *v9;
  id v10;

  v2 = a2;
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t **)*a2;
  v4 = sub_10055D44C(a1, a2, 1, 1);
  sub_1002433B8(v4 + 16);
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = (id *)(a1 + 88);
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0x3FE0000000000000;
  *(_WORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = xmmword_101BDB710;
  *(_WORD *)(a1 + 192) = 1;
  *(_OWORD *)(a1 + 200) = xmmword_101BDB720;
  *(_WORD *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)v2);
  v6 = *(_OWORD *)(v2 + 7);
  v7 = *(_OWORD *)(v2 + 9);
  v8 = v2[11];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v2 + 5);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(v2 + 3);
  *(_QWORD *)(a1 + 216) = v8;
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 184) = v6;
  if (!*(_BYTE *)(a1 + 169))
  {
    if (*((char *)v2 + 23) >= 0)
      v9 = (const char *)v2;
    else
      v9 = (const char *)*v2;
    *(_QWORD *)(a1 + 96) = dispatch_queue_create(v9, 0);
    sub_100EF4184();
    v10 = objc_msgSend(objc_alloc((Class)GEOMapFeatureAccess), "initWithQueue:", *(_QWORD *)(a1 + 96));
    *v5 = v10;
    objc_msgSend(v10, "setAllowNetworkTileLoad:", *((unsigned __int8 *)v2 + 64));
    objc_msgSend(*v5, "setFlipNegativeTravelDirectionRoads:", 1);
    objc_msgSend(*v5, "setAllowStaleData:", 1);
    objc_msgSend(*v5, "setVisitDoubleTravelDirectionRoadsTwice:", *((_DWORD *)v2 + 6) == 1);
    objc_msgSend(*v5, "setAllowOfflineData:", 1);
    objc_msgSend(*v5, "setPreferStaleData:", *((unsigned __int8 *)v2 + 65));
  }
  return a1;
}

void sub_100CC2EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055D4D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC2F20(uint64_t result)
{
  *(_QWORD *)(result + 56) = 0xBFF0000000000000;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0xBFF0000000000000;
  *(_BYTE *)(result + 224) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  return result;
}

void sub_100CC2F38(uint64_t a1, __int128 **a2, unsigned int a3, __int128 **a4)
{
  __int128 *v4;
  _BYTE *v7;
  _BYTE *v8;
  __int128 *i;
  __int128 *v10;
  char **v11;

  if (*(_BYTE *)(a1 + 168))
  {
    v4 = *a2;
    if (v4)
    {
      v7 = sub_100CC2FEC((uint64_t **)(a1 + 288), v4, 1);
      if (v7)
      {
        v8 = v7;
        if (v7[a3])
          sub_100CC3130(v7, a3);
        v10 = *a4;
        for (i = a4[1]; v10 != i; ++v10)
        {
          if (a3)
          {
            v8[1] = 1;
            v11 = (char **)(v8 + 8);
          }
          else
          {
            *v8 = 1;
            v11 = (char **)(v8 + 32);
          }
          sub_10033F68C(v11, v10);
        }
      }
    }
  }
}

_OWORD *sub_100CC2FEC(uint64_t **a1, __int128 *a2, int a3)
{
  _OWORD *v6;
  __int128 *v8[3];
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  _OWORD v12[3];
  unint64_t v13;
  void **v14;

  if (sub_100CCD8A4((uint64_t)a1, (unint64_t *)a2))
  {
    v8[0] = a2;
    return sub_100CCD904(a1, (unint64_t *)a2, (uint64_t)&unk_101B9EB60, v8) + 3;
  }
  else if (a3)
  {
    v11 = 0;
    memset(v12, 0, sizeof(v12));
    v13 = 0xBFF0000000000000;
    sub_100CCDB18((uint64_t)v8, a2, (uint64_t)&v11);
    sub_100CCDA18(a1, (unint64_t *)v8, (uint64_t)v8);
    v14 = (void **)&v10;
    sub_1002A3684(&v14);
    v14 = (void **)&v9;
    sub_1002A3684(&v14);
    v8[0] = a2;
    v6 = sub_100CCD904(a1, (unint64_t *)a2, (uint64_t)&unk_101B9EB60, v8) + 3;
    v8[0] = (_OWORD *)((char *)&v12[1] + 8);
    sub_1002A3684((void ***)v8);
    v8[0] = v12;
    sub_1002A3684((void ***)v8);
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_100CC3108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_100CCD85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CC3130(_BYTE *a1, int a2)
{
  if (a2)
  {
    sub_100CCDBB8((uint64_t)a1, (uint64_t)(a1 + 8));
    a1[1] = 0;
  }
  else
  {
    sub_100CCDBB8((uint64_t)a1, (uint64_t)(a1 + 32));
    *a1 = 0;
  }
}

uint64_t sub_100CC3174(uint64_t a1, __int128 **a2, unsigned int a3, uint64_t *a4)
{
  __int128 *v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_BYTE *)(a1 + 168))
    return 0;
  v4 = *a2;
  if (!v4)
    return 0;
  result = (uint64_t)sub_100CC2FEC((uint64_t **)(a1 + 288), v4, 0);
  if (!result)
    return result;
  v8 = result;
  if (!*(_BYTE *)(result + a3))
    return 0;
  v9 = result + 8;
  v10 = 32;
  if (a3)
    v10 = 8;
  else
    v9 = result + 32;
  sub_100CCF414(a4, a4[1], *(uint64_t **)(result + v10), *(uint64_t **)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)(result + v10)) >> 4);
  *(CFAbsoluteTime *)(v8 + 56) = CFAbsoluteTimeGetCurrent();
  return 1;
}

id sub_100CC3214(uint64_t a1)
{
  id result;

  result = *(id *)(a1 + 88);
  if (result)
    return objc_msgSend(result, "clearRoadTiles");
  return result;
}

void sub_100CC3224(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  double Current;

  v5 = a1 + 288;
  Current = CFAbsoluteTimeGetCurrent();
  sub_100CC3260(v5, Current, a2, a3);
}

void sub_100CC3260(uint64_t a1, double a2, double a3, double a4)
{
  int v7;
  uint64_t *v8;
  double v9;
  BOOL v10;
  double v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  double v15;
  double v16;
  uint64_t *v18;
  _OWORD *v19;
  int v20;
  _QWORD *i;
  int v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  _OWORD *v55;
  uint64_t *v56;
  int v57;
  NSObject *v58;
  const char *v59;
  void **v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63[2];
  _BYTE v64[12];
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  void *__p[204];

  v7 = *(_DWORD *)(a1 + 16);
  v8 = (uint64_t *)v63;
  v63[0] = 0;
  v63[1] = 0;
  v62 = (uint64_t *)v63;
  v9 = *(double *)(a1 + 24);
  v10 = v9 < 0.0;
  v11 = vabdd_f64(a2, v9);
  v12 = !v10 && v11 <= a3;
  if (!v12 || v7 >= 501)
  {
    v14 = (uint64_t *)(a1 + 8);
    v13 = *(uint64_t **)a1;
    if (*(_QWORD *)a1 != a1 + 8)
    {
      do
      {
        v15 = *((double *)v13 + 13);
        v16 = vabdd_f64(a2, v15);
        if (v15 >= 0.0 && v16 <= a4)
        {
          if (v7 < 501)
            goto LABEL_46;
          v19 = v13 + 4;
          v20 = (int)fabs((double)(int)(a2 - v15));
          HIDWORD(v61) = v20;
          for (i = v63[0]; i; i = (_QWORD *)*i)
          {
            v22 = *((_DWORD *)i + 8);
            if (v22 <= v20)
            {
              if (v22 >= v20)
              {
                __p[0] = (char *)&v61 + 4;
                v30 = sub_1000BC378(&v62, (int *)&v61 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
                v31 = v30;
                v32 = v30[6];
                v35 = v30[7];
                v33 = (uint64_t)(v30 + 7);
                v34 = v35;
                if (v32 >= v35)
                {
                  v37 = v31[5];
                  v38 = ((char *)v32 - (char *)v37) >> 4;
                  v39 = v38 + 1;
                  if ((unint64_t)(v38 + 1) >> 60)
                    sub_100259694();
                  v40 = (char *)v34 - (char *)v37;
                  if (v40 >> 3 > v39)
                    v39 = v40 >> 3;
                  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
                    v41 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v41 = v39;
                  if (v41)
                    v42 = (char *)sub_10028E224(v33, v41);
                  else
                    v42 = 0;
                  v43 = &v42[16 * v38];
                  *(_OWORD *)v43 = *v19;
                  v45 = v31[5];
                  v44 = v31[6];
                  v46 = (uint64_t *)v43;
                  if (v44 != v45)
                  {
                    do
                    {
                      *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                      v46 -= 2;
                      v44 -= 2;
                    }
                    while (v44 != v45);
                    v44 = v31[5];
                  }
                  v36 = (uint64_t *)(v43 + 16);
                  v31[5] = v46;
                  v31[6] = (uint64_t *)(v43 + 16);
                  v31[7] = (uint64_t *)&v42[16 * v41];
                  if (v44)
                    operator delete(v44);
                }
                else
                {
                  *(_OWORD *)v32 = *v19;
                  v36 = v32 + 2;
                }
                v31[6] = v36;
                goto LABEL_46;
              }
              ++i;
            }
          }
          memset(__p, 0, 24);
          v23 = (char *)sub_10028E224((uint64_t)&__p[2], 1uLL);
          *(_OWORD *)v23 = *v19;
          v26 = (char *)__p[0];
          v25 = (char *)__p[1];
          v27 = v23;
          if (__p[1] != __p[0])
          {
            do
            {
              *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
              v27 -= 16;
              v25 -= 16;
            }
            while (v25 != v26);
            v25 = (char *)__p[0];
          }
          v28 = v23 + 16;
          __p[0] = v27;
          __p[1] = v23 + 16;
          __p[2] = &v23[16 * v24];
          if (v25)
            operator delete(v25);
          __p[1] = v28;
          *(_QWORD *)v64 = (char *)&v61 + 4;
          v29 = (char *)(sub_1000BC378(&v62, (int *)&v61 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)v64) + 5);
          if (v29 != (char *)__p)
            sub_1002F3538(v29, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_46:
          v47 = (uint64_t *)v13[1];
          if (v47)
          {
            do
            {
              v18 = v47;
              v47 = (uint64_t *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v18 = (uint64_t *)v13[2];
              v48 = *v18 == (_QWORD)v13;
              v13 = v18;
            }
            while (!v48);
          }
        }
        else
        {
          sub_100CCDBB8((uint64_t)(v13 + 6), (uint64_t)(v13 + 7));
          sub_100CCDBB8((uint64_t)(v13 + 6), (uint64_t)(v13 + 10));
          v18 = sub_100CCDC7C((uint64_t **)a1, (uint64_t)v13);
        }
        v13 = v18;
      }
      while (v18 != v14);
      if (v63 != (_QWORD **)v62)
      {
        do
        {
          if (*(_QWORD *)(a1 + 16) < 0x1F5uLL)
            break;
          v49 = (uint64_t *)*v8;
          v50 = (uint64_t *)*v8;
          v51 = v8;
          if (*v8)
          {
            do
            {
              v52 = v50;
              v50 = (uint64_t *)v50[1];
            }
            while (v50);
          }
          else
          {
            do
            {
              v52 = (uint64_t *)v51[2];
              v48 = *v52 == (_QWORD)v51;
              v51 = v52;
            }
            while (v48);
          }
          v53 = (char *)v52[5];
          v54 = (char *)v52[6];
          if (v53 != v54)
          {
            do
            {
              if (sub_100CCD8A4(a1, (unint64_t *)v53))
              {
                __p[0] = v53;
                v55 = sub_100CCD904((uint64_t **)a1, (unint64_t *)v53, (uint64_t)&unk_101B9EB60, (__int128 **)__p);
                sub_100CCDBB8((uint64_t)(v55 + 3), (uint64_t)v55 + 56);
                sub_100CCDBB8((uint64_t)(v55 + 3), (uint64_t)(v55 + 5));
                sub_100CCDCD4((uint64_t **)a1, (unint64_t *)v53);
                if (*(_QWORD *)(a1 + 16) < 0x1F5uLL)
                  break;
              }
              v53 += 16;
            }
            while (v53 != v54);
            v49 = (uint64_t *)*v8;
          }
          if (v49)
          {
            do
            {
              v56 = v49;
              v49 = (uint64_t *)v49[1];
            }
            while (v49);
          }
          else
          {
            do
            {
              v56 = (uint64_t *)v8[2];
              v48 = *v56 == (_QWORD)v8;
              v8 = v56;
            }
            while (v48);
          }
          v8 = v56;
        }
        while (v56 != v62);
      }
    }
    v57 = *(_DWORD *)(a1 + 16);
    *(double *)(a1 + 24) = a2;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v58 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0]) = 134349568;
      *(void **)((char *)__p + 4) = *(void **)&a2;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = v7;
      WORD1(__p[2]) = 1026;
      HIDWORD(__p[2]) = v57;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,ClearStoredStaleConnections,szBefore,%{public}d,szAfter,%{public}d", (uint8_t *)__p, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      *(_DWORD *)v64 = 134349568;
      *(double *)&v64[4] = a2;
      v65 = 1026;
      v66 = v7;
      v67 = 1026;
      v68 = v57;
      LODWORD(v61) = 24;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,ClearStoredStaleConnections,szBefore,%{public}d,szAfter,%{public}d", v64, v61);
      v60 = (void **)v59;
      sub_100512490("Generic", 1, 0, 2, "void CLGeoMapFeatureAccessGeometryCommon::CLGeoRoadConnectionsMap::clearStoredStaleConnections(const CFAbsoluteTime, const double, const double)", "%s\n", v59);
      if (v60 != __p)
        free(v60);
    }
  }
  sub_10010D350((uint64_t)&v62, v63[0]);
}

void sub_100CC383C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  sub_10010D350((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC3880(uint64_t a1, char a2, char a3, uint64_t a4, double a5, CLLocationDegrees a6, CLLocationDegrees a7, double a8)
{
  double *v16;
  double *v17;
  NSObject *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  const char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  const char *v34;
  char *v35;
  int v36;
  double v37;
  __int16 v38;
  CLLocationDegrees v39;
  __int16 v40;
  CLLocationDegrees v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  _BYTE buf[12];
  __int16 v55;
  CLLocationDegrees v56;
  __int16 v57;
  CLLocationDegrees v58;
  __int16 v59;
  double v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ++*(_DWORD *)(a1 + 112);
  if ((a2 & 1) != 0
    || sub_100CC3DA0((double *)(a1 + 56), (double *)(a1 + 16), *(unsigned __int8 *)(a1 + 217), a6, a7, a8))
  {
    if ((a3 & 1) == 0)
    {
      *(double *)buf = a8;
      v16 = (double *)buf;
      if (*(double *)(a1 + 184) < a8)
        v16 = (double *)(a1 + 184);
      v17 = (double *)(a1 + 176);
      if (*(double *)(a1 + 176) <= a8)
        v17 = v16;
      a8 = *v17;
    }
    if (sub_100CC3E54(a5, a8, a6, a7))
    {
      if ((a3 & 1) == 0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        v18 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v20 = *(_DWORD *)(a1 + 112);
          v19 = *(_DWORD *)(a1 + 116);
          v21 = *(_QWORD *)(a1 + 320);
          v22 = *(unsigned __int8 *)(a1 + 224);
          v23 = *(unsigned __int8 *)(a1 + 192);
          *(_DWORD *)buf = 134351105;
          *(double *)&buf[4] = a5;
          v55 = 2049;
          v56 = a6;
          v57 = 2049;
          v58 = a7;
          v59 = 2050;
          v60 = a8;
          v61 = 1026;
          v62 = v19;
          v63 = 1026;
          v64 = v20;
          v65 = 2050;
          v66 = v21;
          v67 = 1026;
          v68 = v22;
          v69 = 1026;
          v70 = v23;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,connectionUsed,%{public}lu,queryInProgress,%{public}d,network,%{public}d", buf, 0x4Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_10217DE28);
          v30 = *(_DWORD *)(a1 + 112);
          v29 = *(_DWORD *)(a1 + 116);
          v31 = *(_QWORD *)(a1 + 320);
          v32 = *(unsigned __int8 *)(a1 + 224);
          v33 = *(unsigned __int8 *)(a1 + 192);
          v36 = 134351105;
          v37 = a5;
          v38 = 2049;
          v39 = a6;
          v40 = 2049;
          v41 = a7;
          v42 = 2050;
          v43 = a8;
          v44 = 1026;
          v45 = v29;
          v46 = 1026;
          v47 = v30;
          v48 = 2050;
          v49 = v31;
          v50 = 1026;
          v51 = v32;
          v52 = 1026;
          v53 = v33;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,CLTSP,Roads,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,connectionUsed,%{public}lu,queryInProgress,%{public}d,network,%{public}d", &v36, 76);
          v35 = (char *)v34;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL, const BOOL)", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
      }
      if (sub_100CC3EE0(a1, a4, a5, a6, a7, a8))
        goto LABEL_17;
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v25 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349825;
        *(double *)&buf[4] = a5;
        v55 = 2049;
        v56 = a6;
        v57 = 2049;
        v58 = a7;
        v59 = 2050;
        v60 = a8;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        v36 = 134349825;
        v37 = a5;
        v38 = 2049;
        v39 = a6;
        v40 = 2049;
        v41 = a7;
        v42 = 2050;
        v43 = a8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,Roads,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", &v36, 42);
        v28 = (char *)v27;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL, const BOOL)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
    v24 = 0;
    goto LABEL_24;
  }
LABEL_17:
  v24 = 1;
LABEL_24:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v24;
}

void sub_100CC3D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100CC3DA0(double *a1, double *a2, int a3, double a4, double a5, double a6)
{
  double v12;
  double v13;
  double v15;

  if (!sub_100CC3E54(*a1, a1[3], a1[1], a1[2]))
    return 1;
  v12 = sub_10011E634(a2, a4, a5, a1[1], a1[2], 0.0);
  v13 = a1[3];
  if (a3)
    return v12 >= v13 * 0.5;
  v15 = v13 * 0.9;
  return v12 > v15 && v12 + a6 >= v15;
}

BOOL sub_100CC3E54(double a1, double a2, double a3, double a4)
{
  _BOOL8 result;

  result = 0;
  if (a1 > 0.0 && a2 > 0.0)
  {
    if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    else
    {
      return !sub_10011CE64(a3, a4) && sub_10011CE88(a3, a4);
    }
  }
  return result;
}

uint64_t sub_100CC3EE0(uint64_t a1, uint64_t a2, double a3, CLLocationDegrees a4, CLLocationDegrees a5, double a6)
{
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(_BYTE *)(a1 + 169))
  {
    v12 = sub_100CC9364(a1, *(unsigned __int8 *)(a1 + 192), a2, a3, a4, a5, a6);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      v13 = 0;
      goto LABEL_6;
    }
    v12 = sub_100CC7FE4(a1, a2, a3, a4, a5, a6);
  }
  v13 = v12;
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v13;
}

void sub_100CC3FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC3FC8(uint64_t a1, uint64_t a2, int a3, double a4, double a5, double a6)
{
  double Current;
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(_BYTE *)(a1 + 216)
    && (Current = CFAbsoluteTimeGetCurrent(), (sub_100CC3880(a1, 0, 0, 0, Current, a4, a5, a6) & 1) == 0))
  {
    v13 = 0;
  }
  else
  {
    sub_100CC40B8((_BYTE *)a1, (_QWORD *)(a1 + 240), a2, a3, a4, a5, a6);
    v13 = 1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v13;
}

void sub_100CC40A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC40B8(_BYTE *a1, _QWORD *a2, uint64_t a3, int a4, double a5, double a6, double a7)
{
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t j;
  char *v18;
  uint64_t i;
  char *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  __int128 *v30;
  __int128 *v31;
  BOOL v32;
  __int128 *v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  double *v37;
  double *v38;
  double v40;
  __int128 *v43;
  __int128 *v44;
  __int16 v46;
  _BYTE *v47;
  pthread_mutex_t *v48;
  __int16 v49;
  uint8_t buf[8];
  double v51;
  double v52;
  double v53;

  v47 = a1;
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1);
  v49 = 256;
  if (a1[224])
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,map data requested while map data buffering was in progress", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v46 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,CLTSP,map data requested while map data buffering was in progress", &v46, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::findRoadsNear(const double, const double, const double, const std::map<CLMapRoadKey, CLMapRoadPtr> &, std::vector<CLMapRoadPtr> &, const BOOL)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    sub_100CC7A0C((uint64_t)a1);
  }
  if (!a4)
  {
    v20 = *(char **)a3;
    for (i = *(_QWORD *)(a3 + 8); (char *)i != v20; i = sub_100261F44(i - 16))
      ;
    *(_QWORD *)(a3 + 8) = v20;
    v23 = (__int128 *)*a2;
    v21 = (__int128 *)(a2 + 1);
    v22 = v23;
    if (v23 == v21)
      goto LABEL_62;
    while (1)
    {
      v24 = *((_QWORD *)v22 + 6);
      if (v24)
      {
        v25 = *(double **)(v24 + 136);
        if (*(_QWORD *)(v24 + 144) - (_QWORD)v25 >= 0x11uLL)
        {
          v26 = 0;
          v27 = 0;
          while (1)
          {
            GEOClosestCoordinateOnLineSegmentFromCoordinate(v25[v26], v25[v26 + 1], v25[v26 + 2], v25[v26 + 3], a5, a6);
            if (GEOCalculateDistance(v28, v29, a5, a6) <= a7)
              break;
            ++v27;
            v25 = *(double **)(v24 + 136);
            v26 += 2;
            if (v27 >= ((uint64_t)(*(_QWORD *)(v24 + 144) - (_QWORD)v25) >> 4) - 1)
              goto LABEL_28;
          }
LABEL_27:
          sub_10033F68C((char **)a3, v22 + 3);
          goto LABEL_28;
        }
        if (GEOCalculateDistance(*v25, v25[1], a5, a6) <= a7)
          goto LABEL_27;
      }
LABEL_28:
      v30 = (__int128 *)*((_QWORD *)v22 + 1);
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = *(__int128 **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (__int128 *)*((_QWORD *)v22 + 2);
          v32 = *(_QWORD *)v31 == (_QWORD)v22;
          v22 = v31;
        }
        while (!v32);
      }
      v22 = v31;
      if (v31 == v21)
        goto LABEL_62;
    }
  }
  sub_1001FCBB4();
  sub_100CCDD8C((double *)buf, a5, a6, a7);
  v18 = *(char **)a3;
  for (j = *(_QWORD *)(a3 + 8); (char *)j != v18; j = sub_100261F44(j - 16))
    ;
  *(_QWORD *)(a3 + 8) = v18;
  v35 = (__int128 *)*a2;
  v33 = (__int128 *)(a2 + 1);
  v34 = v35;
  if (v35 == v33)
    goto LABEL_62;
  do
  {
    v36 = *((_QWORD *)v34 + 6);
    if (!v36)
      goto LABEL_56;
    v37 = *(double **)(v36 + 136);
    v38 = *(double **)(v36 + 144);
    if (v37 == v38)
      goto LABEL_56;
    while (1)
    {
      if (*(double *)buf > *v37 || v52 < *v37)
        goto LABEL_53;
      v40 = v37[1];
      if (v53 <= v51)
        break;
      if (v53 >= v40 && v51 <= v40)
        goto LABEL_55;
LABEL_53:
      v37 += 2;
      if (v37 == v38)
        goto LABEL_56;
    }
    if (v53 >= v51)
      goto LABEL_53;
    if (v53 <= v40 && v51 >= v40)
      goto LABEL_53;
LABEL_55:
    sub_10033F68C((char **)a3, v34 + 3);
LABEL_56:
    v43 = (__int128 *)*((_QWORD *)v34 + 1);
    if (v43)
    {
      do
      {
        v44 = v43;
        v43 = *(__int128 **)v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        v44 = (__int128 *)*((_QWORD *)v34 + 2);
        v32 = *(_QWORD *)v44 == (_QWORD)v34;
        v34 = v44;
      }
      while (!v32);
    }
    v34 = v44;
  }
  while (v44 != v33);
LABEL_62:
  if (HIBYTE(v49))
  {
    if ((_BYTE)v49)
      pthread_mutex_unlock(v48);
    else
      (*(void (**)(_BYTE *))(*(_QWORD *)v47 + 24))(v47);
  }
  return 1;
}

void sub_100CC44CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100CC450C(uint64_t a1, uint64_t *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t *v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  _BOOL4 v22;
  _BOOL8 v23;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  char **v30;

  v28 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v29 = 256;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  if (sub_100CC46A4(a1, a3, &v25, 0, a4, a5, a6, a7, a8, a9))
  {
    v18 = (uint64_t *)v25;
    v19 = (uint64_t *)v26;
    if (v25 == v26)
    {
      v22 = *a2 != 0;
      v20 = -1.0;
    }
    else
    {
      v20 = -1.0;
      do
      {
        if (v20 < 0.0 || *v18 && *(double *)(*v18 + 56) > v20)
        {
          sub_100349198(a2, v18);
          v20 = *(double *)(*v18 + 56);
        }
        v18 += 2;
      }
      while (v18 != v19);
      v21 = *a2;
      v22 = *a2 != 0;
      if (*a2 && v20 > 0.0)
      {
        v22 = 1;
        *(_BYTE *)(v21 + 64) = 1;
        *(_QWORD *)(v21 + 112) = 0x3FF0000000000000;
      }
    }
    v23 = v20 >= 0.0 && v22;
  }
  else
  {
    v23 = 0;
  }
  v30 = &v25;
  sub_1002A3684((void ***)&v30);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v23;
}

void sub_100CC4684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1002A3684((void ***)va1);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100CC46A4(uint64_t a1, int a2, char **a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v17;
  double v18;
  NSObject *v19;
  _BOOL8 v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  double *v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  _BOOL4 v48;
  double v49;
  double v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  NSObject *v60;
  const char *v61;
  char *v62;
  NSObject *v63;
  const char *v64;
  NSObject *v65;
  char v66;
  double *v67;
  double *v68;
  double v69;
  int v70;
  uint64_t v71;
  double v72;
  NSObject *v73;
  const char *v74;
  char *v75;
  double *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  unint64_t *v81;
  unint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  long double v93;
  long double v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double *v102;
  double v103;
  double v104;
  double v105;
  double *v106;
  double v107;
  double v108;
  double v109;
  double v110;
  NSObject *v111;
  const char *v112;
  const char *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  double v119;
  char **v120;
  NSObject *v121;
  double v122;
  NSObject *v123;
  const char *v124;
  char *v125;
  NSObject *v126;
  const char *v127;
  char *v128;
  NSObject *v129;
  NSObject *v130;
  const char *v131;
  NSObject *v132;
  NSObject *v134;
  const char *v135;
  char *v136;
  const char *v137;
  const char *v138;
  char *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  char v145;
  char v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  double v149;
  double v150[3];
  char *v151;
  char *v152;
  uint64_t v153;
  _QWORD v154[3];
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  double v162;
  double v163;
  uint64_t v164;
  pthread_mutex_t *v165;
  __int16 v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  int v178;
  _DWORD v179[6];
  __int128 v180;
  char v181;
  __int128 v182;
  __int128 v183;
  _BYTE buf[32];
  __int128 v185;
  __int128 v186;
  int v187;

  v170 = a6;
  v171 = a5;
  v168 = a8;
  v169 = a7;
  v167 = a10;
  v164 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v166 = 256;
  v17 = *(double *)(a1 + 200);
  if (*(double *)(a1 + 208) >= v17 + a9 * 4.0)
    v18 = v17 + a9 * 4.0;
  else
    v18 = *(double *)(a1 + 208);
  v162 = a7;
  v163 = a6;
  v161 = a9;
  if (sub_100E3E4B0((id *)(a1 + 232), a2, &v163, &v162, &v161, 5, a6, a7, a9) == 1)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v19 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349569;
      *(double *)&buf[4] = v171;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v163;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v162;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,getSnapCandidates,location shifting failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v179[0] = 134349569;
      *(double *)&v179[1] = v171;
      LOWORD(v179[3]) = 2049;
      *(double *)((char *)&v179[3] + 2) = v163;
      HIWORD(v179[5]) = 2049;
      *(double *)&v180 = v162;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLTSP,%{public}.1lf,getSnapCandidates,location shifting failed,LL,%{private}.7lf,%{private}.7lf", v179, 32);
      v136 = (char *)v135;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v135);
      if (v136 != buf)
        free(v136);
    }
    v20 = 0;
    goto LABEL_212;
  }
  v158 = 0;
  v159 = 0;
  v160 = 0;
  if ((sub_100CC3FC8(a1, (uint64_t)&v158, a4, v163, v162, v18) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v121 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349569;
      *(double *)&buf[4] = v171;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v163;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v162;
      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_170;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 == -1)
      goto LABEL_229;
    goto LABEL_241;
  }
  if (v158 == v159)
  {
    v122 = *(double *)(a1 + 208);
    if (v18 != v122)
    {
      if ((sub_100CC3FC8(a1, (uint64_t)&v158, a4, v163, v162, v122) & 1) != 0)
      {
        if (v158 == v159)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_10217DE28);
          v123 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134349569;
            *(double *)&buf[4] = v171;
            *(_WORD *)&buf[12] = 2049;
            *(double *)&buf[14] = v163;
            *(_WORD *)&buf[22] = 2049;
            *(double *)&buf[24] = v162;
            _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,roads not available close to this point,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_170;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_10217DE28);
          v179[0] = 134349569;
          *(double *)&v179[1] = v171;
          LOWORD(v179[3]) = 2049;
          *(double *)((char *)&v179[3] + 2) = v163;
          HIWORD(v179[5]) = 2049;
          *(double *)&v180 = v162;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLTSP,%{public}.1lf,roads not available close to this point,LL,%{private}.7lf,%{private}.7lf", v179, 32);
          v125 = (char *)v124;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v124);
LABEL_230:
          if (v125 != buf)
            free(v125);
LABEL_170:
          v20 = 0;
          goto LABEL_211;
        }
        goto LABEL_13;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v134 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349569;
        *(double *)&buf[4] = v171;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v163;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&buf[24] = v162;
        _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_170;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 == -1)
      {
LABEL_229:
        v179[0] = 134349569;
        *(double *)&v179[1] = v171;
        LOWORD(v179[3]) = 2049;
        *(double *)((char *)&v179[3] + 2) = v163;
        HIWORD(v179[5]) = 2049;
        *(double *)&v180 = v162;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", v179, 32);
        v125 = (char *)v137;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v137);
        goto LABEL_230;
      }
LABEL_241:
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      goto LABEL_229;
    }
  }
LABEL_13:
  v155 = 0;
  v156 = 0;
  v157 = 0;
  sub_100CC63BC(a1, &v158, &v155, 30.0);
  memset(v179, 0, sizeof(v179));
  v180 = xmmword_101BAFC90;
  v181 = 0;
  v182 = 0u;
  v183 = 0u;
  sub_100584090((uint64_t)v179, &v161, &v167);
  sub_10058413C((uint64_t)v179);
  v22 = v162;
  v21 = v163;
  memset(v154, 0, sizeof(v154));
  v23 = v155;
  v142 = v156;
  if (v155 == v156)
    goto LABEL_182;
  v24 = 180.0;
LABEL_15:
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v25 = *(uint64_t **)v23;
  v143 = v23;
  v144 = *(uint64_t **)(v23 + 8);
  if (*(uint64_t **)v23 == v144)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    goto LABEL_142;
  }
  while (2)
  {
    v26 = *v25;
    if (!*v25)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v126 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v171;
        _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,road is nullptr", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_209;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LODWORD(v174) = 134349056;
      *(double *)((char *)&v174 + 4) = v171;
      LODWORD(v141) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.1lf,road is nullptr", &v174, v141);
      v128 = (char *)v127;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v127);
      goto LABEL_239;
    }
    v27 = *(double **)(v26 + 136);
    v28 = *(_QWORD *)(v26 + 144) - (_QWORD)v27;
    v172 = -1.0;
    if ((int)(v28 >> 4) <= 1)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v129 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        LOWORD(v174) = 0;
        LODWORD(v141) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", &v174, v141);
        v139 = (char *)v138;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v138);
        if (v139 != buf)
          free(v139);
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v130 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v171;
        _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_209;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LODWORD(v174) = 134349056;
      *(double *)((char *)&v174 + 4) = v171;
      LODWORD(v141) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.1lf,findClosestPointOnRoad returned false", &v174, v141);
      v128 = (char *)v131;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v131);
      goto LABEL_239;
    }
    v29 = v24;
    v30 = *v27;
    v31 = v27[1];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&v174 = 0;
    sub_10011E780((double *)(a1 + 16), (double *)buf, (double *)&buf[8], (double *)&v174, v21, v22, 0.0, v30, v31, 0.0);
    v32 = 0;
    v33 = (v28 >> 4) - 1;
    v34 = 0.0;
    v35 = -1.0;
    v36 = 0.0;
    do
    {
      v37 = *(_QWORD *)(v26 + 136) + v32;
      v38 = *(double *)(v37 + 16);
      v39 = *(double *)(v37 + 24);
      v174 = 0uLL;
      v150[0] = 0.0;
      sub_10011E780((double *)(a1 + 16), (double *)&v174, (double *)&v174 + 1, v150, v21, v22, 0.0, v38, v39, 0.0);
      v40 = (*(double *)buf - *(double *)&v174) * (*(double *)buf - *(double *)&v174)
          + (*(double *)&buf[8] - *((double *)&v174 + 1)) * (*(double *)&buf[8] - *((double *)&v174 + 1));
      v41 = 0.0 - *(double *)buf;
      if (v40 < 0.001)
      {
        v42 = v41 * v41;
        v43 = 0.0;
        v44 = 0.0 - *(double *)&buf[8];
LABEL_21:
        v45 = v42 + v44 * v44;
        goto LABEL_26;
      }
      v43 = ((0.0 - *(double *)&buf[8]) * (*((double *)&v174 + 1) - *(double *)&buf[8])
           + v41 * (*(double *)&v174 - *(double *)buf))
          / v40;
      if (v43 >= 0.0)
      {
        if (v43 <= 1.0)
        {
          v42 = (0.0 - (*(double *)buf + (*(double *)&v174 - *(double *)buf) * v43))
              * (0.0 - (*(double *)buf + (*(double *)&v174 - *(double *)buf) * v43));
          v44 = 0.0 - (*(double *)&buf[8] + (*((double *)&v174 + 1) - *(double *)&buf[8]) * v43);
          goto LABEL_21;
        }
        v45 = (0.0 - *(double *)&v174) * (0.0 - *(double *)&v174)
            + (0.0 - *((double *)&v174 + 1)) * (0.0 - *((double *)&v174 + 1));
        v43 = 1.0;
      }
      else
      {
        v45 = v41 * v41 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
        v43 = 0.0;
      }
LABEL_26:
      v46 = sqrt(v40);
      v47 = sqrt(v45);
      v48 = v35 < 0.0;
      if (v47 < v35)
        v48 = 1;
      v49 = v36 + v46 * v43;
      if (v48)
      {
        v35 = v47;
        v34 = v49;
      }
      v36 = v36 + v46;
      *(_OWORD *)buf = v174;
      v32 += 16;
      --v33;
    }
    while (v33);
    if (v36 >= 0.001)
      v50 = v34 / v36;
    else
      v50 = 0.0;
    v172 = v50;
    v52 = *v25;
    v51 = (std::__shared_weak_count *)v25[1];
    v147 = *v25;
    v148 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v54 = __ldxr(p_shared_owners);
      while (__stxr(v54 + 1, p_shared_owners));
    }
    *(_OWORD *)v150 = 0uLL;
    v149 = 0.0;
    v24 = v29;
    if (!v52)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v60 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_66;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v174) = 0;
      LODWORD(v141) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, NULL road", &v174, v141);
      v62 = (char *)v61;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v61);
      goto LABEL_139;
    }
    v55 = (*(_QWORD *)(v52 + 144) - *(_QWORD *)(v52 + 136)) >> 4;
    if ((int)v55 <= 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v63 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_66;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v174) = 0;
      LODWORD(v141) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", &v174, v141);
      v62 = (char *)v64;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v64);
      goto LABEL_139;
    }
    if ((_DWORD)v55 == 1)
      goto LABEL_89;
    sub_1004078E0((_QWORD *)v52);
    v56 = (uint64_t)(*(_QWORD *)(v52 + 168) - *(_QWORD *)(v52 + 160)) >> 3;
    if (v56 != (_DWORD)v55 - 1)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v65 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_66;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v174) = 0;
      LODWORD(v141) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", &v174, v141);
      v62 = (char *)v113;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v113);
      v24 = v29;
LABEL_139:
      if (v62 != buf)
        free(v62);
LABEL_66:
      v66 = 0;
      goto LABEL_90;
    }
    sub_1004078E0((_QWORD *)v52);
    if (v50 < 0.000001)
    {
      v57 = *(_QWORD *)(v52 + 136);
      *(_OWORD *)v150 = *(_OWORD *)v57;
      v58 = *(double *)(v57 + 16);
      v59 = *(double *)(v57 + 24);
      *(_QWORD *)buf = 0;
      v173 = 0.0;
      *(_QWORD *)&v174 = 0;
      sub_10011E780((double *)(a1 + 16), (double *)buf, (double *)&v174, &v173, v150[0], v150[1], 0.0, v58, v59, 0.0);
      goto LABEL_85;
    }
    if (v50 >= 0.999999)
    {
      v76 = (double *)(*(_QWORD *)(v52 + 136) + 16 * v56);
      *(_OWORD *)v150 = *(_OWORD *)v76;
      v77 = *(v76 - 2);
      v78 = *(v76 - 1);
      *(_QWORD *)buf = 0;
      v173 = 0.0;
      *(_QWORD *)&v174 = 0;
      sub_10011E780((double *)(a1 + 16), (double *)buf, (double *)&v174, &v173, v77, v78, 0.0, v150[0], v150[1], 0.0);
LABEL_85:
      v79 = atan2(*(long double *)&v174, *(long double *)buf);
      if (v79 < 0.0)
        v79 = v79 + 6.28318531;
      v80 = v79 * 57.2957795;
LABEL_88:
      v149 = v80;
LABEL_89:
      v66 = 1;
      goto LABEL_90;
    }
    v67 = *(double **)(v52 + 160);
    v68 = *(double **)(v52 + 168);
    if (v67 == v68)
    {
LABEL_73:
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v73 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        LOWORD(v174) = 0;
        LODWORD(v141) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", &v174, v141);
        v75 = (char *)v74;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v74);
        goto LABEL_81;
      }
      goto LABEL_66;
    }
    v69 = 0.0;
    v70 = 2;
    v71 = 24;
    while (1)
    {
      v72 = *v67 / *(double *)(v52 + 40);
      if (vabdd_f64(v50, v69 + v72) < 0.000001)
        break;
      if (v69 + v72 > v50)
      {
        v101 = (v50 - v69) / v72;
        v102 = (double *)(*(_QWORD *)(v52 + 136) + v71);
        v103 = *(v102 - 2);
        v104 = *v102;
        v150[0] = *(v102 - 3) + (*(v102 - 1) - *(v102 - 3)) * v101;
        v150[1] = v103 + sub_1010B9110(v103, v104) * v101;
        sub_100080DCC(v150[1]);
        v150[1] = v105;
        v106 = (double *)(*(_QWORD *)(v52 + 136) + v71);
        v107 = *(v106 - 3);
        v108 = *(v106 - 2);
        v109 = *(v106 - 1);
        v110 = *v106;
        *(_QWORD *)buf = 0;
        v173 = 0.0;
        *(_QWORD *)&v174 = 0;
        sub_10011E780((double *)(a1 + 16), (double *)buf, (double *)&v174, &v173, v107, v108, 0.0, v109, v110, 0.0);
        goto LABEL_85;
      }
      ++v67;
      v71 += 16;
      ++v70;
      v69 = v69 + v72;
      if (v67 == v68)
        goto LABEL_73;
    }
    if (v70 < (int)v55)
    {
      v90 = *(_QWORD *)(v52 + 136) + v71;
      *(_OWORD *)v150 = *(_OWORD *)(v90 - 8);
      v91 = *(double *)(v90 - 24);
      v92 = *(double *)(v90 - 16);
      *(_QWORD *)buf = 0;
      v173 = 0.0;
      *(_QWORD *)&v174 = 0;
      sub_10011E780((double *)(a1 + 16), (double *)buf, (double *)&v174, &v173, v91, v92, 0.0, v150[0], v150[1], 0.0);
      v93 = *(double *)&v174;
      v94 = *(double *)buf;
      v95 = *(_QWORD *)(v52 + 136) + v71;
      v96 = *(double *)(v95 + 8);
      v97 = *(double *)(v95 + 16);
      *(_QWORD *)buf = 0;
      v173 = 0.0;
      *(_QWORD *)&v174 = 0;
      sub_10011E780((double *)(a1 + 16), (double *)buf, (double *)&v174, &v173, v150[0], v150[1], 0.0, v96, v97, 0.0);
      v98 = atan2(v93, v94);
      if (v98 < 0.0)
        v98 = v98 + 6.28318531;
      v99 = v98 * 57.2957795;
      v100 = atan2(*(long double *)&v174, *(long double *)buf);
      if (v100 < 0.0)
        v100 = v100 + 6.28318531;
      v24 = v29;
      sub_100512AA0(v99, v100 * 57.2957795);
      goto LABEL_88;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v111 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_66;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    LOWORD(v174) = 0;
    LODWORD(v141) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", &v174, v141);
    v75 = (char *)v112;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v112);
LABEL_81:
    if (v75 != buf)
      free(v75);
    v66 = 0;
    v24 = v29;
LABEL_90:
    if (v51)
    {
      v81 = (unint64_t *)&v51->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if ((v66 & 1) != 0)
    {
      memset(buf, 0, 24);
      *(_QWORD *)&buf[24] = 0x3FF0000000000000;
      v185 = 0u;
      v186 = 0u;
      v187 = 0;
      sub_10011E780((double *)(a1 + 16), (double *)&v185 + 1, (double *)&v185, (double *)&v186, v150[0], v150[1], 0.0, v163, v162, 0.0);
      if (v168 >= 0.0 && v167 > 0.0 && v149 >= 0.0)
      {
        v83 = fmod(v168 - v149, 360.0);
        if (v83 < 0.0)
          v83 = v83 + 360.0;
        if (v83 > v24)
          v83 = v83 + -360.0;
        *((_QWORD *)&v186 + 1) = fabs(v83);
      }
      sub_1005846E4((uint64_t)v179, (uint64_t)buf);
      v146 = 1;
      if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2 && v168 >= 0.0 && v167 > 0.0 && v149 >= 0.0)
      {
        v174 = 0uLL;
        *(_QWORD *)&v175 = 0;
        *((_QWORD *)&v175 + 1) = 0x3FF0000000000000;
        v176 = 0u;
        v177 = 0u;
        v178 = 0;
        sub_1001C6800(v149 + v24);
        v85 = v84;
        v176 = v185;
        *(_QWORD *)&v177 = v186;
        v86 = fmod(v168 - v84, 360.0);
        if (v86 < 0.0)
          v86 = v86 + 360.0;
        if (v86 > v24)
          v86 = v86 + -360.0;
        *((_QWORD *)&v177 + 1) = fabs(v86);
        sub_1005846E4((uint64_t)v179, (uint64_t)&v174);
        if (*(double *)&v174 > *(double *)buf)
        {
          v149 = v85;
          v185 = v176;
          v186 = v177;
          v187 = v178;
          *(_OWORD *)buf = v174;
          *(_OWORD *)&buf[16] = v175;
          v146 = 0;
        }
      }
      v145 = 1;
      sub_100CCF788(&v171, v150, &v150[1], &v149, &v172, (double *)buf, v25, &v174, &v145, &v146, (double *)&v185 + 1, (double *)&v185, (uint64_t *)&v186 + 1, (uint64_t *)&v170, (uint64_t *)&v169, (uint64_t *)&v168);
      sub_10033F68C(&v151, &v174);
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
      if (*((_QWORD *)&v174 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v25 += 2;
      if (v25 != v144)
        continue;
      v117 = (uint64_t *)v151;
      v118 = (uint64_t *)v152;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      if (v151 != v152)
      {
        v119 = -1.0;
        do
        {
          if (*v117 && (v119 < 0.0 || *(double *)(*v117 + 56) > v119))
          {
            sub_100349198(buf, v117);
            v119 = *(double *)(*v117 + 56);
          }
          v117 += 2;
        }
        while (v117 != v118);
        if (v119 >= 0.0 && *(_QWORD *)buf && **(_QWORD **)buf)
        {
          v120 = a3;
          if (v168 >= 0.0)
          {
            v120 = a3;
            if (v167 >= 0.0)
            {
              if (*(double *)(*(_QWORD *)buf + 88) >= 135.0)
                v120 = (char **)v154;
              else
                v120 = a3;
            }
          }
          sub_10033F68C(v120, (__int128 *)buf);
        }
      }
LABEL_142:
      v114 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v115 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      *(_QWORD *)buf = &v151;
      sub_1002A3684((void ***)buf);
      v23 = v143 + 24;
      if (v143 + 24 == v142)
      {
LABEL_182:
        v20 = *a3 != a3[1];
        goto LABEL_210;
      }
      goto LABEL_15;
    }
    break;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217DE28);
  v132 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v171;
    _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,interpolateOnRoad,interpolateProjections returned false", buf, 0xCu);
  }
  if (!sub_1001BFF7C(115, 0))
    goto LABEL_209;
  bzero(buf, 0x65CuLL);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217DE28);
  LODWORD(v174) = 134349056;
  *(double *)((char *)&v174 + 4) = v171;
  LODWORD(v141) = 12;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.1lf,interpolateOnRoad,interpolateProjections returned false", &v174, v141);
  v128 = (char *)v140;
  sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v140);
LABEL_239:
  if (v128 != buf)
    free(v128);
LABEL_209:
  *(_QWORD *)buf = &v151;
  sub_1002A3684((void ***)buf);
  v20 = 0;
LABEL_210:
  *(_QWORD *)buf = v154;
  sub_1002A3684((void ***)buf);
  *(_QWORD *)buf = &v155;
  sub_100CCF718((void ***)buf);
LABEL_211:
  *(_QWORD *)buf = &v158;
  sub_1002A3684((void ***)buf);
LABEL_212:
  if (HIBYTE(v166))
  {
    if ((_BYTE)v166)
      pthread_mutex_unlock(v165);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v164 + 24))(v164);
  }
  return v20;
}

void sub_100CC62D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  *(_QWORD *)(v53 + 208) = &a47;
  sub_1002A3684((void ***)&STACK[0x200]);
  sub_10187E514((uint64_t)&a53);
  _Unwind_Resume(a1);
}

BOOL sub_100CC63BC(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t *v34;
  __int128 *v35;
  double v36;
  _BOOL4 v37;
  uint64_t *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  BOOL v51;
  uint64_t *v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  _BOOL8 v70;
  __int128 **v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  __int128 *v75;
  __int128 *v76;
  unint64_t v77;
  unint64_t *v78;
  std::__shared_weak_count *v79;
  uint64_t *v80;
  _QWORD v81[5];
  uint64_t *v82;
  _QWORD *v83[2];
  unint64_t *v84;
  void **v85[2];

  v83[0] = 0;
  v83[1] = 0;
  v82 = (uint64_t *)v83;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
    goto LABEL_105;
  do
  {
    v9 = *(uint64_t **)v5;
    v10 = *(std::__shared_weak_count **)(v5 + 8);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v80 = v9;
      v81[0] = v10;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      memset(&v81[1], 0, 32);
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v80 = *(uint64_t **)v5;
      memset(v81, 0, sizeof(v81));
    }
    v75 = *(__int128 **)v5;
    v15 = sub_100CCFE98(&v82, (unint64_t *)v75, (uint64_t)&unk_101B9EB60, &v75);
    sub_100349198(v15 + 6, (uint64_t *)&v80);
    sub_100349198(v15 + 8, &v81[1]);
    sub_100349198(v15 + 10, &v81[3]);
    v16 = (std::__shared_weak_count *)v81[4];
    if (v81[4])
    {
      v17 = (unint64_t *)(v81[4] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)v81[2];
    if (v81[2])
    {
      v20 = (unint64_t *)(v81[2] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)v81[0];
    if (v81[0])
    {
      v23 = (unint64_t *)(v81[0] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v5 += 16;
  }
  while (v5 != v6);
  v25 = v82;
  if (v82 == (uint64_t *)v83)
  {
LABEL_105:
    v69 = 0;
    v81[0] = 0;
    v81[1] = 0;
    v80 = v81;
    goto LABEL_106;
  }
  do
  {
    v80 = 0;
    v81[0] = 0;
    v26 = (uint64_t **)(v25 + 6);
    v81[1] = 0;
    sub_100CC7304(a1, v25 + 6, (char **)&v80, 1);
    v72 = 0;
    v73 = 0;
    v27 = (uint64_t **)v80;
    v28 = (uint64_t **)v81[0];
    v29 = 360.0;
    if (v80 != (uint64_t *)v81[0])
    {
      v29 = 360.0;
      do
      {
        if (*v27 && sub_100CCD8A4((uint64_t)&v82, (unint64_t *)*v27))
        {
          v30 = sub_100408160(*v26, 0);
          v31 = sub_100408388(*v27);
          v32 = fmod(v30 - v31, 360.0);
          if (v32 < 0.0)
            v32 = v32 + 360.0;
          if (v32 > 180.0)
            v32 = v32 + -360.0;
          v33 = fabs(v32);
          if (v33 < v29)
          {
            sub_100349198(&v72, (uint64_t *)v27);
            v29 = v33;
          }
        }
        v27 += 2;
      }
      while (v27 != v28);
    }
    if (v29 < a4)
      sub_100349198(v25 + 8, (uint64_t *)&v72);
    v78 = 0;
    v79 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    sub_100CC6B44(a1, v25 + 6, (char **)&v75, 1);
    v34 = (uint64_t *)v75;
    v35 = v76;
    v36 = 360.0;
    if (v75 != v76)
    {
      v36 = 360.0;
      do
      {
        if (*v34 && sub_100CCD8A4((uint64_t)&v82, (unint64_t *)*v34))
        {
          v37 = sub_1004088EC((uint64_t)*v26, v34);
          v38 = (uint64_t *)*v34;
          if (v37)
          {
            v39 = sub_100408160(v38, 0);
            v40 = sub_100408388(*v26);
          }
          else
          {
            v39 = sub_100408388(v38);
            v40 = sub_100408160(*v26, 0);
          }
          v41 = fmod(v39 - v40, 360.0);
          if (v41 < 0.0)
            v41 = v41 + 360.0;
          if (v41 > 180.0)
            v41 = v41 + -360.0;
          v42 = fabs(v41);
          if (v42 < v36)
          {
            sub_100349198(&v78, v34);
            v36 = v42;
          }
        }
        v34 += 2;
      }
      while (v34 != (uint64_t *)v35);
    }
    if (v36 < a4)
      sub_100349198(v25 + 10, (uint64_t *)&v78);
    v85[0] = (void **)&v75;
    sub_1002A3684(v85);
    v43 = v79;
    if (v79)
    {
      v44 = (unint64_t *)&v79->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v73;
    if (v73)
    {
      v47 = (unint64_t *)&v73->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v75 = (__int128 *)&v80;
    sub_1002A3684((void ***)&v75);
    v49 = (uint64_t *)v25[1];
    if (v49)
    {
      do
      {
        v50 = v49;
        v49 = (uint64_t *)*v49;
      }
      while (v49);
    }
    else
    {
      do
      {
        v50 = (uint64_t *)v25[2];
        v51 = *v50 == (_QWORD)v25;
        v25 = v50;
      }
      while (!v51);
    }
    v25 = v50;
  }
  while (v50 != (uint64_t *)v83);
  v52 = v82;
  v81[0] = 0;
  v81[1] = 0;
  v80 = v81;
  if (v82 == (uint64_t *)v83)
  {
    v69 = 0;
    goto LABEL_106;
  }
  do
  {
    v53 = (unint64_t *)v52[6];
    v54 = (std::__shared_weak_count *)v52[7];
    v78 = v53;
    v79 = v54;
    v55 = v53;
    if (v54)
    {
      v56 = (unint64_t *)&v54->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      v55 = (unint64_t *)v52[6];
    }
    if (!v55 || sub_100CCD8A4((uint64_t)&v80, v53))
    {
      if (!v54)
        goto LABEL_98;
LABEL_82:
      v58 = (unint64_t *)&v54->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      goto LABEL_98;
    }
    v75 = 0;
    v76 = 0;
    v77 = 0;
    sub_100CCA49C((uint64_t)(v52 + 6), &v82, (uint64_t *)&v75);
    v60 = v76;
    if ((unint64_t)v76 >= v77)
    {
      v61 = (__int128 *)sub_100CCFF24((uint64_t *)&v75, v52 + 6);
    }
    else
    {
      sub_100CCE840((uint64_t)&v77, v76, v52 + 6);
      v61 = v60 + 3;
    }
    v76 = v61;
    sub_100CCA684((uint64_t)(v52 + 6), &v82, (uint64_t *)&v75);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v62 = v75;
    v63 = v76;
    while (v62 != v63)
    {
      v64 = *(unint64_t **)v62;
      if (*(_QWORD *)v62)
      {
        v84 = *(unint64_t **)v62;
        *((_BYTE *)sub_100CD019C(&v80, v64, (uint64_t)&unk_101B9EB60, (_OWORD **)&v84) + 48) = 1;
        sub_10033F68C((char **)&v72, v62);
      }
      v62 += 3;
    }
    v65 = a3[1];
    if (v65 >= a3[2])
    {
      v66 = sub_100CD0274(a3, &v72);
    }
    else
    {
      sub_100CD0224((uint64_t)a3, &v72);
      v66 = v65 + 24;
    }
    a3[1] = v66;
    v85[0] = (void **)&v72;
    sub_1002A3684(v85);
    v72 = &v75;
    sub_100CD00FC((void ***)&v72);
    v54 = v79;
    if (v79)
      goto LABEL_82;
LABEL_98:
    v67 = (uint64_t *)v52[1];
    if (v67)
    {
      do
      {
        v68 = v67;
        v67 = (uint64_t *)*v67;
      }
      while (v67);
    }
    else
    {
      do
      {
        v68 = (uint64_t *)v52[2];
        v51 = *v68 == (_QWORD)v52;
        v52 = v68;
      }
      while (!v51);
    }
    v52 = v68;
  }
  while (v68 != (uint64_t *)v83);
  v69 = (_QWORD *)v81[0];
LABEL_106:
  v70 = *a3 != a3[1];
  sub_100008848((uint64_t)&v80, v69);
  sub_100CD00A0((uint64_t)&v82, v83[0]);
  return v70;
}

void sub_100CC6A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25)
{
  uint64_t v25;

  *(_QWORD *)(v25 - 144) = &a10;
  sub_1002A3684((void ***)(v25 - 144));
  a10 = (void **)&a13;
  sub_100CD00FC(&a10);
  sub_100261F44((uint64_t)&a16);
  sub_100008848((uint64_t)&a18, a19);
  sub_100CD00A0((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC6B44(uint64_t a1, uint64_t *a2, char **a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  double Current;
  uint64_t v16;
  CLLocationDegrees v17;
  CLLocationDegrees v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *i;
  int v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  __int128 *v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  char *j;
  int v59;
  char *k;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  int v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p;
  char *v72;
  char *v73;
  void **v74;
  void **v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  pthread_mutex_t *v83;
  __int16 v84;

  v7 = a1;
  v82 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v84 = 256;
  if (!*a2)
  {
    v14 = 0;
    goto LABEL_116;
  }
  if (!sub_100CC3174(v7, (__int128 **)a2, 0, (uint64_t *)a3))
  {
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    if (*(_BYTE *)(v7 + 216)
      && ((Current = CFAbsoluteTimeGetCurrent(), v16 = *(_QWORD *)(*a2 + 144), v16 == *(_QWORD *)(*a2 + 136))
        ? (v17 = 0.0, v18 = 0.0)
        : (v17 = *(double *)(v16 - 16), v18 = *(double *)(v16 - 8)),
          (sub_100CC3880(v7, 0, 1, 0, Current, v17, v18, *(double *)(v7 + 160)) & 1) == 0))
    {
      v14 = 0;
    }
    else
    {
      v19 = *(_QWORD *)(*a2 + 144);
      if (v19 == *(_QWORD *)(*a2 + 136))
      {
        v20 = 0.0;
        v21 = 0.0;
      }
      else
      {
        v20 = *(double *)(v19 - 16);
        v21 = *(double *)(v19 - 8);
      }
      sub_100CC40B8((_BYTE *)v7, (_QWORD *)(v7 + 264), (uint64_t)&v77, 1, v20, v21, *(double *)(v7 + 160));
      v22 = *(_QWORD *)(*a2 + 144);
      if (v22 == *(_QWORD *)(*a2 + 136))
      {
        v23 = 0.0;
        v24 = 0.0;
      }
      else
      {
        v23 = *(double *)(v22 - 16);
        v24 = *(double *)(v22 - 8);
      }
      sub_100CC40B8((_BYTE *)v7, (_QWORD *)(v7 + 240), (uint64_t)&v74, 1, v23, v24, *(double *)(v7 + 160));
      __p = 0;
      v72 = 0;
      v73 = 0;
      v25 = *(_DWORD *)(*a2 + 112);
      v26 = (char *)sub_100260634((uint64_t)&v73, 1uLL);
      *(_DWORD *)v26 = v25;
      v68 = a4;
      __p = v26;
      v73 = &v26[4 * v27];
      v72 = v26 + 4;
      v28 = v77;
      for (i = v78; v28 != i; v28 += 2)
      {
        if (sub_1004088EC(*a2, v28))
        {
          v30 = *(_DWORD *)(*v28 + 112);
          v31 = v72;
          if (v72 >= v73)
          {
            v33 = (char *)__p;
            v34 = (v72 - (_BYTE *)__p) >> 2;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62)
              sub_100259694();
            v36 = v73 - (_BYTE *)__p;
            if ((v73 - (_BYTE *)__p) >> 1 > v35)
              v35 = v36 >> 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              v38 = (char *)sub_100260634((uint64_t)&v73, v37);
              v33 = (char *)__p;
              v31 = v72;
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[4 * v34];
            *(_DWORD *)v39 = v30;
            v32 = v39 + 4;
            while (v31 != v33)
            {
              v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            __p = v39;
            v72 = v32;
            v73 = &v38[4 * v37];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_DWORD *)v72 = v30;
            v32 = v31 + 4;
          }
          v72 = v32;
        }
        if ((*(_DWORD *)(v7 + 152) & 0xFFFFFFFE) == 2 && sub_100408984(*a2, v28))
        {
          v41 = *(_DWORD *)(*v28 + 108);
          v42 = v72;
          if (v72 >= v73)
          {
            v44 = (char *)__p;
            v45 = (v72 - (_BYTE *)__p) >> 2;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              sub_100259694();
            v47 = v73 - (_BYTE *)__p;
            if ((v73 - (_BYTE *)__p) >> 1 > v46)
              v46 = v47 >> 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_100260634((uint64_t)&v73, v48);
              v44 = (char *)__p;
              v42 = v72;
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[4 * v45];
            *(_DWORD *)v50 = v41;
            v43 = v50 + 4;
            while (v42 != v44)
            {
              v51 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v50 - 1) = v51;
              v50 -= 4;
            }
            __p = v50;
            v72 = v43;
            v73 = &v49[4 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_DWORD *)v72 = v41;
            v43 = v42 + 4;
          }
          v72 = v43;
        }
      }
      v52 = (__int128 *)v74;
      v53 = (__int128 *)v75;
      if (v74 != v75)
      {
        while (1)
        {
          v54 = *(_QWORD *)v52;
          if (!*(_QWORD *)v52)
            goto LABEL_91;
          v55 = *a2;
          if (*(_QWORD *)v54 == *(_QWORD *)*a2 && *(_QWORD *)(v54 + 8) == *(_QWORD *)(v55 + 8))
            goto LABEL_91;
          v56 = *(unsigned __int8 *)(v54 + 17);
          if (*(_BYTE *)(v55 + 17))
            break;
          if (!v56)
            goto LABEL_73;
LABEL_91:
          if (++v52 == v53)
            goto LABEL_99;
        }
        if (!v56)
          goto LABEL_91;
LABEL_73:
        if (sub_1004088EC(v55, (uint64_t *)v52)
          && sub_100512A64(*(double *)(*a2 + 128), *(double *)(*(_QWORD *)v52 + 120), 1.0))
        {
          if (*(_BYTE *)(*a2 + 117)
            || (~*(_DWORD *)(*a2 + 112) & 0x7FFFFFFF) == 0
            || *(_BYTE *)(*(_QWORD *)v52 + 116)
            || (v57 = *(_DWORD *)(*(_QWORD *)v52 + 108), (~v57 & 0x7FFFFFFF) == 0))
          {
LABEL_90:
            sub_10033F68C(a3, v52);
            goto LABEL_91;
          }
          for (j = (char *)__p; j != v72; j += 4)
          {
            if (*(_DWORD *)j == v57)
              goto LABEL_90;
          }
        }
        if ((*(_DWORD *)(v7 + 152) & 0xFFFFFFFE) != 2
          || !sub_100408984(*a2, (uint64_t *)v52)
          || !sub_100512A64(*(double *)(*a2 + 128), *(double *)(*(_QWORD *)v52 + 128), 1.0))
        {
          goto LABEL_91;
        }
        if (!*(_BYTE *)(*a2 + 117)
          && (~*(_DWORD *)(*a2 + 112) & 0x7FFFFFFF) != 0
          && !*(_BYTE *)(*(_QWORD *)v52 + 117))
        {
          v59 = *(_DWORD *)(*(_QWORD *)v52 + 112);
          if ((~v59 & 0x7FFFFFFF) != 0)
          {
            for (k = (char *)__p; k != v72; k += 4)
            {
              if (*(_DWORD *)k == v59)
                goto LABEL_90;
            }
            goto LABEL_91;
          }
        }
        goto LABEL_90;
      }
LABEL_99:
      sub_100CC2F38(v7, (__int128 **)a2, 0, (__int128 **)a3);
      if (v68)
      {
        v61 = a2[1];
        v69 = *a2;
        v70 = (std::__shared_weak_count *)v61;
        if (v61)
        {
          v62 = (unint64_t *)(v61 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        sub_100CC724C((uint64_t)&v69, (uint64_t)a3);
        v64 = v70;
        if (v70)
        {
          p_shared_owners = (unint64_t *)&v70->__shared_owners_;
          do
            v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      if (__p)
      {
        v72 = (char *)__p;
        operator delete(__p);
      }
      v14 = 1;
    }
    __p = &v74;
    sub_1002A3684((void ***)&__p);
    v74 = (void **)&v77;
    sub_1002A3684(&v74);
    goto LABEL_112;
  }
  if (a4)
  {
    v8 = a2[1];
    v80 = *a2;
    v81 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100CC724C((uint64_t)&v80, (uint64_t)a3);
    v11 = v81;
    if (v81)
    {
      v12 = (unint64_t *)&v81->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  ++*(_QWORD *)(v7 + 320);
  v14 = 1;
LABEL_112:
  if (HIBYTE(v84))
  {
    if ((_BYTE)v84)
    {
      pthread_mutex_unlock(v83);
      return v14;
    }
    v7 = v82;
LABEL_116:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  return v14;
}

void sub_100CC71B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char **__p, char **a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_1002A3684((void ***)&__p);
  a16 = &a19;
  sub_1002A3684((void ***)&a16);
  sub_10187E514(v22 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC724C(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v4 = (uint64_t *)result;
    for (i = -(uint64_t)v2; ; i -= 16)
    {
      result = sub_100408784(*v2, v4);
      if ((_DWORD)result)
        break;
      v2 += 2;
      if (v2 == *(uint64_t **)(a2 + 8))
        return result;
    }
    v6 = -i;
    result = 16 - i;
    v7 = *(_QWORD *)(a2 + 8);
    if (result != v7)
    {
      do
      {
        v8 = v6 + 16;
        sub_1002B7674(v6, (__int128 *)(v6 + 16));
        v9 = v6 + 32;
        v6 += 16;
      }
      while (v9 != v7);
      result = *(_QWORD *)(a2 + 8);
      v6 = v8;
    }
    while (result != v6)
      result = sub_100261F44(result - 16);
    *(_QWORD *)(a2 + 8) = v6;
  }
  return result;
}

uint64_t sub_100CC7304(uint64_t a1, uint64_t *a2, char **a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  double Current;
  double *v16;
  CLLocationDegrees v17;
  CLLocationDegrees v18;
  double *v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *i;
  int v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  __int128 *v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  char *j;
  int v59;
  char *k;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  int v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p;
  char *v72;
  char *v73;
  void **v74;
  void **v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  pthread_mutex_t *v83;
  __int16 v84;

  v7 = a1;
  v82 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v84 = 256;
  if (!*a2)
  {
    v14 = 0;
    goto LABEL_116;
  }
  if (!sub_100CC3174(v7, (__int128 **)a2, 1u, (uint64_t *)a3))
  {
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    if (*(_BYTE *)(v7 + 216)
      && ((Current = CFAbsoluteTimeGetCurrent(), v16 = *(double **)(*a2 + 136), *(double **)(*a2 + 144) == v16)
        ? (v17 = 0.0, v18 = 0.0)
        : (v17 = *v16, v18 = v16[1]),
          (sub_100CC3880(v7, 0, 1, 0, Current, v17, v18, *(double *)(v7 + 160)) & 1) == 0))
    {
      v14 = 0;
    }
    else
    {
      v19 = *(double **)(*a2 + 136);
      if (*(double **)(*a2 + 144) == v19)
      {
        v20 = 0.0;
        v21 = 0.0;
      }
      else
      {
        v20 = *v19;
        v21 = v19[1];
      }
      sub_100CC40B8((_BYTE *)v7, (_QWORD *)(v7 + 264), (uint64_t)&v77, 1, v20, v21, *(double *)(v7 + 160));
      v22 = *(double **)(*a2 + 136);
      if (*(double **)(*a2 + 144) == v22)
      {
        v23 = 0.0;
        v24 = 0.0;
      }
      else
      {
        v23 = *v22;
        v24 = v22[1];
      }
      sub_100CC40B8((_BYTE *)v7, (_QWORD *)(v7 + 240), (uint64_t)&v74, 1, v23, v24, *(double *)(v7 + 160));
      __p = 0;
      v72 = 0;
      v73 = 0;
      v25 = *(_DWORD *)(*a2 + 108);
      v26 = (char *)sub_100260634((uint64_t)&v73, 1uLL);
      *(_DWORD *)v26 = v25;
      v68 = a4;
      __p = v26;
      v73 = &v26[4 * v27];
      v72 = v26 + 4;
      v28 = v77;
      for (i = v78; v28 != i; v28 += 2)
      {
        if (sub_1004088A0(*a2, v28))
        {
          v30 = *(_DWORD *)(*v28 + 108);
          v31 = v72;
          if (v72 >= v73)
          {
            v33 = (char *)__p;
            v34 = (v72 - (_BYTE *)__p) >> 2;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62)
              sub_100259694();
            v36 = v73 - (_BYTE *)__p;
            if ((v73 - (_BYTE *)__p) >> 1 > v35)
              v35 = v36 >> 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              v38 = (char *)sub_100260634((uint64_t)&v73, v37);
              v33 = (char *)__p;
              v31 = v72;
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[4 * v34];
            *(_DWORD *)v39 = v30;
            v32 = v39 + 4;
            while (v31 != v33)
            {
              v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            __p = v39;
            v72 = v32;
            v73 = &v38[4 * v37];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_DWORD *)v72 = v30;
            v32 = v31 + 4;
          }
          v72 = v32;
        }
        if ((*(_DWORD *)(v7 + 152) & 0xFFFFFFFE) == 2 && sub_100408938(*a2, v28))
        {
          v41 = *(_DWORD *)(*v28 + 112);
          v42 = v72;
          if (v72 >= v73)
          {
            v44 = (char *)__p;
            v45 = (v72 - (_BYTE *)__p) >> 2;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              sub_100259694();
            v47 = v73 - (_BYTE *)__p;
            if ((v73 - (_BYTE *)__p) >> 1 > v46)
              v46 = v47 >> 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_100260634((uint64_t)&v73, v48);
              v44 = (char *)__p;
              v42 = v72;
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[4 * v45];
            *(_DWORD *)v50 = v41;
            v43 = v50 + 4;
            while (v42 != v44)
            {
              v51 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v50 - 1) = v51;
              v50 -= 4;
            }
            __p = v50;
            v72 = v43;
            v73 = &v49[4 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_DWORD *)v72 = v41;
            v43 = v42 + 4;
          }
          v72 = v43;
        }
      }
      v52 = (__int128 *)v74;
      v53 = (__int128 *)v75;
      if (v74 != v75)
      {
        while (1)
        {
          v54 = *(_QWORD *)v52;
          if (!*(_QWORD *)v52)
            goto LABEL_91;
          v55 = *a2;
          if (*(_QWORD *)v54 == *(_QWORD *)*a2 && *(_QWORD *)(v54 + 8) == *(_QWORD *)(v55 + 8))
            goto LABEL_91;
          v56 = *(unsigned __int8 *)(v54 + 17);
          if (*(_BYTE *)(v55 + 17))
            break;
          if (!v56)
            goto LABEL_73;
LABEL_91:
          if (++v52 == v53)
            goto LABEL_99;
        }
        if (!v56)
          goto LABEL_91;
LABEL_73:
        if (sub_1004088A0(v55, (uint64_t *)v52)
          && sub_100512A64(*(double *)(*a2 + 120), *(double *)(*(_QWORD *)v52 + 128), 1.0))
        {
          if (*(_BYTE *)(*a2 + 116)
            || (~*(_DWORD *)(*a2 + 108) & 0x7FFFFFFF) == 0
            || *(_BYTE *)(*(_QWORD *)v52 + 117)
            || (v57 = *(_DWORD *)(*(_QWORD *)v52 + 112), (~v57 & 0x7FFFFFFF) == 0))
          {
LABEL_90:
            sub_10033F68C(a3, v52);
            goto LABEL_91;
          }
          for (j = (char *)__p; j != v72; j += 4)
          {
            if (*(_DWORD *)j == v57)
              goto LABEL_90;
          }
        }
        if ((*(_DWORD *)(v7 + 152) & 0xFFFFFFFE) != 2
          || !sub_100408938(*a2, (uint64_t *)v52)
          || !sub_100512A64(*(double *)(*a2 + 120), *(double *)(*(_QWORD *)v52 + 120), 1.0))
        {
          goto LABEL_91;
        }
        if (!*(_BYTE *)(*a2 + 116)
          && (~*(_DWORD *)(*a2 + 108) & 0x7FFFFFFF) != 0
          && !*(_BYTE *)(*(_QWORD *)v52 + 116))
        {
          v59 = *(_DWORD *)(*(_QWORD *)v52 + 108);
          if ((~v59 & 0x7FFFFFFF) != 0)
          {
            for (k = (char *)__p; k != v72; k += 4)
            {
              if (*(_DWORD *)k == v59)
                goto LABEL_90;
            }
            goto LABEL_91;
          }
        }
        goto LABEL_90;
      }
LABEL_99:
      sub_100CC2F38(v7, (__int128 **)a2, 1u, (__int128 **)a3);
      if (v68)
      {
        v61 = a2[1];
        v69 = *a2;
        v70 = (std::__shared_weak_count *)v61;
        if (v61)
        {
          v62 = (unint64_t *)(v61 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        sub_100CC724C((uint64_t)&v69, (uint64_t)a3);
        v64 = v70;
        if (v70)
        {
          p_shared_owners = (unint64_t *)&v70->__shared_owners_;
          do
            v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      if (__p)
      {
        v72 = (char *)__p;
        operator delete(__p);
      }
      v14 = 1;
    }
    __p = &v74;
    sub_1002A3684((void ***)&__p);
    v74 = (void **)&v77;
    sub_1002A3684(&v74);
    goto LABEL_112;
  }
  if (a4)
  {
    v8 = a2[1];
    v80 = *a2;
    v81 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100CC724C((uint64_t)&v80, (uint64_t)a3);
    v11 = v81;
    if (v81)
    {
      v12 = (unint64_t *)&v81->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  ++*(_QWORD *)(v7 + 320);
  v14 = 1;
LABEL_112:
  if (HIBYTE(v84))
  {
    if ((_BYTE)v84)
    {
      pthread_mutex_unlock(v83);
      return v14;
    }
    v7 = v82;
LABEL_116:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  return v14;
}

void sub_100CC7970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char **__p, char **a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_1002A3684((void ***)&__p);
  a16 = &a19;
  sub_1002A3684((void ***)&a16);
  sub_10187E514(v22 - 104);
  _Unwind_Resume(a1);
}

void sub_100CC7A0C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t i;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  pthread_mutex_t *v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  _BYTE buf[24];
  std::__shared_weak_count *v35;

  v27 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v29 = 256;
  v2 = *(uint64_t **)(a1 + 328);
  v3 = *(uint64_t **)(a1 + 336);
  if (v2 == v3)
    goto LABEL_32;
  v25 = 0;
  v26 = 0;
  v24 = (uint64_t *)&v25;
  do
  {
    v4 = (unint64_t *)*v2;
    *(_OWORD *)buf = *(_OWORD *)*v2;
    buf[16] = 1;
    sub_100CCFD20(&v24, (unint64_t *)buf, (uint64_t)buf);
    if (sub_100CCD8A4(a1 + 240, v4) || sub_100CCD8A4(a1 + 264, v4))
      goto LABEL_5;
    if (sub_100408B10(*v2))
    {
      *(_OWORD *)buf = *(_OWORD *)v4;
      *(_QWORD *)&buf[16] = *v2;
      v5 = v2[1];
      v35 = (std::__shared_weak_count *)v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      sub_100CCFDA8((uint64_t **)(a1 + 240), (unint64_t *)buf, (uint64_t)buf);
      v8 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        goto LABEL_21;
      }
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)v4;
      *(_QWORD *)&buf[16] = *v2;
      v11 = v2[1];
      v35 = (std::__shared_weak_count *)v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      sub_100CCFDA8((uint64_t **)(a1 + 264), (unint64_t *)buf, (uint64_t)buf);
      v8 = v35;
      if (v35)
      {
        v14 = (unint64_t *)&v35->__shared_owners_;
        do
          v10 = __ldaxr(v14);
        while (__stlxr(v10 - 1, v14));
LABEL_21:
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
LABEL_5:
    v2 += 2;
  }
  while (v2 != v3);
  v16 = *(_QWORD *)(a1 + 328);
  for (i = *(_QWORD *)(a1 + 336); i != v16; i = sub_100261F44(i - 16))
    ;
  *(_QWORD *)(a1 + 336) = v16;
  sub_100CC7F38((uint64_t **)(a1 + 240), (uint64_t)&v24);
  sub_100CC7F38((uint64_t **)(a1 + 264), (uint64_t)&v24);
  if (!*(_BYTE *)(a1 + 216))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a1 + 256);
      v19 = *(_QWORD *)(a1 + 280);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,newly buffered data ingested,roads,%{public}lu,zeroLengthRoads,%{public}lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v20 = *(_QWORD *)(a1 + 256);
      v21 = *(_QWORD *)(a1 + 280);
      v30 = 134349312;
      v31 = v20;
      v32 = 2050;
      v33 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,CLTSP,Roads,newly buffered data ingested,roads,%{public}lu,zeroLengthRoads,%{public}lu", &v30, 22, v24, v25, v26);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLGeoMapFeatureRoadGeometryBuffer::updateRoadDataObjectsWithNewlyBufferedData()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  sub_100008848((uint64_t)&v24, v25);
  if (HIBYTE(v29))
  {
LABEL_32:
    if ((_BYTE)v29)
      pthread_mutex_unlock(v28);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  }
}

void sub_100CC7DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  _QWORD *v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  sub_100008848((uint64_t)va, v6);
  sub_10187E514((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC7E30(uint64_t a1, void *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v4 = *(_DWORD *)(a1 + 152);
  if (v4 == 1)
  {
    if ((objc_msgSend(a2, "isDrivable") & 1) != 0)
      return 1;
    v4 = *(_DWORD *)(a1 + 152);
  }
  if (v4 == 2)
  {
    if (!a2)
      return 0;
    v5 = objc_msgSend(a2, "isRoadPedestrianNavigable");
    v6 = objc_msgSend(a2, "walkableSide");
    v7 = objc_msgSend(a2, "isRail");
    if (((v6 - 1 > 2) & ~v5) == 0 && !v7)
      return 1;
    v4 = *(_DWORD *)(a1 + 152);
  }
  result = 0;
  if (a2 && v4 == 3)
  {
    v9 = objc_msgSend(a2, "isRoadPedestrianNavigable");
    v10 = objc_msgSend(a2, "walkableSide");
    v11 = objc_msgSend(a2, "isRail");
    if (((v10 - 1 > 2) & ~v9) == 0 && !v11)
      return 1;
    v12 = objc_msgSend(a2, "bikeableSide");
    v13 = objc_msgSend(a2, "isRail") ^ 1;
    if (v12 - 1 < 3)
      return v13;
    else
      return 0;
  }
  return result;
}

void sub_100CC7F38(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  v3 = (uint64_t *)(a1 + 1);
  v2 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    do
    {
      if (sub_100CCD8A4(a2, (unint64_t *)v2 + 4))
      {
        v6 = (uint64_t *)v2[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v2[2];
            v8 = *v7 == (_QWORD)v2;
            v2 = v7;
          }
          while (!v8);
        }
      }
      else
      {
        v7 = sub_10008A9F0(a1, v2);
        sub_100261F44((uint64_t)(v2 + 6));
        operator delete(v2);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
}

uint64_t sub_100CC7FE4(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  NSObject *v7;
  uint64_t v8;
  double v14;
  void *v15;
  int v16;
  intptr_t v17;
  NSObject *v18;
  NSObject *v19;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  __int16 v25;
  _QWORD v26[13];
  char v27;
  char v28;
  _QWORD v29[7];
  _QWORD v30[3];
  int v31;
  _QWORD v32[6];
  _QWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint8_t buf[8];

  if (!*(_QWORD *)(a1 + 88))
    return 0;
  if (*(_BYTE *)(a1 + 224))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLMM,CLTSP,road data query already in progress using maps API", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v32[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,CLTSP,road data query already in progress using maps API", v32, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    return 0;
  }
  v40 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v41 = 256;
  v14 = sub_1001FCBB4();
  v15 = objc_autoreleasePoolPush();
  v34 = 0;
  v35 = &v34;
  v36 = 0x3052000000;
  v37 = sub_100207188;
  v38 = sub_100207C90;
  v39 = 0;
  v16 = *(unsigned __int8 *)(a1 + 216);
  if (*(_BYTE *)(a1 + 216))
    v35[5] = (uint64_t)dispatch_semaphore_create(0);
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x4812000000;
  v32[3] = sub_100CC8540;
  v32[4] = sub_100CC8564;
  v32[5] = &unk_102080316;
  memset(v33, 0, sizeof(v33));
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2020000000;
  v31 = 0;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100CC858C;
  v29[3] = &unk_10217DD68;
  v29[5] = v32;
  v29[6] = a1;
  v29[4] = v30;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100CC8DB0;
  v26[3] = &unk_10217DD90;
  *(double *)&v26[8] = a3;
  *(double *)&v26[9] = a6;
  *(double *)&v26[10] = a4;
  *(double *)&v26[11] = a5;
  *(double *)&v26[12] = v14;
  v27 = a2;
  v26[4] = v30;
  v26[5] = v32;
  v28 = v16;
  v26[6] = &v34;
  v26[7] = a1;
  ++*(_DWORD *)(a1 + 116);
  *(_BYTE *)(a1 + 224) = 1;
  objc_msgSend(*(id *)(a1 + 88), "findRoadsNear:radius:handler:completionHandler:", v29, v26, a4, a5, a6);
  if (!v16)
    goto LABEL_21;
  v17 = dispatch_semaphore_wait((dispatch_semaphore_t)v35[5], 0xFFFFFFFFFFFFFFFFLL);
  v18 = v35[5];
  if (v18)
    dispatch_release(v18);
  if (v17)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v19 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance,semaphore timed out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v25 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance,semaphore timed out", &v25, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v8 = 0;
  }
  else
  {
LABEL_21:
    v8 = 1;
  }
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v32, 8);
  *(_QWORD *)buf = v33;
  sub_1002A3684((void ***)buf);
  _Block_object_dispose(&v34, 8);
  objc_autoreleasePoolPop(v15);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v8;
}

void sub_100CC84D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void **a55)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  sub_1002A3684(&a55);
  _Block_object_dispose(&a46, 8);
  sub_10187E514((uint64_t)&a52);
  _Unwind_Resume(a1);
}

__n128 sub_100CC8540(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100CC8564(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_1002A3684(&v1);
}

void sub_100CC858C(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  __n128 v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  if (a2)
  {
    v3 = a1[6];
    v4 = a2;
    if (v4)
    {
      v5 = v4;
      if (sub_100CC7E30(v3, v4))
      {
        v6.n128_f64[0] = sub_100CC869C(v5, 0, (std::string **)&v11);
        *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += 208;
        if ((_QWORD)v11)
        {
          if (*(_DWORD *)(v3 + 152) != 1)
          {
            v7 = *(_DWORD *)(v11 + 104);
            if (v7 >= 1)
              *(double *)(v11 + 96) = (double)v7 * 3.7;
          }
          sub_10033F68C((char **)(*(_QWORD *)(a1[5] + 8) + 48), &v11);
        }
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
        if (*((_QWORD *)&v11 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v6);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }

    }
  }
}

void sub_100CC8688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_100CC869C@<D0>(void *a1@<X1>, int a2@<W2>, std::string **a3@<X8>)
{
  char v4;
  NSObject *v6;
  double result;
  uint64_t v8;
  const char *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  id v13;
  unint64_t v14;
  std::string *v15;
  BOOL v16;
  NSObject *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  unsigned __int8 v26;
  unsigned int v27;
  unsigned __int8 v28;
  char v29;
  std::string *v30;
  std::string *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  unsigned int v42;
  unsigned int v43;
  double *v44;
  double v45;
  unsigned int v46;
  std::string *v47;
  id v48;
  double v49;
  std::string *v50;
  std::string *v51;
  uint64_t v52;
  unint64_t v53;
  std::string *v54;
  std::string *v55;
  double *v56;
  const char *v57;
  int v58;
  id v59;
  __int16 v60;
  id v61;
  std::string buf[68];

  if (!a1)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLMM,GEOMapFeatureRoad is null", (uint8_t *)buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_23;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    LOWORD(v58) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,GEOMapFeatureRoad is null", &v58, 2);
    v10 = (std::string *)v57;
    sub_100512490("Generic", 1, 0, 0, "CLMapRoadPtr CLGeoMapFeatureAccessGeometryCommon::makeRoadFromGEOMapFeatureRoad(CLDistanceCalc &, GEOMapFeatureRoad * _Nonnull, BOOL)", "%s\n", v57);
    if (v10 == buf)
      goto LABEL_23;
LABEL_52:
    free(v10);
LABEL_23:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  v4 = a2;
  if (a2 && (unint64_t)objc_msgSend(a1, "coordinateCount") <= 1)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)objc_msgSend(a1, "roadID");
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)objc_msgSend(a1, "coordinateCount");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", (uint8_t *)buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_23;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v8 = qword_1022A00D8;
    v58 = 134283777;
    v59 = objc_msgSend(a1, "roadID");
    v60 = 2050;
    v61 = objc_msgSend(a1, "coordinateCount");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "#Warning CLMM, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", &v58, 22);
    v10 = (std::string *)v9;
    sub_100512490("Generic", 1, 0, 2, "CLMapRoadPtr CLGeoMapFeatureAccessGeometryCommon::makeRoadFromGEOMapFeatureRoad(CLDistanceCalc &, GEOMapFeatureRoad * _Nonnull, BOOL)", "%s\n", v9);
    if (v10 == buf)
      goto LABEL_23;
    goto LABEL_52;
  }
  sub_100CC9F54(a3);
  if (objc_msgSend(a1, "internalRoadName"))
  {
    v11 = *a3;
    sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(a1, "internalRoadName"), "UTF8String"));
    std::string::operator=(v11 + 2, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  v12 = *a3;
  v13 = objc_msgSend(a1, "roadID");
  v14 = sub_100CCDDE0(a1);
  v12->__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  v12->__r_.__value_.__l.__size_ = v14;
  v15 = *a3;
  v16 = (objc_msgSend(a1, "isRail") & 1) != 0 || objc_msgSend(a1, "travelDirection") == 0;
  v15->__r_.__value_.__s.__data_[16] = !v16;
  v18 = *a3;
  v18->__r_.__value_.__s.__data_[17] = objc_msgSend(a1, "isRail");
  v19 = *a3;
  v19->__r_.__value_.__s.__data_[18] = objc_msgSend(a1, "isTunnel");
  v20 = *a3;
  v20->__r_.__value_.__s.__data_[19] = objc_msgSend(a1, "isBridge");
  v21 = *a3;
  HIDWORD(v21->__r_.__value_.__r.__words[2]) = objc_msgSend(a1, "roadClass");
  v22 = *a3;
  LODWORD(v22[1].__r_.__value_.__l.__data_) = objc_msgSend(a1, "formOfWay");
  v23 = *a3;
  LODWORD(v23[3].__r_.__value_.__l.__data_) = objc_msgSend(a1, "travelDirection");
  v24 = *a3;
  HIDWORD(v24[3].__r_.__value_.__r.__words[0]) = objc_msgSend(a1, "rampType");
  v25 = *a3;
  v26 = objc_msgSend(a1, "isRoadPedestrianNavigable");
  v27 = objc_msgSend(a1, "walkableSide");
  v28 = objc_msgSend(a1, "isRail");
  if (v27 - 1 < 3)
    v29 = 1;
  else
    v29 = v26;
  v25[3].__r_.__value_.__s.__data_[8] = v29 & (v28 ^ 1);
  v30 = *a3;
  v30[3].__r_.__value_.__s.__data_[9] = objc_msgSend(a1, "isDrivable");
  v31 = *a3;
  LODWORD(v30) = objc_msgSend(a1, "isRoadPedestrianNavigable");
  v32 = objc_msgSend(a1, "walkableSide");
  v33 = objc_msgSend(a1, "isRail");
  if (((v32 - 1 > 2) & ~(_DWORD)v30) != 0 || ((v33 ^ 1) & 1) == 0)
  {
    v35 = objc_msgSend(a1, "bikeableSide");
    v34 = objc_msgSend(a1, "isRail") ^ 1;
    if (v35 - 1 >= 3)
      LOBYTE(v34) = 0;
  }
  else
  {
    LOBYTE(v34) = 1;
  }
  v31[3].__r_.__value_.__s.__data_[10] = v34;
  v36 = *a3;
  HIDWORD(v36[3].__r_.__value_.__r.__words[1]) = objc_msgSend(a1, "walkableSide");
  v37 = *a3;
  HIDWORD(v37[4].__r_.__value_.__r.__words[1]) = objc_msgSend(objc_msgSend(a1, "startJunction"), "junctionIndex");
  v38 = *a3;
  LODWORD(v38[4].__r_.__value_.__r.__words[2]) = objc_msgSend(objc_msgSend(a1, "endJunction"), "junctionIndex");
  v39 = *a3;
  v39[4].__r_.__value_.__s.__data_[20] = objc_msgSend(objc_msgSend(a1, "startJunction"), "isOnTileBorder");
  v40 = *a3;
  v40[4].__r_.__value_.__s.__data_[21] = objc_msgSend(objc_msgSend(a1, "endJunction"), "isOnTileBorder");
  v41 = *a3;
  v42 = objc_msgSend(a1, "roadClass");
  v43 = objc_msgSend(a1, "travelDirection");
  if (v42 > 7)
  {
    v45 = dbl_101BAFD30[v43 == 0];
  }
  else
  {
    v44 = (double *)&unk_101C20940;
    if (!v43)
      v44 = (double *)&unk_101C20980;
    v45 = v44[v42];
  }
  *(double *)&v41[4].__r_.__value_.__l.__data_ = v45;
  v46 = objc_msgSend(a1, "speedLimitIsMPH");
  v47 = *a3;
  v48 = objc_msgSend(a1, "speedLimit");
  v49 = 0.277778;
  if (v46)
    v49 = 0.44704;
  *(double *)&v47[1].__r_.__value_.__l.__size_ = v49 * (double)(unint64_t)v48;
  v50 = *a3;
  LODWORD(v50[4].__r_.__value_.__r.__words[1]) = objc_msgSend(a1, "laneCount");
  v51 = *a3;
  v52 = 0;
  v53 = 0;
  LODWORD(v51[3].__r_.__value_.__r.__words[2]) = objc_msgSend(a1, "bikeableSide");
  while ((unint64_t)objc_msgSend(a1, "coordinateCount") > v53)
  {
    sub_10040779C(*a3, (double *)((char *)objc_msgSend(a1, "coordinates") + v52), 1);
    ++v53;
    v52 += 16;
  }
  if ((v4 & 1) == 0 && objc_msgSend(a1, "coordinateCount") == (id)1)
    sub_10040779C(*a3, (double *)objc_msgSend(a1, "coordinates"), 0);
  if (objc_msgSend(a1, "coordinateCount"))
  {
    v54 = *a3;
    v54[5].__r_.__value_.__r.__words[0] = *((_QWORD *)objc_msgSend(a1, "coordinates3d") + 2);
    v55 = *a3;
    v56 = (double *)objc_msgSend(a1, "coordinates3d");
    result = v56[3 * (_QWORD)objc_msgSend(a1, "coordinateCount") - 1];
    *(double *)&v55[5].__r_.__value_.__l.__size_ = result;
  }
  return result;
}

void sub_100CC8D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  sub_100261F44(v20);
  _Unwind_Resume(a1);
}

intptr_t sub_100CC8DB0(uint64_t a1, void *a2)
{
  int32x2_t *v4;
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  int v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  uint64_t v22;
  intptr_t result;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x2_t v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[10];
  _BYTE v44[10];
  _BYTE v45[10];
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  _BOOL4 v51;
  __int16 v52;
  __int32 v53;
  __int16 v54;
  int32x2_t v55;
  __int16 v56;
  __int32 v57;
  __int16 v58;
  __int32 v59;
  __int16 v60;
  __int32 v61;
  uint8_t buf[4];
  _BYTE v63[10];
  _BYTE v64[10];
  _BYTE v65[10];
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  _BOOL4 v71;
  __int16 v72;
  __int32 v73;
  __int16 v74;
  int32x2_t v75;
  __int16 v76;
  __int32 v77;
  __int16 v78;
  __int32 v79;
  __int16 v80;
  __int32 v81;

  v4 = *(int32x2_t **)(a1 + 56);
  if (a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      *(_QWORD *)v63 = objc_msgSend(a2, "code");
      *(_WORD *)&v63[8] = 2114;
      *(_QWORD *)v64 = objc_msgSend(a2, "domain");
      *(_WORD *)&v64[8] = 2113;
      *(_QWORD *)v65 = objc_msgSend(a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,Roads,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v24 = qword_1022A00D8;
      v42 = 134349571;
      *(_QWORD *)v43 = objc_msgSend(a2, "code");
      *(_WORD *)&v43[8] = 2114;
      *(_QWORD *)v44 = objc_msgSend(a2, "domain");
      *(_WORD *)&v44[8] = 2113;
      *(_QWORD *)v45 = objc_msgSend(a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "CLMM,CLTSP,Roads,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v42, 32);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v4[15] = vadd_s32(v4[15], (int32x2_t)0x100000001);
  }
  else
  {
    v7 = *(double *)(a1 + 64);
    v6 = *(double *)(a1 + 72);
    v8 = *(double *)(a1 + 80);
    v9 = *(double *)(a1 + 88);
    if (sub_100CC3E54(v7, v6, v8, v9))
    {
      *(double *)&v4[7] = v7;
      *(double *)&v4[8] = v8;
      *(double *)&v4[9] = v9;
      *(double *)&v4[10] = v6;
    }
    v4[15].i32[1] = 0;
  }
  if (*(double *)(a1 + 72) > 0.5)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = v4[35].i32[0] + v4[32].i32[0];
      v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v13 = 0.0;
      if (*(double *)(a1 + 96) >= 0.0)
        v13 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 96)) * 1000.0;
      v15 = *(_QWORD *)(a1 + 80);
      v14 = *(_QWORD *)(a1 + 88);
      v16 = *(_QWORD *)(a1 + 72);
      v17 = v4[40];
      v19 = v4[14].i32[0];
      v18 = v4[14].i32[1];
      v20 = v4[15].i32[0];
      v21 = v4[15].i32[1];
      *(_DWORD *)buf = 67243009;
      *(_DWORD *)v63 = v11;
      *(_WORD *)&v63[4] = 1026;
      *(_DWORD *)&v63[6] = v12;
      *(_WORD *)v64 = 2050;
      *(double *)&v64[2] = v13;
      *(_WORD *)v65 = 2049;
      *(_QWORD *)&v65[2] = v15;
      v66 = 2049;
      v67 = v14;
      v68 = 2050;
      v69 = v16;
      v70 = 1026;
      v71 = a2 != 0;
      v72 = 1026;
      v73 = v18;
      v74 = 2050;
      v75 = v17;
      v76 = 1026;
      v77 = v19;
      v78 = 1026;
      v79 = v20;
      v80 = 1026;
      v81 = v21;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,bufferDataUsingMapsAPI,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", buf, 0x5Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v27 = qword_1022A00D8;
      v28 = v4[35].i32[0] + v4[32].i32[0];
      v29 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v30 = 0.0;
      if (*(double *)(a1 + 96) >= 0.0)
        v30 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 96)) * 1000.0;
      v32 = *(_QWORD *)(a1 + 80);
      v31 = *(_QWORD *)(a1 + 88);
      v33 = *(_QWORD *)(a1 + 72);
      v34 = v4[40];
      v36 = v4[14].i32[0];
      v35 = v4[14].i32[1];
      v37 = v4[15].i32[0];
      v38 = v4[15].i32[1];
      v42 = 67243009;
      *(_DWORD *)v43 = v28;
      *(_WORD *)&v43[4] = 1026;
      *(_DWORD *)&v43[6] = v29;
      *(_WORD *)v44 = 2050;
      *(double *)&v44[2] = v30;
      *(_WORD *)v45 = 2049;
      *(_QWORD *)&v45[2] = v32;
      v46 = 2049;
      v47 = v31;
      v48 = 2050;
      v49 = v33;
      v50 = 1026;
      v51 = a2 != 0;
      v52 = 1026;
      v53 = v35;
      v54 = 2050;
      v55 = v34;
      v56 = 1026;
      v57 = v36;
      v58 = 1026;
      v59 = v37;
      v60 = 1026;
      v61 = v38;
      LODWORD(v41) = 94;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "CLMM,CLTSP,Roads,bufferDataUsingMapsAPI,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", &v42, v41);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
  }
  if (*(_BYTE *)(a1 + 104))
    objc_msgSend(*(id *)&v4[11], "clearRoadTiles");
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  result = (intptr_t)&v4[41];
  if (&v4[41] != (int32x2_t *)(v22 + 48))
    result = sub_100CCFB70(result, *(uint64_t **)(v22 + 48), *(uint64_t **)(v22 + 56), (uint64_t)(*(_QWORD *)(v22 + 56) - *(_QWORD *)(v22 + 48)) >> 4);
  v4[28].i8[0] = 0;
  if (*(_BYTE *)(a1 + 105))
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  return result;
}

BOOL sub_100CC9364(uint64_t a1, uint64_t a2, uint64_t a3, double a4, CLLocationDegrees a5, CLLocationDegrees a6, double a7)
{
  NSObject *v8;
  _BOOL8 result;
  const char *v10;
  uint8_t *v11;
  double v18;
  void *v19;
  CLLocationCoordinate2D v20;
  CLMapsXPCServiceManager *v21;
  _BOOL8 v22;
  uint64_t v23;
  _QWORD v24[11];
  char v25;
  uint64_t v26;
  __int16 v27;
  uint8_t buf[8];
  uint8_t *v29;
  uint64_t v30;
  char v31;

  if (!*(_BYTE *)(a1 + 169))
    return 0;
  if (*(_BYTE *)(a1 + 224))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v8 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLMM,CLTSP,road data query already in progress using XPC", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,CLTSP,road data query already in progress using XPC", &v26, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
      return 0;
    }
  }
  else
  {
    v26 = a1;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v27 = 256;
    v18 = sub_1001FCBB4();
    v19 = objc_autoreleasePoolPush();
    *(_QWORD *)buf = 0;
    v29 = buf;
    v30 = 0x2020000000;
    v31 = 0;
    v20 = CLLocationCoordinate2DMake(a5, a6);
    *(_BYTE *)(a1 + 224) = 1;
    v21 = +[CLMapsXPCServiceManager sharedInstance](CLMapsXPCServiceManager, "sharedInstance");
    v22 = (*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2;
    v23 = *(unsigned __int8 *)(a1 + 216);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100CC968C;
    v24[3] = &unk_10217DDB8;
    *(double *)&v24[6] = a4;
    *(double *)&v24[7] = a7;
    *(CLLocationDegrees *)&v24[8] = a5;
    *(CLLocationDegrees *)&v24[9] = a6;
    v24[4] = buf;
    v24[5] = a1;
    v25 = a2;
    *(double *)&v24[10] = v18;
    -[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:](v21, "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:", 0, a2, v22, a3, v23, v24, v20.latitude, v20.longitude, a7);
    _Block_object_dispose(buf, 8);
    objc_autoreleasePoolPop(v19);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    return 1;
  }
  return result;
}

void sub_100CC964C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100CC968C(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *i;
  void *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  NSObject *v36;
  unsigned int v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  const char *v58;
  char *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  const char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD **v81;
  _QWORD *v82[2];
  int v83;
  _BYTE v84[10];
  _BYTE v85[10];
  _BYTE v86[10];
  _BYTE v87[10];
  __int16 v88;
  _BYTE v89[10];
  _BYTE v90[6];
  int v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  _BYTE buf[24];
  _BYTE v103[10];
  _BYTE v104[10];
  __int16 v105;
  _BYTE v106[10];
  _BYTE v107[6];
  int v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  _BYTE v119[128];

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(v4 + 116);
  v82[0] = 0;
  v82[1] = 0;
  v80 = 0;
  v81 = v82;
  v78 = 0;
  v79 = 0;
  if (a2)
  {
    v6 = *(double *)(a1 + 48);
    v5 = *(double *)(a1 + 56);
    v7 = *(double *)(a1 + 64);
    v8 = *(double *)(a1 + 72);
    if (sub_100CC3E54(v6, v5, v7, v8))
    {
      *(double *)(v4 + 56) = v6;
      *(double *)(v4 + 64) = v7;
      *(double *)(v4 + 72) = v8;
      *(double *)(v4 + 80) = v5;
    }
    *(_DWORD *)(v4 + 124) = 0;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v10 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v74, v119, 16);
    v11 = v2;
    if (!v10)
    {
      v73 = 0;
      goto LABEL_37;
    }
    v73 = 0;
    v12 = *(_QWORD *)v75;
    while (1)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v75 != v12)
          objc_enumerationMutation(v11);
        v14 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * (_QWORD)i);
        v15 = objc_opt_class(NSDictionary, v9);
        if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0)
        {
          v16 = (char *)operator new(0xE8uLL);
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v16 + 2) = 0;
          *(_QWORD *)v16 = off_10217DE58;
          *(_OWORD *)(v16 + 40) = 0u;
          *(_OWORD *)(v16 + 56) = 0u;
          *(_OWORD *)(v16 + 72) = 0u;
          *(_OWORD *)(v16 + 88) = 0u;
          *(_OWORD *)(v16 + 120) = 0u;
          *((_QWORD *)v16 + 17) = 0;
          *(_OWORD *)(v16 + 104) = 0u;
          *(_OWORD *)(v16 + 24) = 0u;
          *(_QWORD *)(v16 + 44) = -1;
          *((_QWORD *)v16 + 8) = 0xBFF0000000000000;
          *((_QWORD *)v16 + 9) = 0;
          *((_QWORD *)v16 + 10) = 0;
          *((_QWORD *)v16 + 11) = 0;
          *((_QWORD *)v16 + 12) = -1;
          *((_QWORD *)v16 + 16) = -1;
          *((_DWORD *)v16 + 34) = -1;
          *((_QWORD *)v16 + 28) = 0;
          *((_OWORD *)v16 + 12) = 0u;
          *((_OWORD *)v16 + 13) = 0u;
          *((_OWORD *)v16 + 10) = 0u;
          *((_OWORD *)v16 + 11) = 0u;
          *((_OWORD *)v16 + 9) = 0u;
          *(_QWORD *)buf = v16 + 24;
          *(_QWORD *)&buf[8] = v16;
          if (!sub_100408B68((uint64_t *)v16 + 3, v4 + 16, v14, 0))
            goto LABEL_22;
          v17 = *(_QWORD **)buf;
          v18 = **(_QWORD **)buf;
          v19 = sub_100CC9FEC((uint64_t *)buf);
          *v17 = v18;
          v17[1] = v19;
          v20 = *(_DWORD *)(v4 + 152);
          if (v20 == 3)
          {
            v21 = *(_QWORD *)buf;
            if (!*(_BYTE *)(*(_QWORD *)buf + 82))
              goto LABEL_22;
          }
          else
          {
            if (v20 != 2)
            {
              if (v20 != 1 || !*(_BYTE *)(*(_QWORD *)buf + 81))
              {
LABEL_22:
                v23 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v25 = __ldaxr(v24);
                  while (__stlxr(v25 - 1, v24));
                  if (!v25)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
                continue;
              }
LABEL_21:
              sub_10033F68C(&v78, (__int128 *)buf);
              v73 += 208;
              goto LABEL_22;
            }
            v21 = *(_QWORD *)buf;
            if (!*(_BYTE *)(*(_QWORD *)buf + 80))
              goto LABEL_22;
          }
          v22 = *(_DWORD *)(v21 + 104);
          if (v22 >= 1)
            *(double *)(v21 + 96) = (double)v22 * 3.7;
          goto LABEL_21;
        }
      }
      v10 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v74, v119, 16);
      if (!v10)
      {
LABEL_37:
        if ((char **)(v4 + 328) != &v78)
          sub_100CCFB70(v4 + 328, (uint64_t *)v78, v79, ((char *)v79 - v78) >> 4);
        v2 = v11;
        v35 = v73;
        goto LABEL_41;
      }
    }
  }
  *(int32x2_t *)(v4 + 120) = vadd_s32(*(int32x2_t *)(v4 + 120), (int32x2_t)0x100000001);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217DE28);
  v26 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v28 = *(_QWORD *)(a1 + 64);
    v27 = *(_QWORD *)(a1 + 72);
    v29 = *(_QWORD *)(a1 + 56);
    v31 = *(_DWORD *)(v4 + 112);
    v30 = *(_DWORD *)(v4 + 116);
    v32 = *(_DWORD *)(v4 + 120);
    v33 = *(_DWORD *)(v4 + 124);
    v34 = *(unsigned __int8 *)(a1 + 88);
    *(_DWORD *)buf = 134285313;
    *(_QWORD *)&buf[4] = v28;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v27;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)v103 = v29;
    *(_WORD *)&v103[8] = 1026;
    *(_DWORD *)v104 = v30;
    *(_WORD *)&v104[4] = 1026;
    *(_DWORD *)&v104[6] = v31;
    v105 = 1026;
    *(_DWORD *)v106 = v32;
    *(_WORD *)&v106[4] = 1026;
    *(_DWORD *)&v106[6] = v33;
    *(_WORD *)v107 = 1026;
    *(_DWORD *)&v107[2] = v34;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance returned,xpcError,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,apiCalls,%{public}d,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v51 = *(_QWORD *)(a1 + 64);
    v50 = *(_QWORD *)(a1 + 72);
    v52 = *(_QWORD *)(a1 + 56);
    v54 = *(_DWORD *)(v4 + 112);
    v53 = *(_DWORD *)(v4 + 116);
    v55 = *(_DWORD *)(v4 + 120);
    v56 = *(_DWORD *)(v4 + 124);
    v57 = *(unsigned __int8 *)(a1 + 88);
    v83 = 134285313;
    *(_QWORD *)v84 = v51;
    *(_WORD *)&v84[8] = 2049;
    *(_QWORD *)v85 = v50;
    *(_WORD *)&v85[8] = 2050;
    *(_QWORD *)v86 = v52;
    *(_WORD *)&v86[8] = 1026;
    *(_DWORD *)v87 = v53;
    *(_WORD *)&v87[4] = 1026;
    *(_DWORD *)&v87[6] = v54;
    v88 = 1026;
    *(_DWORD *)v89 = v55;
    *(_WORD *)&v89[4] = 1026;
    *(_DWORD *)&v89[6] = v56;
    *(_WORD *)v90 = 1026;
    *(_DWORD *)&v90[2] = v57;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance returned,xpcError,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,apiCalls,%{public}d,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", &v83, 62);
    v59 = (char *)v58;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
  v35 = 0;
LABEL_41:
  *(_BYTE *)(v4 + 224) = 0;
  if (*(double *)(a1 + 56) > *(double *)(v4 + 160))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v36 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      if (v2)
        v37 = objc_msgSend(v2, "count");
      else
        v37 = 0;
      v38 = 0.0;
      if (*(double *)(a1 + 80) >= 0.0)
        v38 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 80)) * 1000.0;
      v40 = *(_QWORD *)(a1 + 64);
      v39 = *(_QWORD *)(a1 + 72);
      v41 = *(_QWORD *)(a1 + 56);
      v42 = *(_QWORD *)(v4 + 320);
      v44 = *(_DWORD *)(v4 + 112);
      v43 = *(_DWORD *)(v4 + 116);
      v45 = *(_DWORD *)(v4 + 120);
      v46 = *(_DWORD *)(v4 + 124);
      v47 = *(unsigned __int8 *)(a1 + 88);
      *(_DWORD *)buf = 67243265;
      *(_DWORD *)&buf[4] = v37;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v35;
      *(_WORD *)&buf[14] = 2050;
      *(double *)&buf[16] = v38;
      *(_WORD *)v103 = 2049;
      *(_QWORD *)&v103[2] = v40;
      *(_WORD *)v104 = 2049;
      *(_QWORD *)&v104[2] = v39;
      v105 = 2050;
      *(_QWORD *)v106 = v41;
      *(_WORD *)&v106[8] = 1026;
      *(_DWORD *)v107 = v2 == 0;
      *(_WORD *)&v107[4] = 1026;
      v108 = v43;
      v109 = 2050;
      v110 = v42;
      v111 = 1026;
      v112 = v44;
      v113 = 1026;
      v114 = v45;
      v115 = 1026;
      v116 = v46;
      v117 = 1026;
      v118 = v47;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,MapHelperService,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x64u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v48 = qword_1022A00D8;
      if (v2)
        v49 = objc_msgSend(v2, "count");
      else
        v49 = 0;
      v60 = 0.0;
      if (*(double *)(a1 + 80) >= 0.0)
        v60 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 80)) * 1000.0;
      v62 = *(_QWORD *)(a1 + 64);
      v61 = *(_QWORD *)(a1 + 72);
      v63 = *(_QWORD *)(a1 + 56);
      v64 = *(_QWORD *)(v4 + 320);
      v66 = *(_DWORD *)(v4 + 112);
      v65 = *(_DWORD *)(v4 + 116);
      v67 = *(_DWORD *)(v4 + 120);
      v68 = *(_DWORD *)(v4 + 124);
      v69 = *(unsigned __int8 *)(a1 + 88);
      v83 = 67243265;
      *(_DWORD *)v84 = v49;
      *(_WORD *)&v84[4] = 1026;
      *(_DWORD *)&v84[6] = v35;
      *(_WORD *)v85 = 2050;
      *(double *)&v85[2] = v60;
      *(_WORD *)v86 = 2049;
      *(_QWORD *)&v86[2] = v62;
      *(_WORD *)v87 = 2049;
      *(_QWORD *)&v87[2] = v61;
      v88 = 2050;
      *(_QWORD *)v89 = v63;
      *(_WORD *)&v89[8] = 1026;
      *(_DWORD *)v90 = v2 == 0;
      *(_WORD *)&v90[4] = 1026;
      v91 = v65;
      v92 = 2050;
      v93 = v64;
      v94 = 1026;
      v95 = v66;
      v96 = 1026;
      v97 = v67;
      v98 = 1026;
      v99 = v68;
      v100 = 1026;
      v101 = v69;
      LODWORD(v72) = 100;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 2, "CLMM,CLTSP,Roads,MapHelperService,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", &v83, v72);
      v71 = (char *)v70;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v70);
      if (v71 != buf)
        free(v71);
    }
  }
  *(_QWORD *)buf = &v78;
  sub_1002A3684((void ***)buf);
  sub_100008848((uint64_t)&v81, v82[0]);
}

void sub_100CC9EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  a43 = (void **)&a23;
  sub_1002A3684(&a43);
  sub_100008848((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

char *sub_100CC9F54@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = off_10217DE58;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *((_QWORD *)v2 + 17) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 44) = -1;
  *((_QWORD *)v2 + 8) = 0xBFF0000000000000;
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = 0;
  *((_QWORD *)v2 + 12) = -1;
  *((_QWORD *)v2 + 16) = -1;
  *((_DWORD *)v2 + 34) = -1;
  *((_QWORD *)v2 + 28) = 0;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

unint64_t sub_100CC9FEC(uint64_t *a1)
{
  unint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  double *v10;
  double *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  uint8_t *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint8_t buf[4];
  unint64_t v21;

  v2 = (unint64_t *)*a1;
  if (v2)
  {
    v3 = *v2;
    v17 = *v2;
    if ((int)((v2[18] - v2[17]) >> 4) > 1)
    {
      v10 = (double *)sub_1004078B8((uint64_t)v2, 0);
      v11 = (double *)sub_1004078B8(*a1, 1);
      if (sub_100CCE320(v10, v11, *(unsigned __int8 *)(*a1 + 17), *(unsigned __int8 *)(*a1 + 19), *(unsigned __int8 *)(*a1 + 18), &v17))
      {
        return v17;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v12 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134283521;
        v21 = v17;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,unable to make CLRoadID from CLMapRoadPtr,%{private}lld", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        return v17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v18 = 134283521;
      v19 = v17;
      v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,GeoMapDataID,unable to make CLRoadID from CLMapRoadPtr,%{private}lld", &v18, 12);
      v7 = v16;
      sub_100512490("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "%s\n", v15);
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v4 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283521;
        v21 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return v17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v18 = 134283521;
      v19 = v3;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", &v18, 12);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 2, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "%s\n", v5);
    }
    if (v7 != buf)
      free(v7);
    return v17;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217DE28);
  v8 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,null road", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    LOWORD(v18) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,GeoMapDataID,null road", &v18, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return 0;
}

uint64_t sub_100CCA46C(uint64_t a1)
{
  sub_100261F44(a1 + 32);
  sub_100261F44(a1 + 16);
  return sub_100261F44(a1);
}

void sub_100CCA49C(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  unint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 *v34;

  v4 = *(unint64_t **)(a1 + 16);
  if (v4)
  {
    v6 = *a3;
    v7 = a3[1] - *a3;
    if (v7)
    {
      v8 = v7 / 48;
      if ((unint64_t)(v7 / 48) <= 1)
        v8 = 1;
      while (**(_QWORD **)v6 != *v4 || *(_QWORD *)(*(_QWORD *)v6 + 8) != v4[1])
      {
        v6 += 48;
        if (!--v8)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      v34 = *(__int128 **)(a1 + 16);
      v9 = sub_100CCFE98(a2, v4, (uint64_t)&unk_101B9EB60, &v34);
      v10 = v9[7];
      v28 = v9[6];
      v29 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = v9[9];
      v30 = v9[8];
      v31 = (std::__shared_weak_count *)v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = v9[11];
      v32 = v9[10];
      v33 = (std::__shared_weak_count *)v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      sub_100CCE43C(a3, (uint64_t *)*a3, &v28);
      sub_100CCA49C(&v28, a2, a3);
      v19 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v31;
      if (v31)
      {
        v23 = (unint64_t *)&v31->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v29;
      if (v29)
      {
        v26 = (unint64_t *)&v29->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }
}

void sub_100CCA66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100CCA46C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100CCA684(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  unint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 *v45;

  v4 = *(unint64_t **)(a1 + 32);
  if (v4)
  {
    v6 = *a3;
    v7 = a3[1] - *a3;
    if (v7)
    {
      v8 = v7 / 48;
      if ((unint64_t)(v7 / 48) <= 1)
        v8 = 1;
      while (**(_QWORD **)v6 != *v4 || *(_QWORD *)(*(_QWORD *)v6 + 8) != v4[1])
      {
        v6 += 48;
        if (!--v8)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      v45 = *(__int128 **)(a1 + 32);
      v9 = sub_100CCFE98(a2, v4, (uint64_t)&unk_101B9EB60, &v45);
      v11 = v9[6];
      v10 = v9[7];
      v39 = v11;
      v40 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v12 = (unint64_t *)(v10 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v15 = v9[8];
      v14 = v9[9];
      v41 = v15;
      v42 = (std::__shared_weak_count *)v14;
      if (v14)
      {
        v16 = (unint64_t *)(v14 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v19 = v9[10];
      v18 = v9[11];
      v43 = v19;
      v44 = (std::__shared_weak_count *)v18;
      if (v18)
      {
        v20 = (unint64_t *)(v18 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = (uint64_t *)a3[1];
      if ((unint64_t)v22 >= a3[2])
      {
        v29 = sub_100CCFF24(a3, &v39);
      }
      else
      {
        *v22 = v11;
        v22[1] = v10;
        if (v10)
        {
          v23 = (unint64_t *)(v10 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v22[2] = v15;
        v22[3] = v14;
        if (v14)
        {
          v25 = (unint64_t *)(v14 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v22[4] = v19;
        v22[5] = v18;
        if (v18)
        {
          v27 = (unint64_t *)(v18 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = (uint64_t)(v22 + 6);
      }
      a3[1] = v29;
      sub_100CCA684(&v39, a2, a3);
      v30 = v44;
      if (v44)
      {
        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v42;
      if (v42)
      {
        v34 = (unint64_t *)&v42->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v40;
      if (v40)
      {
        v37 = (unint64_t *)&v40->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
  }
}

void sub_100CCA8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100CCA46C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCA8D0(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  double Current;
  int v11;
  uint64_t result;
  uint64_t i;
  char *v14;
  __int128 *v15;
  __int128 *j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  double v29;
  double v32;
  double v33;
  double v34;
  double v35;

  sub_1001FCBB4();
  sub_100CCDD8C(&v32, a3, a4, a5);
  if (!*(_BYTE *)(a1 + 216)
    || (Current = CFAbsoluteTimeGetCurrent(), v11 = sub_100CCAA8C(a1, 0, 0, Current, a3, a4, a5), result = 0, v11))
  {
    v14 = *(char **)a2;
    for (i = *(_QWORD *)(a2 + 8); (char *)i != v14; i = sub_100261F44(i - 16))
      ;
    *(_QWORD *)(a2 + 8) = v14;
    v15 = *(__int128 **)(a1 + 232);
    for (j = *(__int128 **)(a1 + 240); v15 != j; ++v15)
    {
      v17 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
      {
        v19 = v17 + 16;
        v18 = *(_QWORD *)(v17 + 16);
        v20 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(v19 + 8) - v18) >> 3);
        if ((int)v20 >= 1)
        {
          v21 = 0;
          do
          {
            if (v20 > v21)
            {
              if (v18)
              {
                v22 = *(double **)(v18 + 72 * v21 + 48);
                v23 = *(_QWORD *)(v18 + 72 * v21 + 56) - (_QWORD)v22;
                if ((int)((unint64_t)v23 >> 4) >= 1)
                {
                  v24 = 0;
                  v25 = v23 >> 4;
                  v26 = ((unint64_t)v23 >> 4);
                  do
                  {
                    if (v25 <= v24)
                      v27 = 0;
                    else
                      v27 = v22;
                    if (v32 <= *v27 && v34 >= *v27)
                    {
                      v29 = v27[1];
                      if (v35 <= v33)
                      {
                        if (v35 < v33 && (v35 > v29 || v33 < v29))
                        {
LABEL_35:
                          sub_10033F68C((char **)a2, v15);
                          goto LABEL_36;
                        }
                      }
                      else if (v35 >= v29 && v33 <= v29)
                      {
                        goto LABEL_35;
                      }
                    }
                    ++v24;
                    v22 += 2;
                  }
                  while (v26 != v24);
                }
              }
            }
            ++v21;
          }
          while (v21 != v20);
        }
      }
LABEL_36:
      ;
    }
    return 1;
  }
  return result;
}

uint64_t sub_100CCAA8C(uint64_t a1, char a2, uint64_t a3, double a4, CLLocationDegrees a5, CLLocationDegrees a6, double a7)
{
  double *v14;
  double *v15;
  double v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  int v24;
  int v25;
  int v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  int v31;
  double v32;
  __int16 v33;
  CLLocationDegrees v34;
  __int16 v35;
  CLLocationDegrees v36;
  __int16 v37;
  double v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  CLLocationDegrees v47;
  __int16 v48;
  CLLocationDegrees v49;
  __int16 v50;
  double v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ++*(_DWORD *)(a1 + 112);
  if ((a2 & 1) != 0
    || sub_100CC3DA0((double *)(a1 + 56), (double *)(a1 + 16), *(unsigned __int8 *)(a1 + 217), a5, a6, a7))
  {
    *(double *)buf = a7;
    v14 = (double *)buf;
    if (*(double *)(a1 + 184) < a7)
      v14 = (double *)(a1 + 184);
    v15 = (double *)(a1 + 176);
    if (*(double *)(a1 + 176) <= a7)
      v15 = v14;
    v16 = *v15;
    if (sub_100CC3E54(a4, *v15, a5, a6))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v17 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_DWORD *)(a1 + 112);
        v18 = *(_DWORD *)(a1 + 116);
        v20 = *(unsigned __int8 *)(a1 + 224);
        *(_DWORD *)buf = 134350593;
        *(double *)&buf[4] = a4;
        v46 = 2049;
        v47 = a5;
        v48 = 2049;
        v49 = a6;
        v50 = 2050;
        v51 = v16;
        v52 = 1026;
        v53 = v18;
        v54 = 1026;
        v55 = v19;
        v56 = 1026;
        v57 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,queryInProgress,%{public}d", buf, 0x3Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        v25 = *(_DWORD *)(a1 + 112);
        v24 = *(_DWORD *)(a1 + 116);
        v26 = *(unsigned __int8 *)(a1 + 224);
        v31 = 134350593;
        v32 = a4;
        v33 = 2049;
        v34 = a5;
        v35 = 2049;
        v36 = a6;
        v37 = 2050;
        v38 = v16;
        v39 = 1026;
        v40 = v24;
        v41 = 1026;
        v42 = v25;
        v43 = 1026;
        v44 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,CLTSP,Buildings,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,queryInProgress,%{public}d", &v31, 60);
        v28 = (char *)v27;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      if (sub_100CCB304(a1, a3, a4, a5, a6, v16))
        goto LABEL_14;
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v22 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349825;
        *(double *)&buf[4] = a4;
        v46 = 2049;
        v47 = a5;
        v48 = 2049;
        v49 = a6;
        v50 = 2050;
        v51 = v16;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        v31 = 134349825;
        v32 = a4;
        v33 = 2049;
        v34 = a5;
        v35 = 2049;
        v36 = a6;
        v37 = 2050;
        v38 = v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,Buildings,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", &v31, 42);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
    }
    v21 = 0;
    goto LABEL_21;
  }
LABEL_14:
  v21 = 1;
LABEL_21:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v21;
}

void sub_100CCAF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCAF58(double *a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  void **v17;
  double *v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v40;
  uint64_t *i;
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  void *__p[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  double *v52;
  __int16 v53;

  v52 = a1;
  (*(void (**)(double *))(*(_QWORD *)a1 + 16))(a1);
  v53 = 256;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v40 = sub_100CCA8D0((uint64_t)a1, (uint64_t)&v49, a3, a4, a5);
  if ((v40 & 1) != 0)
  {
    v10 = v49;
    for (i = v50; v10 != i; v10 += 2)
    {
      v11 = *v10;
      v12 = *(_QWORD *)(*v10 + 16);
      v13 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(*v10 + 24) - v12) >> 3);
      if ((int)v13 >= 1)
      {
        v14 = 0;
        do
        {
          if (v12 && v13 > v14)
          {
            v47 = 0u;
            v48 = 0u;
            *(_OWORD *)__p = 0u;
            v46 = 0u;
            v15 = v12 + 72 * v14;
            v18 = *(double **)(v15 + 48);
            v17 = (void **)(v15 + 48);
            v16 = v18;
            __p[0] = *(v17 - 2);
            v19 = v17[1];
            v20 = v19 - (_BYTE *)v18;
            if ((int)((unint64_t)(v19 - (_BYTE *)v18) >> 4) >= 1)
            {
              v21 = 0;
              do
              {
                if (v16 && v20 >> 4 > v21)
                {
                  *(_QWORD *)&v42[0] = 0;
                  v43 = 0;
                  v44 = 0;
                  sub_10011E780(a1 + 2, (double *)&v44, (double *)&v43, (double *)v42, a3, a4, 0.0, v16[2 * v21], v16[2 * v21 + 1], 0.0);
                  v23 = v43;
                  v22 = v44;
                  v24 = v46;
                  if ((unint64_t)v46 >= *((_QWORD *)&v46 + 1))
                  {
                    v26 = (uint64_t)(v46 - (unint64_t)__p[1]) >> 4;
                    v27 = v26 + 1;
                    if ((unint64_t)(v26 + 1) >> 60)
                      sub_100259694();
                    v28 = *((_QWORD *)&v46 + 1) - (unint64_t)__p[1];
                    if ((uint64_t)(*((_QWORD *)&v46 + 1) - (unint64_t)__p[1]) >> 3 > v27)
                      v27 = v28 >> 3;
                    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
                      v29 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v29 = v27;
                    v31 = (char *)sub_10028E224((uint64_t)&v46 + 8, v29);
                    v32 = &v31[16 * v26];
                    *(_QWORD *)v32 = v23;
                    *((_QWORD *)v32 + 1) = v22;
                    v33 = __p[1];
                    v34 = (_QWORD *)v46;
                    v35 = v32;
                    while (v34 != v33)
                    {
                      v36 = *(v34 - 2);
                      v34 -= 2;
                      *((_QWORD *)v35 - 2) = v36;
                      v35 -= 16;
                      *((_QWORD *)v35 + 1) = v34[1];
                    }
                    v25 = v32 + 16;
                    __p[1] = v35;
                    *(_QWORD *)&v46 = v32 + 16;
                    *((_QWORD *)&v46 + 1) = &v31[16 * v30];
                    if (v33)
                      operator delete(v33);
                  }
                  else
                  {
                    *(_QWORD *)v46 = v43;
                    *(_QWORD *)(v24 + 8) = v22;
                    v25 = (_QWORD *)(v24 + 16);
                  }
                  *(_QWORD *)&v46 = v25;
                  v19 = v17[1];
                  v16 = (double *)*v17;
                }
                ++v21;
                v20 = v19 - (_BYTE *)v16;
              }
              while ((uint64_t)v21 < (int)((unint64_t)(v19 - (_BYTE *)v16) >> 4));
            }
            sub_100DA4208((double **)&__p[1], (uint64_t)v42);
            v47 = v42[0];
            v48 = v42[1];
            v37 = a2[1];
            if (v37 >= a2[2])
            {
              v38 = sub_100CD0598(a2, (uint64_t)__p);
            }
            else
            {
              *(void **)v37 = __p[0];
              *(_QWORD *)(v37 + 16) = 0;
              *(_QWORD *)(v37 + 24) = 0;
              *(_QWORD *)(v37 + 8) = 0;
              sub_100CD06E8((char *)(v37 + 8), (_QWORD *)__p[1], (_QWORD *)v46, (uint64_t)(v46 - (unint64_t)__p[1]) >> 4);
              *(_OWORD *)(v37 + 32) = v47;
              *(_OWORD *)(v37 + 48) = v48;
              v38 = v37 + 64;
              a2[1] = v37 + 64;
            }
            a2[1] = v38;
            if (__p[1])
            {
              *(void **)&v46 = __p[1];
              operator delete(__p[1]);
            }
            v11 = *v10;
          }
          ++v14;
          v12 = *(_QWORD *)(v11 + 16);
          v13 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(v11 + 24) - v12) >> 3);
        }
        while ((uint64_t)v14 < (int)v13);
      }
    }
  }
  __p[0] = &v49;
  sub_1002A3684((void ***)__p);
  (*(void (**)(double *))(*(_QWORD *)a1 + 24))(a1);
  return v40;
}

void sub_100CCB2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  a19 = &a28;
  sub_1002A3684((void ***)&a19);
  sub_10187E514(v28 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCB304(uint64_t a1, uint64_t a2, double a3, CLLocationDegrees a4, CLLocationDegrees a5, double a6)
{
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(_BYTE *)(a1 + 169))
  {
    v12 = sub_100CCB3EC(a1, *(unsigned __int8 *)(a1 + 192), a2, a3, a4, a5, a6);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      v13 = 0;
      goto LABEL_6;
    }
    v12 = sub_100CCB728(a1, a2, a3, a4, a5, a6);
  }
  v13 = v12;
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v13;
}

void sub_100CCB3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100CCB3EC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, CLLocationDegrees a5, CLLocationDegrees a6, double a7)
{
  NSObject *v8;
  _BOOL8 result;
  const char *v10;
  uint8_t *v11;
  double v18;
  void *v19;
  CLLocationCoordinate2D v20;
  CLMapsXPCServiceManager *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  _QWORD v25[11];
  uint64_t v26;
  __int16 v27;
  uint8_t buf[8];
  uint8_t *v29;
  uint64_t v30;
  char v31;

  if (!*(_BYTE *)(a1 + 169))
    return 0;
  if (*(_BYTE *)(a1 + 224))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v8 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLMM,CLTSP,building data query already in progress using XPC", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,CLTSP,building data query already in progress using XPC", &v26, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
      return 0;
    }
  }
  else
  {
    v26 = a1;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v27 = 256;
    v18 = sub_1001FCBB4();
    v19 = objc_autoreleasePoolPush();
    ++*(_DWORD *)(a1 + 116);
    *(_QWORD *)buf = 0;
    v29 = buf;
    v30 = 0x2020000000;
    v31 = 0;
    v20 = CLLocationCoordinate2DMake(a5, a6);
    *(_BYTE *)(a1 + 224) = 1;
    v21 = +[CLMapsXPCServiceManager sharedInstance](CLMapsXPCServiceManager, "sharedInstance");
    if (*(_DWORD *)(a1 + 220) == 1)
      v22 = 2;
    else
      v22 = 1;
    v23 = *(unsigned __int8 *)(a1 + 216);
    v24 = (*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100CCC5AC;
    v25[3] = &unk_10217DE08;
    *(double *)&v25[6] = a4;
    *(double *)&v25[7] = a7;
    *(CLLocationDegrees *)&v25[8] = a5;
    *(CLLocationDegrees *)&v25[9] = a6;
    v25[4] = buf;
    v25[5] = a1;
    *(double *)&v25[10] = v18;
    -[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:](v21, "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:", v22, a2, v24, a3, v23, v25, v20.latitude, v20.longitude, a7);
    _Block_object_dispose(buf, 8);
    objc_autoreleasePoolPop(v19);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    return 1;
  }
  return result;
}

void sub_100CCB6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CCB728(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  double v14;
  void *v15;
  int v16;
  intptr_t v17;
  NSObject *v18;
  NSObject *v19;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  _WORD v25[8];
  _QWORD v26[13];
  char v27;
  char v28;
  _QWORD v29[6];
  _QWORD v30[3];
  int v31;
  _QWORD v32[6];
  _QWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint8_t buf[8];

  v40 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v41 = 256;
  if (!*(_QWORD *)(a1 + 88))
  {
LABEL_8:
    v13 = 0;
    goto LABEL_23;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v12 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLMM,CLTSP,building data query already in progress using maps API", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v32[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,CLTSP,building data query already in progress using maps API", v32, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    goto LABEL_8;
  }
  v14 = sub_1001FCBB4();
  v15 = objc_autoreleasePoolPush();
  v34 = 0;
  v35 = &v34;
  v36 = 0x3052000000;
  v37 = sub_100207188;
  v38 = sub_100207C90;
  v39 = 0;
  v16 = *(unsigned __int8 *)(a1 + 216);
  if (*(_BYTE *)(a1 + 216))
    v35[5] = (uint64_t)dispatch_semaphore_create(0);
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x4812000000;
  v32[3] = sub_100CCBC8C;
  v32[4] = sub_100CCBCB0;
  v32[5] = &unk_102080316;
  memset(v33, 0, sizeof(v33));
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2020000000;
  v31 = 0;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100CCBCD8;
  v29[3] = &unk_10217DDE0;
  v29[4] = v32;
  v29[5] = v30;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100CCC010;
  v26[3] = &unk_10217DD90;
  *(double *)&v26[8] = a3;
  *(double *)&v26[9] = a6;
  *(double *)&v26[10] = a4;
  *(double *)&v26[11] = a5;
  v26[4] = v32;
  v26[5] = v30;
  *(double *)&v26[12] = v14;
  v27 = v16;
  v28 = a2;
  v26[6] = &v34;
  v26[7] = a1;
  ++*(_DWORD *)(a1 + 116);
  *(_BYTE *)(a1 + 224) = 1;
  objc_msgSend(*(id *)(a1 + 88), "findBuildingsNear:radius:tileSetStyle:handler:completionHandler:", *(_DWORD *)(a1 + 220) == 1, v29, v26, a4, a5, a6);
  if (!v16)
    goto LABEL_21;
  v17 = dispatch_semaphore_wait((dispatch_semaphore_t)v35[5], 0xFFFFFFFFFFFFFFFFLL);
  v18 = v35[5];
  if (v18)
    dispatch_release(v18);
  if (v17)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v19 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,queryForBuildingsWithinDistance,semaphore timed out", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v25[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,Buildings,queryForBuildingsWithinDistance,semaphore timed out", v25, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v13 = 0;
  }
  else
  {
LABEL_21:
    v13 = 1;
  }
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v32, 8);
  *(_QWORD *)buf = v33;
  sub_1002A3684((void ***)buf);
  _Block_object_dispose(&v34, 8);
  objc_autoreleasePoolPop(v15);
LABEL_23:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v13;
}

void sub_100CCBC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void **a55)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  sub_1002A3684(&a55);
  _Block_object_dispose(&a46, 8);
  sub_10187E514((uint64_t)&a52);
  _Unwind_Resume(a1);
}

__n128 sub_100CCBC8C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100CCBCB0(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_1002A3684(&v1);
}

void sub_100CCBCD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (a2)
  {
    v3 = a2;
    if (v3)
    {
      v4 = v3;
      v5 = operator new(0x40uLL);
      v5[2] = 0;
      *v5 = off_10217DEF8;
      v5[1] = 0;
      v5[4] = 0;
      v5[5] = 0;
      *((_DWORD *)v5 + 8) = -1;
      v5[6] = 0;
      v5[7] = 0;
      *((_QWORD *)&v9 + 1) = v5;
      v5[3] = 0;
      *(_QWORD *)&v9 = v5 + 3;
      sub_100CCBDC4((uint64_t)(v5 + 3), v4);
      sub_10033F68C((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), &v9);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += 40;

      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_100CCBDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100CCBDC4(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  *(_QWORD *)a1 = objc_msgSend(a2, "buildingID");
  *(_DWORD *)(a1 + 8) = objc_msgSend(a2, "tileSetStyle");
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 12) = objc_msgSend(a2, "hasTerrainElevation");
  sub_100CCED70((uint64_t *)(a1 + 16), (unint64_t)objc_msgSend(objc_msgSend(a2, "sections"), "count"));
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = objc_msgSend(a2, "sections");
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
        v24 = 0;
        *(_OWORD *)__p = 0u;
        objc_msgSend(v8, "maxBaseHeight", 0, 0, 0, 0, 0, 0);
        objc_msgSend(v8, "minBaseHeight", v9);
        *((_QWORD *)&v18 + 1) = v10;
        objc_msgSend(v8, "terrainElevation");
        v20 = v11;
        objc_msgSend(v8, "topHeight");
        v19 = v12;
        objc_msgSend(v8, "height");
        v21 = v13;
        objc_msgSend(v8, "baseHeight");
        v14 = 0;
        v15 = 0;
        v22 = v16;
        while ((unint64_t)objc_msgSend(v8, "coordinateCount") > v15)
        {
          sub_100CCEE2C(&v18, *(double *)((char *)objc_msgSend(v8, "coordinates") + v14), *(double *)((char *)objc_msgSend(v8, "coordinates") + v14 + 8));
          ++v15;
          v14 += 16;
        }
        sub_100CCEF2C((uint64_t *)a1, &v18);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v5);
  }
  return (int)(954437177 * ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3)) > 0;
}

void sub_100CCBFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

intptr_t sub_100CCC010(uint64_t a1, void *a2)
{
  int32x2_t *v4;
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  uint64_t v21;
  intptr_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  int v40;
  id v41;
  __int16 v42;
  _BYTE v43[24];
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  _BOOL4 v49;
  __int16 v50;
  __int32 v51;
  __int16 v52;
  int v53;
  __int16 v54;
  __int32 v55;
  __int16 v56;
  __int32 v57;
  uint8_t buf[4];
  id v59;
  __int16 v60;
  _BYTE v61[24];
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  _BOOL4 v67;
  __int16 v68;
  __int32 v69;
  __int16 v70;
  int v71;
  __int16 v72;
  __int32 v73;
  __int16 v74;
  __int32 v75;

  v4 = *(int32x2_t **)(a1 + 56);
  v4[28].i8[0] = 0;
  if (a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v59 = objc_msgSend(a2, "code");
      v60 = 2114;
      *(_QWORD *)v61 = objc_msgSend(a2, "domain");
      *(_WORD *)&v61[8] = 2113;
      *(_QWORD *)&v61[10] = objc_msgSend(a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,Buildings,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v36 = qword_1022A00D8;
      v40 = 134349571;
      v41 = objc_msgSend(a2, "code");
      v42 = 2114;
      *(_QWORD *)v43 = objc_msgSend(a2, "domain");
      *(_WORD *)&v43[8] = 2113;
      *(_QWORD *)&v43[10] = objc_msgSend(a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 0, "CLMM,CLTSP,Buildings,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v40, 32);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v4[15] = vadd_s32(v4[15], (int32x2_t)0x100000001);
  }
  else
  {
    v7 = *(double *)(a1 + 64);
    v6 = *(double *)(a1 + 72);
    v8 = *(double *)(a1 + 80);
    v9 = *(double *)(a1 + 88);
    if (sub_100CC3E54(v7, v6, v8, v9))
    {
      *(double *)&v4[7] = v7;
      *(double *)&v4[8] = v8;
      *(double *)&v4[9] = v9;
      *(double *)&v4[10] = v6;
    }
    v4[15].i32[1] = 0;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217DE28);
  v10 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48)) >> 4;
    v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v13 = 0.0;
    if (*(double *)(a1 + 96) >= 0.0)
      v13 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 96)) * 1000.0;
    v15 = *(_QWORD *)(a1 + 80);
    v14 = *(_QWORD *)(a1 + 88);
    v16 = *(_QWORD *)(a1 + 72);
    v17 = *(unsigned __int8 *)(a1 + 104);
    v18 = v4[14].i32[1];
    v19 = v4[15].i32[0];
    v20 = v4[15].i32[1];
    *(_DWORD *)buf = 134351617;
    v59 = (id)v11;
    v60 = 1026;
    *(_DWORD *)v61 = v12;
    *(_WORD *)&v61[4] = 2050;
    *(double *)&v61[6] = v13;
    *(_WORD *)&v61[14] = 2049;
    *(_QWORD *)&v61[16] = v15;
    v62 = 2049;
    v63 = v14;
    v64 = 2050;
    v65 = v16;
    v66 = 1026;
    v67 = a2 != 0;
    v68 = 1026;
    v69 = v18;
    v70 = 1026;
    v71 = v17;
    v72 = 1026;
    v73 = v19;
    v74 = 1026;
    v75 = v20;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,bufferDataUsingMapsAPI,bldgCount,%{public}lu,sizeOfBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v23 = qword_1022A00D8;
    v24 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48)) >> 4;
    v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v26 = 0.0;
    if (*(double *)(a1 + 96) >= 0.0)
      v26 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 96)) * 1000.0;
    v28 = *(_QWORD *)(a1 + 80);
    v27 = *(_QWORD *)(a1 + 88);
    v29 = *(_QWORD *)(a1 + 72);
    v30 = *(unsigned __int8 *)(a1 + 104);
    v31 = v4[14].i32[1];
    v32 = v4[15].i32[0];
    v33 = v4[15].i32[1];
    v40 = 134351617;
    v41 = (id)v24;
    v42 = 1026;
    *(_DWORD *)v43 = v25;
    *(_WORD *)&v43[4] = 2050;
    *(double *)&v43[6] = v26;
    *(_WORD *)&v43[14] = 2049;
    *(_QWORD *)&v43[16] = v28;
    v44 = 2049;
    v45 = v27;
    v46 = 2050;
    v47 = v29;
    v48 = 1026;
    v49 = a2 != 0;
    v50 = 1026;
    v51 = v31;
    v52 = 1026;
    v53 = v30;
    v54 = 1026;
    v55 = v32;
    v56 = 1026;
    v57 = v33;
    LODWORD(v39) = 88;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "CLMM,CLTSP,Buildings,bufferDataUsingMapsAPI,bldgCount,%{public}lu,sizeOfBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", &v40, v39);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  if (*(_BYTE *)(a1 + 105))
    objc_msgSend(*(id *)&v4[11], "clearBuildingTiles");
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = (intptr_t)&v4[29];
  if (&v4[29] != (int32x2_t *)(v21 + 48))
    result = sub_100CCFB70(result, *(uint64_t **)(v21 + 48), *(uint64_t **)(v21 + 56), (uint64_t)(*(_QWORD *)(v21 + 56) - *(_QWORD *)(v21 + 48)) >> 4);
  if (*(_BYTE *)(a1 + 104))
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  return result;
}

void sub_100CCC5AC(uint64_t a1, void *a2)
{
  int32x2_t *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  id v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  __int128 *v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t *v29;
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  const char *v42;
  __int128 *v43;
  uint64_t *v44;
  char *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int32 v51;
  __int32 v52;
  __int32 v53;
  int v54;
  const char *v55;
  __int128 *v56;
  uint64_t v57;
  int32x2_t *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  _BOOL4 v82;
  __int16 v83;
  __int32 v84;
  __int16 v85;
  int v86;
  __int16 v87;
  __int32 v88;
  __int16 v89;
  __int32 v90;
  __int16 v91;
  int v92;
  __int128 buf;
  int v94;
  __int16 v95;
  double v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  _BOOL4 v104;
  __int16 v105;
  __int32 v106;
  __int16 v107;
  int v108;
  __int16 v109;
  __int32 v110;
  __int16 v111;
  __int32 v112;
  __int16 v113;
  int v114;
  _BYTE v115[128];

  v3 = *(int32x2_t **)(a1 + 40);
  v3[28].i8[0] = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v59 = v3;
  if (!a2)
  {
    v3[15] = vadd_s32(v3[15], (int32x2_t)0x100000001);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v26 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLTSP,Buildings,xpcQueryForBuildingData returned error", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v67) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,Buildings,xpcQueryForBuildingData returned error", &v67, 2);
      v43 = (__int128 *)v42;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v42);
      if (v43 != &buf)
        free(v43);
    }
    goto LABEL_34;
  }
  v5 = *(double *)(a1 + 48);
  v4 = *(double *)(a1 + 56);
  v6 = *(double *)(a1 + 64);
  v7 = *(double *)(a1 + 72);
  if (sub_100CC3E54(v5, v4, v6, v7))
  {
    *(double *)&v3[7] = v5;
    *(double *)&v3[8] = v6;
    *(double *)&v3[9] = v7;
    *(double *)&v3[10] = v4;
  }
  v3[15].i32[1] = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v60, v115, 16);
  if (!v9)
  {
LABEL_34:
    v10 = 0;
    goto LABEL_35;
  }
  v10 = 0;
  v11 = *(_QWORD *)v61;
  do
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v61 != v11)
        objc_enumerationMutation(a2);
      v13 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)v12);
      v14 = objc_opt_class(NSDictionary, v8);
      if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
      {
        v15 = operator new(0x40uLL);
        v15[1] = 0;
        v15[2] = 0;
        *v15 = off_10217DEF8;
        v15[3] = 0;
        v15[4] = 0;
        v15[5] = 0;
        *((_DWORD *)v15 + 8) = -1;
        v15[6] = 0;
        v15[7] = 0;
        *(_QWORD *)&buf = v15 + 3;
        *((_QWORD *)&buf + 1) = v15;
        sub_100CCCDEC((uint64_t)(v15 + 3), v13);
        sub_10033F68C(&v64, &buf);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v10 += 40;
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        v19 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v20 = objc_msgSend(a2, "count");
          LODWORD(buf) = 67240192;
          DWORD1(buf) = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,conversion to building failed,%{public}d", (uint8_t *)&buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_10217DE28);
          v21 = qword_1022A00D8;
          v22 = objc_msgSend(a2, "count");
          v67 = 67240192;
          v68 = v22;
          LODWORD(v57) = 8;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v21, 16, "CLMM,CLTSP,Buildings,conversion to building failed,%{public}d", &v67, v57);
          v24 = (__int128 *)v23;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v23);
          if (v24 != &buf)
            free(v24);
        }
      }
      v12 = (char *)v12 + 1;
    }
    while (v12 != v9);
    v25 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v60, v115, 16);
    v9 = v25;
  }
  while (v25);
LABEL_35:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217DE28);
  v27 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    if (a2)
      v28 = objc_msgSend(a2, "count");
    else
      v28 = 0;
    v30 = v64;
    v29 = v65;
    v31 = 0.0;
    if (*(double *)(a1 + 80) >= 0.0)
      v31 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 80)) * 1000.0;
    v33 = *(_QWORD *)(a1 + 64);
    v32 = *(_QWORD *)(a1 + 72);
    v34 = *(_QWORD *)(a1 + 56);
    v35 = v59[27].u8[0];
    v36 = v59[14].i32[1];
    v37 = v59[15].i32[0];
    v38 = v59[15].i32[1];
    v39 = v59[24].u8[0];
    LODWORD(buf) = 67243265;
    DWORD1(buf) = v28;
    WORD4(buf) = 1026;
    *(_DWORD *)((char *)&buf + 10) = v10;
    HIWORD(buf) = 1026;
    v94 = (unint64_t)((char *)v29 - v30) >> 4;
    v95 = 2050;
    v96 = v31;
    v97 = 2049;
    v98 = v33;
    v99 = 2049;
    v100 = v32;
    v101 = 2050;
    v102 = v34;
    v103 = 1026;
    v104 = a2 == 0;
    v105 = 1026;
    v106 = v36;
    v107 = 1026;
    v108 = v35;
    v109 = 1026;
    v110 = v37;
    v111 = 1026;
    v112 = v38;
    v113 = 1026;
    v114 = v39;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,MapHelperService,bldgCount,%{public}d,sizeOfBuildings,%{public}d,convertedBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", (uint8_t *)&buf, 0x60u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v40 = qword_1022A00D8;
    if (a2)
      v41 = objc_msgSend(a2, "count");
    else
      v41 = 0;
    v45 = v64;
    v44 = v65;
    v46 = 0.0;
    if (*(double *)(a1 + 80) >= 0.0)
      v46 = vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 80)) * 1000.0;
    v48 = *(_QWORD *)(a1 + 64);
    v47 = *(_QWORD *)(a1 + 72);
    v49 = *(_QWORD *)(a1 + 56);
    v50 = v59[27].u8[0];
    v51 = v59[14].i32[1];
    v52 = v59[15].i32[0];
    v53 = v59[15].i32[1];
    v54 = v59[24].u8[0];
    v67 = 67243265;
    v68 = v41;
    v69 = 1026;
    v70 = v10;
    v71 = 1026;
    v72 = (unint64_t)((char *)v44 - v45) >> 4;
    v73 = 2050;
    v74 = v46;
    v75 = 2049;
    v76 = v48;
    v77 = 2049;
    v78 = v47;
    v79 = 2050;
    v80 = v49;
    v81 = 1026;
    v82 = a2 == 0;
    v83 = 1026;
    v84 = v51;
    v85 = 1026;
    v86 = v50;
    v87 = 1026;
    v88 = v52;
    v89 = 1026;
    v90 = v53;
    v91 = 1026;
    v92 = v54;
    LODWORD(v57) = 96;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v40, 2, "CLMM,CLTSP,Buildings,MapHelperService,bldgCount,%{public}d,sizeOfBuildings,%{public}d,convertedBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", &v67, v57);
    v56 = (__int128 *)v55;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v55);
    if (v56 != &buf)
      free(v56);
  }
  if (&v59[29] != (int32x2_t *)&v64)
    sub_100CCFB70((uint64_t)&v59[29], (uint64_t *)v64, v65, ((char *)v65 - v64) >> 4);
  *(_QWORD *)&buf = &v64;
  sub_1002A3684((void ***)&buf);
}

void sub_100CCCD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  a39 = (void **)&a24;
  sub_1002A3684(&a39);
  _Unwind_Resume(a1);
}

BOOL sub_100CCCDEC(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  NSString *v20;
  id v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  NSObject *v28;
  _BOOL8 result;
  const char *v30;
  uint8_t *v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint64_t *v39;
  _WORD v40[8];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  uint64_t v45;
  uint8_t buf[1632];

  if (!a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v32 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,makeBuildingFromMapHelperNSDictionary,dictionary is null", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,makeBuildingFromMapHelperNSDictionary,dictionary is null", &v41, 2);
    v31 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "%s\n", v33);
    goto LABEL_74;
  }
  if (objc_msgSend(a2, "valueForKey:", CFSTR("buildingID")))
    *(_QWORD *)a1 = objc_msgSend(objc_msgSend(a2, "valueForKey:", CFSTR("buildingID")), "longLongValue");
  if (objc_msgSend(a2, "valueForKey:", CFSTR("tileSetStyle")))
    *(_DWORD *)(a1 + 8) = objc_msgSend(objc_msgSend(a2, "valueForKey:", CFSTR("tileSetStyle")), "intValue");
  if (objc_msgSend(a2, "valueForKey:", CFSTR("hasTerrainElevation")))
    *(_BYTE *)(a1 + 12) = objc_msgSend(objc_msgSend(a2, "valueForKey:", CFSTR("hasTerrainElevation")), "BOOLValue");
  if (!objc_msgSend(a2, "valueForKey:", CFSTR("sections"))
    || (v4 = objc_msgSend(a2, "valueForKey:", CFSTR("sections"))) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v28 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is nil", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is nil", &v41, 2);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "%s\n", v30);
    goto LABEL_74;
  }
  v6 = v4;
  v7 = objc_opt_class(NSMutableArray, v5);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v34 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is not an array", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is not an array", &v41, 2);
    v31 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "%s\n", v35);
    goto LABEL_74;
  }
  v39 = (uint64_t *)a1;
  sub_100CCED70((uint64_t *)(a1 + 16), (unint64_t)objc_msgSend(v6, "count"));
  if (!objc_msgSend(v6, "count"))
    return (int)(954437177 * ((unint64_t)(v39[3] - v39[2]) >> 3)) > 0;
  v8 = 0;
  while (1)
  {
    v9 = objc_msgSend(v6, "objectAtIndexedSubscript:", v8);
    v10 = v9;
    if (!v9)
      break;
    v45 = 0;
    v43 = 0u;
    *(_OWORD *)__p = 0u;
    v41 = 0u;
    v42 = 0u;
    if (objc_msgSend(v9, "valueForKey:", CFSTR("maxBaseHeight")))
    {
      objc_msgSend(objc_msgSend(v10, "valueForKey:", CFSTR("maxBaseHeight")), "doubleValue");
      *(_QWORD *)&v41 = v11;
    }
    if (objc_msgSend(v10, "valueForKey:", CFSTR("minBaseHeight")))
    {
      objc_msgSend(objc_msgSend(v10, "valueForKey:", CFSTR("minBaseHeight")), "doubleValue");
      *((_QWORD *)&v41 + 1) = v12;
    }
    if (objc_msgSend(v10, "valueForKey:", CFSTR("topHeight")))
    {
      objc_msgSend(objc_msgSend(v10, "valueForKey:", CFSTR("topHeight")), "doubleValue");
      *(_QWORD *)&v42 = v13;
    }
    if (objc_msgSend(v10, "valueForKey:", CFSTR("terrainElevation")))
    {
      objc_msgSend(objc_msgSend(v10, "valueForKey:", CFSTR("terrainElevation")), "doubleValue");
      *((_QWORD *)&v42 + 1) = v14;
    }
    if (objc_msgSend(v10, "valueForKey:", CFSTR("height")))
    {
      objc_msgSend(objc_msgSend(v10, "valueForKey:", CFSTR("height")), "doubleValue");
      *(_QWORD *)&v43 = v15;
    }
    if (objc_msgSend(v10, "valueForKey:", CFSTR("baseHeight")))
    {
      objc_msgSend(objc_msgSend(v10, "valueForKey:", CFSTR("baseHeight")), "doubleValue");
      *((_QWORD *)&v43 + 1) = v16;
    }
    if (objc_msgSend(v10, "valueForKey:", CFSTR("coordinateCount")))
    {
      v17 = objc_msgSend(objc_msgSend(v10, "valueForKey:", CFSTR("coordinateCount")), "intValue");
      if (v17 >= 1)
      {
        v18 = 0;
        v19 = 1;
        while (1)
        {
          v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%i"), CFSTR("coord"), v18);
          if (objc_msgSend(v10, "valueForKey:", v20))
          {
            v21 = objc_msgSend(objc_msgSend(v10, "valueForKey:", v20), "componentsSeparatedByString:", CFSTR(","));
            if (objc_msgSend(v21, "count") != (id)2)
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_10217DE28);
              v25 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,coordinate column counts is not 2", buf, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_10217DE28);
                v40[0] = 0;
                LODWORD(v38) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,fillFromMapHelperNSDictionary,coordinate column counts is not 2", v40, v38);
                v27 = (uint8_t *)v26;
                sub_100512490("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "%s\n", v26);
                if (v27 != buf)
                  free(v27);
              }
              goto LABEL_36;
            }
            objc_msgSend(objc_msgSend(v21, "objectAtIndexedSubscript:", 0), "doubleValue");
            v23 = v22;
            objc_msgSend(objc_msgSend(v21, "objectAtIndexedSubscript:", 1), "doubleValue");
            sub_100CCEE2C(&v41, v23, v24);
          }
          v18 = (v18 + 1);
          v19 = (int)v18 < v17;
          if (v17 == (_DWORD)v18)
            goto LABEL_35;
        }
      }
    }
    v19 = 0;
LABEL_35:
    sub_100CCEF2C(v39, &v41);
LABEL_36:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v19)
      return 0;
    if ((unint64_t)objc_msgSend(v6, "count") <= ++v8)
      return (int)(954437177 * ((unint64_t)(v39[3] - v39[2]) >> 3)) > 0;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217DE28);
  v36 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sectionDict is nil", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    LOWORD(v41) = 0;
    LODWORD(v38) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sectionDict is nil", &v41, v38);
    v31 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "%s\n", v37);
LABEL_74:
    if (v31 != buf)
      free(v31);
    return 0;
  }
  return result;
}

void sub_100CCD7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100CCD7E8(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_100CCD814(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_1002A3684(&v3);
  v3 = (void **)(a1 + 24);
  sub_1002A3684(&v3);
  return a1;
}

uint64_t sub_100CCD85C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  sub_1002A3684(&v3);
  v3 = (void **)(a1 + 8);
  sub_1002A3684(&v3);
  return a1;
}

uint64_t sub_100CCD8A4(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  _BOOL4 v10;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = *a2;
    v4 = a2[1];
    result = 1;
    do
    {
      v6 = v2[4];
      v7 = v2[5];
      v8 = v4 < v7;
      if (v3 != v6)
        v8 = v3 < v6;
      if (!v8)
      {
        v9 = v7 < v4;
        if (v3 == v6)
          v10 = v9;
        else
          v10 = v6 < v3;
        if (!v10)
          return result;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

_OWORD *sub_100CCD904(uint64_t **a1, unint64_t *a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;

  v6 = (void **)sub_100CCD998((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x70uLL);
    v9 = **a4;
    v7[4] = 0u;
    v7[5] = 0u;
    v7[2] = v9;
    v7[3] = 0u;
    *((_QWORD *)v7 + 12) = 0;
    *((_QWORD *)v7 + 13) = 0xBFF0000000000000;
    sub_1000145B0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_100CCD998(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        v10 = v8[5];
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (_QWORD *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

uint64_t *sub_100CCDA18(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_100CCD998((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_100CCDA94((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000145B0(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

double sub_100CCDA94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  double result;

  v5 = a1 + 8;
  v6 = operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v6[2] = *(_OWORD *)a2;
  *((_WORD *)v6 + 24) = *(_WORD *)(a2 + 16);
  *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v6[5] = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v6 + 12) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = *(double *)(a2 + 72);
  *((double *)v6 + 13) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_100CCDB18(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1004F6C18((char *)(a1 + 24), *(_QWORD **)(a3 + 8), *(_QWORD **)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1004F6C18((char *)(a1 + 48), *(_QWORD **)(a3 + 32), *(_QWORD **)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 4);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 56);
  return a1;
}

void sub_100CCDBA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A3684((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100CCDBB8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v4;
  _QWORD v5[3];
  void **v6;

  v4 = *(void **)a2;
  for (i = *(_QWORD *)(a2 + 8); (void *)i != v4; i = sub_100261F44(i - 16))
    ;
  *(_QWORD *)(a2 + 8) = v4;
  sub_100CCDC20((void **)a2);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(v5, 0, sizeof(v5));
  v6 = (void **)v5;
  sub_1002A3684(&v6);
}

void sub_100CCDC20(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_100261F44(v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_100CCDC7C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  void **v5;

  v3 = sub_10008A9F0(a1, (uint64_t *)a2);
  v5 = (void **)(a2 + 80);
  sub_1002A3684(&v5);
  v5 = (void **)(a2 + 56);
  sub_1002A3684(&v5);
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_100CCDCD4(uint64_t **a1, unint64_t *a2)
{
  uint64_t **v3;

  v3 = (uint64_t **)sub_100CCDD18((uint64_t)a1, a2);
  if (a1 + 1 == v3)
    return 0;
  sub_100CCDC7C(a1, (uint64_t)v3);
  return 1;
}

_QWORD *sub_100CCDD18(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = v3[4];
    v10 = v8 == v5;
    v9 = v8 < v5;
    if (v10)
      v9 = v3[5] < v6;
    v10 = !v9;
    if (v9)
      v11 = v3 + 1;
    else
      v11 = v3;
    if (v10)
      v7 = v3;
    v3 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = v7[4];
  v13 = v6 < v7[5];
  v10 = v5 == v12;
  v14 = v5 < v12;
  if (v10)
    v14 = v13;
  if (v14)
    return v2;
  return v7;
}

double *sub_100CCDD8C(double *a1, double a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  sub_100515834(a1, a1 + 1, a1 + 2, a1 + 3, a2, a3, a4);
  sub_100080DCC(a1[1]);
  *((_QWORD *)a1 + 1) = v5;
  sub_100080DCC(a1[3]);
  *((_QWORD *)a1 + 3) = v6;
  return a1;
}

unint64_t sub_100CCDDE0(void *a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  double v16[3];
  id v17;
  int v18;
  unint64_t v19;
  __int128 v20;
  uint8_t buf[4];
  id v22;

  if (a1)
  {
    v2 = objc_msgSend(a1, "roadID");
    v17 = v2;
    if ((unint64_t)objc_msgSend(a1, "coordinateCount") > 1)
    {
      v20 = *(_OWORD *)objc_msgSend(a1, "coordinates");
      *(_OWORD *)v16 = *((_OWORD *)objc_msgSend(a1, "coordinates") + 1);
      if ((unint64_t)objc_msgSend(a1, "coordinateCount") >= 2)
      {
        v8 = 1;
        v9 = 16;
        do
        {
          *(_OWORD *)v16 = *(_OWORD *)((char *)objc_msgSend(a1, "coordinates") + v9);
          if (!sub_100512A74(*(double *)&v20, *((double *)&v20 + 1), v16[0], v16[1], 0.0000001))
            break;
          ++v8;
          v9 += 16;
        }
        while ((unint64_t)objc_msgSend(a1, "coordinateCount") > v8);
      }
      if (!sub_100CCE320((double *)&v20, v16, (int)objc_msgSend(a1, "isRail"), (int)objc_msgSend(a1, "isBridge"), (int)objc_msgSend(a1, "isTunnel"), (unint64_t *)&v17))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        v10 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134283521;
          v22 = v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,unable to make CLRoadID from GeoMapFeatureAccess,%{private}lld", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_10217DE28);
          v18 = 134283521;
          v19 = (unint64_t)v17;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,GeoMapDataID,unable to make CLRoadID from GeoMapFeatureAccess,%{private}lld", &v18, 12);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
      return (unint64_t)v17;
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      v3 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283521;
        v22 = objc_msgSend(a1, "roadID");
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217DE28);
        v4 = qword_1022A00D8;
        LODWORD(v20) = 134283521;
        *(_QWORD *)((char *)&v20 + 4) = objc_msgSend(a1, "roadID");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 2, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", &v20, 12);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217DE28);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,null feature", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217DE28);
      LOWORD(v20) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,GeoMapDataID,null feature", &v20, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
  return (unint64_t)v2;
}

BOOL sub_100CCE320(double *a1, double *a2, int a3, int a4, int a5, unint64_t *a6)
{
  uint64_t v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15[2];

  v6 = 0;
  if (a1 && a2)
  {
    v8 = 0.2;
    if (a5)
      v8 = 0.35;
    if (a4)
      v8 = 0.3;
    if (a3)
      v9 = 0.25;
    else
      v9 = v8;
    v10 = a1[1];
    v11 = a2[1];
    v15[0] = *a1 + (*a2 - *a1) * v9;
    v12 = sub_1010B9110(v10, v11);
    sub_100080DCC(v10 + v12 * v9);
    v15[1] = v13;
    sub_100CCE3D0(v15, a6);
    return *a6 != 0;
  }
  return v6;
}

BOOL sub_100CCE3D0(double *a1, unint64_t *a2)
{
  _BOOL4 v4;

  v4 = sub_10011CE64(*a1, a1[1]);
  if (!v4)
    *a2 = (unint64_t)((a1[1] + 180.0) * 10000000.0) | ((unint64_t)((*a1 + 90.0) * 10000000.0) << 32);
  return !v4;
}

uint64_t *sub_100CCE43C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 4);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v13 > 0x555555555555555)
      sub_100259694();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x2AAAAAAAAAAAAAALL)
      v15 = 0x555555555555555;
    else
      v15 = v13;
    v22 = v9;
    if (v15)
      v16 = (char *)sub_100313718(v9, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[48 * v8];
    v20 = v19;
    v21 = &v16[48 * v15];
    sub_100CCE658(&v18, a3);
    v4 = (uint64_t *)sub_100CCE790(a1, &v18, (uint64_t)v4);
    sub_100CCECDC((uint64_t)&v18);
  }
  else if (a2 == (uint64_t *)v6)
  {
    sub_100CCE840(v9, a2, a3);
    a1[1] = (uint64_t)(v4 + 6);
  }
  else
  {
    sub_100CCE5D8((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 6));
    if (v4 <= a3)
      a3 += 6 * (a1[1] > (unint64_t)a3);
    sub_100349198(v4, a3);
    v12 = v7 + 48 * v8;
    sub_100349198((_QWORD *)(v12 + 16), a3 + 2);
    sub_100349198((_QWORD *)(v12 + 32), a3 + 4);
  }
  return v4;
}

void sub_100CCE5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100CCECDC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCE5D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (_OWORD *)v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v8[1] = *(_OWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      v8[2] = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v8 += 3;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_100CCE8A4((uint64_t)&v11, a2, v7, v6);
}

void sub_100CCE658(_QWORD *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = (__int128 *)a1[2];
  if (v4 == (__int128 *)a1[3])
  {
    v5 = (__int128 *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (__int128 *)*a1)
        v10 = 1;
      else
        v10 = 0x5555555555555556 * (((uint64_t)v4 - *a1) >> 4);
      v11 = v10 >> 2;
      v12 = a1[4];
      v19 = a1[4];
      *(_QWORD *)&v17 = sub_100313718(v12, v10);
      *((_QWORD *)&v17 + 1) = v17 + 48 * v11;
      *(_QWORD *)&v18 = *((_QWORD *)&v17 + 1);
      *((_QWORD *)&v18 + 1) = v17 + 48 * v13;
      sub_100CCE9A4((uint64_t)&v17, a1[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 4));
      v14 = v18;
      v15 = *(_OWORD *)a1;
      v16 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v17;
      *((_OWORD *)a1 + 1) = v14;
      v17 = v15;
      v18 = v16;
      sub_100CCECDC((uint64_t)&v17);
      v4 = (__int128 *)a1[2];
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 4);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      sub_100CCE92C((uint64_t)&v17, v5, v4, (uint64_t)&v5[-3 * (v7 >> 1)]);
      v4 = v9;
      a1[1] += 16 * v8;
      a1[2] = v9;
    }
  }
  sub_100CCE840(a1[4], v4, a2);
  a1[2] += 48;
}

void sub_100CCE77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100CCECDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCE790(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_100CCE9F4((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100CCEA9C(v7, a3, a1[1], (_OWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void sub_100CCE840(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a3[3];
  a2[2] = a3[2];
  a2[3] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a3[5];
  a2[4] = a3[4];
  a2[5] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
}

uint64_t sub_100CCE8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      sub_1002B7674(a4 + v7 - 48, (__int128 *)(a3 + v7 - 48));
      sub_1002B7674(a4 + v7 - 32, (__int128 *)(a3 + v7 - 32));
      sub_1002B7674(a4 + v7 - 16, (__int128 *)(a3 + v7 - 16));
      v7 -= 48;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

__int128 *sub_100CCE92C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_1002B7674(a4, v5);
    sub_1002B7674(a4 + 16, v5 + 1);
    sub_1002B7674(a4 + 32, v5 + 2);
    a4 += 48;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_100CCE9A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  _OWORD *v4;

  v3 = *(_OWORD **)(result + 16);
  if (a3)
  {
    v4 = &v3[3 * a3];
    do
    {
      *v3 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v3[1] = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v3[2] = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v3 += 3;
      a2 += 48;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t sub_100CCE9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 48);
    do
    {
      v9 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *v8 = v9;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v8[1] = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v8[2] = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 48;
      v8 -= 3;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_100CCEB2C((uint64_t)v12);
  return v10;
}

_OWORD *sub_100CCEA9C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  _OWORD *v4;
  _QWORD v6[3];
  char v7;
  _OWORD *v8;
  _OWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v4[1] = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v4[2] = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v4 += 3;
      a2 += 48;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  sub_100CCEC3C((uint64_t)v6);
  return v4;
}

uint64_t sub_100CCEB2C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100CCEB60((uint64_t *)a1);
  return a1;
}

uint64_t sub_100CCEB60(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return sub_100CCEBD4(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_100CCEBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t result;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    sub_100261F44(i + 32);
    sub_100261F44(i + 16);
    result = sub_100261F44(i);
    i = *(_QWORD *)(a2 + 32) + 48;
  }
  return result;
}

uint64_t sub_100CCEC3C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100CCEC84(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_100CCEC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      sub_100261F44(v6 - 16);
      sub_100261F44(v6 - 32);
      result = sub_100261F44(v6 - 48);
      v6 -= 48;
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t sub_100CCECDC(uint64_t a1)
{
  sub_100CCED10(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100CCED10(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 48;
      sub_100261F44(v2 - 16);
      sub_100261F44(v2 - 32);
      result = sub_100261F44(v2 - 48);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_100CCED70(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10029D26C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 72 * v6;
    sub_100CCEF6C(a1, v7);
    return sub_100CCF118((uint64_t)v7);
  }
  return result;
}

void sub_100CCEE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100CCF118((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CCEE2C(_QWORD *a1, double a2, double a3)
{
  uint64_t v6;
  unint64_t v7;
  double *v8;
  double *v9;
  void **v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  double *v17;
  char *v18;

  v6 = (uint64_t)(a1 + 8);
  v7 = a1[8];
  v8 = (double *)a1[7];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (void **)(a1 + 6);
    v11 = (double *)a1[6];
    v12 = ((char *)v8 - (char *)v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_100259694();
    v14 = v7 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)sub_10028E224(v6, v15);
      v11 = (double *)a1[6];
      v8 = (double *)a1[7];
    }
    else
    {
      v16 = 0;
    }
    v17 = (double *)&v16[16 * v12];
    v18 = &v16[16 * v15];
    *v17 = a2;
    v17[1] = a3;
    v9 = v17 + 2;
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 2;
        v8 -= 2;
      }
      while (v8 != v11);
      v11 = (double *)*v10;
    }
    a1[6] = v17;
    a1[7] = v9;
    a1[8] = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v8 = a2;
    v8[1] = a3;
    v9 = v8 + 2;
  }
  a1[7] = v9;
}

uint64_t sub_100CCEF2C(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 2;
  v4 = a1[3];
  if (v4 >= a1[4])
  {
    result = sub_100CCF204(v3, a2);
  }
  else
  {
    sub_100CCF1A4((uint64_t)v3, a2);
    result = v4 + 72;
  }
  a1[3] = result;
  return result;
}

uint64_t sub_100CCEF6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100CCEFE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100CCEFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 72);
      v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_OWORD *)(v7 - 72) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_100CCF0A0((uint64_t)v12);
  return v10;
}

uint64_t sub_100CCF0A0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100CCF0D4(a1);
  return a1;
}

void sub_100CCF0D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 48);
    if (v3)
    {
      *(_QWORD *)(v1 + 56) = v3;
      operator delete(v3);
    }
    v1 += 72;
  }
}

uint64_t sub_100CCF118(uint64_t a1)
{
  sub_100CCF14C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100CCF14C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 72;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
}

_QWORD *sub_100CCF1A4(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(v3 + 16) = a2[1];
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  result = sub_1002AE804((_QWORD *)(v3 + 48), *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
  *(_QWORD *)(a1 + 8) = v3 + 72;
  return result;
}

void sub_100CCF1FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100CCF204(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10029D26C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[72 * v9];
  v12 = *a2;
  v13 = a2[2];
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = v13;
  *(_OWORD *)v11 = v12;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 6) = 0;
  sub_1002AE804((_QWORD *)v11 + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
  v17 += 72;
  sub_100CCEF6C(a1, v16);
  v14 = a1[1];
  sub_100CCF118((uint64_t)v16);
  return v14;
}

void sub_100CCF32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100CCF118((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CCF340(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217DE58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CCF354(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217DE58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100CCF388(uint64_t a1)
{
  char v1;

  sub_100CCF3B0((uint64_t)&v1, a1 + 24);
}

void sub_100CCF3B0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(a2 + 184);
  if (v3)
  {
    *(_QWORD *)(a2 + 192) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 160);
  if (v4)
  {
    *(_QWORD *)(a2 + 168) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 136);
  if (v5)
  {
    *(_QWORD *)(a2 + 144) = v5;
    operator delete(v5);
  }
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
}

_QWORD *sub_100CCF414(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      sub_100259694();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)sub_10028E224(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)sub_100CCF67C(a1, v33, v5);
    sub_100014F20((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    sub_100CCF600((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        sub_100349198(v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_100CCF5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100014F20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCF600(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = sub_1002B7674(v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_100CCF67C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_100CCF718(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1002A3684(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_100CCF788@<X0>(double *a1@<X1>, double *a2@<X2>, double *a3@<X3>, double *a4@<X4>, double *a5@<X5>, double *a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>, char *a9, char *a10, double *a11, double *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16)
{
  _QWORD *v23;
  _QWORD *result;

  v23 = operator new(0xC0uLL);
  result = sub_100CCF864(v23, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16);
  *a8 = v23 + 3;
  a8[1] = v23;
  return result;
}

void sub_100CCF850(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100CCF864(_QWORD *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, uint64_t *a8, char *a9, char *a10, double *a11, double *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16)
{
  char v18;

  a1[2] = 0;
  *a1 = off_10217DEA8;
  a1[1] = 0;
  sub_100CCF950((uint64_t)&v18, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return a1;
}

void sub_100CCF8E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100CCF8FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217DEA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CCF910(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217DEA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100CCF944(uint64_t a1)
{
  return sub_100261F44(a1 + 24);
}

void sub_100CCF950(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, uint64_t *a9, char *a10, char *a11, double *a12, double *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17)
{
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v17 = *a3;
  v18 = *a4;
  v19 = *a5;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  v23 = a9[1];
  v29 = *a9;
  v30 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_100CCFA3C(a2, &v29, *a10, *a11, v17, v18, v19, v20, v21, v22, *a12, *a13, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, *a14, *a15, *a16,
    *a17);
  v26 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_100CCFA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCFA3C(uint64_t a1, uint64_t *a2, char a3, char a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0xBFF0000000000000;
  __asm { FMOV            V6.2D, #-1.0 }
  *(_OWORD *)(a1 + 40) = _Q6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 256;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_101BAFC90;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  v30 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *(double *)(a1 + 16) = a5;
  *(double *)(a1 + 24) = a6;
  *(double *)(a1 + 32) = a7;
  *(double *)(a1 + 40) = a8;
  *(double *)(a1 + 48) = a9;
  *(double *)(a1 + 56) = a10;
  sub_100349198((_QWORD *)a1, &v37);
  *(_BYTE *)(a1 + 64) = a3;
  *(_BYTE *)(a1 + 65) = a4;
  *(double *)(a1 + 72) = a11;
  *(double *)(a1 + 80) = a12;
  *(_QWORD *)(a1 + 88) = a17;
  *(_QWORD *)(a1 + 128) = a18;
  *(_QWORD *)(a1 + 136) = a19;
  *(_QWORD *)(a1 + 144) = a20;
  v33 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return a1;
}

uint64_t sub_100CCFB70(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_100CCDC20((void **)a1);
    if (a4 >> 60)
      sub_100259694();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)sub_1002AE87C((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)sub_100349198(v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      sub_100349198(v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = sub_100261F44(result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

_OWORD *sub_100CCFD20(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_100CCD998((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_BYTE *)v6 + 48) = *(_BYTE *)(a3 + 16);
    sub_1000145B0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_100CCFDA8(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)sub_100CCD998((uint64_t)a1, &v12, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v10[1] = a1 + 1;
    v8 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v6 + 3) = v8;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v11 = 1;
    sub_1000145B0(a1, v12, v7, v6);
    v10[0] = 0;
    sub_100CCFE54((uint64_t)v10, 0);
  }
  return v6;
}

void sub_100CCFE54(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100261F44((uint64_t)v2 + 48);
    operator delete(v2);
  }
}

uint64_t *sub_100CCFE98(uint64_t **a1, unint64_t *a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;

  v6 = (void **)sub_100CCD998((uint64_t)a1, &v11, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x60uLL);
    v9 = **a4;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = 0u;
    sub_1000145B0(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t sub_100CCFF24(uint64_t *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_100259694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100313718((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[48 * v3];
  v13 = &v7[48 * v6];
  sub_100CCE840((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 48;
  sub_100CD002C(a1, &v10);
  v8 = a1[1];
  sub_100CCECDC((uint64_t)&v10);
  return v8;
}

void sub_100CD0018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100CCECDC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CD002C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100CCE9F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_100CD00A0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100CD00A0(a1, *a2);
    sub_100CD00A0(a1, a2[1]);
    sub_100261F44((uint64_t)(a2 + 10));
    sub_100261F44((uint64_t)(a2 + 8));
    sub_100261F44((uint64_t)(a2 + 6));
    operator delete(a2);
  }
}

void sub_100CD00FC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100CD013C((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_100CD013C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 48)
  {
    sub_100261F44(i - 16);
    sub_100261F44(i - 32);
    result = sub_100261F44(i - 48);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_OWORD *sub_100CD019C(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)sub_100CCD998((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_BYTE *)v7 + 48) = 0;
    sub_1000145B0(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *sub_100CD0224(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_1004F6C18((char *)v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_100CD026C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100CD0274(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_1004F6C18(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  sub_100CD0388(a1, v14);
  v12 = a1[1];
  sub_100CD0518(v14);
  return v12;
}

void sub_100CD0374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100CD0518((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CD0388(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100CD03FC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100CD03FC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_100CD049C((uint64_t)v11);
  return v9;
}

uint64_t sub_100CD049C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100CD04D0(a1);
  return a1;
}

void sub_100CD04D0(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_1002A3684(&v3);
    v1 += 3;
  }
}

void **sub_100CD0518(void **a1)
{
  sub_100CD0548((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100CD0548(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_1002A3684(&v5);
  }
}

uint64_t sub_100CD0598(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    sub_100259694();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1002697F0((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[64 * v3];
  v14 = &v8[64 * v7];
  sub_100CD0684((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 64;
  sub_100CD0768(a1, &v11);
  v9 = a1[1];
  sub_100CD091C((uint64_t)&v11);
  return v9;
}

void sub_100CD0670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100CD091C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100CD0684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_100CD06E8((char *)(a2 + 8), *(_QWORD **)(a3 + 8), *(_QWORD **)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  result = *(double *)(a3 + 56);
  *(double *)(a2 + 56) = result;
  return result;
}

char *sub_100CD06E8(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;

  if (a4)
  {
    v6 = result;
    result = sub_1002AE87C(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_100CD074C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CD0768(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100CD07DC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100CD07DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 64;
      sub_100CD0684(a1, v7 - 64, v9);
      v7 = *((_QWORD *)&v16 + 1) - 64;
      *((_QWORD *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_100CD08A4((uint64_t)v13);
  return v11;
}

void sub_100CD0890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100CD08A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100CD08A4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100CD08D8(a1);
  return a1;
}

void sub_100CD08D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 64;
  }
}

uint64_t sub_100CD091C(uint64_t a1)
{
  sub_100CD0950(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100CD0950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 64;
    v5 = *(void **)(v2 - 56);
    if (v5)
    {
      *(_QWORD *)(v2 - 48) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
}

void sub_100CD09A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217DEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CD09BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217DEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100CD09F0(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_100CD0A1C(&v1);
}

void sub_100CD0A1C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100CD0A5C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100CD0A5C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_100CD0AA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217DF48;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 32) = -1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 3212836864;
  sub_100CD0B3C(a1);
  return a1;
}

void sub_100CD0B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CD0B3C(uint64_t a1)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 64))
    operator delete[]();
  *(_DWORD *)(a1 + 72) = 0;
  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    sub_100D75700(result);
    result = *(_QWORD *)(a1 + 80);
    if (result)
      operator delete();
    *(_QWORD *)(a1 + 80) = 0;
  }
  return result;
}

void sub_100CD0BAC(uint64_t a1)
{
  sub_100CD0B3C(a1);
  operator new();
}

uint64_t sub_100CD0CE4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10217DF48;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
    sub_100D75700(v2);
  sub_100CD0B3C(a1);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100CD0D4C(uint64_t a1)
{
  sub_100CD0CE4(a1);
  operator delete();
}

void sub_100CD0D70(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    sub_100D756BC(v1);
}

float sub_100CD0D80(uint64_t a1, _QWORD *a2, int8x16_t a3, int8x16_t a4)
{
  float result;
  uint64_t v6;

  v6 = 0;
  result = sub_10095C830(*(_QWORD *)(a1 + 80), a2, (double *)&v6, a3, a4);
  if (result != 3.4028e38)
    return result / (float)((float)*(int *)(a1 + 72) * 1.4142);
  return result;
}

uint64_t sub_100CD0DE4(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

float sub_100CD0E00(uint64_t a1)
{
  uint64_t v1;
  float result;
  int v3;

  v1 = *(_QWORD *)(a1 + 80);
  result = -1.0;
  if (v1)
  {
    v3 = *(_DWORD *)(a1 + 72);
    if (v3 >= 1)
      return *(float *)(v1 + 32) / (float)((float)v3 * 1.4142);
  }
  return result;
}

void sub_100CD0E34()
{
  operator new();
}

void sub_100CD0E74()
{
  operator delete();
}

uint64_t sub_100CD0E98()
{
  if (qword_102307B08 != -1)
    dispatch_once(&qword_102307B08, &stru_10217DF68);
  return qword_102311420;
}

void sub_100CD0EDC(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLEarGestureNotifier", 1);
}

void sub_100CD19B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *v3 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100412424(v2);
  sub_1009BAD18(v1);
  _Unwind_Resume(a1);
}

void sub_100CD1A44(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD v9[5];
  _QWORD v10[5];

  if (*a2 == 11)
  {
    v8 = *a3;
    if (*(unsigned __int8 *)(a4 + 410) == v8)
      return;
    *(_BYTE *)(a4 + 410) = v8;
    v6 = sub_100127B9C();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100CD4EE4;
    v9[3] = &unk_10212ECA0;
    v9[4] = a4;
    v7 = v9;
    goto LABEL_7;
  }
  if (*a2 == 10)
  {
    v5 = *(unsigned __int8 *)(a4 + 409);
    if (v5 == *a3)
    {
      *(_BYTE *)(a4 + 409) = v5 ^ 1;
      v6 = sub_100127B9C();
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100CD4EDC;
      v10[3] = &unk_10212ECA0;
      v10[4] = a4;
      v7 = v10;
LABEL_7:
      sub_1000A50A8(v6, (uint64_t)v7);
    }
  }
}

_QWORD *sub_100CD1B20(_QWORD *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v3;

  *a1 = off_10217DF98;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);
  sub_100CD1B84((uint64_t)a1);
  v3 = a1[40];
  a1[40] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100412424(a1 + 9);
  return sub_1009BAD18(a1);
}

void sub_100CD1B84(uint64_t a1)
{
  __CFRunLoopTimer *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 312))
  {
    if (*(_QWORD *)(a1 + 328))
    {
      v2 = *(__CFRunLoopTimer **)(a1 + 368);
      if (v2)
      {
        CFRunLoopTimerInvalidate(v2);
        CFRelease(*(CFTypeRef *)(a1 + 368));
        *(_QWORD *)(a1 + 368) = 0;
      }
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v3 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting prox mode to none. Stopping ear gesture detection.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Setting prox mode to none. Stopping ear gesture detection.", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::stopDetectingGestures()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      BKSHIDServicesRequestProximityDetectionMode(0);
      if (sub_100B14EA4())
      {
        v4 = sub_100B14EA4();
        sub_1000A4A6C(v4, 0, *(_QWORD *)(a1 + 336));
        v5 = *(_QWORD *)(a1 + 336);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        *(_QWORD *)(a1 + 336) = 0;
      }
      v6 = sub_100CA9718();
      sub_1000A4A6C(v6, 0, *(_QWORD *)(a1 + 328));
      v7 = *(_QWORD *)(a1 + 328);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      *(_QWORD *)(a1 + 328) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      sub_10041250C((_QWORD *)(a1 + 88));
      sub_10041250C((_QWORD *)(a1 + 160));
      sub_10041250C((_QWORD *)(a1 + 232));
    }
    if (*(_QWORD *)(a1 + 32))
    {
      v8 = sub_10024095C();
      sub_1000A4A6C(v8, 0, *(_QWORD *)(a1 + 32));
      v9 = *(_QWORD *)(a1 + 32);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
}

void sub_100CD1DF4(_QWORD *a1)
{
  sub_100CD1B20(a1);
  operator delete();
}

void sub_100CD1E18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100CA9718();
  sub_100CA9D00(v3, a2);
}

uint64_t sub_100CD1E3C(uint64_t result)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  CFRunLoopTimerContext context;
  uint8_t buf[1640];

  if (*(_BYTE *)(result + 312))
  {
    if (!*(_QWORD *)(result + 328))
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v1 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Starting ear gesture detection", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        LOWORD(context.version) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Starting ear gesture detection", &context, 2);
        v3 = (uint8_t *)v2;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::startDetectingGestures()", "%s\n", v2);
        if (v3 != buf)
          free(v3);
      }
      operator new();
    }
    if (!*(_QWORD *)(result + 32))
      operator new();
  }
  return result;
}

void sub_100CD23F0()
{
  operator delete();
}

void sub_100CD2424(uint64_t a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  double v9;
  NSObject *v10;
  __CFRunLoopTimer *v11;
  CFAbsoluteTime Current;
  NSObject *v13;
  double v14;
  double v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  double v29;
  uint8_t buf[4];
  double v31;

  if (!strncmp((const char *)a1, "Ear", 3uLL))
  {
    strncpy((char *)(a2 + 393), (const char *)a1, 0x10uLL);
    v4 = *(double *)(a1 + 32);
    *(double *)(a2 + 352) = v4;
    if (*(_BYTE *)(a2 + 314))
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v5 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Readying gesture notification. Ignoring prox", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        LOWORD(v28) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Readying gesture notification. Ignoring prox", &v28, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      *(_DWORD *)(a2 + 360) = 2;
      v6 = 731054220;
LABEL_9:
      kdebug_trace(v6, 0, 0, 0, 0);
      return;
    }
    if (!*(_DWORD *)(a2 + 360))
    {
      if (vabdd_f64(v4, *(double *)(a2 + 344)) >= *(double *)(a2 + 376))
      {
        if (*(_BYTE *)(a2 + 392))
          return;
      }
      else if (*(_BYTE *)(a2 + 392))
      {
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v7 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting prox mode to PassiveEngaged. Ready to send notification.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
          LOWORD(v28) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Setting prox mode to PassiveEngaged. Ready to send notification.", &v28, 2);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        BKSHIDServicesRequestProximityDetectionMode(2);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v8 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
        {
          v9 = *(double *)(a1 + 32) - *(double *)(a2 + 344);
          *(_DWORD *)buf = 134349056;
          v31 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Readying gesture notification. Prox triggered before motion. dt = %{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
          v24 = *(double *)(a1 + 32) - *(double *)(a2 + 344);
          v28 = 134349056;
          v29 = v24;
          LODWORD(v27) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Readying gesture notification. Prox triggered before motion. dt = %{public}.3f", &v28, v27);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
        ADClientPushValueForDistributionKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("ProxToEarGestureDelta")), (*(double *)(a1 + 32) - *(double *)(a2 + 344)) * 1000.0);
        *(_DWORD *)(a2 + 360) = 2;
        v6 = 731054224;
        goto LABEL_9;
      }
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v10 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting prox mode to PassiveEngaged. Motion waiting for prox.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        LOWORD(v28) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Setting prox mode to PassiveEngaged. Motion waiting for prox.", &v28, 2);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      BKSHIDServicesRequestProximityDetectionMode(2);
      *(_DWORD *)(a2 + 360) = 1;
      v11 = *(__CFRunLoopTimer **)(a2 + 368);
      Current = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v11, Current + *(double *)(a2 + 384));
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v13 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
      {
        v14 = *(double *)(a2 + 384);
        *(_DWORD *)buf = 134283521;
        v31 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Set timer for %{private}f seconds.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v15 = *(double *)(a2 + 384);
        v28 = 134283521;
        v29 = v15;
        LODWORD(v27) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Set timer for %{private}f seconds.", &v28, v27);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
  }
}

void sub_100CD2BD4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  char *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint8_t buf[4];
  char *v25;

  if (qword_10229FCF0 != -1)
    dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
  v3 = qword_10229FCF8;
  if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
  {
    v4 = *(int *)(a2 + 360);
    if (v4 > 3)
      v5 = 0;
    else
      v5 = off_10217E088[v4];
    *(_DWORD *)buf = 136446210;
    v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Gesture timer expired. State = %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
    v11 = *(int *)(a2 + 360);
    if (v11 > 3)
      v12 = 0;
    else
      v12 = off_10217E088[v11];
    v22 = 136446210;
    v23 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Gesture timer expired. State = %{public}s", &v22, 12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onTimer(CFRunLoopTimerRef, void *)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v6 = *(_DWORD *)(a2 + 360);
  if ((v6 - 2) >= 2)
  {
    if (v6 == 1)
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v10 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting prox mode to PassiveMonitoring. Prox timer expired.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Setting prox mode to PassiveMonitoring. Prox timer expired.", &v22, v21);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onTimer(CFRunLoopTimerRef, void *)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      kdebug_trace(731054232, 0, 0, 0, 0);
      BKSHIDServicesRequestProximityDetectionMode(12);
      *(_DWORD *)(a2 + 360) = 0;
      if (&_ADClientAddValueForScalarKey)
        ADClientAddValueForScalarKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("EarGesture"), CFSTR("ProxTimerExpired")), 1);
    }
  }
  else
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
    v7 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
    {
      v8 = *(int *)(a2 + 360);
      if (v8 > 3)
        v9 = 0;
      else
        v9 = off_10217E088[v8];
      *(_DWORD *)buf = 136446210;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Timer fired while in state %{public}s.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v13 = *(int *)(a2 + 360);
      if (v13 > 3)
        v14 = 0;
      else
        v14 = off_10217E088[v13];
      v22 = 136446210;
      v23 = v14;
      LODWORD(v21) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Timer fired while in state %{public}s.", &v22, v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onTimer(CFRunLoopTimerRef, void *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a2 + 368), 1.79769313e308);
}

void sub_100CD3100(uint64_t *a1, uint64_t a2)
{
  sub_100CD4608(a2, a1);
}

void sub_100CD3110(uint64_t a1, float32x2_t *a2)
{
  sub_100CD45A4(a2, a1);
}

void sub_100CD3120(_BYTE *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  if (a1[313])
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
    v2 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
    {
      v3 = a1[409];
      v4 = a1[410];
      *(_DWORD *)buf = 67240448;
      v20 = v3;
      v21 = 1026;
      v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Has blanked screen = %{public}d, Is locked = %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v7 = a1[409];
      v8 = a1[410];
      v16[0] = 67240448;
      v16[1] = v7;
      v17 = 1026;
      v18 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Has blanked screen = %{public}d, Is locked = %{public}d", v16, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::hasBlankedScreenOrIsLockedUpdated()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (a1[409] && a1[410])
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v5 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Screen is blanked and device is locked. Stopping gesture detection.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        LOWORD(v16[0]) = 0;
        LODWORD(v15) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Screen is blanked and device is locked. Stopping gesture detection.", v16, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::hasBlankedScreenOrIsLockedUpdated()", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      sub_100CD1B84((uint64_t)a1);
    }
    else
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v6 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Screen is unblanked or device is not locked. Starting gesture detection if necessary.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        LOWORD(v16[0]) = 0;
        LODWORD(v15) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Screen is unblanked or device is not locked. Starting gesture detection if necessary.", v16, v15);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::hasBlankedScreenOrIsLockedUpdated()", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      sub_100CD1E3C((uint64_t)a1);
    }
  }
}

void sub_100CD356C(_BYTE *a1, int a2, uint64_t a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
    v3 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 17, "Unrecognized notification", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEarGestureNotifier::numberOfSpectatorsChanged(int, size_t)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else if (a3 == 1)
  {
    a1[313] = 1;
    if (!a1[410] || !a1[409])
      sub_100CD1E3C((uint64_t)a1);
  }
  else if (!a3)
  {
    a1[313] = 0;
    sub_100CD1B84((uint64_t)a1);
  }
}

uint64_t sub_100CD3774(uint64_t result, uint64_t a2)
{
  if (&_ADClientAddValueForScalarKey)
    return ADClientAddValueForScalarKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("EarGesture"), result), a2);
  return result;
}

void sub_100CD37DC(uint64_t a1, double *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  NSObject *v8;
  double v9;
  float v10;
  float v11;
  double v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  NSString *v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  char *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;

  if (*(_DWORD *)(a1 + 360) == 2)
  {
    v4 = *(float *)(a1 + 48);
    v5 = *(float *)(a1 + 52);
    v6 = *(float *)(a1 + 56);
    v7 = atan2f(sqrtf((float)(v5 * v5) + (float)(v4 * v4)), -v6);
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
    v8 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
    {
      v9 = *a2;
      *(_DWORD *)buf = 134350080;
      v40 = v4;
      v41 = 2050;
      v42 = v5;
      v43 = 2050;
      v44 = v6;
      v45 = 2050;
      v46 = v7;
      v47 = 2050;
      v48 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "endPose,%{public}.2f,%{public}.2f,%{public}.2f,tilt,%{public}.2f,timestamp,%{public}.3f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v19 = *a2;
      v29 = 134350080;
      v30 = v4;
      v31 = 2050;
      v32 = v5;
      v33 = 2050;
      v34 = v6;
      v35 = 2050;
      v36 = v7;
      v37 = 2050;
      v38 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "endPose,%{public}.2f,%{public}.2f,%{public}.2f,tilt,%{public}.2f,timestamp,%{public}.3f", &v29, 52);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::checkEndPoseInReadyState(const CLAccelerometer::Sample *)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    v10 = 0.0;
    if (v5 <= 0.15
      && v7 <= 2.5133
      && ((v11 = fabsf(v5), v7 <= 1.885) || v11 >= 0.15)
      && (fabsf(v4 / v5) <= 1.5 || (v10 = 1.0, v7 <= 1.885) && (v7 >= 1.0367 || v11 >= 0.2)))
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v17 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&v40 = a1 + 393;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Sending gesture notification. Matched prototype name, %{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v29 = 136380675;
        *(_QWORD *)&v30 = a1 + 393;
        LODWORD(v28) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Sending gesture notification. Matched prototype name, %{private}s", &v29, v28);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::checkEndPoseInReadyState(const CLAccelerometer::Sample *)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      kdebug_trace(731054200, 0, 0, 0, 0);
      strncpy((char *)buf, (const char *)(a1 + 393), 0x10uLL);
      v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), CFSTR("MatchFound"), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", buf));
      if (&_ADClientAddValueForScalarKey)
        ADClientAddValueForScalarKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("EarGesture"), v18), 1);
      *(_DWORD *)((char *)&v42 + 2) = 0;
      sub_10014C2F4(a1, 0, (uint64_t)buf, 20);
      *(_DWORD *)(a1 + 360) = 3;
      *(double *)(a1 + 304) = *a2;
      *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
      sub_10041250C((_QWORD *)(a1 + 88));
      sub_10041250C((_QWORD *)(a1 + 160));
      sub_10041250C((_QWORD *)(a1 + 232));
    }
    else
    {
      v12 = *(double *)(a1 + 64);
      v13 = *a2;
      if (v12 <= 0.0)
      {
        *(double *)(a1 + 64) = v13;
      }
      else if (v13 - v12 > (float)((float)(v10 * 0.06) + 0.06))
      {
        *(_DWORD *)(a1 + 360) = 0;
        *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v14 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
        {
          v15 = *(int *)(a1 + 360);
          if (v15 > 3)
            *(double *)&v16 = 0.0;
          else
            v16 = off_10217E088[v15];
          *(_DWORD *)buf = 136446210;
          v40 = *(double *)&v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Failed end pose sanity check. Set state to %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
          v22 = *(int *)(a1 + 360);
          if (v22 > 3)
            *(double *)&v23 = 0.0;
          else
            v23 = off_10217E088[v22];
          v29 = 136446210;
          v30 = *(double *)&v23;
          LODWORD(v28) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Failed end pose sanity check. Set state to %{public}s", &v29, v28);
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::checkEndPoseInReadyState(const CLAccelerometer::Sample *)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        kdebug_trace(731054216, 0, 0, 0, 0);
        if (&_ADClientAddValueForScalarKey)
          ADClientAddValueForScalarKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("EarGesture"), CFSTR("FailedEndPoseCheck")), 1);
      }
    }
  }
}

void sub_100CD3F14(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  unint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  float v24;
  float v25;
  unint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  NSObject *v33;
  NSObject *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  int v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  _BYTE v51[16];
  int v52;

  if (*(_DWORD *)(a1 + 360) == 3 && *(double *)a2 - *(double *)(a1 + 304) < 3.0)
  {
    v3 = (float *)(a2 + 12);
    v4 = (float *)(a2 + 16);
    sub_10007D084(a1 + 88, (float *)(a2 + 8));
    sub_10007D084(a1 + 160, v3);
    sub_10007D084(a1 + 232, v4);
    v5 = *(float *)(a1 + 48);
    v6 = *(float *)(a1 + 52);
    v7 = *(float *)(a1 + 56);
    v8 = atan2f(sqrtf((float)(v6 * v6) + (float)(v5 * v5)), -v7);
    if (v8 > 2.5133 || v8 < 0.50265 || v6 > 0.3)
    {
      v52 = 1;
      sub_10014C2F4(a1, 0, (uint64_t)v51, 20);
      *(_DWORD *)(a1 + 360) = 0;
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v34 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349568;
        v46 = v5;
        v47 = 2050;
        v48 = v6;
        v49 = 2050;
        v50 = v7;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Sending gesture notification. Gesture cancelled due to unlikely end pose, %{public}.2f, %{public}.2f, %{public}.2f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v39 = 134349568;
        v40 = v5;
        v41 = 2050;
        v42 = v6;
        v43 = 2050;
        v44 = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Sending gesture notification. Gesture cancelled due to unlikely end pose, %{public}.2f, %{public}.2f, %{public}.2f", &v39, 32);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::detectCancelAfterSend(const CLAccelerometer::Sample *)", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      if (&_ADClientAddValueForScalarKey)
        ADClientAddValueForScalarKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("EarGesture"), CFSTR("CancelledPose")), 1);
      kdebug_trace(731054208, 0, 0, 0, 0);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 152);
      if (v9 >= *(_QWORD *)(a1 + 96))
      {
        v10 = 0.0;
        v11 = 0.0;
        v12 = 0.0;
        if ((int)v9 >= 2)
        {
          v13 = *(_QWORD *)(a1 + 224);
          v14 = 0.0;
          v15 = 0.0;
          if (v13)
            v15 = *(float *)(a1 + 176) / (float)v13;
          v16 = *(_QWORD *)(a1 + 296);
          if (v16)
            v14 = *(float *)(a1 + 248) / (float)v16;
          v17 = *(_QWORD *)(a1 + 144);
          v18 = *(_QWORD *)(a1 + 152);
          v19 = 0.0;
          v20 = 0.0;
          v21 = 0.0;
          v22 = 0.0;
          v23 = *(_QWORD *)(a1 + 216);
          v24 = 0.0;
          v25 = 0.0;
          v26 = *(_QWORD *)(a1 + 288);
          do
          {
            v27 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + ((v17 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v17 & 0x3FF))
                - (float)(*(float *)(a1 + 104) / (float)v9);
            v28 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF))
                - v15;
            v29 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + ((v26 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v26 & 0x3FF))
                - v14;
            v21 = v21 + (float)(v27 * v27);
            v20 = v20 + (float)(v28 * v28);
            v19 = v19 + (float)(v29 * v29);
            v25 = v25 + v27;
            v24 = v24 + v28;
            v22 = v22 + v29;
            ++v26;
            ++v23;
            ++v17;
            --v18;
          }
          while (v18);
          v30 = v21 - (float)((float)(v25 * v25) / (float)(int)v9);
          v31 = (float)((int)v9 - 1);
          v10 = v30 / v31;
          v11 = (float)(v20 - (float)((float)(v24 * v24) / (float)(int)v9)) / v31;
          v12 = (float)(v19 - (float)((float)(v22 * v22) / (float)(int)v9)) / v31;
        }
        if (v10 >= v11)
          v32 = v10;
        else
          v32 = v11;
        if (v32 < v12)
          v32 = v12;
        if (v32 > 0.3025)
        {
          v52 = 1;
          sub_10014C2F4(a1, 0, (uint64_t)v51, 20);
          *(_DWORD *)(a1 + 360) = 0;
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
          v33 = qword_10229FCF8;
          if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134349568;
            v46 = v10;
            v47 = 2050;
            v48 = v11;
            v49 = 2050;
            v50 = v12;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Sending gesture notification. Gesture cancelled due to high dynamics, %{public}.3f, %{public}.3f, %{public}.3f", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FCF0 != -1)
              dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
            v39 = 134349568;
            v40 = v10;
            v41 = 2050;
            v42 = v11;
            v43 = 2050;
            v44 = v12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Sending gesture notification. Gesture cancelled due to high dynamics, %{public}.3f, %{public}.3f, %{public}.3f", &v39, 32);
            v38 = (uint8_t *)v37;
            sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::detectCancelAfterSend(const CLAccelerometer::Sample *)", "%s\n", v37);
            if (v38 != buf)
              free(v38);
          }
          if (&_ADClientAddValueForScalarKey)
            ADClientAddValueForScalarKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("EarGesture"), CFSTR("CancelledDynamics")), 1);
          kdebug_trace(731054212, 0, 0, 0, 0);
        }
      }
    }
  }
}

void sub_100CD45A4(float32x2_t *a1, uint64_t a2)
{
  int v4;
  float32x2_t v5;
  int v6;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(float32x2_t *)(a2 + 8);
  v6 = v4;
  sub_100B27140(a1 + 5, &v5);
  a1[52] = *(float32x2_t *)a2;
  sub_100CD37DC((uint64_t)a1, (double *)a2);
  sub_100CD3F14((uint64_t)a1, a2);
}

void sub_100CD4608(uint64_t a1, uint64_t *a2)
{
  float v4;
  float v5;
  float v6;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  double v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  CFAbsoluteTime Current;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  double v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  uint8_t buf[4];
  _BYTE v50[10];
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  double v54;
  __int16 v55;
  char *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[12];
  char *v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  uint64_t v87;

  *(_BYTE *)(a1 + 392) = (a2[1] & 0x240) != 0;
  v4 = *(float *)(a1 + 48);
  v5 = *(float *)(a1 + 52);
  v6 = *(float *)(a1 + 56);
  if (qword_10229FCF0 != -1)
    dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
  v7 = qword_10229FCF8;
  if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
  {
    v8 = *((_DWORD *)a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 392);
    v10 = *a2;
    v11 = sub_100078B88();
    v12 = *(int *)(a1 + 360);
    if (v12 > 3)
      v13 = 0;
    else
      v13 = off_10217E088[v12];
    v14 = *(_QWORD *)(a1 + 344);
    v15 = *(_QWORD *)(a1 + 352);
    v16 = *(_QWORD *)(a1 + 416);
    *(_DWORD *)buf = 67177219;
    *(_DWORD *)v50 = v8;
    *(_WORD *)&v50[4] = 1026;
    *(_DWORD *)&v50[6] = v9;
    v51 = 2050;
    v52 = v10;
    v53 = 2050;
    v54 = v11;
    v55 = 2082;
    v56 = v13;
    v57 = 2050;
    v58 = v14;
    v59 = 2050;
    v60 = v15;
    v61 = 2050;
    v62 = v4;
    v63 = 2050;
    v64 = v5;
    v65 = 2050;
    v66 = v6;
    v67 = 2050;
    v68 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Prox,detectionMask,0x%{private}x,objectWithinProximity,%{public}d,timestamp,%{public}.3f,now,%{public}.3f,state,%{public}s,lastProxTrigger,%{public}.3f,lastMotionTrigger,%{public}.3f,acc,%{public}.8f,%{public}.8f,%{public}.8f,accTime,%{public}.3f", buf, 0x68u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
    v29 = qword_10229FCF8;
    v30 = *((_DWORD *)a2 + 2);
    v31 = *(unsigned __int8 *)(a1 + 392);
    v32 = *a2;
    v33 = sub_100078B88();
    v34 = *(int *)(a1 + 360);
    if (v34 > 3)
      v35 = 0;
    else
      v35 = off_10217E088[v34];
    v36 = *(_QWORD *)(a1 + 344);
    v37 = *(_QWORD *)(a1 + 352);
    v38 = *(_QWORD *)(a1 + 416);
    LODWORD(v72) = 67177219;
    DWORD1(v72) = v30;
    WORD4(v72) = 1026;
    *(_DWORD *)((char *)&v72 + 10) = v31;
    HIWORD(v72) = 2050;
    v73 = v32;
    *(_WORD *)v74 = 2050;
    *(double *)&v74[2] = v33;
    *(_WORD *)&v74[10] = 2082;
    v75 = v35;
    v76 = 2050;
    v77 = v36;
    v78 = 2050;
    v79 = v37;
    v80 = 2050;
    v81 = v4;
    v82 = 2050;
    v83 = v5;
    v84 = 2050;
    v85 = v6;
    v86 = 2050;
    v87 = v38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "Prox,detectionMask,0x%{private}x,objectWithinProximity,%{public}d,timestamp,%{public}.3f,now,%{public}.3f,state,%{public}s,lastProxTrigger,%{public}.3f,lastMotionTrigger,%{public}.3f,acc,%{public}.8f,%{public}.8f,%{public}.8f,accTime,%{public}.3f", &v72, 104);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::onProx(const CLProximityNotifier::Sample *)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  if (*(_BYTE *)(a1 + 392))
  {
    *(_QWORD *)(a1 + 344) = *a2;
    kdebug_trace(731054204, 0, 0, 0, 0);
    if (*(_DWORD *)(a1 + 360) == 1)
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v17 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
      {
        v18 = *(double *)(a1 + 344) - *(double *)(a1 + 352);
        *(_DWORD *)buf = 134349056;
        *(double *)v50 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Readying gesture notification. Motion triggered before prox. dt = %{public}.3f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v41 = *(double *)(a1 + 344) - *(double *)(a1 + 352);
        LODWORD(v72) = 134349056;
        *(double *)((char *)&v72 + 4) = v41;
        LODWORD(v48) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Readying gesture notification. Motion triggered before prox. dt = %{public}.3f", &v72, v48);
        v43 = (uint8_t *)v42;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::onProx(const CLProximityNotifier::Sample *)", "%s\n", v42);
        if (v43 != buf)
          free(v43);
      }
      ADClientPushValueForDistributionKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("ProxToEarGestureDelta")), (*(double *)(a1 + 352) - *(double *)(a1 + 344)) * 1000.0);
      CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a1 + 368), 1.79769313e308);
      *(_DWORD *)(a1 + 360) = 2;
    }
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 360);
    if ((v19 - 2) >= 2 && v19)
    {
      if (v19 == 1)
      {
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        v20 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Prox untriggered while waiting for prox", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
          LOWORD(v72) = 0;
          LODWORD(v48) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Prox untriggered while waiting for prox", &v72, v48);
          v47 = (uint8_t *)v46;
          sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::onProx(const CLProximityNotifier::Sample *)", "%s\n", v46);
          if (v47 != buf)
            free(v47);
        }
        if (&_ADClientAddValueForScalarKey)
          ADClientAddValueForScalarKey(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@.%@"), CFSTR("com.apple.CoreMotion"), CFSTR("EarGesture"), CFSTR("DetectMotionProxUntriggered")), 1);
      }
    }
    else
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
      v21 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Setting prox mode to PassiveMonitoring. Waiting for motion.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10217DFE0);
        LOWORD(v72) = 0;
        LODWORD(v48) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Setting prox mode to PassiveMonitoring. Waiting for motion.", &v72, v48);
        v45 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureNotifier::onProx(const CLProximityNotifier::Sample *)", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      BKSHIDServicesRequestProximityDetectionMode(12);
      *(_DWORD *)(a1 + 360) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 411))
  {
    *(_QWORD *)&v72 = off_102171780;
    Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)&v74[8] = *((_DWORD *)a2 + 2);
    v23 = *a2;
    *((CFAbsoluteTime *)&v72 + 1) = Current;
    *(_QWORD *)v74 = v23;
    v24 = sub_1011B78D4();
    sub_1011B8DB0(v24, (uint64_t)&v72);
    sub_1015EB864(buf);
    sub_101604EFC((uint64_t)buf);
    v71 |= 1u;
    v69 = *((_QWORD *)&v72 + 1);
    v25 = v70;
    v26 = *a2;
    *(_BYTE *)(v70 + 20) |= 1u;
    *(_QWORD *)(v25 + 8) = v26;
    v27 = v70;
    v28 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(v70 + 20) |= 2u;
    *(_DWORD *)(v27 + 16) = v28;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_10217E000);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
}

void sub_100CD4EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100CD4EDC(uint64_t a1)
{
  sub_100CD3120(*(_BYTE **)(a1 + 32));
}

void sub_100CD4EE4(uint64_t a1)
{
  sub_100CD3120(*(_BYTE **)(a1 + 32));
}

void sub_100CD4EEC(id a1)
{
  qword_10229FCF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

uint64_t sub_100CD4F1C(int a1, uint32_t __upper_bound)
{
  return arc4random_uniform(__upper_bound);
}

uint64_t sub_100CD4F28(uint64_t a1, unsigned __int8 *a2, int a3)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  std::string *v28;

  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  v4 = *a2;
  v5 = a2[12];
  v7 = *((_DWORD *)a2 + 1);
  v6 = *((_DWORD *)a2 + 2);
  v8 = *((_DWORD *)a2 + 4);
  *(_DWORD *)a1 = v8;
  if (a2[13])
    v9 = 1;
  else
    v9 = 2;
  *(_DWORD *)(a1 + 16) = v9;
  if (v4)
  {
    if (v7 <= 5)
    {
      v10 = 1 << v7;
      if ((v10 & 0x1A) != 0)
      {
        if (v6 == 1)
          v11 = 3;
        else
          v11 = 2;
        if (v5)
          v12 = 2;
        else
          v12 = 1;
        *(_DWORD *)(a1 + 4) = v11;
        *(_DWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 12) = 1;
        if (v8 == 255)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10217E100);
          v13 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#EmergCon,CLEmergencyState,SimInstance is KSimNone", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_10217E100);
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EmergCon,CLEmergencyState,SimInstance is KSimNone", &__p, 2);
            v15 = (uint8_t *)v14;
            sub_100512490("Generic", 1, 0, 0, "CLEmergencyState::CLEmergencyState(CLCTEmergencyMode, BOOL)", "%s\n", v14);
            if (v15 != buf)
              free(v15);
          }
        }
      }
      else if ((v10 & 0x24) != 0)
      {
        *(_DWORD *)(a1 + 12) = 2;
        if (v6 == 1)
          v16 = 3;
        else
          v16 = 2;
        *(_DWORD *)(a1 + 4) = v16;
        if (v5)
          *(_DWORD *)(a1 + 8) = 2;
        else
          *(_DWORD *)(a1 + 8) = 1;
      }
      else
      {
        v17 = a2[14];
        *(_DWORD *)a1 = 255;
        if (v17)
        {
          *(_QWORD *)(a1 + 4) = 0x200000002;
          v18 = 3;
        }
        else
        {
          *(_QWORD *)(a1 + 4) = 0x100000001;
          v18 = 1;
        }
        *(_DWORD *)(a1 + 12) = v18;
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 255;
    if (a3)
    {
      *(_DWORD *)(a1 + 4) = 4;
      *(_DWORD *)(a1 + 12) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10217E100);
  v19 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100CD5278((_DWORD *)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289282;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2082;
    v28 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon CLEmergencyState Creation \", \"state\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_100CD5278(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  void *__p[2];
  unsigned __int8 v31;
  void *v32[2];
  unsigned __int8 v33;
  void *v34[2];
  unsigned __int8 v35;
  void *v36[2];
  unsigned __int8 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;

  if (*a1)
  {
    if (*a1 == 255)
      v4 = "kSimNone";
    else
      v4 = "kSim2";
  }
  else
  {
    v4 = "kSim1";
  }
  sub_1015A2E04(&v38, v4);
  v5 = std::string::insert(&v38, 0, "Sim_#");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v39, "_Status_#");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  sub_100CD59B0((uint64_t)a1, v36);
  if ((v37 & 0x80u) == 0)
    v9 = v36;
  else
    v9 = (void **)v36[0];
  if ((v37 & 0x80u) == 0)
    v10 = v37;
  else
    v10 = (std::string::size_type)v36[1];
  v11 = std::string::append(&v40, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v41, "_Medium_#");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v34, off_10217E148[a1[2]]);
  if ((v35 & 0x80u) == 0)
    v15 = v34;
  else
    v15 = (void **)v34[0];
  if ((v35 & 0x80u) == 0)
    v16 = v35;
  else
    v16 = (std::string::size_type)v34[1];
  v17 = std::string::append(&v42, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v43, "_Transport_#");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  sub_100CD59C8((uint64_t)a1, v32);
  if ((v33 & 0x80u) == 0)
    v21 = v32;
  else
    v21 = (void **)v32[0];
  if ((v33 & 0x80u) == 0)
    v22 = v33;
  else
    v22 = (std::string::size_type)v32[1];
  v23 = std::string::append(&v44, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v45, "_CallType_#");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(__p, off_10217E180[a1[4]]);
  if ((v31 & 0x80u) == 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if ((v31 & 0x80u) == 0)
    v28 = v31;
  else
    v28 = (std::string::size_type)__p[1];
  v29 = std::string::append(&v46, (const std::string::value_type *)v27, v28);
  *a2 = *v29;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((char)v31 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v33 < 0)
    operator delete(v32[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if ((char)v35 < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if ((char)v37 < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_100CD55C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 57) < 0)
    operator delete(*(void **)(v59 - 80));
  if (*(char *)(v59 - 89) < 0)
    operator delete(*(void **)(v59 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v59 - 121) < 0)
    operator delete(*(void **)(v59 - 144));
  if (*(char *)(v59 - 153) < 0)
    operator delete(*(void **)(v59 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v59 - 185) < 0)
    operator delete(*(void **)(v59 - 208));
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_100CD56DC()
{
  JUMPOUT(0x100CD5694);
}

void sub_100CD56E4()
{
  JUMPOUT(0x100CD56A4);
}

void sub_100CD56EC()
{
  JUMPOUT(0x100CD56B4);
}

void sub_100CD56F4()
{
  JUMPOUT(0x100CD56C4);
}

BOOL sub_100CD5700(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1 && *(_DWORD *)(a1 + 16) == 1;
}

BOOL sub_100CD5724(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1 && *(_DWORD *)(a1 + 4) != 1;
}

BOOL sub_100CD5748(_DWORD *a1, int a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (a2 == 255)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217E100);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EmergCon,isCellularEmergencyForSim,SimInstance is KSimNone", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217E100);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,isCellularEmergencyForSim,SimInstance is KSimNone", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyState::isCellularEmergencyForSim(SimInstance) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  if (a1[1] == 1)
    return 1;
  if (*a1 == a2)
    return a1[3] == 1;
  return 0;
}

BOOL sub_100CD5918(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1 && *(_DWORD *)(a1 + 8) == 1;
}

BOOL sub_100CD593C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 2;
}

BOOL sub_100CD594C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 3;
}

BOOL sub_100CD595C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 1;
}

BOOL sub_100CD596C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 2;
}

BOOL sub_100CD597C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) != 0;
}

BOOL sub_100CD598C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == 2;
}

BOOL sub_100CD599C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4) & 0xFFFFFFFE) == 2;
}

_QWORD *sub_100CD59B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_10217E120[*(int *)(a1 + 4)]);
}

_QWORD *sub_100CD59C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_10217E160[*(int *)(a1 + 12)]);
}

void sub_100CD59E0(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

int *sub_100CD5A0C(int *result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  v3 = *(_DWORD *)(a2 + 6) & 0xFFFFFF00 | *((unsigned __int8 *)result + 6);
  *(_DWORD *)(a2 + 6) = v3;
  v4 = v3 & 0xFFFFF0FF | (((*(unsigned int *)((char *)result + 6) >> 8) & 0xF) << 8);
  *(_DWORD *)(a2 + 6) = v4;
  v5 = v4 & 0xFFF00FFF | ((*(unsigned int *)((char *)result + 6) >> 12) << 12);
  *(_DWORD *)(a2 + 6) = v5;
  v6 = v5 & 0xFF0FFFFF | (((*(unsigned int *)((char *)result + 6) >> 20) & 0xF) << 20);
  *(_DWORD *)(a2 + 6) = v6;
  v7 = v6 & 0xF0FFFFFF | ((HIBYTE(*(unsigned int *)((char *)result + 6)) & 0xF) << 24);
  *(_DWORD *)(a2 + 6) = v7;
  *(_DWORD *)(a2 + 6) = *(int *)((char *)result + 6) & 0xF0000000 | v7 & 0xFFFFFFF;
  return result;
}

uint64_t sub_100CD5A80(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 10) >> 5) & 1;
}

int8x8_t sub_100CD5A90(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int8x8_t result;
  unint64_t v14;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  v7 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  v10 = *(_OWORD *)(a1 + 144);
  v11 = *(_OWORD *)(a1 + 160);
  v12 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 188) = *(_OWORD *)(a1 + 188);
  *(_OWORD *)(a2 + 160) = v11;
  *(_OWORD *)(a2 + 176) = v12;
  *(_OWORD *)(a2 + 144) = v10;
  sub_1011913E8((unsigned __int16 *)a1, a2);
  *(int8x16_t *)(a2 + 12) = vrev32q_s8(*(int8x16_t *)(a1 + 12));
  *(int8x16_t *)(a2 + 28) = vrev32q_s8(*(int8x16_t *)(a1 + 28));
  result = vrev32_s8(*(int8x8_t *)(a1 + 44));
  *(int8x8_t *)(a2 + 44) = result;
  *(_DWORD *)(a2 + 52) = bswap32(*(_DWORD *)(a1 + 52));
  v14 = bswap64(*(_QWORD *)(a1 + 56));
  *(_DWORD *)(a2 + 192) = bswap32(*(_DWORD *)(a1 + 192));
  *(_QWORD *)(a2 + 56) = v14;
  return result;
}

int8x8_t sub_100CD5B40(uint64_t a1, uint64_t a2)
{
  int8x8_t result;

  sub_1011913E8((unsigned __int16 *)a1, a2);
  result = vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(int8x8_t *)(a2 + 12) = result;
  return result;
}

int *sub_100CD5B74(int *result, uint64_t a2)
{
  int v2;

  v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 6) = bswap32(*(int *)((char *)result + 6));
  return result;
}

int *sub_100CD5B94(int *result, uint64_t a2)
{
  return sub_100CD5A0C(result, a2);
}

_QWORD *sub_100CD5B9C(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100CD5C50((uint64_t)a1, "CardioChangeHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_10217E1A8;
  a1[9] = off_10217E258;
  sub_100CD6394((uint64_t)a1);
  return a1;
}

void sub_100CD5C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_100CD60B4(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100CD5C50(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_10217E3E8;
  *(_QWORD *)(a1 + 72) = off_10217E490;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10217E3E8;
  *(_QWORD *)(a1 + 72) = off_10217E490;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = -1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100CD6008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_102138DA8;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100CD60AC()
{
  JUMPOUT(0x100CD608CLL);
}

_QWORD *sub_100CD60B4(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10217E490;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10217E3E8;
  a1[33] = off_102138DA8;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100CD6134(uint64_t a1)
{
  return sub_100CD60B4((_QWORD *)(a1 - 72));
}

void sub_100CD613C(_QWORD *a1)
{
  sub_100CD60B4(a1);
  operator delete();
}

void sub_100CD6160(uint64_t a1)
{
  sub_100CD60B4((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100CD6188(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM CardioChangeHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_100CD62A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CD62C0(uint64_t a1, uint64_t a2)
{
  return sub_100CD6188(a1 - 72, a2);
}

uint64_t sub_100CD62C8(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM CardioChangeHistory");
  return 0xFFFFFFFFLL;
}

void sub_100CD6368(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CD638C(uint64_t a1)
{
  return sub_100CD62C8(a1 - 72);
}

uint64_t sub_100CD6394(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
    return sub_100634364(*(_QWORD *)(a1 + 80), "CardioChangeHistory", (const char **)&off_10217E2E8, (const std::string::value_type **)&off_1022FAD88, 0);
  return result;
}

uint64_t sub_100CD63E8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO CardioChangeHistory (startTime, status, riskScore) VALUES (?, ?, ?)");
  return result;
}

void sub_100CD64B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_100CD64D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;

  v5 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_QWORD *)a3 = sqlite3_column_int(v5, 0);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 8) = sqlite3_column_double(v6, 1);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 16) = sqlite3_column_int(v7, 2);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 24) = sqlite3_column_double(v8, 3);
}

uint64_t sub_100CD6544(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  __int128 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10192508C(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v14) & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((SBYTE7(v14) & 0x80u) == 0)
      v8 = BYTE7(v14);
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if (SBYTE7(v14) < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((SBYTE7(v14) & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100CD6814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100CD687C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  __int128 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((SBYTE7(v14) & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((SBYTE7(v14) & 0x80u) == 0)
          v7 = BYTE7(v14);
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if (SBYTE7(v14) < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((SBYTE7(v14) & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_1019251F8(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100CD6B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100CD6BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10217E4D0);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217E4D0);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217E4D0);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100CD71C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100CD71F4(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  uint64_t v32;
  double v33;
  int v34;
  uint64_t v35;
  id v36[2];
  int v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  uint64_t v44;

  v36[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v36[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v36);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v32 = 0;
  v33 = 0.0;
  v34 = -1;
  v35 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217E4D0);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217E4D0);
        LOWORD(v37) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v37, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v33;
    v9 = v7 - v33;
    if (v7 - v33 < 0.0)
      v9 = -(v7 - v33);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217E4D0);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v42 = v33;
        v43 = 2050;
        v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217E4D0);
        v23 = *(_QWORD *)(a2 + 8);
        v37 = 134349312;
        v38 = v33;
        v39 = 2050;
        v40 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v37, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v33;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217E4D0);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10217E4D0);
          v26 = *(double *)(a2 + 8);
          v37 = 134217984;
          v38 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v37));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10217E4D0);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v42 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217E4D0);
        v37 = 134217984;
        v38 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v37));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v36);
}

void sub_100CD7940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CD796C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101925364(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100CD7BCC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019254D0(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100CD7E04(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192563C(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_100CD802C(uint64_t a1)
{
  return sub_100CD6BF8(a1 - 72);
}

void sub_100CD8034(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100CD8060(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  *a1 = off_10217E500;
  a1[2] = 0;
  a1[3] = a2;
  sub_100CD8650(a1 + 4, a3);
}

void sub_100CD80AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = &off_10217E550;
  sub_100261F44(v2);
  _Unwind_Resume(a1);
}

BOOL sub_100CD80D4(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  _BOOL8 result;
  const char *v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  id v22;
  __int16 v23;
  id v24;
  uint8_t buf[4];
  _BYTE v26[18];

  v4 = objc_msgSend(a2, "length");
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217E568);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = sub_1004D7670(*(_QWORD *)(a1 + 32));
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v26 = v6;
    *(_WORD *)&v26[8] = 2048;
    *(_QWORD *)&v26[10] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "currentSize is %llu, log msg size is %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217E568);
    v16 = qword_1022A02D8;
    v17 = sub_1004D7670(*(_QWORD *)(a1 + 32));
    v21 = 134218240;
    v22 = v17;
    v23 = 2048;
    v24 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "currentSize is %llu, log msg size is %lu", &v21, 22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLActivityLoggerSizePolicy::shouldILog(NSData *)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if ((unint64_t)v4 < 0x10000)
  {
    v10 = sub_1004D7670(*(_QWORD *)(a1 + 32));
    if ((unint64_t)objc_msgSend(a2, "length") + (_QWORD)v10 + 2 <= *(_QWORD *)(a1 + 24))
      return 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217E568);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = objc_msgSend(a2, "length");
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v26 = v12;
      *(_WORD *)&v26[8] = 2048;
      *(_QWORD *)&v26[10] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Log size exceeded %llu, skip log of %lu bytes", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217E568);
      v14 = qword_1022A02D8;
      objc_msgSend(a2, "length");
      LODWORD(v20) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "Log size exceeded %llu, skip log of %lu bytes", &v21, v20);
      goto LABEL_24;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217E568);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v26 = 0xFFFF;
      *(_WORD *)&v26[4] = 2048;
      *(_QWORD *)&v26[6] = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Log msg size exceeds limit %d, skip loging %lu bytes", buf, 0x12u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217E568);
      LODWORD(v20) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Log msg size exceeds limit %d, skip loging %lu bytes", &v21, v20);
LABEL_24:
      v15 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLActivityLoggerSizePolicy::shouldILog(NSData *)", "%s\n", v9);
      if (v15 != buf)
        free(v15);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_100CD8584(_QWORD *a1)
{
  *a1 = off_10217E500;
  sub_100261F44((uint64_t)(a1 + 4));
  *a1 = &off_10217E550;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_100CD85CC(_QWORD *a1)
{
  *a1 = off_10217E500;
  sub_100261F44((uint64_t)(a1 + 4));
  *a1 = &off_10217E550;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

void sub_100CD8624(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CD8650(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100CD86B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100CD8740((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100CD86CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1004D7BAC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100CD8700(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100CD8740(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1004D7BAC(result);
    operator delete();
  }
  return result;
}

void sub_100CD877C(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[9];
  uint64_t v9;

  v2 = operator new(0xF0uLL);
  v2[12] = xmmword_101C20D70;
  v2[13] = unk_101C20D80;
  v2[14] = xmmword_101C20D90;
  v2[8] = xmmword_101C20D30;
  v2[9] = unk_101C20D40;
  v2[10] = xmmword_101C20D50;
  v2[11] = unk_101C20D60;
  v2[4] = xmmword_101C20CF0;
  v2[5] = unk_101C20D00;
  v2[6] = xmmword_101C20D10;
  v2[7] = unk_101C20D20;
  *v2 = xmmword_101C20CB0;
  v2[1] = unk_101C20CC0;
  v2[2] = xmmword_101C20CD0;
  v2[3] = unk_101C20CE0;
  v8[0] = v2;
  v8[1] = v2 + 15;
  v8[2] = v2 + 15;
  v3 = operator new(0xF0uLL);
  v3[12] = xmmword_101C20E60;
  v3[13] = unk_101C20E70;
  v3[14] = xmmword_101C20E80;
  v3[8] = xmmword_101C20E20;
  v3[9] = unk_101C20E30;
  v3[10] = xmmword_101C20E40;
  v3[11] = unk_101C20E50;
  v3[4] = xmmword_101C20DE0;
  v3[5] = unk_101C20DF0;
  v3[6] = xmmword_101C20E00;
  v3[7] = unk_101C20E10;
  *v3 = xmmword_101C20DA0;
  v3[1] = unk_101C20DB0;
  v3[2] = xmmword_101C20DC0;
  v3[3] = unk_101C20DD0;
  v8[3] = v3;
  v8[4] = v3 + 15;
  v8[5] = v3 + 15;
  v4 = operator new(0xF0uLL);
  v8[8] = v4 + 15;
  v4[12] = xmmword_101C20F50;
  v4[13] = unk_101C20F60;
  v4[14] = xmmword_101C20F70;
  v4[8] = xmmword_101C20F10;
  v4[9] = unk_101C20F20;
  v4[10] = xmmword_101C20F30;
  v4[11] = unk_101C20F40;
  v4[4] = xmmword_101C20ED0;
  v4[5] = unk_101C20EE0;
  v4[6] = xmmword_101C20EF0;
  v4[7] = unk_101C20F00;
  *v4 = xmmword_101C20E90;
  v4[1] = unk_101C20EA0;
  v4[2] = xmmword_101C20EB0;
  v4[3] = unk_101C20EC0;
  v8[6] = v4;
  v8[7] = v4 + 15;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v5 = operator new(0x48uLL);
  *a1 = v5;
  a1[1] = v5;
  a1[2] = v5 + 9;
  v6 = 0;
  a1[1] = sub_100CD8FF4((uint64_t)(a1 + 2), (uint64_t)v8, (uint64_t)&v9, v5);
  do
  {
    v7 = (void *)v8[v6 + 6];
    if (v7)
    {
      v8[v6 + 7] = v7;
      operator delete(v7);
    }
    v6 -= 3;
  }
  while (v6 != -9);
}

void sub_100CD8964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;

  v13 = v12;
  *(_QWORD *)(v11 + 8) = v13;
  sub_10025E1F0(&a9);
  v15 = 0;
  while (1)
  {
    v16 = *(void **)(&a11 + v15 + 48);
    if (v16)
    {
      *(_QWORD *)(&a11 + v15 + 56) = v16;
      operator delete(v16);
    }
    v15 -= 24;
    if (v15 == -72)
      _Unwind_Resume(a1);
  }
}

_QWORD *sub_100CD89E0(_QWORD *a1)
{
  sub_100CD877C(a1);
  return a1;
}

uint64_t sub_100CD8A08(unsigned int a1)
{
  int v2;
  int v3;
  unsigned int v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  unsigned int v11;

  if (a1 - 20 >= 0xB5)
  {
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10217E620);
    v6 = qword_10229FE18;
    if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67174657;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid parameter in getIndexFromAge: %{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_10217E620);
      v9[0] = 67174657;
      v9[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE18, 16, "Invalid parameter in getIndexFromAge: %{private}d", v9, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "static int CLVO2MaxClassifier::getIndexFromAge(int)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    if (a1 < 0x3C)
      v2 = 3;
    else
      v2 = 4;
    if (a1 >= 0x32)
      v3 = v2;
    else
      v3 = 2;
    if (a1 >= 0x28)
      v4 = v3;
    else
      v4 = 1;
    if (a1 >= 0x1E)
      return v4;
    else
      return 0;
  }
}

BOOL sub_100CD8BF0(int a1)
{
  return (a1 - 20) < 0xB5;
}

double sub_100CD8C00(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  double v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (a2 >= 4)
  {
    sub_100CD8A08(a3);
  }
  else
  {
    v4 = qword_101C20F80[a2];
    v5 = sub_100CD8A08(a3);
    if (v5 != -1)
      return *(double *)(*(_QWORD *)(*a1 + 24 * v4) + 48 * v5 + 8);
  }
  if (qword_10229FE10 != -1)
    dispatch_once(&qword_10229FE10, &stru_10217E620);
  v7 = qword_10229FE18;
  if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid parameter, cannot calculate an alert threshold", buf, 2u);
  }
  v6 = 0.0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10217E620);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE18, 16, "Invalid parameter, cannot calculate an alert threshold", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "double CLVO2MaxClassifier::alertThresholdForSexAndAge(CLHKBiologicalSex, int) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v6;
}

double sub_100CD8DE4(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  double v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (a2 >= 4)
  {
    sub_100CD8A08(a3);
  }
  else
  {
    v4 = qword_101C20F80[a2];
    v5 = sub_100CD8A08(a3);
    if (v5 != -1)
      return *(double *)(*(_QWORD *)(*a1 + 24 * v4) + 48 * v5 + 16);
  }
  if (qword_10229FE10 != -1)
    dispatch_once(&qword_10229FE10, &stru_10217E620);
  v7 = qword_10229FE18;
  if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid parameter, cannot calculate an alert threshold", buf, 2u);
  }
  v6 = 0.0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10217E620);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE18, 16, "Invalid parameter, cannot calculate an alert threshold", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "double CLVO2MaxClassifier::lowClassificationThresholdForSexAndAge(CLHKBiologicalSex, int) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v6;
}

void sub_100CD8FC8(id a1)
{
  qword_10229FE18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

_QWORD *sub_100CD8FF4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_100CD90B0(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 4));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_100CD9128((uint64_t)v8);
  return v4;
}

void sub_100CD909C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100CD9128((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100CD90B0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100858CC4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100CD910C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CD9128(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E528(a1);
  return a1;
}

BOOL sub_100CD915C(void *a1, void *a2)
{
  id v4;
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  id v25;
  _BOOL8 result;
  NSObject *v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  _BYTE v36[24];
  double v37;
  int v38;
  id v39;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;

  v4 = objc_msgSend(a1, "mac");
  if (!a2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380675;
      v41 = objc_msgSend(v4, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, updating local store as there is no existing record for associated AP %{private}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v19 = qword_1022A0048;
    v38 = 136380675;
    v39 = objc_msgSend(v4, "UTF8String");
    v17 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "WifiAssociatedApCentroidStore, updating local store as there is no existing record for associated AP %{private}s", &v38, 12, *(_OWORD *)v36, *(_QWORD *)&v36[16]);
    goto LABEL_49;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217E640);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136380675;
    v41 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, existing local store record: %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v31 = qword_1022A0048;
    v38 = 136380675;
    v39 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "WifiAssociatedApCentroidStore, existing local store record: %{private}s", &v38, 12);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::shouldUpdateSyncedDataStore(CLWifiAssociatedApCentroidDO *, CLWifiAssociatedApCentroidDO *)", "%s\n", v32);
    if (v32 != (char *)buf)
      free(v32);
  }
  objc_msgSend(a1, "latitude", sub_1002433B8((uint64_t)&v38));
  v7 = v6;
  objc_msgSend(a1, "longitude");
  v9 = v8;
  objc_msgSend(a2, "latitude");
  v11 = v10;
  objc_msgSend(a2, "longitude");
  v13 = sub_10011E634((double *)&v38, v7, v9, v11, v12, 0.0);
  if (v13 > *((double *)sub_1000521B8() + 10))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v15 = objc_msgSend(v4, "UTF8String");
      *(_DWORD *)buf = 136380931;
      v41 = v15;
      v42 = 2048;
      v43 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, updating local store as associated AP %{private}s has moved more than %.1fm", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v16 = qword_1022A0048;
    *(_DWORD *)v36 = 136380931;
    *(_QWORD *)&v36[4] = objc_msgSend(v4, "UTF8String");
    *(_WORD *)&v36[12] = 2048;
    *(double *)&v36[14] = v13;
    LODWORD(v35) = 22;
    v17 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "WifiAssociatedApCentroidStore, updating local store as associated AP %{private}s has moved more than %.1fm", v36, v35, *(_OWORD *)v36, *(_QWORD *)&v36[16]);
LABEL_49:
    v34 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::shouldUpdateSyncedDataStore(CLWifiAssociatedApCentroidDO *, CLWifiAssociatedApCentroidDO *)", "%s\n", v17);
    if (v34 != buf)
      free(v34);
    return 1;
  }
  objc_msgSend(a1, "lastUpdated");
  v21 = v20;
  objc_msgSend(a2, "lastUpdated");
  v23 = vabdd_f64(v21, v22);
  if (v23 > *((double *)sub_1000A3224() + 12))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v24 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v25 = objc_msgSend(v4, "UTF8String");
      *(_DWORD *)buf = 136380931;
      v41 = v25;
      v42 = 2048;
      v43 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, updating local store as associated AP %{private}s has not been updated more than %.1fs", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v33 = qword_1022A0048;
    *(_DWORD *)v36 = 136380931;
    *(_QWORD *)&v36[4] = objc_msgSend(v4, "UTF8String");
    *(_WORD *)&v36[12] = 2048;
    *(double *)&v36[14] = v23;
    LODWORD(v35) = 22;
    v17 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "WifiAssociatedApCentroidStore, updating local store as associated AP %{private}s has not been updated more than %.1fs", v36, v35, *(_OWORD *)v36, *(_QWORD *)&v36[16]);
    goto LABEL_49;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217E640);
  v27 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v28 = objc_msgSend(v4, "UTF8String");
    *(_DWORD *)buf = 136381187;
    v41 = v28;
    v42 = 2048;
    v43 = v13;
    v44 = 2048;
    v45 = v23;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "WifiAssociatedApCentroidStore, skip updating local store for associated AP %{private}s, distance %.1fm, last updated %.1fs ago", buf, 0x20u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v29 = qword_1022A0048;
    *(_DWORD *)v36 = 136381187;
    *(_QWORD *)&v36[4] = objc_msgSend(v4, "UTF8String");
    *(_WORD *)&v36[12] = 2048;
    *(double *)&v36[14] = v13;
    *(_WORD *)&v36[22] = 2048;
    v37 = v23;
    LODWORD(v35) = 32;
    v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "WifiAssociatedApCentroidStore, skip updating local store for associated AP %{private}s, distance %.1fm, last updated %.1fs ago", v36, v35);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::shouldUpdateSyncedDataStore(CLWifiAssociatedApCentroidDO *, CLWifiAssociatedApCentroidDO *)", "%s\n", v30);
    if (v30 != (char *)buf)
      free(v30);
    return 0;
  }
  return result;
}

void sub_100CD98BC(void *a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  id v7;
  id v8;
  _BOOL4 v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  __int128 *v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  _BYTE v27[12];
  char v28;
  int v29;
  _BYTE *v30;
  __int128 buf;
  char v32;

  if ((sub_10018626C() & 1) != 0)
  {
    sub_10022142C(&buf);
    v2 = sub_1000A0810(buf);
    v3 = (void *)v2;
    v4 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (!*((_QWORD *)&buf + 1))
      goto LABEL_6;
    v5 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v3)
      {
LABEL_7:
        if ((objc_msgSend(v3, "isValid") & 1) != 0)
        {
          v7 = objc_msgSend(a1, "mac");
          v8 = objc_msgSend(v3, "fetchRecord:", v7);
          v9 = sub_100CD915C(a1, v8);

          if (!v9)
            return;
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217E640);
          v10 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v11 = objc_msgSend(v7, "UTF8String");
            LODWORD(buf) = 136380675;
            *(_QWORD *)((char *)&buf + 4) = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s", (uint8_t *)&buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10217E640);
            v21 = qword_1022A0048;
            *(_DWORD *)v27 = 136380675;
            *(_QWORD *)&v27[4] = objc_msgSend(v7, "UTF8String");
            v22 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v21, 0, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s", v27, 12);
            sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v22);
            if (v22 != (char *)&buf)
              free(v22);
          }
          objc_msgSend(v3, "deleteRecordByMacString:", v7);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217E640);
          v12 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v13 = objc_msgSend(objc_msgSend(a1, "description"), "UTF8String");
            LODWORD(buf) = 136380675;
            *(_QWORD *)((char *)&buf + 4) = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, adding record: %{private}s", (uint8_t *)&buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10217E640);
            v23 = qword_1022A0048;
            v24 = objc_msgSend(objc_msgSend(a1, "description"), "UTF8String");
            *(_DWORD *)v27 = 136380675;
            *(_QWORD *)&v27[4] = v24;
            LODWORD(v26) = 12;
            v25 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 0, "WifiAssociatedApCentroidStore, adding record: %{private}s", v27, v26);
            sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v25);
            if (v25 != (char *)&buf)
              free(v25);
          }
          objc_msgSend(v3, "addRecord:", a1);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217E640);
          v14 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v3, "getBasicInfo");
            v15 = v32 >= 0 ? &buf : (__int128 *)buf;
            *(_DWORD *)v27 = 136380675;
            *(_QWORD *)&v27[4] = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, %{private}s", v27, 0xCu);
            if (v32 < 0)
              operator delete((void *)buf);
          }
          if (!sub_1001BFF7C(115, 2))
            return;
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217E640);
          v16 = qword_1022A0048;
          objc_msgSend(v3, "getBasicInfo");
          v17 = v28 >= 0 ? v27 : *(_BYTE **)v27;
          v29 = 136380675;
          v30 = v17;
          LODWORD(v26) = 12;
          v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v16, 0, "WifiAssociatedApCentroidStore, %{private}s", &v29, v26);
          if (v28 < 0)
            operator delete(*(void **)v27);
          sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v18);
          if (v18 == (char *)&buf)
            return;
LABEL_56:
          free(v18);
          return;
        }
      }
    }
    else
    {
LABEL_6:
      if (v2)
        goto LABEL_7;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v20 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as the store is invalid", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    *(_WORD *)v27 = 0;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip updating local store as the store is invalid", v27, 2);
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v18);
LABEL_55:
    if (v18 == (char *)&buf)
      return;
    goto LABEL_56;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217E640);
  v19 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as it is disabled by settings", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    *(_WORD *)v27 = 0;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip updating local store as it is disabled by settings", v27, 2);
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v18);
    goto LABEL_55;
  }
}

void sub_100CDA07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CDA098(_QWORD *a1, _QWORD *a2, void *a3)
{
  NSObject *v6;
  std::string *v7;
  std::string *v8;
  NSString *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  std::string *v13;
  NSObject *v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  NSString *v26;
  NSObject *v27;
  const char *v28;
  CLWifiAssociatedApCentroidDO *v29;
  uint64_t v30;
  _BYTE *v31;
  std::string *v32;
  uint64_t v33;
  const char *v34;
  std::string *v35;
  std::string *v36;
  uint64_t v37;
  const char *v38;
  std::string *v39;
  std::string *v40;
  uint64_t v41;
  _WORD v42[8];
  __int128 v43;
  double v44;
  int v45;
  double v46;
  double v47;
  int v48;
  int v49;
  double v50;
  uint64_t v51;
  char v52;
  _BYTE buf[12];
  char v54;
  void *v55;
  void *v56;
  void *v57;
  char v58;
  std::string __p[3];
  char v60;
  __int128 v61;

  if ((sub_10018626C() & 1) != 0)
  {
    if (a3 && (objc_msgSend(a3, "isValid") & 1) != 0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(a3, "getBasicInfo");
        v7 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, local store valid, %{private}s", buf, 0xCu);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217E640);
        v30 = qword_1022A0048;
        objc_msgSend(a3, "getBasicInfo");
        if (v54 >= 0)
          v31 = buf;
        else
          v31 = *(_BYTE **)buf;
        LODWORD(v43) = 136380675;
        *(_QWORD *)((char *)&v43 + 4) = v31;
        v32 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 0, "WifiAssociatedApCentroidStore, local store valid, %{private}s", &v43, 12);
        if (v54 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v32);
        if (v32 != __p)
          free(v32);
      }
      __p[0].__r_.__value_.__r.__words[0] = 0x7FEFFFFFFFFFFFFFLL;
      sub_10130DE94(buf, a1, __p);
      if (sub_10022AD14((uint64_t)buf, a1))
      {
        sub_1000C2254(a2, __p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = __p;
        else
          v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217E640);
        v10 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v11 = -[NSString UTF8String](v9, "UTF8String");
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s in local store as it is detected as moving using GPS harvest samples!", (uint8_t *)__p, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217E640);
          v33 = qword_1022A0048;
          v34 = -[NSString UTF8String](v9, "UTF8String");
          LODWORD(v43) = 136380675;
          *(_QWORD *)((char *)&v43 + 4) = v34;
          LODWORD(v41) = 12;
          v35 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v33, 0, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s in local store as it is detected as moving using GPS harvest samples!", &v43, v41);
          sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v35);
          if (v35 != __p)
            free(v35);
        }
        objc_msgSend(a3, "deleteRecordByMacString:", v9);
      }
      else
      {
        sub_10022ACAC((uint64_t)buf, &v43);
        if (*(double *)&v43 < -90.0
          || *(double *)&v43 > 90.0
          || *((double *)&v43 + 1) > 180.0
          || *((double *)&v43 + 1) < -180.0)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217E640);
          v20 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as it does not have a valid centroid!", (uint8_t *)__p, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10217E640);
            LOWORD(v61) = 0;
            LODWORD(v41) = 2;
            v36 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip updating local store as it does not have a valid centroid!", &v61, v41);
            sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v36);
            if (v36 != __p)
              free(v36);
          }
        }
        else
        {
          sub_10022142C(__p);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)__p[0].__r_.__value_.__l.__data_ + 48))(&v61);
          size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          if (__p[0].__r_.__value_.__l.__size_)
          {
            v16 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if ((_QWORD)v61)
          {
            sub_1000CB0B0(v61);
            sub_100239878(v61);
            v18 = v61;
            sub_100190454((uint64_t)__p, v51, v49, v48, 0, v45, -1, *(double *)&v43, *((double *)&v43 + 1), v44, v46, v47, v50);
            v60 = v52;
            v19 = sub_100239880(v18, (double *)__p);
          }
          else
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10217E640);
            v21 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#warning, movingApDetector is null", (uint8_t *)__p, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_10217E640);
              v42[0] = 0;
              LODWORD(v41) = 2;
              v40 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "#warning, movingApDetector is null", v42, v41);
              sub_100512490("Generic", 1, 0, 2, "BOOL isBadClientSideCentroidByMovingApDetector(const CLWifiAccessPoint &)", "%s\n", (const char *)v40);
              if (v40 != __p)
                free(v40);
            }
            v19 = 0;
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
          {
            v23 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          if (v19)
          {
            sub_1000C2254(&v51, __p);
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = __p;
            else
              v25 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            v26 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10217E640);
            v27 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              v28 = -[NSString UTF8String](v26, "UTF8String");
              LODWORD(__p[0].__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s in local store as it fails to pass cross-check with GPS/Cell!", (uint8_t *)__p, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_10217E640);
              v37 = qword_1022A0048;
              v38 = -[NSString UTF8String](v26, "UTF8String");
              LODWORD(v61) = 136380675;
              *(_QWORD *)((char *)&v61 + 4) = v38;
              LODWORD(v41) = 12;
              v39 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v37, 0, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s in local store as it fails to pass cross-check with GPS/Cell!", &v61, v41);
              sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v39);
              if (v39 != __p)
                free(v39);
            }
            objc_msgSend(a3, "deleteRecordByMacString:", v26);
          }
          else
          {
            v29 = sub_10130DEEC((uint64_t)buf);
            sub_100CD98BC(v29);

          }
        }
      }
      if (v58 < 0)
        operator delete(v57);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
      return;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as the store is invalid", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      *(_WORD *)buf = 0;
      v13 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip updating local store as the store is invalid", buf, 2);
      sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v13);
LABEL_41:
      if (v13 != __p)
        free(v13);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as it is disabled by settings", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      *(_WORD *)buf = 0;
      v13 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip updating local store as it is disabled by settings", buf, 2);
      sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v13);
      goto LABEL_41;
    }
  }
}

void sub_100CDAC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  sub_100261F44(v58 - 96);
  sub_100CDAD0C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100CDAD0C(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100CDAD4C(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_10022142C(&v8);
  v4 = (void *)sub_1000A0810(v8);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_100CDA098(a1, a2, v4);
}

void sub_100CDADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100CDADEC()
{
  uint64_t v0;
  void *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _BOOL8 v5;
  NSObject *v6;
  NSObject *v7;
  CLWifiAssociatedApCentroidSyncedDataStore *v8;
  CLWifiAssociatedApCentroidSyncedDataStore *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _WORD v23[8];
  uint8_t buf[8];
  std::__shared_weak_count *v25;

  if ((sub_10018626C() & 1) == 0)
  {
    if (*((_BYTE *)sub_1000A3224() + 94))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, purging older records from local store even if iCloud sharing is disabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217E640);
        v23[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, purging older records from local store even if iCloud sharing is disabled", v23, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "BOOL purgeOlderRecordsWheniCloudSharingIsDisabled()", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v7 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Re-initializing WifiAssociatedApCentroidStore for purging older records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10217E640);
        v23[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "Re-initializing WifiAssociatedApCentroidStore for purging older records", v23, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "BOOL purgeOlderRecordsWheniCloudSharingIsDisabled()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v8 = objc_alloc_init(CLWifiAssociatedApCentroidSyncedDataStore);
      v9 = v8;
      if (v8 && -[CLWifiAssociatedApCentroidSyncedDataStore isValid](v8, "isValid"))
      {
        v5 = -[CLWifiAssociatedApCentroidSyncedDataStore purgeOlderRecords](v9, "purgeOlderRecords");

        return (id)v5;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v10 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip purging older records from local store as the store is invalid", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v23[0] = 0;
      LODWORD(v22) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip purging older records from local store as the store is invalid", v23, v22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL purgeOlderRecordsWheniCloudSharingIsDisabled()", "%s\n", v11);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v13 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip purging older records as it is not allowed when iCloud sharing is disabled", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v23[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip purging older records as it is not allowed when iCloud sharing is disabled", v23, 2);
      v12 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL purgeOlderRecordsWheniCloudSharingIsDisabled()", "%s\n", v14);
    }
LABEL_50:
    if (v12 != buf)
      free(v12);
    return 0;
  }
  sub_10022142C(buf);
  v0 = sub_1000A0810(*(uint64_t *)buf);
  v1 = (void *)v0;
  v2 = v25;
  if (!v25)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v1)
      goto LABEL_40;
  }
  else
  {
LABEL_6:
    if (!v0)
    {
LABEL_40:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v15 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip purging older records from local store as the store is invalid", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E640);
      v23[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip purging older records from local store as the store is invalid", v23, 2);
      v12 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::purgeOlderRecords()", "%s\n", v17);
      goto LABEL_50;
    }
  }
  if ((objc_msgSend(v1, "isValid") & 1) == 0)
    goto LABEL_40;
  return objc_msgSend(v1, "purgeOlderRecords");
}

void sub_100CDB4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100CDB4D8()
{
  uint64_t v0;
  void *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  void **v6;
  _BOOL8 v7;
  NSObject *v8;
  NSObject *v9;
  CLWifiAssociatedApCentroidSyncedDataStore *v10;
  CLWifiAssociatedApCentroidSyncedDataStore *v11;
  NSObject *v12;
  void **v13;
  NSObject *v14;
  const char *v15;
  void **v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v21;
  const char *v22;
  void **v23;
  const char *v24;
  void **v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  char v36;
  int v37;
  _BYTE *v38;
  void *__p;
  std::__shared_weak_count *v40;
  char v41;

  if ((sub_10018626C() & 1) != 0)
  {
    sub_10022142C(&__p);
    v0 = sub_1000A0810((uint64_t)__p);
    v1 = (void *)v0;
    v2 = v40;
    if (!v40)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v1)
      {
LABEL_7:
        if ((objc_msgSend(v1, "isValid") & 1) != 0)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10217E640);
          v5 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v1, "getBasicInfo");
            v6 = v41 >= 0 ? &__p : (void **)__p;
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)&buf[4] = v6;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting all records from local store, %{private}s", buf, 0xCu);
            if (v41 < 0)
              operator delete(__p);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10217E640);
            v26 = qword_1022A0048;
            objc_msgSend(v1, "getBasicInfo");
            if (v36 >= 0)
              v27 = buf;
            else
              v27 = *(_BYTE **)buf;
            v37 = 136380675;
            v38 = v27;
            _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v26, 0, "WifiAssociatedApCentroidStore, deleting all records from local store, %{private}s", &v37, 12);
            v29 = v28;
            if (v36 < 0)
              operator delete(*(void **)buf);
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::deleteAllRecords()", "%s\n", v29);
            if (v29 != (char *)&__p)
              free(v29);
          }
          return objc_msgSend(v1, "deleteAllRecords");
        }
      }
    }
    else
    {
LABEL_6:
      if (v0)
        goto LABEL_7;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip deleting all records from local store as the store is invalid", (uint8_t *)&__p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip deleting all records from local store as the store is invalid", buf, 2);
    v16 = (void **)v21;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::deleteAllRecords()", "%s\n", v21);
LABEL_68:
    if (v16 != &__p)
      free(v16);
    return 0;
  }
  if (!*((_BYTE *)sub_1000A3224() + 94))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v17 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip deleting all records as it is not allowed when iCloud sharing is disabled", (uint8_t *)&__p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip deleting all records as it is not allowed when iCloud sharing is disabled", buf, 2);
    v16 = (void **)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v18);
    goto LABEL_68;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217E640);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting all records from local store even if iCloud sharing is disabled", (uint8_t *)&__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, deleting all records from local store even if iCloud sharing is disabled", buf, 2);
    v23 = (void **)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v22);
    if (v23 != &__p)
      free(v23);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217E640);
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Re-initializing WifiAssociatedApCentroidStore for deleting all records", (uint8_t *)&__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    *(_WORD *)buf = 0;
    LODWORD(v34) = 2;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0048, 0, "Re-initializing WifiAssociatedApCentroidStore for deleting all records", buf, v34);
    v25 = (void **)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v24);
    if (v25 != &__p)
      free(v25);
  }
  v10 = objc_alloc_init(CLWifiAssociatedApCentroidSyncedDataStore);
  v11 = v10;
  if (!v10 || !-[CLWifiAssociatedApCentroidSyncedDataStore isValid](v10, "isValid"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip deleting all records from local store as the store is invalid", (uint8_t *)&__p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    *(_WORD *)buf = 0;
    LODWORD(v34) = 2;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip deleting all records from local store as the store is invalid", buf, v34);
    v16 = (void **)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v15);
    goto LABEL_68;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217E640);
  v12 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    -[CLWifiAssociatedApCentroidSyncedDataStore getBasicInfo](v11, "getBasicInfo");
    v13 = v41 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting all records from local store, %{private}s", buf, 0xCu);
    if (v41 < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E640);
    v30 = qword_1022A0048;
    -[CLWifiAssociatedApCentroidSyncedDataStore getBasicInfo](v11, "getBasicInfo");
    if (v36 >= 0)
      v31 = buf;
    else
      v31 = *(_BYTE **)buf;
    v37 = 136380675;
    v38 = v31;
    LODWORD(v34) = 12;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v30, 0, "WifiAssociatedApCentroidStore, deleting all records from local store, %{private}s", &v37, v34);
    v33 = v32;
    if (v36 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v33);
    if (v33 != (char *)&__p)
      free(v33);
  }
  v7 = -[CLWifiAssociatedApCentroidSyncedDataStore deleteAllRecords](v11, "deleteAllRecords");

  return (id)v7;
}

void sub_100CDBEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CDBF14(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100CDBF40()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100CDBFDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100CDBFF4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100CDC080(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100CDC098(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  int v9;
  const std::string::value_type *v10;
  uint8_t buf[4];
  const std::string::value_type *v12;

  v4 = sub_10055D44C(a1, "name", 1, 1);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  std::string::assign((std::string *)(v4 + 16), a2);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217E660);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Bytes: construct, name, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217E660);
    v9 = 136315138;
    v10 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Bytes: construct, name, %s", (const char *)&v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLDebugBytes::CLDebugBytes(const char *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100CDC2AC(a1);
  return a1;
}

void sub_100CDC284(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  sub_10055D4D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CDC2AC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217E660);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Bytes: clear, name, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217E660);
    v5 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v5 = (_QWORD *)*v5;
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Bytes: clear, name, %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLDebugBytes::clear()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

void sub_100CDC4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CDC4CC(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v6;
  _QWORD *v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  __int16 v29;
  uint64_t *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  _QWORD *v42;
  __int16 v43;
  uint64_t *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;

  v24 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  LOWORD(v26) = 256;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10217E660);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v7 = (_QWORD *)*v7;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    v12 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)buf = 136316674;
    v42 = v7;
    v43 = 2080;
    v44 = v8;
    v45 = 1024;
    v46 = v9;
    v47 = 1024;
    v48 = v10;
    v49 = 1024;
    v50 = v11;
    v51 = 1024;
    v52 = v12;
    v53 = 1024;
    v54 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Bytes: log, name, %s, m, %s, s, %d, r, %d, t, %d, ts, %d, reachability, %d", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217E660);
    v14 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v14 = (_QWORD *)*v14;
    if (*((char *)a2 + 23) >= 0)
      v15 = a2;
    else
      v15 = (uint64_t *)*a2;
    v16 = *(_DWORD *)(a1 + 40);
    v17 = *(_DWORD *)(a1 + 44);
    v18 = *(_DWORD *)(a1 + 48);
    v19 = *(_DWORD *)(a1 + 52);
    v27 = 136316674;
    v28 = v14;
    v29 = 2080;
    v30 = v15;
    v31 = 1024;
    v32 = v16;
    v33 = 1024;
    v34 = v17;
    v35 = 1024;
    v36 = v18;
    v37 = 1024;
    v38 = v19;
    v39 = 1024;
    v40 = a3;
    LODWORD(v22) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Bytes: log, name, %s, m, %s, s, %d, r, %d, t, %d, ts, %d, reachability, %d", (const char *)&v27, v22, v23, v24, v25, v26);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLDebugBytes::log(const std::string &, CLDaemonStatus_Type::Reachability)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

void sub_100CDC76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CDC794(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100CDC7C0(unsigned int a1)
{
  int v1;
  unsigned int v2;

  if (a1 <= 0x40)
    v1 = 0;
  else
    v1 = 25;
  if (a1 <= 0x44)
    v2 = v1;
  else
    v2 = 50;
  if (a1 <= 0x4E)
    return v2;
  else
    return 75;
}

BOOL sub_100CDC7E8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  NSObject *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  NSObject *v25;
  NSObject *v26;
  _BOOL8 v27;
  double v29;
  NSObject *v30;
  const char *v31;
  const char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _BYTE v36[12];
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  const char *v42;
  int v43;
  _BYTE *v44;
  _BYTE buf[12];
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  const char *v51;

  if ((sub_100182290(a1) & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_100B94300(a1, buf);
      v17 = v48 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v36 = 136380675;
      *(_QWORD *)&v36[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, invalid location %{private}s, fail", v36, 0xCu);
      if (SHIBYTE(v48) < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v18 = qword_1022A0048;
    sub_100B94300(a1, v36);
    if (v39 >= 0)
      v19 = v36;
    else
      v19 = *(_BYTE **)v36;
    v43 = 136380675;
    v44 = v19;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "WifiCalc, integrity, invalid location %{private}s, fail", &v43, 12);
    if (SHIBYTE(v39) < 0)
      operator delete(*(void **)v36);
    goto LABEL_46;
  }
  if ((sub_100182290(a2) & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v21 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_100B94300(a2, buf);
      v22 = v48 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v36 = 136380675;
      *(_QWORD *)&v36[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, invalid reference location %{private}s, fail", v36, 0xCu);
      if (SHIBYTE(v48) < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v23 = qword_1022A0048;
    sub_100B94300(a2, v36);
    if (v39 >= 0)
      v24 = v36;
    else
      v24 = *(_BYTE **)v36;
    v43 = 136380675;
    v44 = v24;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "WifiCalc, integrity, invalid reference location %{private}s, fail", &v43, 12);
    if (SHIBYTE(v39) < 0)
      operator delete(*(void **)v36);
LABEL_46:
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const double)", "%s\n", v20);
    if (v20 == buf)
      return 0;
LABEL_47:
    free(v20);
    return 0;
  }
  v8 = *((double *)sub_10023E928() + 3);
  if (*(double *)(a3 + 344) <= 0.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v25 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, warning, machContinuousTime not available in location private", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E680);
      *(_WORD *)v36 = 0;
      v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, integrity, warning, machContinuousTime not available in location private", v36, 2);
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval getAge(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v34);
      if (v34 != buf)
        free(v34);
    }
    v11 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a2 + 76));
  }
  else
  {
    v9 = sub_1001FCBB4();
    v10 = *(double *)(a3 + 344);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v11 = vabdd_f64(v9, v10);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_QWORD *)(a3 + 344);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v13;
      v46 = 2050;
      v47 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, machContinuousTime %{public}.1f, age %{public}.1f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E680);
      v14 = *(_QWORD *)(a3 + 344);
      *(_DWORD *)v36 = 134349312;
      *(_QWORD *)&v36[4] = v14;
      v37 = 2050;
      v38 = v11;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, integrity, machContinuousTime %{public}.1f, age %{public}.1f", v36, 22);
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval getAge(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v15);
      if (v15 != buf)
        free(v15);
    }
  }
  if (v11 > v8)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v11;
      v46 = 2050;
      v47 = v8;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, age, %{public}.1f, threshold, %{public}.1f, fail", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    *(_DWORD *)v36 = 134349312;
    *(double *)&v36[4] = v11;
    v37 = 2050;
    v38 = v8;
    LODWORD(v35) = 22;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, integrity, age, %{public}.1f, threshold, %{public}.1f, fail", v36, v35);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const double)", "%s\n", v20);
    if (v20 == buf)
      return 0;
    goto LABEL_47;
  }
  v29 = sub_100124100(*(double *)(a1 + 4), *(double *)(a1 + 12), *(double *)(a2 + 4), *(double *)(a2 + 12));
  v27 = v29 <= a4;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217E680);
  v30 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v31 = "fail";
    *(_DWORD *)buf = 134349826;
    *(double *)&buf[4] = v11;
    if (v29 <= a4)
      v31 = "pass";
    v46 = 2050;
    v47 = v29;
    v48 = 2050;
    v49 = a4;
    v50 = 2082;
    v51 = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, age, %{public}.1f, distance, %{public}.1f, threshold, %{public}.1f, %{public}s", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v32 = "fail";
    *(_DWORD *)v36 = 134349826;
    if (v29 <= a4)
      v32 = "pass";
    *(double *)&v36[4] = v11;
    v37 = 2050;
    v38 = v29;
    v39 = 2050;
    v40 = a4;
    v41 = 2082;
    v42 = v32;
    LODWORD(v35) = 42;
    v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, integrity, age, %{public}.1f, distance, %{public}.1f, threshold, %{public}.1f, %{public}s", v36, v35);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const double)", "%s\n", v33);
    if (v33 != buf)
      free(v33);
  }
  return v27;
}

_QWORD *sub_100CDD1D0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  const char *v4;
  const char *v5;
  char *v6;

  v4 = "None";
  v5 = "Medium";
  if (a1 != 50)
    v5 = "High";
  if (a1)
    v4 = "Low";
  if (a1 <= 49)
    v6 = (char *)v4;
  else
    v6 = (char *)v5;
  return sub_1015A2E04(a2, v6);
}

void sub_100CDD214(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100CDD240()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100CDD2DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100CDD2F4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100CDD380(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100CDD398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CLMotionActivity *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  NSObject *v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;

  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  v6 = (CLMotionActivity *)sub_1010654D8(a1 + 48);
  *(_DWORD *)(a1 + 160) = 0;
  CLMotionActivity::getInit(v6);
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 528) = off_10217E718;
  *(_QWORD *)(a1 + 536) = strdup("PedestrianStepCountBuffer");
  *(_QWORD *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 528) = off_10217E780;
  *(_OWORD *)(a1 + 624) = xmmword_101C20FB0;
  *(_QWORD *)(a1 + 640) = 0x403E000000000000;
  *(_WORD *)(a1 + 648) = 256;
  *(_QWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 1;
  *(_QWORD *)(a1 + 616) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 656) = a2;
  *(_QWORD *)(a1 + 664) = off_10217E6D0;
  *(_QWORD *)(a1 + 672) = strdup("PedestrianActivityBuffer");
  *(_QWORD *)(a1 + 680) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 664) = off_10217E808;
  *(_WORD *)(a1 + 784) = 256;
  *(_QWORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 744) = 1;
  *(_OWORD *)(a1 + 752) = xmmword_101C20FC0;
  *(_OWORD *)(a1 + 768) = xmmword_101C16D50;
  *(_DWORD *)(a1 + 792) = 0;
  sub_100FFF840(a1 + 800, a2, a3);
  *(_QWORD *)(a1 + 1992) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 2000) = xmmword_101C20FD0;
  *(_QWORD *)(a1 + 2016) = 0x300000000;
  *(_OWORD *)(a1 + 2024) = xmmword_101C21020;
  *(_OWORD *)(a1 + 2040) = unk_101C21030;
  *(_OWORD *)(a1 + 2056) = xmmword_101C21040;
  *(_OWORD *)(a1 + 2068) = *(__int128 *)((char *)&xmmword_101C21040 + 12);
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_QWORD *)(a1 + 2112) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_QWORD *)(a1 + 2120) = 0;
  *(_DWORD *)(a1 + 2127) = 0;
  v7 = sub_100127B9C();
  sub_100081C10(v7, &v18);
  v8 = (unsigned __int8 *)(a1 + 2129);
  if (sub_1001E4874(v18, "MotionLoggerLogPedometer", (BOOL *)(a1 + 2129)))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v9 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      v10 = *v8;
      *(_DWORD *)buf = 136315394;
      v25 = "MotionLoggerLogPedometer";
      v26 = 1024;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "MSL Logging: %s: %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v15 = *v8;
      v20 = 136315394;
      v21 = "MotionLoggerLogPedometer";
      v22 = 1024;
      v23 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "MSL Logging: %s: %d", (const char *)&v20, 18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "CLStepDistanceFusion::CLStepDistanceFusion(CLNatalieInput<CLOdometerEntry> *, CLRunningFormHealthKitWriter *)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void sub_100CDD788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  sub_100261F44(v6);
  sub_10047F660((_QWORD *)(v3 + 1576));
  sub_100CDD7EC(v3 + 664);
  sub_100CDD82C(v5);
  sub_10047F25C((_QWORD *)(v3 + 480));
  sub_101065580(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_100CDD7EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217E6D0;
  free(*(void **)(a1 + 8));
  sub_100691160((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_100CDD82C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217E718;
  free(*(void **)(a1 + 8));
  sub_1006CEFD4((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_100CDD870(uint64_t a1)
{
  sub_100261F44(a1 + 2136);
  sub_10047F660((_QWORD *)(a1 + 1576));
  *(_QWORD *)(a1 + 664) = off_10217E6D0;
  free(*(void **)(a1 + 672));
  sub_100691160((_QWORD *)(a1 + 688));
  *(_QWORD *)(a1 + 528) = off_10217E718;
  free(*(void **)(a1 + 536));
  sub_1006CEFD4((_QWORD *)(a1 + 552));
  sub_10047F25C((_QWORD *)(a1 + 480));
  sub_101065580(a1 + 48);
  return a1;
}

uint64_t sub_100CDD8F4(uint64_t a1, void **a2, double a3)
{
  _QWORD *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  double v17;
  double v18;
  double v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  NSObject *v28;
  _BOOL8 v29;
  unint64_t v31;
  double v32;
  NSObject *v33;
  unint64_t v34;
  double v35;
  NSObject *v36;
  unint64_t v37;
  double v38;
  NSObject *v39;
  unint64_t v40;
  double v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  double v60;
  double v61;
  double v62;
  __int128 v63;
  double v64;
  double v65;
  int v66;
  __int128 v67[3];
  double v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _DWORD v75[4];
  int v76;
  double v77;
  int v78;
  double v79;
  uint8_t buf[4];
  _BYTE v81[36];
  double v82;
  _BYTE v83[10];
  __int16 v84;
  double v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;

  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v6 = (_QWORD *)(a1 + 528);
  if (!sub_1002190C4(a1 + 528, (uint64_t)&v73, &v71, a3))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v25 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Inconsistency found between steps and clock. Ignoring.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      LOWORD(v78) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Inconsistency found between steps and clock. Ignoring.", &v78, 2);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    return 1;
  }
  v69 = v73;
  v70 = v74;
  v8 = (double *)*((_QWORD *)&v74 + 1);
  v7 = v74;
  v9 = *(double **)v74;
  if (*((_QWORD *)&v74 + 1) == *(_QWORD *)v74)
  {
    v7 = v70 - 8;
    v9 = *(double **)(v70 - 8);
    v8 = v9 + 640;
  }
  v10 = v8 - 40;
  v11 = *v10;
  if (v10 == *((double **)&v72 + 1))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v28 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283521;
      *(double *)v81 = v11;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find Pedometer before current Pedometer", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v78 = 134283521;
      v79 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find Pedometer before current Pedometer", &v78, 12);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
    sub_100CDFDD8(a1, a2, (uint64_t)&v69, 0, 1.0, 0.0);
    return 1;
  }
  if (v10 == v9)
    v10 = (double *)(*(_QWORD *)(v7 - 8) + 5120);
  v12 = *(v10 - 40);
  if (sub_100CE051C(*(_QWORD **)(a1 + 656), v67, v11))
  {
    v13 = *(double *)v67;
    if (sub_100CE06B0(*(_QWORD **)(a1 + 656), &v63, *(double *)v67))
    {
      v14 = *(double *)&v63;
      if (sub_100CE0814(v6, &v78, v13))
      {
        if (sub_100CE0940(v6, &v76, v14))
        {
          v62 = 0.0;
          if (!sub_100CE0A3C(a1, &v62, v13, v14))
          {
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
            v43 = qword_10229FCD8;
            if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134283521;
              *(double *)v81 = v11;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance failure", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FCD0 != -1)
                dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
              v75[0] = 134283521;
              *(double *)&v75[1] = v11;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance failure", v75, 12);
              v55 = (uint8_t *)v54;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v54);
              if (v55 != buf)
                free(v55);
            }
            sub_100CDFDD8(a1, a2, (uint64_t)&v69, 0, 1.0, 0.0);
            return 1;
          }
          v61 = 0.0;
          if (v13 > v12 && !sub_100CE0A3C(a1, &v61, v12, v13))
          {
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
            v44 = qword_10229FCD8;
            if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134283521;
              *(double *)v81 = v11;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance before Odometer failure", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FCD0 != -1)
                dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
              v75[0] = 134283521;
              *(double *)&v75[1] = v11;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance before Odometer failure", v75, 12);
              v57 = (uint8_t *)v56;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v56);
              if (v57 != buf)
                free(v57);
            }
            sub_100CDFDD8(a1, a2, (uint64_t)&v69, 0, 1.0, 0.0);
            return 1;
          }
          v60 = 0.0;
          if (v14 >= a3 || sub_100CE0A3C(a1, &v60, v14, a3))
          {
            if (v11 >= *(double *)a1 && v11 <= *(double *)(a1 + 8))
            {
              v23 = *(unsigned __int8 *)(a1 + 40);
            }
            else
            {
              v15 = v62;
              v16 = v14 - v13 > 0.5;
              v17 = v64;
              v18 = v65 - v68;
              if (v65 - v68 <= 0.0)
                v16 = 0;
              if (v64 / v18 >= 0.25)
                v16 = 0;
              v19 = v18 / v62;
              if (v62 <= 0.0)
                v19 = -1.0;
              v20 = v19 < 2.0;
              if (v19 <= 0.5)
                v20 = 0;
              v21 = v66;
              v22 = v16 && v20;
              if (v62 > 0.0)
                v23 = v22;
              else
                v23 = 0;
              if (qword_10229FCD0 != -1)
                dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
              v24 = qword_10229FCD8;
              if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 68290819;
                *(_WORD *)&v81[4] = 2082;
                *(_DWORD *)v81 = 0;
                *(_QWORD *)&v81[6] = "";
                *(_WORD *)&v81[14] = 2049;
                *(double *)&v81[16] = v13;
                *(_WORD *)&v81[24] = 2049;
                *(double *)&v81[26] = v14;
                *(_WORD *)&v81[34] = 2049;
                v82 = v15;
                *(_WORD *)v83 = 2049;
                *(double *)&v83[2] = v18;
                v84 = 2049;
                v85 = v17;
                v86 = 1025;
                v87 = v23;
                v88 = 1025;
                v89 = v21;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"ExtendedMode, Segment\", \"timeStart\":\"%{private}.3f\", \"timeStop\":\"%{private}.3f\", \"distPed\":\"%{private}.3f\", \"distOdom\":\"%{private}.3f\", \"uncOdom\":\"%{private}.3f\", \"isValid\":%{private}hhd, \"batchedLocationFixType\":%{private}d}", buf, 0x50u);
              }
              if (*(_BYTE *)(a1 + 2129))
              {
                sub_10165F480((uint64_t)buf);
                *(double *)&v81[20] = v13;
                *(double *)&v81[28] = v14;
                *(double *)&v81[12] = v15;
                *(double *)&v81[4] = v18;
                v82 = v17;
                v83[4] = v23;
                v83[8] |= 0x7Fu;
                *(_DWORD *)v83 = v21;
                if (qword_1023118A8 != -1)
                  dispatch_once(&qword_1023118A8, &stru_10217E750);
                if (qword_1023118B0)
                  operator new();
                PB::Base::~Base((PB::Base *)buf);
              }
              *(double *)a1 = v13;
              *(double *)(a1 + 8) = v14;
              *(double *)(a1 + 16) = v15;
              *(double *)(a1 + 24) = v18;
              *(double *)(a1 + 32) = v17;
              *(_BYTE *)(a1 + 40) = v23;
              *(_DWORD *)(a1 + 44) = v21;
            }
            if (v23)
            {
              sub_100CDFDD8(a1, a2, (uint64_t)&v69, 1, *(double *)(a1 + 24) / *(double *)(a1 + 16), v61 + v60);
              return 1;
            }
          }
          else
          {
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
            v45 = qword_10229FCD8;
            if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134283521;
              *(double *)v81 = v11;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance after Odometer failure", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FCD0 != -1)
                dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
              v75[0] = 134283521;
              *(double *)&v75[1] = v11;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance after Odometer failure", v75, 12);
              v59 = (uint8_t *)v58;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v58);
              if (v59 != buf)
                free(v59);
            }
          }
          sub_100CDFDD8(a1, a2, (uint64_t)&v69, 0, 1.0, 0.0);
          return 1;
        }
        v40 = *(_QWORD *)(a1 + 520) + *(_QWORD *)(a1 + 512) - 1;
        v41 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 488) + ((v40 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v40 & 0x1FF))
            - a3;
        v29 = v41 > 150.0;
        if (v41 <= 150.0)
          return v29;
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
        v42 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134283521;
          *(double *)v81 = v11;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Pedometer after first Odometer after previous Pedometer", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
          v75[0] = 134283521;
          *(double *)&v75[1] = v11;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Pedometer after first Odometer after previous Pedometer", v75, 12);
          v51 = (uint8_t *)v53;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v53);
          if (v51 != buf)
            goto LABEL_126;
        }
LABEL_84:
        sub_100CDFDD8(a1, a2, (uint64_t)&v69, 0, 1.0, 0.0);
        return v29;
      }
      v37 = *(_QWORD *)(a1 + 520) + *(_QWORD *)(a1 + 512) - 1;
      v38 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 488) + ((v37 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v37 & 0x1FF))
          - a3;
      v29 = v38 > 150.0;
      if (v38 <= 150.0)
        return v29;
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v39 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283521;
        *(double *)v81 = v11;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Pedometer before first Odometer before current Pedometer", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_84;
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v76 = 134283521;
      v77 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Pedometer before first Odometer before current Pedometer", &v76, 12);
      v51 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v52);
      if (v51 == buf)
        goto LABEL_84;
    }
    else
    {
      v34 = *(_QWORD *)(a1 + 520) + *(_QWORD *)(a1 + 512) - 1;
      v35 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 488) + ((v34 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v34 & 0x1FF))
          - a3;
      v29 = v35 > 150.0;
      if (v35 <= 150.0)
        return v29;
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v36 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283521;
        *(double *)v81 = v11;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer after previous Pedometer (and after first Odometer before current Pedometer)", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_84;
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v78 = 134283521;
      v79 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer after previous Pedometer (and after first Odometer before current Pedometer)", &v78, 12);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v50);
      if (v51 == buf)
        goto LABEL_84;
    }
LABEL_126:
    free(v51);
    goto LABEL_84;
  }
  v31 = *(_QWORD *)(a1 + 520) + *(_QWORD *)(a1 + 512) - 1;
  v32 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 488) + ((v31 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v31 & 0x1FF)) - a3;
  v29 = v32 > 150.0;
  if (v32 > 150.0)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v33 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283521;
      *(double *)v81 = v11;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer before current Pedometer", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v78 = 134283521;
      v79 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer before current Pedometer", &v78, 12);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    sub_100CDFDD8(a1, a2, (uint64_t)&v69, 0, 1.0, 0.0);
  }
  return v29;
}

void sub_100CDEABC(_Unwind_Exception *a1)
{
  PB::Base::~Base((PB::Base *)&STACK[0x4A0]);
  _Unwind_Resume(a1);
}

BOOL sub_100CDEAF8(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 160;
  return (sub_100C5CEF0((_DWORD *)(a1 + 160)) & 1) != 0 || (sub_100C5CF0C(v1) & 1) != 0 || sub_100C5CF64(v1);
}

BOOL sub_100CDEB40(uint64_t a1, int a2)
{
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  double v63;
  _BOOL8 v64;
  char *v65;
  char *v66;
  uint64_t v67;
  BOOL v68;
  double *v69;
  char *v70;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  NSObject *v91;
  int v92;
  uint64_t v93;
  NSObject *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  _QWORD *v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  const char *v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  char *v118;
  double v119;
  char v120;
  __int128 v121;
  double v122;
  double v123;
  void *v124;
  char *v125;
  char *v126;
  void *__p;
  char *v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE v134[18];
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  _BYTE buf[48];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;

  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  if (!(*(unsigned int (**)(_QWORD, __int128 *, __int128 *))(**(_QWORD **)(a1 + 656) + 16))(*(_QWORD *)(a1 + 656), &v132, &v130))return 0;
  __p = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v4 = *((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1) == *((_QWORD *)&v131 + 1))
    goto LABEL_78;
  HIDWORD(v119) = a2;
  v5 = 0;
  v6 = (uint64_t *)v133;
  v7 = *(_QWORD *)v133;
  v8 = 0.0;
  while (v4 != v7)
  {
    v9 = *(double *)(v4 - 192);
    if (v8 - v9 >= 5.0 || (v10 = v4, v9 <= *(double *)(a1 + 1992)))
    {
      v13 = v4;
      goto LABEL_54;
    }
LABEL_11:
    v14 = v128;
    if (v128 >= v129)
    {
      v16 = (char *)__p;
      v17 = (v128 - (_BYTE *)__p) >> 3;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        sub_100259694();
      v19 = v129 - (_BYTE *)__p;
      if ((v129 - (_BYTE *)__p) >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)sub_10025E6A0((uint64_t)&v129, v20);
        v16 = (char *)__p;
        v14 = v128;
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[8 * v17];
      *(_QWORD *)v22 = *(_QWORD *)(v10 - 176);
      v15 = v22 + 8;
      while (v14 != v16)
      {
        v23 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v22 - 1) = v23;
        v22 -= 8;
      }
      __p = v22;
      v128 = v15;
      v129 = &v21[8 * v20];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_QWORD *)v128 = *(_QWORD *)(v10 - 176);
      v15 = v14 + 8;
    }
    v128 = v15;
    v24 = v4;
    if (v4 == *v6)
      v24 = *(v6 - 1) + 4032;
    v25 = (__int128 *)(v24 - 192);
    v26 = v125;
    if (v125 >= v126)
    {
      v36 = (char *)v124;
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v125 - (_BYTE *)v124) >> 6);
      v38 = v37 + 1;
      if (v37 + 1 > 0x155555555555555)
        sub_100259694();
      if (0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 6) > v38)
        v38 = 0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 6);
      if (0xAAAAAAAAAAAAAAABLL * ((v126 - (_BYTE *)v124) >> 6) >= 0xAAAAAAAAAAAAAALL)
        v39 = 0x155555555555555;
      else
        v39 = v38;
      if (v39)
      {
        v40 = (char *)sub_1002746CC((uint64_t)&v126, v39);
        v36 = (char *)v124;
        v26 = v125;
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[64 * ((v125 - (_BYTE *)v124) >> 6)];
      v42 = *v25;
      v43 = v25[1];
      v44 = v25[3];
      *((_OWORD *)v41 + 2) = v25[2];
      *((_OWORD *)v41 + 3) = v44;
      *(_OWORD *)v41 = v42;
      *((_OWORD *)v41 + 1) = v43;
      v45 = v25[4];
      v46 = v25[5];
      v47 = v25[7];
      *((_OWORD *)v41 + 6) = v25[6];
      *((_OWORD *)v41 + 7) = v47;
      *((_OWORD *)v41 + 4) = v45;
      *((_OWORD *)v41 + 5) = v46;
      v48 = v25[8];
      v49 = v25[9];
      v50 = v25[11];
      *((_OWORD *)v41 + 10) = v25[10];
      *((_OWORD *)v41 + 11) = v50;
      *((_OWORD *)v41 + 8) = v48;
      *((_OWORD *)v41 + 9) = v49;
      if (v26 == v36)
      {
        v61 = &v40[192 * v37];
      }
      else
      {
        v51 = &v40[192 * v37];
        do
        {
          v52 = *((_OWORD *)v26 - 12);
          v53 = *((_OWORD *)v26 - 11);
          v54 = *((_OWORD *)v26 - 9);
          *((_OWORD *)v51 - 10) = *((_OWORD *)v26 - 10);
          *((_OWORD *)v51 - 9) = v54;
          *((_OWORD *)v51 - 12) = v52;
          *((_OWORD *)v51 - 11) = v53;
          v55 = *((_OWORD *)v26 - 8);
          v56 = *((_OWORD *)v26 - 7);
          v57 = *((_OWORD *)v26 - 5);
          *((_OWORD *)v51 - 6) = *((_OWORD *)v26 - 6);
          *((_OWORD *)v51 - 5) = v57;
          *((_OWORD *)v51 - 8) = v55;
          *((_OWORD *)v51 - 7) = v56;
          v58 = *((_OWORD *)v26 - 4);
          v59 = *((_OWORD *)v26 - 3);
          v60 = *((_OWORD *)v26 - 1);
          v61 = v51 - 192;
          *((_OWORD *)v51 - 2) = *((_OWORD *)v26 - 2);
          *((_OWORD *)v51 - 1) = v60;
          *((_OWORD *)v51 - 4) = v58;
          *((_OWORD *)v51 - 3) = v59;
          v26 -= 192;
          v51 -= 192;
        }
        while (v26 != v36);
      }
      v5 = v41 + 192;
      v124 = v61;
      v125 = v41 + 192;
      v126 = &v40[192 * v39];
      if (v36)
        operator delete(v36);
    }
    else
    {
      v27 = *v25;
      v28 = *(_OWORD *)(v24 - 176);
      v29 = *(_OWORD *)(v24 - 144);
      *((_OWORD *)v125 + 2) = *(_OWORD *)(v24 - 160);
      *((_OWORD *)v26 + 3) = v29;
      *(_OWORD *)v26 = v27;
      *((_OWORD *)v26 + 1) = v28;
      v30 = *(_OWORD *)(v24 - 128);
      v31 = *(_OWORD *)(v24 - 112);
      v32 = *(_OWORD *)(v24 - 80);
      *((_OWORD *)v26 + 6) = *(_OWORD *)(v24 - 96);
      *((_OWORD *)v26 + 7) = v32;
      *((_OWORD *)v26 + 4) = v30;
      *((_OWORD *)v26 + 5) = v31;
      v33 = *(_OWORD *)(v24 - 64);
      v34 = *(_OWORD *)(v24 - 48);
      v35 = *(_OWORD *)(v24 - 16);
      *((_OWORD *)v26 + 10) = *(_OWORD *)(v24 - 32);
      *((_OWORD *)v26 + 11) = v35;
      *((_OWORD *)v26 + 8) = v33;
      *((_OWORD *)v26 + 9) = v34;
      v5 = v26 + 192;
    }
    v125 = v5;
    v7 = *v6;
    if (v4 == *v6)
    {
      v62 = *--v6;
      v7 = v62;
      v4 = v62 + 4032;
    }
    v63 = *(double *)(v4 - 192);
    v4 -= 192;
    v8 = v63;
    v13 = v4;
    if (v4 == *((_QWORD *)&v131 + 1))
      goto LABEL_54;
  }
  v11 = *(v6 - 1);
  v12 = *(double *)(v11 + 3840);
  if (v8 - v12 < 5.0)
  {
    v13 = v7;
    if (v12 <= *(double *)(a1 + 1992))
      goto LABEL_54;
    v10 = v11 + 4032;
    goto LABEL_11;
  }
  v13 = v7;
LABEL_54:
  if (__p != v128)
  {
    v65 = v128 - 8;
    if (v128 - 8 > __p)
    {
      v66 = (char *)__p + 8;
      do
      {
        v67 = *((_QWORD *)v66 - 1);
        *((_QWORD *)v66 - 1) = *(_QWORD *)v65;
        *(_QWORD *)v65 = v67;
        v65 -= 8;
        v68 = v66 >= v65;
        v66 += 8;
      }
      while (!v68);
    }
    v69 = (double *)v124;
    v70 = v5 - 192;
    if (v124 != v5 && v70 > v124)
    {
      v72 = (char *)v124 + 192;
      do
      {
        v148 = *((_OWORD *)v72 - 5);
        v147 = *((_OWORD *)v72 - 6);
        v146 = *((_OWORD *)v72 - 7);
        v145 = *((_OWORD *)v72 - 8);
        v152 = *((_OWORD *)v72 - 1);
        v151 = *((_OWORD *)v72 - 2);
        v150 = *((_OWORD *)v72 - 3);
        v149 = *((_OWORD *)v72 - 4);
        *(_OWORD *)buf = *((_OWORD *)v72 - 12);
        *(_OWORD *)&buf[16] = *((_OWORD *)v72 - 11);
        *(_OWORD *)&buf[32] = *((_OWORD *)v72 - 10);
        v144 = *((_OWORD *)v72 - 9);
        v73 = *(_OWORD *)v70;
        v74 = *((_OWORD *)v70 + 1);
        v75 = *((_OWORD *)v70 + 3);
        *((_OWORD *)v72 - 10) = *((_OWORD *)v70 + 2);
        *((_OWORD *)v72 - 9) = v75;
        *((_OWORD *)v72 - 12) = v73;
        *((_OWORD *)v72 - 11) = v74;
        v76 = *((_OWORD *)v70 + 4);
        v77 = *((_OWORD *)v70 + 5);
        v78 = *((_OWORD *)v70 + 7);
        *((_OWORD *)v72 - 6) = *((_OWORD *)v70 + 6);
        *((_OWORD *)v72 - 5) = v78;
        *((_OWORD *)v72 - 8) = v76;
        *((_OWORD *)v72 - 7) = v77;
        v79 = *((_OWORD *)v70 + 8);
        v80 = *((_OWORD *)v70 + 9);
        v81 = *((_OWORD *)v70 + 11);
        *((_OWORD *)v72 - 2) = *((_OWORD *)v70 + 10);
        *((_OWORD *)v72 - 1) = v81;
        *((_OWORD *)v72 - 4) = v79;
        *((_OWORD *)v72 - 3) = v80;
        v82 = *(_OWORD *)buf;
        v83 = *(_OWORD *)&buf[16];
        v84 = v144;
        *((_OWORD *)v70 + 2) = *(_OWORD *)&buf[32];
        *((_OWORD *)v70 + 3) = v84;
        *(_OWORD *)v70 = v82;
        *((_OWORD *)v70 + 1) = v83;
        v85 = v145;
        v86 = v146;
        v87 = v148;
        *((_OWORD *)v70 + 6) = v147;
        *((_OWORD *)v70 + 7) = v87;
        *((_OWORD *)v70 + 4) = v85;
        *((_OWORD *)v70 + 5) = v86;
        v88 = v149;
        v89 = v150;
        v90 = v152;
        *((_OWORD *)v70 + 10) = v151;
        *((_OWORD *)v70 + 11) = v90;
        *((_OWORD *)v70 + 8) = v88;
        *((_OWORD *)v70 + 9) = v89;
        v70 -= 192;
        v68 = v72 >= v70;
        v72 += 192;
      }
      while (!v68);
    }
    if (*v69 - *(double *)(a1 + 1992) > 6.0)
      sub_1010655A8(a1 + 48);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v91 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = (v128 - (_BYTE *)__p) >> 3;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "Classifying %lu odometer entries", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      *(_DWORD *)v134 = 134217984;
      *(_QWORD *)&v134[4] = (v128 - (_BYTE *)__p) >> 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Classifying %lu odometer entries", v134);
      v110 = (char *)v109;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::isOdometerQualityUsable(CFAbsoluteTime, BOOL)", "%s\n", v109);
      if (v110 != buf)
        free(v110);
    }
    sub_1010659F0((double *)(a1 + 48), (uint64_t *)&__p);
    if (*(_QWORD *)(a1 + 472) == 1)
    {
      if (*(_BYTE *)(a1 + 2130))
        v92 = 1;
      else
        v92 = 3;
    }
    else
    {
      v92 = *(_DWORD *)(a1 + 152);
    }
    *(_DWORD *)(a1 + 792) = v92;
    *(_QWORD *)(a1 + 1992) = *((_QWORD *)v125 - 24);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v94 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v95 = *(_DWORD *)(a1 + 792);
      v96 = *(_QWORD *)(a1 + 1992);
      v97 = *((_QWORD *)v125 - 16);
      v98 = *((_QWORD *)v125 - 18);
      v100 = *((_QWORD *)v125 - 23);
      v99 = *((_QWORD *)v125 - 22);
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = v95;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v96;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v97;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v98;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v100;
      LOWORD(v144) = 2048;
      *(_QWORD *)((char *)&v144 + 2) = v99;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "OdometerQuality,%d,MostRecentOdometerEntry,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v111 = *(_DWORD *)(a1 + 792);
      v112 = *(_QWORD *)(a1 + 1992);
      v113 = *((_QWORD *)v125 - 16);
      v114 = *((_QWORD *)v125 - 18);
      v116 = *((_QWORD *)v125 - 23);
      v115 = *((_QWORD *)v125 - 22);
      *(_DWORD *)v134 = 67110400;
      *(_DWORD *)&v134[4] = v111;
      *(_WORD *)&v134[8] = 2048;
      *(_QWORD *)&v134[10] = v112;
      v135 = 2048;
      v136 = v113;
      v137 = 2048;
      v138 = v114;
      v139 = 2048;
      v140 = v116;
      v141 = 2048;
      v142 = v115;
      LODWORD(v119) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "OdometerQuality,%d,MostRecentOdometerEntry,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf", v134, v119, *(double *)&v121, *((double *)&v121 + 1), v122, v123);
      v118 = (char *)v117;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::isOdometerQualityUsable(CFAbsoluteTime, BOOL)", "%s\n", v117);
      if (v118 != buf)
        free(v118);
      LOBYTE(a2) = v120;
    }
    *(_OWORD *)v134 = v132;
    v101 = *((double *)&v133 + 1);
    if (*((_QWORD *)&v133 + 1) != v13)
    {
      v102 = *(_QWORD **)&v133;
      do
      {
        v103 = *(_DWORD *)(a1 + 792);
        v104 = *(_QWORD **)(a1 + 656);
        v121 = *(_OWORD *)v134;
        v122 = *(double *)&v102;
        v123 = v101;
        sub_100CE1158(v104, (uint64_t)&v121, buf);
        v105 = *(_QWORD *)&buf[24];
        if (*(_QWORD *)&buf[24] == **(_QWORD **)&buf[16])
          v105 = *(_QWORD *)(*(_QWORD *)&buf[16] - 8) + 4032;
        *(_DWORD *)(v105 - 112) = v103;
        if (*(_QWORD *)&v101 == *v102)
        {
          v106 = *--v102;
          *(_QWORD *)&v101 = v106 + 4032;
        }
        *(_QWORD *)&v101 -= 192;
      }
      while (*(_QWORD *)&v101 != v13);
    }
    goto LABEL_95;
  }
LABEL_78:
  v93 = *((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1) == *(_QWORD *)v133)
    v93 = *(_QWORD *)(v133 - 8) + 4032;
  if (*(double *)(v93 - 192) - *(double *)(a1 + 1992) > 6.0)
  {
    sub_1010655A8(a1 + 48);
    *(_DWORD *)(a1 + 792) = 0;
  }
LABEL_95:
  v107 = *(_DWORD *)(a1 + 792);
  if ((a2 & 1) != 0 || sub_100C5CF0C(a1 + 160))
    v64 = (v107 - 1) < 2;
  else
    v64 = v107 == 1;
  if (v124)
  {
    v125 = (char *)v124;
    operator delete(v124);
  }
  if (__p)
  {
    v128 = (char *)__p;
    operator delete(__p);
  }
  return v64;
}

void sub_100CDF4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CDF518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  __int128 v14;

  v4 = *(uint64_t **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v3 = (__int128 *)(a2 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  if (v5 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *v4) >> 6)
       + 2 * ((_QWORD)v4 - *(_QWORD *)(a3 + 16))
       + 0x3333333333333333 * ((v6 - **(_QWORD **)(a3 + 16)) >> 6);
    if (v7 > 3)
      v7 = 4;
  }
  v14 = *v3;
  sub_100AAD33C((uint64_t **)&v14, -v7);
  if (v5 == *((_QWORD *)&v14 + 1))
    return 1;
  v8 = *v4;
  while (v5 != v8)
  {
    if (*(_DWORD *)(v5 - 104))
      v9 = 1;
    else
      v9 = (*(_BYTE *)(v5 - 160) & 0xFD) == 1;
    if (v9)
      return 0;
LABEL_19:
    v5 -= 320;
    if (v5 == *((_QWORD *)&v14 + 1))
      return 1;
  }
  v10 = *--v4;
  v8 = v10;
  v11 = *(_BYTE *)(v10 + 4960) & 0xFD;
  if (*(_DWORD *)(v10 + 5016))
    v12 = 1;
  else
    v12 = v11 == 1;
  if (!v12)
  {
    v5 = v8 + 5120;
    goto LABEL_19;
  }
  return 0;
}

uint64_t sub_100CDF61C(uint64_t a1, char a2, char a3, double *a4, double *a5, double a6)
{
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  NSObject *v35;
  _BOOL4 v36;
  const char *v37;
  uint8_t *v38;
  double v39;
  double *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  double *v81;
  char v82;
  double *v83;
  _OWORD v84[2];
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint8_t buf[16];
  __int128 v95;

  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v12 = (_QWORD *)(a1 + 528);
  if (sub_1002190C4(a1 + 528, (uint64_t)&v90, &v88, a6))
  {
    *(_OWORD *)buf = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    result = (*(uint64_t (**)(_QWORD, uint8_t *, __int128 *, double))(**(_QWORD **)(a1 + 656) + 16))(*(_QWORD *)(a1 + 656), buf, &v92, a6);
    if (!(_DWORD)result)
      return result;
    v14 = *((_QWORD *)&v95 + 1);
    v15 = (_QWORD *)v95;
    v16 = *((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v95 + 1) != *((_QWORD *)&v93 + 1))
    {
      v82 = a3;
      v81 = a4;
      v83 = a5;
      v17 = *(_QWORD *)v95;
      v18 = *((_QWORD *)&v95 + 1);
      v19 = (_QWORD *)v95;
      while (1)
      {
        v20 = v18;
        if (v18 == v17)
          v20 = *(v19 - 1) + 4032;
        if (*(double *)(v20 - 192) <= *(double *)(a1 + 2000))
          break;
        v21 = *(_DWORD *)(v20 - 112);
        if ((a2 & 1) != 0 || sub_100C5CF0C(a1 + 160))
        {
          if ((v21 - 1) >= 2)
            break;
        }
        else if (v21 != 1)
        {
          break;
        }
        v22 = v14;
        if (v14 == *v15)
          v22 = *(v15 - 1) + 4032;
        v23 = *(double *)(v20 - 128);
        if (v23 <= 0.0 || (v24 = *(double *)(v22 - 128), v24 <= 0.0))
          v25 = *(double *)(v22 - 192) - *(double *)(v20 - 192);
        else
          v25 = v24 - v23;
        if (fabs(v25) > 15.0 || *(double *)(v20 - 136) <= 0.0 || *(double *)(v20 - 152) <= 0.2)
          break;
        v17 = *v19;
        if (v18 == *v19)
        {
          v26 = *--v19;
          v17 = v26;
          v18 = v26 + 4032;
        }
        v18 -= 192;
        if (v18 == v16)
        {
          v18 = v16;
          break;
        }
      }
      a4 = v81;
      v16 = *((_QWORD *)&v93 + 1);
      v15 = v19;
      v14 = v18;
      a5 = v83;
      a3 = v82;
    }
    if (v14 != v16)
    {
      v28 = *((_QWORD *)&v95 + 1);
      v27 = v95;
      v29 = *(_QWORD *)v95;
      v30 = *((_QWORD *)&v95 + 1);
      if (*((_QWORD *)&v95 + 1) == *(_QWORD *)v95)
        v30 = *(_QWORD *)(v95 - 8) + 4032;
      v31 = v14;
      if (v14 == *v15)
        v31 = *(v15 - 1) + 4032;
      v32 = *(double *)(v30 - 128);
      if (v32 <= 0.0 || (v33 = *(double *)(v31 - 128), v33 <= 0.0))
        v34 = *(double *)(v31 - 192) - *(double *)(v30 - 192);
      else
        v34 = v33 - v32;
      if (fabs(v34) > 15.0)
      {
        if (v14 == *((_QWORD *)&v95 + 1))
        {
          v42 = NAN;
        }
        else
        {
          v39 = 0.0;
          do
          {
            if (v28 == v29)
            {
              v41 = *(_QWORD *)(v27 - 8);
              v27 -= 8;
              v29 = v41;
              v40 = (double *)(v41 + 3880);
              v28 = v41 + 4032;
            }
            else
            {
              v40 = (double *)(v28 - 152);
            }
            v39 = v39 + *v40;
            v28 -= 192;
          }
          while (v28 != v14);
          v42 = v39
              / (double)(21 * ((uint64_t)(v95 - (_QWORD)v15) >> 3)
                       - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)&v95 + 1) - *(_QWORD *)v95) >> 6)
                       + 0x5555555555555555 * ((v14 - *v15) >> 6));
        }
        v84[0] = v90;
        v84[1] = v91;
        sub_100CE15D8(v12, (uint64_t)v84, &v85);
        v43 = v87;
        if (v87 == *v86)
          v43 = *(v86 - 1) + 5120;
        *(double *)(v43 - 80) = v42;
        if ((a3 & 1) != 0)
          return 1;
        v44 = *((_QWORD *)&v91 + 1);
        if (*((_QWORD *)&v91 + 1) != *((_QWORD *)&v89 + 1))
        {
          v45 = 0;
          v46 = v91;
          v47 = *(_QWORD *)v91;
          v48 = *((_QWORD *)&v91 + 1);
          v49 = (_QWORD *)v91;
          while (1)
          {
            v50 = v48;
            if (v48 == v47)
              v50 = *(v49 - 1) + 5120;
            if (*(double *)(v50 - 240) <= 0.0)
              break;
            v51 = vabdd_f64(*(double *)(v50 - 320), a6) > 120.0 || *(double *)(v50 - 80) == -1.0;
            if (v51 || v45)
              break;
            if (v48 == v47)
            {
              v52 = *--v49;
              v47 = v52;
              v48 = v52 + 5120;
            }
            v45 = *(unsigned __int8 *)(v50 - 72);
            v48 -= 320;
            if (v48 == *((_QWORD *)&v89 + 1))
            {
              v48 = *((_QWORD *)&v89 + 1);
              break;
            }
          }
          if (v48 != *((_QWORD *)&v91 + 1))
          {
            v53 = *(_QWORD *)v91;
            v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v91 + 1) - *(_QWORD *)v91) >> 6)
                + 2 * (v91 - (_QWORD)v49)
                + 0x3333333333333333 * ((v48 - *v49) >> 6);
            if (v54 >= 6)
            {
              v55 = (double)v54;
              v56 = 0.0;
              v57 = *(_QWORD *)v91;
              v58 = *((_QWORD *)&v91 + 1);
              v59 = v91;
              do
              {
                if (v58 == v57)
                {
                  v61 = *(_QWORD *)(v59 - 8);
                  v59 -= 8;
                  v57 = v61;
                  v60 = (double *)(v61 + 4880);
                  v58 = v61 + 5120;
                }
                else
                {
                  v60 = (double *)(v58 - 240);
                }
                v56 = v56 + 1.0 / *v60;
                v58 -= 320;
              }
              while (v58 != v48);
              v62 = 0.0;
              v63 = *(_QWORD *)v91;
              v64 = *((_QWORD *)&v91 + 1);
              v65 = v91;
              v66 = v56 / v55;
              do
              {
                if (v64 == v63)
                {
                  v67 = *(_QWORD *)(v65 - 8);
                  v65 -= 8;
                  v63 = v67;
                  v62 = v62 + (1.0 / *(double *)(v67 + 4880) - v66) * (1.0 / *(double *)(v67 + 4880) - v66);
                  v64 = v67 + 5120;
                }
                else
                {
                  v62 = v62 + (1.0 / *(double *)(v64 - 240) - v66) * (1.0 / *(double *)(v64 - 240) - v66);
                }
                v64 -= 320;
              }
              while (v64 != v48);
              *a5 = sqrt(v62 / v55);
              v68 = 0.0;
              v69 = v53;
              v70 = v44;
              v71 = v46;
              do
              {
                if (v70 == v69)
                {
                  v73 = *(_QWORD *)(v71 - 8);
                  v71 -= 8;
                  v69 = v73;
                  v72 = (double *)(v73 + 5040);
                  v70 = v73 + 5120;
                }
                else
                {
                  v72 = (double *)(v70 - 80);
                }
                v68 = v68 + *v72;
                v70 -= 320;
              }
              while (v70 != v48);
              v74 = 0.0;
              v75 = v53;
              v76 = v44;
              v77 = v46;
              v78 = v68 / v55;
              do
              {
                if (v76 == v75)
                {
                  v79 = *(_QWORD *)(v77 - 8);
                  v77 -= 8;
                  v75 = v79;
                  v74 = v74 + (*(double *)(v79 + 5040) - v78) * (*(double *)(v79 + 5040) - v78);
                  v76 = v79 + 5120;
                }
                else
                {
                  v74 = v74 + (*(double *)(v76 - 80) - v78) * (*(double *)(v76 - 80) - v78);
                }
                v76 -= 320;
              }
              while (v76 != v48);
              *a4 = sqrt(v74 / v55);
              if (v44 == v53)
                v44 = *(_QWORD *)(v46 - 8) + 5120;
              v80 = fmax(sub_1002446AC(1.5, 0.15, 3.5, 0.35, *(double *)(v44 - 80)), 0.15);
              if (v80 > 0.35)
                v80 = 0.35;
              return *a4 < *a5 + v80;
            }
          }
        }
      }
    }
    return 0;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v35 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = a6;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "StepCountBuffer lookup time not successful,%0.3f", buf, 0xCu);
  }
  v36 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v36)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    LODWORD(v92) = 134217984;
    *(double *)((char *)&v92 + 4) = a6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "StepCountBuffer lookup time not successful,%0.3f", COERCE_DOUBLE(&v92));
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLStepDistanceFusion::shouldUseOdometerPace(CFAbsoluteTime, BOOL, BOOL, double &, double &)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100CDFD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  double v6;

  if (!(*(unsigned int (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(a1 + 656) + 24))(*(_QWORD *)(a1 + 656), &v5, *(double *)a2))return 0;
  return v6 > 6.7056 && *(_BYTE *)(a2 + 160) != 0 || v6 > 13.4112;
}

void sub_100CDFDD8(uint64_t a1, void **a2, uint64_t a3, char a4, double a5, double a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  char v45;
  int v46;
  int v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[3];
  __int128 v90;
  __int128 v91;
  _OWORD v92[4];
  uint8_t buf[4];
  int v94;
  __int16 v95;
  const char *v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  int v122;
  int v123;
  __int16 v124;

  v12 = *(_QWORD **)(a3 + 16);
  v13 = *(_QWORD *)(a3 + 24);
  if (v13 != *v12)
  {
    v14 = v13 - 320;
    v15 = *(_QWORD *)(v13 - 280);
    v16 = *(_QWORD *)(v13 - 240);
    memset(v92, 0, sizeof(v92));
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    memset(v89, 0, sizeof(v89));
    v87 = 0u;
    v17 = a6 + (*(double *)(v13 - 280) - a6) * a5;
    v18 = *(double *)(v13 - 240) / a5;
    if ((a4 & 1) == 0)
      goto LABEL_7;
LABEL_5:
    v21 = 1;
    v22 = 4;
    goto LABEL_8;
  }
  v19 = *(v12 - 1);
  v15 = *(_QWORD *)(v19 + 4840);
  v16 = *(_QWORD *)(v19 + 4880);
  memset(v92, 0, sizeof(v92));
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  memset(v89, 0, sizeof(v89));
  v87 = 0u;
  v20 = *(v12 - 1);
  v14 = v20 + 4800;
  v17 = a6 + (*(double *)(v20 + 4840) - a6) * a5;
  v18 = *(double *)(v20 + 4880) / a5;
  if ((a4 & 1) != 0)
    goto LABEL_5;
  v13 = v20 + 5120;
LABEL_7:
  v21 = *(_BYTE *)(v13 - 146);
  v22 = 1;
LABEL_8:
  v23 = *(_OWORD *)(v14 + 8);
  v24 = *(_OWORD *)(v14 + 24);
  v89[0] = *(_OWORD *)(v14 + 40);
  v25 = *(_OWORD *)(v14 + 56);
  v26 = *(_OWORD *)(v14 + 88);
  v27 = *(_OWORD *)(v14 + 104);
  v89[2] = *(_OWORD *)(v14 + 72);
  v28 = *(_OWORD *)(v14 + 136);
  v29 = *(_OWORD *)(v14 + 152);
  v30 = *(_OWORD *)(v14 + 168);
  v31 = *(_OWORD *)(v14 + 120);
  v87 = v23;
  v88 = v24;
  v90 = v26;
  v91 = v27;
  v89[1] = v25;
  v92[2] = v29;
  v92[3] = v30;
  v92[0] = v31;
  v92[1] = v28;
  *(double *)v89 = v17;
  *((double *)&v89[2] + 1) = v18;
  LOBYTE(v92[0]) = a4;
  BYTE1(v92[0]) = sub_10007C824(a1, v22);
  BYTE6(v92[3]) = v21;
  DWORD2(v92[3]) = v22;
  if (*(_BYTE *)(a1 + 2129))
  {
    sub_101618B40((uint64_t)&v119);
    v33 = *(_QWORD **)(a3 + 16);
    v32 = *(_QWORD *)(a3 + 24);
    if (v32 == *v33)
      v32 = *(v33 - 1) + 5120;
    v34 = *(unsigned __int8 *)(v32 - 146);
    v124 |= 0x200u;
    v123 = v34;
    sub_1006B301C((uint64_t)&v87, (int8x16_t *)buf);
    v36 = *(_QWORD **)(a3 + 16);
    v35 = *(_QWORD *)(a3 + 24);
    if (v35 == *v36)
      v35 = *(v36 - 1) + 5120;
    sub_1006B3208(v35 - 136, (uint64_t)&v85);
    operator new();
  }
  v78 = v16;
  v38 = *(_QWORD **)(a3 + 16);
  v37 = *(_QWORD *)(a3 + 24);
  if (v37 == *v38)
    v37 = *(v38 - 1) + 5120;
  v39 = *(_QWORD *)(v37 - 320);
  v84 = v88;
  v85 = *(_OWORD *)((char *)v89 + 8);
  v86 = *(_OWORD *)((char *)&v89[1] + 8);
  v40 = *(_QWORD *)&v89[0];
  v41 = *((_QWORD *)&v89[2] + 1);
  v82 = v90;
  v83 = v91;
  v42 = LOBYTE(v92[0]);
  v43 = BYTE1(v92[0]);
  v122 = *(_DWORD *)((char *)&v92[3] + 2);
  v120 = *(_OWORD *)((char *)&v92[1] + 2);
  v121 = *(_OWORD *)((char *)&v92[2] + 2);
  v119 = *(_OWORD *)((char *)v92 + 2);
  v44 = BYTE6(v92[3]);
  v45 = BYTE7(v92[3]);
  v46 = DWORD2(v92[3]);
  v47 = HIDWORD(v92[3]);
  v48 = (char *)a2[2];
  v49 = (char *)a2[1];
  v79 = *(_QWORD *)&v89[0];
  v80 = *((_QWORD *)&v89[2] + 1);
  v81 = *((_QWORD *)&v87 + 1);
  if (v49 >= v48)
  {
    v77 = v15;
    v55 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (_BYTE *)*a2) >> 6);
    v56 = v55 + 1;
    if (v55 + 1 > 0x155555555555555)
      sub_100259694();
    v57 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (_BYTE *)*a2) >> 6);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0xAAAAAAAAAAAAAALL)
      v58 = 0x155555555555555;
    else
      v58 = v56;
    if (v58)
      v59 = (char *)sub_1002746CC((uint64_t)(a2 + 2), v58);
    else
      v59 = 0;
    v60 = &v59[192 * v55];
    v61 = &v59[192 * v58];
    *(_QWORD *)v60 = v87;
    *((_QWORD *)v60 + 1) = v81;
    *((_OWORD *)v60 + 1) = v84;
    *((_QWORD *)v60 + 4) = v79;
    *(_OWORD *)(v60 + 40) = v85;
    *(_OWORD *)(v60 + 56) = v86;
    *((_QWORD *)v60 + 9) = v80;
    *((_OWORD *)v60 + 5) = v82;
    *((_OWORD *)v60 + 6) = v83;
    v60[112] = v42;
    v60[113] = v43;
    v62 = v119;
    v63 = v120;
    v64 = v121;
    *(_DWORD *)(v60 + 162) = v122;
    *(_OWORD *)(v60 + 146) = v64;
    *(_OWORD *)(v60 + 130) = v63;
    *(_OWORD *)(v60 + 114) = v62;
    v60[166] = v44;
    v60[167] = v45;
    *((_DWORD *)v60 + 42) = v46;
    *((_DWORD *)v60 + 43) = v47;
    *((_QWORD *)v60 + 22) = v39;
    v60[184] = a4;
    v60[185] = a4;
    *(_DWORD *)(v60 + 186) = 0;
    *((_WORD *)v60 + 95) = 0;
    v54 = v60 + 192;
    v66 = (char *)*a2;
    v65 = (char *)a2[1];
    if (v65 == *a2)
    {
      v15 = v77;
    }
    else
    {
      v15 = v77;
      do
      {
        v67 = *((_OWORD *)v65 - 12);
        v68 = *((_OWORD *)v65 - 11);
        v69 = *((_OWORD *)v65 - 9);
        *((_OWORD *)v60 - 10) = *((_OWORD *)v65 - 10);
        *((_OWORD *)v60 - 9) = v69;
        *((_OWORD *)v60 - 12) = v67;
        *((_OWORD *)v60 - 11) = v68;
        v70 = *((_OWORD *)v65 - 8);
        v71 = *((_OWORD *)v65 - 7);
        v72 = *((_OWORD *)v65 - 5);
        *((_OWORD *)v60 - 6) = *((_OWORD *)v65 - 6);
        *((_OWORD *)v60 - 5) = v72;
        *((_OWORD *)v60 - 8) = v70;
        *((_OWORD *)v60 - 7) = v71;
        v73 = *((_OWORD *)v65 - 4);
        v74 = *((_OWORD *)v65 - 3);
        v75 = *((_OWORD *)v65 - 1);
        *((_OWORD *)v60 - 2) = *((_OWORD *)v65 - 2);
        *((_OWORD *)v60 - 1) = v75;
        *((_OWORD *)v60 - 4) = v73;
        *((_OWORD *)v60 - 3) = v74;
        v60 -= 192;
        v65 -= 192;
      }
      while (v65 != v66);
      v65 = (char *)*a2;
    }
    *a2 = v60;
    a2[1] = v54;
    a2[2] = v61;
    if (v65)
      operator delete(v65);
  }
  else
  {
    *(_OWORD *)v49 = v87;
    *((_OWORD *)v49 + 1) = v84;
    *((_QWORD *)v49 + 4) = v40;
    v50 = v86;
    *(_OWORD *)(v49 + 40) = v85;
    *(_OWORD *)(v49 + 56) = v50;
    *((_QWORD *)v49 + 9) = v41;
    *((_OWORD *)v49 + 5) = v82;
    *((_OWORD *)v49 + 6) = v83;
    v49[112] = v42;
    v49[113] = v43;
    v51 = v119;
    v52 = v120;
    v53 = v121;
    *(_DWORD *)(v49 + 162) = v122;
    *(_OWORD *)(v49 + 146) = v53;
    *(_OWORD *)(v49 + 130) = v52;
    *(_OWORD *)(v49 + 114) = v51;
    v49[166] = v44;
    v49[167] = v45;
    *((_DWORD *)v49 + 42) = v46;
    *((_DWORD *)v49 + 43) = v47;
    *((_QWORD *)v49 + 22) = v39;
    v49[184] = a4;
    v49[185] = a4;
    *(_DWORD *)(v49 + 186) = 0;
    v54 = v49 + 192;
    *((_WORD *)v49 + 95) = 0;
  }
  a2[1] = v54;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v76 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68291843;
    v94 = 0;
    v95 = 2082;
    v96 = "";
    v97 = 2049;
    v98 = v81;
    v99 = 2049;
    v100 = v79;
    v101 = 2049;
    v102 = v80;
    v103 = 1025;
    v104 = v42;
    v105 = 1025;
    v106 = v43;
    v107 = 1025;
    v108 = v44;
    v109 = 1025;
    v110 = v46;
    v111 = 2049;
    v112 = v15;
    v113 = 2049;
    v114 = v78;
    v115 = 2049;
    v116 = a5;
    v117 = 2049;
    v118 = a6;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"ExtendedMode\", \"startTime\":\"%{private}f\", \"distDeltaFused\":\"%{private}.3f\", \"paceFused\":\"%{private}.3f\", \"isOdometerDistance\":%{private}hhd, \"isOdometerPace\":%{private}hhd, \"distanceSource\":%{private}d, \"paceSource\":%{private}d, \"distDeltaCalPed\":\"%{private}.3f\", \"paceCalPed\":\"%{private}.3f\", \"gain\":\"%{private}.3f\", \"nonGainDist\":\"%{private}.3f\"}", buf, 0x70u);
  }
}

void sub_100CE04B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  PB::Base::~Base((PB::Base *)&a21);
  sub_1016166A0((PB::Base *)&a53);
  sub_101618BB4((PB::Base *)(v53 - 240));
  _Unwind_Resume(a1);
}

void sub_100CE04EC()
{
  JUMPOUT(0x100CE04DCLL);
}

void sub_100CE04F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  JUMPOUT(0x100CE04C4);
}

void sub_100CE0514()
{
  JUMPOUT(0x100CE04E4);
}

BOOL sub_100CE051C(_QWORD *a1, _OWORD *a2, double a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  _QWORD v30[4];
  __n128 v31;
  unint64_t v32;
  unint64_t v33;

  v29 = a3;
  v5 = a1[7];
  v6 = v5 + a1[8];
  v7 = a1[4];
  v8 = v7 + 8 * (v6 / 0x15);
  if (a1[5] == v7)
  {
    v9 = 0;
    v11 = 0;
    v10 = (_QWORD *)(v7 + 8 * (v5 / 0x15));
  }
  else
  {
    v9 = *(_QWORD *)(v7 + 8 * (v6 / 0x15)) + 192 * (v6 % 0x15);
    v10 = (_QWORD *)(v7 + 8 * (v5 / 0x15));
    v11 = *v10 + 192 * (v5 % 0x15);
  }
  v31.n128_u64[0] = v8;
  v31.n128_u64[1] = v9;
  v32 = v8;
  v33 = v9;
  v30[0] = v10;
  v30[1] = v11;
  v30[2] = v10;
  v30[3] = v11;
  sub_100CE1B70(&v31, (uint64_t)v30, &v29, &v26);
  v12 = a1[4];
  if (a1[5] == v12)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v12 + 8 * (a1[7] / 0x15uLL)) + 192 * (a1[7] % 0x15uLL);
  v14 = v28;
  if (v13 != v28)
  {
    if (*v27 == v28)
      v15 = *(v27 - 1) + 4032;
    else
      v15 = v28;
    v16 = *(_OWORD *)(v15 - 192);
    v17 = *(_OWORD *)(v15 - 176);
    v18 = *(_OWORD *)(v15 - 144);
    a2[2] = *(_OWORD *)(v15 - 160);
    a2[3] = v18;
    *a2 = v16;
    a2[1] = v17;
    v19 = *(_OWORD *)(v15 - 128);
    v20 = *(_OWORD *)(v15 - 112);
    v21 = *(_OWORD *)(v15 - 80);
    a2[6] = *(_OWORD *)(v15 - 96);
    a2[7] = v21;
    a2[4] = v19;
    a2[5] = v20;
    v22 = *(_OWORD *)(v15 - 64);
    v23 = *(_OWORD *)(v15 - 48);
    v24 = *(_OWORD *)(v15 - 16);
    a2[10] = *(_OWORD *)(v15 - 32);
    a2[11] = v24;
    a2[8] = v22;
    a2[9] = v23;
  }
  return v13 != v14;
}

BOOL sub_100CE06B0(_QWORD *a1, _OWORD *a2, double a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double *v9;
  unint64_t v10;
  _QWORD *v11;
  double *v12;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v27;

  v27 = a3;
  v5 = a1[7];
  v6 = a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x15));
  if (v7 == v6)
  {
    v9 = 0;
    v12 = 0;
    v11 = (_QWORD *)(v6 + 8 * ((a1[8] + v5) / 0x15));
  }
  else
  {
    v9 = (double *)(*(_QWORD *)(v6 + 8 * (v5 / 0x15)) + 192 * (v5 % 0x15));
    v10 = a1[8] + v5;
    v11 = (_QWORD *)(v6 + 8 * (v10 / 0x15));
    v12 = (double *)(*v11 + 192 * (v10 % 0x15));
  }
  sub_100CE1C90(v8, v9, v11, v12, &v27);
  v14 = a1[4];
  if (a1[5] == v14)
  {
    v16 = 0;
  }
  else
  {
    v15 = a1[8] + a1[7];
    v16 = *(_QWORD *)(v14 + 8 * (v15 / 0x15)) + 192 * (v15 % 0x15);
  }
  if ((__int128 *)v16 != v13)
  {
    v17 = *v13;
    v18 = v13[1];
    v19 = v13[3];
    a2[2] = v13[2];
    a2[3] = v19;
    *a2 = v17;
    a2[1] = v18;
    v20 = v13[4];
    v21 = v13[5];
    v22 = v13[7];
    a2[6] = v13[6];
    a2[7] = v22;
    a2[4] = v20;
    a2[5] = v21;
    v23 = v13[8];
    v24 = v13[9];
    v25 = v13[11];
    a2[10] = v13[10];
    a2[11] = v25;
    a2[8] = v23;
    a2[9] = v24;
  }
  return v16 != (_QWORD)v13;
}

BOOL sub_100CE0814(_QWORD *a1, void *a2, double a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  _QWORD v21[4];
  _QWORD v22[4];

  v20 = a3;
  v5 = a1[7];
  v6 = v5 + a1[8];
  v7 = a1[4];
  v8 = (_QWORD *)(v7 + 8 * (v6 >> 4));
  if (a1[5] == v7)
  {
    v9 = 0;
    v11 = 0;
    v10 = (_QWORD *)(v7 + 8 * (v5 >> 4));
  }
  else
  {
    v9 = *v8 + 320 * (v6 & 0xF);
    v10 = (_QWORD *)(v7 + 8 * (v5 >> 4));
    v11 = *v10 + 320 * (a1[7] & 0xFLL);
  }
  v22[0] = v8;
  v22[1] = v9;
  v22[2] = v8;
  v22[3] = v9;
  v21[0] = v10;
  v21[1] = v11;
  v21[2] = v10;
  v21[3] = v11;
  sub_100CE1D70((uint64_t)v22, (uint64_t)v21, &v20, &v17);
  v12 = a1[4];
  if (a1[5] == v12)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v12 + ((a1[7] >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * (a1[7] & 0xFLL);
  v14 = v19;
  if (v13 != v19)
  {
    if (*v18 == v19)
      v15 = *(v18 - 1) + 5120;
    else
      v15 = v19;
    memcpy(a2, (const void *)(v15 - 320), 0x140uLL);
  }
  return v13 != v14;
}

BOOL sub_100CE0940(_QWORD *a1, void *a2, double a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v19;

  v19 = a3;
  v5 = a1[7];
  v6 = a1[4];
  v7 = a1[5];
  v8 = (uint64_t *)(v6 + 8 * (v5 >> 4));
  if (v7 == v6)
  {
    v9 = 0;
    v12 = 0;
    v11 = (char *)(v6 + 8 * ((a1[8] + v5) >> 4));
  }
  else
  {
    v9 = *v8 + 320 * (v5 & 0xF);
    v10 = a1[8] + v5;
    v11 = (char *)(v6 + 8 * (v10 >> 4));
    v12 = *(_QWORD *)v11 + 320 * (v10 & 0xF);
  }
  sub_100CE1E98(v8, v9, v11, v12, &v19);
  v14 = (uint64_t)v13;
  v15 = a1[4];
  if (a1[5] == v15)
  {
    v17 = 0;
  }
  else
  {
    v16 = a1[8] + a1[7];
    v17 = *(_QWORD *)(v15 + ((v16 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * (v16 & 0xF);
  }
  if ((const void *)v17 != v13)
    memcpy(a2, v13, 0x140uLL);
  return v17 != v14;
}

BOOL sub_100CE0A3C(uint64_t a1, double *a2, double a3, double a4)
{
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  uint8_t *v9;
  double v12;
  double v13;
  int v14;
  double v15;
  __int16 v16;
  double v17;
  uint8_t buf[4];
  double v19;
  __int16 v20;
  double v21;

  v12 = 0.0;
  v13 = 0.0;
  *a2 = 0.0;
  if (a3 <= a4)
  {
    if (a3 != a4)
    {
      result = sub_100CE1218(a1, &v13, a3);
      if (!result)
        return result;
      result = sub_100CE1218(a1, &v12, a4);
      if (!result)
        return result;
      *a2 = v12 - v13;
    }
    return 1;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v6 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    v19 = a3;
    v20 = 2050;
    v21 = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Time rolled back! t1,%{public}f,t2,%{public}f", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v14 = 134349312;
    v15 = a3;
    v16 = 2050;
    v17 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Time rolled back! t1,%{public}f,t2,%{public}f", &v14, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::getPedometerDistance(CFAbsoluteTime, CFAbsoluteTime, double &) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

uint64_t sub_100CE0C5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _OWORD v7[2];
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (*(_QWORD *)(result + 520))
  {
    v3 = (int64x2_t *)result;
    v4 = result + 480;
    v5 = result + 528;
    do
    {
      v6 = *(double *)(*(_QWORD *)(v3[30].i64[1] + (((unint64_t)v3[32].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v3[32].i64[0] & 0x1FF));
      v9 = 0u;
      v10 = 0u;
      memset(v8, 0, sizeof(v8));
      if (sub_1002190C4(v5, (uint64_t)&v9, v8, v6))
      {
        v7[0] = v9;
        v7[1] = v10;
        sub_100CDFDD8((uint64_t)v3, (void **)a2, (uint64_t)v7, 0, 1.0, 0.0);
      }
      v3[32] = vaddq_s64(v3[32], (int64x2_t)xmmword_101B9DFC0);
      result = sub_10047F604(v4, 1);
    }
    while (v3[32].i64[1]);
  }
  return result;
}

void sub_100CE0D34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CE0D54(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  char v7;
  uint64_t result;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v4 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v6 = a2[2];
    *(_DWORD *)buf = 67109376;
    v17 = v5;
    v18 = 1024;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MotionOverride: action,%d,type,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v9 = *a2;
    v10 = a2[2];
    v13[0] = 67109376;
    v13[1] = v9;
    v14 = 1024;
    v15 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "MotionOverride: action,%d,type,%d", v13, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLStepDistanceFusion::feedSession(const CLMotionStateMediator_Type::MotionOverride &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_100197040();
  if (sub_100195F08())
    sub_100DE5E04(*(std::mutex **)(a1 + 2136), a2);
  v7 = sub_100218B50(a1);
  memcpy((void *)(a1 + 160), a2, 0x140uLL);
  result = sub_100218B50(a1);
  if ((v7 & 1) == 0)
  {
    if ((_DWORD)result)
    {
      *(_QWORD *)(a1 + 2104) = 0;
      *(_OWORD *)(a1 + 2088) = 0u;
      *(_QWORD *)(a1 + 2112) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 2016) = 0x300000000;
      return sub_100244694(a1 + 800);
    }
  }
  return result;
}

void sub_100CE0F98(uint64_t a1, uint64_t a2)
{
  sub_100FFF844(a1 + 800, a2);
}

void sub_100CE0FA0(uint64_t a1, uint64_t *a2)
{
  int v4;
  _BYTE v5[16];
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  char v11;

  if (*(_BYTE *)(a1 + 2129))
  {
    sub_10162D7BC((uint64_t)v5);
    v6 = *a2;
    v7 = a2[1];
    v4 = *((unsigned __int8 *)a2 + 16);
    v8 = *((unsigned __int8 *)a2 + 17);
    v9 = v4;
    LOBYTE(v4) = *((_BYTE *)a2 + 18);
    v11 |= 0x3Eu;
    v10 = v4;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_10217E750);
    if (qword_1023118B0)
      operator new();
    PB::Base::~Base((PB::Base *)v5);
  }
  sub_100FFFC6C(a1 + 800, (__int128 *)a2);
}

void sub_100CE10AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PB::Base::~Base((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100CE10E0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_OWORD *)(a1 + 2068) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 2040) = v5;
  *(_OWORD *)(a1 + 2056) = v6;
  *(_OWORD *)(a1 + 2024) = v4;
  sub_100FFFCAC(a1 + 800, (uint64_t)a2);
  sub_100197040();
  if ((sub_100195F08() & 1) != 0 || (sub_100197040(), sub_10019DF90()))
    sub_100DE5D74(*(_QWORD *)(a1 + 2136), a2);
}

void *sub_100CE1150(uint64_t a1, void *a2)
{
  return sub_1001D4784((_QWORD *)(a1 + 24), a2);
}

_QWORD *sub_100CE1158@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[7] + a1[8];
  v4 = a1[4];
  v5 = (_QWORD *)(v4 + 8 * (v3 / 0x15));
  if (a1[5] == v4)
  {
    v6 = 0;
    *a3 = v5;
    a3[1] = 0;
  }
  else
  {
    v6 = *v5 + 192 * (v3 % 0x15);
    *a3 = v5;
    a3[1] = v6;
  }
  a3[2] = v5;
  v7 = a3 + 2;
  a3[3] = v6;
  v8 = *(_QWORD *)(a2 + 24);
  if (v6 == v8)
    v9 = 0;
  else
    v9 = -21 * (((uint64_t)v5 - *(_QWORD *)(a2 + 16)) >> 3)
       + 0x5555555555555555 * ((uint64_t)(v6 - *v5) >> 6)
       - 0x5555555555555555 * ((v8 - **(_QWORD **)(a2 + 16)) >> 6);
  return sub_100AADB74(v7, v9);
}

BOOL sub_100CE1218(uint64_t a1, double *a2, double a3)
{
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  result = sub_100CE1430((_QWORD *)(a1 + 528), (uint64_t)&v28, &v26, a3);
  if (result)
  {
    v6 = *((_QWORD *)&v29 + 1);
    v7 = *(_QWORD *)v29;
    v8 = *((_QWORD *)&v29 + 1) - *(_QWORD *)v29;
    v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 6);
    v10 = v9 - 1;
    if (v8 < 321)
    {
      v12 = *(_QWORD *)(v29 - 8 * ((16 - v9) >> 4));
      v13 = v12 + 320 * (~(16 - (_BYTE)v9) & 0xF);
      if (v13 == *((_QWORD *)&v27 + 1))
        return 0;
      v11 = -(uint64_t)((16 - v9) >> 4);
    }
    else
    {
      v11 = v10 >> 4;
      v12 = *(_QWORD *)(v29 + 8 * (v10 >> 4));
      v13 = v12 + 320 * (v10 & 0xF);
      if (v13 == *((_QWORD *)&v27 + 1))
        return 0;
    }
    if (v13 == v12)
      v13 = *(_QWORD *)(v29 + 8 * v11 - 8) + 5120;
    if (*(double *)(v13 - 320) > a3)
      return 0;
    v14 = *((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1) == v7)
      v14 = *(_QWORD *)(v29 - 8) + 5120;
    if (*(double *)(v14 - 320) <= a3)
      return 0;
    if (v8 < 321)
    {
      v15 = -(uint64_t)((16 - v9) >> 4);
      v16 = *(_QWORD *)(v29 - 8 * ((16 - v9) >> 4));
      v17 = ~(16 - v9) & 0xF;
    }
    else
    {
      v15 = v10 >> 4;
      v16 = *(_QWORD *)(v29 + 8 * (v10 >> 4));
      v17 = v10 & 0xF;
    }
    v18 = v16 + 320 * v17;
    if (v18 == v16)
      v18 = *(_QWORD *)(v29 + 8 * v15 - 8) + 5120;
    if (v8 < 321)
    {
      v22 = ~(16 - v9);
      v23 = (16 - v9) >> 4;
      v19 = -(uint64_t)v23;
      v20 = *(_QWORD *)(v29 - 8 * v23);
      v21 = v22 & 0xF;
    }
    else
    {
      v19 = v10 >> 4;
      v20 = *(_QWORD *)(v29 + 8 * (v10 >> 4));
      v21 = v10 & 0xF;
    }
    v24 = v20 + 320 * v21;
    v25 = (double *)(v18 - 320);
    if (v24 == v20)
      v24 = *(_QWORD *)(v29 + 8 * v19 - 8) + 5120;
    if (*((_QWORD *)&v29 + 1) == v7)
      v6 = *(_QWORD *)(v29 - 8) + 5120;
    *a2 = sub_1002446AC(*v25, *(double *)(v24 - 136), *(double *)(v6 - 320), *(double *)(v6 - 136), a3);
    return 1;
  }
  return result;
}

BOOL sub_100CE1430(_QWORD *a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;

  v4 = a1[4];
  v5 = (_QWORD *)(v4 + 8 * (a1[7] >> 4));
  if (a1[5] == v4)
    v6 = 0;
  else
    v6 = *v5 + 320 * (a1[7] & 0xFLL);
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = a1[8];
  if (!v8)
    return 0;
  v9 = a1[7] + v8;
  v10 = a1[4];
  v11 = a1[5];
  v12 = (_QWORD *)(v10 + 8 * (v9 >> 4));
  if (*(double *)(*(_QWORD *)(v10 + (((v9 - 1) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * (((_DWORD)v9 - 1) & 0xF)) < a4)
  {
    if (v11 == v10)
      v13 = 0;
    else
      v13 = *v12 + 320 * (v9 & 0xF);
    result = 0;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v13;
    return result;
  }
  if (v11 == v10)
    v15 = 0;
  else
    v15 = *v12 + 320 * (v9 & 0xF);
  v16 = a3[3];
  if (v15 == v16)
  {
LABEL_22:
    v21 = *(_QWORD *)(a2 + 24);
    return v21 != v16;
  }
  v17 = *v12;
  v18 = v15;
  v19 = v12;
  while (1)
  {
    v20 = v18 - v17;
    if (v18 == v17)
      break;
    if (*(double *)(v18 - 320) <= a4)
      goto LABEL_23;
LABEL_21:
    v18 -= 320;
    if (v18 == v16)
      goto LABEL_22;
  }
  v17 = *(v19 - 1);
  if (*(double *)(v17 + 4800) > a4)
  {
    v18 = v17 + 5120;
    --v19;
    goto LABEL_21;
  }
LABEL_23:
  v22 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 6);
  if (v20 < -319)
  {
    v25 = 14 - v22;
    v23 = ~(_BYTE)v25;
    v24 = &v19[-(v25 >> 4)];
  }
  else
  {
    v23 = v22 + 1;
    v24 = &v19[(v22 + 1) >> 4];
  }
  v21 = *v24 + 320 * (v23 & 0xF);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v21;
  v16 = a3[3];
  return v21 != v16;
}

uint64_t **sub_100CE15D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[7] + a1[8];
  v4 = a1[4];
  v5 = (_QWORD *)(v4 + 8 * (v3 >> 4));
  if (a1[5] == v4)
  {
    v6 = 0;
    *a3 = v5;
    a3[1] = 0;
  }
  else
  {
    v6 = *v5 + 320 * (v3 & 0xF);
    *a3 = v5;
    a3[1] = v6;
  }
  a3[2] = v5;
  v7 = (uint64_t **)(a3 + 2);
  a3[3] = v6;
  v8 = *(_QWORD *)(a2 + 24);
  if (v6 == v8)
    v9 = 0;
  else
    v9 = 0x3333333333333333 * ((v6 - *v5) >> 6)
       + 2 * (*(_QWORD *)(a2 + 16) - (_QWORD)v5)
       - 0x3333333333333333 * ((v8 - **(_QWORD **)(a2 + 16)) >> 6);
  return sub_100AAD33C(v7, v9);
}

uint64_t sub_100CE1670(uint64_t a1)
{
  uint64_t result;
  _DWORD v2[58];

  result = sub_10009D5DC(a1 + 664, (uint64_t)v2);
  if ((_DWORD)result)
    return CLMotionActivity::isTypePedestrian(v2[36]);
  return result;
}

_QWORD *sub_100CE16D4(uint64_t a1, uint64_t *a2)
{
  return sub_100349198((_QWORD *)(a1 + 2136), a2);
}

void sub_100CE16DC(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100CE1708(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217E6D0;
  free(*(void **)(a1 + 8));
  sub_100691160((_QWORD *)(a1 + 24));
  operator delete();
}

BOOL sub_100CE1758(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x11));
  if (*(_QWORD *)(a1 + 40) == v5)
    v7 = 0;
  else
    v7 = *v6 + 232 * (v4 % 0x11);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (uint64_t *)(v10 + 8 * (v9 / 0x11));
  if (*(_QWORD *)(a1 + 40) == v10)
    v12 = 0;
  else
    v12 = *v11 + 232 * (v9 % 0x11);
  v13 = a3[3];
  if (v12 != v13)
  {
    v14 = *v11;
    v15 = 1.79769313e308;
    v16 = v12;
    v17 = v11;
    while (1)
    {
      v18 = v16;
      if (v16 == v14)
        v18 = *(v17 - 1) + 3944;
      v19 = vabdd_f64(*(double *)(v18 - 232), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v16;
        v14 = *v17;
        v20 = v16;
        if (v16 == *v17)
          v20 = *(v17 - 1) + 3944;
        v15 = v19;
        if (*(double *)(v20 - 232) == a4)
          break;
      }
      if (v16 == v14)
      {
        v21 = *--v17;
        v14 = v21;
        v16 = v21 + 3944;
      }
      v16 -= 232;
      v13 = a3[3];
      if (v16 == v13)
        return v13 != *(_QWORD *)(a2 + 24);
    }
    v13 = a3[3];
  }
  return v13 != *(_QWORD *)(a2 + 24);
}

void sub_100CE189C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217E718;
  free(*(void **)(a1 + 8));
  sub_1006CEFD4((_QWORD *)(a1 + 24));
  operator delete();
}

uint64_t sub_100CE18EC(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v7, &v5);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v8 + 1);
    if (*((_QWORD *)&v8 + 1) == *((_QWORD *)&v6 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v8 == *((_QWORD *)&v8 + 1))
        v4 = *(_QWORD *)(v8 - 8) + 5120;
      memcpy(a2, (const void *)(v4 - 320), 0x140uLL);
      return 1;
    }
  }
  return result;
}

void sub_100CE19A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217E718;
  free(*(void **)(a1 + 8));
  sub_1006CEFD4((_QWORD *)(a1 + 24));
  operator delete();
}

BOOL sub_100CE19F8(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + (((unint64_t)(v4 + *(_QWORD *)(a1 + 56) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 320 * (((_DWORD)v4 + *(_DWORD *)(a1 + 56) - 1) & 0xF));
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_1002190C4(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_100CE1B20(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217E6D0;
  free(*(void **)(a1 + 8));
  sub_100691160((_QWORD *)(a1 + 24));
  operator delete();
}

__n128 sub_100CE1B70@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __n128 v15;
  __n128 v16;
  __n128 v17;

  v6 = a1[1].n128_u64[1];
  v7 = *(_QWORD *)(a2 + 24);
  if (v6 != v7)
  {
    v8 = 21 * ((uint64_t)(a1[1].n128_u64[0] - *(_QWORD *)(a2 + 16)) >> 3)
       - 0x5555555555555555 * ((uint64_t)(v6 - *(_QWORD *)a1[1].n128_u64[0]) >> 6)
       + 0x5555555555555555 * ((v7 - **(_QWORD **)(a2 + 16)) >> 6);
    if (v8)
    {
      while (1)
      {
        v10 = v8 >> 1;
        v16 = *a1;
        v17 = a1[1];
        sub_100AADB74(&v17, -(uint64_t)(v8 >> 1));
        v12 = v17.n128_i64[1];
        v11 = v17.n128_u64[0];
        if (v17.n128_u64[1] != *(_QWORD *)v17.n128_u64[0])
          break;
        v11 = v17.n128_u64[0] - 8;
        v13 = *(_QWORD *)(v17.n128_u64[0] - 8);
        if (*(double *)(v13 + 3840) >= *a3)
        {
          v12 = v13 + 4032;
LABEL_8:
          *a1 = v16;
          a1[1].n128_u64[0] = v11;
          a1[1].n128_u64[1] = v12 - 192;
          v10 = v8 + ~v10;
        }
LABEL_9:
        v8 = v10;
        if (!v10)
          goto LABEL_10;
      }
      if (*(double *)(v17.n128_u64[1] - 192) < *a3)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
LABEL_10:
  result = *a1;
  v15 = a1[1];
  *a4 = *a1;
  a4[1] = v15;
  return result;
}

_QWORD *sub_100CE1C90(_QWORD *a1, double *a2, _QWORD *a3, double *a4, double *a5)
{
  double *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v11;
  double *v12;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 21 * (a3 - a1)
       - 0x5555555555555555 * (((uint64_t)a4 - *a3) >> 6)
       + 0x5555555555555555 * (((uint64_t)a2 - *a1) >> 6);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v11 = v6;
        v12 = v5;
        sub_100AADB74(&v11, v7 >> 1);
        if (*v12 <= *a5)
        {
          v6 = v11;
          v5 = v12 + 24;
          if ((double *)((char *)v12 - *v11 + 192) == (double *)4032)
          {
            v6 = v11 + 1;
            v5 = (double *)v11[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

__n128 sub_100CE1D70@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  if (v6 != v7)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - **(_QWORD **)(a1 + 16)) >> 6)
       + 2 * (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a2 + 16))
       + 0x3333333333333333 * ((v7 - **(_QWORD **)(a2 + 16)) >> 6);
    if (v8)
    {
      while (1)
      {
        v10 = v8 >> 1;
        v16 = *(__n128 *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        sub_100AAD33C((uint64_t **)&v17, -(uint64_t)(v8 >> 1));
        v12 = *((_QWORD *)&v17 + 1);
        v11 = v17;
        if (*((_QWORD *)&v17 + 1) != *(_QWORD *)v17)
          break;
        v11 = v17 - 8;
        v13 = *(_QWORD *)(v17 - 8);
        if (*(double *)(v13 + 4800) >= *a3)
        {
          v12 = v13 + 5120;
LABEL_8:
          *(__n128 *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v11;
          *(_QWORD *)(a1 + 24) = v12 - 320;
          v10 = v8 + ~v10;
        }
LABEL_9:
        v8 = v10;
        if (!v10)
          goto LABEL_10;
      }
      if (*(double *)(*((_QWORD *)&v17 + 1) - 320) < *a3)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
LABEL_10:
  result = *(__n128 *)a1;
  v15 = *(_OWORD *)(a1 + 16);
  *a4 = *(_OWORD *)a1;
  a4[1] = v15;
  return result;
}

uint64_t *sub_100CE1E98(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, double *a5)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t *v11;
  double *v12;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((a4 - *(_QWORD *)a3) >> 6)
       + 2 * (a3 - (char *)a1)
       + 0x3333333333333333 * ((a2 - *a1) >> 6);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v11 = v6;
        v12 = (double *)v5;
        sub_100AAD33C(&v11, v7 >> 1);
        if (*v12 <= *a5)
        {
          v6 = v11;
          v5 = (uint64_t)(v12 + 40);
          if ((double *)((char *)v12 - *v11 + 320) == (double *)5120)
          {
            v6 = v11 + 1;
            v5 = v11[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void sub_100CE1F74(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100CE1FA0(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t v6;
  float v7;
  int v8;
  double v9;
  double v10;

  v3 = a2[1];
  if (v3 >= a3)
  {
    v5 = 0;
    v6 = -(uint64_t)a3;
    v7 = 0.0;
    do
    {
      v8 = *(unsigned __int8 *)(sub_100CE2098(a2, v3 + v6) + 8);
      v9 = 2.55999994;
      if (v3 + v6)
      {
        v10 = *(double *)sub_100CE2098(a2, v3 + v6);
        v9 = v10 - *(double *)sub_100CE2098(a2, v3 + v6 - 1);
      }
      v7 = v9 + v7;
      if (*(float *)(sub_100CE2098(a2, v3 + v6) + 12) >= v7)
        v7 = *(float *)(sub_100CE2098(a2, v3 + v6) + 12);
      v5 += v8;
    }
    while (!__CFADD__(v6++, 1));
  }
}

uint64_t sub_100CE2098(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217E9C8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217E9C8);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLPedestrianWorkoutStopDetectorFSM::LimitedStepCountEntry>::operator[](const size_t) const [T = CLPedestrianWorkoutStopDetectorFSM::LimitedStepCountEntry]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

float sub_100CE2294(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  unint64_t v4;
  float v5;
  float v6;
  unsigned int v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = 0.0;
  v6 = 0.0;
  if (v4 >= a3)
  {
    v8 = 0;
    v9 = -(uint64_t)a3;
    do
      v8 += *(unsigned __int8 *)(sub_100CE2098(a2, v4 + v9) + 16);
    while (!__CFADD__(v9++, 1));
    v6 = (float)v8;
  }
  if (a3)
    return v6 / (float)v4;
  return v5;
}

void sub_100CE231C(uint64_t a1, unsigned int a2, int a3, double a4, float a5)
{
  int v8;
  float v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL4 v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  float v26;
  float v27;
  int v28;
  _BOOL4 v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  double v44;
  __int128 v45;
  double v46;
  int v47;
  double v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  double v56;
  __int16 v57;
  int v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  _BOOL4 v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  int buf;
  double v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  double v90;
  __int16 v91;
  int v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  int v104;
  __int16 v105;
  _BOOL4 v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;

  if (a2 >= 0xFF)
    v8 = 255;
  else
    v8 = a2;
  *(double *)&v45 = a4;
  v9 = fminf(a5, 12.8);
  BYTE8(v45) = v8;
  *((float *)&v45 + 3) = v9;
  LOBYTE(v46) = a3;
  BYTE1(v46) = 2;
  v10 = (unsigned __int16 *)(a1 + 40);
  v11 = sub_10021C2E4((unsigned __int16 *)(a1 + 40), &v45);
  v12 = *(unsigned __int16 *)(a1 + 42);
  v13 = -1.0;
  if (v12 < 5)
  {
    v16 = -1.0;
  }
  else
  {
    sub_100CE1FA0((uint64_t)v11, v10, 5uLL);
    v16 = v15;
    v12 = *(unsigned __int16 *)(a1 + 42);
    if (v12 >= 5)
    {
      v13 = sub_100CE2294(v14, v10, 5uLL);
      v12 = *(unsigned __int16 *)(a1 + 42);
    }
  }
  v17 = v16 > 0.75;
  if (v13 > 0.5)
    v17 = 1;
  if (v12 <= 4)
    v18 = 2;
  else
    v18 = v17;
  v19 = sub_100CE2098(v10, v12 - 1);
  *(_BYTE *)(v19 + 17) = v18;
  v20 = *(unsigned __int16 *)(a1 + 42);
  v21 = v16 > 2.3333;
  if (v20 <= 4)
    v21 = 2;
  v42 = v8;
  v43 = v21;
  v22 = v9 > 0.0 && (float)((float)v8 / v9) > 0.75;
  v23 = *(_QWORD *)(a1 + 32);
  v24 = -1.0;
  if (v23 <= v20)
  {
    sub_100CE1FA0(v19, v10, *(_QWORD *)(a1 + 32));
    v26 = v27;
    v25 = *(unsigned __int16 *)(a1 + 42);
    v23 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v25 = *(unsigned __int16 *)(a1 + 42);
    v26 = -1.0;
  }
  if (v23 <= v25)
  {
    v24 = sub_100CE2294(v19, v10, v23);
    v25 = *(unsigned __int16 *)(a1 + 42);
    v23 = *(_QWORD *)(a1 + 32);
  }
  v28 = v22 | a3;
  v29 = v26 > 0.75;
  if (v24 > 0.5)
    v29 = 1;
  v30 = v25 - v23;
  v31 = 2;
  if (v25 >= v23)
    v32 = v29;
  else
    v32 = 2;
  if (v30 + 2 <= v25)
  {
    v31 = *(unsigned __int8 *)(sub_100CE2098(v10, v30 + 2) + 17);
    v23 = *(_QWORD *)(a1 + 32);
  }
  if (v16 > 2.3333 && v20 > 4)
    v34 = 0;
  else
    v34 = *(_QWORD *)(a1 + 5664) + 1;
  *(_QWORD *)(a1 + 5664) = v34;
  BYTE2(v44) = v28;
  BYTE3(v44) = v18;
  BYTE4(v44) = v43;
  BYTE5(v44) = v32;
  BYTE6(v44) = v34 >= v23;
  HIBYTE(v44) = v31;
  v41 = *(unsigned __int8 *)(a1 + 24);
  sub_10023195C(a1 + 8, 0, (uint64_t)&v44 + 2);
  v40 = *(unsigned __int8 *)(a1 + 24);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10217E9A8);
  v35 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v36 = *(_QWORD *)(a1 + 5664);
    buf = 134222080;
    v82 = a4;
    v83 = 1024;
    v84 = v41;
    v85 = 1024;
    v86 = v40;
    v87 = 1024;
    v88 = v42;
    v89 = 2048;
    v90 = v9;
    v91 = 1024;
    v92 = a3;
    v93 = 2048;
    v94 = v16;
    v95 = 2048;
    v96 = v13;
    v97 = 2048;
    v98 = v26;
    v99 = 2048;
    v100 = v24;
    v101 = 2048;
    v102 = v36;
    v103 = 1024;
    v104 = v31;
    v105 = 1024;
    v106 = v34 >= v23;
    v107 = 1024;
    v108 = v32;
    v109 = 1024;
    v110 = v43;
    v111 = 1024;
    v112 = v18;
    v113 = 1024;
    v114 = v28;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "PedestrianStop,timestamp,%0.3f,statePrev,%d,state,%d,stepCountDiff,%d,activeTimeDiff,%0.3f,isStroller,%d,stepCadenceSmallWindow,%0.3f,strollerFractionSmallWindow,%0.3f,stepCadenceLargeWindow,%0.3f,strollerFractionLargeWindow,%0.3f,fTimeSinceRunTimer,%zd,isFrontSmallWindowActiveInLargeWindow,%d,isTimeSinceRunComplete,%d,isLargeWindowActive,%d,isSmallWindowActiveRun,%d,isSmallWindowActive,%d,isCurrentEpochActive,%d", (uint8_t *)&buf, 0x84u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10217E9A8);
    v37 = *(_QWORD *)(a1 + 5664);
    v47 = 134222080;
    v48 = a4;
    v49 = 1024;
    v50 = v41;
    v51 = 1024;
    v52 = v40;
    v53 = 1024;
    v54 = v42;
    v55 = 2048;
    v56 = v9;
    v57 = 1024;
    v58 = a3;
    v59 = 2048;
    v60 = v16;
    v61 = 2048;
    v62 = v13;
    v63 = 2048;
    v64 = v26;
    v65 = 2048;
    v66 = v24;
    v67 = 2048;
    v68 = v37;
    v69 = 1024;
    v70 = v31;
    v71 = 1024;
    v72 = v34 >= v23;
    v73 = 1024;
    v74 = v32;
    v75 = 1024;
    v76 = v43;
    v77 = 1024;
    v78 = v18;
    v79 = 1024;
    v80 = v28;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "PedestrianStop,timestamp,%0.3f,statePrev,%d,state,%d,stepCountDiff,%d,activeTimeDiff,%0.3f,isStroller,%d,stepCadenceSmallWindow,%0.3f,strollerFractionSmallWindow,%0.3f,stepCadenceLargeWindow,%0.3f,strollerFractionLargeWindow,%0.3f,fTimeSinceRunTimer,%zd,isFrontSmallWindowActiveInLargeWindow,%d,isTimeSinceRunComplete,%d,isLargeWindowActive,%d,isSmallWindowActiveRun,%d,isSmallWindowActive,%d,isCurrentEpochActive,%d", COERCE_DOUBLE(&v47), 132, v40, v42, v44, (_DWORD)v45, *((double *)&v45 + 1), v46);
    v39 = (int *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLPedestrianWorkoutStopDetectorFSM::feedStepCountEntry(const CFAbsoluteTime, const uint32_t, const float, const BOOL)", "%s\n", v38);
    if (v39 != &buf)
      free(v39);
  }
}

BOOL sub_100CE2868(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 3) == 1 || *(_BYTE *)(a2 + 2) == 1;
}

BOOL sub_100CE288C(uint64_t a1, uint64_t a2)
{
  return !*(_BYTE *)(a2 + 3) || *(_BYTE *)(a2 + 1) == 0;
}

BOOL sub_100CE28AC(uint64_t a1, _BYTE *a2)
{
  return !*a2 && !a2[1] && !a2[3] && a2[4] && a2[5] == 0;
}

double sub_100CE28E4(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 8) = &unk_10217E8A0;
  *(_QWORD *)(a1 + 16) = 6;
  *(_WORD *)(a1 + 24) = 512;
  *(_QWORD *)a1 = off_10217E940;
  *(_QWORD *)(a1 + 32) = 117;
  *(_QWORD *)&result = 0xEA00000000;
  *(_QWORD *)(a1 + 40) = 0xEA00000000;
  *(_QWORD *)(a1 + 5664) = 0;
  return result;
}

BOOL sub_100CE2924(uint64_t a1, double *a2)
{
  unsigned __int8 v4;
  float v5;
  _QWORD v7[19];
  __int16 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD v13[6];
  char v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[25];
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  _BYTE v45[11];
  int v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  unint64_t v97;
  __int16 v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v4 = atomic_load((unsigned __int8 *)&qword_102307B28);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102307B28))
  {
    LODWORD(v7[0]) = 8;
    sub_100546300(qword_102307B10, v7, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_102307B10, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102307B28);
  }
  v8 = 0;
  *(_OWORD *)v7 = xmmword_101BB1ED0;
  memset(&v7[2], 0, 135);
  v9 = xmmword_101BB1ED0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13[0] = 0;
  *(_QWORD *)((char *)v13 + 5) = 0;
  *(_QWORD *)((char *)&v13[1] + 6) = 0;
  v14 = 0;
  memset(&v13[3], 0, 24);
  v15 = xmmword_101BB1ED0;
  v16 = 0;
  v17 = 0;
  v18 = 0xFFEFFFFFFFFFFFFFLL;
  v29 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  memset(v28, 0, sizeof(v28));
  v30 = 0;
  v31 = 0;
  v32 = 0xFFEFFFFFFFFFFFFFLL;
  v33 = 0;
  v34 = 0;
  v40 = 0;
  v41 = 0;
  v46 = 0;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v43 = 0u;
  v42 = 0u;
  v44 = 0;
  memset(v45, 0, sizeof(v45));
  v47 = -1.79769313e308;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v67 = 0;
  v68 = 0xFFEFFFFFFFFFFFFFLL;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0xFFEFFFFFFFFFFFFFLL;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0xFFEFFFFFFFFFFFFFLL;
  v80 = 0;
  v79 = 0;
  v81 = 0x80000000800000;
  v83 = 0;
  v82 = 0;
  v84 = xmmword_101BB1EE0;
  v85 = 0x80000000800000;
  v86 = 0u;
  v87 = 0u;
  v88 = 0;
  v89 = 0xFFEFFFFFFFFFFFFFLL;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0;
  v97 = 0xFFEFFFFFFFFFFFFFLL;
  v98 = 0;
  v99 = 0;
  v100 = 0xFFEFFFFFFFFFFFFFLL;
  v101 = 7;
  v102 = 0xFFEFFFFFFFFFFFFFLL;
  v103 = 0;
  v105 = 0;
  v104 = 0;
  v106 = 0;
  if (sub_1000D03AC(a2, qword_102307B10, (uint64_t)v7))
  {
    v5 = *((double *)&v61 + 1);
    sub_100CE231C(a1, v61, BYTE8(v57) == 1, v47, v5);
  }
  return *(_BYTE *)(a1 + 24) == 3;
}

void sub_100CE2C40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102307B28);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE2C60(uint64_t result, unsigned int a2)
{
  if (a2 <= 3)
    *(_QWORD *)(result + 32) = *(_QWORD *)&aU_1[8 * a2];
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 5664) = 0;
  return result;
}

_QWORD *sub_100CE2C84(_QWORD *result)
{
  *result = off_10217E940;
  return result;
}

void sub_100CE2C94(_QWORD *a1)
{
  *a1 = off_10217E940;
  operator delete();
}

void sub_100CE2CB4(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100CE2CE0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CE2DB0(id a1)
{
  qword_102307B30 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMagneticAccessorySilo"));
}

uint64_t sub_100CE2E64(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100CE3664;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102307B50 != -1)
    dispatch_once(&qword_102307B50, block);
  return qword_102311428;
}

void sub_100CE3004(id a1)
{
  BOOL v1;
  unsigned __int8 v2;
  unsigned __int8 v3[3];

  sub_100197040();
  if ((sub_1001B7910() & 0x10000000000000) != 0)
  {
    v2 = 0;
    sub_1018BF25C(v3, "EnableMagneticAccessoryService", &v2, 0);
    v1 = v3[1] != 0;
  }
  else
  {
    v1 = 0;
  }
  byte_102307B40 = v1;
}

void sub_100CE30CC(uint64_t **a1, int a2, void *a3, void *a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t **v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  char __dst[272];
  _BYTE buf[262];
  __int16 v21;

  if (a4 && !objc_msgSend(a4, "objectForKeyedSubscript:", off_1022FAEC8[0]()))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217EBD0);
    v14 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Missing accessory type", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217EBD0);
    *(_WORD *)__dst = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "Missing accessory type", __dst, v18);
    v13 = (char *)v15;
    sub_100512490("Generic", 1, 0, 0, "void CLMagneticAccessory::onNfcEvent(BOOL, NSString *, NSDictionary *)", "%s\n", v15);
LABEL_38:
    if (v13 != buf)
      free(v13);
    return;
  }
  v8 = objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", off_1022FAEC8[0]()), "unsignedIntValue");
  if (!objc_msgSend(a3, "UTF8String"))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217EBD0);
    v11 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid UUID", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217EBD0);
    *(_WORD *)__dst = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "Invalid UUID", __dst, v18);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 0, "void CLMagneticAccessory::onNfcEvent(BOOL, NSString *, NSDictionary *)", "%s\n", v12);
    goto LABEL_38;
  }
  sub_1015A2E04(buf, (char *)objc_msgSend(a3, "UTF8String"));
  v9 = sub_10019C4C0((uint64_t)(a1 + 16), (const void **)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v10 = a1 + 17;
  if (a2)
  {
    if (v10 == (uint64_t **)v9)
    {
      sub_1015A2E04(buf, (char *)objc_msgSend(a3, "UTF8String"));
      *(_QWORD *)__dst = buf;
      *((_BYTE *)sub_100CE6270(a1 + 16, (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 56) = v8;
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      goto LABEL_20;
    }
    return;
  }
  if (v10 != (uint64_t **)v9)
  {
    v8 = *(_BYTE *)(v9 + 56);
    sub_100675198(a1 + 16, v9);
LABEL_20:
    __dst[256] = v8;
    __dst[257] = a2;
    strncpy(__dst, (const char *)objc_msgSend(a3, "UTF8String"), 0x100uLL);
    v21 = 0;
    *(_DWORD *)buf = 1;
    memcpy(&buf[4], __dst, 0x102uLL);
    sub_100CE3FD8((uint64_t)a1);
    HIDWORD(v18) = 0;
    ((void (*)(uint64_t **, char *, _BYTE *, uint64_t, uint64_t, _QWORD))(*a1)[19])(a1, (char *)&v18 + 4, buf, 1, 0xFFFFFFFFLL, 0);
    return;
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_10217EBD0);
  v16 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Received detachment event without prior attachment event.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217EBD0);
    *(_WORD *)__dst = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "Received detachment event without prior attachment event.", __dst, v18);
    v13 = (char *)v17;
    sub_100512490("Generic", 1, 0, 0, "void CLMagneticAccessory::onNfcEvent(BOOL, NSString *, NSDictionary *)", "%s\n", v17);
    goto LABEL_38;
  }
}

void sub_100CE3620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void **v50;

  if (a50 < 0)
    operator delete(*v50);
  _Unwind_Resume(exception_object);
}

void sub_100CE3664()
{
  operator new();
}

void sub_100CE36AC()
{
  operator delete();
}

uint64_t sub_100CE36D0(uint64_t a1, void *a2)
{
  uint64_t v3;
  int *v4;
  Class v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  _QWORD handler[5];
  _QWORD v13[5];
  _WORD v14[8];
  uint8_t buf[1640];

  v3 = sub_100CE3998(a1, "CLMagneticAccessory", a2);
  *(_QWORD *)v3 = off_10217EA38;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 152) = -1;
  v4 = (int *)(v3 + 152);
  *(_BYTE *)(v3 + 156) = 0;
  v5 = (Class)off_1022FAEB8[0]();
  if (v5)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217EBD0);
    v6 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ACCConnectionInfo is available.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217EBD0);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "ACCConnectionInfo is available.", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CLMagneticAccessory::CLMagneticAccessory(id<CLIntersiloUniverse>)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    *(_QWORD *)(a1 + 120) = -[CLMagneticAccessoryAdapter initWithMagneticAccessory:]([CLMagneticAccessoryAdapter alloc], "initWithMagneticAccessory:", a1);
    *(_QWORD *)(a1 + 112) = -[objc_class sharedInstance](v5, "sharedInstance");
    v7 = *(void **)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100CE3A34;
    v13[3] = &unk_10212ECA0;
    v13[4] = a1;
    objc_msgSend(v7, "async:", v13);
  }
  v8 = objc_msgSend(*(id *)(a1 + 40), "queue");
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100CE3DA4;
  handler[3] = &unk_102145848;
  handler[4] = a1;
  notify_register_dispatch("com.apple.system.powersources.source", v4, v8, handler);
  return a1;
}

void sub_100CE3974(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100090AE4(v2, *(char **)(v1 + 136));
  sub_100CE3E94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE3998(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10217EC20;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100CE3A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

id sub_100CE3A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  _UNKNOWN **v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_100CE3AD8(v1);
  sub_100CE3CC0(v1);
  v3 = *(void **)(v1 + 112);
  v2 = *(_QWORD *)(v1 + 120);
  v5 = off_1022FAEC0[0]();
  v6 = &off_10221BF30;
  return objc_msgSend(v3, "registerDelegate:withFilter:", v2, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
}

void sub_100CE3AD8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t **v6;
  void *i;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  void **v21;
  _BYTE v22[128];

  v13 = a1;
  v1 = objc_autoreleasePoolPush();
  v20 = 0;
  v2 = sub_1001FD94C();
  if (sub_100219F40(v2, (uint64_t)CFSTR("ConnectedMagneticAccessoryNfc"), (CFTypeRef *)&v20))
  {
    v3 = v20;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v4 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v17;
      v6 = (uint64_t **)(v13 + 128);
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v5)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          v9 = objc_msgSend(objc_msgSend(v3, "objectForKeyedSubscript:", v8, v13), "unsignedIntValue");
          sub_1015A2E04(__p, (char *)objc_msgSend(v8, "UTF8String"));
          v21 = __p;
          *((_BYTE *)sub_100CE6270(v6, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v21) + 56) = v9;
          if (v15 < 0)
            operator delete(__p[0]);
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
      }
      while (v4);
    }
  }
  LOBYTE(__p[0]) = 0;
  v10 = sub_1001FD94C();
  v11 = sub_1001E48E4(v10, (uint64_t)CFSTR("ConnectedMagneticAccessoryPowerInduction"), (BOOL *)__p);
  if (LOBYTE(__p[0]))
    v12 = v11;
  else
    v12 = 0;
  if (v12 == 1)
    *(_BYTE *)(v13 + 156) = 1;
  objc_autoreleasePoolPop(v1);
}

void sub_100CE3C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100CE3CC0(uint64_t a1)
{
  char **v2;
  _QWORD *v3;
  char *v4;
  char **v5;
  BOOL v6;
  char **v7;
  char *v8[2];

  sub_100CE710C((uint64_t *)&v7, (const void ***)(a1 + 128));
  v2 = v7;
  if (v7 != v8)
  {
    do
    {
      v3 = v2 + 4;
      if (*((char *)v2 + 55) < 0)
        v3 = (_QWORD *)*v3;
      sub_100CE30CC((uint64_t **)a1, 0, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), 0);
      v4 = v2[1];
      if (v4)
      {
        do
        {
          v5 = (char **)v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char **)v2[2];
          v6 = *v5 == (char *)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v8);
  }
  sub_100CE3DAC((_BYTE *)a1);
  sub_100090AE4((uint64_t)&v7, v8[0]);
}

void sub_100CE3D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_100090AE4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_BYTE *sub_100CE3DA4(uint64_t a1)
{
  return sub_100CE3DAC(*(_BYTE **)(a1 + 32));
}

_BYTE *sub_100CE3DAC(_BYTE *a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID v6;
  BOOL v7;
  int valuePtr;

  v2 = (const __CFDictionary *)off_1022FAED0();
  if (!v2)
    return sub_100CE412C(a1, 0);
  v3 = v2;
  if (!CFDictionaryContainsKey(v2, CFSTR("FamilyCode")))
  {
LABEL_12:
    LODWORD(v5) = 0;
    goto LABEL_13;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(v3, CFSTR("FamilyCode"));
  v5 = Value;
  if (Value)
  {
    v6 = CFGetTypeID(Value);
    if (v6 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      if (CFNumberGetValue(v5, kCFNumberIntType, &valuePtr))
        v7 = (valuePtr + 536723450) >= 3;
      else
        v7 = 1;
      LODWORD(v5) = !v7;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  CFRelease(v3);
  return sub_100CE412C(a1, (int)v5);
}

uint64_t sub_100CE3E94(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217EC20;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100CE3F08(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  result = notify_is_valid_token(*(_DWORD *)(a1 + 152));
  if ((_DWORD)result)
  {
    result = notify_cancel(*(_DWORD *)(a1 + 152));
    *(_DWORD *)(a1 + 152) = -1;
  }
  *(_BYTE *)(a1 + 108) = 1;
  return result;
}

_QWORD *sub_100CE3F60@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_100CE3FD8(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  NSNumber *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v2 = objc_autoreleasePoolPush();
  v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v4 = *(_QWORD **)(a1 + 128);
  v5 = (_QWORD *)(a1 + 136);
  if (v4 != (_QWORD *)(a1 + 136))
  {
    do
    {
      v6 = v4 + 4;
      v7 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v4 + 56));
      if (*((char *)v4 + 55) < 0)
        v6 = (_QWORD *)*v6;
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v5);
  }
  v11 = sub_1001FD94C();
  sub_10023EC14(v11);
  v12 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12);
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_100CE40D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1001FD94C();
  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 156));
  sub_10023EC14(v2);
  v3 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
}

_BYTE *sub_100CE412C(_BYTE *result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;

  if (result[156] != a2)
  {
    v2 = (uint64_t)result;
    result[156] = a2;
    v21 = 0;
    v20 = 0u;
    v19 = 0u;
    v18 = 0u;
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v14 = 0u;
    v13 = 0u;
    v12 = 0u;
    v11 = 0u;
    v10 = 0u;
    v9 = 0u;
    v8 = 0u;
    v7 = 0u;
    v6 = 0u;
    v5 = 0u;
    v3 = 0;
    v4 = 2;
    LOBYTE(v5) = a2;
    (*(void (**)(_BYTE *, int *, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 152))(result, &v3, &v4, 1, 0xFFFFFFFFLL, 0);
    return (_BYTE *)sub_100CE40D8(v2);
  }
  return result;
}

void sub_100CE420C()
{
  operator new();
}

void sub_100CE42B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100CE42F4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10217ED70;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

uint64_t sub_100CE43C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217EA38;
  sub_100090AE4(a1 + 128, *(char **)(a1 + 136));
  return sub_100CE3E94(a1);
}

void sub_100CE43FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217EA38;
  sub_100090AE4(a1 + 128, *(char **)(a1 + 136));
  sub_100CE3E94(a1);
  operator delete();
}

void sub_100CE4444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217EB90);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10217EB90);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::removeClient(int) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100CE46B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FAED8);
}

uint64_t sub_100CE46CC(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[16];
  uint64_t v46;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100CE7368();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FAED9;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217EB90);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217EB90);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100CE4B54(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217EB90);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217EB90);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100CE4DD4(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217EB90);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217EB90);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100CE515C(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(const void **)(v7 + 64);
  if (!v11)
    return 0;
  memcpy(__dst, v11, 0x108uLL);
  return 1;
}

uint64_t sub_100CE51CC(uint64_t a1, int *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = operator new(0x120uLL);
  v6[2] = 0;
  *v6 = off_10217ED00;
  v6[1] = 0;
  memcpy(v6 + 3, a3, 0x108uLL);
  *(_QWORD *)&v13 = v6 + 3;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_100CE52B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE52C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[16];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100CE5358(uint64_t a1, signed __int32 *a2, const void *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217EB90);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x120uLL);
      v24[2] = 0;
      *v24 = off_10217ED00;
      v24[1] = 0;
      memcpy(v24 + 3, a3, 0x108uLL);
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100CE6308();
    os_activity_scope_leave(&state);
  }
}

void sub_100CE599C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100CE59E8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217EB90);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217EB90);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::listClients() [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217EB90);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217EB90);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::listClients() [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217EB90);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217EB90);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::listClients() [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100CE5F94(uint64_t a1)
{
  sub_100CE7308(a1);
  operator delete();
}

id sub_100CE5FB8(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100CE68C0(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100CE6004(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_100CE6030()
{
  Class result;

  if (qword_102307B60 != -1)
    dispatch_once(&qword_102307B60, &stru_10217EBB0);
  result = objc_getClass("ACCConnectionInfo");
  qword_102307B58 = (uint64_t)result;
  off_1022FAEB8[0] = sub_100CE608C;
  return result;
}

uint64_t sub_100CE608C()
{
  return qword_102307B58;
}

void sub_100CE6098(id a1)
{
  qword_102307B68 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreAccessories.framework/CoreAccessories", 2);
}

void sub_100CE60C0(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

uint64_t sub_100CE60EC()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102307B60 != -1)
    dispatch_once(&qword_102307B60, &stru_10217EBB0);
  v0 = (uint64_t *)dlsym((void *)qword_102307B68, "ACCConnectionInfoFilterAllowConnectionType");
  if (v0)
  {
    result = *v0;
    qword_102307B70 = result;
  }
  else
  {
    result = qword_102307B70;
  }
  off_1022FAEC0[0] = sub_100CE6164;
  return result;
}

uint64_t sub_100CE6164()
{
  return qword_102307B70;
}

uint64_t sub_100CE6170()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102307B60 != -1)
    dispatch_once(&qword_102307B60, &stru_10217EBB0);
  v0 = (uint64_t *)dlsym((void *)qword_102307B68, "kACCProperties_Endpoint_NFC_Type");
  if (v0)
  {
    result = *v0;
    qword_102307B78 = result;
  }
  else
  {
    result = qword_102307B78;
  }
  off_1022FAEC8[0] = sub_100CE61E8;
  return result;
}

uint64_t sub_100CE61E8()
{
  return qword_102307B78;
}

uint64_t sub_100CE61F4()
{
  if (qword_102307B80 != -1)
    dispatch_once(&qword_102307B80, &stru_10217EBF0);
  off_1022FAED0 = (uint64_t (*)())dlsym((void *)qword_102307B88, "IOPSCopyExternalPowerAdapterDetails");
  return off_1022FAED0();
}

void sub_100CE6248(id a1)
{
  qword_102307B88 = (uint64_t)dlopen("/System/Library/Frameworks/IOKit.framework/IOKit", 2);
}

_OWORD *sub_100CE6270(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_10019C424((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_BYTE *)v7 + 56) = 0;
    sub_1000145B0(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_100CE6308()
{
  operator new();
}

void sub_100CE63A0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100CE68C0(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100CE6774(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217EB90);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217EB90);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100CE6774(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100CE68C0(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_100CE6850(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217ED00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CE6864(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217ED00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100CE68A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100CE68C0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100CE6938(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100CE6CC0(a1);
  else
    return 0;
}

id sub_100CE6938(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100CE706C((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217ED40);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C212E6 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217ED40);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217ED40);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C212E6 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217ED40);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMagneticAccessory_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100CE6CC0(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217ED40);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C212E6 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217ED40);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217ED40);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C212E6 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217ED40);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMagneticAccessory_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100CE706C(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221BF48))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)264)
      sub_101925930();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100CE70E0(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t *sub_100CE710C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100CE7160(a1, *a2, a2 + 1);
  return a1;
}

void sub_100CE7148(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100090AE4(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100CE7160(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100CE71E4(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100CE71E4(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)sub_1006754A0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100CE7264((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_100CE7264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  v6[56] = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100CE72EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE7308(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10217ED70;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100CE7368()
{
  operator new();
}

uint64_t sub_100CE7400(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100CE7488(uint64_t a1)
{
  CLWifiAssociatedApCentroidMO *v2;

  v2 = -[CLWifiAssociatedApCentroidMO initWithContext:]([CLWifiAssociatedApCentroidMO alloc], "initWithContext:", objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  -[CLWifiAssociatedApCentroidMO setMac:](v2, "setMac:", objc_msgSend(objc_alloc((Class)NSString), "initWithString:", objc_msgSend(*(id *)(a1 + 40), "mac")));
  objc_msgSend(*(id *)(a1 + 40), "latitude");
  -[CLWifiAssociatedApCentroidMO setLatitude:](v2, "setLatitude:");
  objc_msgSend(*(id *)(a1 + 40), "longitude");
  -[CLWifiAssociatedApCentroidMO setLongitude:](v2, "setLongitude:");
  objc_msgSend(*(id *)(a1 + 40), "altitude");
  -[CLWifiAssociatedApCentroidMO setAltitude:](v2, "setAltitude:");
  objc_msgSend(*(id *)(a1 + 40), "horizontalAccuracy");
  -[CLWifiAssociatedApCentroidMO setHorizontalAccuracy:](v2, "setHorizontalAccuracy:");
  objc_msgSend(*(id *)(a1 + 40), "verticalAccuracy");
  -[CLWifiAssociatedApCentroidMO setVerticalAccuracy:](v2, "setVerticalAccuracy:");
  -[CLWifiAssociatedApCentroidMO setReach:](v2, "setReach:", objc_msgSend(*(id *)(a1 + 40), "reach"));
  -[CLWifiAssociatedApCentroidMO setLoiType:](v2, "setLoiType:", objc_msgSend(objc_alloc((Class)NSString), "initWithString:", objc_msgSend(*(id *)(a1 + 40), "loiType")));
  objc_msgSend(*(id *)(a1 + 40), "stationaryTimeInSeconds");
  -[CLWifiAssociatedApCentroidMO setStationaryTimeInSeconds:](v2, "setStationaryTimeInSeconds:");
  objc_msgSend(*(id *)(a1 + 40), "lastUpdated");
  return -[CLWifiAssociatedApCentroidMO setLastUpdated:](v2, "setLastUpdated:");
}

uint64_t sub_100CE7A30(uint64_t a1, uint64_t a2)
{
  int *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  _BYTE v48[128];
  _BYTE v49[128];
  _BYTE v50[128];

  sub_1001E4B84(a2, "maxCacheCount", (_DWORD *)(a1 + 8));
  sub_1001E4B84(a2, "maxHarvest", (_DWORD *)(a1 + 12));
  sub_1001FD98C(a2, "minGapTime", (void *)(a1 + 16));
  sub_1001FD98C(a2, "maxGapTime", (void *)(a1 + 24));
  sub_1001FD98C(a2, "minWifiTimespan", (void *)(a1 + 32));
  sub_1001E4B84(a2, "maxEvents", (_DWORD *)(a1 + 12));
  sub_1001FD98C(a2, "targetCompassUpdateInterval", (void *)(a1 + 48));
  sub_1001FD98C(a2, "traceDuration", (void *)(a1 + 40));
  sub_1001FD98C(a2, "traceFuzzInterval", (void *)(a1 + 56));
  sub_1001E4874(a2, "traceOnDiskHarvestingOnly", (BOOL *)(a1 + 64));
  sub_1001FD98C(a2, "traceUploadInterval", (void *)(a1 + 72));
  v4 = sub_100FC30E4();
  if ((int *)(a1 + 104) != v4 + 28)
  {
    *(_DWORD *)(a1 + 136) = v4[36];
    sub_100CEAA48((_QWORD *)(a1 + 104), *((_QWORD **)v4 + 16), 0);
  }
  v47 = 0;
  if (sub_100527258(a2, CFSTR("HarvestTraceVisionBlockingLoiTypes"), (CFTypeRef *)&v47))
  {
    sub_10001BB9C((_QWORD *)(a1 + 104));
    v5 = v47;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v6 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
    if (v6)
    {
      v8 = v6;
      v9 = *(_QWORD *)v44;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v44 != v9)
            objc_enumerationMutation(v5);
          v11 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v10);
          v12 = objc_opt_class(NSNumber, v7);
          if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0)
          {
            v42 = objc_msgSend(v11, "integerValue");
            sub_1008A2874(a1 + 104, (unint64_t *)&v42, &v42);
          }
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
      }
      while (v8);
    }
  }
  v13 = sub_100FC30E4();
  if ((int *)(a1 + 144) != v13 + 38)
  {
    *(_DWORD *)(a1 + 176) = v13[46];
    sub_100CEAA48((_QWORD *)(a1 + 144), *((_QWORD **)v13 + 21), 0);
  }
  v42 = 0;
  if (sub_100527258(a2, CFSTR("HarvestTraceNonVisionBlockingLoiTypes"), (CFTypeRef *)&v42))
  {
    sub_10001BB9C((_QWORD *)(a1 + 144));
    v14 = v42;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v15 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v38, v49, 16);
    if (v15)
    {
      v17 = v15;
      v18 = *(_QWORD *)v39;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v39 != v18)
            objc_enumerationMutation(v14);
          v20 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v19);
          v21 = objc_opt_class(NSNumber, v16);
          if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
          {
            v37 = objc_msgSend(v20, "integerValue");
            sub_1008A2874(a1 + 144, (unint64_t *)&v37, &v37);
          }
          v19 = (char *)v19 + 1;
        }
        while (v17 != v19);
        v17 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v49, 16);
      }
      while (v17);
    }
  }
  v22 = sub_100FC30E4();
  if ((int *)(a1 + 184) != v22 + 48)
  {
    *(_DWORD *)(a1 + 216) = v22[56];
    sub_100CEAA48((_QWORD *)(a1 + 184), *((_QWORD **)v22 + 26), 0);
  }
  v37 = 0;
  if (sub_100527258(a2, CFSTR("HarvestTraceTriggeringLoiTypes"), (CFTypeRef *)&v37))
  {
    sub_10001BB9C((_QWORD *)(a1 + 184));
    v23 = v37;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v24 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v33, v48, 16);
    if (v24)
    {
      v26 = v24;
      v27 = *(_QWORD *)v34;
      do
      {
        v28 = 0;
        do
        {
          if (*(_QWORD *)v34 != v27)
            objc_enumerationMutation(v23);
          v29 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v28);
          v30 = objc_opt_class(NSNumber, v25);
          if ((objc_opt_isKindOfClass(v29, v30) & 1) != 0)
          {
            v32 = objc_msgSend(v29, "integerValue");
            sub_1008A2874(a1 + 184, (unint64_t *)&v32, &v32);
          }
          v28 = (char *)v28 + 1;
        }
        while (v26 != v28);
        v26 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v33, v48, 16);
      }
      while (v26);
    }
  }
  *(_DWORD *)(a1 + 80) = sub_100FC30E4()[1];
  sub_1001E4B84(a2, "HarvestTraceMaxVisionEnabled", (_DWORD *)(a1 + 80));
  *(_DWORD *)(a1 + 88) = *sub_100FC30E4();
  sub_1001E4B84(a2, "HarvestTraceMaxNumSubmissionsScored", (_DWORD *)(a1 + 88));
  sub_1001E4874(a2, "HarvestImmediateNonVisionTraceHarvestAllowed", (BOOL *)(a1 + 84));
  *(_QWORD *)(a1 + 96) = *((_QWORD *)sub_100FC30E4() + 11);
  sub_1001FD98C(a2, "HarvestTraceVisionSecondsBetweenVLDebugInfo", (void *)(a1 + 96));
  *(_BYTE *)(a1 + 224) = *((_BYTE *)sub_100FC30E4() + 232);
  sub_1001E4874(a2, "traceAllowInertialOdometryNotifications", (BOOL *)(a1 + 224));
  *(_BYTE *)(a1 + 225) = *((_BYTE *)sub_100FC30E4() + 233);
  return sub_1001E4874(a2, "traceAllowOutdoorServiceNotifications", (BOOL *)(a1 + 225));
}

uint64_t sub_100CE7F9C(uint64_t a1, uint64_t *a2)
{
  BOOL *v3;
  uint64_t result;

  v3 = (BOOL *)(a1 + 64);
  result = sub_1001E4874(*a2, "HarvestTraceOnDiskOnly", (BOOL *)(a1 + 64));
  if ((result & 1) == 0)
    return sub_1001E4874(*a2, "RealTimeHarvesting", v3);
  return result;
}

uint64_t sub_100CE7FFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD v56[2];
  uint64_t v57;
  _QWORD v58[10];
  char v59;
  uint64_t v60;
  _QWORD v61[3];

  sub_100263E50((uint64_t)v56);
  v4 = sub_100263F7C(&v57, (uint64_t)"Settings(", 9);
  v5 = sub_100263F7C(v4, (uint64_t)"fMaxCacheCount,", 15);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *(unsigned int *)(a1 + 8));
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = sub_100263F7C(v7, (uint64_t)"fMaxEvents,", 11);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *(unsigned int *)(a1 + 12));
  v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
  v11 = sub_100263F7C(v10, (uint64_t)"fMinGapTime,", 12);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *(double *)(a1 + 16));
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"fMaxGapTime,", 12);
  v15 = (_QWORD *)std::ostream::operator<<(v14, *(double *)(a1 + 24));
  v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
  v17 = sub_100263F7C(v16, (uint64_t)"fMinWifiTimespan,", 17);
  v18 = (_QWORD *)std::ostream::operator<<(v17, *(double *)(a1 + 32));
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = sub_100263F7C(v19, (uint64_t)"fTraceDuration,", 15);
  v21 = (_QWORD *)std::ostream::operator<<(v20, *(double *)(a1 + 40));
  v22 = sub_100263F7C(v21, (uint64_t)", ", 2);
  v23 = sub_100263F7C(v22, (uint64_t)"fTargetCompassUpdateInterval,", 29);
  v24 = (_QWORD *)std::ostream::operator<<(v23, *(double *)(a1 + 48));
  v25 = sub_100263F7C(v24, (uint64_t)", ", 2);
  v26 = sub_100263F7C(v25, (uint64_t)"fTraceFuzzInterval,", 19);
  v27 = (_QWORD *)std::ostream::operator<<(v26, *(double *)(a1 + 56));
  v28 = sub_100263F7C(v27, (uint64_t)", ", 2);
  v29 = sub_100263F7C(v28, (uint64_t)"fTraceOnDiskHarvestingOnly,", 27);
  v30 = (_QWORD *)std::ostream::operator<<(v29, *(unsigned __int8 *)(a1 + 64));
  v31 = sub_100263F7C(v30, (uint64_t)", ", 2);
  v32 = sub_100263F7C(v31, (uint64_t)"fTraceUploadInterval,", 21);
  v33 = (_QWORD *)std::ostream::operator<<(v32, *(double *)(a1 + 72));
  v34 = sub_100263F7C(v33, (uint64_t)", ", 2);
  v35 = sub_100263F7C(v34, (uint64_t)"fMaxVisionEnabledTraces,", 24);
  v36 = (_QWORD *)std::ostream::operator<<(v35, *(unsigned int *)(a1 + 80));
  v37 = sub_100263F7C(v36, (uint64_t)", ", 2);
  v38 = sub_100263F7C(v37, (uint64_t)"fMaxNumSubmissionsScoredTraces,", 31);
  v39 = (_QWORD *)std::ostream::operator<<(v38, *(unsigned int *)(a1 + 88));
  v40 = sub_100263F7C(v39, (uint64_t)", ", 2);
  v41 = sub_100263F7C(v40, (uint64_t)"fHarvestImmediateNonVisionTraceHarvestAllowed,", 46);
  v42 = (_QWORD *)std::ostream::operator<<(v41, *(unsigned __int8 *)(a1 + 84));
  v43 = sub_100263F7C(v42, (uint64_t)", ", 2);
  v44 = sub_100263F7C(v43, (uint64_t)"fVisionSecondsBetweenVLDebugInfo,", 33);
  v45 = (_QWORD *)std::ostream::operator<<(v44, *(double *)(a1 + 96));
  v46 = sub_100263F7C(v45, (uint64_t)", ", 2);
  v47 = sub_100263F7C(v46, (uint64_t)"fAllowInertialOdometryNotifications,", 36);
  v48 = (_QWORD *)std::ostream::operator<<(v47, *(unsigned __int8 *)(a1 + 224));
  v49 = sub_100263F7C(v48, (uint64_t)", ", 2);
  v50 = sub_100263F7C(v49, (uint64_t)"fAllowOutdoorServiceNotifications,", 34);
  v51 = (_QWORD *)std::ostream::operator<<(v50, *(unsigned __int8 *)(a1 + 225));
  v52 = sub_100263F7C(v51, (uint64_t)",", 1);
  sub_100263F7C(v52, (uint64_t)"fVisionTraceBlockLoiTypes,[", 27);
  sub_100CEAF64(*(_QWORD ***)(a1 + 120), 0, &v57, (uint64_t)",", v61);
  v53 = sub_100263F7C(&v57, (uint64_t)"], ", 3);
  sub_100263F7C(v53, (uint64_t)"fNonVisionTraceBlockLoiTypes,[", 30);
  sub_100CEAF64(*(_QWORD ***)(a1 + 160), 0, &v57, (uint64_t)",", v61);
  sub_100263F7C(&v57, (uint64_t)"])", 2);
  std::stringbuf::str(a2, v58);
  *(_QWORD *)((char *)v56
  v57 = v54;
  if (v59 < 0)
    operator delete((void *)v58[8]);
  std::streambuf::~streambuf(v58);
  return std::ios::~ios(&v60);
}

void sub_100CE83C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1018B38B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE83DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67[3];
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  _OWORD v74[2];

  v10 = (std::__shared_weak_count *)a4[1];
  v72 = *a4;
  v73 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a5[1];
  v70 = *a5;
  v71 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  v68 = *a6;
  v69 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v67[0] = xmmword_102307B90;
  v67[1] = unk_102307BA0;
  v67[2] = xmmword_102307BB0;
  sub_100D04860(a1, a2, 10, &v72, &v70, &v68, a8, a7, v67);
  v19 = v69;
  if (v69)
  {
    v20 = (unint64_t *)&v69->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v71;
  if (v71)
  {
    v23 = (unint64_t *)&v71->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v73;
  if (v73)
  {
    v26 = (unint64_t *)&v73->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)a1 = off_10217ED98;
  *(_QWORD *)(a1 + 352) = off_10217EEB8;
  *(_QWORD *)(a1 + 360) = *a3;
  v28 = a3[1];
  *(_QWORD *)(a1 + 368) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *(_QWORD *)(a1 + 376) = off_10217EF70;
  *(_QWORD *)(a1 + 384) = 0x61A8000003E8;
  *(_QWORD *)(a1 + 392) = 0x40D5180000000000;
  *(_OWORD *)(a1 + 400) = xmmword_101C21320;
  *(_OWORD *)(a1 + 416) = xmmword_101C21330;
  *(_QWORD *)(a1 + 432) = 0x40F5180000000000;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0x40F5180000000000;
  *(_DWORD *)(a1 + 456) = 1;
  *(_BYTE *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 1;
  *(_QWORD *)(a1 + 472) = 0x4022000000000000;
  *(_QWORD *)&v74[0] = 0;
  sub_100CEA9A8(a1 + 480, (unint64_t *)v74, 1);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 552) = 1065353216;
  v74[0] = xmmword_101C213A8;
  v74[1] = unk_101C213B8;
  sub_100CEA9A8(a1 + 560, (unint64_t *)v74, 4);
  *(_WORD *)(a1 + 600) = 257;
  v31 = *(std::__shared_weak_count **)(a1 + 64);
  v65 = *(_QWORD *)(a1 + 56);
  v66 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(std::__shared_weak_count **)(a1 + 368);
  v63 = *(_QWORD *)(a1 + 360);
  v64 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = sub_100201404(a1);
  sub_100FEA240(a1 + 608, a1 + 376, &v65, &v63, v37);
  v38 = v64;
  if (v64)
  {
    v39 = (unint64_t *)&v64->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v66;
  if (v66)
  {
    v42 = (unint64_t *)&v66->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *(_BYTE *)(a1 + 904) = 0;
  *(_QWORD *)&v74[0] = *(_QWORD *)(a1 + 416);
  sub_100CEB02C((double *)v74, (_QWORD *)(a1 + 920));
  v44 = *(_QWORD *)(a1 + 72);
  v45 = (std::__shared_weak_count *)a3[1];
  v61 = *a3;
  v62 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  sub_100EE44F4(a1 + 936, a1 + 376, v44, &v61, a1 + 920);
  v48 = v62;
  if (v62)
  {
    v49 = (unint64_t *)&v62->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *(_QWORD *)(a1 + 72);
  v52 = (std::__shared_weak_count *)a3[1];
  v59 = *a3;
  v60 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  sub_100DC583C(a1 + 1104, a1 + 376, v51, &v59, a1 + 920);
  v55 = v60;
  if (v60)
  {
    v56 = (unint64_t *)&v60->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  sub_100D252D8((_QWORD *)(a1 + 1336), a1 + 376, *(_QWORD *)(a1 + 72));
  sub_1015A2E04((_QWORD *)(a1 + 1384), off_1022FAEE0[0]);
  *(_DWORD *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1416) = 1;
  *(_WORD *)(a1 + 1424) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 32))(*(_QWORD *)(a1 + 360), a1 + 376);
  sub_100DC5DA0(a1 + 1104);
  sub_100FEA27C(a1 + 608);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 16))(*(_QWORD *)(a1 + 360), a1 + 352);
  *(double *)(a1 + 912) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
                        + *(double *)(a1 + 448);
  *(_QWORD *)(a1 + 1376) = 0;
  return a1;
}

void sub_100CE8908(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100D25328(v8);
  sub_100DC58A0(v7);
  sub_100EE4558(v6);
  sub_100261F44(v5);
  sub_100FEA278(v4);
  sub_100CE89F4(v3);
  sub_100261F44(v2);
  sub_100429668(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100CE89F4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10217EF70;
  v2 = (uint64_t)(a1 + 13);
  sub_100067AC4((uint64_t)(a1 + 23));
  sub_100067AC4((uint64_t)(a1 + 18));
  sub_100067AC4(v2);
  return a1;
}

uint64_t sub_100CE8A40(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217ED98;
  *(_QWORD *)(a1 + 352) = off_10217EEB8;
  if (*(_BYTE *)(a1 + 1416))
    sub_1001FF18C(a1 + 1384);
  sub_100D25328(a1 + 1336);
  sub_100DC58A0(a1 + 1104);
  sub_100EE4558(a1 + 936);
  sub_100261F44(a1 + 920);
  sub_100FEA278(a1 + 608);
  *(_QWORD *)(a1 + 376) = off_10217EF70;
  sub_100067AC4(a1 + 560);
  sub_100067AC4(a1 + 520);
  sub_100067AC4(a1 + 480);
  sub_100261F44(a1 + 360);
  return sub_100429668(a1);
}

uint64_t sub_100CE8ADC(uint64_t a1)
{
  return sub_100CE8A40(a1 - 352);
}

void sub_100CE8AE4(uint64_t a1)
{
  sub_100CE8A40(a1);
  operator delete();
}

void sub_100CE8B08(uint64_t a1)
{
  sub_100CE8A40(a1 - 352);
  operator delete();
}

uint64_t sub_100CE8B30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 24))(*(_QWORD *)(a1 + 360));
}

uint64_t sub_100CE8B40(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BOOL4 v5;
  NSObject *v6;
  unsigned int v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[2];
  uint64_t buf;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  void **v24;
  __int16 v25;
  void **v26;
  __int16 v27;
  _BOOL4 v28;

  sub_100119F3C(v17);
  v4 = unk_102307BA0;
  *(_OWORD *)(a1 + 280) = xmmword_102307B90;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = unk_102307BA9;
  if (sub_100006BB4(a2, "Trace", v17))
  {
    sub_1011E7A6C(a1 + 280, (uint64_t)v17);
    sub_100119F3C(&buf);
    v5 = sub_100006BB4((uint64_t)v17, "Settings", &buf);
    sub_100CE7A30(a1 + 376, (uint64_t)&buf);
    sub_10011A5A8(&buf);
  }
  else
  {
    v5 = 0;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217F080);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_100201404(a1);
    v7 = sub_100201404(a1);
    sub_1011E7898((double *)(a1 + 280), v15);
    v8 = v16;
    v9 = (void **)v15[0];
    sub_100CE7FFC(a1 + 376, __p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    LODWORD(buf) = 68290051;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    HIDWORD(buf) = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2050;
    v22 = v7;
    v23 = 2081;
    v24 = v10;
    v25 = 2081;
    v26 = v11;
    v27 = 1025;
    v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s, \"settings\":%{private, location:escape_only}s, \"override_settings\":%{private}d}", (uint8_t *)&buf, 0x36u);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_10011A5A8(v17);
}

void sub_100CE8D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a17 < 0)
    operator delete(__p);
  sub_10011A5A8(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE8DB4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_102307BC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_102307BC8))
  {
    byte_102307BC0 = ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0;
    __cxa_guard_release(&qword_102307BC8);
  }
  return byte_102307BC0;
}

void sub_100CE8E30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102307BC8);
  _Unwind_Resume(a1);
}

void sub_100CE8E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 440))
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100CE8F34;
    v8[3] = &unk_10217EF18;
    v8[4] = &v9;
    v8[5] = a1;
    v12 = a1 + 936;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 936) + 72))(a1 + 936, v8, a3, a4, a5, a6, a7);
    v10[3] = a1 + 1104;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 1104) + 72))(a1 + 1104, v8);
    sub_100CE9214(a1);
    *(double *)(a1 + 912) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
                          + *(double *)(a1 + 448);
    _Block_object_dispose(&v9, 8);
  }
}

void sub_100CE8F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100CE8F34(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  CLHUploadRequest *v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[4];
  uint8_t buf[8];
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_alloc_init((Class)CLPTraceCollectionRequest);
  objc_msgSend(v5, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  objc_msgSend(v5, "setType:", (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v6 + 80))(v6, a2));
  objc_msgSend(a2, "overwritePrimaryObject:", v5);

  sub_1001E4804(buf);
  LOBYTE(v16[0]) = 0;
  v7 = sub_1001E4874(*(uint64_t *)buf, "BypassTraceHarvestUpload", (BOOL *)v16);
  if (LOBYTE(v16[0]))
    v8 = v7;
  else
    v8 = 0;
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217F080);
  v12 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Force allow trace harvest, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v16[0] = 67240192;
    v16[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Force allow trace harvest, %{public}d", v16, 8);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterTrace::derivedUploadArchivedHarvest()_block_invoke", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if ((v8 & 1) == 0)
  {
    v13 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", a2);
    -[CLHUploadRequest setEndpoint:](v13, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v4 + 80), "endpointSelector"), "traceEndpoint"));
    objc_msgSend(*(id *)(v4 + 80), "submitRequest:", v13);

  }
}

void sub_100CE91F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100CE9214(uint64_t a1)
{
  sub_100EE4A3C(a1 + 936);
  sub_100DC5DA0(a1 + 1104);
  sub_100D25410(a1 + 1336);
  *(_QWORD *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  return sub_100204E3C((_QWORD *)(a1 + 608));
}

uint64_t sub_100CE9254(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  *(_BYTE *)(a1 + 904) = 0;
  sub_1001FEABC(a1);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217F080);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1376) + 104))(*(_QWORD *)(a1 + 1376));
    *(_DWORD *)buf = 138412290;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ completing trace", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v7 = qword_1022A0208;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1376) + 104))(*(_QWORD *)(a1 + 1376));
    v10 = 138412290;
    v11 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "%@ completing trace", &v10, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterTrace::completeTrace(BOOL)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1376) + 24))(*(_QWORD *)(a1 + 1376), a2);
  *(_QWORD *)(a1 + 1376) = 0;
  return result;
}

uint64_t sub_100CE9444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 1);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 7);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7, 3);
  return 1;
}

id sub_100CE94CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100204E3C((_QWORD *)(a1 + 608));
  *(_BYTE *)(a1 + 904) = 0;
  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3, 1);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5, 7);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, v7, 3);
  sub_100CE9574(a1 + 1384, (const std::string::value_type **)off_1022FAEE0);
  return sub_100CE9214(a1);
}

uint64_t sub_100CE9574(uint64_t a1, const std::string::value_type **a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    sub_100CEB130(a1, (std::string *)a1, a2);
  }
  else
  {
    sub_1015A2E04((_QWORD *)a1, (char *)*a2);
    *(_DWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

BOOL sub_100CE95C8(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 440)
      && (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) >= *(double *)(a1 + 912)
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) != 0;
}

uint64_t sub_100CE9628(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v7;

  v7 = a3;
  result = sub_100203518(a1);
  if ((result & 1) == 0)
    return sub_100FEA5A4(a1 + 608, (uint64_t)&v7, a4, 1);
  return result;
}

uint64_t sub_100CE9670(uint64_t result, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v9 = a3;
  if (a3 == 3)
  {
    v4 = result;
    if (*(_BYTE *)(result + 88))
    {
      sub_100203518(result);
      if ((sub_1002035A8(v4) & 1) == 0 && *a4 == 4)
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217F080);
        v6 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          sub_100201404(v4);
          *(_DWORD *)buf = 68289282;
          v11 = 0;
          v12 = 2082;
          v13 = "";
          v14 = 2050;
          v15 = sub_100201404(v4);
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Starting trace for CLMotionActivity::kTypeWalking\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
        }
        if (*(_BYTE *)(v4 + 440))
        {
          sub_1001FEC34(v4, v4 + 1336);
        }
        else
        {
          if (sub_1001FEC34(v4, v4 + 936))
          {
            v7 = v4;
            v8 = 4;
          }
          else
          {
            v7 = v4;
            v8 = 5;
          }
          sub_1001FE960(v7, v8);
        }
      }
      result = sub_1002035A8(v4);
      if ((_DWORD)result)
        return sub_100FEA9C0(v4 + 608, &v9, (uint64_t)a4);
    }
  }
  return result;
}

uint64_t sub_100CE9804(uint64_t a1)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56))
    && *(_BYTE *)(a1 + 88)
    && (sub_1002035A8(a1) & 1) != 0)
  {
    return 0;
  }
  sub_100204E3C((_QWORD *)(a1 + 608));
  return 1;
}

uint64_t sub_100CE985C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100203518(a1);
  if ((result & 1) == 0)
    return sub_100066C34(a1 + 608, a2);
  return result;
}

void sub_100CE9898(uint64_t a1, uint64_t a2)
{
  if ((sub_100203518(a1) & 1) == 0)
    sub_100203774(a1 + 608, a2);
}

void sub_100CE98D4(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if ((sub_100203518(a1) & 1) == 0)
    sub_100FEAD1C(a1 + 608, a3, a4);
}

void sub_100CE9924(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if ((sub_100203518(a1 - 352) & 1) == 0)
    sub_100FEAD1C(a1 + 256, a3, a4);
}

uint64_t sub_100CE9978(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100203518(a1);
  if ((result & 1) == 0)
    return sub_1002061B0(a1 + 608, a2);
  return result;
}

void sub_100CE99B4(uint64_t a1, void *a2)
{
  uint64_t v4;
  double v5;

  if (*(_BYTE *)(a1 + 88))
  {
    sub_100203518(a1);
    if ((sub_1002035A8(a1) & 1) != 0)
    {
      if (*(_QWORD *)(a1 + 1376) == a1 + 936)
      {
        v4 = *(_QWORD *)(a1 + 920);
        v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
        sub_10110A330(v4, 2, 2, v5);
      }
    }
    else
    {
      sub_1001FEC34(a1, a1 + 1104);
    }
    if (sub_1002035A8(a1))
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1376) + 88))(*(_QWORD *)(a1 + 1376)))
        sub_100FEB130(a1 + 608, a2);
    }
  }
}

void sub_100CE9A70(uint64_t a1, void *a2)
{
  sub_100CE99B4(a1 - 352, a2);
}

void sub_100CE9A78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  double v7;
  NSObject *v8;
  int v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;

  if (*(_BYTE *)(a1 + 88))
  {
    sub_100203518(a1);
    if ((sub_1002035A8(a1) & 1) != 0)
    {
      if (*(_QWORD *)(a1 + 1376) == a1 + 936)
      {
        v6 = *(_QWORD *)(a1 + 920);
        v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
        sub_10110A330(v6, 2, 2, v7);
      }
    }
    else
    {
      sub_1001FEC34(a1, a1 + 1104);
    }
    if (sub_1002035A8(a1)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1376) + 88))(*(_QWORD *)(a1 + 1376)))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217F080);
      v8 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v10[0] = 68289283;
        v10[1] = 0;
        v11 = 2082;
        v12 = "";
        v13 = 2081;
        v14 = objc_msgSend(a3, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Maps488 check: client key\", \"key\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x1Cu);
      }
      if (*(_BYTE *)(a1 + 1424) && *(_BYTE *)(a1 + 1425))
        v9 = objc_msgSend(a3, "isEqualToString:", CFSTR("com.apple.Maps"));
      else
        v9 = 0;
      sub_100FEB300(a1 + 608, a2, v9);
    }
  }
}

void sub_100CE9C2C(uint64_t a1, void *a2, void *a3)
{
  sub_100CE9A78(a1 - 352, a2, a3);
}

void sub_100CE9C34(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 1424) && *(_BYTE *)(a1 + 1425))
  {
    v4 = *(_QWORD *)(a1 + 1376);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4))
    {
      v5 = *(_QWORD *)(a1 + 920);
      v6 = objc_msgSend((id)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1376) + 40))(*(_QWORD *)(a1 + 1376)), "secondaryDataSize");
      sub_10110A1F4(v5, 2, 2, 3, v6);
      sub_100CE9254(a1, 1);
    }
    sub_100DC5DA0(a1 + 1104);
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217F080);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289283;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1025;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update server maps488 enabled\", \"enabled\":%{private}d}", (uint8_t *)v8, 0x18u);
  }
  *(_BYTE *)(a1 + 1424) = a2;
}

void sub_100CE9D98(uint64_t a1, int a2)
{
  sub_100CE9C34(a1 - 352, a2);
}

void sub_100CE9DA0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 1424) && *(_BYTE *)(a1 + 1425))
  {
    v4 = *(_QWORD *)(a1 + 1376);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4))
    {
      v5 = *(_QWORD *)(a1 + 920);
      v6 = objc_msgSend((id)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1376) + 40))(*(_QWORD *)(a1 + 1376)), "secondaryDataSize");
      sub_10110A1F4(v5, 2, 2, 3, v6);
      sub_100CE9254(a1, 1);
    }
    sub_100DC5DA0(a1 + 1104);
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217F080);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289283;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1025;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update user maps488 enabled\", \"enabled\":%{private}d}", (uint8_t *)v8, 0x18u);
  }
  *(_BYTE *)(a1 + 1425) = a2;
}

void sub_100CE9F04(uint64_t a1, int a2)
{
  sub_100CE9DA0(a1 - 352, a2);
}

void sub_100CE9F0C(uint64_t a1, void *a2, id a3)
{
  uint64_t v5;

  if (a3)
  {
    a3 = objc_msgSend(a3, "type");
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  sub_100CE9F50(a1, a2, (uint64_t)a3, v5);
}

void sub_100CE9F50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE v30[40];
  _BYTE v31[40];
  _BYTE v32[40];
  _BYTE v33[40];
  uint64_t v34;
  uint64_t v35;
  uint8_t buf[8];
  __int16 v37;
  const char *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  void *v42;

  v34 = a3;
  v35 = a4;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217F080);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    sub_100201404(a1);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v37 = 2082;
    v38 = "";
    v39 = 2050;
    v40 = sub_100201404(a1);
    v41 = 2113;
    v42 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"received leeched visit notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"visit\":%{private, location:escape_only}@}", buf, 0x26u);
  }
  if (objc_msgSend(a2, "hasDepartureDate"))
  {
    v7 = a1 + 1384;
    if (*(_BYTE *)(a1 + 1416))
    {
      sub_1001FF18C(a1 + 1384);
      *(_BYTE *)(a1 + 1416) = 0;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      sub_100201404(a1);
      v9 = sub_100201404(a1);
      *(_QWORD *)buf = 68289282;
      v37 = 2082;
      v38 = "";
      v39 = 2050;
      v40 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"departure a visit; reset LOI type info\", \"subHarvester\":%{public, location:CLSubHarves"
        "terIdentifier}lld}",
        buf,
        0x1Cu);
    }
    v10 = *(_QWORD *)(a1 + 1376);
    if (v10)
    {
      sub_1006DFA98(v33, v7);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 64))(v10, v33);
      if (v33[32])
      {
        v11 = v33;
LABEL_52:
        sub_1001FF18C((uint64_t)v11);
        return;
      }
    }
    return;
  }
  if ((_BYTE)v35)
  {
    if (*(_BYTE *)(a1 + 1416))
    {
      sub_100CEB1DC(a1 + 1384, &v34);
    }
    else
    {
      *(_QWORD *)(a1 + 1384) = v34;
      *(_DWORD *)(a1 + 1408) = 1;
      *(_BYTE *)(a1 + 1416) = 1;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v12 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      sub_100201404(a1);
      v13 = sub_100201404(a1);
      if (!(_BYTE)v35)
        sub_10028DF3C();
      *(_QWORD *)buf = 68289539;
      v37 = 2082;
      v38 = "";
      v39 = 2050;
      v40 = v13;
      v41 = 1025;
      LODWORD(v42) = v34;
      v14 = "{\"msg%{public}.0s\":\"cache loi type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \""
            "type\":%{private}d}";
      v15 = v12;
      v16 = 34;
      goto LABEL_31;
    }
  }
  else
  {
    *(_QWORD *)buf = -1;
    if (*(_BYTE *)(a1 + 1416))
    {
      sub_100CEB1DC(a1 + 1384, buf);
    }
    else
    {
      *(_QWORD *)(a1 + 1384) = -1;
      *(_DWORD *)(a1 + 1408) = 1;
      *(_BYTE *)(a1 + 1416) = 1;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v17 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      sub_100201404(a1);
      v18 = sub_100201404(a1);
      *(_QWORD *)buf = 68289282;
      v37 = 2082;
      v38 = "";
      v39 = 2050;
      v40 = v18;
      v14 = "{\"msg%{public}.0s\":\"no loi info for the visit, treating as unknown\", \"subHarvester\":%{public, location"
            ":CLSubHarvesterIdentifier}lld}";
      v15 = v17;
      v16 = 28;
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v14, buf, v16);
    }
  }
  v19 = *(_QWORD *)(a1 + 1376);
  if (v19)
  {
    sub_1006DFA98(v32, a1 + 1384);
    v20 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 96))(v19, v32);
    v21 = v20;
    if (v32[32])
    {
      sub_1001FF18C((uint64_t)v32);
      if ((v21 & 1) != 0)
      {
LABEL_35:
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1376) + 88))(*(_QWORD *)(a1 + 1376)))
          v22 = 2;
        else
          v22 = 1;
        v23 = *(_QWORD *)(a1 + 920);
        v24 = objc_msgSend((id)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1376) + 40))(*(_QWORD *)(a1 + 1376)), "secondaryDataSize");
        sub_10110A1F4(v23, v22, 2, 1, v24);
        sub_100CE9254(a1, 1);
        return;
      }
    }
    else if (v20)
    {
      goto LABEL_35;
    }
  }
  v25 = a1 + 1384;
  sub_1006DFA98(v31, a1 + 1384);
  v26 = sub_100CEA590(a1, (uint64_t)v31);
  if (v31[32])
    sub_1001FF18C((uint64_t)v31);
  if (v26)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v27 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      sub_100201404(a1);
      v28 = sub_100201404(a1);
      *(_QWORD *)buf = 68289282;
      v37 = 2082;
      v38 = "";
      v39 = 2050;
      v40 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Starting trace for LOI visit\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    if (*(_BYTE *)(a1 + 440))
    {
      sub_1001FEC34(a1, a1 + 1336);
    }
    else if (sub_1001FEC34(a1, a1 + 936))
    {
      sub_1001FE960(a1, 2);
    }
    else
    {
      sub_1001FE960(a1, 3);
    }
  }
  else
  {
    v29 = *(_QWORD *)(a1 + 1376);
    if (v29)
    {
      sub_1006DFA98(v30, v25);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v29 + 64))(v29, v30);
      if (v30[32])
      {
        v11 = v30;
        goto LABEL_52;
      }
    }
  }
}

void sub_100CEA530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a13)
    sub_1001FF18C((uint64_t)&a9);
  _Unwind_Resume(exception_object);
}

BOOL sub_100CEA590(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _QWORD v6[5];

  if ((sub_1002035A8(a1) & 1) != 0)
    return 0;
  if (!*(_BYTE *)(a2 + 32))
    sub_10028DF3C();
  if (*(_DWORD *)(a2 + 24) != 1)
    return 0;
  sub_1001FF280((uint64_t)v6, a1 + 560);
  v4 = sub_1001FF2F4(v6, (unint64_t *)a2) != 0;
  sub_100067AC4((uint64_t)v6);
  return v4;
}

uint64_t sub_100CEA60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FF280(a2, a1 + 184);
}

char *sub_100CEA618(uint64_t a1)
{
  char *v2;

  v2 = sub_100D8FDCC(a1 + 936);
  return &v2[(_QWORD)sub_100D8FDCC(a1 + 1104)];
}

id *sub_100CEA64C(id *result)
{
  id *v1;
  double v2;
  double v3;

  if (!*((_BYTE *)result + 440))
  {
    v1 = result;
    v2 = (*(double (**)(id))(*(_QWORD *)result[7] + 64))(result[7]);
    v3 = v2 - (*((double (**)(id *))*v1 + 23))(v1);
    return (id *)_objc_msgSend(v1[9], "pruneSecondaryDataOlderThan:forHarvester:", 10, v3);
  }
  return result;
}

id sub_100CEA6B8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 10);
  return sub_100CE9214(a1);
}

void sub_100CEA6E4(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  id v16;

  v4 = *(_QWORD *)(a1 + 40);
  if ((*(_DWORD *)(v4 + 388) & 0x80000000) != 0
    || (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") < *(int *)(v4 + 388)
    || *(_BYTE *)(v4 + 440))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      sub_100201404(v4);
      v9 = 68289539;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = sub_100201404(v4);
      v15 = 2113;
      v16 = objc_msgSend(a2, "formattedText");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x26u);
    }
    objc_msgSend(*(id *)(a1 + 32), "writeSecondaryObject:toField:", a2, 2);
    ++*(_DWORD *)(v4 + 208);
    *(double *)(v4 + 896) = (*(double (**)(_QWORD))(**(_QWORD **)(v4 + 56) + 64))(*(_QWORD *)(v4 + 56));
    (*(void (**)(_QWORD, void *))(**(_QWORD **)(v4 + 1376) + 56))(*(_QWORD *)(v4 + 1376), a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      sub_100201404(v4);
      v7 = sub_100201404(v4);
      v8 = *(_DWORD *)(v4 + 388);
      v9 = 68289539;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = v7;
      v15 = 1025;
      LODWORD(v16) = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"max scans exceeded, removing from cache\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxEvents\":%{private}d}", (uint8_t *)&v9, 0x22u);
    }
  }
}

void sub_100CEA92C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10217EF70;
  v2 = (uint64_t)(a1 + 13);
  sub_100067AC4((uint64_t)(a1 + 23));
  sub_100067AC4((uint64_t)(a1 + 18));
  sub_100067AC4(v2);
  operator delete();
}

uint64_t sub_100CEA984(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

uint64_t sub_100CEA98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FF280(a2, a1 + 104);
}

uint64_t sub_100CEA998(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 224);
}

uint64_t sub_100CEA9A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 225);
}

uint64_t sub_100CEA9A8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      sub_1008A2874(a1, a2, a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_100CEAA08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

void sub_100CEAA1C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100CEAA48(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[2];
      v8[2] = v9;
      v10 = (_QWORD *)*v8;
      v8[1] = v9;
      v11 = sub_100CEAB50((uint64_t)a1, v9, v8 + 2);
      sub_10012923C(a1, v8, v11);
      a2 = (_QWORD *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_100CEAEF0(a1, a2 + 2);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_100CEAB1C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_100CEAB3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_100CEAB50(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_100CEACA4(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void sub_100CEACA4(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_100CEAD80(a1, prime);
  }
}

void sub_100CEAD80(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      sub_10025955C();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_100CEAEF0(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[2] = *a2;
  *v4 = 0;
  v4[1] = v5;
  v6 = sub_100CEAB50((uint64_t)a1, v5, v4 + 2);
  sub_10012923C(a1, v4, v6);
  return v4;
}

void sub_100CEAF50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_100CEAF64@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v5;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = result;
  v9 = a3;
  v10 = a4;
  if (result != a2)
  {
    do
    {
      v8 = v5[2];
      result = sub_100CEAFD4(&v9, &v8);
      v5 = (_QWORD *)*v5;
    }
    while (v5 != a2);
    a3 = v9;
    a4 = v10;
    v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

_QWORD **sub_100CEAFD4(_QWORD **a1, unsigned int *a2)
{
  uint64_t v3;
  size_t v4;

  std::ostream::operator<<(*a1, *a2);
  v3 = (uint64_t)a1[1];
  if (v3)
  {
    v4 = strlen((const char *)a1[1]);
    sub_100263F7C(*a1, v3, v4);
  }
  return a1;
}

_QWORD *sub_100CEB02C@<X0>(double *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = sub_100CEB084(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100CEB070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100CEB084(_QWORD *a1, double *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10217F0B0;
  sub_10110A1DC((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_100CEB0C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100CEB0D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217F0B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CEB0E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217F0B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100CEB11C(uint64_t a1)
{
  sub_100008848(a1 + 32, *(_QWORD **)(a1 + 40));
}

void sub_100CEB130(uint64_t a1, std::string *this, const std::string::value_type **a3)
{
  _QWORD v3[2];

  if (*(_DWORD *)(a1 + 24))
  {
    v3[0] = a1;
    v3[1] = a3;
    sub_100CEB174((uint64_t)v3);
  }
  else
  {
    std::string::assign(this, *a3);
  }
}

void sub_100CEB174(uint64_t a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;

  v1 = *(_QWORD *)a1;
  sub_1015A2E04(__p, **(char ***)(a1 + 8));
  sub_1006DF858(v1, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_100CEB1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CEB1DC(uint64_t a1, _QWORD *a2)
{
  if (*(_DWORD *)(a1 + 24) == 1)
    *(_QWORD *)a1 = *a2;
  else
    sub_100CEB220(a1, a2);
  return a1;
}

uint64_t sub_100CEB220(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_10217F070 + v4))(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t sub_100CEB284()
{
  return sub_1011E780C((uint64_t)&xmmword_102307B90, 1, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

uint64_t sub_100CEB2C0()
{
  uint64_t result;

  result = sub_1000A42B0();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_100CEB330()
{
  operator delete();
}

uint64_t sub_100CEB354()
{
  if (qword_102307BD0 != -1)
    dispatch_once(&qword_102307BD0, &stru_10217F0F0);
  return qword_102311430;
}

void sub_100CEB39C(_QWORD *a1)
{
  sub_101221A60(a1);
  operator delete();
}

double sub_100CEB3C0(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217F178);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217F178);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryGyro] Unrecognized update interval notification %{public}d", &v16, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (*a3 > 0.0)
    {
      (*(void (**)(double))(**(_QWORD **)(a1 + 32) + 16))(*a3);
      (*(void (**)(void))(**(_QWORD **)(a1 + 32) + 16))();
      *(_BYTE *)(a1 + 30) = 0;
    }
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217F178);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)a3;
      *(_DWORD *)buf = 134349056;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryGyro] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217F178);
      v13 = *(_QWORD *)a3;
      v16 = 134349056;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryGyro] Setting update interval to %{public}f", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10006B4E0(*(_QWORD *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

double sub_100CEB76C(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v10;
  double v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  double v19;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217F178);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217F178);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryGyro] Unrecognized batch interval notification %{public}d", &v16, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryGyro::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217F178);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v11 = *a3;
      *(_DWORD *)buf = 134349056;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryGyro] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217F178);
      v13 = *(_QWORD *)a3;
      v16 = 134349056;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryGyro] Setting batch interval to %{public}f", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryGyro::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10006BC9C(*(_QWORD *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_100CEBA94(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  void **v5;
  NSObject *v6;
  void **v7;
  void **v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  int v18;
  _DWORD v19[2];
  __int16 v20;
  void **v21;
  __int16 v22;
  void **v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  void **v29;

  sub_10012AC18(a1, 0, a2, 40);
  if (!*(_BYTE *)(a1 + 30))
  {
    *(_BYTE *)(a1 + 30) = 1;
    v13 = 0;
    sub_1015A2E04(v14, "N/A");
    sub_1015A2E04(__p, "N/A");
    v18 = 0;
    if (sub_101221D6C(a1, &v13))
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217F178);
      v3 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        if (v15 >= 0)
          v4 = v14;
        else
          v4 = (void **)v14[0];
        if (v17 >= 0)
          v5 = __p;
        else
          v5 = (void **)__p[0];
        *(_DWORD *)buf = 67240707;
        v25 = v13;
        v26 = 2081;
        v27 = v4;
        v28 = 2081;
        v29 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[AccessoryGyro] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_10217F178);
        if (v15 >= 0)
          v7 = v14;
        else
          v7 = (void **)v14[0];
        if (v17 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        v19[0] = 67240707;
        v19[1] = v13;
        v20 = 2081;
        v21 = v7;
        v22 = 2081;
        v23 = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryGyro] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", v19, 28);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryGyro::onGyroData(const Sample &)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      sub_10012AC18(a1, 1, (uint64_t)&v13, 64);
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217F178);
      v6 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Service not found!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_10217F178);
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryGyro] Service not found!", v19, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryGyro::onGyroData(const Sample &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    if (v17 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
  }
}

void sub_100CEBE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1007217D0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100CEBEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float FloatValue;
  float v7;
  float v8;
  unint64_t TimeStamp;
  double v10;
  unsigned __int16 IntegerValue;
  uint64_t v12;
  float v13;
  NSObject *v14;
  float v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  unsigned __int16 v23;
  float v24;
  _DWORD v25[2];
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  double v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  double v51;

  if (IOHIDEventGetType(a4) == 20)
  {
    FloatValue = IOHIDEventGetFloatValue(a4, 1310720);
    v19 = FloatValue;
    v7 = IOHIDEventGetFloatValue(a4, 1310721);
    v20 = v7;
    v8 = IOHIDEventGetFloatValue(a4, 1310722);
    v21 = v8;
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v10 = sub_100127828(TimeStamp);
    v18 = v10;
    IntegerValue = IOHIDEventGetIntegerValue(a4, 1310725);
    v23 = IntegerValue;
    v12 = sub_1013B4A0C();
    v22 = v12;
    v13 = *(float *)(a1 + 100);
    v24 = v13;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217F178);
    v14 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67241728;
      v39 = IntegerValue;
      v40 = 2050;
      v41 = FloatValue;
      v42 = 2050;
      v43 = v7;
      v44 = 2050;
      v45 = v8;
      v46 = 2050;
      v47 = v13;
      v48 = 2050;
      v49 = v12;
      v50 = 2050;
      v51 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[AccessoryGyro] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217F178);
      v25[0] = 67241728;
      v25[1] = IntegerValue;
      v26 = 2050;
      v27 = FloatValue;
      v28 = 2050;
      v29 = v7;
      v30 = 2050;
      v31 = v8;
      v32 = 2050;
      v33 = v13;
      v34 = 2050;
      v35 = v12;
      v36 = 2050;
      v37 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryGyro] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", v25, 68);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryGyro::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_100CEBA94(a1, (uint64_t)&v18);
  }
  else if (IOHIDEventGetType(a4) == 15)
  {
    v15 = IOHIDEventGetFloatValue(a4, 983040);
    *(float *)(a1 + 100) = v15;
  }
}

void sub_100CEC1E8(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

double sub_100CEC214(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

double sub_100CEC22C(unint64_t *a1, double a2)
{
  _QWORD *v2;
  unint64_t v3;
  double v5;

  v5 = a2;
  v2 = a1 + 1;
  v3 = a1[6];
  if (v3 >= *a1)
  {
    ++a1[5];
    a1[6] = v3 - 1;
    sub_10047F604((uint64_t)(a1 + 1), 1);
  }
  return sub_1000D796C(v2, &v5);
}

uint64_t sub_100CEC28C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 48);
  if (v1)
  {
    ++*(_QWORD *)(result + 40);
    *(_QWORD *)(result + 48) = v1 - 1;
    return sub_10047F604(result + 8, 1);
  }
  return result;
}

double sub_100CEC2B8(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  double **v4;
  double *v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double *v11;

  v1 = a1[2];
  if (a1[3] == v1)
  {
    v2 = a1[6];
  }
  else
  {
    v3 = a1[5];
    v2 = a1[6];
    v4 = (double **)(v1 + 8 * (v3 >> 9));
    v5 = *v4;
    v6 = &(*v4)[v3 & 0x1FF];
    v7 = *(_QWORD *)(v1 + (((v2 + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v2 + v3) & 0x1FF);
    if (v6 != (double *)v7)
    {
      v8 = 0.0;
      do
      {
        v9 = *v6++;
        v10 = v9;
        if ((char *)v6 - (char *)v5 == 4096)
        {
          v11 = v4[1];
          ++v4;
          v5 = v11;
          v6 = v11;
        }
        v8 = v8 + v10;
      }
      while (v6 != (double *)v7);
      if (v2)
        return v8 / (double)v2;
      return 0.0;
    }
  }
  v8 = 0.0;
  if (v2)
    return v8 / (double)v2;
  return 0.0;
}

uint64_t sub_100CEC348(uint64_t a1, void *a2)
{
  uint64_t v4;
  _QWORD v6[6];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  sub_1018BEA14((unsigned __int8 *)(a1 + 56), "GyroBiasLoggerDailyReportTimeout", &qword_101C21438, 0);
  sub_1018BEA14((unsigned __int8 *)(a1 + 88), "GyroBiasLoggerBiasEstimationTimeout", &qword_101C21440, 0);
  sub_1018BEA14((unsigned __int8 *)(a1 + 112), "GyroBiasLoggerMinTimeBetweenFitSessions", &qword_101C21448, 0);
  *(_QWORD *)(a1 + 136) = 0xFF7FFFFF7F7FFFFFLL;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  v4 = (int)*(double *)(a1 + 96);
  *(_QWORD *)(a1 + 256) = a2;
  *(_QWORD *)(a1 + 264) = off_102138370;
  *(_QWORD *)(a1 + 272) = v4;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = off_102138370;
  *(_QWORD *)(a1 + 344) = v4;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 245) = 0x800000007FFFFFFFLL;
  *(_QWORD *)(a1 + 237) = 0xFF7FFFFF7F7FFFFFLL;
  *(_QWORD *)(a1 + 412) = 0xFF7FFFFF7F7FFFFFLL;
  *(_QWORD *)(a1 + 176) = 0xFF7FFFFF7F7FFFFFLL;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100CEC4E4;
  v6[3] = &unk_102131360;
  v6[4] = a2;
  v6[5] = a1;
  objc_msgSend(objc_msgSend(a2, "silo"), "async:", v6);
  return a1;
}

void sub_100CEC4C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[42] = v2;
  sub_100412390(v1 + 45);
  v1[33] = v2;
  sub_100412390(v1 + 36);
  _Unwind_Resume(a1);
}

id sub_100CEC4E4(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  _QWORD v6[5];
  _QWORD v7[5];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  *(_QWORD *)(v2 + 48) = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100CEC5B0;
  v7[3] = &unk_10212ECA0;
  v7[4] = v2;
  objc_msgSend(v3, "setHandler:", v7);
  objc_msgSend(*(id *)(v2 + 48), "setNextFireDelay:interval:", *(double *)(v2 + 64), *(double *)(v2 + 64));
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  *(_QWORD *)(v2 + 80) = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100CEC86C;
  v6[3] = &unk_10212ECA0;
  v6[4] = v2;
  objc_msgSend(v4, "setHandler:", v6);
  return objc_msgSend(*(id *)(v2 + 80), "setNextFireDelay:interval:", *(double *)(v2 + 96), *(double *)(v2 + 96));
}

double sub_100CEC5B0(uint64_t a1)
{
  float32x2_t *v1;

  v1 = *(float32x2_t **)(a1 + 32);
  sub_100CEC5E0(v1);
  sub_100CEC6A8((uint64_t)v1);
  return sub_100CEC7D0((uint64_t)v1);
}

float32x2_t *sub_100CEC5E0(float32x2_t *result)
{
  float32x2_t *v1;
  float32x2_t *v2;
  double v3;
  _QWORD v4[4];
  float64x2_t v5;
  double v6;

  v1 = result;
  v2 = result + 20;
  if (result[21].i8[4] && result[19].i8[4])
  {
    v3 = vabds_f32(result[19].f32[0], result[21].f32[0]) * 1000.0;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100CED0D8;
    v4[3] = &unk_10217F198;
    v5 = vmulq_f64(vcvtq_f64_f32(vabd_f32(result[18], result[20])), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
    v6 = v3;
    result = (float32x2_t *)AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.GyroBiasDailyDelta"), v4);
  }
  *v2 = v1[18];
  *(float32x2_t *)((char *)v2 + 5) = *(float32x2_t *)((char *)v1 + 149);
  return result;
}

double sub_100CEC6A8(uint64_t a1)
{
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  unsigned int v6;
  uint64_t v7;
  uint64x2_t v8;
  float64x2_t v9;
  double result;
  _QWORD v11[5];
  float64x2_t v12;
  double v13;
  double v14;
  double v15;

  v2 = (_QWORD *)(a1 + 200);
  v3 = *(double *)(a1 + 200);
  if (v3 >= 0.0)
  {
    v4 = *(double *)(a1 + 208);
    if (v4 >= 0.0)
    {
      v5 = *(double *)(a1 + 216);
      if (v5 >= 0.0)
      {
        v6 = *(_DWORD *)(a1 + 192);
        if (v6)
        {
          v7 = *(_QWORD *)(a1 + 184);
          v8.i64[0] = v7;
          v8.i64[1] = HIDWORD(v7);
          v9 = vdivq_f64(vmulq_f64(vcvtq_f64_u64(v8), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL)), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v6), 0));
        }
        else
        {
          v9 = 0uLL;
        }
        if (v3 < 0.6)
          v3 = *(double *)(a1 + 64);
        if (v4 < 1.0)
          v4 = *(double *)(a1 + 64);
        if (v5 < 1.0)
          v5 = *(double *)(a1 + 64);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_100CECF38;
        v11[3] = &unk_102139BB0;
        v11[4] = a1;
        v12 = v9;
        v13 = v3;
        v14 = v4;
        v15 = v5;
        AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.GyroBiasDailyStatistics"), v11);
      }
    }
  }
  *(_QWORD *)(a1 + 412) = 0xFF7FFFFF7F7FFFFFLL;
  result = -1.40444743e306;
  *(_QWORD *)(a1 + 176) = 0xFF7FFFFF7F7FFFFFLL;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  return result;
}

double sub_100CEC7D0(uint64_t a1)
{
  double result;
  _QWORD v3[5];

  if (*(_DWORD *)(a1 + 245) != 0x7FFFFFFF && *(_DWORD *)(a1 + 249) != 0x80000000)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100CED32C;
    v3[3] = &unk_102131FE8;
    v3[4] = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.OISDailyStatistics"), v3);
    *(_QWORD *)(a1 + 245) = 0x800000007FFFFFFFLL;
    result = -1.40444743e306;
    *(_QWORD *)(a1 + 237) = 0xFF7FFFFF7F7FFFFFLL;
  }
  return result;
}

void sub_100CEC86C(uint64_t a1)
{
  sub_100CEC874(*(_QWORD *)(a1 + 32));
}

void sub_100CEC874(uint64_t a1)
{
  unint64_t v1;
  _QWORD *v2;
  float v3;
  _QWORD *v4;
  unint64_t v5;
  float v6;
  _QWORD v7[5];
  float v8;
  float v9;

  v1 = *(_QWORD *)(a1 + 328);
  if (v1)
  {
    v2 = (_QWORD *)(a1 + 264);
    v3 = *(float *)(a1 + 280) / (float)v1;
    v4 = (_QWORD *)(a1 + 336);
    v5 = *(_QWORD *)(a1 + 400);
    if (v5)
      v6 = *(float *)(a1 + 352) / (float)v5;
    else
      v6 = -3.4028e38;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100CED198;
    v7[3] = &unk_102139B90;
    v7[4] = a1;
    v8 = v3;
    v9 = v6;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.GyroBiasEstimationTemperature"), v7);
    sub_10041250C(v2);
    sub_10041250C(v4);
  }
}

uint64_t sub_100CEC928(uint64_t a1)
{
  id v2;
  _QWORD v4[5];

  v2 = objc_msgSend(*(id *)(a1 + 256), "silo");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100CEC9B8;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  objc_msgSend(v2, "async:", v4);
  *(_QWORD *)(a1 + 336) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 360));
  *(_QWORD *)(a1 + 264) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 288));
  return a1;
}

void sub_100CEC9B8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v1 + 48), "invalidate");

  *(_QWORD *)(v1 + 48) = 0;
  objc_msgSend(*(id *)(v1 + 80), "invalidate");

  *(_QWORD *)(v1 + 80) = 0;
}

uint64_t sub_100CECA00(uint64_t result, double a2)
{
  uint64_t v3;
  double v4;
  double v5;
  _QWORD v6[5];

  v3 = result;
  if (*(_BYTE *)(result + 40))
  {
    v4 = a2 - *(double *)(result + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100CECAAC;
    v6[3] = &unk_102131FE8;
    *(double *)&v6[4] = v4;
    result = AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.GyroCalibrationDatabaseUpdate"), v6);
    v5 = 0.0;
    if (a2 >= 1.0)
    {
      v5 = *(double *)(v3 + 216);
      if (v4 >= v5)
        v5 = v4;
    }
    *(double *)(v3 + 216) = v5;
  }
  *(double *)(v3 + 32) = a2;
  *(_BYTE *)(v3 + 40) = 1;
  return result;
}

NSDictionary *sub_100CECAAC(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("timeBetweenDatabaseUpdates");
  v3 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

NSDictionary *sub_100CECB2C(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("timeBetweenFits");
  v3 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

double *sub_100CECBAC(double *result, double *a2)
{
  int v2;
  double *v4;
  double v5;
  double v6;
  uint64_t i;
  float v8;
  double v9;
  double v11;
  _QWORD *v12;
  int v13;
  int v14;
  _QWORD v15[7];
  _QWORD __dst[36];

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    v4 = result;
    if (*((_BYTE *)result + 24))
      v5 = a2[2] - result[2];
    else
      v5 = -1.0;
    if (v2 != 1)
    {
      if (v2 == 2)
      {
        if (*((_BYTE *)result + 24))
        {
          __dst[0] = _NSConcreteStackBlock;
          __dst[1] = 3221225472;
          __dst[2] = sub_100CECB2C;
          __dst[3] = &unk_102131FE8;
          *(double *)&__dst[4] = v5;
          AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.GyroBiasFit"), __dst);
          v6 = v4[26];
          if (v6 < v5)
            v6 = v5;
          v4[26] = v6;
        }
        result = (double *)memcpy(__dst, (char *)a2 + 33, 0x11AuLL);
        for (i = 0; i != 8; ++i)
        {
          if (*((float *)&__dst[24] + i + 1) >= 3.4028e38)
            break;
        }
        v8 = *(float *)&__dst[28] + *((float *)&__dst[24] + i);
        *((float *)v4 + 34) = *((float *)&__dst[24] + 1) - *(float *)&__dst[28];
        *((float *)v4 + 35) = v8;
      }
LABEL_28:
      v4[2] = a2[2];
      *((_BYTE *)v4 + 24) = 1;
      return result;
    }
    v9 = a2[1];
    if (v9 > 0.0 || v9 == -1.79769313e308)
    {
      if (v5 > result[15])
      {
        v11 = a2[2] - fmax(v9, 0.0);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_100CECDC4;
        v15[3] = &unk_10217F198;
        v15[4] = result;
        *(double *)&v15[5] = v5;
        *(double *)&v15[6] = v11;
        v12 = v15;
LABEL_24:
        result = (double *)AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.GyroBiasFit"), v12);
      }
    }
    else if (*((_BYTE *)result + 24))
    {
      __dst[0] = _NSConcreteStackBlock;
      __dst[1] = 3221225472;
      __dst[2] = sub_100CECB2C;
      __dst[3] = &unk_102131FE8;
      *(double *)&__dst[4] = v5;
      v12 = __dst;
      goto LABEL_24;
    }
    v13 = *((unsigned __int8 *)v4 + 156);
    v14 = *((_DWORD *)a2 + 13);
    v4[18] = *(double *)((char *)a2 + 44);
    *((_DWORD *)v4 + 38) = v14;
    if (!v13)
      *((_BYTE *)v4 + 156) = 1;
    v4[17] = a2[3];
    goto LABEL_28;
  }
  return result;
}

NSDictionary *sub_100CECDC4(uint64_t a1)
{
  uint64_t v2;
  NSNumber *v3;
  NSNull *v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v2 = *(_QWORD *)(a1 + 32);
  v6[0] = CFSTR("timeBetweenFits");
  if (*(_BYTE *)(v2 + 24))
    v3 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  else
    v3 = +[NSNull null](NSNull, "null");
  v6[1] = CFSTR("timeSinceLastMiniCal");
  v7[0] = v3;
  if (*(double *)(a1 + 48) <= 0.0)
    v4 = +[NSNull null](NSNull, "null");
  else
    v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v7[1] = v4;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
}

NSDictionary *sub_100CECE98(uint64_t a1, double a2)
{
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("outOfBoxFirstConvergedTemperature");
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  v4[1] = CFSTR("outOfBoxTimeToFirstConvergedBiasEstimate");
  v5[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a2);
  v5[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

NSDictionary *sub_100CECF38(uint64_t a1, double a2)
{
  _DWORD *v3;
  double v4;
  NSNull *v5;
  NSNull *v6;
  double v7;
  double v8;
  _QWORD v10[9];
  _QWORD v11[9];

  v3 = *(_DWORD **)(a1 + 32);
  v10[0] = CFSTR("dailyMinObservedTemperature");
  LODWORD(a2) = v3[103];
  v11[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a2);
  v10[1] = CFSTR("dailyMaxObservedTemperature");
  LODWORD(v4) = v3[104];
  v11[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4);
  v10[2] = CFSTR("dailyBiasEstimationPercentageUsingFitInterpolation");
  if (*(double *)(a1 + 40) <= 0.0)
    v5 = +[NSNull null](NSNull, "null");
  else
    v5 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v11[2] = v5;
  v10[3] = CFSTR("dailyBiasEstimationPercentageUsingFitExtrapolation");
  if (*(double *)(a1 + 48) <= 0.0)
    v6 = +[NSNull null](NSNull, "null");
  else
    v6 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v11[3] = v6;
  v10[4] = CFSTR("dailyMaxTimeBetweenGyroBiasEstimations");
  v11[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  v10[5] = CFSTR("dailyMaxTimeBetweenNonlinearFits");
  v11[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64));
  v10[6] = CFSTR("dailyMaxTimeBetweenDataBaseUpdates");
  v11[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 72));
  v10[7] = CFSTR("dailyMinBiasEstimateTemperature");
  LODWORD(v7) = v3[44];
  v11[7] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7);
  v10[8] = CFSTR("dailyMaxBiasEstimateTemperature");
  LODWORD(v8) = v3[45];
  v11[8] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 9);
}

NSDictionary *sub_100CED0D8(double *a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("dailyChangeInInterceptX");
  v4[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[4]);
  v3[1] = CFSTR("dailyChangeInInterceptY");
  v4[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[5]);
  v3[2] = CFSTR("dailyChangeInInterceptZ");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[6]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_100CED198(uint64_t a1)
{
  uint64_t v2;
  double v3;
  float v4;
  NSNumber *v6;
  float v7;
  NSNumber *v9;
  float v10;
  NSNumber *v12;
  _QWORD v14[5];
  _QWORD v15[5];

  v2 = *(_QWORD *)(a1 + 32);
  v14[0] = CFSTR("logSequenceID");
  v15[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0));
  v14[1] = CFSTR("gyroBiasEstimationTemperature");
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  v15[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v14[2] = CFSTR("temperatureDistanceFromFit");
  v4 = *(float *)(a1 + 44);
  if (v4 > -3.4028e38 && v4 < 3.4028e38)
    v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v6 = +[NSNull null](NSNull, "null");
  v15[2] = v6;
  v14[3] = CFSTR("gyroBiasEstimationMinDatabaseTemperature");
  v7 = *(float *)(v2 + 136);
  if (v7 > -100.0 && v7 < 100.0)
    v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v9 = +[NSNull null](NSNull, "null");
  v15[3] = v9;
  v14[4] = CFSTR("gyroBiasEstimationMaxDatabaseTemperature");
  v10 = *(float *)(v2 + 140);
  if (v10 > -100.0 && v10 < 100.0)
    v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v12 = +[NSNull null](NSNull, "null");
  v15[4] = v12;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 5);
}

NSDictionary *sub_100CED32C(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;
  _QWORD v5[4];
  _QWORD v6[4];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = CFSTR("dailyMinGyroBiasError");
  LODWORD(a2) = *(_DWORD *)(v2 + 237);
  v6[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a2);
  v5[1] = CFSTR("dailyMaxGyroBiasError");
  LODWORD(v3) = *(_DWORD *)(v2 + 241);
  v6[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v5[2] = CFSTR("dailyMinGyroTemperature");
  v6[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 245));
  v5[3] = CFSTR("dailyMaxGyroTemperature");
  v6[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 249));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 4);
}

uint64_t sub_100CED408(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  float v4;
  float v5;

  v2 = *(_DWORD *)(a2 + 12);
  if (v2 >= *(_DWORD *)(result + 245))
    v2 = *(_DWORD *)(result + 245);
  *(_DWORD *)(result + 245) = v2;
  v3 = *(_DWORD *)(result + 249);
  if (v3 <= *(_DWORD *)(a2 + 16))
    v3 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 249) = v3;
  v4 = *(float *)(a2 + 4);
  if (v4 >= *(float *)(result + 237))
    v4 = *(float *)(result + 237);
  *(float *)(result + 237) = v4;
  v5 = *(float *)(result + 241);
  if (v5 < *(float *)(a2 + 8))
    v5 = *(float *)(a2 + 8);
  *(float *)(result + 241) = v5;
  return result;
}

void sub_100CED45C(uint64_t a1)
{
  *(_BYTE *)(a1 + 232) = 1;
  *(CFAbsoluteTime *)(a1 + 224) = CFAbsoluteTimeGetCurrent();
}

uint64_t sub_100CED488(uint64_t result, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a2 + 4);
  if (v2 >= *(float *)(result + 412))
    v2 = *(float *)(result + 412);
  *(float *)(result + 412) = v2;
  v3 = *(float *)(result + 416);
  if (v3 < *(float *)(a2 + 8))
    v3 = *(float *)(a2 + 8);
  *(float *)(result + 416) = v3;
  return result;
}

uint64_t sub_100CEDD74(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  int v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v5 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v6 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v8 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v15 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0)
          goto LABEL_12;
        v16 += 7;
        v22 = v17++ >= 9;
        if (v22)
        {
          v18 = 0;
          v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_14:
      if (v23 || (v18 & 7) == 4)
        break;
      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + v4[255]) |= 0x10u;
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v79 = v5[256];
          goto LABEL_130;
        case 2u:
          *(_WORD *)(a1 + v4[255]) |= 0x200u;
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v35 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v35 = 0;
          }
          v80 = v6[257];
          goto LABEL_121;
        case 3u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_WORD *)(a1 + v4[255]) |= 0x100u;
          while (2)
          {
            v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v22 = v37++ >= 9;
                if (v22)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_90;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v38) = 0;
LABEL_90:
          v76 = v7[258];
          goto LABEL_107;
        case 4u:
          *(_WORD *)(a1 + v4[255]) |= 0x40u;
          v42 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v35 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v35 = 0;
          }
          v80 = v8[259];
          goto LABEL_121;
        case 5u:
          *(_WORD *)(a1 + v4[255]) |= 0x80u;
          v43 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v35 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v35 = 0;
          }
          v80 = v9[260];
LABEL_121:
          *(_DWORD *)(a1 + v80) = v35;
          continue;
        case 6u:
          v44 = 0;
          v45 = 0;
          v38 = 0;
          *(_WORD *)(a1 + v4[255]) |= 0x20u;
          while (2)
          {
            v46 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v47 = v46 + 1;
            if (v46 == -1 || v47 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47;
              v38 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                v22 = v45++ >= 9;
                if (v22)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v38) = 0;
LABEL_94:
          v76 = v10[261];
          goto LABEL_107;
        case 7u:
          *(_WORD *)(a1 + v4[255]) |= 2u;
          v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v79 = v11[262];
          goto LABEL_130;
        case 8u:
          v50 = 0;
          v51 = 0;
          v52 = 0;
          *(_WORD *)(a1 + v4[255]) |= 0x800u;
          while (2)
          {
            v53 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v54 = v53 + 1;
            if (v53 == -1 || v54 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v55 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54;
              v52 |= (unint64_t)(v55 & 0x7F) << v50;
              if (v55 < 0)
              {
                v50 += 7;
                v22 = v51++ >= 9;
                if (v22)
                {
                  v52 = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v52 = 0;
LABEL_98:
          v77 = v52 != 0;
          v78 = v12[263];
          goto LABEL_112;
        case 9u:
          v56 = 0;
          v57 = 0;
          v58 = 0;
          *(_WORD *)(a1 + v4[255]) |= 0x1000u;
          while (2)
          {
            v59 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v60 = v59 + 1;
            if (v59 == -1 || v60 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v61 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60;
              v58 |= (unint64_t)(v61 & 0x7F) << v56;
              if (v61 < 0)
              {
                v56 += 7;
                v22 = v57++ >= 9;
                if (v22)
                {
                  v58 = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v58 = 0;
LABEL_102:
          v77 = v58 != 0;
          v78 = v13[264];
          goto LABEL_112;
        case 0xAu:
          v62 = 0;
          v63 = 0;
          v38 = 0;
          *(_WORD *)(a1 + v4[255]) |= 0x400u;
          while (2)
          {
            v64 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v65 = v64 + 1;
            if (v64 == -1 || v65 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v66 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65;
              v38 |= (unint64_t)(v66 & 0x7F) << v62;
              if (v66 < 0)
              {
                v62 += 7;
                v22 = v63++ >= 9;
                if (v22)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_106;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v38) = 0;
LABEL_106:
          v76 = v14[265];
LABEL_107:
          *(_DWORD *)(a1 + v76) = v38;
          continue;
        case 0xBu:
          *(_WORD *)(a1 + v4[255]) |= 1u;
          v67 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v67 <= 0xFFFFFFFFFFFFFFF7 && v67 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v67);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v79 = v15[266];
          goto LABEL_130;
        case 0xCu:
          *(_WORD *)(a1 + v4[255]) |= 8u;
          v68 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v68 <= 0xFFFFFFFFFFFFFFF7 && v68 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v79 = 32;
          goto LABEL_130;
        case 0xDu:
          v69 = 0;
          v70 = 0;
          v71 = 0;
          *(_WORD *)(a1 + v4[255]) |= 0x2000u;
          break;
        case 0xEu:
          *(_WORD *)(a1 + v4[255]) |= 4u;
          v75 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v75 <= 0xFFFFFFFFFFFFFFF7 && v75 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v75);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v75 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v79 = 24;
LABEL_130:
          *(_QWORD *)(a1 + v79) = v26;
          continue;
        default:
          v27 = v5;
          v28 = v6;
          v29 = v4;
          v30 = v7;
          v31 = v8;
          v32 = a1;
          result = PBReaderSkipValueWithTag(a2);
          v15 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          a1 = v32;
          v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v8 = v31;
          v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v7 = v30;
          v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v4 = v29;
          v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v6 = v28;
          v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v5 = v27;
          v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v72 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v73 = v72 + 1;
        if (v72 == -1 || v73 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v74 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v72);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v73;
        v71 |= (unint64_t)(v74 & 0x7F) << v69;
        if ((v74 & 0x80) == 0)
          goto LABEL_109;
        v69 += 7;
        v22 = v70++ >= 9;
        if (v22)
        {
          v71 = 0;
          goto LABEL_111;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_109:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v71 = 0;
LABEL_111:
      v77 = v71 != 0;
      v78 = 74;
LABEL_112:
      *(_BYTE *)(a1 + v78) = v77;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

double sub_100CEF7B0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10217F1C8;
  result = 0.0;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_BYTE *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_BYTE *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 8) = 0x4600000000;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_BYTE *)(a1 + 1712) = 0;
  return result;
}

_QWORD *sub_100CEF800@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float v4;
  double v5;
  _BOOL4 v7;
  char __str[512];

  v3 = *(unsigned __int8 *)(a1 + 1712);
  v4 = *(float *)(a1 + 1728);
  v5 = *(double *)(a1 + 1704);
  v7 = v5 > 600.0 && v3 != 0;
  if (v4 != 0.0)
    v7 = 0;
  snprintf(__str, 0x200uLL, "valid15s,%d,dur15s,%f,cadence15s,%f,stroller15s,%f,up15s,%f,down15s,%f,drive15s,%f,cycle15s,%f,valid1m,%d,dur1m,%f,cadence1m,%f,stroller1m,%f,up1m,%f,down1m,%f,drive1m,%f,cycle1m,%f,valid3m,%d,dur3m,%f,cadence3m,%f,stroller3m,%f,up3m,%f,down3m,%f,drive3m,%f,cycle3m,%f,lastActive,%f,stopTimer,%f,stopped,%d", v3, *(double *)(a1 + 1720), v4, *(float *)(a1 + 1732), *(float *)(a1 + 1736), *(float *)(a1 + 1740), *(float *)(a1 + 1744), *(float *)(a1 + 1748), *(unsigned __int8 *)(a1 + 1752), *(double *)(a1 + 1760), *(float *)(a1 + 1768), *(float *)(a1 + 1772), *(float *)(a1 + 1776), *(float *)(a1 + 1780),
    *(float *)(a1 + 1784),
    *(float *)(a1 + 1788),
    *(unsigned __int8 *)(a1 + 1792),
    *(double *)(a1 + 1800),
    *(float *)(a1 + 1808),
    *(float *)(a1 + 1812),
    *(float *)(a1 + 1816),
    *(float *)(a1 + 1820),
    *(float *)(a1 + 1824),
    *(float *)(a1 + 1828),
    *(double *)(a1 + 1696),
    v5,
    v7);
  return sub_1015A2E04(a2, __str);
}

double sub_100CEF988(uint64_t a1, int a2)
{
  NSObject *v3;
  double result;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (a2 != 3)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10217F200);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Only hiking is supported here!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10217F200);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "Only hiking is supported here!", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLHikingStopDetector::setStopModeAndReset(StopMode)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  *(_DWORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1696) = 0u;
  return result;
}

uint64_t sub_100CEFB2C(uint64_t a1)
{
  float v1;
  BOOL v2;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  char v7;
  int v8;

  if (!*(_BYTE *)(a1 + 1712) || !*(_BYTE *)(a1 + 1752) || !*(_BYTE *)(a1 + 1792))
    return 1;
  v1 = *(float *)(a1 + 1728);
  v2 = v1 > 45.0 && *(float *)(a1 + 1768) > 45.0 && *(float *)(a1 + 1808) > 29.7;
  v4 = *(float *)(a1 + 1776) >= 0.9 || *(float *)(a1 + 1780) >= 0.9;
  v5 = *(float *)(a1 + 1784) == 0.0;
  if (*(float *)(a1 + 1824) >= 0.3)
    v5 = 0;
  v6 = *(float *)(a1 + 1788) == 0.0;
  if (*(float *)(a1 + 1828) >= 0.5)
    v6 = 0;
  v7 = v1 > 140.0 || v2;
  v8 = 1;
  if ((v7 & 1) == 0 && *(float *)(a1 + 1812) <= 0.5)
    v8 = *(float *)(a1 + 1768) > 22.5 && v4;
  return v6 & v8 & v5;
}

uint64_t sub_100CEFC40(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  void **v13;
  const char *v14;
  uint8_t *v15;
  void **v16;
  const char *v17;
  uint8_t *v18;
  void *__p[2];
  char v20;
  int v21;
  void **v22;
  uint8_t buf[16];
  __int128 v24;
  uint64_t v25;

  sub_100CF00C0(a1, (double *)a2);
  sub_100CF0474(a1, 6uLL, (uint64_t)buf);
  v4 = v24;
  *(_OWORD *)(a1 + 1712) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1728) = v4;
  *(_QWORD *)(a1 + 1744) = v25;
  sub_100CF0474(a1, 0x17uLL, (uint64_t)buf);
  *(_QWORD *)(a1 + 1784) = v25;
  v5 = v24;
  *(_OWORD *)(a1 + 1752) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1768) = v5;
  sub_100CF0474(a1, 0x46uLL, (uint64_t)buf);
  v6 = v24;
  *(_OWORD *)(a1 + 1792) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1808) = v6;
  *(_QWORD *)(a1 + 1824) = v25;
  if (sub_100CEFB2C(a1))
  {
    *(_QWORD *)(a1 + 1704) = 0;
    *(_QWORD *)(a1 + 1696) = *(_QWORD *)(a2 + 296);
  }
  else if (*(float *)(a1 + 1768) < 45.0)
  {
    *(double *)(a1 + 1704) = *(double *)(a1 + 1704) + 2.55999994;
  }
  sub_100CEF800(a1, __p);
  if (*(double *)(a1 + 1704) > 600.0 && *(_BYTE *)(a1 + 1712) && *(float *)(a1 + 1728) == 0.0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10217F200);
    v7 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v8 = __p;
      if (v20 < 0)
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PedestrianStop DETECTED!,%s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10217F200);
      v16 = __p;
      if (v20 < 0)
        v16 = (void **)__p[0];
      v21 = 136315138;
      v22 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "PedestrianStop DETECTED!,%s", (const char *)&v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "virtual std::pair<BOOL, CFAbsoluteTime> CLHikingStopDetector::update(const CLWorkoutPredictorInputs &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10217F200);
  v10 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v11 = __p;
    if (v20 < 0)
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "PedestrianStop,%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10217F200);
    v13 = __p;
    if (v20 < 0)
      v13 = (void **)__p[0];
    v21 = 136315138;
    v22 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "PedestrianStop,%s", (const char *)&v21);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual std::pair<BOOL, CFAbsoluteTime> CLHikingStopDetector::update(const CLWorkoutPredictorInputs &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (v20 < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_100CF0094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100CF00C0(uint64_t a1, double *a2)
{
  unsigned __int8 v4;
  int v5;
  int v6;
  void *__p[2];
  char v8;
  __int128 v9;
  int v10;
  _QWORD v11[19];
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD v17[6];
  char v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[25];
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  __int16 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  _BYTE v49[11];
  int v50;
  double v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  unint64_t v101;
  __int16 v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v4 = atomic_load((unsigned __int8 *)&qword_102307BF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102307BF0))
  {
    v11[0] = 0x100000008;
    LODWORD(v11[1]) = 0;
    sub_100546300(qword_102307BD8, v11, 3uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_102307BD8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102307BF0);
  }
  v12 = 0;
  *(_OWORD *)v11 = xmmword_101BB1ED0;
  memset(&v11[2], 0, 135);
  v13 = xmmword_101BB1ED0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17[0] = 0;
  *(_QWORD *)((char *)v17 + 5) = 0;
  *(_QWORD *)((char *)&v17[1] + 6) = 0;
  v18 = 0;
  memset(&v17[3], 0, 24);
  v19 = xmmword_101BB1ED0;
  v20 = 0;
  v21 = 0;
  v22 = 0xFFEFFFFFFFFFFFFFLL;
  v33 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  v34 = 0;
  v35 = 0;
  v36 = 0xFFEFFFFFFFFFFFFFLL;
  v37 = 0;
  v38 = 0;
  v44 = 0;
  v45 = 0;
  v50 = 0;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v47 = 0u;
  v46 = 0u;
  v48 = 0;
  memset(v49, 0, sizeof(v49));
  v51 = -1.79769313e308;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v71 = 0;
  v72 = 0xFFEFFFFFFFFFFFFFLL;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0xFFEFFFFFFFFFFFFFLL;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0xFFEFFFFFFFFFFFFFLL;
  v84 = 0;
  v83 = 0;
  v85 = 0x80000000800000;
  v87 = 0;
  v86 = 0;
  v88 = xmmword_101BB1EE0;
  v89 = 0x80000000800000;
  v90 = 0u;
  v91 = 0u;
  v92 = 0;
  v93 = 0xFFEFFFFFFFFFFFFFLL;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0;
  v101 = 0xFFEFFFFFFFFFFFFFLL;
  v102 = 0;
  v103 = 0;
  v104 = 0xFFEFFFFFFFFFFFFFLL;
  v105 = 7;
  v106 = 0xFFEFFFFFFFFFFFFFLL;
  v107 = 0;
  v109 = 0;
  v108 = 0;
  v110 = 0;
  sub_1000D03AC(a2, qword_102307BD8, (uint64_t)v11);
  if (v51 == -1.79769313e308)
  {
    sub_1015A2E04(__p, "CLPedestrianStopDetector");
    sub_101069F5C(a2, (uint64_t *)__p, (uint64_t)qword_102307BD8);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(double *)&v9 = v51;
    BYTE8(v9) = v65;
    BYTE9(v9) = BYTE8(v61) == 1;
    v5 = v15;
    if (*((double *)&v13 + 1) == -1.79769313e308)
      v5 = 0;
    HIDWORD(v9) = v5;
    if (*(double *)&v11[1] == -1.79769313e308)
    {
      v6 = 0;
    }
    else
    {
      sub_1000CF518((uint64_t)v11, (uint64_t)__p);
      v6 = (int)__p[0];
    }
    v10 = v6;
    sub_10021C2E4((unsigned __int16 *)(a1 + 8), &v9);
  }
}

void sub_100CF043C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&qword_102307BF0);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF0474@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  double *v5;
  unint64_t v6;
  unsigned __int16 *v8;
  uint64_t v9;
  float32x2_t v10;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  float v25;
  const float *v26;
  unsigned int isTypeInVehicle;
  unsigned int v28;
  double v29;
  unsigned int v30;
  double v31;
  float v32;
  double v33;
  float v34;
  float v35;
  int8x8_t v36;
  float v37;
  int32x2_t v38;

  *(_OWORD *)(a3 + 8) = 0u;
  v5 = (double *)(a3 + 8);
  *(_OWORD *)(a3 + 24) = 0u;
  v6 = *(unsigned __int16 *)(result + 10);
  *(_BYTE *)a3 = v6 >= a2;
  if (v6 >= a2)
  {
    if (v6 - a2 >= v6)
    {
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      v8 = (unsigned __int16 *)(result + 8);
      v9 = -(uint64_t)a2;
      v10 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      v36 = _D0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
      v19 = 0.0;
      v20 = 0.0;
      do
      {
        v21 = v6 + v9;
        v22 = sub_100CF0678(v8, v6 + v9);
        v24 = v22;
        LOBYTE(v3) = *(_BYTE *)(v22 + 8);
        if (*(_BYTE *)(v22 + 9))
          v25 = 1.0;
        else
          v25 = 0.0;
        v26 = (const float *)(v22 + 12);
        v23.n128_u64[0] = (unint64_t)vld1_dup_f32(v26);
        v38 = (int32x2_t)v23.n128_u64[0];
        isTypeInVehicle = CLMotionActivity::isTypeInVehicle(*(unsigned int *)(v22 + 16), v23);
        result = CLMotionActivity::isTypeCycling(*(unsigned int *)(v24 + 16));
        v28 = result;
        v29 = 2.55999994;
        if (v21)
        {
          v37 = v25;
          v30 = v3;
          v31 = *(double *)v24;
          result = sub_100CF0678(v8, v21 - 1);
          v29 = v31 - *(double *)result;
          v3 = v30;
          v25 = v37;
        }
        v19 = v19 + (float)v3;
        v20 = v20 + v25;
        v10 = vadd_f32(v10, (float32x2_t)vand_s8((int8x8_t)vceq_s32(v38, (int32x2_t)0x300000001), v36));
        v17 = v17 + (float)isTypeInVehicle;
        v16 = v16 + (float)v28;
        v32 = v29;
        v18 = v18 + v32;
      }
      while (!__CFADD__(v9++, 1));
      v33 = v18;
      *v5 = v18;
      v34 = 0.0;
      if (v18 > 0.0)
      {
        v33 = v19 / v33 * 60.0;
        v34 = v33;
      }
      *(float *)(a3 + 16) = v34;
      if (a2)
      {
        *(float *)&v33 = (float)a2;
        *(float *)(a3 + 20) = v20 / (float)a2;
        *(float32x2_t *)(a3 + 24) = vdiv_f32(v10, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v33, 0));
        *(float *)(a3 + 32) = v17 / (float)a2;
        v35 = v16 / (float)a2;
LABEL_17:
        *(float *)(a3 + 36) = v35;
        return result;
      }
    }
    *(_QWORD *)(a3 + 28) = 0;
    *(_QWORD *)(a3 + 20) = 0;
    v35 = 0.0;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_100CF0678(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217F220);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217F220);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLHikingStopDetector::HistoryEntry>::operator[](const size_t) const [T = CLHikingStopDetector::HistoryEntry]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

_QWORD *sub_100CF0874(_QWORD *result)
{
  *result = off_10217F1C8;
  return result;
}

void sub_100CF0884(_QWORD *a1)
{
  *a1 = off_10217F1C8;
  operator delete();
}

void sub_100CF08A4(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100CF08D0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100CF08FC()
{
  if (qword_102307BF8 != -1)
    dispatch_once(&qword_102307BF8, &stru_10217F240);
  return qword_102311438;
}

void sub_100CF093C(id a1)
{
  operator new();
}

void sub_100CF097C()
{
  operator delete();
}

uint64_t sub_100CF09A0(uint64_t a1)
{
  std::mutex *v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  int v9;
  int v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _DWORD v15[4];
  uint8_t buf[8];
  std::__shared_weak_count *v17;

  *(_QWORD *)a1 = off_10217F270;
  *(_QWORD *)(a1 + 8) = 850045863;
  v2 = (std::mutex *)(a1 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 96) = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  HIBYTE(v14) = 0;
  sub_1001E4804(buf);
  v3 = sub_1001E4874(*(uint64_t *)buf, "EnableTrackRun", (BOOL *)&v14 + 7);
  v4 = v3;
  v5 = v17;
  if (!v17)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_5:
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (v4)
LABEL_6:
    *(_BYTE *)(a1 + 96) = HIBYTE(v14);
LABEL_7:
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217F2C0);
  v8 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(unsigned __int8 *)(a1 + 96);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#cltr,CLTrackRunEnablementController,EnableTrackRun,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217F2C0);
    v11 = *(unsigned __int8 *)(a1 + 96);
    v15[0] = 67240192;
    v15[1] = v11;
    LODWORD(v14) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,CLTrackRunEnablementController,EnableTrackRun,%{public}d", v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "CLTrackRunEnablementController::CLTrackRunEnablementController()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  std::mutex::unlock(v2);
  return a1;
}

void sub_100CF0C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  std::mutex *v14;

  std::mutex::unlock(v14);
  a13 = v13 + 72;
  sub_1008BC214((void ***)&a13);
  std::mutex::~mutex(v14);
  _Unwind_Resume(a1);
}

void sub_100CF0C5C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  std::mutex *v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int128 __dst;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;

  v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a2;
    v29 = *(_QWORD *)(a2 + 16);
  }
  v30 = *a3;
  sub_100270E34((uint64_t)v31, a4);
  v9 = *(_QWORD *)(a1 + 80);
  if (v9 >= *(_QWORD *)(a1 + 88))
  {
    v10 = sub_100CF18A4((uint64_t *)(a1 + 72), &__dst);
  }
  else
  {
    sub_1008BC3E8(a1 + 88, *(_QWORD **)(a1 + 80), &__dst);
    v10 = v9 + 64;
    *(_QWORD *)(a1 + 80) = v9 + 64;
  }
  *(_QWORD *)(a1 + 80) = v10;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217F2C0);
  v11 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = (void *)a2;
    else
      v12 = *(void **)a2;
    v13 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 6;
    *(_DWORD *)buf = 136446466;
    v25 = v12;
    v26 = 2050;
    v27 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#cltr,CLTrackRunEnablementController,addObserver,%{public}s,count,%{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217F2C0);
    if (*(char *)(a2 + 23) >= 0)
      v16 = (void *)a2;
    else
      v16 = *(void **)a2;
    v17 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 6;
    v20 = 136446466;
    v21 = v16;
    v22 = 2050;
    v23 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,CLTrackRunEnablementController,addObserver,%{public}s,count,%{public}lu", &v20, 22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunEnablementController::addObserver(const std::string &, const dispatch_queue_t &, const std::function<void (const BOOL)> &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v14 = v32;
  if (v32 == v31)
  {
    v15 = 4;
    v14 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_20;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_20:
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__dst);
  std::mutex::unlock(v8);
}

void sub_100CF0F38(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  sub_1008BB9D4(v2 - 144);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF0F84(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = *(unsigned __int8 *)(a1 + 96);
  std::mutex::unlock(v2);
  return v3;
}

void sub_100CF0FBC(uint64_t a1, unsigned __int8 **a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  unsigned __int8 *v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  unsigned __int8 *v28;
  __int16 v29;
  uint64_t v30;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  if (v5 == v6)
    goto LABEL_31;
  v7 = *((_BYTE *)a2 + 23);
  if (v7 >= 0)
    v8 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  else
    v8 = a2[1];
  if (v7 >= 0)
    v9 = (unsigned __int8 *)a2;
  else
    v9 = *a2;
  while (1)
  {
    v10 = *(unsigned __int8 *)(v5 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = (unsigned __int8 *)*(unsigned __int8 *)(v5 + 23);
    else
      v11 = *(unsigned __int8 **)(v5 + 8);
    if (v11 != v8)
      goto LABEL_19;
    if ((v10 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v5 + 23))
      goto LABEL_21;
    v12 = 0;
    while (*(unsigned __int8 *)(v5 + v12) == v9[v12])
    {
      if (v10 == ++v12)
        goto LABEL_21;
    }
LABEL_19:
    v5 += 64;
    if (v5 == v6)
      goto LABEL_31;
  }
  if (memcmp(*(const void **)v5, v9, *(_QWORD *)(v5 + 8)))
    goto LABEL_19;
LABEL_21:
  sub_1008BC6F8((uint64_t)buf, v5 + 64, v6, v5);
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 80);
  if (v15 != v13)
  {
    do
    {
      v15 -= 64;
      sub_1008BC298(a1 + 88, v15);
    }
    while (v15 != v14);
  }
  *(_QWORD *)(a1 + 80) = v14;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217F2C0);
  v16 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v17 = (unsigned __int8 *)a2;
    else
      v17 = *a2;
    v18 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 6;
    *(_DWORD *)buf = 136446466;
    v28 = v17;
    v29 = 2050;
    v30 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#cltr,CLTrackRunEnablementController,removeObserver,%{public}s,count,%{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217F2C0);
    if (*((char *)a2 + 23) >= 0)
      v19 = (unsigned __int8 *)a2;
    else
      v19 = *a2;
    v20 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 6;
    v23 = 136446466;
    v24 = v19;
    v25 = 2050;
    v26 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,CLTrackRunEnablementController,removeObserver,%{public}s,count,%{public}lu", &v23, 22);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunEnablementController::removeObserver(const std::string &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
LABEL_31:
  std::mutex::unlock(v4);
}

void sub_100CF12A4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100CF12BC(uint64_t a1, char a2)
{
  std::mutex *v4;
  NSObject *v5;
  int v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  std::mutex *v19;
  _QWORD block[5];
  __int128 __p;
  uint64_t v22;
  dispatch_queue_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  _DWORD v26[4];
  uint8_t buf[16];
  uint64_t v28;
  dispatch_queue_t queue;
  _QWORD v30[3];
  _QWORD *v31;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  *(_BYTE *)(a1 + 96) = a2;
  v19 = v4;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217F2C0);
  v5 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 96);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltr,CLTrackRunEnablementController,setEnablementState,is_enabled,%{public}d,alerting observers", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217F2C0);
    v16 = *(unsigned __int8 *)(a1 + 96);
    v26[0] = 67240192;
    v26[1] = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,CLTrackRunEnablementController,setEnablementState,is_enabled,%{public}d,alerting observers", v26, 8, v4);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunEnablementController::setEnablementState(BOOL)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v7 = *(__int128 **)(a1 + 72);
  v8 = *(__int128 **)(a1 + 80);
  if (v7 != v8)
  {
    while (1)
    {
      if (*((char *)v7 + 23) < 0)
      {
        sub_100115CE4(buf, *(void **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v9 = *v7;
        v28 = *((_QWORD *)v7 + 2);
        *(_OWORD *)buf = v9;
      }
      queue = (dispatch_queue_t)*((_QWORD *)v7 + 3);
      sub_100270E34((uint64_t)v30, (uint64_t)(v7 + 2));
      v10 = queue;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_100CF1690;
      block[3] = &unk_10217F280;
      block[4] = a1;
      if (SHIBYTE(v28) < 0)
      {
        sub_100115CE4(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        __p = *(_OWORD *)buf;
        v22 = v28;
      }
      v23 = queue;
      v11 = (uint64_t)v31;
      if (!v31)
        goto LABEL_16;
      if (v31 != v30)
        break;
      v25 = v24;
      (*(void (**)(_QWORD *, _BYTE *))(v30[0] + 24))(v30, v24);
LABEL_18:
      dispatch_async(v10, block);
      v12 = v25;
      if (v25 == v24)
      {
        v12 = v24;
        v13 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_23;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_23:
      if (SHIBYTE(v22) < 0)
        operator delete((void *)__p);
      v14 = v31;
      if (v31 == v30)
      {
        v14 = v30;
        v15 = 4;
        goto LABEL_29;
      }
      if (v31)
      {
        v15 = 5;
LABEL_29:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
      if (SHIBYTE(v28) < 0)
        operator delete(*(void **)buf);
      v7 += 4;
      if (v7 == v8)
        goto LABEL_33;
    }
    v11 = (*(uint64_t (**)(void))(*v31 + 16))();
LABEL_16:
    v25 = (_BYTE *)v11;
    goto LABEL_18;
  }
LABEL_33:
  std::mutex::unlock(v19);
}

void sub_100CF1634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF1690(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v3 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 96);
  v1 = *(_QWORD *)(a1 + 96);
  if (!v1)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t sub_100CF16D0(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return sub_100270E34(a1 + 72, a2 + 72);
}

void sub_100CF173C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_100CF1758(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t sub_100CF17BC(uint64_t a1)
{
  std::mutex *v2;
  void **v4;

  *(_QWORD *)a1 = off_10217F270;
  v2 = (std::mutex *)(a1 + 8);
  v4 = (void **)(a1 + 72);
  sub_1008BC214(&v4);
  std::mutex::~mutex(v2);
  return a1;
}

void sub_100CF1810(uint64_t a1)
{
  std::mutex *v1;
  void **v2;

  *(_QWORD *)a1 = off_10217F270;
  v1 = (std::mutex *)(a1 + 8);
  v2 = (void **)(a1 + 72);
  sub_1008BC214(&v2);
  std::mutex::~mutex(v1);
  operator delete();
}

void sub_100CF1878(id a1)
{
  qword_10229FC58 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

uint64_t sub_100CF18A4(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    sub_100259694();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1002697F0((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[64 * v3];
  v14 = &v8[64 * v7];
  sub_1008BC3E8((_DWORD)a1 + 16, v12, a2);
  v13 = v12 + 64;
  sub_100CF1990(a1, &v11);
  v9 = a1[1];
  sub_1008BC684(&v11);
  return v9;
}

void sub_100CF197C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1008BC684((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF1990(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100CF1A04((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100CF1A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 32;
    do
    {
      v10 = v9 - 32;
      v11 = *(_OWORD *)(v9 - 32);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(v9 - 16);
      *(_OWORD *)(v7 - 64) = v11;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(v9 - 8);
      sub_100CF1ACC(v7 - 32, v9);
      v7 = *((_QWORD *)&v17 + 1) - 64;
      *((_QWORD *)&v17 + 1) -= 64;
      v9 -= 64;
    }
    while (v10 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_100CF1B30((uint64_t)v14);
  return v12;
}

uint64_t sub_100CF1ACC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_100CF1B30(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1008BC634((uint64_t *)a1);
  return a1;
}

uint64_t sub_100CF1B64(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88) && *(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100CF1B9C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100CF1BCC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  std::string *v6;
  std::string::size_type size;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  double Current;
  _QWORD *v31;
  void *__p[2];
  uint64_t v34;
  double v35;
  std::string v36;
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;

  sub_1004E5E40((uint64_t)&v37);
  v4 = sub_100263F7C(&v37, (uint64_t)"{", 1);
  v5 = sub_100263F7C(v4, (uint64_t)"\"mac\": ", 7);
  v35 = *(double *)a1;
  sub_1000C2254(&v35, &v36);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v36;
  else
    v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    size = v36.__r_.__value_.__l.__size_;
  v8 = sub_100263F7C(v5, (uint64_t)v6, size);
  v9 = sub_100263F7C(v8, (uint64_t)", \"ssid\": ", 10);
  if (*((char *)a1 + 31) < 0)
  {
    sub_100115CE4(__p, (void *)a1[1], a1[2]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 1);
    v34 = a1[3];
  }
  if (v34 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v34 >= 0)
    v11 = HIBYTE(v34);
  else
    v11 = (uint64_t)__p[1];
  v12 = sub_100263F7C(v9, (uint64_t)v10, v11);
  v13 = sub_100263F7C(v12, (uint64_t)", \"rssi\": ", 10);
  v14 = (_QWORD *)std::ostream::operator<<(v13, *((unsigned int *)a1 + 8));
  v15 = sub_100263F7C(v14, (uint64_t)", \"mode\": ", 10);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *((unsigned int *)a1 + 9));
  v17 = sub_100263F7C(v16, (uint64_t)", \"channel\": ", 13);
  v18 = (_QWORD *)std::ostream::operator<<(v17, *((unsigned int *)a1 + 10));
  v19 = sub_100263F7C(v18, (uint64_t)", \"age\": ", 9);
  v20 = *v19;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v19 + *(_QWORD *)(v20 - 24) + 16) = 2;
  v21 = (_QWORD *)std::ostream::operator<<(v19, *((double *)a1 + 6));
  v22 = sub_100263F7C(v21, (uint64_t)", \"timestamp\": ", 15);
  v23 = *v22;
  *(_DWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(*v22 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v22 + *(_QWORD *)(v23 - 24) + 16) = 1;
  v24 = (_QWORD *)std::ostream::operator<<(v22, *((double *)a1 + 7));
  v25 = sub_100263F7C(v24, (uint64_t)", \"rssiFlags\": ", 15);
  std::ostream::operator<<(v25, *((unsigned int *)a1 + 17));
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (*((_BYTE *)a1 + 64))
  {
    v26 = sub_100263F7C(&v37, (uint64_t)", \"isApplePersonalHotspot\": ", 28);
    std::ostream::operator<<(v26, *((unsigned __int8 *)a1 + 64));
  }
  if (*((_BYTE *)a1 + 65))
  {
    v27 = sub_100263F7C(&v37, (uint64_t)", \"isMoving\": ", 14);
    std::ostream::operator<<(v27, *((unsigned __int8 *)a1 + 65));
  }
  if (*((double *)a1 + 10) > 0.0)
  {
    v28 = sub_100263F7C(&v37, (uint64_t)", \"notificationAge\": ", 21);
    v29 = *v28;
    *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(*v28 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v28 + *(_QWORD *)(v29 - 24) + 16) = 2;
    Current = CFAbsoluteTimeGetCurrent();
    std::ostream::operator<<(v28, vabdd_f64(Current, *((double *)a1 + 10)));
  }
  if (*((_BYTE *)a1 + 72))
  {
    v31 = sub_100263F7C(&v37, (uint64_t)", \"isAssociated\": ", 18);
    std::ostream::operator<<(v31, *((unsigned __int8 *)a1 + 72));
  }
  sub_100263F7C(&v37, (uint64_t)"}", 1);
  std::stringbuf::str(a2, v38);
  if (v39 < 0)
    operator delete((void *)v38[8]);
  std::streambuf::~streambuf(v38);
  return std::ios::~ios(&v40);
}

void sub_100CF1F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  sub_1004E5F2C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

double sub_100CF1F84(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 80));
}

uint64_t sub_100CF1FAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _BOOL8 v6;
  _QWORD *v7;
  void **v8;
  void *v9;
  void *__p[2];
  unsigned __int8 v12;
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_1004E5E40((uint64_t)&v13);
  v4 = sub_100263F7C(&v13, (uint64_t)"{", 1);
  v5 = sub_100263F7C(v4, (uint64_t)"\"isAssociated\": ", 16);
  if (*(_BYTE *)(a1 + 88))
    v6 = *(_DWORD *)(a1 + 40) > 0;
  else
    v6 = 0;
  std::ostream::operator<<(v5, v6);
  if (*(_BYTE *)(a1 + 88) && *(int *)(a1 + 40) >= 1)
  {
    v7 = sub_100263F7C(&v13, (uint64_t)", \"accessPoint\": ", 17);
    sub_100CF1BCC((uint64_t *)a1, __p);
    v8 = (v12 & 0x80u) == 0 ? __p : (void **)__p[0];
    v9 = (v12 & 0x80u) == 0 ? (void *)v12 : __p[1];
    sub_100263F7C(v7, (uint64_t)v8, (uint64_t)v9);
    if ((char)v12 < 0)
      operator delete(__p[0]);
  }
  sub_100263F7C(&v13, (uint64_t)"}", 1);
  std::stringbuf::str(a2, v14);
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_100CF2120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1004E5F2C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

const char *sub_100CF2150(int a1)
{
  if (a1 > 13)
    return "-";
  else
    return (&off_10217F2E0)[a1];
}

const char *sub_100CF2174(unsigned int a1)
{
  NSObject *v3;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  unsigned int v7;

  if (a1 < 3)
    return (&off_10217F3F8)[a1];
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217F3B8);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "@WifiService_Type, unsupported scan source %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217F3B8);
    v5[0] = 67240192;
    v5[1] = a1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "@WifiService_Type, unsupported scan source %{public}d", v5, 8);
    sub_100512490("Generic", 1, 0, 0, "const char *CLWifiService_Type::toString(CLWifiService_Type::ScanSource)", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return "?";
}

BOOL sub_100CF233C(int a1)
{
  _BOOL8 result;
  NSObject *v3;
  _BOOL4 v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if ((a1 + 1) < 0xF)
    return (((_WORD)a1 + 1) & 0x7FFF) == 13;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217F3B8);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "@WifiService_Type, unsupported scan type %{public}d", buf, 8u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217F3B8);
    v6[0] = 67240192;
    v6[1] = a1;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "@WifiService_Type, unsupported scan type %{public}d", v6, 8);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService_Type::isLocationScanTypeOn5GHzBand(ScanType)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
    return 0;
  }
  return result;
}

unsigned int **sub_100CF250C@<X0>(unsigned int **result@<X0>, std::string *a2@<X8>)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type v10;
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  if (*result == result[1])
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v3 = result;
    sub_1004E5E40((uint64_t)&v11);
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        v6 = (_QWORD *)std::ostream::operator<<(&v11, *v4);
        sub_100263F7C(v6, (uint64_t)",", 1);
        ++v4;
      }
      while (v4 != v5);
    }
    std::stringbuf::str(a2, v12);
    v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v8 = (char)v7;
    v9 = (std::string::size_type)a2 + v7;
    if (v8 >= 0)
    {
      v10 = (std::string::size_type)a2;
    }
    else
    {
      v9 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
      v10 = a2->__r_.__value_.__r.__words[0];
    }
    std::string::erase(a2, ~v10 + v9, 1uLL);
    if (v13 < 0)
      operator delete((void *)v12[8]);
    std::streambuf::~streambuf(v12);
    return (unsigned int **)std::ios::~ios(&v14);
  }
  return result;
}

void sub_100CF2640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100CF2670@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 31))
      goto LABEL_3;
LABEL_7:
    sub_101925AA0();
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_7;
LABEL_3:
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == -1)
    sub_101925C14();
  if ((*(_BYTE *)(a1 + 31) & 0x80) != 0)
  {
    sub_100115CE4(&v7, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    v4 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  v5 = *(_DWORD *)(a1 + 36);
  result = *(double *)(a1 + 48);
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 24) = v5;
  *(_DWORD *)(a2 + 28) = v4;
  *(double *)(a2 + 32) = result;
  return result;
}

uint64_t sub_100CF2714(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v3 = result;
    v4 = *a2;
    v5 = a2[1];
    if (*a2 != v5)
    {
      while (1)
      {
        v6 = *(_QWORD *)v4;
        v10 = *(_QWORD *)v3;
        v11 = v6;
        if (sub_10009483C(&v11, &v10))
          break;
        v4 += 88;
        if (v4 == v5)
        {
          v4 = v5;
          break;
        }
      }
      if (v4 != a2[1])
      {
        *(_QWORD *)v4 = *(_QWORD *)v3;
        result = (uint64_t)std::string::operator=((std::string *)(v4 + 8), (const std::string *)(v3 + 8));
        v8 = *(_OWORD *)(v3 + 48);
        v7 = *(_OWORD *)(v3 + 64);
        v9 = *(_OWORD *)(v3 + 32);
        *(_QWORD *)(v4 + 80) = *(_QWORD *)(v3 + 80);
        *(_OWORD *)(v4 + 48) = v8;
        *(_OWORD *)(v4 + 64) = v7;
        *(_OWORD *)(v4 + 32) = v9;
        return result;
      }
      v4 = a2[1];
    }
    if (v4 >= a2[2])
    {
      result = sub_100279DEC(a2, v3);
    }
    else
    {
      sub_100279D64((uint64_t)a2, v3);
      result = v4 + 88;
    }
    a2[1] = result;
  }
  return result;
}

void sub_100CF27E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  __int128 v5;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = (_BYTE *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_100115CE4(v4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  }
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(CFAbsoluteTime *)(a2 + 56) = CFAbsoluteTimeGetCurrent();
}

void sub_100CF2868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100CF2884(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  _BYTE *v4;
  __int128 v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  __int128 __p;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 88))
    v3 = *(_DWORD *)(a1 + 40) < 1;
  else
    v3 = 1;
  if (v3)
  {
    sub_10031F08C((_BYTE *)a2, a1);
  }
  else
  {
    sub_100CF27E8(a1, (uint64_t)&v8);
    *(_QWORD *)a2 = v8;
    v4 = (_BYTE *)(a2 + 8);
    if (SHIBYTE(v10) < 0)
    {
      sub_100115CE4(v4, (void *)__p, *((unint64_t *)&__p + 1));
      v6 = SHIBYTE(v10);
      v7 = v12;
      *(_OWORD *)(a2 + 32) = v11;
      *(_OWORD *)(a2 + 48) = v7;
      *(_OWORD *)(a2 + 64) = v13;
      *(_QWORD *)(a2 + 80) = v14;
      *(_BYTE *)(a2 + 88) = 1;
      if (v6 < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_OWORD *)v4 = __p;
      *(_QWORD *)(a2 + 24) = v10;
      v5 = v12;
      *(_OWORD *)(a2 + 32) = v11;
      *(_OWORD *)(a2 + 48) = v5;
      *(_OWORD *)(a2 + 64) = v13;
      *(_QWORD *)(a2 + 80) = v14;
      *(_BYTE *)(a2 + 88) = 1;
    }
  }
}

void sub_100CF2970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100CF298C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100CF29B8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100CF29E4()
{
  uint64_t v0;
  __int128 v7;
  uint64_t v8;

  byte_102311440 = 0;
  byte_102311498 = 0;
  __cxa_atexit((void (*)(void *))sub_100CF1B64, &byte_102311440, (void *)&_mh_execute_header);
  v0 = nullsub_34(0);
  sub_1015A2E04(&v7, "");
  qword_1023114A0 = v0;
  *(_OWORD *)byte_1023114A8 = v7;
  *(_QWORD *)&byte_1023114A8[16] = v8;
  v7 = 0uLL;
  v8 = 0;
  *(_QWORD *)&xmmword_1023114C0 = -100;
  DWORD2(xmmword_1023114C0) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  xmmword_1023114D0 = _Q0;
  LOWORD(xmmword_1023114E0) = 256;
  DWORD1(xmmword_1023114E0) = 0;
  BYTE8(xmmword_1023114E0) = 0;
  qword_1023114F0 = 0;
  __cxa_atexit((void (*)(void *))sub_100CF1B9C, &qword_1023114A0, (void *)&_mh_execute_header);
  sub_1015A2E04(&v7, "");
  xmmword_1023114F8 = v7;
  qword_102311508 = v8;
  v8 = 0;
  v7 = 0uLL;
  qword_102311510 = -1;
  qword_102311518 = 0xBFF0000000000000;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, &xmmword_1023114F8, (void *)&_mh_execute_header);
}

void sub_100CF2B04()
{
  operator new();
}

void sub_100CF2B44()
{
  operator delete();
}

void sub_100CF2B6C(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLKeyboardCoverState", 1);
}

void sub_100CF2C1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1009BAD18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF2C30(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t result;
  double Current;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = sub_100CF3918(a1, "AppleHIDKeyboardEventDriverV2", CFSTR("RequiresCompassResetOnConnect"));
  result = sub_100CF3918(v2, "IOAccessoryIDBusHIDDevice", CFSTR("RequiresCompassResetOnConnect"));
  v7 = v2 | result;
  if (*(unsigned __int8 *)(a1 + 81) != (v2 | result))
  {
    *(_BYTE *)(a1 + 81) = v2 | result;
    if (((v2 | result) & 1) != 0)
      Current = 1.79769313e308;
    else
      Current = CFAbsoluteTimeGetCurrent();
    *(double *)(a1 + 88) = Current;
    v5 = sub_1001FD94C();
    sub_10018A4CC(v5, "LastKeyboardDisconnect", (const void *)(a1 + 88));
    v6 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 944))(v6);
    return sub_10014C2F4(a1, 0, (uint64_t)&v7, 1);
  }
  return result;
}

_QWORD *sub_100CF2CF4(_QWORD *a1)
{
  *a1 = off_10217F440;
  sub_100CF2D58((uint64_t)a1, 0, 0);
  return sub_1009BAD18(a1);
}

void sub_100CF2D34(_QWORD *a1)
{
  sub_100CF2CF4(a1);
  operator delete();
}

void sub_100CF2D58(uint64_t a1, int a2, unint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      if (!*(_BYTE *)(a1 + 80))
      {
        if (qword_102307C00 != -1)
          dispatch_once(&qword_102307C00, &stru_10217F410);
        sub_100CF2FEC(qword_102311520);
      }
      if (a3 >= 2)
        sub_10014C2F4(a1, 0, a1 + 81, 1);
    }
    else
    {
      if (qword_102307C00 != -1)
        dispatch_once(&qword_102307C00, &stru_10217F410);
      sub_100CF2E1C(qword_102311520);
    }
  }
}

void sub_100CF2E1C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _QWORD v6[5];
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_10217F488);
  v2 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistering for keyboard updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217F488);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "unregistering for keyboard updates", v7, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLKeyboardCoverState::unregisterForKeyboardUpdates()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  v3 = sub_100127B9C();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100CF37CC;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  sub_1000A50A8(v3, (uint64_t)v6);
  *(_BYTE *)(a1 + 80) = 0;
}

void sub_100CF2FEC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _QWORD v6[5];
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_10217F488);
  v2 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering for keyboard updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217F488);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "registering for keyboard updates", v7, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  v3 = sub_100127B9C();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100CF3218;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  sub_1000A50A8(v3, (uint64_t)v6);
  *(_BYTE *)(a1 + 80) = 1;
}

uint64_t sub_100CF31C0(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result;
  io_object_t v5;

  result = IOIteratorNext(iterator);
  if ((_DWORD)result)
  {
    v5 = result;
    do
    {
      sub_100CF2C30(a1);
      IOObjectRelease(v5);
      result = IOIteratorNext(iterator);
      v5 = result;
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_100CF3218(uint64_t a1)
{
  uint64_t v1;
  IONotificationPortRef v2;
  IONotificationPort *v3;
  BOOL v4;
  NSObject *v5;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoopSource *v7;
  __CFRunLoopSource *v8;
  CFRunLoopSourceRef v9;
  BOOL v10;
  __CFRunLoopSource *v13;
  __CFRunLoop *v14;
  __CFRunLoop *v15;
  __CFRunLoop *v16;
  __CFRunLoop *v17;
  IONotificationPort *v18;
  const __CFDictionary *v19;
  kern_return_t v20;
  IONotificationPort *v21;
  const __CFDictionary *v22;
  kern_return_t v23;
  IONotificationPort *v24;
  const __CFDictionary *v25;
  kern_return_t v26;
  IONotificationPort *v27;
  const __CFDictionary *v28;
  kern_return_t v29;
  NSObject *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  _WORD v35[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 32) = IONotificationPortCreate(kIOMainPortDefault);
  *(_QWORD *)(v1 + 40) = IONotificationPortCreate(kIOMainPortDefault);
  *(_QWORD *)(v1 + 48) = IONotificationPortCreate(kIOMainPortDefault);
  v2 = IONotificationPortCreate(kIOMainPortDefault);
  *(_QWORD *)(v1 + 56) = v2;
  v3 = *(IONotificationPort **)(v1 + 32);
  if (v3 && *(_QWORD *)(v1 + 40) && (*(_QWORD *)(v1 + 48) ? (v4 = v2 == 0) : (v4 = 1), !v4))
  {
    RunLoopSource = IONotificationPortGetRunLoopSource(v3);
    v7 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 40));
    v8 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 48));
    v9 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 56));
    if (RunLoopSource)
      v10 = v7 == 0;
    else
      v10 = 1;
    if (v10 || v8 == 0 || v9 == 0)
    {
      if (qword_102307C00 != -1)
        dispatch_once(&qword_102307C00, &stru_10217F410);
      sub_100CF2E1C(qword_102311520);
    }
    else
    {
      v13 = v9;
      sub_100127B9C();
      v14 = (__CFRunLoop *)sub_1001AD8D0();
      CFRunLoopAddSource(v14, RunLoopSource, kCFRunLoopDefaultMode);
      sub_100127B9C();
      v15 = (__CFRunLoop *)sub_1001AD8D0();
      CFRunLoopAddSource(v15, v7, kCFRunLoopDefaultMode);
      sub_100127B9C();
      v16 = (__CFRunLoop *)sub_1001AD8D0();
      CFRunLoopAddSource(v16, v8, kCFRunLoopDefaultMode);
      sub_100127B9C();
      v17 = (__CFRunLoop *)sub_1001AD8D0();
      CFRunLoopAddSource(v17, v13, kCFRunLoopDefaultMode);
      v18 = *(IONotificationPort **)(v1 + 32);
      v19 = IOServiceMatching("AppleHIDKeyboardEventDriverV2");
      v20 = IOServiceAddMatchingNotification(v18, "IOServiceFirstMatch", v19, (IOServiceMatchingCallback)sub_100CF31C0, (void *)v1, (io_iterator_t *)(v1 + 64));
      v21 = *(IONotificationPort **)(v1 + 40);
      v22 = IOServiceMatching("AppleHIDKeyboardEventDriverV2");
      v23 = IOServiceAddMatchingNotification(v21, "IOServiceTerminate", v22, (IOServiceMatchingCallback)sub_100CF31C0, (void *)v1, (io_iterator_t *)(v1 + 68));
      v24 = *(IONotificationPort **)(v1 + 48);
      v25 = IOServiceMatching("IOAccessoryIDBusHIDDevice");
      v26 = IOServiceAddMatchingNotification(v24, "IOServiceFirstMatch", v25, (IOServiceMatchingCallback)sub_100CF31C0, (void *)v1, (io_iterator_t *)(v1 + 72));
      v27 = *(IONotificationPort **)(v1 + 56);
      v28 = IOServiceMatching("IOAccessoryIDBusHIDDevice");
      v29 = IOServiceAddMatchingNotification(v27, "IOServiceTerminate", v28, (IOServiceMatchingCallback)sub_100CF31C0, (void *)v1, (io_iterator_t *)(v1 + 76));
      if (v20 || v23 || v26 || v29)
      {
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_10217F488);
        v30 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning Failed to register for keyboard updates. Could not register for notifications from  AppleHIDKeyboardEventDriverV2 service and IOAccessoryIDBusHIDDevice service (for kIOFirstMatchNotification and kIOTerminatedNotification).", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_10217F488);
          v35[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "#Warning Failed to register for keyboard updates. Could not register for notifications from  AppleHIDKeyboardEventDriverV2 service and IOAccessoryIDBusHIDDevice service (for kIOFirstMatchNotification and kIOTerminatedNotification).", v35, 2);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()_block_invoke", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        if (qword_102307C00 != -1)
          dispatch_once(&qword_102307C00, &stru_10217F410);
        sub_100CF2E1C(qword_102311520);
      }
      else
      {
        sub_100CF31C0(v1, *(_DWORD *)(v1 + 64));
        sub_100CF31C0(v1, *(_DWORD *)(v1 + 68));
        sub_100CF31C0(v1, *(_DWORD *)(v1 + 72));
        sub_100CF31C0(v1, *(_DWORD *)(v1 + 76));
      }
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10217F488);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Failed to register for keyboard updates. Could not create KeyboardConnectNotificationPort and KeyboardConnectNotificationPort", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10217F488);
      v35[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "#Warning Failed to register for keyboard updates. Could not create KeyboardConnectNotificationPort and KeyboardConnectNotificationPort", v35, 2);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()_block_invoke", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
  }
}

uint64_t sub_100CF37CC(uint64_t a1)
{
  uint64_t v1;
  IONotificationPort *v2;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v4;
  __CFRunLoop *v5;
  IONotificationPort *v6;
  CFRunLoopSourceRef v7;
  __CFRunLoopSource *v8;
  __CFRunLoop *v9;
  IONotificationPort *v10;
  CFRunLoopSourceRef v11;
  __CFRunLoopSource *v12;
  __CFRunLoop *v13;
  IONotificationPort *v14;
  CFRunLoopSourceRef v15;
  __CFRunLoopSource *v16;
  __CFRunLoop *v17;
  io_object_t v18;
  io_object_t v19;
  io_object_t v20;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(IONotificationPort **)(v1 + 32);
  if (v2)
  {
    RunLoopSource = IONotificationPortGetRunLoopSource(v2);
    if (RunLoopSource)
    {
      v4 = RunLoopSource;
      sub_100127B9C();
      v5 = (__CFRunLoop *)sub_1001AD8D0();
      CFRunLoopRemoveSource(v5, v4, kCFRunLoopDefaultMode);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 32));
    *(_QWORD *)(v1 + 32) = 0;
  }
  v6 = *(IONotificationPort **)(v1 + 40);
  if (v6)
  {
    v7 = IONotificationPortGetRunLoopSource(v6);
    if (v7)
    {
      v8 = v7;
      sub_100127B9C();
      v9 = (__CFRunLoop *)sub_1001AD8D0();
      CFRunLoopRemoveSource(v9, v8, kCFRunLoopDefaultMode);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 40));
    *(_QWORD *)(v1 + 40) = 0;
  }
  v10 = *(IONotificationPort **)(v1 + 48);
  if (v10)
  {
    v11 = IONotificationPortGetRunLoopSource(v10);
    if (v11)
    {
      v12 = v11;
      sub_100127B9C();
      v13 = (__CFRunLoop *)sub_1001AD8D0();
      CFRunLoopRemoveSource(v13, v12, kCFRunLoopDefaultMode);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 48));
    *(_QWORD *)(v1 + 48) = 0;
  }
  v14 = *(IONotificationPort **)(v1 + 56);
  if (v14)
  {
    v15 = IONotificationPortGetRunLoopSource(v14);
    if (v15)
    {
      v16 = v15;
      sub_100127B9C();
      v17 = (__CFRunLoop *)sub_1001AD8D0();
      CFRunLoopRemoveSource(v17, v16, kCFRunLoopDefaultMode);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 56));
    *(_QWORD *)(v1 + 56) = 0;
  }
  v18 = *(_DWORD *)(v1 + 64);
  if (v18)
  {
    IOObjectRelease(v18);
    *(_DWORD *)(v1 + 64) = 0;
  }
  v19 = *(_DWORD *)(v1 + 68);
  if (v19)
  {
    IOObjectRelease(v19);
    *(_DWORD *)(v1 + 68) = 0;
  }
  v20 = *(_DWORD *)(v1 + 72);
  if (v20)
  {
    IOObjectRelease(v20);
    *(_DWORD *)(v1 + 72) = 0;
  }
  result = *(unsigned int *)(v1 + 76);
  if ((_DWORD)result)
  {
    result = IOObjectRelease(result);
    *(_DWORD *)(v1 + 76) = 0;
  }
  return result;
}

BOOL sub_100CF3918(int a1, char *name, const __CFString *a3)
{
  const __CFDictionary *v4;
  io_object_t v5;
  io_object_t v6;
  BOOL v7;
  const __CFBoolean *CFProperty;
  const __CFBoolean *v9;
  CFTypeID v10;
  io_iterator_t existing;

  existing = 0;
  v4 = IOServiceMatching(name);
  IOServiceGetMatchingServices(kIOMainPortDefault, v4, &existing);
  v5 = IOIteratorNext(existing);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(v6, a3, kCFAllocatorDefault, 0);
      if (CFProperty)
      {
        v9 = CFProperty;
        v10 = CFGetTypeID(CFProperty);
        if (v10 == CFBooleanGetTypeID())
        {
          v7 = CFBooleanGetValue(v9) != 0;
          CFRelease(v9);
        }
      }
      IOObjectRelease(v6);
      v6 = IOIteratorNext(existing);
    }
    while (v6);
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t sub_100CF3A00()
{
  uint64_t v0;
  io_registry_entry_t v1;
  io_object_t v2;
  unsigned int v4;

  v0 = 0xFFFFFFFFLL;
  v4 = -1;
  v1 = sub_1011FE8B8(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "AppleHIDKeyboardEventDriverV2"));
  if (v1)
  {
    v2 = v1;
    sub_1011FE8EC(&v4, v1, CFSTR("ProductID"));
    IOObjectRelease(v2);
    return v4;
  }
  return v0;
}

void sub_100CF3A6C(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

double sub_100CF3A98(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10213D2B0;
  *(_DWORD *)(a1 + 8) = 5;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  result = 2.22507386e-308;
  *(_OWORD *)(a1 + 88) = xmmword_101BB26B0;
  return result;
}

double sub_100CF3ADC(uint64_t a1, double a2)
{
  double v2;
  double result;

  v2 = a2 - *(double *)(a1 + 88);
  result = 0.0;
  if (v2 < 10.0)
    return *(double *)(a1 + 96);
  return result;
}

void sub_100CF3AFC(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;

  v4 = *(double *)(a1 + 88);
  v5 = a2 - v4;
  if (v5 >= 10.0)
  {
    sub_10047F1D4((_QWORD *)a1);
    *(_QWORD *)(a1 + 96) = 0;
    goto LABEL_9;
  }
  if (v4 == 2.22507386e-308)
  {
LABEL_9:
    *(double *)(a1 + 88) = a2;
    return;
  }
  v7 = v5;
  sub_10009E858(a1, &v7);
  *(double *)(a1 + 88) = a2;
  v7 = 0.0;
  if (*(_DWORD *)(a1 + 80) >= 3u && sub_10009E784((_QWORD *)a1, 2, &v7))
  {
    v6 = 0.0;
    if (v7 > 0.0)
      v6 = 1.0 / v7;
    *(double *)(a1 + 96) = v6;
  }
}

void sub_100CF3DF0()
{
  operator delete();
}

uint64_t sub_100CF3E1C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSArray *v6;
  uint64_t result;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _OWORD v16[7];
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint8_t buf[4];
  _BYTE v21[12];

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217F4D0);
  v4 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Finished insertion startTime %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217F4D0);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = 134217984;
    v19 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Finished insertion startTime %f", COERCE_DOUBLE(&v18));
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "-[CMStrideCalibrationDatabase initWithSilo:]_block_invoke", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v6 = sub_101152884(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(double *)(a2 + 72));
  if (-[NSArray count](v6, "count") >= 0x33)
  {
    objc_msgSend(-[NSArray objectAtIndex:](v6, "objectAtIndex:", 50), "getBytes:length:", buf, 120);
    sub_101150C48(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(double *)&v21[4]);
  }
  result = objc_opt_respondsToSelector(objc_msgSend(*(id *)(a1 + 32), "delegate"), "strideCalibrationDatabase:didInsertEntry:");
  if ((result & 1) != 0)
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_OWORD *)(a2 + 80);
    v16[4] = *(_OWORD *)(a2 + 64);
    v16[5] = v10;
    v16[6] = *(_OWORD *)(a2 + 96);
    v17 = *(_QWORD *)(a2 + 112);
    v11 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v11;
    v12 = *(_OWORD *)(a2 + 48);
    v16[2] = *(_OWORD *)(a2 + 32);
    v16[3] = v12;
    return (uint64_t)objc_msgSend(v8, "strideCalibrationDatabase:didInsertEntry:", v9, v16);
  }
  return result;
}

uint64_t sub_100CF4238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 8);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 344))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_100820ED0(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217F4F0);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10217F4F0);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLStrideCalEntry>::addSuspectRecord(const T &) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_100CF4E08(v12, (__int128 *)a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217F4F0);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217F4F0);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_100CF4600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CF4BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100479F9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100CF4CE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CF4DDC(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

__n128 sub_100CF4E08(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 34 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100CF4EF8(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x22)) + 120 * (v7 % 0x22);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  result = (__n128)a2[4];
  v13 = a2[5];
  v14 = a2[6];
  *(_QWORD *)(v8 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(v8 + 80) = v13;
  *(_OWORD *)(v8 + 96) = v14;
  *(__n128 *)(v8 + 64) = result;
  ++a1[5];
  return result;
}

void sub_100CF4ECC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100CF4EF8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x22;
  v4 = v2 - 34;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100CF51C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100CF520C(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100CF52C0((uint64_t)a1, "VO2MaxStagingSummaryHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_10217F520;
  a1[9] = off_10217F5D8;
  sub_100CF648C((uint64_t)a1);
  return a1;
}

void sub_100CF5294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_100CF573C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF52C0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_10217F9F8;
  *(_QWORD *)(a1 + 72) = off_10217FAA0;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10217F9F8;
  *(_QWORD *)(a1 + 72) = off_10217FAA0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 264) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 408) = 12000;
  *(_QWORD *)(a1 + 416) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 424));
  *(_QWORD *)(a1 + 424) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100CF5690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[52] = off_102138DA8;
  sub_100427950(v27);
  sub_100CF8838(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100CF5734()
{
  JUMPOUT(0x100CF5714);
}

_QWORD *sub_100CF573C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10217FAA0;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10217F9F8;
  a1[52] = off_102138DA8;
  sub_100427950(a1 + 53);
  sub_100CF8838(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100CF57BC(uint64_t a1)
{
  return sub_100CF573C((_QWORD *)(a1 - 72));
}

void sub_100CF57C4(_QWORD *a1)
{
  sub_100CF573C(a1);
  operator delete();
}

void sub_100CF57E8(uint64_t a1)
{
  sub_100CF573C((_QWORD *)(a1 - 72));
  operator delete();
}

_QWORD *sub_100CF5810@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxStagingSummaryHistory");
}

_QWORD *sub_100CF5820@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxStagingSummaryHistory");
}

uint64_t sub_100CF5830(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingSummaryHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_100CF5948(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF5968(uint64_t a1, uint64_t a2)
{
  return sub_100CF5830(a1 - 72, a2);
}

uint64_t sub_100CF5970(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result;
  char out[40];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingSummaryHistory WHERE sessionId = ?");
  }
  return result;
}

void sub_100CF5BA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF5BD0(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxStagingSummaryHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100CF5ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF5F00(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_100CF6814(a1, a2);
  return 0;
}

uint64_t sub_100CF5F5C(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM VO2MaxStagingSummaryHistory");
  return 0xFFFFFFFFLL;
}

void sub_100CF5FFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF6020(uint64_t a1)
{
  return sub_100CF5F5C(a1 - 72);
}

uint64_t sub_100CF6028(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxStagingSummaryHistory WHERE pointCount > 0 AND startTime > ? and startTime < ? ORDER BY startTime DESC");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_10217F668);
  v4 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxStagingSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_10217F668);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxStagingSummaryHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxStagingSummaryRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<VO2MaxStagingSummary> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_100CF6460(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF648C(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
    return sub_100634364(*(_QWORD *)(a1 + 80), "VO2MaxStagingSummaryHistory", (const char **)&off_10217F688, (const std::string::value_type **)&off_1022FAEE8, 0);
  return result;
}

uint64_t sub_100CF64E0(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingSummaryHistory");
  return result;
}

void sub_100CF6574(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF6594(uint64_t a1)
{
  return sub_100CF64E0(a1 - 72);
}

uint64_t sub_100CF659C(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxStagingSummaryHistory (startTime, workoutType, sessionId, durationInSeconds, pointCount, hrMax, hrMin, meanHr, meanVo2, meanSpeed, meanGrade, meanHrConfidence, meanHrCadenceAgreement, meanCadence, vo2MaxModelSource, sessionType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  return result;
}

void sub_100CF67E0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF6808(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100CF6814(a2, a3);
}

uint64_t sub_100CF6814(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  const unsigned __int8 *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 16) = sqlite3_column_int(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_text(v7, 3);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 24));
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 4);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 48) = sqlite3_column_int(v10, 5);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v11, 6);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v12, 7);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v13, 8);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v14, 9);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 104) = sqlite3_column_double(v15, 10);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v16, 11);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v17, 12);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v18, 13);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v19, 14);
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 176) = sqlite3_column_int(v20, 15);
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  result = sqlite3_column_int(v21, 16);
  *(_DWORD *)(a2 + 180) = result;
  return result;
}

uint64_t sub_100CF6998(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *__p[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101925D88(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100CF6DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF6E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10217FAE0);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217FAE0);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217FAE0);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100CF7450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100CF7480(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  result = (__n128)a3[8];
  v10 = a3[9];
  v11 = a3[10];
  *(_QWORD *)(a2 + 176) = *((_QWORD *)a3 + 22);
  *(_OWORD *)(a2 + 144) = v10;
  *(_OWORD *)(a2 + 160) = v11;
  *(__n128 *)(a2 + 128) = result;
  return result;
}

id *sub_100CF74BC(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  double v39;
  id v40[2];
  int v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;

  v40[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v40[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v40);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v49 = 0;
  v50 = 1.79769313e308;
  v51 = 0;
  v52 = 0x7FEFFFFFFFFFFFFFLL;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v53 = 0u;
  v54 = 0u;
  v56 = 0u;
  v55 = 0u;
  v61 = 1;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v49);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217FAE0);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217FAE0);
        LOWORD(v41) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v41, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v50;
    v9 = v7 - v50;
    if (v7 - v50 < 0.0)
      v9 = -(v7 - v50);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217FAE0);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v46 = v50;
        v47 = 2050;
        v48 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217FAE0);
        v31 = *((_QWORD *)a2 + 1);
        v41 = 134349312;
        v42 = v50;
        v43 = 2050;
        v44 = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v41, 22);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v50;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217FAE0);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v46 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10217FAE0);
          v34 = *((double *)a2 + 1);
          v41 = 134217984;
          v42 = v34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v41));
          v36 = (uint8_t *)v35;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v39 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10217FAE0);
        v18 = v39;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v46 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217FAE0);
        v41 = 134217984;
        v42 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v41));
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, &v49, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  v24 = a2[4];
  v25 = a2[5];
  v26 = a2[7];
  *(_OWORD *)(a1 + 320) = a2[6];
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 304) = v25;
  v27 = a2[8];
  v28 = a2[9];
  v29 = a2[10];
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v28;
  *(_OWORD *)(a1 + 384) = v29;
  *(_OWORD *)(a1 + 352) = v27;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v40);
}

void sub_100CF7C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF7C94(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101925EF4(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100CF7EF4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101926060(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100CF812C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019261CC(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_100CF8354(uint64_t a1)
{
  return sub_100CF6E60(a1 - 72);
}

void sub_100CF835C(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_100CF8388(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_101926338(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v17 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100CF879C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100CF880C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100CF8838(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 11;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 22;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100CF8BD8(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100CF8C04()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C215B8;
      v1[3] = unk_101C215C8;
      v1[4] = xmmword_101C215D8;
      v1[0] = xmmword_101C21598;
      v1[1] = unk_101C215A8;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100CF8CD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF8CF0()
{
  sub_1015A2E04(qword_102307C08, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307C08, (void *)&_mh_execute_header);
}

uint64_t sub_100CF8D34(uint64_t a1, uint64_t a2, double a3)
{
  _BYTE v7[232];

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48)))
  {
    (*(void (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), v7, a3);
    if (v7[208])
      sub_1004C5730(*(_QWORD *)(a2 + 8));
  }
  return nullsub_1532(a1 + 8, a2, a3);
}

uint64_t sub_100CF8DE8(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 48))(*(_QWORD *)(a3 + 8));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a3 + 40) + 48))(*(_QWORD *)(a3 + 40), a1);
  return result;
}

void sub_100CF8E44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  int v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  double v29;
  __int16 v30;
  _BYTE v31[10];
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  sub_101401A58(a1 + 8, a2, (uint64_t)buf);
  v5 = *(float *)&v31[6];
  *(_DWORD *)(a3 + 4) = *(_DWORD *)&v31[6];
  v6 = 3.0;
  if (v5 >= 3.0)
    v7 = v5;
  else
    v7 = 3.0;
  v8 = 0.0;
  if (sub_100219944(a2) && *(double *)(a2 + 600) < *(double *)a2)
  {
    v9 = *(double *)(a2 + 560);
    v10 = *(float *)(a2 + 1368);
    v11 = (*(float *)(a2 + 1380) - v9) / (*(float *)(a2 + 1380) - *(float *)(a2 + 1376));
    v12 = v10 * sub_10108B14C(v11, *(float *)(a2 + 1372));
    v8 = v12 * 0.72;
    *(float *)a3 = v12 * 0.72;
    v6 = 1.6;
    if ((float)(v12 * 0.72) >= 1.6)
      v7 = v12 * 0.72;
    else
      v7 = 1.6;
  }
  *(float *)(a3 + 28) = v7;
  *(float *)(a3 + 20) = v7;
  if (v7 == v6)
    v13 = 3;
  else
    v13 = v7 == v8;
  *(_DWORD *)(a3 + 24) = v13;
  *(float *)(a3 + 12) = v5;
  *(_DWORD *)(a3 + 32) = v13;
  *(_DWORD *)(a3 + 36) = 19;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10217FB70);
  v14 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219008;
    v29 = v6;
    v30 = 2048;
    *(double *)v31 = v8;
    *(_WORD *)&v31[8] = 2048;
    v32 = v5;
    v33 = 2048;
    v34 = v7;
    v35 = 1024;
    v36 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TaiChi,baselineMets,%.1f,metsHR,%.1f,metsWR,%.1f,userMets,%.1f,userMetsSource,%d", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10217FB70);
    v18 = 134219008;
    v19 = v6;
    v20 = 2048;
    v21 = v8;
    v22 = 2048;
    v23 = v5;
    v24 = 2048;
    v25 = v7;
    v26 = 1024;
    v27 = v13;
    LODWORD(v17) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "TaiChi,baselineMets,%.1f,metsHR,%.1f,metsWR,%.1f,userMets,%.1f,userMetsSource,%d", COERCE_DOUBLE(&v18), v17);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieTaiChiModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_100CF914C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100CF9178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  if (!a2)
    return 0;
  v3 = 0;
  v4 = -1;
  do
  {
    v5 = *(_BYTE *)(a1 + v3);
    if (a3 + 1 == v3 || a3 == v3 || a3 + 2 == v3 || a3 + 3 == v3)
      v5 = 0;
    v4 = dword_101C2160C[(v5 ^ v4)] ^ (v4 >> 8);
    ++v3;
  }
  while (a2 != v3);
  return ~v4;
}

void sub_100CF91DC(uint64_t a1, void *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_100CF9488(a1, "CLSkiNotifier", a2);
  *v2 = off_10217FBA0;
  v2[14] = 0;
  sub_1007AA7FC();
}

void sub_100CF93F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v1 + 272);
  *(_QWORD *)(v1 + 272) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_1007AA800(v2);
  v7 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_100CF9D90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF9488(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10217FD68;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100CF9508(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100CF9524(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSkiNotifier::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217FD18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSkiNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217FD18);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSkiNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100CFAB94(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100CF96DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100CF96FC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLSkiNotifier::onOdometerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217FD18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSkiNotifier::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217FD18);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSkiNotifier::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100CFACE0(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100CF98B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100CF98D4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100CF992C;
  v4[3] = &unk_10212ECA0;
  v4[4] = v1;
  return objc_msgSend(v2, "async:", v4);
}

uint64_t sub_100CF992C(uint64_t a1)
{
  return sub_100CF9934(*(_QWORD **)(a1 + 32));
}

uint64_t sub_100CF9934(_QWORD *a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_10217FD38);
  v2 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skiing autoresume", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_10217FD38);
    LOWORD(v6[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "Skiing autoresume", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiNotifier::onSkiAlarm()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100CF9EE4(a1);
  sub_100CFAA70((uint64_t)a1, 1);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)buf = 0u;
  v8 = 0u;
  buf[0] = 1;
  v6[0] = 1;
  (*(void (**)(_QWORD *, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, v6, buf, 1, 0xFFFFFFFFLL, 0);
  result = a1[14];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_100CF9B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  _OWORD v48[6];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v48[2] = *(_OWORD *)(a2 + 32);
  v48[3] = v4;
  v5 = *(_OWORD *)(a2 + 80);
  v48[4] = *(_OWORD *)(a2 + 64);
  v48[5] = v5;
  v6 = *(_OWORD *)(a2 + 16);
  v48[0] = *(_OWORD *)a2;
  v48[1] = v6;
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_10217FD38);
  v7 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 64);
    v13 = *(_QWORD *)(a2 + 72);
    *(_DWORD *)buf = 134219264;
    v37 = v8;
    v38 = 2048;
    v39 = v9;
    v40 = 2048;
    v41 = v11;
    v42 = 2048;
    v43 = v10;
    v44 = 2048;
    v45 = v12;
    v46 = 2048;
    v47 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Ski Record update: startTime %lf, endTime %lf, runDistance %f, runElevationDescent %f, runAvgSpeed %f, runMaxSpeed %f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_10217FD38);
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(_QWORD *)(a2 + 88);
    v18 = *(_QWORD *)(a2 + 56);
    v19 = *(_QWORD *)(a2 + 64);
    v20 = *(_QWORD *)(a2 + 72);
    v24 = 134219264;
    v25 = v15;
    v26 = 2048;
    v27 = v16;
    v28 = 2048;
    v29 = v18;
    v30 = 2048;
    v31 = v17;
    v32 = 2048;
    v33 = v19;
    v34 = 2048;
    v35 = v20;
    LODWORD(v23) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 1, "Ski Record update: startTime %lf, endTime %lf, runDistance %f, runElevationDescent %f, runAvgSpeed %f, runMaxSpeed %f", COERCE_DOUBLE(&v24), v23);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "CLSkiNotifier::CLSkiNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  *(_DWORD *)buf = 0;
  return (*(uint64_t (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, buf, v48, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100CF9D90(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217FD68;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100CF9E04(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100CF9E78;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102307C38 != -1)
    dispatch_once(&qword_102307C38, block);
  return qword_102311528;
}

void sub_100CF9E78()
{
  operator new();
}

void sub_100CF9EC0()
{
  operator delete();
}

id sub_100CF9EE4(uint64_t a1)
{
  id v2;
  _QWORD v4[5];

  v2 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 248) = v2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100CF9F60;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  objc_msgSend(v2, "setHandler:", v4);
  return objc_msgSend(*(id *)(a1 + 248), "setNextFireDelay:interval:", 5.11999989, 5.11999989);
}

_QWORD *sub_100CF9F60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  char *v6;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  _BYTE buf[32];
  __int128 v22;

  v1 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(v1 + 112);
  if (result)
  {
    result = (*(_QWORD *(**)(double *__return_ptr))(*result + 16))(&v8);
    if ((LODWORD(v8) - 3) >= 3)
    {
      if (LODWORD(v8) == 2 && *(_BYTE *)(v1 + 257))
        result = (_QWORD *)sub_100CF9934((_QWORD *)v1);
    }
    else
    {
      sub_100CFA20C((id *)v1);
      v3 = sub_1001FBB04(0);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 88) + 24))(v3 + 88, LODWORD(v8));
    }
    if (v12)
    {
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_10217FD38);
      v4 = qword_10229FE28;
      if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = *((_QWORD *)&v9 + 1);
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v10;
        LOWORD(v22) = 2048;
        *(_QWORD *)((char *)&v22 + 2) = *((_QWORD *)&v10 + 1);
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[live data] sending live update updateTime, %f, distance, %f, averageSpeed, %f, verticalDescent, %f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE20 != -1)
          dispatch_once(&qword_10229FE20, &stru_10217FD38);
        v13 = 134218752;
        v14 = v9;
        v15 = 2048;
        v16 = *((_QWORD *)&v9 + 1);
        v17 = 2048;
        v18 = v10;
        v19 = 2048;
        v20 = *((_QWORD *)&v10 + 1);
        LODWORD(v7) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 1, "[live data] sending live update updateTime, %f, distance, %f, averageSpeed, %f, verticalDescent, %f", COERCE_DOUBLE(&v13), v7, v8, *(double *)&v9);
        v6 = (char *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLSkiNotifier::setupTimer()_block_invoke", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      v13 = 2;
      if (!v12)
        sub_10028DF3C();
      *(_OWORD *)buf = v9;
      *(_OWORD *)&buf[16] = v10;
      v22 = v11;
      return (_QWORD *)(*(uint64_t (**)(uint64_t, int *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v1 + 152))(v1, &v13, buf, 0, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

uint64_t sub_100CFA20C(id *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_10217FD38);
  v2 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skiing autopause", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_10217FD38);
    LOWORD(v6[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "Skiing autopause", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiNotifier::pauseSkiTracking()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(a1[31], "invalidate");

  a1[31] = 0;
  sub_100CFAA70((uint64_t)a1, 0);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)buf = 0u;
  v8 = 0u;
  v6[0] = 1;
  return (*((uint64_t (**)(id *, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))*a1 + 19))(a1, v6, buf, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100CFA3F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10217FBA0;
  v2 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  objc_msgSend(*(id *)(a1 + 248), "invalidate");

  *(_QWORD *)(a1 + 248) = 0;
  v3 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1007AA800(a1 + 120);
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_100CF9D90(a1);
}

void sub_100CFA4A8(uint64_t a1)
{
  sub_100CFA3F8(a1);
  operator delete();
}

uint64_t sub_100CFA4CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_100CFA4EC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100CFA564(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  int v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_10217FD38);
  v4 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
  {
    v14[0] = *a2;
    v5 = v14[0];
    v6 = sub_1001B7864(a1, v14, 1);
    *(_DWORD *)buf = 67109376;
    v18 = v5;
    v19 = 1024;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Added client for %d, count %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_10217FD38);
    v8 = qword_10229FE28;
    v9 = *a2;
    v13 = v9;
    v10 = sub_1001B7864(a1, &v13, 1);
    v14[0] = 67109376;
    v14[1] = v9;
    v15 = 1024;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 1, "Added client for %d, count %d", v14, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSkiNotifier::registerForNotificationInternal(const CLSkiNotifier_Type::Notification &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return 1;
}

uint64_t sub_100CFA768(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  int v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_10217FD38);
  v4 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
  {
    v14[0] = *a2;
    v5 = v14[0];
    v6 = sub_1001B7864(a1, v14, 1);
    *(_DWORD *)buf = 67109376;
    v18 = v5;
    v19 = 1024;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Removed client for %d, count %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_10217FD38);
    v8 = qword_10229FE28;
    v9 = *a2;
    v13 = v9;
    v10 = sub_1001B7864(a1, &v13, 1);
    v14[0] = 67109376;
    v14[1] = v9;
    v15 = 1024;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 1, "Removed client for %d, count %d", v14, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSkiNotifier::unregisterForNotificationInternal(const CLSkiNotifier_Type::Notification &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return 1;
}

uint64_t sub_100CFA96C(uint64_t result)
{
  if (!*(_QWORD *)(result + 112))
  {
    if (*(_BYTE *)(result + 257))
      operator new();
    operator new();
  }
  return result;
}

void sub_100CFAA38()
{
  operator delete();
}

id sub_100CFAA70(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 272);
  v5 = *(_QWORD *)(v3 + 8);
  v4 = *(void **)(v3 + 16);
  if (a2)
  {
    objc_msgSend(v4, "register:forNotification:registrationInfo:", v5, 2, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 272) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), 4, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 272) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), 3, 0);
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 272) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), 7, 0);
  }
  else
  {
    objc_msgSend(v4, "unregister:forNotification:", v5, 2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 272) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), 4);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 272) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), 3);
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 272) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), 7);
  }
}

uint64_t sub_100CFAB18(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 248), "invalidate");

  *(_QWORD *)(a1 + 248) = 0;
  sub_100CFAA70(a1, 0);
  v2 = sub_1001FBB04(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 88) + 24))(v2 + 88, 5);
  result = *(_QWORD *)(a1 + 112);
  if (result)
  {
    *(_QWORD *)(a1 + 112) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_100CFAB8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1007AA804((uint64_t **)(a1 + 120), a2, a3);
}

__n128 sub_100CFAB94(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[14];
  uint64_t v27;
  _OWORD v28[14];
  uint64_t v29;

  if (*a3 == 2)
  {
    v6 = *(_QWORD *)(a4 + 16);
    if (v6 == 1)
    {
      v17 = *(_QWORD *)(a4 + 112);
      if (v17 == 37 || v17 == 23)
      {
        sub_100CFAB18(a1);
        v19 = *(_OWORD *)(a4 + 208);
        v26[12] = *(_OWORD *)(a4 + 192);
        v26[13] = v19;
        v27 = *(_QWORD *)(a4 + 224);
        v20 = *(_OWORD *)(a4 + 144);
        v26[8] = *(_OWORD *)(a4 + 128);
        v26[9] = v20;
        v21 = *(_OWORD *)(a4 + 176);
        v26[10] = *(_OWORD *)(a4 + 160);
        v26[11] = v21;
        v22 = *(_OWORD *)(a4 + 80);
        v26[4] = *(_OWORD *)(a4 + 64);
        v26[5] = v22;
        v23 = *(_OWORD *)(a4 + 112);
        v26[6] = *(_OWORD *)(a4 + 96);
        v26[7] = v23;
        v24 = *(_OWORD *)(a4 + 16);
        v26[0] = *(_OWORD *)a4;
        v26[1] = v24;
        v25 = *(_OWORD *)(a4 + 48);
        v26[2] = *(_OWORD *)(a4 + 32);
        v26[3] = v25;
        sub_1007AA910(a1 + 120, (uint64_t)v26);
      }
    }
    else if (!v6)
    {
      v7 = *(_QWORD *)(a4 + 112);
      if (v7 == 37 || v7 == 23)
      {
        v9 = *(_OWORD *)(a4 + 208);
        v28[12] = *(_OWORD *)(a4 + 192);
        v28[13] = v9;
        v29 = *(_QWORD *)(a4 + 224);
        v10 = *(_OWORD *)(a4 + 144);
        v28[8] = *(_OWORD *)(a4 + 128);
        v28[9] = v10;
        v11 = *(_OWORD *)(a4 + 176);
        v28[10] = *(_OWORD *)(a4 + 160);
        v28[11] = v11;
        v12 = *(_OWORD *)(a4 + 80);
        v28[4] = *(_OWORD *)(a4 + 64);
        v28[5] = v12;
        v13 = *(_OWORD *)(a4 + 112);
        v28[6] = *(_OWORD *)(a4 + 96);
        v28[7] = v13;
        v14 = *(_OWORD *)(a4 + 16);
        v28[0] = *(_OWORD *)a4;
        v28[1] = v14;
        v15 = *(_OWORD *)(a4 + 48);
        v28[2] = *(_OWORD *)(a4 + 32);
        v28[3] = v15;
        sub_1007AA910(a1 + 120, (uint64_t)v28);
        sub_100CFA96C(a1);
      }
    }
  }
  return result;
}

uint64_t sub_100CFACE0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t (*v4)(void);

  result = *(_QWORD *)(a1 + 112);
  if (result)
  {
    switch(*a3)
    {
      case 2:
      case 4:
        v4 = *(uint64_t (**)(void))(*(_QWORD *)result + 40);
        goto LABEL_6;
      case 3:
      case 7:
        v4 = *(uint64_t (**)(void))(*(_QWORD *)result + 32);
LABEL_6:
        result = v4();
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_100CFAD30()
{
  operator new();
}

void sub_100CFADDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100CFAE18(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10217FEB8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100CFAEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217FD18);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10217FD18);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100CFB160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FAEF8);
}

uint64_t sub_100CFB174(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[102];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 96);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100CFD52C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FAEF9;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217FD18);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217FD18);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100CFB5E4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217FD18);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217FD18);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100CFB864(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217FD18);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217FD18);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100CFBBEC(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_OWORD **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  v13 = v11[2];
  v14 = v11[3];
  v15 = v11[5];
  a3[4] = v11[4];
  a3[5] = v15;
  a3[2] = v13;
  a3[3] = v14;
  return 1;
}

uint64_t sub_100CFBC5C(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t **v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v15;
  __int128 v16;
  int *v17;

  v6 = (char *)operator new(0x78uLL);
  v7 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *(_OWORD *)(v6 + 72) = v7;
  v8 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v8;
  v9 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_10217FE48;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = v9;
  *(_QWORD *)&v16 = v6 + 24;
  *((_QWORD *)&v16 + 1) = v6;
  v15 = *a2;
  v17 = &v15;
  v10 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v15, (uint64_t)&unk_101B9EB60, &v17);
  sub_1002B7674((uint64_t)(v10 + 8), &v16);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return 1;
}

void sub_100CFBD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CFBD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[6];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100CFBDD0(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v33[20];
  __int16 v34;
  _QWORD *v35;
  __int16 v36;
  std::__shared_weak_count *v37;
  _QWORD **v38;
  _QWORD *v39[3];
  std::__shared_weak_count *v40;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217FD18);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v33 = 2082;
      *(_QWORD *)&v33[2] = "";
      *(_WORD *)&v33[10] = 2082;
      *(_QWORD *)&v33[12] = "activity";
      v34 = 2082;
      v35 = v10;
      v36 = 2050;
      v37 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v38 = v39;
      memset(v39, 0, sizeof(v39));
      v40 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v38);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v33, *(_QWORD **)&v33[8]);
      v21 = v40;
      if (v40)
      {
        v22 = (unint64_t *)&v40->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v38, v39[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x78uLL);
      v25 = a3[3];
      *(_OWORD *)(v24 + 56) = a3[2];
      *(_OWORD *)(v24 + 72) = v25;
      v26 = a3[5];
      *(_OWORD *)(v24 + 88) = a3[4];
      *(_OWORD *)(v24 + 104) = v26;
      v27 = a3[1];
      *(_OWORD *)(v24 + 24) = *a3;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_10217FE48;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 40) = v27;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v33 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v28 = *(std::__shared_weak_count **)v33;
      if (*(_QWORD *)v33)
      {
        v29 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100CFCAE8();
    os_activity_scope_leave(&state);
  }
}

void sub_100CFC428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100CFC474(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217FD18);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217FD18);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::listClients() [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217FD18);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217FD18);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::listClients() [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217FD18);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217FD18);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::listClients() [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100CFCA20(uint64_t a1)
{
  sub_100CFD4CC(a1);
  operator delete();
}

id sub_100CFCA44(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100CFD0A8(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100CFCA90(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CFCABC(id a1)
{
  qword_10229FE28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_100CFCAE8()
{
  operator new();
}

void sub_100CFCB88(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100CFD0A8(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100CFCF5C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217FD18);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217FD18);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100CFCF5C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100CFD0A8(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_100CFD038(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217FE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CFD04C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217FE48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100CFD088(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100CFD0A8(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100CFD0F4(a1);
  else
    return 0;
}

id sub_100CFD0F4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217FE88);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C21B46 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217FE88);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217FE88);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C21B46 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217FE88);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSkiNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100CFD4A0(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100CFD4CC(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10217FEB8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100CFD52C()
{
  operator new();
}

uint64_t sub_100CFD5CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100CFD5EC()
{
  sub_1015A2E04(qword_102307C20, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307C20, (void *)&_mh_execute_header);
}

_QWORD *sub_100CFD630(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100CFD6E4((uint64_t)a1, "VO2MaxStagingLostEstimateHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_10217FEE0;
  a1[9] = off_10217FF98;
  sub_100CFE2DC((uint64_t)a1);
  return a1;
}

void sub_100CFD6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_100CFDB3C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100CFD6E4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_102180118;
  *(_QWORD *)(a1 + 72) = off_1021801C0;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102180118;
  *(_QWORD *)(a1 + 72) = off_1021801C0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100CFDA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_102138DA8;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100CFDB34()
{
  JUMPOUT(0x100CFDB14);
}

_QWORD *sub_100CFDB3C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021801C0;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102180118;
  a1[33] = off_102138DA8;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100CFDBBC(uint64_t a1)
{
  return sub_100CFDB3C((_QWORD *)(a1 - 72));
}

void sub_100CFDBC4(_QWORD *a1)
{
  sub_100CFDB3C(a1);
  operator delete();
}

void sub_100CFDBE8(uint64_t a1)
{
  sub_100CFDB3C((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100CFDC10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100CFDC1C(a2, a3);
}

uint64_t sub_100CFDC1C(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  const unsigned __int8 *v7;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v7 = sqlite3_column_text(v6, 2);
  return uuid_parse((const char *)v7, (unsigned __int8 *)(a2 + 16));
}

uint64_t sub_100CFDC7C(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingLostEstimateHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_100CFDD94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CFDDB4(uint64_t a1, uint64_t a2)
{
  return sub_100CFDC7C(a1 - 72, a2);
}

uint64_t sub_100CFDDBC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxStagingLostEstimateHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100CFDF80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CFDFB0(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM VO2MaxStagingLostEstimateHistory");
  return 0xFFFFFFFFLL;
}

void sub_100CFE050(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CFE074(uint64_t a1)
{
  return sub_100CFDFB0(a1 - 72);
}

uint64_t sub_100CFE07C(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result;
  char out[40];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingLostEstimateHistory WHERE sessionId = ?");
  }
  return result;
}

void sub_100CFE2B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CFE2DC(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
    return sub_100634364(*(_QWORD *)(a1 + 80), "VO2MaxStagingLostEstimateHistory", (const char **)&off_102180048, (const std::string::value_type **)&off_1022FAF00, 0);
  return result;
}

uint64_t sub_100CFE330(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingLostEstimateHistory");
  return result;
}

void sub_100CFE3C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CFE3E4(uint64_t a1)
{
  return sub_100CFE330(a1 - 72);
}

uint64_t sub_100CFE3EC(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxStagingLostEstimateHistory (startTime, sessionId) VALUES (?, ?)");
  return result;
}

void sub_100CFE4E0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CFE508(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_1019264A4(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100CFE844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 113) < 0)
    operator delete(*(void **)(v3 - 136));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CFE8B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102180200);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102180200);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102180200);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100CFEE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100CFEEB0(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  id v32[2];
  int v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  double v42;

  v32[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v32[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v32);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v41 = 0;
  v42 = 0.0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v41);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102180200);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102180200);
        LOWORD(v33) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v33, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v42;
    v9 = v7 - v42;
    if (v7 - v42 < 0.0)
      v9 = -(v7 - v42);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102180200);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v38 = v42;
        v39 = 2050;
        v40 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102180200);
        v23 = *(_QWORD *)(a2 + 8);
        v33 = 134349312;
        v34 = v42;
        v35 = 2050;
        v36 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v33, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v42;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102180200);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v38 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102180200);
          v26 = *(double *)(a2 + 8);
          v33 = 134217984;
          v34 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v33));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102180200);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v38 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102180200);
        v33 = 134217984;
        v34 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v33));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v41, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v32);
}

void sub_100CFF5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CFF61C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101926610(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100CFF87C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192677C(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100CFFAB4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019268E8(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_100CFFCDC(uint64_t a1)
{
  return sub_100CFE8B4(a1 - 72);
}

void sub_100CFFCE4(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_100CFFD10(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_101926A54(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100D00004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D00074(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100D01EC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  STACK[0xE30] = v1 + 16;
  v3 = (void *)STACK[0xE38];
  if (STACK[0xE38])
  {
    STACK[0xE40] = (unint64_t)v3;
    operator delete(v3);
  }
  sub_1015E24D8((uint64_t)&STACK[0xE50]);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D01F08(_QWORD *a1)
{
  void *v2;

  *a1 = off_102180250;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100D020BC(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100D020E8(_QWORD *a1)
{
  void *v2;

  *a1 = off_102180250;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_100D02138(uint64_t result)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
  return result;
}

char *sub_100D02144(uint64_t a1, char *__src, int64_t a3)
{
  return sub_100C1DAB8(a1 + 8, *(char **)(a1 + 16), __src, &__src[a3], a3);
}

uint64_t sub_100D02160()
{
  sub_1015A2E04(qword_102307C40, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307C40, (void *)&_mh_execute_header);
}

double sub_100D021A4(_QWORD *a1)
{
  double result;

  result = NAN;
  *a1 = 0xFFFFFFFF00000001;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = -1;
  a1[4] = -1;
  a1[5] = -1;
  a1[6] = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_100D021C8(uint64_t *a1, float *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  float v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  const char *v17;
  uint8_t *v18;
  _DWORD v19[2];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021802A0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *((unsigned __int8 *)a1 + 48);
    v6 = *(_QWORD *)a2;
    v7 = *a1;
    v8 = (double)(*(_QWORD *)a2 - *a1) * 0.000001;
    v9 = a2[2];
    *(_DWORD *)buf = 67110144;
    v29 = v5;
    v30 = 2050;
    v31 = v6;
    v32 = 2050;
    v33 = v7;
    v34 = 2050;
    v35 = v8;
    v36 = 2050;
    v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tt,posvalid,%d,ttTimeNs,%{public}llu,epochTimeNs,%{public}llu,diffMs,%{public}.2f,ttUncNs,%{public}.2f", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021802A0);
    v12 = *((unsigned __int8 *)a1 + 48);
    v13 = *(_QWORD *)a2;
    v14 = *a1;
    v15 = (double)(*(_QWORD *)a2 - *a1) * 0.000001;
    v16 = a2[2];
    v19[0] = 67110144;
    v19[1] = v12;
    v20 = 2050;
    v21 = v13;
    v22 = 2050;
    v23 = v14;
    v24 = 2050;
    v25 = v15;
    v26 = 2050;
    v27 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt,posvalid,%d,ttTimeNs,%{public}llu,epochTimeNs,%{public}llu,diffMs,%{public}.2f,ttUncNs,%{public}.2f", v19, 48);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "GNSS::TimeTransferSource GNSS::gnssTimeSource(const PerEpochData &, const TimeTransferPulseTime &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (!*((_BYTE *)a1 + 48) || *(_QWORD *)a2 <= *a1 || *(_QWORD *)a2 - *a1 > 2999999999)
    return 0;
  v10 = a2[2];
  if (v10 < 2000000.0 && (~*((_DWORD *)a1 + 34) & 3) == 0)
    return 2;
  return v10 < 10000000.0;
}

void sub_100D0247C(int a1@<W0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  BOOL v7;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  int8x16_t v13;
  BOOL v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v6 = 0;
  if (a1 > 31)
  {
    if (a1 > 127)
    {
      if (a1 != 128)
      {
        v7 = a1 == 256;
        v6 = 5;
LABEL_21:
        if (!v7)
          v6 = 0;
        goto LABEL_25;
      }
    }
    else if (a1 != 32 && a1 != 64)
    {
      goto LABEL_25;
    }
LABEL_10:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021802A0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "unexpected SatSystem to convert to client type,%{public}d", buf, 8u);
    }
    v9 = sub_1001BFF7C(115, 0);
    v6 = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021802A0);
      v15[0] = 67240192;
      v15[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "unexpected SatSystem to convert to client type,%{public}d", v15, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "CLClientSatelliteInfo GNSS::ConvertGnssSatelliteInfoToCLClientSatelliteInfo(const GNSS::SatSystem::sys, const GNSS::SatelliteInfoIndividual &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
      v6 = 0;
    }
    goto LABEL_25;
  }
  switch(a1)
  {
    case 0:
      goto LABEL_10;
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 2:
      v6 = 1;
      break;
    case 4:
      v6 = 2;
      break;
    case 8:
      v6 = 3;
      break;
    default:
      v7 = a1 == 16;
      v6 = 4;
      goto LABEL_21;
  }
LABEL_25:
  *(_DWORD *)(a3 + 24) = 0;
  v12 = *a2;
  *(_DWORD *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v12;
  v13 = *(int8x16_t *)(a2 + 1);
  *(int8x16_t *)(a3 + 8) = vextq_s8(v13, v13, 8uLL);
  v14 = *(float *)v13.i32 > 0.0;
  if (*(float *)&v13.i32[1] > 0.0)
    v14 = 1;
  *(_BYTE *)(a3 + 24) = v14;
  *(_BYTE *)(a3 + 25) = (a2[6] & 3) != 0;
}

void sub_100D02724(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  uint64_t *i;
  BOOL v9;
  _OWORD *v10;
  char *v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  char *v23;
  void *__p;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _BYTE buf[1624];

  v4 = sub_1001FCBB4();
  __p = 0;
  v25 = 0;
  v26 = 0;
  v5 = *(uint64_t **)(a1 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = v4 + -60.0;
    do
    {
      for (i = (uint64_t *)v5[5]; i; i = (uint64_t *)*i)
      {
        v9 = *((float *)i + 8) > 0.0 && v7 < *((float *)i + 10);
        if (v9 || *((float *)i + 6) > 0.0 || *((float *)i + 7) > 0.0)
        {
          sub_100D0247C(*((_DWORD *)v5 + 4), (int *)i + 5, (uint64_t)buf);
          v10 = v25;
          if (v25 >= v26)
          {
            v12 = __p;
            v13 = 0x6DB6DB6DB6DB6DB7 * ((v25 - (_BYTE *)__p) >> 2);
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) > 0x924924924924924)
              sub_100259694();
            if (0xDB6DB6DB6DB6DB6ELL * ((v26 - (_BYTE *)__p) >> 2) > v14)
              v14 = 0xDB6DB6DB6DB6DB6ELL * ((v26 - (_BYTE *)__p) >> 2);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v26 - (_BYTE *)__p) >> 2)) >= 0x492492492492492)
              v15 = 0x924924924924924;
            else
              v15 = v14;
            if (v15)
            {
              v16 = (char *)sub_100AAF154((uint64_t)&v26, v15);
              v12 = __p;
              v10 = v25;
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[4 * ((v25 - (_BYTE *)__p) >> 2)];
            *(_OWORD *)v17 = *(_OWORD *)buf;
            *(_OWORD *)(v17 + 12) = *(_OWORD *)&buf[12];
            if (v10 == v12)
            {
              v20 = &v16[28 * v13];
            }
            else
            {
              v18 = &v16[28 * v13];
              do
              {
                v19 = *(_OWORD *)((char *)v10 - 28);
                v20 = v18 - 28;
                *((_OWORD *)v18 - 1) = *(v10 - 1);
                *(_OWORD *)(v18 - 28) = v19;
                v10 = (_OWORD *)((char *)v10 - 28);
                v18 -= 28;
              }
              while (v10 != v12);
            }
            v11 = v17 + 28;
            __p = v20;
            v25 = v17 + 28;
            v26 = &v16[28 * v15];
            if (v12)
              operator delete(v12);
          }
          else
          {
            *(_OWORD *)v25 = *(_OWORD *)buf;
            *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)&buf[12];
            v11 = (char *)v10 + 28;
          }
          v25 = v11;
        }
      }
      v6 += v5[6];
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021802A0);
  v21 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 0x6DB6DB6DB6DB6DB7 * ((v25 - (_BYTE *)__p) >> 2);
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#SatReport,info available for %zu SVs with %zu above-horizon SVs copied to client report", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021802A0);
    v27 = 134218240;
    v28 = v6;
    v29 = 2048;
    v30 = 0x6DB6DB6DB6DB6DB7 * ((v25 - (_BYTE *)__p) >> 2);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#SatReport,info available for %zu SVs with %zu above-horizon SVs copied to client report", (size_t)&v27, 22);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "std::shared_ptr<const CLDaemonLocationPrivate::AboveHorizonSatelliteVisibilityReport> GNSS::ConvertSatelliteVisibilityReportToCLClientSatelliteReport(const GNSS::SatelliteVisibilityReport &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  sub_100D03BAC((uint64_t)&__p, a2);
  if (__p)
  {
    v25 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100D02B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D02B44(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t i;
  NSObject *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  _DWORD v34[2];
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  _BOOL4 v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _BOOL4 v48;
  uint8_t buf[4];
  _BOOL4 v50;
  __int16 v51;
  _BOOL4 v52;
  __int16 v53;
  _BOOL4 v54;
  __int16 v55;
  _BOOL4 v56;
  __int16 v57;
  _BOOL4 v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  _BOOL4 v64;

  if (*a1 == -1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021802A0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,rx clock", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021802A0);
      LOWORD(v34[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,invalid report,rx clock", v34, 2);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 0, "void logInvalidMeasurementReport(const gnss::MeasurementReport &)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
  }
  v3 = a1[14];
  for (i = a1[15]; v3 != i; v3 += 176)
  {
    if (!sub_100D02F90((int *)v3))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021802A0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v6 = !sub_100D030A0((_DWORD *)v3);
        v7 = *(_BYTE *)(v3 + 8) == 0;
        v8 = *(_QWORD *)(v3 + 24);
        v9 = *(_QWORD *)(v3 + 32);
        v10 = v8 == -1;
        v11 = v9 == -1;
        v12 = *(_QWORD *)(v3 + 40) == -1;
        v13 = v8 > v9;
        v14 = *(_QWORD *)(v3 + 160);
        v15 = v13;
        v16 = *(float *)(v3 + 168) < 0.0;
        *(_DWORD *)buf = 67241984;
        v17 = v16;
        v50 = v6;
        v51 = 1026;
        v52 = v7;
        v53 = 1026;
        v54 = v10;
        v55 = 1026;
        v56 = v11;
        v57 = 1026;
        v58 = v12;
        v59 = 1026;
        v60 = v15;
        v61 = 1026;
        v62 = v17;
        v63 = 1026;
        v64 = v14 != 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,meas,id,%{public}d,sync,%{public}d,start1,%{public}d,end,%{public}d,app,%{public}d,start2,%{public}d,cn0,%{public}d,ext,%{public}d", buf, 0x32u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021802A0);
        v18 = qword_1022A0078;
        v19 = !sub_100D030A0((_DWORD *)v3);
        v20 = *(_BYTE *)(v3 + 8) == 0;
        v21 = *(_QWORD *)(v3 + 24);
        v22 = *(_QWORD *)(v3 + 32);
        v23 = v21 == -1;
        v24 = v22 == -1;
        v25 = *(_QWORD *)(v3 + 40) == -1;
        v13 = v21 > v22;
        v26 = *(_QWORD *)(v3 + 160);
        v27 = v13;
        v16 = *(float *)(v3 + 168) < 0.0;
        v34[0] = 67241984;
        v28 = v16;
        v34[1] = v19;
        v35 = 1026;
        v36 = v20;
        v37 = 1026;
        v38 = v23;
        v39 = 1026;
        v40 = v24;
        v41 = 1026;
        v42 = v25;
        v43 = 1026;
        v44 = v27;
        v45 = 1026;
        v46 = v28;
        v47 = 1026;
        v48 = v26 != 0;
        LODWORD(v33) = 50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 16, "#gnssmeas,invalid report,meas,id,%{public}d,sync,%{public}d,start1,%{public}d,end,%{public}d,app,%{public}d,start2,%{public}d,cn0,%{public}d,ext,%{public}d", v34, v33);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 0, "void logInvalidMeasurementReport(const gnss::MeasurementReport &)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
    }
  }
}

BOOL sub_100D02F90(int *a1)
{
  _BOOL8 result;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  result = sub_100D030A0(a1);
  if (result)
  {
    v3 = *((unsigned __int8 *)a1 + 8);
    if (!*((_BYTE *)a1 + 8))
      return 0;
    v4 = *((_QWORD *)a1 + 3);
    if (v4 == -1)
      return 0;
    v5 = *((_QWORD *)a1 + 4);
    if (v5 == -1)
      return 0;
    result = 0;
    if (v4 <= v5 && *((_QWORD *)a1 + 5) != -1)
    {
      if (*((float *)a1 + 42) < 0.0)
        return 0;
      v6 = *a1;
      result = 0;
      switch(*a1)
      {
        case 0:
          return result;
        case 1:
          goto LABEL_16;
        case 2:
          if (v3 != 4 || (*((_BYTE *)a1 + 5) != 0) != *((unsigned __int8 *)a1 + 4) - 1 < 0x18)
            return 0;
          goto LABEL_23;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_23;
        case 4:
          if (v3 - 5 >= 3)
            return 0;
          goto LABEL_23;
        case 8:
          if ((v3 & 0xFE) != 8)
            return 0;
          goto LABEL_23;
        default:
          if (v6 == 32)
          {
            if (v3 != 10)
              return 0;
          }
          else if (v6 == 16)
          {
LABEL_16:
            if (v3 >= 4)
              return 0;
          }
LABEL_23:
          result = 1;
          break;
      }
    }
  }
  return result;
}

BOOL sub_100D030A0(_DWORD *a1)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  unsigned int v4;
  char v5;

  v1 = 0;
  v2 = *a1;
  switch(*a1)
  {
    case 1:
      v3 = a1 + 1;
      v4 = 32;
      goto LABEL_9;
    case 2:
      v3 = (char *)a1 + 6;
      v4 = 14;
      v5 = 7;
      return v4 > (*v3 + v5);
    case 3:
    case 5:
    case 6:
    case 7:
      return v1;
    case 4:
      v3 = a1 + 1;
      v4 = 63;
      goto LABEL_9;
    case 8:
      v3 = a1 + 1;
      v4 = 50;
      goto LABEL_9;
    default:
      if (v2 == 16)
      {
        v3 = a1 + 1;
        v4 = 10;
        v5 = 63;
      }
      else
      {
        if (v2 != 32)
          return v1;
        v3 = a1 + 1;
        v4 = 14;
LABEL_9:
        v5 = -1;
      }
      return v4 > (*v3 + v5);
  }
}

uint64_t sub_100D03144(_QWORD *a1, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  int *v10;
  int *v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t result;
  const char *v15;
  NSObject *v16;
  int v17;
  int v18;
  _BOOL4 v19;
  int v20;
  int v21;
  NSObject *v22;
  _BOOL4 v23;
  NSObject *v24;
  int v25;
  _BOOL4 v26;
  int v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;

  v4 = a1 + 5;
  if (sub_100D036A4(a1 + 5))
  {
    v5 = a1[22];
    v6 = a1[23];
    while (v5 != v6)
    {
      if ((sub_100D036FC(v5) & 1) == 0)
      {
        if (!a2)
          return 0;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021802A0);
        v16 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v17 = *(_DWORD *)v5;
          v18 = *(unsigned __int8 *)(v5 + 4);
          *(_DWORD *)buf = 67240448;
          v32 = v17;
          v33 = 1026;
          v34 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,sv info,system,%{public}d,prn,%{public}d", buf, 0xEu);
        }
        v19 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v19)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021802A0);
          v20 = *(_DWORD *)v5;
          v21 = *(unsigned __int8 *)(v5 + 4);
          LODWORD(v29) = 67240448;
          HIDWORD(v29) = v20;
          LOWORD(v30) = 1026;
          *(_DWORD *)((char *)&v30 + 2) = v21;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,invalid report,sv info,system,%{public}d,prn,%{public}d", &v29, 14, v29, v30);
LABEL_56:
          v28 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "BOOL gnss::MeasurementData::isValid(BOOL) const", "%s\n", v15);
          if (v28 != buf)
            free(v28);
          return 0;
        }
        return result;
      }
      v5 += 144;
    }
    v7 = a1[25];
    v8 = a1[26];
    if (v7 == v8)
    {
LABEL_13:
      v9 = (float *)a1[33];
      if (v9 && !sub_100D038F8(v9))
      {
        if (!a2)
          return 0;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021802A0);
        v22 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,klobuchar model", buf, 2u);
        }
        v23 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v23)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021802A0);
          LOWORD(v29) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,invalid report,klobuchar model", &v29, 2, v29, v30);
          goto LABEL_56;
        }
      }
      else
      {
        v10 = (int *)a1[34];
        v11 = (int *)a1[35];
        while (1)
        {
          if (v10 == v11)
            return 1;
          if (!sub_100D03A30((uint64_t)v10))
            break;
          v10 += 10;
        }
        if (!a2)
          return 0;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021802A0);
        v24 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v25 = *v10;
          *(_DWORD *)buf = 67240192;
          v32 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,apc parameters,system,%{public}d", buf, 8u);
        }
        v26 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v26)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021802A0);
          v27 = *v10;
          LODWORD(v29) = 67240192;
          HIDWORD(v29) = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,invalid report,apc parameters,system,%{public}d", &v29, 8, v29, v30);
          goto LABEL_56;
        }
      }
    }
    else
    {
      while (*(_BYTE *)(v7 + 16)
           && (*(_QWORD *)v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (*(_DWORD *)(v7 + 8) & 0x7FFFFFFFu) < 0x7F800000)
      {
        v7 += 24;
        if (v7 == v8)
          goto LABEL_13;
      }
      if (!a2)
        return 0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021802A0);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,rxbc", buf, 2u);
      }
      v13 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021802A0);
        LOWORD(v29) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssmeas,invalid report,rxbc", &v29, 2, v29, v30);
        goto LABEL_56;
      }
    }
  }
  else
  {
    if (a2)
      sub_100D02B44(v4);
    return 0;
  }
  return result;
}

BOOL sub_100D036A4(_QWORD *a1)
{
  int *v1;
  int *v2;
  _BOOL8 result;

  if (*a1 == -1)
    return 0;
  v1 = (int *)a1[14];
  v2 = (int *)a1[15];
  if (v1 == v2)
    return 1;
  do
  {
    result = sub_100D02F90(v1);
    if (!result)
      break;
    v1 += 44;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_100D036FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  char v8;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD v12[2];

  if (!sub_100D030A0((_DWORD *)a1)
    || !*(_BYTE *)(a1 + 16)
    || (*(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 64) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_DWORD *)(a1 + 88) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (*(_DWORD *)(a1 + 92) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    return 0;
  }
  v2 = *(_QWORD **)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 32);
  if (v2 != v3)
  {
    while ((*v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (v2[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (v2[2] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (v2[3] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v2 += 4;
      if (v2 == v3)
        goto LABEL_14;
    }
    return 0;
  }
LABEL_14:
  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  v4 = *(unsigned __int8 **)(a1 + 112);
  v5 = *(unsigned __int8 **)(a1 + 120);
  if (v4 == v5)
  {
    v10 = 0;
    v6 = 1;
    goto LABEL_36;
  }
  while (2)
  {
    v6 = 0;
    switch(*v4)
    {
      case 0u:
        goto LABEL_34;
      case 1u:
      case 2u:
      case 3u:
        if (*(_DWORD *)a1 == 1 || *(_DWORD *)a1 == 16)
          goto LABEL_28;
        goto LABEL_33;
      case 4u:
        if (*(_DWORD *)a1 != 2)
          goto LABEL_33;
        goto LABEL_28;
      case 5u:
      case 6u:
      case 7u:
        if (*(_DWORD *)a1 != 4)
          goto LABEL_33;
        goto LABEL_28;
      case 8u:
      case 9u:
        if (*(_DWORD *)a1 != 8)
          goto LABEL_33;
        goto LABEL_28;
      case 0xAu:
        if (*(_DWORD *)a1 == 32)
          goto LABEL_28;
        goto LABEL_33;
      default:
LABEL_28:
        sub_100D03AF4(&v11, v4, v4);
        if ((v8 & 1) != 0)
        {
          v4 += 32;
          if (v4 == v5)
          {
            v6 = 1;
            goto LABEL_34;
          }
          continue;
        }
LABEL_33:
        v6 = 0;
LABEL_34:
        v10 = (_QWORD *)v12[0];
LABEL_36:
        sub_100008848((uint64_t)&v11, v10);
        return v6;
    }
  }
}

void sub_100D038E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_100008848((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL sub_100D038F8(float *a1)
{
  float v1;
  _BOOL4 v2;
  float v3;
  _BOOL4 v4;
  uint64_t v5;

  v1 = a1[2];
  v2 = v1 == 0.0 && a1[3] == 0.0 && a1[4] == 0.0 && a1[5] == 0.0;
  v3 = a1[6];
  v4 = v3 == 0.0 && a1[7] == 0.0 && a1[8] == 0.0 && a1[9] == 0.0;
  v5 = 0;
  if (fabsf(v1) < 0.00000014305 && !v2 && !v4)
  {
    if (fabsf(a1[3]) >= 0.0000011444 || fabsf(a1[4]) >= 0.0000091553)
      return 0;
    v5 = 0;
    if (fabsf(v3) < 314570.0 && fabsf(a1[5]) < 0.0000091553)
    {
      if (fabsf(a1[7]) < 2516600.0 && fabsf(a1[8]) < 10066000.0)
        return fabsf(a1[9]) < 10066000.0;
      return 0;
    }
  }
  return v5;
}

BOOL sub_100D03A30(uint64_t a1)
{
  _BOOL8 result;

  if (*(_DWORD *)a1 == 2)
  {
    if (*(unsigned __int8 *)(a1 + 4) - 1 >= 0x18)
      return 0;
  }
  else
  {
    result = sub_100D030A0((_DWORD *)a1);
    if (!result)
      return result;
  }
  if (*(_BYTE *)(a1 + 8)
    && *(_BYTE *)(a1 + 9)
    && (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    return (*(_QWORD *)(a1 + 32) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return 0;
}

void sub_100D03AC8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t **sub_100D03AF4(uint64_t **a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v10 + 25) = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_100D03BAC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = sub_100D03C04((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100D03BF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D03C04(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1021802D0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  sub_100D03CC8((_QWORD *)(a1 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  return a1;
}

void sub_100D03C6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D03C80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021802D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D03C94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021802D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_100D03CC8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100AAF100(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100D03D24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D03D40()
{
  uint64_t result;

  result = sub_1005154D0();
  dword_102311530 = result;
  return result;
}

BOOL sub_100D03D98(uint64_t a1, uint64_t a2)
{
  sub_10018A4CC(a2, "kCLMotionTypeGeomagneticModelDataXKey", (const void *)a1);
  sub_10018A4CC(a2, "kCLMotionTypeGeomagneticModelDataYKey", (const void *)(a1 + 8));
  sub_10018A4CC(a2, "kCLMotionTypeGeomagneticModelDataZKey", (const void *)(a1 + 16));
  sub_10018A4CC(a2, "kCLMotionTypeGeomagneticModelDataMagnitudeKey", (const void *)(a1 + 24));
  sub_10018A4CC(a2, "kCLMotionTypeGeomagneticModelDataHorizontalKey", (const void *)(a1 + 32));
  sub_10018A4CC(a2, "kCLMotionTypeGeomagneticModelDataDeclinationKey", (const void *)(a1 + 40));
  sub_10018A4CC(a2, "kCLMotionTypeGeomagneticModelDataInclinationKey", (const void *)(a1 + 48));
  return sub_10018A4CC(a2, "kCLMotionTypeGeomagneticModelDataTimestampKey", (const void *)(a1 + 56));
}

BOOL sub_100D03E54(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  sub_10011B4E4(a4, "kCMActivityAlarmId", a1);
  sub_10011B4E4(a4, "kCMActivityAlarmTrigger", a2);
  return sub_10018A4CC(a4, "kCMActivityAlarmDuration", a3);
}

uint64_t sub_100D03EB8(_DWORD *a1, _DWORD *a2, void *a3, uint64_t a4)
{
  if (sub_1001E4B84(a4, "kCMActivityAlarmId", a1)
    && sub_1001E4B84(a4, "kCMActivityAlarmTrigger", a2))
  {
    return sub_1001FD98C(a4, "kCMActivityAlarmDuration", a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100D03F44(UInt8 *a1, uint64_t a2)
{
  BOOL v3;
  CFTypeID v4;
  const __CFData *v5;
  CFTypeRef cf;
  CFRange v8;

  cf = 0;
  if (sub_100525C58(a2, "kCMPressureBiasId", &cf, 0xFFFFFFFFLL))
    v3 = cf == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDataGetTypeID())
    return 0;
  v5 = (const __CFData *)cf;
  if ((unint64_t)CFDataGetLength((CFDataRef)cf) < 0x1D)
    return 0;
  v8.location = 0;
  v8.length = 29;
  CFDataGetBytes(v5, v8, a1);
  return 1;
}

uint64_t sub_100D03FE4()
{
  return qword_102307C58;
}

_QWORD *sub_100D03FF0(_QWORD *result)
{
  uint64_t v1;

  v1 = qword_102307C58;
  *result = off_102180320;
  result[1] = v1;
  qword_102307C58 = (uint64_t)result;
  return result;
}

_QWORD *sub_100D0400C(_QWORD *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *a1 = off_102180320;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102180378);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CMFFTProcessor is being cleaned up.  Subsequent calls to CMAccelerometerProcessor::computeFrequencyFeatures will lead to undefined behavior.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102180378);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CMFFTProcessor is being cleaned up.  Subsequent calls to CMAccelerometerProcessor::computeFrequencyFeatures will lead to undefined behavior.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual CMFFTProcessor::~CMFFTProcessor()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return a1;
}

void sub_100D041AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100D041BC(_QWORD *a1)
{
  sub_100D0400C(a1);
  operator delete();
}

uint64_t sub_100D041E0(float a1)
{
  unsigned int v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  double v9;
  uint8_t buf[4];
  double v11;

  if (a1 < 0.0 || a1 > 2147500000.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102180378);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: arg >= 0.f && arg <= static_cast<scalar_32>(2147483647), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 52,arg,%f.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102180378);
      v8 = 134217984;
      v9 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: arg >= 0.f && arg <= static_cast<scalar_32>(2147483647), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 52,arg,%f.", COERCE_DOUBLE(&v8));
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "static int CMFFTProcessor::idxCeil(scalar_32)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  v3 = (int)a1;
  if ((float)(int)a1 == a1)
    return v3;
  else
    return v3 + 1;
}

float sub_100D043B4(int a1, unint64_t a2, float a3)
{
  float result;

  result = a3 / (float)((float)((float)a1 * 0.25) / (float)(int)(a2 >> 1));
  if (result > (float)((int)a2 - 1))
    return (float)((int)a2 - 1);
  return result;
}

float sub_100D043E4(int a1, unint64_t a2)
{
  return (float)((float)a1 * 0.25) / (float)(int)(a2 >> 1);
}

float sub_100D04400(int a1, int a2, uint64_t a3)
{
  float result;
  float *v7;
  int v8;
  float v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (a1 >= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102180378);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      v17 = a1;
      v18 = 1024;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: start < end, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 74,start,%d,end,%d.", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102180378);
      v13[0] = 67109376;
      v13[1] = a1;
      v14 = 1024;
      v15 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: start < end, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 74,start,%d,end,%d.", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "static float CMFFTProcessor::getSum(int, int, const FrequencyData *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  result = 0.0;
  if (a1 <= a2)
  {
    v7 = (float *)(a3 + 4 * a1);
    v8 = a2 - a1 + 1;
    do
    {
      v9 = *v7++;
      result = result + v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

float sub_100D04600(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result;
  float *v11;
  float *v12;
  int v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  _DWORD v23[2];
  __int16 v24;
  int v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;

  if (a1 >= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102180378);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      v27 = a1;
      v28 = 1024;
      v29 = a2;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Assertion failed: start < end, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 85,start,%d,end,%d.", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102180378);
      v23[0] = 67109376;
      v23[1] = a1;
      v24 = 1024;
      v25 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: start < end, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 85,start,%d,end,%d.", v23, 14);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "static float CMFFTProcessor::getPowerSum(int, int, const FrequencyData *, const FrequencyData *, const FrequencyData *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  result = 0.0;
  if (a1 <= a2)
  {
    v11 = (float *)(a3 + 4 * a1);
    v12 = (float *)(a4 + 4 * a1);
    v13 = a2 - a1 + 1;
    v14 = (float *)(a5 + 4 * a1);
    do
    {
      v15 = *v11++;
      v16 = v15 * v15;
      v17 = *v12++;
      v18 = v16 + (float)(v17 * v17);
      v19 = *v14++;
      result = result + (float)(v18 + (float)(v19 * v19));
      --v13;
    }
    while (v13);
  }
  return result;
}

void sub_100D04834(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100D04860(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, __int128 *a9)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  id v23;
  double v24;

  *(_QWORD *)a1 = off_1021803A8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v10 = a4[1];
  *(_QWORD *)(a1 + 24) = *a4;
  *(_QWORD *)(a1 + 32) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a5[1];
  *(_QWORD *)(a1 + 40) = *a5;
  *(_QWORD *)(a1 + 48) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = a6[1];
  *(_QWORD *)(a1 + 56) = *a6;
  *(_QWORD *)(a1 + 64) = v16;
  v17 = (_QWORD *)(a1 + 56);
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 72) = a7;
  *(_QWORD *)(a1 + 80) = a8;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  sub_100D04A0C(a1, a1 + 136);
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 268) = 0;
  v20 = *a9;
  v21 = a9[2];
  *(_OWORD *)(a1 + 296) = a9[1];
  *(_OWORD *)(a1 + 312) = v21;
  *(_OWORD *)(a1 + 280) = v20;
  *(_QWORD *)(a1 + 328) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  v22 = sub_1001FD94C();
  v23 = sub_100D04AA4(a1);
  if ((sub_1001FD9FC(v22, (uint64_t)v23, (void *)(a1 + 96)) & 1) == 0)
  {
    v24 = (*(double (**)(_QWORD))(*(_QWORD *)*v17 + 64))(*v17);
    sub_100D04B38(a1, v24);
  }
  *(double *)(a1 + 336) = (*(double (**)(_QWORD))(*(_QWORD *)*v17 + 64))(*v17);
  return a1;
}

void sub_100D049D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100261F44(v3);
  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

double sub_100D04A0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a2 + 68) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 120) = 0;
  *(_BYTE *)a2 = 1;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 56) + 16))(&v6);
  v4 = *(_DWORD *)(a1 + 16);
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  *(_DWORD *)(a2 + 64) = v4;
  return result;
}

void sub_100D04A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D04B80(v1);
  _Unwind_Resume(a1);
}

id sub_100D04AA4(uint64_t a1)
{
  void *p_p;
  id v2;
  void *__p;
  char v5;

  sub_100B6ADE8(*(_DWORD *)(a1 + 16));
  if (v5 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  v2 = objc_msgSend(CFSTR("LastUploadTime"), "stringByAppendingString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_100D04B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100D04B38(uint64_t a1, double a2)
{
  const void *v3;
  uint64_t v4;
  const __CFString *v5;

  *(double *)(a1 + 96) = a2;
  v3 = (const void *)(a1 + 96);
  v4 = sub_1001FD94C();
  v5 = (const __CFString *)sub_100D04AA4(a1);
  return sub_10018A534(v4, v5, v3);
}

uint64_t sub_100D04B80(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100D04BD0(uint64_t a1)
{
  sub_100B6ADE8(*(_DWORD *)(a1 + 16));
}

uint64_t sub_100D04BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a3 == 7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a4);
  }
  else if ((_DWORD)a3 == 6)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, *(unsigned int *)(a4 + 4));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, a3, a4);
}

BOOL sub_100D04C5C(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BYTE *v4;
  int v5;
  _BOOL8 result;
  uint64_t v7;
  void *p_p;
  int v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  void *__p;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[4];
  _BYTE v21[14];
  __int16 v22;
  uint64_t v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) || !*(_BYTE *)(a1 + 320))
    {
      v18 = *(_OWORD *)(a1 + 104);
      v19 = *(_QWORD *)(a1 + 120);
      v2 = sub_1011E785C(a1 + 280, (uint64_t)&v18);
      if (*(_DWORD *)(a1 + 128) >= v2)
        return 1;
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102180480);
      v3 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        sub_100B6ADE8(*(_DWORD *)(a1 + 16));
        v4 = v28 >= 0 ? v24 : *(_BYTE **)v24;
        v5 = *(_DWORD *)(a1 + 128);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v21 = v4;
        *(_WORD *)&v21[8] = 1024;
        *(_DWORD *)&v21[10] = v5;
        v22 = 1024;
        LODWORD(v23) = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s not ready to upload: invalid reachability. Have %d and need %d", buf, 0x18u);
        if (SHIBYTE(v28) < 0)
          operator delete(*(void **)v24);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102180480);
        v7 = qword_1022A0208;
        sub_100B6ADE8(*(_DWORD *)(a1 + 16));
        if (v17 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        v9 = *(_DWORD *)(a1 + 128);
        *(_DWORD *)v24 = 136315650;
        *(_QWORD *)&v24[4] = p_p;
        v25 = 1024;
        v26 = v9;
        v27 = 1024;
        v28 = v2;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "%s not ready to upload: invalid reachability. Have %d and need %d", v24, 24, v15);
        if (v17 < 0)
          operator delete(__p);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLSubHarvester::baseUploadRequirementsMet()", "%s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
        return 0;
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102180480);
      v11 = qword_1022A0208;
      result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        v14 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)v21 = 0;
        *(_WORD *)&v21[4] = 2082;
        *(_QWORD *)&v21[6] = "";
        v22 = 2050;
        v23 = v14;
        v13 = "{\"msg%{public}.0s\":\"not ready to upload: no locations\", \"subHarvester\":%{public, location:CLSubHarve"
              "sterIdentifier}lld}";
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102180480);
    v11 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      v12 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v21 = 0;
      *(_WORD *)&v21[4] = 2082;
      *(_QWORD *)&v21[6] = "";
      v22 = 2050;
      v23 = v12;
      v13 = "{\"msg%{public}.0s\":\"not ready to upload: turned off\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_32:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, v13, buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100D05024(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  double v16;

  result = sub_100D04C5C(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    if ((_DWORD)result)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102180480);
      v3 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v4 = *(unsigned int *)(a1 + 16);
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
        v6 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
           - *(double *)(a1 + 96);
        v8[0] = 68289795;
        v8[1] = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2049;
        v12 = v4;
        v13 = 2049;
        v14 = v5;
        v15 = 2049;
        v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Harvest-Upload\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld, \"numPoints\":%{private}lu, \"secondsSinceLastUpload\":\"%{private}f\"}", (uint8_t *)v8, 0x30u);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
      v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
      return sub_100D04B38(a1, v7);
    }
  }
  return result;
}

void sub_100D05194(uint64_t a1)
{
  int v2;
  int v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  NSObject *v16;
  uint64_t v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  double v24;
  __int128 v25;
  uint64_t v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;

  if (sub_100D04C5C(a1))
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  else
    v2 = 0;
  v3 = *(unsigned __int8 *)(a1 + 344);
  if ((v2 & 1) != 0 || *(_BYTE *)(a1 + 344))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    v5 = 224;
    if (!v3)
      v5 = 232;
    *(double *)(a1 + v5) = v4 - *(double *)(a1 + 336) + *(double *)(a1 + v5);
    *(double *)(a1 + 336) = v4;
    v6 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    v25 = *(_OWORD *)(a1 + 104);
    v26 = *(_QWORD *)(a1 + 120);
    sub_1011E7824(a1 + 280, (uint64_t)&v25);
    v8 = v7;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102180480);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(unsigned int *)(a1 + 16);
      v11 = *(double *)(a1 + 96);
      v12 = *(double *)(a1 + 328);
      *(_DWORD *)buf = 68290307;
      v28 = 0;
      v29 = 2082;
      v30 = "";
      v31 = 2050;
      v32 = v10;
      v33 = 2049;
      v34 = v11;
      v35 = 2049;
      v36 = v12;
      v37 = 2049;
      v38 = v6 - v11;
      v39 = 2049;
      v40 = v12 - v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#uploadTimer ATU\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"fLastUploadTime_s\":\"%{private}.09f\", \"fNextUploadTime_s\":\"%{private}.09f\", \"sinceLU_s\":\"%{private}.09f\", \"tillNU_s\":\"%{private}.09f\"}", buf, 0x44u);
    }
    if (!v2)
    {
      v6 = 1.79769313e308;
LABEL_32:
      *(_BYTE *)(a1 + 344) = v2;
      *(double *)(a1 + 328) = v6;
      (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a1 + 56) + 56))(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 16), v6);
      return;
    }
    v13 = *(double *)(a1 + 328);
    v14 = v8 + *(double *)(a1 + 96);
    if (v13 <= v6 || v13 >= v14)
    {
      if (v14 >= v6)
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102180480);
        v22 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        {
          v23 = *(unsigned int *)(a1 + 16);
          v24 = *(double *)(a1 + 96);
          *(_DWORD *)buf = 68289795;
          v28 = 0;
          v29 = 2082;
          v30 = "";
          v31 = 2050;
          v32 = v23;
          v33 = 2049;
          v34 = v24;
          v35 = 2049;
          v36 = v8;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#uploadTimer option B\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"fLastUploadTime\":\"%{private}f\", \"interval\":\"%{private}f\"}", buf, 0x30u);
        }
        v6 = v8 + *(double *)(a1 + 96);
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102180480);
        v16 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        {
          v17 = *(unsigned int *)(a1 + 16);
          v18 = *(double *)(a1 + 96);
          *(_DWORD *)buf = 68289795;
          v28 = 0;
          v29 = 2082;
          v30 = "";
          v31 = 2050;
          v32 = v17;
          v33 = 2049;
          v34 = v18;
          v35 = 2049;
          v36 = v8;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#uploadTimer option C\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"fLastUploadTime\":\"%{private}f\", \"interval\":\"%{private}f\"}", buf, 0x30u);
        }
      }
      goto LABEL_32;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102180480);
    v19 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v20 = *(unsigned int *)(a1 + 16);
      v21 = *(double *)(a1 + 96);
      *(_DWORD *)buf = 68289795;
      v28 = 0;
      v29 = 2082;
      v30 = "";
      v31 = 2050;
      v32 = v20;
      v33 = 2049;
      v34 = v21;
      v35 = 2049;
      v36 = v8;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#uploadTimer option A\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"fLastUploadTime\":\"%{private}f\", \"interval\":\"%{private}f\"}", buf, 0x30u);
    }
  }
}

