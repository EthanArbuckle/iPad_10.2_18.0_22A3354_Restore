void sub_100E511C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  if (a26 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100E51238(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char isEntitled;
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  _QWORD v28[7];
  std::__shared_weak_count *v29;
  _QWORD v30[7];
  std::__shared_weak_count *v31;
  uint8_t buf[8];
  _BYTE v33[20];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)buf = 68289282;
    *(_WORD *)v33 = 2082;
    *(_QWORD *)&v33[2] = "";
    *(_WORD *)&v33[10] = 2114;
    *(_QWORD *)&v33[12] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession handleMessageWillPromptForTranscriptSession\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v6 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v7 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)buf = 68289282;
    *(_WORD *)v33 = 2082;
    *(_QWORD *)&v33[2] = "";
    *(_WORD *)&v33[10] = 2114;
    *(_QWORD *)&v33[12] = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession handleMessageWillPromptForTranscriptSession", "{\"msg%{public}.0s\":\"#transcriptSession handleMessageWillPromptForTranscriptSession\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v8 = *a2;
  sub_1015A2E04(buf, "com.apple.locationd.transcript-session");
  isEntitled = CLConnectionMessage::isEntitled(v8, buf);
  v10 = isEntitled;
  if ((v33[15] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  else if ((isEntitled & 1) != 0)
  {
LABEL_10:
    *(_QWORD *)buf = 0;
    *(_QWORD *)v33 = buf;
    *(_QWORD *)&v33[8] = 0x2020000000;
    v33[16] = 0;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3321888768;
    v30[2] = sub_100E560A4;
    v30[3] = &unk_10218C488;
    v30[4] = buf;
    v30[5] = a1;
    v11 = *a2;
    v12 = (std::__shared_weak_count *)a2[1];
    v30[6] = *a2;
    v31 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v11 = *a2;
      v12 = (std::__shared_weak_count *)a2[1];
    }
    v15 = *(void **)(a1 + 272);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3321888768;
    v28[2] = sub_100E56308;
    v28[3] = &unk_10218C4C0;
    v28[5] = a1;
    v28[6] = v11;
    v29 = v12;
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v28[4] = v30;
    objc_msgSend(v15, "fetchLookbackWindowStartDateWithReply:", v28);
    v18 = v29;
    if (v29)
    {
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v31;
    if (v31)
    {
      v22 = (unint64_t *)&v31->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    _Block_object_dispose(buf, 8);
    return;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  v24 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
  {
    v25 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)buf = 68289282;
    *(_WORD *)v33 = 2082;
    *(_QWORD *)&v33[2] = "";
    *(_WORD *)&v33[10] = 2114;
    *(_QWORD *)&v33[12] = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to access WillPromptForTranscriptSession\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  }
  v26 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v27 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)buf = 68289282;
    *(_WORD *)v33 = 2082;
    *(_QWORD *)&v33[2] = "";
    *(_WORD *)&v33[10] = 2114;
    *(_QWORD *)&v33[12] = v27;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning entitlement is required to access WillPromptForTranscriptSession", "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to access WillPromptForTranscriptSession\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  CLConnectionMessage::sendReply(*a2);
}

void sub_100E516A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100261F44(v2);
  sub_100261F44(v1);
  _Block_object_dispose((const void *)(v3 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100E516F0(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char isEntitled;
  char v10;
  void *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD v23[6];
  std::__shared_weak_count *v24;
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2114;
    v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession handleMessageIsConsideredInRemoteArea\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v6 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v7 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2114;
    v29 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession handleMessageIsConsideredInRemoteArea", "{\"msg%{public}.0s\":\"#transcriptSession handleMessageIsConsideredInRemoteArea\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v8 = *a2;
  sub_1015A2E04(buf, "com.apple.locationd.transcript-session");
  isEntitled = CLConnectionMessage::isEntitled(v8, buf);
  v10 = isEntitled;
  if (SBYTE3(v29) < 0)
  {
    operator delete(*(void **)buf);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  else if ((isEntitled & 1) != 0)
  {
LABEL_10:
    v11 = *(void **)(a1 + 272);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768;
    v23[2] = sub_100E56970;
    v23[3] = &unk_10218C4F0;
    v13 = *a2;
    v12 = (std::__shared_weak_count *)a2[1];
    v23[4] = a1;
    v23[5] = v13;
    v24 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    objc_msgSend(v11, "fetchRemoteStatusWithReply:", v23);
    v16 = v24;
    if (v24)
    {
      v17 = (unint64_t *)&v24->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    return;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  v19 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
  {
    v20 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2114;
    v29 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to access isConsideredInRemoteArea\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  }
  v21 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v22 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2114;
    v29 = v22;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning entitlement is required to access isConsideredInRemoteArea", "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to access isConsideredInRemoteArea\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  CLConnectionMessage::sendReply(*a2);
}

void sub_100E51AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  sub_100261F44(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100E51AE4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v10;
  id v11;
  _QWORD v13[5];
  void *__dst[2];
  uint64_t v15;
  __int128 __p;
  uint64_t v17;
  uint64_t v18;

  if (*(char *)(a5 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a5;
    v15 = *(_QWORD *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a5 + 24), *(_QWORD *)(a5 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a5 + 24);
    v17 = *(_QWORD *)(a5 + 40);
  }
  v18 = *(_QWORD *)(a5 + 48);
  sub_10005164C(a1, a2, a3, a4, (__int128 *)__dst);
  *(_QWORD *)a1 = off_10218C560;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v15) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)a1 = off_10218C370;
  *(_DWORD *)(a1 + 250) = 0;
  *(_WORD *)(a1 + 254) = 0;
  *(_QWORD *)(a1 + 264) = objc_alloc_init(CLTranscriptSubscriptionAdapter);
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 344) = 0x404E000000000000;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0xBFF0000000000000;
  v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
  *(_QWORD *)(a1 + 272) = v10;
  objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 264), objc_msgSend(*(id *)(a1 + 128), "silo"));
  v11 = objc_msgSend(objc_alloc((Class)CLSettingsMirror), "initInUniverse:", a2);
  *(_QWORD *)(a1 + 320) = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100E51D0C;
  v13[3] = &unk_102154268;
  v13[4] = a1;
  objc_msgSend(v11, "setSettingsChangeHandler:", v13);
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 3000;
  return a1;
}

void sub_100E51CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100E51D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v1 + 320), "doubleForKey:defaultValue:", CFSTR("CLTS.HorizontalAccuracyValue"), 60.0);
  *(_QWORD *)(v1 + 344) = v2;
  result = objc_msgSend(*(id *)(v1 + 320), "doubleForKey:defaultValue:", CFSTR("CLTS.SmoothingFactorValue"), 0.0);
  *(_QWORD *)(v1 + 352) = v4;
  return result;
}

uint64_t sub_100E51D60(uint64_t a1)
{
  *(_QWORD *)a1 = off_10218C370;

  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  objc_msgSend(*(id *)(a1 + 264), "invalidate");

  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  objc_msgSend(*(id *)(a1 + 320), "invalidate");

  *(_QWORD *)(a1 + 320) = 0;
  sub_100261F44(a1 + 304);
  sub_100261F44(a1 + 288);
  return sub_100720438(a1);
}

void sub_100E51DF0(uint64_t a1)
{
  sub_100E51D60(a1);
  operator delete();
}

uint64_t sub_100E51E14(uint64_t a1)
{
  uint64_t result;
  id v3;

  result = *(_QWORD *)(a1 + 280);
  if (!result)
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    *(_QWORD *)(a1 + 280) = v3;
    objc_msgSend(v3, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 264), objc_msgSend(*(id *)(a1 + 128), "silo"));
    return *(_QWORD *)(a1 + 280);
  }
  return result;
}

void sub_100E51E80(uint64_t a1)
{
  unsigned int v2;
  int v3;
  _BOOL4 v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *Dictionary;
  double v29;
  double v30;
  int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  NSDate *v44;
  double v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  id v60;
  NSObject *v61;
  uint64_t v62;
  id v63;
  unint64_t *v64;
  unsigned __int8 v65;
  double v66;
  _QWORD v67[6];
  std::__shared_weak_count *v68;
  CLConnectionMessage *v69;
  std::__shared_weak_count *v70;
  const __CFString *v71;
  uint64_t v72;
  uint8_t buf[8];
  _BYTE v74[10];
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  _BYTE v78[10];
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  _BOOL4 v84;
  __int16 v85;
  int v86;

  v2 = objc_msgSend(*(id *)(a1 + 136), "isNonProvisionallyAuthorizedForServiceTypeMask:", 4112);
  if ((v2 & 1) == 0)
  {
    v9 = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate")) != 0;
LABEL_10:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    v10 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(unsigned __int8 *)(a1 + 256);
      v13 = *(unsigned __int8 *)(a1 + 250);
      *(_DWORD *)buf = 68290818;
      *(_WORD *)v74 = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&v74[2] = "";
      v75 = 2114;
      v76 = v11;
      v77 = 1026;
      *(_DWORD *)v78 = v12;
      *(_WORD *)&v78[4] = 1026;
      *(_DWORD *)&v78[6] = v13;
      v79 = 1026;
      v80 = 0;
      v81 = 1026;
      v82 = 0;
      v83 = 1026;
      v84 = v9;
      v85 = 1026;
      v86 = v2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession attempting to stopTranscriptSession\", \"client\":%{public, location:escape_only}@, \"fShouldPrompt\":%{public}hhd, \"fNeedSession\":%{public}hhd, \"shouldBeStarted\":%{public}hhd, \"shouldSendSingleRequest\":%{public}hhd, \"hasBeenStarted\":%{public}hhd, \"authorized\":%{public}hhd}", buf, 0x40u);
    }
    if ((v2 & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      v14 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v74 = 2082;
        *(_QWORD *)&v74[2] = "";
        v75 = 2114;
        v76 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #warning client is not authorized for locations\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      }
      v16 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v17 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v74 = 2082;
        *(_QWORD *)&v74[2] = "";
        v75 = 2114;
        v76 = v17;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning client is not authorized for locations", "{\"msg%{public}.0s\":\"#transcriptSession #warning client is not authorized for locations\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    sub_100E54254((_QWORD *)a1);
    v4 = 0;
    v6 = 0;
    if (v9)
      goto LABEL_32;
    goto LABEL_44;
  }
  v3 = *(unsigned __int8 *)(a1 + 250);
  v4 = *(_BYTE *)(a1 + 250) != 0;
  v5 = *(unsigned __int8 *)(a1 + 252);
  v6 = *(_BYTE *)(a1 + 252) != 0;
  v7 = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate"));
  v8 = v7;
  v9 = v7 != 0;
  if (v3 && !*(_BYTE *)(a1 + 255))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    v18 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 64);
      v20 = *(unsigned __int8 *)(a1 + 256);
      v21 = *(unsigned __int8 *)(a1 + 250);
      *(_DWORD *)buf = 68290818;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v74 = 2082;
      *(_QWORD *)&v74[2] = "";
      v75 = 2114;
      v76 = v19;
      v77 = 1026;
      *(_DWORD *)v78 = v20;
      *(_WORD *)&v78[4] = 1026;
      *(_DWORD *)&v78[6] = v21;
      v79 = 1026;
      v80 = v3;
      v81 = 1026;
      v82 = v5;
      v83 = 1026;
      v84 = v8 != 0;
      v85 = 1026;
      v86 = 1;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession attempting to startTranscriptSession\", \"client\":%{public, location:escape_only}@, \"fShouldPrompt\":%{public}hhd, \"fNeedSession\":%{public}hhd, \"shouldBeStarted\":%{public}hhd, \"shouldSendSingleRequest\":%{public}hhd, \"hasBeenStarted\":%{public}hhd, \"authorized\":%{public}hhd}", buf, 0x40u);
    }
    *(_BYTE *)(a1 + 255) = 1;
    sub_100E53D08(a1);
    v4 = 1;
    if (v8)
      goto LABEL_32;
LABEL_44:
    if (*(_QWORD *)(a1 + 288) && *(_BYTE *)(a1 + 254))
    {
      v37 = *(std::__shared_weak_count **)(a1 + 296);
      v69 = *(CLConnectionMessage **)(a1 + 288);
      v70 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)v74 = 0;
      sub_1002B7674(a1 + 288, (__int128 *)buf);
      v40 = *(std::__shared_weak_count **)v74;
      if (*(_QWORD *)v74)
      {
        v41 = (unint64_t *)(*(_QWORD *)v74 + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (objc_msgSend(*(id *)(a1 + 360), "count"))
      {
        v43 = *(_QWORD *)(a1 + 360);
        v71 = CFSTR("kCLConnectionMessageTranscriptFetchLocationsKey");
        v72 = v43;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v72, &v71, 1);
        CLConnectionMessage::sendReply(v69);
      }
      else if (!objc_msgSend(*(id *)(a1 + 360), "count"))
      {
        sub_10192EE30();
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLTranscriptSubscription.mm", 452, "checkTranscriptSession");
        __break(1u);
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      v58 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v59 = *(_QWORD *)(a1 + 64);
        v60 = objc_msgSend(*(id *)(a1 + 360), "count");
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v74 = 2082;
        *(_QWORD *)&v74[2] = "";
        v75 = 2114;
        v76 = v59;
        v77 = 2050;
        *(_QWORD *)v78 = v60;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession historical request has responded\", \"client\":%{public, location:escape_only}@, \"locations\":%{public}ld}", buf, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      }
      v61 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v62 = *(_QWORD *)(a1 + 64);
        v63 = objc_msgSend(*(id *)(a1 + 360), "count");
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v74 = 2082;
        *(_QWORD *)&v74[2] = "";
        v75 = 2114;
        v76 = v62;
        v77 = 2050;
        *(_QWORD *)v78 = v63;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v61, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession historical request has responded", "{\"msg%{public}.0s\":\"#transcriptSession historical request has responded\", \"client\":%{public, location:escape_only}@, \"locations\":%{public}ld}", buf, 0x26u);
      }
      sub_100E54A98(a1);
      v55 = v70;
      if (v70)
      {
        v64 = (unint64_t *)&v70->__shared_owners_;
        do
          v57 = __ldaxr(v64);
        while (__stlxr(v57 - 1, v64));
LABEL_90:
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        goto LABEL_92;
      }
    }
    else if ((v4 || v6) && *(_BYTE *)(a1 + 251))
    {
      sub_100E529A0(a1, 0);
    }
    goto LABEL_92;
  }
  if (!v5)
  {
    if (v3)
    {
      v6 = 0;
      v4 = 1;
      if (!v7)
        goto LABEL_44;
      goto LABEL_32;
    }
    goto LABEL_10;
  }
  if (!*(_BYTE *)(a1 + 253))
    sub_100E54708(a1);
  v6 = 1;
  if (!v8)
    goto LABEL_44;
LABEL_32:
  if (!*(_QWORD *)(a1 + 288))
    goto LABEL_44;
  v22 = *(std::__shared_weak_count **)(a1 + 296);
  v69 = *(CLConnectionMessage **)(a1 + 288);
  v70 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v74 = 0;
  sub_1002B7674(a1 + 288, (__int128 *)buf);
  v25 = *(std::__shared_weak_count **)v74;
  if (*(_QWORD *)v74)
  {
    v26 = (unint64_t *)(*(_QWORD *)v74 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(v69);
  objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchRadiusKey")), "doubleValue");
  v30 = v29;
  v31 = objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchSampleCountKey")), "intValue");
  objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchCenterLatitudeKey")), "doubleValue");
  v33 = v32;
  objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchCenterLongitudeKey")), "doubleValue");
  v35 = v34;
  if (objc_msgSend(Dictionary, "objectForKey:", CFSTR("kCLConnectionMessageTranscriptFetchCenterLatitudeKey"))
    && objc_msgSend(Dictionary, "objectForKey:", CFSTR("kCLConnectionMessageTranscriptFetchCenterLongitudeKey")))
  {
    v36 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", sub_100E52958((_QWORD *)a1), v33, v35, -1.0, v30, -1.0);
  }
  else
  {
    v36 = 0;
  }
  v44 = sub_100E52958((_QWORD *)a1);
  v45 = *(double *)(a1 + 344);
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3321888768;
  v67[2] = sub_100E548A0;
  v67[3] = &unk_10218C3B8;
  v67[4] = a1;
  v67[5] = v69;
  v68 = v70;
  if (v70)
  {
    v46 = (unint64_t *)&v70->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  sub_100E52C50(a1, (const __CFDate *)v44, v31, (uint64_t)v36, (uint64_t)v67, v45);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v48 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v49 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v74 = 2082;
    *(_QWORD *)&v74[2] = "";
    v75 = 2114;
    v76 = v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession a message was stashed, but now able to send transcript locations to client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v50 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v51 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v74 = 2082;
    *(_QWORD *)&v74[2] = "";
    v75 = 2114;
    v76 = v51;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession a message was stashed, but now able to send transcript locations to client", "{\"msg%{public}.0s\":\"#transcriptSession a message was stashed, but now able to send transcript locations to client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v52 = v68;
  if (v68)
  {
    v53 = (unint64_t *)&v68->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v70;
  if (v70)
  {
    v56 = (unint64_t *)&v70->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    goto LABEL_90;
  }
LABEL_92:
  v65 = objc_msgSend(*(id *)(a1 + 136), "inUseLevelIsAtLeast:", 5);
  v66 = -1.0;
  if ((v65 & 1) == 0)
  {
    if (*(double *)(a1 + 368) != -1.0)
      return;
    v66 = sub_100515CB4();
  }
  *(double *)(a1 + 368) = v66;
}

void sub_100E52910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

NSDate *sub_100E52958(_QWORD *a1)
{
  NSDate *result;

  result = (NSDate *)sub_1001FE40C(a1, (uint64_t)CFSTR("startDate"));
  if (result)
  {
    -[NSDate doubleValue](result, "doubleValue");
    return +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  }
  return result;
}

void sub_100E529A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[8];
  _BYTE v23[10];
  __int16 v24;
  uint64_t v25;

  v4 = a1 + 288;
  v5 = *(std::__shared_weak_count **)(a1 + 296);
  v20 = *(_QWORD *)(a1 + 288);
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v23 = 0;
  sub_1002B7674(v4, (__int128 *)buf);
  v8 = *(std::__shared_weak_count **)v23;
  if (*(_QWORD *)v23)
  {
    v9 = (unint64_t *)(*(_QWORD *)v23 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_BYTE *)(a1 + 251) = 0;
  v11 = v20;
  if (v20)
  {
    v12 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    v13 = v12;
    if (a2)
      objc_msgSend(v12, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessageTranscriptError"));
    +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v13, v20);
    CLConnectionMessage::sendReply(v11);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v23 = 2082;
      *(_QWORD *)&v23[2] = "";
      v24 = 2114;
      v25 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sent empty locations\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v16 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v17 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v23 = 2082;
      *(_QWORD *)&v23[2] = "";
      v24 = 2114;
      v25 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession sent empty locations", "{\"msg%{public}.0s\":\"#transcriptSession sent empty locations\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  if (*(_BYTE *)(a1 + 252))
    sub_100E54A98(a1);
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_100E52C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100E52C50(uint64_t a1, const __CFDate *a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSDate *v16;
  id v17;
  double AbsoluteTime;
  id v19;
  void *v20;
  NSObject *v21;
  const __CFDate *v22;
  NSObject *v23;
  const __CFDate *v24;
  _QWORD v25[6];
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const __CFDate *v31;
  __int16 v32;
  double v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v12 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68290306;
    v27 = 0;
    v28 = 2082;
    v29 = "";
    v30 = 2114;
    v31 = a2;
    v32 = 2050;
    v33 = a6;
    v34 = 2050;
    v35 = a3;
    v36 = 2114;
    v37 = a4;
    v38 = 2114;
    v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Fetching Transcript Locations from Routine\", \"startDate\":%{public, location:escape_only}@, \"horizontalAcc\":\"%{public}f\", \"sampleCount\":%{public}ld, \"locationCenter\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", buf, 0x44u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v14 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v15 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68290306;
    v27 = 0;
    v28 = 2082;
    v29 = "";
    v30 = 2114;
    v31 = a2;
    v32 = 2050;
    v33 = a6;
    v34 = 2050;
    v35 = a3;
    v36 = 2114;
    v37 = a4;
    v38 = 2114;
    v39 = v15;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Fetching Transcript Locations from Routine", "{\"msg%{public}.0s\":\"#transcriptSession Fetching Transcript Locations from Routine\", \"startDate\":%{public, location:escape_only}@, \"horizontalAcc\":\"%{public}f\", \"sampleCount\":%{public}ld, \"locationCenter\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", buf, 0x44u);
  }
  v16 = +[NSDate now](NSDate, "now");
  if (a2 && (id)-[NSDate compare:](v16, "compare:", a2) == (id)1)
  {
    v17 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", a2, +[NSDate now](NSDate, "now"));
    AbsoluteTime = CFDateGetAbsoluteTime(a2);
    if (AbsoluteTime < CFAbsoluteTimeGetCurrent())
    {
      v19 = objc_msgSend(objc_alloc((Class)RTStoredLocationEnumerationOptions), "initWithDateInterval:horizontalAccuracy:batchSize:boundingBoxLocation:type:downsampleRequired:smoothingErrorThreshold:", v17, a3, a4, 14, 1, a6, *(double *)(a1 + 352));
      objc_msgSend(v19, "setSmoothingRequired:", 1);
      v20 = *(void **)(a1 + 272);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100E534A4;
      v25[3] = &unk_10218C3F0;
      v25[4] = a5;
      v25[5] = a1;
      objc_msgSend(v20, "enumerateStoredLocationsWithOptions:withReply:", v19, v25);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v21 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(const __CFDate **)(a1 + 64);
      *(_DWORD *)buf = 68289538;
      v27 = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2114;
      v31 = v22;
      v32 = 2114;
      v33 = *(double *)&a2;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #error date range is invalid\", \"client\":%{public, location:escape_only}@, \"startDate\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v23 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v24 = *(const __CFDate **)(a1 + 64);
      *(_DWORD *)buf = 68289538;
      v27 = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2114;
      v31 = v24;
      v32 = 2114;
      v33 = *(double *)&a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #error date range is invalid", "{\"msg%{public}.0s\":\"#transcriptSession #error date range is invalid\", \"client\":%{public, location:escape_only}@, \"startDate\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(a5 + 16))(a5, &__NSArray0__struct, 0, 1);
  }
}

void sub_100E5308C(uint64_t a1, void *a2, NSError *a3, char a4)
{
  NSError *v5;
  uint64_t v8;
  NSString *v9;
  NSObject *v10;
  const char *v11;
  NSInteger v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  NSInteger v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  const char *v20;
  id v21;
  NSObject *v22;
  const char *v23;
  id v24;
  NSErrorUserInfoKey v25;
  const __CFString *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  NSInteger v34;
  __int16 v35;
  uint64_t v36;

  v5 = a3;
  v8 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v9 = -[NSError localizedFailureReason](a3, "localizedFailureReason");
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v11 = -[NSString UTF8String](v9, "UTF8String");
      v12 = -[NSError code](v5, "code");
      v13 = *(_QWORD *)(v8 + 64);
      *(_DWORD *)buf = 68289794;
      v28 = 0;
      v29 = 2082;
      v30 = "";
      v31 = 2082;
      v32 = v11;
      v33 = 2050;
      v34 = v12;
      v35 = 2114;
      v36 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession Error when getting locations from CoreRoutine\", \"error\":%{public, location:escape_only}s, \"errorCode\":%{public}ld, \"client\":%{public, location:escape_only}@}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v14 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v15 = -[NSString UTF8String](v9, "UTF8String");
      v16 = -[NSError code](v5, "code");
      v17 = *(_QWORD *)(v8 + 64);
      *(_DWORD *)buf = 68289794;
      v28 = 0;
      v29 = 2082;
      v30 = "";
      v31 = 2082;
      v32 = v15;
      v33 = 2050;
      v34 = v16;
      v35 = 2114;
      v36 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Error when getting locations from CoreRoutine", "{\"msg%{public}.0s\":\"#transcriptSession Error when getting locations from CoreRoutine\", \"error\":%{public, location:escape_only}s, \"errorCode\":%{public}ld, \"client\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    v25 = NSLocalizedDescriptionKey;
    v26 = CFSTR("Error fetching locations.");
    v5 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 0, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
  }
  if ((a4 & 1) == 0)
  {
    v18 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v18, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessageTranscriptFetchLocationsKey"));
    if (v5)
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v5, CFSTR("kCLConnectionMessageTranscriptError"));
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 40));
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(const char **)(v8 + 64);
      v21 = objc_msgSend(a2, "count");
      *(_DWORD *)buf = 68289538;
      v28 = 0;
      v29 = 2082;
      v30 = "";
      v31 = 2114;
      v32 = v20;
      v33 = 2050;
      v34 = (NSInteger)v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession locations sent to client\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v22 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v23 = *(const char **)(v8 + 64);
      v24 = objc_msgSend(a2, "count");
      *(_DWORD *)buf = 68289538;
      v28 = 0;
      v29 = 2082;
      v30 = "";
      v31 = 2114;
      v32 = v23;
      v33 = 2050;
      v34 = (NSInteger)v24;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession locations sent to client", "{\"msg%{public}.0s\":\"#transcriptSession locations sent to client\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld}", buf, 0x26u);
    }
  }
}

uint64_t sub_100E534A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  void *v14;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  int v25;

  v8 = *(_QWORD *)(a1 + 40);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(v8 + 64);
    v16 = 68289794;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2114;
    v21 = v10;
    v22 = 2050;
    v23 = objc_msgSend(a2, "count");
    v24 = 1026;
    v25 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Routine's enumerateStoredLocationsWithOptions handler is called with locations\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld, \"enumerationCompleted\":%{public}hhd}", (uint8_t *)&v16, 0x2Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v11 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v12 = *(_QWORD *)(v8 + 64);
    v13 = objc_msgSend(a2, "count");
    v16 = 68289794;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2114;
    v21 = v12;
    v22 = 2050;
    v23 = v13;
    v24 = 1026;
    v25 = a4;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Routine's enumerateStoredLocationsWithOptions handler is called with locations", "{\"msg%{public}.0s\":\"#transcriptSession Routine's enumerateStoredLocationsWithOptions handler is called with locations\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld, \"enumerationCompleted\":%{public}hhd}", (uint8_t *)&v16, 0x2Cu);
  }
  if (a2)
    v14 = a2;
  else
    v14 = &__NSArray0__struct;
  return (*(uint64_t (**)(_QWORD, void *, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v14, a3, a4);
}

void sub_100E536BC(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9[2];
  void *v10[2];
  __int128 v11;
  void *v12[2];
  void *v13[2];
  __int128 v14;
  void *v15[2];
  __int128 v16;
  void *v17[2];
  void *__p[2];
  __int128 v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 250) && !sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate")))
  {
    objc_msgSend(a2, "timeIntervalSinceReferenceDate");
    sub_100E539FC(a1, (uint64_t)CFSTR("startDate"), (uint64_t)+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    sub_100E53AAC(a1);
    sub_100E51E14(a1);
    v4 = *(void **)(a1 + 64);
    if (v4)
    {
      objc_msgSend(v4, "clientName");
    }
    else
    {
      v20 = 0;
      *(_OWORD *)__p = 0u;
      v19 = 0u;
      v16 = 0u;
      *(_OWORD *)v17 = 0u;
      v14 = 0u;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)v13 = 0u;
      *(_OWORD *)v10 = 0u;
      v11 = 0u;
      *(_OWORD *)v9 = 0u;
    }
    sub_100248320();
  }
  if (sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate")))
  {
    v5 = *(_QWORD *)(a1 + 304);
    if (v5)
    {
      CLConnectionMessage::sendReply(v5);
      v9[0] = 0;
      v9[1] = 0;
      sub_1002B7674(a1 + 304, (__int128 *)v9);
      v6 = (std::__shared_weak_count *)v9[1];
      if (v9[1])
      {
        v7 = (unint64_t *)((char *)v9[1] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_100E539E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100E539FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_1001FE68C(a1);
  v6 = *(_QWORD *)(a1 + 48);
  sub_1007208BC(&v10, (_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, &v10, a2, a3);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_100E53A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100E53AAC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1001FE68C(a1);
  v2 = *(_QWORD *)(a1 + 48);
  sub_1007208BC(&v6, (_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 40))(v2, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E53B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100E53B44(_QWORD *a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  if (!a2)
    sub_10192EFA4();
  if (sub_1001FE40C(a1, (uint64_t)CFSTR("startDate")))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #Warning Can't set commencement date because a session has already started\"}", (uint8_t *)&v6, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v5 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #Warning Can't set commencement date because a session has already started", "{\"msg%{public}.0s\":\"#transcriptSession #Warning Can't set commencement date because a session has already started\"}", (uint8_t *)&v6, 0x12u);
    }
  }
  else
  {
    sub_100E536BC((uint64_t)a1, a2);
  }
}

void sub_100E53D08(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[10];
  __int16 v16;
  uint64_t v17;

  if (sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate")))
  {
    v2 = *(_QWORD *)(a1 + 304);
    if (v2)
    {
      CLConnectionMessage::sendReply(v2);
      v14 = 0;
      *(_QWORD *)v15 = 0;
      sub_1002B7674(a1 + 304, (__int128 *)&v14);
      v3 = *(std::__shared_weak_count **)v15;
      if (*(_QWORD *)v15)
      {
        v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      v6 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 64);
        v14 = 68289282;
        *(_WORD *)v15 = 2082;
        *(_QWORD *)&v15[2] = "";
        v16 = 2114;
        v17 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"a #transcriptSession has already started so sending an empty reply\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      }
      v8 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v9 = *(_QWORD *)(a1 + 64);
        v14 = 68289282;
        *(_WORD *)v15 = 2082;
        *(_QWORD *)&v15[2] = "";
        v16 = 2114;
        v17 = v9;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "a #transcriptSession has already started so sending an empty reply", "{\"msg%{public}.0s\":\"a #transcriptSession has already started so sending an empty reply\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
      }
    }
    *(_BYTE *)(a1 + 255) = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 256))
      sub_100E5408C(a1);
    else
      sub_100E53B44((_QWORD *)a1, +[NSDate now](NSDate, "now"));
    if (*(double *)(a1 + 368) != -1.0)
      *(double *)(a1 + 368) = sub_100515CB4();
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 64);
      v14 = 68289282;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      v16 = 2114;
      v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession attempts to start\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v12 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v13 = *(_QWORD *)(a1 + 64);
      v14 = 68289282;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      v16 = 2114;
      v17 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession attempts to start", "{\"msg%{public}.0s\":\"#transcriptSession attempts to start\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
    }
  }
}

id sub_100E5408C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[5];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2114;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession locationd requesting fetchLookbackWindowStartDate.\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v4 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v5 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2114;
    v14 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession locationd requesting fetchLookbackWindowStartDate.", "{\"msg%{public}.0s\":\"#transcriptSession locationd requesting fetchLookbackWindowStartDate.\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v6 = *(void **)(a1 + 272);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100E54DC8;
  v8[3] = &unk_10218C410;
  v8[4] = a1;
  return objc_msgSend(v6, "fetchLookbackWindowStartDateWithReply:", v8);
}

void sub_100E54254(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11[4];
  __int128 v12;
  void *v13[2];
  void *v14[2];
  __int128 v15;
  void *v16[2];
  __int128 v17;
  void *v18[2];
  void *__p[2];
  __int128 v20;
  uint64_t v21;

  if (sub_1001FE40C(a1, (uint64_t)CFSTR("startDate")))
  {
    sub_100E51E14((uint64_t)a1);
    v2 = (void *)a1[8];
    if (v2)
    {
      objc_msgSend(v2, "clientName");
    }
    else
    {
      v21 = 0;
      *(_OWORD *)__p = 0u;
      v20 = 0u;
      v17 = 0u;
      *(_OWORD *)v18 = 0u;
      v15 = 0u;
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)v13 = 0u;
      *(_OWORD *)v14 = 0u;
      v12 = 0u;
      memset(v11, 0, sizeof(v11));
    }
    sub_100248320();
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)a1[8];
    v11[0] = (void *)68289282;
    LOWORD(v11[1]) = 2082;
    *(void **)((char *)&v11[1] + 2) = "";
    WORD1(v11[2]) = 2114;
    *(void **)((char *)&v11[2] + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #warning transcript session has not started\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v11, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v5 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v6 = (void *)a1[8];
    v11[0] = (void *)68289282;
    LOWORD(v11[1]) = 2082;
    *(void **)((char *)&v11[1] + 2) = "";
    WORD1(v11[2]) = 2114;
    *(void **)((char *)&v11[2] + 4) = v6;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning transcript session has not started", "{\"msg%{public}.0s\":\"#transcriptSession #warning transcript session has not started\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v11, 0x1Cu);
  }
  v7 = a1[38];
  if (v7)
  {
    CLConnectionMessage::sendReply(v7);
    v11[0] = 0;
    v11[1] = 0;
    sub_1002B7674((uint64_t)(a1 + 38), (__int128 *)v11);
    v8 = (std::__shared_weak_count *)v11[1];
    if (v11[1])
    {
      v9 = (unint64_t *)((char *)v11[1] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_100E546C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100E546E4(uint64_t result)
{
  if (*(_BYTE *)(result + 248))
    sub_10192F138();
  return result;
}

void sub_100E54708(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 253) = 1;
  sub_100E5408C(a1);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v6 = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession a request for historical locations has been made, attempting to prompt for historical locations if exists.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v4 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v5 = *(_QWORD *)(a1 + 64);
    v6 = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession a request for historical locations has been made, attempting to prompt for historical locations if exists.", "{\"msg%{public}.0s\":\"#transcriptSession a request for historical locations has been made, attempting to prompt for historical locations if exists.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
  }
}

void sub_100E548A0(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  id v19;
  const __CFString *v20;
  void *v21;

  if ((a4 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v20 = CFSTR("kCLConnectionMessageTranscriptFetchLocationsKey");
    v21 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 40));
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(v6 + 64);
      v12 = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2114;
      v17 = v8;
      v18 = 2050;
      v19 = objc_msgSend(a2, "count");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession locations sent to client\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld}", (uint8_t *)&v12, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v9 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v10 = *(_QWORD *)(v6 + 64);
      v11 = objc_msgSend(a2, "count");
      v12 = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2114;
      v17 = v10;
      v18 = 2050;
      v19 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession locations sent to client", "{\"msg%{public}.0s\":\"#transcriptSession locations sent to client\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld}", (uint8_t *)&v12, 0x26u);
    }
  }
}

void sub_100E54A98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[10];
  __int16 v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 252))
  {
    *(_DWORD *)(a1 + 252) = 0;
    v9 = 0;
    *(_QWORD *)v10 = 0;
    sub_1002B7674(a1 + 288, (__int128 *)&v9);
    v2 = *(std::__shared_weak_count **)v10;
    if (*(_QWORD *)v10)
    {
      v3 = (unint64_t *)(*(_QWORD *)v10 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    *(_QWORD *)(a1 + 328) = 0;

    *(_QWORD *)(a1 + 360) = 0;
    sub_1002244E0(a1);
    sub_100E53AAC(a1);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 64);
      v9 = 68289282;
      *(_WORD *)v10 = 2082;
      *(_QWORD *)&v10[2] = "";
      v11 = 2114;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession cleaned up historical locations request\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v7 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v8 = *(_QWORD *)(a1 + 64);
      v9 = 68289282;
      *(_WORD *)v10 = 2082;
      *(_QWORD *)&v10[2] = "";
      v11 = 2114;
      v12 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession cleaned up historical locations request", "{\"msg%{public}.0s\":\"#transcriptSession cleaned up historical locations request\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void sub_100E54C9C(uint64_t a1)
{
  void *v2;

  *(_BYTE *)(a1 + 250) = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate")) != 0;
  sub_100E51E14(a1);
  v2 = *(void **)(a1 + 64);
  if (v2)
    objc_msgSend(v2, "clientName");
  sub_100248320();
}

void sub_100E54DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100E54DC8(uint64_t a1, const __CFDate *a2, const __CFDate *a3)
{
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const __CFDate *v21;

  v5 = *(_QWORD **)(a1 + 32);
  if (sub_1001FE40C(v5, (uint64_t)CFSTR("startDate")))
    return;
  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v7 = v5[8];
      v14 = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v7;
      v20 = 2114;
      v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine.  But continuing to attempt to prompt.\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v8 = qword_1022A01D8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
      goto LABEL_12;
    v9 = v5[8];
    v14 = 68289538;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v9;
    v20 = 2114;
    v21 = a3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine.  But continuing to attempt to prompt.", "{\"msg%{public}.0s\":\"#transcriptSession #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine.  But continuing to attempt to prompt.\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
LABEL_12:
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = v5[8];
    v14 = 68289538;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v11;
    v20 = 2114;
    v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date\", \"client\":%{public, location:escape_only}@, \"Date\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v12 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v13 = v5[8];
    v14 = 68289538;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v13;
    v20 = 2114;
    v21 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date", "{\"msg%{public}.0s\":\"#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date\", \"client\":%{public, location:escape_only}@, \"Date\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
  }
  sub_100E550C4((uint64_t)v5, a2);
}

void sub_100E550C4(uint64_t a1, const __CFDate *a2)
{
  id v4;
  int v5;
  _QWORD v6[7];

  v4 = objc_msgSend(*(id *)(a1 + 64), "legacyClientKey");
  v5 = *(_DWORD *)(a1 + 336);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100E55144;
  v6[3] = &unk_10218C460;
  v6[5] = v4;
  v6[6] = a1;
  v6[4] = a2;
  sub_100E52C50(a1, a2, v5, 0, (uint64_t)v6, 0.0);
}

id sub_100E55144(id result, NSArray *a2, void *a3, char a4)
{
  NSArray *v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  CLUsageReportCoordinate *v9;
  double v10;
  double v11;
  id v12;
  NSObject *v13;
  NSUInteger v14;
  uint64_t v15;
  NSObject *v16;
  NSUInteger v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  NSUInteger v27;
  __int16 v28;
  uint64_t v29;

  if ((a4 & 1) == 0)
  {
    v4 = a2;
    v5 = result;
    v6 = *((_QWORD *)result + 6);
    result = (id)sub_100E5546C(v6, *((void **)result + 4), a2, a3);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(v6 + 253))
      {

        v4 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v4);
        *(_QWORD *)(v6 + 360) = v4;
      }
      v7 = +[NSMutableArray array](NSMutableArray, "array");
      if (-[NSArray count](v4, "count"))
      {
        v8 = 0;
        do
        {
          v9 = [CLUsageReportCoordinate alloc];
          objc_msgSend(-[NSArray objectAtIndexedSubscript:](v4, "objectAtIndexedSubscript:", v8), "coordinate");
          v11 = v10;
          objc_msgSend(-[NSArray objectAtIndexedSubscript:](v4, "objectAtIndexedSubscript:", v8), "coordinate");
          objc_msgSend(v7, "addObject:", -[CLUsageReportCoordinate initWithLatitude:longitude:](v9, "initWithLatitude:longitude:", v11));
          ++v8;
        }
        while (-[NSArray count](v4, "count") > v8);
      }
      v12 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v7, CFSTR("Locations"));
      objc_msgSend(v12, "setObject:forKeyedSubscript:", *(_QWORD *)(v6 + 328), CFSTR("UsageDescription"));
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      v13 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = -[NSArray count](v4, "count");
        v15 = *(_QWORD *)(v6 + 64);
        *(_DWORD *)buf = 68289538;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v26 = 2050;
        v27 = v14;
        v28 = 2114;
        v29 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession attempting to prompt\", \"locationsCount\":%{public}ld, \"client\":%{public, location:escape_only}@}", buf, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      }
      v16 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v17 = -[NSArray count](v4, "count");
        v18 = *(_QWORD *)(v6 + 64);
        *(_DWORD *)buf = 68289538;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v26 = 2050;
        v27 = v17;
        v28 = 2114;
        v29 = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession attempting to prompt", "{\"msg%{public}.0s\":\"#transcriptSession attempting to prompt\", \"locationsCount\":%{public}ld, \"client\":%{public, location:escape_only}@}", buf, 0x26u);
      }
      v19 = (void *)sub_100E51E14(v6);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100E55A08;
      v21[3] = &unk_10218C438;
      v21[5] = v4;
      v21[6] = v6;
      v20 = v5[5];
      v21[4] = v5[4];
      return objc_msgSend(v19, "considerPromptingForTranscriptSession:dictionary:requestType:withReply:", v20, v12, 16, v21);
    }
  }
  return result;
}

uint64_t sub_100E5546C(uint64_t a1, void *a2, void *a3, void *a4)
{
  NSDate *v8;
  double v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  id v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  int v32;
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  uint64_t v39;

  v8 = -[NSDate dateByAddingTimeInterval:](+[NSDate now](NSDate, "now"), "dateByAddingTimeInterval:", -180.0);
  if (!objc_msgSend(*(id *)(a1 + 136), "inUseLevelIsAtLeast:", 5))
  {
LABEL_27:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    goto LABEL_29;
  }
  objc_msgSend(a2, "timeIntervalSinceDate:", v8);
  if (v9 > 0.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v11 = *(void **)(a1 + 64);
      v32 = 68289282;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 2114;
      v37 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession Lookback window start date is too recent. No prompt will be shown.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v32, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v12 = qword_1022A01D8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
      goto LABEL_29;
    v13 = *(void **)(a1 + 64);
    v32 = 68289282;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2114;
    v37 = v13;
    v14 = "#transcriptSession Lookback window start date is too recent. No prompt will be shown.";
    v15 = "{\"msg%{public}.0s\":\"#transcriptSession Lookback window start date is too recent. No prompt will be shown.\""
          ", \"client\":%{public, location:escape_only}@}";
    v16 = v12;
    v17 = 28;
    goto LABEL_26;
  }
  if (a4)
  {
    v18 = objc_msgSend(a4, "localizedFailureReason");
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v20 = objc_msgSend(v18, "UTF8String");
      v21 = *(_QWORD *)(a1 + 64);
      v32 = 68289538;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 2082;
      v37 = v20;
      v38 = 2114;
      v39 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession an error is being returned\", \"error\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}@}", (uint8_t *)&v32, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v22 = qword_1022A01D8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
      goto LABEL_29;
    v23 = objc_msgSend(v18, "UTF8String");
    v24 = *(_QWORD *)(a1 + 64);
    v32 = 68289538;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2082;
    v37 = v23;
    v38 = 2114;
    v39 = v24;
    v14 = "#transcriptSession an error is being returned";
    v15 = "{\"msg%{public}.0s\":\"#transcriptSession an error is being returned\", \"error\":%{public, location:escape_on"
          "ly}s, \"client\":%{public, location:escape_only}@}";
    v16 = v22;
    v17 = 38;
    goto LABEL_26;
  }
  if ((unint64_t)objc_msgSend(a3, "count") > 2)
    return 1;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v25 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    v32 = 68289026;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession historical data has too few locations. No prompt will be shown.\"}", (uint8_t *)&v32, 0x12u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v26 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v32 = 68289026;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v14 = "#transcriptSession historical data has too few locations. No prompt will be shown.";
    v15 = "{\"msg%{public}.0s\":\"#transcriptSession historical data has too few locations. No prompt will be shown.\"}";
    v16 = v26;
    v17 = 18;
LABEL_26:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v14, v15, (uint8_t *)&v32, v17);
    goto LABEL_27;
  }
LABEL_29:
  v27 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    v28 = *(void **)(a1 + 64);
    v32 = 68289282;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2114;
    v37 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession failure during prompting stage - no locations will be sent.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v32, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v29 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v30 = *(void **)(a1 + 64);
    v32 = 68289282;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2114;
    v37 = v30;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession failure during prompting stage - no locations will be sent.", "{\"msg%{public}.0s\":\"#transcriptSession failure during prompting stage - no locations will be sent.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v32, 0x1Cu);
  }
  if (*(_BYTE *)(a1 + 250))
  {
    sub_100E53B44((_QWORD *)a1, +[NSDate now](NSDate, "now"));
  }
  else if (*(_BYTE *)(a1 + 253))
  {
    *(_BYTE *)(a1 + 251) = 1;
  }
  sub_100E51E80(a1);
  return 0;
}

uint64_t sub_100E55A08(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t result;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  void *v24[2];
  void *v25[2];
  __int128 v26;
  void *v27[2];
  void *v28[2];
  __int128 v29;
  void *v30[2];
  __int128 v31;
  void *v32[2];
  void *__p[2];
  __int128 v34;
  uint64_t v35;
  uint64_t buf;
  __int16 v37;
  const char *v38;
  __int16 v39;
  uint64_t v40;

  v5 = *(_QWORD *)(a1 + 48);
  result = sub_100E5546C(v5, *(void **)(a1 + 32), *(void **)(a1 + 40), a3);
  if ((_DWORD)result)
  {
    if (objc_msgSend(a2, "BOOLValue"))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(v5 + 64);
        buf = 68289282;
        v37 = 2082;
        v38 = "";
        v39 = 2114;
        v40 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession User has selected 'Allow'.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      }
      v9 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v10 = *(_QWORD *)(v5 + 64);
        buf = 68289282;
        v37 = 2082;
        v38 = "";
        v39 = 2114;
        v40 = v10;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession User has selected 'Allow'.", "{\"msg%{public}.0s\":\"#transcriptSession User has selected 'Allow'.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
      if (*(_BYTE *)(v5 + 253))
      {
        *(_BYTE *)(v5 + 254) = 1;
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        v11 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
        {
          v12 = *(_QWORD *)(v5 + 64);
          buf = 68289282;
          v37 = 2082;
          v38 = "";
          v39 = 2114;
          v40 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        }
        v13 = (void *)sub_100E51E14(v5);
        v14 = *(void **)(v5 + 64);
        if (v14)
        {
          objc_msgSend(v14, "clientName");
        }
        else
        {
          v35 = 0;
          *(_OWORD *)__p = 0u;
          v34 = 0u;
          v31 = 0u;
          *(_OWORD *)v32 = 0u;
          v29 = 0u;
          *(_OWORD *)v30 = 0u;
          *(_OWORD *)v27 = 0u;
          *(_OWORD *)v28 = 0u;
          *(_OWORD *)v25 = 0u;
          v26 = 0u;
          *(_OWORD *)v24 = 0u;
        }
        objc_msgSend(v13, "markReceivingLocationInformation:", sub_1001AE728((__int128 *)v24));
        if (SHIBYTE(v34) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
          operator delete(v32[0]);
        if (SHIBYTE(v31) < 0)
          operator delete(v30[1]);
        if (SHIBYTE(v29) < 0)
          operator delete(v28[1]);
        if (SHIBYTE(v28[0]) < 0)
          operator delete(v27[0]);
        if (SHIBYTE(v26) < 0)
          operator delete(v25[1]);
        if (SHIBYTE(v25[0]) < 0)
          operator delete(v24[0]);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        v23 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          buf = 68289026;
          v37 = 2082;
          v38 = "";
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Approving Single Request for historical locations - will send locations\"}", (uint8_t *)&buf, 0x12u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        }
        v20 = qword_1022A01D8;
        if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
          return sub_100E51E80(v5);
        buf = 68289026;
        v37 = 2082;
        v38 = "";
        v21 = "#transcriptSession Approving Single Request for historical locations - will send locations";
        v22 = "{\"msg%{public}.0s\":\"#transcriptSession Approving Single Request for historical locations - will send locations\"}";
        goto LABEL_56;
      }
      sub_100E53B44((_QWORD *)v5, *(void **)(a1 + 32));
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(v5 + 64);
        buf = 68289282;
        v37 = 2082;
        v38 = "";
        v39 = 2114;
        v40 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession User has selected 'Not Now'.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      }
      v17 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v18 = *(_QWORD *)(v5 + 64);
        buf = 68289282;
        v37 = 2082;
        v38 = "";
        v39 = 2114;
        v40 = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession User has selected 'Not Now'.", "{\"msg%{public}.0s\":\"#transcriptSession User has selected 'Not Now'.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
      if (*(_BYTE *)(v5 + 253))
      {
        *(_BYTE *)(v5 + 251) = 1;
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        v19 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          buf = 68289026;
          v37 = 2082;
          v38 = "";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Not approving Single Request for historical locations - Sending no locations\"}", (uint8_t *)&buf, 0x12u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        }
        v20 = qword_1022A01D8;
        if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
          return sub_100E51E80(v5);
        buf = 68289026;
        v37 = 2082;
        v38 = "";
        v21 = "#transcriptSession Not approving Single Request for historical locations - Sending no locations";
        v22 = "{\"msg%{public}.0s\":\"#transcriptSession Not approving Single Request for historical locations - Sending no locations\"}";
LABEL_56:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v21, v22, (uint8_t *)&buf, 0x12u);
        return sub_100E51E80(v5);
      }
      sub_100E53B44((_QWORD *)v5, +[NSDate now](NSDate, "now"));
    }
    return sub_100E51E80(v5);
  }
  return result;
}

void sub_100E56088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100E560A4(_QWORD *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  id v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;

  v7 = a1[5];
  if ((unint64_t)objc_msgSend(a2, "count") >= 4)
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  if (a4)
  {
    v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    v9 = v8;
    if (a3)
      objc_msgSend(v8, "setObject:forKeyedSubscript:", a3, CFSTR("kCLConnectionMessageTranscriptError"));
    objc_msgSend(v9, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24)), CFSTR("kCLConnectionMessageWillPromptForTranscriptSessionKey"));
    CLConnectionMessage::sendReply(a1[6]);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(v7 + 64);
      v12 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      v16 = 68289794;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2114;
      v21 = v11;
      v22 = 1026;
      v23 = v12;
      v24 = 2114;
      v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sent reply\", \"client\":%{public, location:escape_only}@, \"willPrompt\":%{public}hhd, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v16, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v13 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v14 = *(_QWORD *)(v7 + 64);
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      v16 = 68289794;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2114;
      v21 = v14;
      v22 = 1026;
      v23 = v15;
      v24 = 2114;
      v25 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession sent reply", "{\"msg%{public}.0s\":\"#transcriptSession sent reply\", \"client\":%{public, location:escape_only}@, \"willPrompt\":%{public}hhd, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v16, 0x2Cu);
    }
  }
}

void sub_100E56308(uint64_t *a1, const __CFDate *a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[2];
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  const __CFDate *v35;
  __int16 v36;
  uint64_t v37;

  v5 = a1[5];
  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(v5 + 64);
      *(_DWORD *)buf = 68289794;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2114;
      v33 = v8;
      v34 = 2114;
      v35 = a2;
      v36 = 2114;
      v37 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning WillPromptForTranscriptSession has an error with lookbackWindow startDate. Try again for an accurate result.\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v9 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v10 = *(_QWORD *)(v5 + 64);
      *(_DWORD *)buf = 68289794;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2114;
      v33 = v10;
      v34 = 2114;
      v35 = a2;
      v36 = 2114;
      v37 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning WillPromptForTranscriptSession has an error with lookbackWindow startDate. Try again for an accurate result.", "{\"msg%{public}.0s\":\"#transcriptSession #warning WillPromptForTranscriptSession has an error with lookbackWindow startDate. Try again for an accurate result.\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    v11 = a1[6];
    v26[0] = CFSTR("kCLConnectionMessageWillPromptForTranscriptSessionKey");
    v26[1] = CFSTR("kCLConnectionMessageTranscriptError");
    v27[0] = &__kCFBooleanFalse;
    v27[1] = a3;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2);
    v12 = v11;
LABEL_10:
    CLConnectionMessage::sendReply(v12);
    return;
  }
  if (!a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(v5 + 64);
      *(_DWORD *)buf = 68289794;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2114;
      v33 = v19;
      v34 = 2114;
      v35 = 0;
      v36 = 2114;
      v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession lookback window start date null\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v20 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v21 = *(_QWORD *)(v5 + 64);
      *(_DWORD *)buf = 68289794;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2114;
      v33 = v21;
      v34 = 2114;
      v35 = 0;
      v36 = 2114;
      v37 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession lookback window start date null", "{\"msg%{public}.0s\":\"#transcriptSession lookback window start date null\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    v12 = a1[6];
    goto LABEL_10;
  }
  -[NSDate timeIntervalSinceDate:](+[NSDate now](NSDate, "now"), "timeIntervalSinceDate:", a2);
  if (v13 < 180.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(v5 + 64);
      *(_DWORD *)buf = 68289794;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2114;
      v33 = v15;
      v34 = 2114;
      v35 = a2;
      v36 = 2114;
      v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession lookback window start date is too recent. Will not prompt right now.\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v16 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v17 = *(_QWORD *)(v5 + 64);
      *(_DWORD *)buf = 68289794;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2114;
      v33 = v17;
      v34 = 2114;
      v35 = a2;
      v36 = 2114;
      v37 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession lookback window start date is too recent. Will not prompt right now.", "{\"msg%{public}.0s\":\"#transcriptSession lookback window start date is too recent. Will not prompt right now.\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    v12 = a1[6];
    goto LABEL_10;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v22 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(_QWORD *)(v5 + 64);
    *(_DWORD *)buf = 68289538;
    v29 = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2114;
    v33 = v23;
    v34 = 2114;
    v35 = a2;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date\", \"client\":%{public, location:escape_only}@, \"Date\":%{public, location:escape_only}@}", buf, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v24 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v25 = *(_QWORD *)(v5 + 64);
    *(_DWORD *)buf = 68289538;
    v29 = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2114;
    v33 = v25;
    v34 = 2114;
    v35 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date", "{\"msg%{public}.0s\":\"#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date\", \"client\":%{public, location:escape_only}@, \"Date\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  sub_100E52C50(v5, a2, 3000, 0, a1[4], *(double *)(v5 + 344));
}

void sub_100E56970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  _BOOL4 v20;
  __int16 v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v8 = v7;
  if (a3)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", a3, CFSTR("kCLConnectionMessageTranscriptError"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2 == 2), CFSTR("kCLConnectionMessageIsConsideredInRemoteAreaKey"));
  CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 40));
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(v6 + 64);
    v13 = 68289794;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = v10;
    v19 = 1026;
    v20 = a2 == 2;
    v21 = 2114;
    v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sent reply\", \"client\":%{public, location:escape_only}@, \"isRemote\":%{public}hhd, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x2Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
  v11 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v12 = *(_QWORD *)(v6 + 64);
    v13 = 68289794;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = v12;
    v19 = 1026;
    v20 = a2 == 2;
    v21 = 2114;
    v22 = a3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession sent reply", "{\"msg%{public}.0s\":\"#transcriptSession sent reply\", \"client\":%{public, location:escape_only}@, \"isRemote\":%{public}hhd, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x2Cu);
  }
}

id sub_100E56BA4(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  CLConnectionMessage *v4;
  uint64_t *v5;
  uint64_t *v6;
  CLConnectionMessage *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 64), "clientKey"), CFSTR("ClientKeyPath"));
  v3 = (_QWORD *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    v3 = (_QWORD *)*v3;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), CFSTR("SubscriptionStorageName"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 136)), CFSTR("AuthContext"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 250)), CFSTR("NeedSession"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 251)), CFSTR("ShouldSendEmptyLocations"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 252)), CFSTR("NeedSingleRequest"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 253)), CFSTR("HasSingleRequested"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 254)), CFSTR("ApprovedSingleRequest"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 255)), CFSTR("HasRequestedToStart"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 256)), CFSTR("ShouldPrompt"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 336)), CFSTR("SampleCount"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 344)), CFSTR("HAccRequirement"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 352)), CFSTR("SmoothingErrorThreshold"));
  v4 = *(CLConnectionMessage **)(a1 + 288);
  if (v4)
  {
    v5 = (uint64_t *)CLConnectionMessage::name(v4);
    if (*((char *)v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = (uint64_t *)*v5;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), CFSTR("StashedMessage"));
  }
  v7 = *(CLConnectionMessage **)(a1 + 304);
  if (v7)
  {
    v8 = (uint64_t *)CLConnectionMessage::name(v7);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9), CFSTR("SessionConnectionMessage"));
  }
  v10 = *(_QWORD *)(a1 + 328);
  if (v10)
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("PurposeString"));
  if (*(_BYTE *)(a1 + 256))
  {
    v11 = +[NSMutableArray array](NSMutableArray, "array");
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v12 = *(void **)(a1 + 360);
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(v11, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i), "description"));
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v14);
    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("SavedPromptedCoordinates"));
  }
  return v2;
}

void sub_100E56F1C(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100E56F48(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

__n128 sub_100E56F74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10218C5F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100E56FB0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218C5F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E56FD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100E57024(a1 + 8, a2, a3);
}

uint64_t sub_100E56FDC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E57018()
{
}

void sub_100E57024(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100E570F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100E57114(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100E5718C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100E57178(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100E5718C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100E5740C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100E573F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E5740C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100E57480(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100E57468(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E57480(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100E574D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E574F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  _QWORD v15[5];
  void *__dst[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;

  v10 = sub_1015A2E04((_QWORD *)a1, "VO2MaxPowerBudgetEstimatorBudgetRefreshTime") + 3;
  sub_1015A2E04(v10, "VO2MaxPowerBudgetEstimatorExtendedBudgetRefreshTime");
  sub_1015A2E04((_QWORD *)(a1 + 48), "VO2MaxPowerBudgetEstimatorStairsBudgetRefreshTime");
  sub_1015A2E04((_QWORD *)(a1 + 72), "VO2MaxPowerBudgetEstimatorTimeOfLastVO2MaxSessionEstimate");
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = objc_msgSend(objc_msgSend(a2, "silo"), "newTimer");
  *(_QWORD *)(a1 + 112) = objc_msgSend(objc_msgSend(*(id *)(a1 + 96), "silo"), "newTimer");
  *(_BYTE *)(a1 + 120) = 0;
  sub_100270E34(a1 + 128, a3);
  sub_100270E34(a1 + 160, a4);
  sub_100270E34(a1 + 192, a5);
  v11 = *(_QWORD *)(a1 + 104);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v19 = *(_QWORD *)(a1 + 16);
  }
  sub_1008B49E0((_QWORD *)(a1 + 224), v11, (__int128 *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v12 = *(_QWORD *)(a1 + 112);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_100115CE4(__dst, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v10;
    v17 = v10[2];
  }
  sub_1008B49E0((_QWORD *)(a1 + 280), v12, (__int128 *)__dst);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst[0]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100E57860;
  v15[3] = &unk_10212ECA0;
  v15[4] = a1;
  objc_msgSend(*(id *)(a1 + 104), "setHandler:", v15);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100E57C10;
  v14[3] = &unk_10212ECA0;
  v14[4] = a1;
  objc_msgSend(*(id *)(a1 + 112), "setHandler:", v14);
  sub_1008B49E8(a1 + 224);
  sub_1008B49E8(a1 + 280);
  return a1;
}

void sub_100E57708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void **v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  sub_1008B49E4(v39);
  v41 = *(_QWORD **)(v33 + 216);
  if (v41 == v38)
  {
    v42 = 4;
    v41 = v38;
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_6:
  v43 = *(_QWORD **)(v33 + 184);
  if (v43 == v37)
  {
    v44 = 4;
    v43 = v37;
  }
  else
  {
    if (!v43)
      goto LABEL_11;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_11:
  v45 = *(_QWORD **)(v33 + 152);
  if (v45 == v36)
  {
    v46 = 4;
    v45 = v36;
  }
  else
  {
    if (!v45)
      goto LABEL_16;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_16:
  if (*(char *)(v33 + 95) < 0)
    operator delete(*v35);
  if (*(char *)(v33 + 71) < 0)
    operator delete(*a10);
  if (*(char *)(v33 + 47) < 0)
    operator delete(*v34);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(a1);
}

double *sub_100E57860(uint64_t a1)
{
  double *v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(double **)(a1 + 32);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10218C6A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, budgetRefreshTimer fire", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "CLBackgroundEscalationsPowerBudgetEstimator, budgetRefreshTimer fire", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLBackgroundEscalationsPowerBudgetEstimator::CLBackgroundEscalationsPowerBudgetEstimator(id<CLIntersiloUniverse>, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100E579F8(v1);
}

double *sub_100E579F8(double *result)
{
  uint64_t v1;
  double v2;
  double Current;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  double v8;
  __int16 v9;
  double v10;
  uint8_t buf[4];
  double v12;
  __int16 v13;
  double v14;

  if (*((_BYTE *)result + 120))
  {
    v1 = (uint64_t)result;
    if (sub_1008B4C14((uint64_t)(result + 28)) || (result = (double *)sub_1008B4C14(v1 + 280), (_DWORD)result))
    {
      v2 = sub_100E5876C();
      Current = CFAbsoluteTimeGetCurrent();
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v4 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        v12 = Current - v2;
        v13 = 2050;
        v14 = Current;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, kicking off historical data query, startTime, %{public}.2f, endTime, %{public}.2f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218C6A8);
        v7 = 134349312;
        v8 = Current - v2;
        v9 = 2050;
        v10 = Current;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLBackgroundEscalationsPowerBudgetEstimator, kicking off historical data query, startTime, %{public}.2f, endTime, %{public}.2f", &v7, 22);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::kickoffHKQuery()", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      return sub_100E58F60(v1, Current - v2, Current, v2);
    }
  }
  return result;
}

void sub_100E57C10(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10218C6A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, extendedBudgetRefreshTimer fire", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "CLBackgroundEscalationsPowerBudgetEstimator, extendedBudgetRefreshTimer fire", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLBackgroundEscalationsPowerBudgetEstimator::CLBackgroundEscalationsPowerBudgetEstimator(id<CLIntersiloUniverse>, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100E57DA8(v1);
}

void sub_100E57DA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  double v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  __n128 v34;
  double v35;
  _BOOL4 v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  NSObject *v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  double v58;
  uint64_t v59;
  double v60;
  double v61;
  _DWORD v62[2];
  __int16 v63;
  double v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  uint8_t buf[8];
  _BYTE v72[10];
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;

  v2 = a1 + 280;
  if (sub_1008B4C14(a1 + 280))
  {
    if (objc_opt_class(MCProfileConnection, v3)
      && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v4 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "IHA authorized to enable stairs escalation", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218C6A8);
        LOWORD(v62[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "IHA authorized to enable stairs escalation", v62, 2);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::extendedBudgetHandler()", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    v6 = sub_100515CB4();
    v60 = 0.0;
    v61 = 0.0;
    v58 = 0.0;
    v59 = 0;
    v57 = 0;
    v7 = sub_100127B9C();
    sub_100081C10(v7, buf);
    sub_1001FD98C(*(uint64_t *)buf, "BackgroundEscalationsExtendedBudgetAllowance", &v61);
    v8 = *(std::__shared_weak_count **)v72;
    if (*(_QWORD *)v72)
    {
      v9 = (unint64_t *)(*(_QWORD *)v72 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = sub_100127B9C();
    sub_100081C10(v11, buf);
    sub_1001FD98C(*(uint64_t *)buf, "ExtendedPowerBudgetRefreshInterval", &v60);
    v12 = *(std::__shared_weak_count **)v72;
    if (*(_QWORD *)v72)
    {
      v13 = (unint64_t *)(*(_QWORD *)v72 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = sub_100127B9C();
    sub_100081C10(v15, buf);
    sub_1001E4B84(*(uint64_t *)buf, "StairsEscalationDisable", &v57);
    v16 = *(std::__shared_weak_count **)v72;
    if (*(_QWORD *)v72)
    {
      v17 = (unint64_t *)(*(_QWORD *)v72 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = sub_100127B9C();
    sub_100081C10(v19, buf);
    sub_1001FD98C(*(uint64_t *)buf, "StairsBudgetForAllRefreshInterval", &v58);
    v20 = *(std::__shared_weak_count **)v72;
    if (*(_QWORD *)v72)
    {
      v21 = (unint64_t *)(*(_QWORD *)v72 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = sub_100127B9C();
    sub_100081C10(v23, buf);
    sub_1001FD98C(*(uint64_t *)buf, "StairsBudgetAllowanceForAll", &v59);
    v24 = *(std::__shared_weak_count **)v72;
    if (*(_QWORD *)v72)
    {
      v25 = (unint64_t *)(*(_QWORD *)v72 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = sub_100EFA98C();
    sub_100EFA9D0(v27, (uint64_t)CFSTR("SensitiveEscalationExtendedBudgetRefreshInterval"), (void **)&v60);
    v28 = sub_100EFA98C();
    sub_100EFA9D0(v28, (uint64_t)CFSTR("SensitiveEscalationExtendedBudgetAllowanceSeconds"), (void **)&v61);
    v29 = sub_100EFA98C();
    sub_100EFA9D0(v29, (uint64_t)CFSTR("SensitiveEscalationGeneralStairsBudgetAllowanceSeconds"), (void **)&v59);
    v30 = sub_100EFA98C();
    sub_100EFA9D0(v30, (uint64_t)CFSTR("SensitiveEscalationGeneralStairsBudgetRefreshInterval"), (void **)&v58);
    v56 = 0;
    v31 = sub_1001FD94C();
    if (byte_102308BFF >= 0)
      v32 = (const char *)&qword_102308BE8;
    else
      v32 = (const char *)qword_102308BE8;
    sub_1001E4B84(v31, v32, &v56);
    v33 = v56;
    v34.n128_f64[0] = v61;
    if (v61 <= 0.0 || (v35 = v60, v60 <= 0.0))
    {
      if (v5 && (sub_100197040(), sub_100241620()))
      {
        v40 = v58;
        if (v58 == 0.0)
        {
          v59 = 0x4050400000000000;
          v58 = 201312.0;
          v40 = 201312.0;
        }
        v41 = v6 + v40;
        sub_1008B4CA8(v2, v6 + v40);
        *(_QWORD *)buf = v59;
        v42 = *(_QWORD *)(a1 + 216);
        if (!v42)
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v42 + 48))(v42, buf);
        v33 = 3;
      }
      else
      {
        *(_QWORD *)buf = 0;
        v43 = *(_QWORD *)(a1 + 216);
        if (!v43)
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint8_t *, __n128))(*(_QWORD *)v43 + 48))(v43, buf, v34);
        v41 = 0.0;
      }
      *(_QWORD *)buf = 0;
      v44 = *(_QWORD *)(a1 + 184);
      if (!v44)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v44 + 48))(v44, buf);
    }
    else
    {
      sub_100197040();
      v36 = sub_100241620();
      v37.n128_f64[0] = v61;
      if (!v36 || v33 == 1 || v57 == 1)
      {
        *(double *)buf = v61;
        v45 = *(_QWORD *)(a1 + 184);
        if (!v45)
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint8_t *, __n128))(*(_QWORD *)v45 + 48))(v45, buf, v37);
        *(_QWORD *)buf = 0;
        v46 = *(_QWORD *)(a1 + 216);
        if (!v46)
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v46 + 48))(v46, buf);
        v33 = 2;
      }
      else
      {
        *(double *)buf = v61;
        v38 = *(_QWORD *)(a1 + 216);
        if (!v38)
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint8_t *, double))(*(_QWORD *)v38 + 48))(v38, buf, v61);
        *(_QWORD *)buf = 0;
        v39 = *(_QWORD *)(a1 + 184);
        if (!v39)
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v39 + 48))(v39, buf);
        v33 = 1;
      }
      v41 = v6 + v35;
      sub_1008B4CA8(v2, v41);
    }
    v56 = v33;
    v47 = sub_1001FD94C();
    if (byte_102308BFF >= 0)
      v48 = (const char *)&qword_102308BE8;
    else
      v48 = (const char *)qword_102308BE8;
    sub_10011B4E4(v47, v48, &v56);
    v49 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 944))(v49);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v50 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)&buf[4] = v56;
      *(_WORD *)v72 = 2050;
      *(double *)&v72[2] = v61;
      v73 = 2050;
      v74 = v59;
      v75 = 2050;
      v76 = v6;
      v77 = 2050;
      v78 = v41;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, new extended budget awarded for sensitive escalation type : %{public}d, ExtendedBudget, %{public}.2f, stairsBudgetForAll, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v62[0] = 67241216;
      v62[1] = v56;
      v63 = 2050;
      v64 = v61;
      v65 = 2050;
      v66 = v59;
      v67 = 2050;
      v68 = v6;
      v69 = 2050;
      v70 = v41;
      LODWORD(v55) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLBackgroundEscalationsPowerBudgetEstimator, new extended budget awarded for sensitive escalation type : %{public}d, ExtendedBudget, %{public}.2f, stairsBudgetForAll, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", v62, v55);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::extendedBudgetHandler()", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
  }
}

void sub_100E58568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E58598(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 104), "invalidate");

  *(_QWORD *)(a1 + 104) = 0;
  objc_msgSend(*(id *)(a1 + 112), "invalidate");

  *(_QWORD *)(a1 + 112) = 0;
  sub_1008B49E4(a1 + 280);
  sub_1008B49E4(a1 + 224);
  v2 = *(_QWORD **)(a1 + 216);
  if (v2 == (_QWORD *)(a1 + 192))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 192);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 184);
  if (v4 == (_QWORD *)(a1 + 160))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 160);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = *(_QWORD **)(a1 + 152);
  if (v6 == (_QWORD *)(a1 + 128))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 128);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

double sub_100E586C8(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  double v5;

  v5 = -1.79769313e308;
  v2 = sub_1001FD94C();
  v3 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v3 = *(const char **)v3;
  sub_1001FD98C(v2, v3, &v5);
  return v5;
}

uint64_t sub_100E58718(uint64_t a1, double a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  double v7;

  v7 = a2;
  v3 = sub_1001FD94C();
  v4 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v4 = *(const char **)v4;
  sub_10018A4CC(v3, v4, &v7);
  v5 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
}

double sub_100E5876C()
{
  uint64_t v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  double v5;
  int v6;
  double v7;
  uint8_t buf[4];
  double v9;

  v5 = sub_100E3C30C();
  v0 = sub_100EFA98C();
  sub_100EFA9D0(v0, (uint64_t)CFSTR("VO2MaxPowerBudgetEstimatorQueryLookbackInterval"), (void **)&v5);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10218C6A8);
  v1 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, getting sensitiveEscalationHoldoffInterval, %.2f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v6 = 134217984;
    v7 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "CLBackgroundEscalationsPowerBudgetEstimator, getting sensitiveEscalationHoldoffInterval, %.2f", COERCE_DOUBLE(&v6));
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLBackgroundEscalationsPowerBudgetEstimator::getSensitiveEscalationHoldoffInterval() const", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v5;
}

id sub_100E58930(id result, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  int v10;
  double v11;
  __int16 v12;
  double v13;
  _BYTE buf[12];
  __int16 v15;
  double v16;

  if (*(_BYTE *)(a2 + 24) && *(double *)(a2 + 16) != -1.0 && *(_BYTE *)(a2 + 27))
  {
    v2 = (uint64_t)result;
    v3 = sub_100515CB4();
    v4 = sub_100E3C56C();
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v5 = v3 + v4;
    v6 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v3;
      v15 = 2050;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on VO2MaxEstimate, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v10 = 134349312;
      v11 = v3;
      v12 = 2050;
      v13 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on VO2MaxEstimate, now, %{public}.2f, nextRefreshTime, %{public}.2f", &v10, 22);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::feedVO2MaxEstimate(VO2MaxResult)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_100E58718(v2, v3);
    *(_QWORD *)buf = 0;
    v7 = *(_QWORD *)(v2 + 152);
    if (!v7)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 48))(v7, buf);
    return sub_1008B4CA8(v2 + 224, v5);
  }
  return result;
}

_QWORD *sub_100E58B64(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  int v14;
  double v15;
  __int16 v16;
  double v17;
  _BYTE buf[12];
  __int16 v19;
  double v20;

  v2 = *(_QWORD *)(a2 + 112);
  v3 = v2 > 0x18;
  v4 = (1 << v2) & 0x1028000;
  v5 = v3 || v4 == 0;
  if (!v5 && *(double *)(a2 + 8) - *(double *)a2 >= 600.0)
  {
    v6 = result;
    v7 = sub_100515CB4();
    v8 = sub_100E3C56C();
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v9 = v7 + v8;
    v10 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v7;
      v19 = 2050;
      v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on workout stop event, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v14 = 134349312;
      v15 = v7;
      v16 = 2050;
      v17 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on workout stop event, now, %{public}.2f, nextRefreshTime, %{public}.2f", &v14, 22);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::feedWorkoutStopEvent(CLMotionStateMediator_Type::WorkoutEvent)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *(_QWORD *)buf = 0;
    v11 = v6[19];
    if (!v11)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 48))(v11, buf);
    return sub_1008B4CA8((uint64_t)(v6 + 28), v9);
  }
  return result;
}

double *sub_100E58DA8(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10218C6A8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, encrypted data available notification, isAvailable, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "CLBackgroundEscalationsPowerBudgetEstimator, encrypted data available notification, isAvailable, %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::feedEncryptedDataAvailability(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_BYTE *)(a1 + 120) = a2;
  return sub_100E579F8((double *)a1);
}

double *sub_100E58F60(uint64_t a1, double a2, double a3, double a4)
{
  double *v8;
  uint64_t v9;
  double *result;
  uint64_t v11;
  _BYTE v12[24];
  double *v13;

  v8 = (double *)operator new(0x28uLL);
  *(_QWORD *)v8 = off_10218C6D8;
  *((_QWORD *)v8 + 1) = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v13 = v8;
  sub_100AAAED4((uint64_t)v12, v9, a2, a3);
  result = v13;
  if (v13 == (double *)v12)
  {
    v11 = 4;
    result = (double *)v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (double *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
}

void sub_100E5902C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100E59068(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  id v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[6];
  void *__p;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;

  v10 = objc_msgSend(*(id *)(a1 + 96), "silo");
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3321888768;
  v14[2] = sub_100E59150;
  v14[3] = &unk_10218C678;
  v14[4] = a1;
  *(double *)&v14[5] = a5;
  v16 = 0;
  v17 = 0;
  v11 = *(const void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (v12 - *(_QWORD *)a2) >> 5;
  __p = 0;
  sub_10053C1B0(&__p, v11, v12, v13);
  v18 = a3;
  v19 = a4;
  objc_msgSend(v10, "async:", v14);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_100E59134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100E59150(uint64_t a1)
{
  uint64_t v2;
  id result;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  double v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  _BYTE buf[12];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;

  v2 = *(_QWORD *)(a1 + 32);
  result = (id)sub_1008B4C14(v2 + 224);
  if ((_DWORD)result)
  {
    v4 = sub_100515CB4();
    v5 = sub_100E3C56C();
    v6 = *(double *)(a1 + 40);
    v7 = sub_100515CB4();
    if (v7 >= v6 + sub_100E586C8(v2) && sub_100E595AC(v8, (uint64_t *)(a1 + 48)))
    {
      result = (id)sub_1008B4C14(v2 + 224);
      if (!(_DWORD)result)
        return result;
      v27 = sub_100E3C4D0();
      v9 = sub_100EFA98C();
      sub_100EFA9D0(v9, (uint64_t)CFSTR("SensitiveEscalationBudgetAllowanceSeconds"), (void **)&v27);
      v10 = *(double *)(a1 + 40);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v11 = v4 + v10;
      v12 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 72);
        v14 = *(_QWORD *)(a1 + 80);
        *(_DWORD *)buf = 134350080;
        *(_QWORD *)&buf[4] = v13;
        v39 = 2050;
        v40 = v14;
        v41 = 2050;
        v42 = v27;
        v43 = 2050;
        v44 = v4;
        v45 = 2050;
        v46 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, new budget awarded on HK query and VO2Max results, startTime, %{public}.2f, endTime, %{public}.2f, budget, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x34u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218C6A8);
        v23 = *(_QWORD *)(a1 + 72);
        v24 = *(_QWORD *)(a1 + 80);
        v28 = 134350080;
        v29 = v23;
        v30 = 2050;
        v31 = v24;
        v32 = 2050;
        v33 = v27;
        v34 = 2050;
        v35 = v4;
        v36 = 2050;
        v37 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLBackgroundEscalationsPowerBudgetEstimator, new budget awarded on HK query and VO2Max results, startTime, %{public}.2f, endTime, %{public}.2f, budget, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", &v28, 52);
        v26 = (char *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::evaluateQueryResults(CFTimeInterval, CFTimeInterval, std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout>, CFTimeInterval)_block_invoke", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      *(double *)buf = v27;
    }
    else
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v11 = v4 + v5;
      v15 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 72);
        v17 = *(_QWORD *)(a1 + 80);
        *(_DWORD *)buf = 134349824;
        *(_QWORD *)&buf[4] = v16;
        v39 = 2050;
        v40 = v17;
        v41 = 2050;
        v42 = v4;
        v43 = 2050;
        v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on HK query and VO2Max results, startTime, %{public}.2f, endTime, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218C6A8);
        v19 = *(_QWORD *)(a1 + 72);
        v20 = *(_QWORD *)(a1 + 80);
        v28 = 134349824;
        v29 = v19;
        v30 = 2050;
        v31 = v20;
        v32 = 2050;
        v33 = v4;
        v34 = 2050;
        v35 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on HK query and VO2Max results, startTime, %{public}.2f, endTime, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", &v28, 42);
        v22 = (char *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::evaluateQueryResults(CFTimeInterval, CFTimeInterval, std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout>, CFTimeInterval)_block_invoke", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      *(_QWORD *)buf = 0;
    }
    v18 = *(_QWORD *)(v2 + 152);
    if (!v18)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 48))(v18, buf);
    return sub_1008B4CA8(v2 + 224, v11);
  }
  return result;
}

uint64_t sub_100E595AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  NSObject *v5;
  double v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  double v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  NSObject *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  char v30;
  NSObject *v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  int v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  uint8_t buf[4];
  double v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v31 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query returned empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      LOWORD(v46) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query returned empty", &v46, 2);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationsPowerBudgetEstimator::isWorkoutPowerAvailable(const std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout> &) const", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    v30 = 1;
  }
  else
  {
    v4 = 0;
    do
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v5 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(double *)v2;
        v7 = *(_QWORD *)(v2 + 8);
        v8 = *(_DWORD *)(v2 + 16);
        v9 = *(unsigned __int8 *)(v2 + 20);
        v10 = *(unsigned __int8 *)(v2 + 21);
        v11 = *(_QWORD *)(v2 + 24);
        *(_DWORD *)buf = 134350337;
        v59 = v6;
        v60 = 2050;
        v61 = v7;
        v62 = 1025;
        v63 = v8;
        v64 = 1025;
        v65 = v9;
        v66 = 1025;
        v67 = v10;
        v68 = 2049;
        v69 = v11;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, Workouts query result, startTime, %{public}.2f, endTime, %{public}.2f, hkWorkoutType, %{private}d, isPedestrian, %{private}d, isIndoorWorkout, %{private}d, calories, %{private}.2f", buf, 0x32u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218C6A8);
        v14 = *(double *)v2;
        v15 = *(_QWORD *)(v2 + 8);
        v16 = *(_DWORD *)(v2 + 16);
        v17 = *(unsigned __int8 *)(v2 + 20);
        v18 = *(unsigned __int8 *)(v2 + 21);
        v19 = *(_QWORD *)(v2 + 24);
        v46 = 134350337;
        v47 = v14;
        v48 = 2050;
        v49 = v15;
        v50 = 1025;
        v51 = v16;
        v52 = 1025;
        v53 = v17;
        v54 = 1025;
        v55 = v18;
        v56 = 2049;
        v57 = v19;
        LODWORD(v44) = 50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "CLBackgroundEscalationsPowerBudgetEstimator, Workouts query result, startTime, %{public}.2f, endTime, %{public}.2f, hkWorkoutType, %{private}d, isPedestrian, %{private}d, isIndoorWorkout, %{private}d, calories, %{private}.2f", &v46, v44);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationsPowerBudgetEstimator::isWorkoutPowerAvailable(const std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout> &) const", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      if (*(double *)(v2 + 8) - *(double *)v2 >= 600.0)
      {
        if (*(_BYTE *)(v2 + 20))
          v12 = *(_BYTE *)(v2 + 21) == 0;
        else
          v12 = 0;
        v13 = v12;
        v4 |= v13;
      }
      v2 += 32;
    }
    while (v2 != v3);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v22 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v23 = a2[1];
      v24 = *(double *)(v23 - 32);
      v25 = *(_QWORD *)(v23 - 24);
      v26 = *(_DWORD *)(v23 - 16);
      v27 = *(unsigned __int8 *)(v23 - 12);
      v28 = *(unsigned __int8 *)(v23 - 11);
      v29 = *(_QWORD *)(v23 - 8);
      *(_DWORD *)buf = 134350337;
      v59 = v24;
      v60 = 2050;
      v61 = v25;
      v62 = 1025;
      v63 = v26;
      v64 = 1025;
      v65 = v27;
      v66 = 1025;
      v67 = v28;
      v68 = 2049;
      v69 = v29;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, Workouts query last result, startTime, %{public}.2f, endTime, %{public}.2f, hkWorkoutType, %{private}d, isPedestrian, %{private}d, isIndoorWorkout, %{private}d, calories, %{private}.2f", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v33 = a2[1];
      v34 = *(double *)(v33 - 32);
      v35 = *(_QWORD *)(v33 - 24);
      v36 = *(_DWORD *)(v33 - 16);
      v37 = *(unsigned __int8 *)(v33 - 12);
      v38 = *(unsigned __int8 *)(v33 - 11);
      v39 = *(_QWORD *)(v33 - 8);
      v46 = 134350337;
      v47 = v34;
      v48 = 2050;
      v49 = v35;
      v50 = 1025;
      v51 = v36;
      v52 = 1025;
      v53 = v37;
      v54 = 1025;
      v55 = v38;
      v56 = 2049;
      v57 = v39;
      LODWORD(v44) = 50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLBackgroundEscalationsPowerBudgetEstimator, Workouts query last result, startTime, %{public}.2f, endTime, %{public}.2f, hkWorkoutType, %{private}d, isPedestrian, %{private}d, isIndoorWorkout, %{private}d, calories, %{private}.2f", &v46, v44);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationsPowerBudgetEstimator::isWorkoutPowerAvailable(const std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout> &) const", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    v30 = v4 ^ 1;
  }
  return v30 & 1;
}

_QWORD *sub_100E59B60(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = (_QWORD *)(a1 + 48);
  v2[2] = 0;
  return sub_10053C1B0(v2, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
}

void sub_100E59B7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100E59B94(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100E59BC4()
{
  operator delete();
}

__n128 sub_100E59BD8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_10218C6D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100E59C18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218C6D8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E59C40(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[1640];

  v4 = *a2;
  v5 = *(void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query succeeded, startTime, %{public}.2f, endTime, %{public}.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v16 = *(_QWORD *)(a1 + 16);
      v17 = *(_QWORD *)(a1 + 24);
      v24 = 134349312;
      v25 = v16;
      v26 = 2050;
      v27 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query succeeded, startTime, %{public}.2f, endTime, %{public}.2f", &v24, 22);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "auto CLBackgroundEscalationsPowerBudgetEstimator::queryWorkouts(CFAbsoluteTime, CFAbsoluteTime, CFTimeInterval)::(anonymous class)::operator()(BOOL, std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout>) const", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v11 = *(double *)(a1 + 16);
    v12 = *(double *)(a1 + 24);
    memset(buf, 0, 24);
    sub_10053C1B0(buf, v5, v6, (v6 - (uint64_t)v5) >> 5);
    sub_100E59068(v7, (uint64_t)buf, v11, v12, *(double *)(a1 + 32));
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218C6A8);
    v13 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query failed, startTime, %{public}.2f, endTime, %{public}.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218C6A8);
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(a1 + 24);
      v24 = 134349312;
      v25 = v20;
      v26 = 2050;
      v27 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query failed, startTime, %{public}.2f, endTime, %{public}.2f", &v24, 22);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "auto CLBackgroundEscalationsPowerBudgetEstimator::queryWorkouts(CFAbsoluteTime, CFAbsoluteTime, CFTimeInterval)::(anonymous class)::operator()(BOOL, std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout>) const", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  if (v5)
    operator delete(v5);
}

void sub_100E59FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;

  if (__p)
    operator delete(__p);
  if (v16)
    operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E5A01C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E5A058()
{
}

NSDictionary *sub_100E5A064()
{
  NSDictionary *result;
  _QWORD v1[7];
  _QWORD v2[7];

  sub_1015A2E04(&qword_102308BE8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102308BE8, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_102220768;
  v1[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_102220780;
  v1[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_102220798;
  v1[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_1022207B0;
  v1[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_1022207C8;
  v1[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1022207E0;
  v1[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1022207F8;
  result = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 7);
  qword_102308C00 = (uint64_t)result;
  return result;
}

uint64_t sub_100E5A1E4(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
      return sub_1004C5730(*(_QWORD *)(a3 + 16));
  }
  return result;
}

uint64_t sub_100E5A27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float v11;
  float v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  CLMotionActivity *v19;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  CLMotionActivity buf;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  if (!*(_BYTE *)(a3 + 352))
    return a2;
  v5 = *(double *)(a3 + 648);
  v6 = *(_OWORD *)(a3 + 232);
  v7 = *(_OWORD *)(a3 + 248);
  v33 = *(_QWORD *)(a3 + 280);
  v8 = *(_OWORD *)(a3 + 168);
  v9 = *(_OWORD *)(a3 + 200);
  *(_OWORD *)&buf.isStanding = *(_OWORD *)(a3 + 184);
  *(_OWORD *)&buf.isVehicleConnected = v9;
  *(_OWORD *)&buf.vehicleType = *(_OWORD *)(a3 + 216);
  v30 = v6;
  *(_OWORD *)&buf.type = *(_OWORD *)(a3 + 152);
  *(_OWORD *)&buf.mountedConfidence = v8;
  v10 = *(_OWORD *)(a3 + 264);
  v31 = v7;
  v32 = v10;
  if (!CLMotionActivity::isCycling(&buf))
    return a2;
  v11 = v5;
  v12 = v11 * 2.2369;
  if ((float)(v11 * 2.2369) <= 2.0)
    return a2;
  v13 = sub_100793C68(a2, 2u);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10218C7A0);
  v14 = v12;
  v15 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    v16 = *(_QWORD *)(a3 + 120);
    buf.type = 134218752;
    *(_QWORD *)&buf.confidence = v16;
    LOWORD(buf.mountedState) = 1026;
    *(int *)((char *)&buf.mountedState + 2) = a2;
    HIWORD(buf.mountedConfidence) = 1026;
    buf.conservativeMountedState = v13;
    LOWORD(buf.conservativeMountedProbability) = 2050;
    *(double *)((char *)&buf.conservativeMountedProbability + 2) = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Overriding youth type for outdoor cycling , beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f", (uint8_t *)&buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10218C7A0);
    v17 = *(_QWORD *)(a3 + 120);
    v21 = 134218752;
    v22 = v17;
    v23 = 1026;
    v24 = a2;
    v25 = 1026;
    v26 = v13;
    v27 = 2050;
    v28 = v14;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "Overriding youth type for outdoor cycling , beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f", &v21, 34);
    v19 = (CLMotionActivity *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthOutdoorCyclingOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v18);
    if (v19 != &buf)
      free(v19);
  }
  return v13;
}

void sub_100E5A50C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100E5A538()
{
  if (qword_102308C08 != -1)
    dispatch_once(&qword_102308C08, &stru_10218C7C0);
  return qword_102311738;
}

void sub_100E5A578(id a1)
{
  operator new();
}

void sub_100E5A5AC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[6];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100E5A618;
  v3[3] = &unk_102139B90;
  v3[4] = a1;
  v3[5] = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.MagicMountWake"), v3);
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
}

NSDictionary *sub_100E5A618(uint64_t a1)
{
  double *v2;
  uint64_t v4;
  NSNumber *v9;
  uint64_t v11;
  NSNumber *v12;
  uint64_t v13;
  NSNumber *v14;
  NSNull *v15;
  _QWORD v17[13];
  _QWORD v18[13];

  v17[0] = CFSTR("currentState");
  v2 = *(double **)(a1 + 32);
  v18[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1));
  v17[1] = CFSTR("didWakeCount");
  v18[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 21));
  v17[2] = CFSTR("isSharingSubscribed");
  v18[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v2 + 1));
  v17[3] = CFSTR("isSpringBoardSubscribed");
  v18[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)v2);
  v17[4] = CFSTR("transitionLikelyToPossibleCount");
  v18[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 2));
  v17[5] = CFSTR("transitionLikelyToUnmountedCount");
  v18[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 4));
  v17[6] = CFSTR("transitionPossibleToLikelyCount");
  v18[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3));
  v17[7] = CFSTR("transitionPossibleToUnmountedCount");
  v18[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 5));
  v17[8] = CFSTR("transitionUnmountedToPossibleCount");
  v18[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 7));
  v17[9] = CFSTR("cameraRollAngle");
  v4 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v4 + 1) == 4)
  {
    LOWORD(_D0) = *(_WORD *)(v4 + 19);
    __asm { FCVT            S0, H0 }
    *(float *)&_D0 = *(float *)&_D0 * 57.296;
    v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", _D0);
  }
  else
  {
    v9 = +[NSNull null](NSNull, "null");
  }
  v18[9] = v9;
  v17[10] = CFSTR("landscapeAngle");
  v11 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v11 + 1) == 4)
  {
    LOWORD(_D0) = *(_WORD *)(v11 + 17);
    __asm { FCVT            S0, H0 }
    *(float *)&_D0 = *(float *)&_D0 * 57.296;
    v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", _D0);
  }
  else
  {
    v12 = +[NSNull null](NSNull, "null");
  }
  v18[10] = v12;
  v17[11] = CFSTR("timeSinceLandscape");
  v13 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v13 + 1) == 4)
    v14 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)*(unint64_t *)(v13 + 9) / 1000000.0);
  else
    v14 = +[NSNull null](NSNull, "null");
  v18[11] = v14;
  v17[12] = CFSTR("timeSinceLastEvent");
  if (v2[1] == 0.0)
    v15 = +[NSNull null](NSNull, "null");
  else
    v15 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent() - v2[1]);
  v18[12] = v15;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 13);
}

void sub_100E5A8C4(_BYTE *a1, uint64_t a2, char a3)
{
  std::string *v6;
  int64_t size;
  int v8;
  void *v9;
  char *v10;
  std::string *v11;
  char *v12;
  BOOL v15;
  std::string *v16;
  int64_t v17;
  int v18;
  void *v19;
  char *v20;
  std::string *v21;
  char *v22;
  BOOL v24;
  std::string v25;

  v6 = &v25;
  sub_1001A8444(a2, &v25);
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  v8 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
  v9 = (void *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v25.__r_.__value_.__l.__size_;
    v6 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  v10 = (char *)v6 + size;
  if (size >= 11)
  {
    v11 = v6;
    do
    {
      v12 = (char *)memchr(v11, 115, size - 10);
      if (!v12)
        break;
      if (*(_QWORD *)v12 == 0x6F62676E69727073 && *(_QWORD *)(v12 + 3) == 0x6472616F62676E69)
        goto LABEL_12;
      v11 = (std::string *)(v12 + 1);
      size = v10 - (char *)v11;
    }
    while (v10 - (char *)v11 > 10);
  }
  v12 = v10;
LABEL_12:
  v15 = v12 == v10 || v12 - (char *)v6 == -1;
  if ((v8 & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_20;
LABEL_38:
    *a1 = a3;
    return;
  }
  operator delete(v9);
  if (!v15)
    goto LABEL_38;
LABEL_20:
  v16 = &v25;
  sub_1001A8444(a2, &v25);
  v17 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  v18 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
  v19 = (void *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v17 = v25.__r_.__value_.__l.__size_;
    v16 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  v20 = (char *)v16 + v17;
  if (v17 >= 8)
  {
    v21 = v16;
    do
    {
      v22 = (char *)memchr(v21, 115, v17 - 7);
      if (!v22)
        break;
      if (*(_QWORD *)v22 == 0x64676E6972616873)
        goto LABEL_28;
      v21 = (std::string *)(v22 + 1);
      v17 = v20 - (char *)v21;
    }
    while (v20 - (char *)v21 > 7);
  }
  v22 = v20;
LABEL_28:
  v24 = v22 == v20 || v22 - (char *)v16 == -1;
  if (v18 < 0)
  {
    operator delete(v19);
    if (v24)
      return;
    goto LABEL_40;
  }
  if (!v24)
LABEL_40:
    a1[1] = a3;
}

uint64_t sub_100E5AA70(uint64_t a1)
{
  *(_QWORD *)a1 = off_10218C7F0;
  *(_QWORD *)(a1 + 8) = off_10214EBA0;
  *(_DWORD *)(a1 + 16) = 3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 96) = off_102138370;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = off_102138370;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = -1082130432;
  *(_DWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 104) = 12;
  sub_10041250C((_QWORD *)(a1 + 96));
  *(_QWORD *)(a1 + 176) = 4;
  sub_10041250C((_QWORD *)(a1 + 168));
  return a1;
}

uint64_t sub_100E5AB38(uint64_t a1)
{
  *(_QWORD *)a1 = off_10218C7F0;
  *(_QWORD *)(a1 + 168) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 192));
  *(_QWORD *)(a1 + 96) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 8) = off_10214EBA0;
  sub_100008848(a1 + 72, *(_QWORD **)(a1 + 80));
  sub_10047F25C((_QWORD *)(a1 + 24));
  return a1;
}

void sub_100E5ABB0(uint64_t a1)
{
  sub_100E5AB38(a1);
  operator delete();
}

void sub_100E5ABD4(uint64_t a1)
{
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 240) = -1082130432;
  sub_10047F1D4((_QWORD *)(a1 + 8));
  sub_10041250C((_QWORD *)(a1 + 96));
  sub_10041250C((_QWORD *)(a1 + 168));
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
}

void sub_100E5AC18(uint64_t a1, _DWORD *a2, float *a3, double *a4, int a5)
{
  float v10;
  float *v11;
  float v12;
  float v13;
  char v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  float v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  BOOL v39;
  float v40;
  NSObject *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  const char *v48;
  uint8_t *v49;
  double v50;
  int v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  uint8_t buf[4];
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;

  HIDWORD(v50) = *a2;
  if (*((float *)&v50 + 1) >= 0.0)
  {
    v10 = *(float *)(a1 + 244);
    v11 = (float *)(a1 + 240);
    v12 = *(float *)(a1 + 240);
    v13 = 0.0;
    if (v12 >= 0.0)
    {
      v13 = *a4 - *(double *)(a1 + 248);
      if (v13 > 4.0 || v13 < 0.0)
      {
        sub_100E5ABD4(a1);
        v12 = *(float *)(a1 + 240);
      }
    }
    if (v12 < 0.0)
    {
      *(_DWORD *)(a1 + 240) = *a2;
      *(_DWORD *)(a1 + 244) = 1061997773;
      *(double *)(a1 + 248) = *a4;
      sub_1006D82B8(a1 + 8, (float *)&v50 + 1);
LABEL_14:
      sub_10007D084(a1 + 168, (float *)&v50 + 1);
      sub_10007D084(a1 + 96, (float *)&v50 + 1);
      return;
    }
    sub_1006D82B8(a1 + 8, (float *)&v50 + 1);
    v14 = sub_100A4533C((_QWORD *)(a1 + 8), 2, (_DWORD *)&v50 + 1);
    v15 = *(float *)a2;
    if ((v14 & 1) == 0)
    {
      *(float *)(a1 + 240) = v15;
      *(_DWORD *)(a1 + 244) = 1061997773;
      *(double *)(a1 + 248) = *a4;
      *(_DWORD *)(a1 + 240) = *a2;
      goto LABEL_14;
    }
    if (v15 < 0.25)
    {
      HIDWORD(v50) = *a2;
      *(double *)(a1 + 256) = *a4;
    }
    if (!a5)
    {
      v16 = *a3;
      v17 = 0.1;
      if (*a3 >= 0.1)
        v17 = *a3;
      v18 = 0.0;
      if (*((float *)&v50 + 1) > 7.0 && v16 > 0.0 && v16 < 0.8)
        v21 = v17;
      else
        v21 = 0.8;
      sub_10007D084(a1 + 168, (float *)&v50 + 1);
      v22 = *(_QWORD *)(a1 + 160);
      v23 = 0.0;
      if (v22)
        v23 = *(float *)(a1 + 112) / (float)v22;
      v24 = *(_QWORD *)(a1 + 232);
      if (v24)
        v18 = *(float *)(a1 + 184) / (float)v24;
      v25 = 0.15;
      if (v23 >= 7.0)
        v25 = 3.0;
      v26 = *a4;
      v27 = 5.0;
      if (*a4 - *(double *)(a1 + 264) >= 4.0)
        v28 = v25;
      else
        v28 = 5.0;
      v29 = *((float *)&v50 + 1);
      if (v28 < 5.0)
      {
        if (*((float *)&v50 + 1) != 0.0 && v18 >= 0.5 && v26 - *(double *)(a1 + 256) >= 10.0)
        {
          v30 = vabds_f32(v18, v23);
          if (v30 <= 3.0)
          {
            if (v30 <= 1.5)
            {
              if (v30 <= 1.0)
                v27 = v28;
              else
                v27 = v28 + v28;
            }
            else
            {
              v27 = v28 + 1.0;
            }
          }
          else
          {
            *(double *)(a1 + 264) = v26;
          }
        }
        if (v18 > 7.0 && v23 < 7.0)
          v28 = 5.0;
        else
          v28 = v27;
      }
      v32 = v10 + (float)(v13 * (float)(v28 * v28));
      v33 = v29 - *v11;
      v34 = v21 + v32;
      if (v28 < 0.6 && (float)((float)(v33 * v33) / v34) > 25.0)
      {
        v32 = (float)(v13 * 25.0) + v32;
        v34 = v21 + v32;
        v28 = 5.0;
      }
      v35 = v32 / v34;
      v36 = v33 * v35;
      v37 = v32 - (float)(v35 * v32);
      if (v37 >= 0.01)
        v38 = v37;
      else
        v38 = 0.01;
      v39 = v29 == 0.0;
      v40 = 0.0;
      if (!v39)
        v40 = *v11 + v36;
      *(float *)(a1 + 240) = v40;
      *(float *)(a1 + 244) = v38;
      *(double *)(a1 + 248) = *a4;
      sub_10007D084(a1 + 96, v11);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10218C830);
      v41 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v42 = *a4;
        v43 = *(float *)a2;
        v44 = *v11;
        *(_DWORD *)buf = 134219776;
        v68 = v42;
        v69 = 2048;
        v70 = v43;
        v71 = 2048;
        v72 = *((float *)&v50 + 1);
        v73 = 2048;
        v74 = v44;
        v75 = 2048;
        v76 = v18;
        v77 = 2048;
        v78 = v23;
        v79 = 2048;
        v80 = v28;
        v81 = 2048;
        v82 = v38;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "%.2lf,rawGpsSpeed,%.3f,medFiltSpeed,%.3f,filterSpeed,%.3f,meanShortTerm,%.3f,meanLongTerm,%.3f,qV,%.3f,P,%.3f", buf, 0x52u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10218C830);
        v45 = *a4;
        v46 = *(float *)a2;
        v47 = *v11;
        v51 = 134219776;
        v52 = v45;
        v53 = 2048;
        v54 = v46;
        v55 = 2048;
        v56 = *((float *)&v50 + 1);
        v57 = 2048;
        v58 = v47;
        v59 = 2048;
        v60 = v18;
        v61 = 2048;
        v62 = v23;
        v63 = 2048;
        v64 = v28;
        v65 = 2048;
        v66 = v38;
        LODWORD(v50) = 82;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "%.2lf,rawGpsSpeed,%.3f,medFiltSpeed,%.3f,filterSpeed,%.3f,meanShortTerm,%.3f,meanLongTerm,%.3f,qV,%.3f,P,%.3f", COERCE_DOUBLE(&v51), v50);
        v49 = (uint8_t *)v48;
        sub_100512490("Generic", 1, 0, 2, "float CLGpsSpeedFilter::update(const float &, const float &, const CFAbsoluteTime &, BOOL)", "%s\n", v48);
        if (v49 != buf)
          free(v49);
      }
    }
  }
}

void sub_100E5B19C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100E5B1C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  int v9;
  double v10;
  int v11;
  double v12;
  int v13;
  double v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  int v34;
  double v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  double v39;
  int v40;
  double v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  double v45;
  int v46;
  double v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  double v52;
  std::__shared_weak_count *v53;
  double v54;
  std::__shared_weak_count *v55;
  double v56;
  double v57;
  std::__shared_weak_count *v58;
  uint8_t buf[8];
  std::__shared_weak_count *v60;
  _QWORD v61[3];
  _QWORD *v62;
  _QWORD v63[3];
  _QWORD *v64;

  *(_QWORD *)a1 = a2;
  sub_1001E4804(buf);
  v57 = 0.0;
  v7 = sub_1001FD98C(*(uint64_t *)buf, "ProactiveLocPositionUncThreshold", &v57);
  v8 = v57;
  if (!v7)
    v8 = 30.0;
  *(double *)(a1 + 8) = v8;
  sub_1001E4804(&v57);
  v54 = 0.0;
  v9 = sub_1001FD98C(*(uint64_t *)&v57, "ProactiveLocSpeedUncThreshold", &v54);
  v10 = v54;
  if (!v9)
    v10 = 4.0;
  *(double *)(a1 + 16) = v10;
  sub_1001E4804(&v54);
  v52 = 0.0;
  v11 = sub_1001FD98C(*(uint64_t *)&v54, "ProactiveLocCourseUncThreshold", &v52);
  v12 = v52;
  if (!v11)
    v12 = 45.0;
  *(double *)(a1 + 24) = v12;
  sub_1001E4804(&v52);
  v56 = 0.0;
  v13 = sub_1001FD98C(*(uint64_t *)&v52, "ProactiveLocMaxSessionDuration", &v56);
  v14 = v56;
  if (!v13)
    v14 = 18.0;
  *(double *)(a1 + 32) = v14;
  v51 = xmmword_101C2A8B0;
  *(_OWORD *)(a1 + 40) = xmmword_101C2A8B0;
  *(_DWORD *)(a1 + 56) = 3;
  *(_QWORD *)(a1 + 64) = 0x4020000000000000;
  v15 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v55;
  if (v55)
  {
    v19 = (unint64_t *)&v55->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v58;
  if (v58)
  {
    v22 = (unint64_t *)&v58->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v60;
  if (v60)
  {
    v25 = (unint64_t *)&v60->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 75) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  v63[0] = off_10218C8A0;
  v63[1] = a1;
  v64 = v63;
  v61[0] = off_10218C920;
  v61[1] = a1;
  v62 = v61;
  sub_1012EA208(a1 + 352, v63, v61);
  v27 = v62;
  if (v62 == v61)
  {
    v28 = 4;
    v27 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_34;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_34:
  v29 = v64;
  if (v64 == v63)
  {
    v30 = 4;
    v29 = v63;
  }
  else
  {
    if (!v64)
    {
LABEL_39:
      *(_BYTE *)(a1 + 568) = 0;
      sub_100270E34(a1 + 576, a3);
      sub_100270E34(a1 + 608, a4);
      v31 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v32 = sub_100B30608(v31, buf);
      *(double *)(a1 + 160) = v32;
      *(double *)(a1 + 168) = v32;
      *(_QWORD *)(a1 + 40) = 0x7FEFFFFFFFFFFFFFLL;
      if (sub_1000C4240() && (sub_100762784() & 1) != 0)
      {
        v51 = xmmword_101C2A8C0;
      }
      else if (!sub_1000C4240())
      {
        goto LABEL_44;
      }
      *(_OWORD *)(a1 + 40) = v51;
LABEL_44:
      sub_1001E4804(buf);
      v33 = *(double *)(a1 + 40);
      v57 = 0.0;
      v34 = sub_1001FD98C(*(uint64_t *)buf, "ProactiveLocMinInterval", &v57);
      v35 = v57;
      if (!v34)
        v35 = v33;
      *(double *)(a1 + 40) = v35;
      v36 = v60;
      if (v60)
      {
        v37 = (unint64_t *)&v60->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      sub_1001E4804(buf);
      v39 = *(double *)(a1 + 48);
      v57 = 0.0;
      v40 = sub_1001FD98C(*(uint64_t *)buf, "ProactiveLocGnssDailyLimit", &v57);
      v41 = v57;
      if (!v40)
        v41 = v39;
      *(double *)(a1 + 48) = v41;
      v42 = v60;
      if (v60)
      {
        v43 = (unint64_t *)&v60->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      sub_1001E4804(buf);
      v45 = *(double *)(a1 + 64);
      v57 = 0.0;
      v46 = sub_1001FD98C(*(uint64_t *)buf, "ProactiveLocRateOverrideMaxSessionDuration", &v57);
      v47 = v57;
      if (!v46)
        v47 = v45;
      *(double *)(a1 + 64) = v47;
      v48 = v60;
      if (v60)
      {
        v49 = (unint64_t *)&v60->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      sub_100E087CC();
    }
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
  goto LABEL_39;
}

void sub_100E5BABC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *(_QWORD **)(v1 + 632);
  if (v7 == v4)
  {
    v8 = 4;
    v7 = v4;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = *(_QWORD **)(v1 + 600);
  if (v9 == v3)
  {
    v10 = 4;
    v9 = v3;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  sub_1012EA30C(v2);
  v11 = *v5;
  *v5 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

void sub_100E5BC40(uint64_t a1)
{
  sub_100E5BC48(*(_QWORD *)(a1 + 32));
}

void sub_100E5BC48(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint8_t buf[4];
  int v16;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 67240192;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v6 = *(unsigned __int8 *)(a1 + 72);
    v13 = 67240192;
    v14 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer", &v13, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::onProactiveLocationTimer()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  objc_msgSend(*(id *)(a1 + 80), "setNextFireDelay:", 1.79769313e308);
  if (*(_BYTE *)(a1 + 72))
  {
    sub_100E5C0B4(a1, 2);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67240192;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer,startTrigger", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v9 = *(unsigned __int8 *)(a1 + 72);
      v13 = 67240192;
      v14 = v9;
      LODWORD(v12) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer,startTrigger", &v13, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::onProactiveLocationTimer()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_100E5C668(a1);
  }
}

uint64_t sub_100E5BF74(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_100E5C0B4(a1, 0);
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 80) = 0;
  }
  v3 = (_QWORD *)(a1 + 576);
  v4 = *(_QWORD **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v4 == (_QWORD *)(a1 + 576))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 576);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  v6 = (_QWORD *)(a1 + 608);
  v7 = *(_QWORD **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = 0;
  if (v7 == (_QWORD *)(a1 + 608))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 608);
  }
  else
  {
    if (!v7)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:

  *(_QWORD *)a1 = 0;
  v9 = *(_QWORD **)(a1 + 632);
  if (v9 == v6)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_18;
    v10 = 5;
    v6 = *(_QWORD **)(a1 + 632);
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v10))(v6);
LABEL_18:
  v11 = *(_QWORD **)(a1 + 600);
  if (v11 == v3)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_23;
    v12 = 5;
    v3 = *(_QWORD **)(a1 + 600);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v12))(v3);
LABEL_23:
  sub_1012EA30C(a1 + 352);
  v13 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

void sub_100E5C0B4(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 67240448;
    v26 = v5;
    v27 = 1026;
    v28 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,reason,%{public}d,stopPositionRequest", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v11 = *(unsigned __int8 *)(a1 + 72);
    v19 = 67240448;
    v20 = v11;
    v21 = 1026;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,active,%{public}d,reason,%{public}d,stopPositionRequest", &v19, 14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::stopPositionRequest(ProactiveLocationSessionEndReason)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v6 = *(_QWORD *)(a1 + 152);
  if (v6 && *(_BYTE *)(a1 + 72))
  {
    objc_msgSend(*(id *)(v6 + 16), "unregister:forNotification:", *(_QWORD *)(v6 + 8), 0);
    *(_BYTE *)(a1 + 72) = 0;
    v7 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    *(double *)(a1 + 120) = sub_100B30608(v7, buf);
    *(_DWORD *)(a1 + 144) = a2;
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a1 + 74);
    sub_100E5C45C(a1, *(double *)(a1 + 40));
    sub_100E5D8D0(a1);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10218C870);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int8 *)(a1 + 72);
      v10 = *(unsigned __int8 *)(a1 + 75);
      *(_DWORD *)buf = 67240704;
      v26 = v9;
      v27 = 1026;
      v28 = a2;
      v29 = 1026;
      v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#wigo,off,#CLProactiveLoc,active,%{public}d,reason,%{public}d,staticCheckpoint,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10218C870);
      v14 = *(unsigned __int8 *)(a1 + 72);
      v15 = *(unsigned __int8 *)(a1 + 75);
      v19 = 67240704;
      v20 = v14;
      v21 = 1026;
      v22 = a2;
      v23 = 1026;
      v24 = v15;
      LODWORD(v18) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,#CLProactiveLoc,active,%{public}d,reason,%{public}d,staticCheckpoint,%{public}d", &v19, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::stopPositionRequest(ProactiveLocationSessionEndReason)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

id sub_100E5C45C(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  double v6;
  id result;
  int v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  double v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  double v18;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 72);
    v6 = 0.0;
    if (a2 < 1.79769313e308)
      v6 = a2;
    *(_DWORD *)buf = 67240448;
    v16 = v5;
    v17 = 2050;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,updateTimer,%{public}0.2f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v8 = *(unsigned __int8 *)(a1 + 72);
    v9 = 0.0;
    if (a2 < 1.79769313e308)
      v9 = a2;
    v12[0] = 67240448;
    v12[1] = v8;
    v13 = 2050;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,updateTimer,%{public}0.2f", v12, 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::updateTimer(const double)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  result = *(id *)(a1 + 80);
  if (result)
    return objc_msgSend(result, "setNextFireDelay:", a2);
  return result;
}

void sub_100E5C668(uint64_t a1)
{
  uint64_t v2;
  double v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  double v17;
  int v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint8_t *v22;
  _BOOL4 v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  double v33;
  double v34;
  double v35;
  NSObject *v36;
  int v37;
  double v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  int v44;
  int v45;
  int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  int v49;
  int v50;
  int v51;
  const char *v52;
  uint8_t *v53;
  int v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  __int16 v60;
  _BYTE v61[10];
  double v62;
  _BOOL4 v63;
  __int16 v64;
  _BOOL4 v65;
  __int16 v66;
  int v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  uint8_t buf[4];
  int v81;
  __int16 v82;
  _BYTE v83[10];
  double v84;
  _BOOL4 v85;
  __int16 v86;
  _BOOL4 v87;
  __int16 v88;
  int v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;

  v2 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v3 = sub_100B30608(v2, buf);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 72);
    v6 = sub_100B303DC();
    v7 = sub_100B309E0(v6);
    *(_DWORD *)buf = 67240704;
    v81 = v5;
    v82 = 2050;
    *(double *)v83 = v3;
    *(_WORD *)&v83[8] = 2050;
    v84 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,proactiveLocationStartCheck,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v39 = qword_1022A0028;
    v40 = *(unsigned __int8 *)(a1 + 72);
    v41 = sub_100B303DC();
    v58 = 67240704;
    v59 = v40;
    v60 = 2050;
    *(double *)v61 = v3;
    *(_WORD *)&v61[8] = 2050;
    v62 = sub_100B309E0(v41);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 2, "#CLProactiveLoc,active,%{public}d,proactiveLocationStartCheck,mct,%{public}.3f,propagation_us,%{public}.3f", &v58, 28);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  sub_100E5D1FC(a1, v3);
  if (*(double *)(a1 + 48) <= *(double *)(a1 + 216))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(unsigned __int8 *)(a1 + 72);
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(double *)(a1 + 216);
      *(_DWORD *)buf = 67240704;
      v81 = v15;
      v82 = 2050;
      *(_QWORD *)v83 = v16;
      *(_WORD *)&v83[8] = 2050;
      v84 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,dailyGNSSLimitReached,limit,%{public}0.2f,usage,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v18 = *(unsigned __int8 *)(a1 + 72);
      v19 = *(_QWORD *)(a1 + 48);
      v20 = *(double *)(a1 + 216);
      v58 = 67240704;
      v59 = v18;
      v60 = 2050;
      *(_QWORD *)v61 = v19;
      *(_WORD *)&v61[8] = 2050;
      v62 = v20;
      LODWORD(v57) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,dailyGNSSLimitReached,limit,%{public}0.2f,usage,%{public}0.2f", &v58, v57);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (v3 - *(double *)(a1 + 96) >= 0.0)
      v8 = v3 - *(double *)(a1 + 96);
    else
      v8 = 0.0;
    if (v3 - *(double *)(a1 + 120) >= 0.0)
      v9 = v3 - *(double *)(a1 + 120);
    else
      v9 = 0.0;
    v10 = *(double *)(a1 + 40);
    v11 = v9 > v10 && v8 > v10;
    if (v11)
    {
      v12 = 0;
      v13 = 1;
    }
    else
    {
      v13 = sub_100E5CF04(a1);
      v12 = v13;
    }
    v23 = (*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 344))
       && !*(_BYTE *)(a1 + 76)
       && !*(_BYTE *)(a1 + 77)
       && !*(_BYTE *)(a1 + 78)
       && !*(_BYTE *)(a1 + 75)
       && *(_BYTE *)(a1 + 568) == 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v24 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(unsigned __int8 *)(a1 + 72);
      v26 = *(unsigned __int8 *)(a1 + 73);
      v27 = *(unsigned __int8 *)(a1 + 76);
      v28 = *(_BYTE *)(a1 + 77) == 0;
      v29 = *(_BYTE *)(a1 + 78) == 0;
      v30 = *(unsigned __int8 *)(a1 + 344);
      v31 = *(unsigned __int8 *)(a1 + 75);
      v32 = *(unsigned __int8 *)(a1 + 568);
      *(_DWORD *)buf = 67243265;
      v81 = v25;
      v82 = 1025;
      *(_DWORD *)v83 = v26;
      *(_WORD *)&v83[4] = 1026;
      *(_DWORD *)&v83[6] = v11;
      LOWORD(v84) = 1026;
      *(_DWORD *)((char *)&v84 + 2) = v27;
      HIWORD(v84) = 1026;
      v85 = v28;
      v86 = 1026;
      v87 = v29;
      v88 = 1026;
      v89 = 1;
      v90 = 2050;
      v91 = v8;
      v92 = 2050;
      v93 = v9;
      v94 = 1026;
      v95 = v30;
      v96 = 1026;
      v97 = v12;
      v98 = 1026;
      v99 = v31;
      v100 = 1026;
      v101 = v32;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,startCheck,outVisit,%{private}d,rate,%{public}d,lowPower,%{public}d,locService,%{public}d,MA,%{public}d,posUnc,%{public}d,secFromLastConvergedFix,%{public}0.2f,secFromLastProactiveLoc,%{public}0.2f,inVisitOverride,%{public}d,rateOverride,%{public}d,staticOverride,%{public}d,pendingAPSleep,%{public}d", buf, 0x58u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v44 = *(unsigned __int8 *)(a1 + 72);
      v45 = *(unsigned __int8 *)(a1 + 73);
      v46 = *(unsigned __int8 *)(a1 + 76);
      v47 = *(_BYTE *)(a1 + 77) == 0;
      v48 = *(_BYTE *)(a1 + 78) == 0;
      v49 = *(unsigned __int8 *)(a1 + 344);
      v50 = *(unsigned __int8 *)(a1 + 75);
      v51 = *(unsigned __int8 *)(a1 + 568);
      v58 = 67243265;
      v59 = v44;
      v60 = 1025;
      *(_DWORD *)v61 = v45;
      *(_WORD *)&v61[4] = 1026;
      *(_DWORD *)&v61[6] = v11;
      LOWORD(v62) = 1026;
      *(_DWORD *)((char *)&v62 + 2) = v46;
      HIWORD(v62) = 1026;
      v63 = v47;
      v64 = 1026;
      v65 = v48;
      v66 = 1026;
      v67 = 1;
      v68 = 2050;
      v69 = v8;
      v70 = 2050;
      v71 = v9;
      v72 = 1026;
      v73 = v49;
      v74 = 1026;
      v75 = v12;
      v76 = 1026;
      v77 = v50;
      v78 = 1026;
      v79 = v51;
      LODWORD(v57) = 88;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,startCheck,outVisit,%{private}d,rate,%{public}d,lowPower,%{public}d,locService,%{public}d,MA,%{public}d,posUnc,%{public}d,secFromLastConvergedFix,%{public}0.2f,secFromLastProactiveLoc,%{public}0.2f,inVisitOverride,%{public}d,rateOverride,%{public}d,staticOverride,%{public}d,pendingAPSleep,%{public}d", &v58, v57);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    if (v23)
    {
      if (v13)
      {
        sub_100E5D404(a1);
      }
      else
      {
        v33 = *(double *)(a1 + 40);
        if (v8 >= v33)
          v34 = 0.0;
        else
          v34 = v33 - v8;
        if (v9 >= v33)
          v35 = 0.0;
        else
          v35 = v33 - v9;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10218C850);
        v36 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          v37 = *(unsigned __int8 *)(a1 + 72);
          *(_DWORD *)buf = 67240704;
          v81 = v37;
          v82 = 2050;
          *(double *)v83 = v34;
          *(_WORD *)&v83[8] = 2050;
          v84 = v35;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,deltaWrtConvergedFix,%{public}0.2f,deltaWrtProactiveSess,%{public}0.2f", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10218C850);
          v54 = *(unsigned __int8 *)(a1 + 72);
          v58 = 67240704;
          v59 = v54;
          v60 = 2050;
          *(double *)v61 = v34;
          *(_WORD *)&v61[8] = 2050;
          v62 = v35;
          LODWORD(v57) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,deltaWrtConvergedFix,%{public}0.2f,deltaWrtProactiveSess,%{public}0.2f", &v58, v57);
          v56 = (uint8_t *)v55;
          sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v55);
          if (v56 != buf)
            free(v56);
        }
        if (v34 >= v35)
          v38 = v34;
        else
          v38 = v35;
        if (v38 < 0.2)
          v38 = 0.2;
        sub_100E5C45C(a1, v38);
      }
    }
  }
}

uint64_t sub_100E5CF04(uint64_t a1)
{
  unsigned int v2;
  double v3;
  int v4;
  unsigned int v5;
  double v6;
  double v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[2];
  __int16 v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  _BOOL4 v26;
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  _BOOL4 v30;
  __int16 v31;
  _BOOL4 v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  _BOOL4 v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  _BOOL4 v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  int v50;

  if (sub_100762784())
    v2 = sub_1000C4240();
  else
    v2 = 0;
  v3 = *(double *)(a1 + 112);
  v4 = *(unsigned __int8 *)(a1 + 136);
  if (v3 > 0.0)
    v5 = v2;
  else
    v5 = 0;
  v6 = *(double *)(a1 + 120) - v3;
  v7 = *(double *)(a1 + 64);
  if (*(_BYTE *)(a1 + 136))
    v5 = 0;
  if (v6 <= v7)
    v8 = v5;
  else
    v8 = 0;
  v9 = *(_DWORD *)(a1 + 140);
  v10 = *(_DWORD *)(a1 + 144);
  if (v10 != 1)
    v8 = 0;
  if (v9 > 0)
    v11 = v8;
  else
    v11 = 0;
  if ((_DWORD)v11 == 1)
    *(_DWORD *)(a1 + 140) = v9 - 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(unsigned __int8 *)(a1 + 72);
    v14 = *(_DWORD *)(a1 + 140);
    *(_DWORD *)buf = 67241984;
    v36 = v13;
    v37 = 1026;
    v38 = v11;
    v39 = 1026;
    v40 = v2;
    v41 = 1026;
    v42 = v3 > 0.0;
    v43 = 1026;
    v44 = v4 == 0;
    v45 = 1026;
    v46 = v6 <= v7;
    v47 = 1026;
    v48 = v10 == 1;
    v49 = 1026;
    v50 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,isRateOverrideTrue,%{public}d,isSessRtryAllowed,%{public}d,notFirstSession,%{public}d,prevNoYield,%{public}d,prevSessionDurationSmall,%{public}d,prevAPSleep,%{public}d,remainingAttempts,%{public}d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v16 = *(unsigned __int8 *)(a1 + 72);
    v17 = *(_DWORD *)(a1 + 140);
    v20[0] = 67241984;
    v20[1] = v16;
    v21 = 1026;
    v22 = v11;
    v23 = 1026;
    v24 = v2;
    v25 = 1026;
    v26 = v3 > 0.0;
    v27 = 1026;
    v28 = v4 == 0;
    v29 = 1026;
    v30 = v6 <= v7;
    v31 = 1026;
    v32 = v10 == 1;
    v33 = 1026;
    v34 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,isRateOverrideTrue,%{public}d,isSessRtryAllowed,%{public}d,notFirstSession,%{public}d,prevNoYield,%{public}d,prevSessionDurationSmall,%{public}d,prevAPSleep,%{public}d,remainingAttempts,%{public}d", v20, 50);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLProactiveLocation::isRateOverrideTrue()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return v11;
}

void sub_100E5D1FC(uint64_t a1, double a2)
{
  double v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v3 = *(double *)(a1 + 160);
  if (v3 <= a2)
  {
    if (a2 - v3 >= 86400.0)
    {
      sub_1012EBC90(a1 + 352, a1 + 168);
      sub_1011803F0(a1 + 168);
      sub_100E608D4(a1);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#LCStats,submitMetrics,CurrentMCT < CA baseline time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#LCStats,submitMetrics,CurrentMCT < CA baseline time", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLProactiveLocation::statsSubmission(const CFTimeInterval)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_100E608D4(a1);
  }
}

void sub_100E5D404(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  int v27;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 67240192;
    v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,startPositionRequest", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v16 = *(unsigned __int8 *)(a1 + 72);
    LODWORD(v23) = 67240192;
    DWORD1(v23) = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,active,%{public}d,startPositionRequest", &v23, 8);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::startPositionRequest()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (*(_QWORD *)(a1 + 152) && !*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10218C870);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67240192;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,on,#CLProactiveLoc,active,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10218C870);
      v19 = *(unsigned __int8 *)(a1 + 72);
      LODWORD(v23) = 67240192;
      DWORD1(v23) = v19;
      LODWORD(v22) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,#CLProactiveLoc,active,%{public}d", &v23, v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::startPositionRequest()", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    *(_OWORD *)(a1 + 104) = 0u;
    v6 = *(_DWORD *)(a1 + 140);
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 132) = 0u;
    v7 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v8 = sub_100B30608(v7, buf);
    *(double *)(a1 + 112) = v8;
    *(_DWORD *)(a1 + 140) = v6;
    v9 = v8 - *(double *)(a1 + 96);
    v10 = v8 - *(double *)(a1 + 88);
    if (v10 >= v9)
      v10 = v9;
    *(double *)(a1 + 104) = v10;
    __asm { FMOV            V0.2D, #-1.0 }
    v23 = _Q0;
    v24 = 0;
    v25 = 11;
    sub_1001B3AF0();
  }
}

void sub_100E5D8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100E5D8D0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  double v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  NSObject *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  NSObject *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  const char *v54;
  uint8_t *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  const char *v65;
  uint8_t *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  const char *v73;
  uint8_t *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  const char *v82;
  uint8_t *v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  const char *v90;
  uint8_t *v91;
  int v92;
  uint64_t v93;
  const char *v94;
  uint8_t *v95;
  uint64_t v96;
  int v97;
  int v98;
  __int16 v99;
  _BYTE v100[10];
  _BYTE v101[12];
  _BYTE v102[6];
  _BYTE v103[6];
  __int16 v104;
  int v105;
  __int16 v106;
  uint64_t v107;
  uint8_t buf[4];
  int v109;
  __int16 v110;
  _BYTE v111[10];
  _BYTE v112[12];
  _BYTE v113[6];
  _BYTE v114[6];
  __int16 v115;
  int v116;
  __int16 v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  void *__p;
  char v122;
  std::__shared_weak_count *v123;
  id v124;
  int v125;
  double v126;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 67240192;
    v109 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,statsUpdateOnSessionEnd", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v53 = *(unsigned __int8 *)(a1 + 72);
    v97 = 67240192;
    v98 = v53;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,statsUpdateOnSessionEnd", &v97, 8);
    v55 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  v5 = *(double *)(a1 + 112);
  v4 = *(double *)(a1 + 120);
  if (v4 > v5)
  {
    v6 = v4 - v5;
    *(double *)(a1 + 216) = v4 - v5 + *(double *)(a1 + 216);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(unsigned __int8 *)(a1 + 72);
      v9 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 67240705;
      v109 = v8;
      v110 = 2049;
      *(double *)v111 = v6;
      *(_WORD *)&v111[8] = 2049;
      *(_QWORD *)v112 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,stats,dailyPositionReqActiveSec,%{private}0.2f,total,%{private}0.2f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v92 = *(unsigned __int8 *)(a1 + 72);
      v93 = *(_QWORD *)(a1 + 216);
      v97 = 67240705;
      v98 = v92;
      v99 = 2049;
      *(double *)v100 = v6;
      *(_WORD *)&v100[8] = 2049;
      *(_QWORD *)v101 = v93;
      LODWORD(v96) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,stats,dailyPositionReqActiveSec,%{private}0.2f,total,%{private}0.2f", &v97, v96);
      v95 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
    if (*(_QWORD *)(a1 + 600))
    {
      sub_100129CA0((uint64_t)buf);
      v125 = 1;
      v126 = v6;
      v10 = *(_QWORD *)(a1 + 600);
      if (!v10)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 48))(v10, buf);

      v11 = v123;
      if (v123)
      {
        p_shared_owners = (unint64_t *)&v123->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v122 < 0)
        operator delete(__p);
      v14 = v120;
      if (v120)
      {
        v15 = (unint64_t *)&v120->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = v119;
      if (v119)
      {
        v18 = (unint64_t *)&v119->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    ++*(_DWORD *)(a1 + 184);
    if (!*(_BYTE *)(a1 + 136))
      ++*(_DWORD *)(a1 + 192);
    switch(*(_DWORD *)(a1 + 144))
    {
      case 1:
        ++*(_DWORD *)(a1 + 200);
        break;
      case 2:
        ++*(_DWORD *)(a1 + 196);
        break;
      case 3:
        ++*(_DWORD *)(a1 + 204);
        break;
      case 4:
        ++*(_DWORD *)(a1 + 208);
        break;
      case 5:
        ++*(_DWORD *)(a1 + 212);
        break;
      case 7:
        ++*(_DWORD *)(a1 + 188);
        if (v6 >= 3.0)
        {
          if (v6 >= 5.0)
          {
            if (v6 >= 8.0)
            {
              if (v6 >= 10.0)
              {
                if (v6 >= 15.0)
                  ++*(_DWORD *)(a1 + 244);
                else
                  ++*(_DWORD *)(a1 + 240);
              }
              else
              {
                ++*(_DWORD *)(a1 + 236);
              }
            }
            else
            {
              ++*(_DWORD *)(a1 + 232);
            }
          }
          else
          {
            ++*(_DWORD *)(a1 + 228);
          }
        }
        else
        {
          ++*(_DWORD *)(a1 + 224);
        }
        break;
      default:
        break;
    }
    v20 = *(double *)(a1 + 104);
    if (v20 >= 180.0)
    {
      if (v20 >= 300.0)
      {
        if (v20 >= 600.0)
        {
          if (v20 >= 900.0)
          {
            if (v20 >= 1200.0)
            {
              if (v20 >= 1800.0)
                ++*(_DWORD *)(a1 + 272);
              else
                ++*(_DWORD *)(a1 + 268);
            }
            else
            {
              ++*(_DWORD *)(a1 + 264);
            }
          }
          else
          {
            ++*(_DWORD *)(a1 + 260);
          }
        }
        else
        {
          ++*(_DWORD *)(a1 + 256);
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 252);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 248);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(unsigned __int8 *)(a1 + 72);
    v23 = *(_DWORD *)(a1 + 200);
    v24 = *(_DWORD *)(a1 + 204);
    v25 = *(_DWORD *)(a1 + 208);
    v26 = *(_DWORD *)(a1 + 184);
    v27 = *(_DWORD *)(a1 + 188);
    v29 = *(_DWORD *)(a1 + 192);
    v28 = *(_DWORD *)(a1 + 196);
    v30 = *(_QWORD *)(a1 + 216);
    *(_DWORD *)buf = 67242240;
    v109 = v22;
    v110 = 1026;
    *(_DWORD *)v111 = v26;
    *(_WORD *)&v111[4] = 1026;
    *(_DWORD *)&v111[6] = v23;
    *(_WORD *)v112 = 1026;
    *(_DWORD *)&v112[2] = v28;
    *(_WORD *)&v112[6] = 1026;
    *(_DWORD *)&v112[8] = v24;
    *(_WORD *)v113 = 1026;
    *(_DWORD *)&v113[2] = v25;
    *(_WORD *)v114 = 1026;
    *(_DWORD *)&v114[2] = v27;
    v115 = 1026;
    v116 = v29;
    v117 = 2050;
    v118 = v30;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,overallStats,count,%{public}d,APSleep,%{public}d,Timeout,%{public}d,VisitEnd,%{public}d,lowPowerMode,%{public}d,converged,%{public}d,noYield,%{public}d,total,%{public}0.2f", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v56 = *(unsigned __int8 *)(a1 + 72);
    v57 = *(_DWORD *)(a1 + 200);
    v58 = *(_DWORD *)(a1 + 204);
    v59 = *(_DWORD *)(a1 + 208);
    v60 = *(_DWORD *)(a1 + 184);
    v61 = *(_DWORD *)(a1 + 188);
    v63 = *(_DWORD *)(a1 + 192);
    v62 = *(_DWORD *)(a1 + 196);
    v64 = *(_QWORD *)(a1 + 216);
    v97 = 67242240;
    v98 = v56;
    v99 = 1026;
    *(_DWORD *)v100 = v60;
    *(_WORD *)&v100[4] = 1026;
    *(_DWORD *)&v100[6] = v57;
    *(_WORD *)v101 = 1026;
    *(_DWORD *)&v101[2] = v62;
    *(_WORD *)&v101[6] = 1026;
    *(_DWORD *)&v101[8] = v58;
    *(_WORD *)v102 = 1026;
    *(_DWORD *)&v102[2] = v59;
    *(_WORD *)v103 = 1026;
    *(_DWORD *)&v103[2] = v61;
    v104 = 1026;
    v105 = v63;
    v106 = 2050;
    v107 = v64;
    LODWORD(v96) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,overallStats,count,%{public}d,APSleep,%{public}d,Timeout,%{public}d,VisitEnd,%{public}d,lowPowerMode,%{public}d,converged,%{public}d,noYield,%{public}d,total,%{public}0.2f", &v97, v96);
    v66 = (uint8_t *)v65;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v65);
    if (v66 != buf)
      free(v66);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v31 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *(_DWORD *)(a1 + 224);
    v33 = *(_DWORD *)(a1 + 228);
    v34 = *(_DWORD *)(a1 + 232);
    v35 = *(_DWORD *)(a1 + 236);
    v36 = *(_DWORD *)(a1 + 240);
    v37 = *(_DWORD *)(a1 + 244);
    *(_DWORD *)buf = 67241472;
    v109 = v32;
    v110 = 1026;
    *(_DWORD *)v111 = v33;
    *(_WORD *)&v111[4] = 1026;
    *(_DWORD *)&v111[6] = v34;
    *(_WORD *)v112 = 1026;
    *(_DWORD *)&v112[2] = v35;
    *(_WORD *)&v112[6] = 1026;
    *(_DWORD *)&v112[8] = v36;
    *(_WORD *)v113 = 1026;
    *(_DWORD *)&v113[2] = v37;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,convergedFixSessDurationStats,[0,3),%{public}d,[3,5),%{public}d,[5,8),%{public}d,[8,10),%{public}d,[10,15),%{public}d,[15,),%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v67 = *(_DWORD *)(a1 + 224);
    v68 = *(_DWORD *)(a1 + 228);
    v69 = *(_DWORD *)(a1 + 232);
    v70 = *(_DWORD *)(a1 + 236);
    v71 = *(_DWORD *)(a1 + 240);
    v72 = *(_DWORD *)(a1 + 244);
    v97 = 67241472;
    v98 = v67;
    v99 = 1026;
    *(_DWORD *)v100 = v68;
    *(_WORD *)&v100[4] = 1026;
    *(_DWORD *)&v100[6] = v69;
    *(_WORD *)v101 = 1026;
    *(_DWORD *)&v101[2] = v70;
    *(_WORD *)&v101[6] = 1026;
    *(_DWORD *)&v101[8] = v71;
    *(_WORD *)v102 = 1026;
    *(_DWORD *)&v102[2] = v72;
    LODWORD(v96) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,convergedFixSessDurationStats,[0,3),%{public}d,[3,5),%{public}d,[5,8),%{public}d,[8,10),%{public}d,[10,15),%{public}d,[15,),%{public}d", &v97, v96);
    v74 = (uint8_t *)v73;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v73);
    if (v74 != buf)
      free(v74);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v38 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v39 = *(_DWORD *)(a1 + 248);
    v40 = *(_DWORD *)(a1 + 252);
    v41 = *(_DWORD *)(a1 + 256);
    v42 = *(_DWORD *)(a1 + 260);
    v43 = *(_DWORD *)(a1 + 264);
    v44 = *(_DWORD *)(a1 + 268);
    v45 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)buf = 67241728;
    v109 = v39;
    v110 = 1026;
    *(_DWORD *)v111 = v40;
    *(_WORD *)&v111[4] = 1026;
    *(_DWORD *)&v111[6] = v41;
    *(_WORD *)v112 = 1026;
    *(_DWORD *)&v112[2] = v42;
    *(_WORD *)&v112[6] = 1026;
    *(_DWORD *)&v112[8] = v43;
    *(_WORD *)v113 = 1026;
    *(_DWORD *)&v113[2] = v44;
    *(_WORD *)v114 = 1026;
    *(_DWORD *)&v114[2] = v45;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,sessIntervalStats,[0,3),%{public}d,[3,5),%{public}d,[5,10),%{public}d,[10,15),%{public}d,[15,20),%{public}d,[20,30),%{public}d,[30,),%{public}d", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v75 = *(_DWORD *)(a1 + 248);
    v76 = *(_DWORD *)(a1 + 252);
    v77 = *(_DWORD *)(a1 + 256);
    v78 = *(_DWORD *)(a1 + 260);
    v79 = *(_DWORD *)(a1 + 264);
    v80 = *(_DWORD *)(a1 + 268);
    v81 = *(_DWORD *)(a1 + 272);
    v97 = 67241728;
    v98 = v75;
    v99 = 1026;
    *(_DWORD *)v100 = v76;
    *(_WORD *)&v100[4] = 1026;
    *(_DWORD *)&v100[6] = v77;
    *(_WORD *)v101 = 1026;
    *(_DWORD *)&v101[2] = v78;
    *(_WORD *)&v101[6] = 1026;
    *(_DWORD *)&v101[8] = v79;
    *(_WORD *)v102 = 1026;
    *(_DWORD *)&v102[2] = v80;
    *(_WORD *)v103 = 1026;
    *(_DWORD *)&v103[2] = v81;
    LODWORD(v96) = 44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,sessIntervalStats,[0,3),%{public}d,[3,5),%{public}d,[5,10),%{public}d,[10,15),%{public}d,[15,20),%{public}d,[20,30),%{public}d,[30,),%{public}d", &v97, v96);
    v83 = (uint8_t *)v82;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v82);
    if (v83 != buf)
      free(v83);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v46 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v47 = *(_DWORD *)(a1 + 288);
    v48 = *(_QWORD *)(a1 + 280);
    v49 = *(_DWORD *)(a1 + 292);
    v50 = *(_DWORD *)(a1 + 296);
    v51 = *(_DWORD *)(a1 + 300);
    v52 = *(_DWORD *)(a1 + 304);
    *(_DWORD *)buf = 67241472;
    v109 = v47;
    v110 = 2050;
    *(_QWORD *)v111 = v48;
    *(_WORD *)&v111[8] = 1026;
    *(_DWORD *)v112 = v49;
    *(_WORD *)&v112[4] = 1026;
    *(_DWORD *)&v112[6] = v50;
    *(_WORD *)&v112[10] = 1026;
    *(_DWORD *)v113 = v51;
    *(_WORD *)&v113[4] = 1026;
    *(_DWORD *)v114 = v52;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,APWakeStats,count,%{public}d,totalDuration,%{public}0.2f,[0,10),%{public}d,[10,20),%{public}d,[20,30),%{public}d,[30,),%{public}d", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v84 = *(_DWORD *)(a1 + 288);
    v85 = *(_QWORD *)(a1 + 280);
    v86 = *(_DWORD *)(a1 + 292);
    v87 = *(_DWORD *)(a1 + 296);
    v88 = *(_DWORD *)(a1 + 300);
    v89 = *(_DWORD *)(a1 + 304);
    v97 = 67241472;
    v98 = v84;
    v99 = 2050;
    *(_QWORD *)v100 = v85;
    *(_WORD *)&v100[8] = 1026;
    *(_DWORD *)v101 = v86;
    *(_WORD *)&v101[4] = 1026;
    *(_DWORD *)&v101[6] = v87;
    *(_WORD *)&v101[10] = 1026;
    *(_DWORD *)v102 = v88;
    *(_WORD *)&v102[4] = 1026;
    *(_DWORD *)v103 = v89;
    LODWORD(v96) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,APWakeStats,count,%{public}d,totalDuration,%{public}0.2f,[0,10),%{public}d,[10,20),%{public}d,[20,30),%{public}d,[30,),%{public}d", &v97, v96);
    v91 = (uint8_t *)v90;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v90);
    if (v91 != buf)
      free(v91);
  }
}

void sub_100E5E67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100E5E6C4(uint64_t a1, void *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (a2)
  {
    if ((objc_msgSend(a2, "hasDepartureDate") & 1) != 0)
      v4 = 0;
    else
      v4 = objc_msgSend(a2, "hasArrivalDate");
    v5 = v4 ^ 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67240449;
      v17 = v7;
      v18 = 1025;
      v19 = v4 ^ 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,feedVisit,isOutsideVisit,%{private}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v10 = *(unsigned __int8 *)(a1 + 72);
      v13[0] = 67240449;
      v13[1] = v10;
      v14 = 1025;
      v15 = v4 ^ 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,feedVisit,isOutsideVisit,%{private}d", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedVisit(const CLVisit *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    if (*(unsigned __int8 *)(a1 + 73) != v5)
    {
      *(_BYTE *)(a1 + 73) = v5;
      v8 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      *(double *)(a1 + 88) = sub_100B30608(v8, buf);
      if (*(_BYTE *)(a1 + 73))
      {
        *(_BYTE *)(a1 + 344) = 0;
        sub_100E5C668(a1);
      }
      else
      {
        sub_100E5C0B4(a1, 3);
        sub_100E5C45C(a1, *(double *)(a1 + 40));
        if (!objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType"))
        {
          v9 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "placeType") != (id)2;
          goto LABEL_15;
        }
      }
    }
    v9 = 0;
LABEL_15:
    sub_1012EAA00(a1 + 352, v4, v9);
  }
}

BOOL sub_100E5E950(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  _BOOL8 v9;
  double v11;
  BOOL v12;
  NSObject *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  const char *v37;
  uint8_t *v38;
  int v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  __int16 v59;
  _BOOL4 v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  int v80;
  __int16 v81;
  _BOOL4 v82;

  if (!sub_100182290(a2) || (v4 = *(double *)(a2 + 20), v4 <= 0.0))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67240192;
      v62 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,isPositionFixConverged,invalid,fix", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v36 = *(unsigned __int8 *)(a1 + 72);
      v39 = 67240192;
      v40 = v36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,active,%{public}d,isPositionFixConverged,invalid,fix", &v39, 8);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLProactiveLocation::isPositionFixConverged(const CLDaemonLocation &)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    return 0;
  }
  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) != 1)
    return 0;
  v6 = *(double *)(a2 + 44) < 0.0 || (v5 = *(double *)(a2 + 52), v5 <= 0.0) || v5 >= *(double *)(a1 + 16);
  v12 = *(double *)(a2 + 60) >= 0.0 && (v11 = *(double *)(a2 + 68), v11 > 0.0) && v11 < *(double *)(a1 + 24);
  if (v4 >= *(double *)(a1 + 8))
    v6 = 1;
  v9 = !v6;
  if (!v6 && !v12)
    v9 = *(_BYTE *)(a1 + 74) != 0;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(unsigned __int8 *)(a1 + 72);
    v15 = *(_DWORD *)(a2 + 96);
    v16 = *(_QWORD *)(a2 + 4);
    v17 = *(_QWORD *)(a2 + 12);
    v18 = *(_QWORD *)(a2 + 20);
    v19 = *(_QWORD *)(a2 + 44);
    v20 = *(_QWORD *)(a2 + 52);
    v21 = *(_QWORD *)(a2 + 60);
    v22 = *(_QWORD *)(a2 + 68);
    v23 = *(unsigned __int8 *)(a1 + 73);
    *(_DWORD *)buf = 67242753;
    v62 = v14;
    v63 = 1026;
    v64 = v15;
    v65 = 2049;
    v66 = v16;
    v67 = 2049;
    v68 = v17;
    v69 = 2049;
    v70 = v18;
    v71 = 2049;
    v72 = v19;
    v73 = 2049;
    v74 = v20;
    v75 = 2049;
    v76 = v21;
    v77 = 2049;
    v78 = v22;
    v79 = 1025;
    v80 = v23;
    v81 = 1026;
    v82 = v9;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,isPositionFixConverged,type,%{public}d,lat,%{private}0.2f,lon,%{private}0.2f,hunc,%{private}0.2f,speed,%{private}0.2f,sunc,%{private}0.2f,course,%{private}0.2f,courseunc,%{private}0.2f,outvisit,%{private}d,convergedFix,%{public}d", buf, 0x60u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v24 = *(unsigned __int8 *)(a1 + 72);
    v25 = *(_DWORD *)(a2 + 96);
    v26 = *(_QWORD *)(a2 + 4);
    v27 = *(_QWORD *)(a2 + 12);
    v28 = *(_QWORD *)(a2 + 20);
    v29 = *(_QWORD *)(a2 + 44);
    v30 = *(_QWORD *)(a2 + 52);
    v31 = *(_QWORD *)(a2 + 60);
    v32 = *(_QWORD *)(a2 + 68);
    v33 = *(unsigned __int8 *)(a1 + 73);
    v39 = 67242753;
    v40 = v24;
    v41 = 1026;
    v42 = v25;
    v43 = 2049;
    v44 = v26;
    v45 = 2049;
    v46 = v27;
    v47 = 2049;
    v48 = v28;
    v49 = 2049;
    v50 = v29;
    v51 = 2049;
    v52 = v30;
    v53 = 2049;
    v54 = v31;
    v55 = 2049;
    v56 = v32;
    v57 = 1025;
    v58 = v33;
    v59 = 1026;
    v60 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,active,%{public}d,isPositionFixConverged,type,%{public}d,lat,%{private}0.2f,lon,%{private}0.2f,hunc,%{private}0.2f,speed,%{private}0.2f,sunc,%{private}0.2f,course,%{private}0.2f,courseunc,%{private}0.2f,outvisit,%{private}d,convergedFix,%{public}d", &v39, 96);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLProactiveLocation::isPositionFixConverged(const CLDaemonLocation &)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  return v9;
}

void sub_100E5EE0C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 67240192;
    v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,updateSessionInfo", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v11 = *(unsigned __int8 *)(a1 + 72);
    v20 = 67240192;
    v21 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,active,%{public}d,updateSessionInfo", &v20, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::updateProactiveLocationSessionInfo(const CLDaemonLocation &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (sub_100182290(a2)
    && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1
    && *(_BYTE *)(a1 + 72)
    && !*(_BYTE *)(a1 + 136))
  {
    *(_BYTE *)(a1 + 136) = 1;
    v6 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    *(double *)(a1 + 128) = sub_100B30608(v6, buf);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a1 + 56);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(unsigned __int8 *)(a1 + 72);
      v9 = *(unsigned __int8 *)(a1 + 136);
      v10 = *(_DWORD *)(a1 + 140);
      *(_DWORD *)buf = 67240704;
      v27 = v8;
      v28 = 1026;
      v29 = v9;
      v30 = 1026;
      v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,updateSessionInfo,yield,%{public}d,rateOverrideAttempts,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v14 = *(unsigned __int8 *)(a1 + 72);
      v15 = *(unsigned __int8 *)(a1 + 136);
      v16 = *(_DWORD *)(a1 + 140);
      v20 = 67240704;
      v21 = v14;
      v22 = 1026;
      v23 = v15;
      v24 = 1026;
      v25 = v16;
      LODWORD(v19) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,updateSessionInfo,yield,%{public}d,rateOverrideAttempts,%{public}d", &v20, v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::updateProactiveLocationSessionInfo(const CLDaemonLocation &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

void sub_100E5F198(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;

  sub_100E5EE0C(a1, a2);
  if (sub_100E5E950(a1, a2))
  {
    *(double *)(a1 + 96) = a3;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int8 *)(a1 + 72);
      v8 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 67240448;
      v17 = v7;
      v18 = 2050;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,feedLocation,fixConvergedMCT,%{public}0.2f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v9 = *(unsigned __int8 *)(a1 + 72);
      v10 = *(_QWORD *)(a1 + 96);
      v13[0] = 67240448;
      v13[1] = v9;
      v14 = 2050;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,feedLocation,fixConvergedMCT,%{public}0.2f", v13, 18);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedLocation(const CLDaemonLocation &, const CFTimeInterval)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_100E5C0B4(a1, 7);
  }
}

void sub_100E5F39C(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[2];
  __int16 v18;
  int v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 72);
    v8 = *a2;
    *(_DWORD *)buf = 67240448;
    v21 = v7;
    v22 = 1026;
    v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,feedDaemonStatus,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v13 = *(unsigned __int8 *)(a1 + 72);
    v14 = *a2;
    v17[0] = 67240448;
    v17[1] = v13;
    v18 = 1026;
    v19 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,active,%{public}d,feedDaemonStatus,%{public}d", v17, 14);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedDaemonStatus(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v9 = *a2;
  if (*a2 == 15)
  {
    v11 = *a3;
    *(_BYTE *)(a1 + 76) = v11;
    if (v11)
    {
      sub_100E5C0B4(a1, 4);
      sub_100E5C45C(a1, 1.79769313e308);
    }
    else
    {
      sub_100E5C668(a1);
    }
  }
  else if (v9 == 3)
  {
    ++*(_DWORD *)(a1 + 288);
    v12 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    *(double *)(a1 + 168) = sub_100B30608(v12, buf);
    sub_100E5FA1C(a1);
    *(_BYTE *)(a1 + 568) = 0;
    if (!*(_BYTE *)(a1 + 72))
    {
      sub_100E5C668(a1);
      sub_1012EBC80(a1 + 352);
    }
  }
  else if (v9 == 2)
  {
    v10 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    *(double *)(a1 + 176) = sub_100B30608(v10, buf);
    sub_100E5F64C(a1);
    *(_BYTE *)(a1 + 568) = 1;
    sub_100E5C0B4(a1, 1);
  }
}

void sub_100E5F64C(uint64_t a1)
{
  double v2;
  double v3;
  NSObject *v4;
  int v5;
  double v6;
  uint64_t v7;
  int v8;
  double v9;
  uint64_t v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  double v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  double v20;
  uint8_t *v21;
  int v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;

  v3 = *(double *)(a1 + 168);
  v2 = *(double *)(a1 + 176);
  if (v2 >= v3)
  {
    v14 = v2 - v3;
    *(double *)(a1 + 280) = v2 - v3 + *(double *)(a1 + 280);
    if (v2 - v3 >= 10.0)
    {
      if (v14 >= 20.0)
      {
        if (v14 >= 30.0)
          ++*(_DWORD *)(a1 + 304);
        else
          ++*(_DWORD *)(a1 + 300);
      }
      else
      {
        ++*(_DWORD *)(a1 + 296);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 292);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(unsigned __int8 *)(a1 + 72);
      v17 = *(_QWORD *)(a1 + 280);
      *(_DWORD *)buf = 67240704;
      v29 = v16;
      v30 = 2050;
      v31 = v14;
      v32 = 2050;
      v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,APWakeSec,wake,%{public}0.2f,total,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v18 = *(unsigned __int8 *)(a1 + 72);
      v19 = *(_QWORD *)(a1 + 280);
      v22 = 67240704;
      v23 = v18;
      v24 = 2050;
      v25 = v14;
      v26 = 2050;
      v27 = v19;
      v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,APWakeSec,wake,%{public}0.2f,total,%{public}0.2f", &v22, 28);
      v13 = v21;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::updateAPWakeStats()", "%s\n", v20);
      goto LABEL_26;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v5 = *(unsigned __int8 *)(a1 + 72);
      v7 = *(_QWORD *)(a1 + 168);
      v6 = *(double *)(a1 + 176);
      *(_DWORD *)buf = 67240704;
      v29 = v5;
      v30 = 2050;
      v31 = v6;
      v32 = 2050;
      v33 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#CLProactiveLoc,active,%{public}d,updateAPWakeStats,sleep,%{public}0.2f,wake,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v8 = *(unsigned __int8 *)(a1 + 72);
      v10 = *(_QWORD *)(a1 + 168);
      v9 = *(double *)(a1 + 176);
      v22 = 67240704;
      v23 = v8;
      v24 = 2050;
      v25 = v9;
      v26 = 2050;
      v27 = v10;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLProactiveLoc,active,%{public}d,updateAPWakeStats,sleep,%{public}0.2f,wake,%{public}0.2f", &v22, 28);
      v13 = v12;
      sub_100512490("Generic", 1, 0, 0, "void CLProactiveLocation::updateAPWakeStats()", "%s\n", v11);
LABEL_26:
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_100E5FA1C(uint64_t a1)
{
  double v2;
  double v3;
  NSObject *v4;
  int v5;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  NSObject *v20;
  int v21;
  int v22;
  double v23;
  uint8_t *v24;
  int v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;

  v3 = *(double *)(a1 + 168);
  v2 = *(double *)(a1 + 176);
  if (v2 <= v3)
  {
    v14 = v3 - v2;
    if (v3 - v2 >= 120.0)
    {
      if (v14 >= 300.0)
      {
        v17 = v14 + *(float *)(a1 + 336);
        *(float *)(a1 + 336) = v17;
      }
      else
      {
        v16 = v14 + *(float *)(a1 + 332);
        *(float *)(a1 + 332) = v16;
      }
    }
    else
    {
      v15 = v14 + *(float *)(a1 + 328);
      *(float *)(a1 + 328) = v15;
    }
    v18 = (float)(*(float *)(a1 + 328) + *(float *)(a1 + 332)) + *(float *)(a1 + 336);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v19 = v18;
    v20 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67240704;
      v32 = v21;
      v33 = 2050;
      v34 = v14;
      v35 = 2050;
      v36 = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,sleepDur,%{public}0.2f,total,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v22 = *(unsigned __int8 *)(a1 + 72);
      v25 = 67240704;
      v26 = v22;
      v27 = 2050;
      v28 = v14;
      v29 = 2050;
      v30 = v19;
      v23 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,sleepDur,%{public}0.2f,total,%{public}0.2f", &v25, 28);
      v13 = v24;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::updateAPSleepStats()", "%s\n", v23);
      goto LABEL_24;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v5 = *(unsigned __int8 *)(a1 + 72);
      v7 = *(double *)(a1 + 168);
      v6 = *(double *)(a1 + 176);
      *(_DWORD *)buf = 67240704;
      v32 = v5;
      v33 = 2050;
      v34 = v6;
      v35 = 2050;
      v36 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#CLProactiveLoc,active,%{public}d,updateAPSleepStats,sleep,%{public}0.2f,wake,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v8 = *(unsigned __int8 *)(a1 + 72);
      v10 = *(double *)(a1 + 168);
      v9 = *(double *)(a1 + 176);
      v25 = 67240704;
      v26 = v8;
      v27 = 2050;
      v28 = v9;
      v29 = 2050;
      v30 = v10;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#CLProactiveLoc,active,%{public}d,updateAPSleepStats,sleep,%{public}0.2f,wake,%{public}0.2f", &v25, 28);
      v13 = v12;
      sub_100512490("Generic", 1, 0, 0, "void CLProactiveLocation::updateAPSleepStats()", "%s\n", v11);
LABEL_24:
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_100E5FDF4(unsigned __int8 *a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v6;
  BOOL v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[2];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if ((*a2 - 1) <= 1)
  {
    v6 = *a3 - 1;
    a1[74] = v6 < 2;
    if (a1[75])
      v7 = v6 >= 2;
    else
      v7 = 0;
    if (v7)
    {
      a1[75] = 0;
      sub_100E5C668((uint64_t)a1);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v9 = a1[72];
      v10 = a1[74];
      v11 = a1[75];
      *(_DWORD *)buf = 67240704;
      v23 = v9;
      v24 = 1026;
      v25 = v10;
      v26 = 1026;
      v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,feedMotionNotification,static,%{public}d,staticCheckpoint,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v12 = a1[72];
      v13 = a1[74];
      v14 = a1[75];
      v17[0] = 67240704;
      v17[1] = v12;
      v18 = 1026;
      v19 = v13;
      v20 = 1026;
      v21 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLProactiveLoc,active,%{public}d,feedMotionNotification,static,%{public}d,staticCheckpoint,%{public}d", v17, 20);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    sub_1012EB004((uint64_t)(a1 + 352), (uint64_t)a2, a3);
  }
}

void sub_100E6003C(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 67240448;
    v14 = v5;
    v15 = 1026;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,feedLocationServicesEnablementStatus,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v7 = *(unsigned __int8 *)(a1 + 72);
    v10[0] = 67240448;
    v10[1] = v7;
    v11 = 1026;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,feedLocationServicesEnablementStatus,%{public}d", v10, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedLocationServicesEnablementStatus(const BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v6 = *(unsigned __int8 *)(a1 + 77);
  *(_BYTE *)(a1 + 77) = a2 ^ 1;
  if (v6 && a2)
  {
    sub_100E5C668(a1);
  }
  else if (!v6 && (a2 & 1) == 0)
  {
    sub_100E5C0B4(a1, 5);
    sub_100E5C45C(a1, 1.79769313e308);
  }
}

void sub_100E6024C(uint64_t a1, int *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  int v18;
  int v19;
  const char *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  int v40;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218C850);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 72);
    v8 = *a2;
    *(_DWORD *)buf = 67240448;
    v38 = v7;
    v39 = 1026;
    v40 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,feedMobileAssetNotification,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218C850);
    v21 = *(unsigned __int8 *)(a1 + 72);
    v22 = *a2;
    LODWORD(v34) = 67240448;
    HIDWORD(v34) = v21;
    v35 = 1026;
    v36 = v22;
    LODWORD(v29) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,feedMobileAssetNotification,%{public}d", &v34, v29);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  if (*a2 == 2)
  {
    sub_100119F3C(&v34);
    if (sub_100006BB4(a3, "ProactiveGnssAllowedAsset_v2", &v34))
    {
      HIBYTE(v29) = 0;
      if ((sub_1001E4874((uint64_t)&v34, "ProactiveGnssEnable", (BOOL *)&v29 + 7) & 1) != 0)
      {
        *(_BYTE *)(a1 + 78) = HIBYTE(v29) ^ 1;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10218C850);
        v9 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(unsigned __int8 *)(a1 + 72);
          v11 = *(unsigned __int8 *)(a1 + 78);
          *(_DWORD *)buf = 67240448;
          v38 = v10;
          v39 = 1026;
          v40 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveLocationDisabled,%{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10218C850);
          v25 = *(unsigned __int8 *)(a1 + 72);
          v26 = *(unsigned __int8 *)(a1 + 78);
          v30 = 67240448;
          v31 = v25;
          v32 = 1026;
          v33 = v26;
          LODWORD(v29) = 14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveLocationDisabled,%{public}d", &v30, v29);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        if (*(_BYTE *)(a1 + 78))
        {
          sub_100E5C0B4(a1, 6);
          sub_100E5C45C(a1, 1.79769313e308);
        }
        else
        {
          sub_100E5C668(a1);
        }
LABEL_35:
        sub_10011A5A8(&v34);
        return;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v17 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(unsigned __int8 *)(a1 + 72);
        *(_DWORD *)buf = 67240192;
        v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveGnssEnable,no config", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v19 = *(unsigned __int8 *)(a1 + 72);
      v30 = 67240192;
      v31 = v19;
      LODWORD(v29) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveGnssEnable,no config", &v30, v29);
      v16 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v20);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v12 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(unsigned __int8 *)(a1 + 72);
        *(_DWORD *)buf = 67240192;
        v38 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveGnssAllowedAsset_v2 not available", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218C850);
      v14 = *(unsigned __int8 *)(a1 + 72);
      v30 = 67240192;
      v31 = v14;
      LODWORD(v29) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveGnssAllowedAsset_v2 not available", &v30, v29);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveLocation::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v15);
    }
    if (v16 != buf)
      free(v16);
    goto LABEL_35;
  }
}

void sub_100E608A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100E608D4(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 168);
  v3 = *(_QWORD *)(a1 + 176);
  v1 = (double *)(a1 + 168);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  v4 = sub_100B303DC();
  v5 = 1;
  *(v1 - 1) = sub_100B30608(v4, &v5);
  *(_QWORD *)v1 = v2;
  *((_QWORD *)v1 + 1) = v3;
}

void sub_100E6093C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  sub_1012EB34C(a1 + 352, a2, a3);
}

void sub_100E60944(uint64_t a1, uint64_t *a2, double a3, __n128 a4)
{
  sub_1012EB9B8(a1 + 352, a2, a3, a4);
}

void sub_100E6094C(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E60978(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100E609A8()
{
  operator delete();
}

_QWORD *sub_100E609BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10218C8A0;
  result[1] = v3;
  return result;
}

uint64_t sub_100E609F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10218C8A0;
  a2[1] = v2;
  return result;
}

void sub_100E60A0C(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v3 + 344) = v2;
  if (v2)
    sub_100E5C668(v3);
}

uint64_t sub_100E60A24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E60A60()
{
}

void sub_100E60A70()
{
  operator delete();
}

_QWORD *sub_100E60A84(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10218C920;
  result[1] = v3;
  return result;
}

uint64_t sub_100E60AB8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10218C920;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E60AD4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 632);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t sub_100E60AF0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E60B2C()
{
}

uint64_t sub_100E60B38(uint64_t a1)
{
  int v8;
  int v9;

  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v9 = 0;
  sub_100E60E54((_QWORD *)(a1 + 32), 1uLL, &v9);
  v8 = 0;
  sub_100E60E54((_QWORD *)(a1 + 56), 1uLL, &v8);
  *(_DWORD *)(a1 + 80) = 1082130432;
  return a1;
}

void sub_100E60BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100E60BCC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

double sub_100E60C10(uint64_t a1, double *a2, _DWORD *a3, double a4)
{
  double v8;
  dispatch_once_t *v9;
  uint64_t v10;
  double v11;
  float v12;
  double v13;
  double v14;
  _QWORD *v15;
  float v16;
  float *v17;
  double v18;
  float v19;
  float v20;
  double v21;
  float *v22;
  double v23;
  float v24;
  int v25;
  double v26;
  uint64_t v28;
  void *__p[3];
  _QWORD block[6];

  v8 = *a2;
  v10 = *(_QWORD *)(a1 + 24);
  v9 = (dispatch_once_t *)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100E60E44;
  block[3] = &unk_10218C990;
  block[4] = a1;
  *(double *)&block[5] = a4;
  if (v10 != -1)
    dispatch_once(v9, block);
  if ((*a3 - 1) < 2 || *a3 == 3 && !a3[1])
  {
    v11 = a4 - *(double *)(a1 + 8);
    v12 = 1.0;
    if (v11 > 3.0)
    {
      v12 = exp((v11 + -3.0) * -0.5);
      if (v12 < 0.1)
        v12 = 0.1;
    }
  }
  else
  {
    *(double *)(a1 + 8) = a4;
    v12 = 1.0;
  }
  v13 = a4 - *(double *)a1;
  v28 = 0;
  sub_10025E5E0(__p, 1uLL, &v28);
  *(double *)a1 = a4;
  if (v13 <= 10.0)
  {
    v18 = *a2;
    v19 = *a2;
    *(float *)(a1 + 80) = v19;
    v17 = *(float **)(a1 + 32);
    v20 = *v17;
    v21 = (float)(*v17 / (float)(*v17 + v19));
    v22 = *(float **)(a1 + 56);
    v14 = *v22 + v21 * (v18 - *v22);
    v15 = __p[0];
    *(double *)__p[0] = v14;
    v23 = v20 - v21 * v20;
    v24 = v14;
    *v22 = v24;
    v16 = v23 + v13 * v13 * 0.349999994 * 0.5 * v12;
  }
  else
  {
    *(double *)(a1 + 8) = a4;
    **(_DWORD **)(a1 + 32) = 1092616192;
    v14 = *a2;
    v15 = __p[0];
    *(double *)__p[0] = *a2;
    v16 = v14;
    v17 = *(float **)(a1 + 56);
  }
  *v17 = v16;
  if (v14 - *a2 <= 25.0)
  {
    *(_DWORD *)(a1 + 16) = 0;
    v8 = v14;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v25 + 1;
    if (v25 >= 3)
    {
      *(double *)(a1 + 8) = a4;
      **(_DWORD **)(a1 + 32) = 1092616192;
      v26 = *a2;
      *v15 = *(_QWORD *)a2;
      *(float *)&v26 = v26;
      **(_DWORD **)(a1 + 56) = LODWORD(v26);
    }
  }
  __p[1] = v15;
  operator delete(v15);
  return v8;
}

double sub_100E60E44(uint64_t a1)
{
  double result;

  result = *(double *)(a1 + 40);
  *(double *)(*(_QWORD *)(a1 + 32) + 8) = result;
  return result;
}

_QWORD *sub_100E60E54(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1002720D4(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100E60EB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E60ED4(uint64_t a1, uint64_t a2)
{
  void *__p;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_1006D5808((_QWORD *)(a1 + 16));
  sub_1015A2E04(&__p, "OutdoorService");
  sub_100AABE0C((void *)(a1 + 2504));
  if (v5 < 0)
    operator delete(__p);
  sub_100FF71C0(a1 + 2544, a1 + 2504);
  *(_OWORD *)(a1 + 6344) = 0u;
  sub_101363538(a1 + 6368, a1 + 2504);
  *(_OWORD *)(a1 + 8976) = 0u;
  *(_OWORD *)(a1 + 8960) = 0u;
  *(_OWORD *)(a1 + 8944) = 0u;
  return a1;
}

void sub_100E60F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v23;

  v21 = v18;
  v23 = (_QWORD *)*v21;
  *v21 = 0;
  if (v23)
    sub_100E62D30((uint64_t)v21, v23);
  sub_10192F430(v20, v19);
  if (*(char *)(v16 + 2527) < 0)
    operator delete(*v17);
  sub_1006D7440(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100E61008(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_10127ADA4(a1 + 3520);
  v2 = *(void **)(a1 + 3160);
  if (v2)
  {
    *(_QWORD *)(a1 + 3168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 3088);
  if (v3)
  {
    *(_QWORD *)(a1 + 3096) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 3087) < 0)
    operator delete(*(void **)(a1 + 3064));
  sub_1005938E4(a1 + 2960);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100E6107C(_BYTE *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10218C9B0);
  v2 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pausing for historical events from AOP to be processed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218C9B0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "Pausing for historical events from AOP to be processed", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorManager::pause()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *a1 = 1;
}

void sub_100E61214(_BYTE *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10218C9B0);
  v2 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Resuming after historical events from AOP have been processed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218C9B0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "Resuming after historical events from AOP have been processed", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorManager::resume()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *a1 = 0;
}

void sub_100E613A8(uint64_t a1, __int128 *a2)
{
  sub_1006C95A0(a1 + 1112, a2);
}

void sub_100E613B0(uint64_t a1, uint64_t a2)
{
  sub_100E613B8(a1 + 2080, a2);
}

void sub_100E613B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  double v7;
  void **v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  __int128 v22;
  uint64_t v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  double v34;

  v25 = 0;
  v26 = 0;
  v22 = *(_OWORD *)a2;
  v23 = *(_QWORD *)(a2 + 16);
  __p = 0;
  if (&v22 != (__int128 *)a2)
    sub_100AAEFA8((char *)&__p, *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2));
  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 48))(v3, &v22);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(void ***)(a1 + 24);
    v7 = *((double *)v6[(v4 + v5 - 1) / 0x55] + 6 * ((v4 + v5 - 1) % 0x55));
    if (v7 > *(double *)&v22)
    {
      v8 = *(void ***)(a1 + 32);
      if (v8 == v6)
      {
        v8 = *(void ***)(a1 + 24);
      }
      else
      {
        v9 = &v6[v5 / 0x55];
        v10 = (unint64_t)*v9;
        v11 = (unint64_t)*v9 + 48 * (v5 % 0x55);
        v12 = (unint64_t)v6[(v5 + v4) / 0x55] + 48 * ((v5 + v4) % 0x55);
        if (v11 != v12)
        {
          do
          {
            v13 = *(void **)(v11 + 24);
            if (v13)
            {
              *(_QWORD *)(v11 + 32) = v13;
              operator delete(v13);
              v10 = (unint64_t)*v9;
            }
            v11 += 48;
            if (v11 - v10 == 4080)
            {
              v14 = (unint64_t)v9[1];
              ++v9;
              v10 = v14;
              v11 = v14;
            }
          }
          while (v11 != v12);
          v6 = *(void ***)(a1 + 24);
          v8 = *(void ***)(a1 + 32);
        }
      }
      *(_QWORD *)(a1 + 56) = 0;
      v15 = (char *)v8 - (char *)v6;
      if ((unint64_t)((char *)v8 - (char *)v6) >= 0x11)
      {
        do
        {
          operator delete(*v6);
          v16 = *(_QWORD *)(a1 + 32);
          v6 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v6;
          v15 = v16 - (_QWORD)v6;
        }
        while (v15 > 0x10);
      }
      if (v15 >> 3 == 1)
      {
        v17 = 42;
      }
      else
      {
        if (v15 >> 3 != 2)
        {
LABEL_23:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218C9D0);
          v18 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v32 = v22;
            v33 = 2048;
            v34 = v7;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10218C9D0);
            v27 = 134218240;
            v28 = v22;
            v29 = 2048;
            v30 = v7;
            LODWORD(v21) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v27), v21);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorGnssLeechLocation>::add(const T &) [T = CLOutdoorGnssLeechLocation]", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
          goto LABEL_28;
        }
        v17 = 85;
      }
      *(_QWORD *)(a1 + 48) = v17;
      goto LABEL_23;
    }
  }
LABEL_28:
  sub_100E62630((_QWORD *)(a1 + 16), &v22);
  *(_OWORD *)(a1 + 96) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  if ((__int128 *)(a1 + 96) != &v22)
    sub_100AAEFA8((char *)(a1 + 120), (char *)__p, (uint64_t)v25, 0x6DB6DB6DB6DB6DB7 * ((v25 - (_BYTE *)__p) >> 2));
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_100E61784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E617A8(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10218C9B0);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v6 = a2[1];
    *(_DWORD *)buf = 67109376;
    v15 = v5;
    v16 = 1024;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SignalEnvironment, type, %d, fidelityLevel, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218C9B0);
    v7 = *a2;
    v8 = a2[1];
    v11[0] = 67109376;
    v11[1] = v7;
    v12 = 1024;
    v13 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "SignalEnvironment, type, %d, fidelityLevel, %d", v11, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorManager::feedSignalEnvironment(const CLOutdoorSignalEnvironment &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_100FF72F4(a1 + 2544, a2);
}

double sub_100E61980(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10218C9B0);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    v8 = a2[3];
    v9 = a2[14];
    v10 = a2[15];
    *(_DWORD *)buf = 134219264;
    v34 = v5;
    v35 = 2048;
    v36 = v6;
    v37 = 2048;
    v38 = v7;
    v39 = 2048;
    v40 = v8;
    v41 = 2048;
    v42 = v9;
    v43 = 2048;
    v44 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WorkoutEvent, startTime, %f, endTime, %f, eventType, %ld, eventTime, %f, workoutType, %ld, workoutLocationType, %ld", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218C9B0);
    v12 = *a2;
    v13 = a2[1];
    v14 = a2[2];
    v15 = a2[3];
    v16 = a2[14];
    v17 = a2[15];
    v21 = 134219264;
    v22 = v12;
    v23 = 2048;
    v24 = v13;
    v25 = 2048;
    v26 = v14;
    v27 = 2048;
    v28 = v15;
    v29 = 2048;
    v30 = v16;
    v31 = 2048;
    v32 = v17;
    LODWORD(v20) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "WorkoutEvent, startTime, %f, endTime, %f, eventType, %ld, eventTime, %f, workoutType, %ld, workoutLocationType, %ld", COERCE_DOUBLE(&v21), v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorManager::feedWorkoutEvent(const CLOutdoorWorkoutEvent &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return sub_10136366C(a1 + 6368, (uint64_t)a2);
}

void sub_100E61BAC(uint64_t a1, int a2)
{
  _BYTE *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  int v14;
  uint8_t buf[4];
  int v16;

  v3 = (_BYTE *)(a1 + 6360);
  if (*(unsigned __int8 *)(a1 + 6360) == a2)
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218C9B0);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HK Privacy toggle unchanged, shouldWriteDaylightTime, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_10218C9B0);
      v13 = 67109120;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "HK Privacy toggle unchanged, shouldWriteDaylightTime, %d", &v13);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorManager::setShouldWriteDaylightTimeToHealthKit(BOOL)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218C9B0);
    v8 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HK privacy toggle changed, shouldWriteDaylightTime, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_10218C9B0);
      v13 = 67109120;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 0, "HK privacy toggle changed, shouldWriteDaylightTime, %d", &v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorManager::setShouldWriteDaylightTimeToHealthKit(BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *v3 = a2;
    if (a2)
      operator new();
    v9 = *(_QWORD **)(a1 + 6352);
    *(_QWORD *)(a1 + 6352) = 0;
    if (v9)
      sub_100E62D30(a1 + 6352, v9);
    v10 = *(_QWORD *)(a1 + 6344);
    *(_QWORD *)(a1 + 6344) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

void sub_100E61F68()
{
  operator delete();
}

void sub_100E61FB0(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void sub_100E61FDC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100E62008(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E622D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100E6231C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E625E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E62630(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  _QWORD *result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E62708(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  result = sub_100D03CC8((_QWORD *)(v8 + 24), *((const void **)a2 + 3), *((_QWORD *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2));
  ++a1[5];
  return result;
}

void sub_100E62708(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E629D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100E62A1C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E62CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100E62D30(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)a2[6];
    if (v3)
    {
      a2[7] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[3];
    if (v4)
    {
      a2[4] = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

void sub_100E62D88()
{
  operator new();
}

void sub_100E62DC8()
{
  operator delete();
}

uint64_t sub_100E62DF0(uint64_t a1)
{
  char v2;
  char v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  int v15;
  uint8_t buf[8];
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  int *v21;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_10055D44C(a1 + 24, "SqliteDatabaseManager", 1, 1);
  sub_1001E4804(buf);
  LOBYTE(v15) = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "_SqliteDatabaseUseSecureDelete", (BOOL *)&v15);
  if ((_BYTE)v15)
    v3 = v2;
  else
    v3 = 0;
  v4 = *(std::__shared_weak_count **)v17;
  if (*(_QWORD *)v17)
  {
    v5 = (unint64_t *)(*(_QWORD *)v17 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_BYTE *)(a1 + 40) = v3;
  sub_1001E4804(buf);
  v7 = *(unsigned __int8 *)(a1 + 40);
  LOBYTE(v15) = 0;
  if (sub_1001E4874(*(uint64_t *)buf, "_SqliteDatabaseUseIncrementalVacuum", (BOOL *)&v15))
    v8 = (_BYTE)v15 != 0;
  else
    v8 = v7 == 0;
  v9 = *(std::__shared_weak_count **)v17;
  if (*(_QWORD *)v17)
  {
    v10 = (unint64_t *)(*(_QWORD *)v17 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 41) = v8;
  v15 = sqlite3_config(13, 512, 125);
  if (v15)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10218CA10);
    v12 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      v18 = 1040;
      v19 = 4;
      v20 = 2098;
      v21 = &v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Can't set the sqlite lookaside buffers size to 64K\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
    }
    v13 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      v18 = 1040;
      v19 = 4;
      v20 = 2098;
      v21 = &v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Can't set the sqlite lookaside buffers size to 64K", "{\"msg%{public}.0s\":\"Can't set the sqlite lookaside buffers size to 64K\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
    }
  }
  return a1;
}

void sub_100E630D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10055D4D0(v2);
  sub_100E65204(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100E63114()
{
  JUMPOUT(0x100E63100);
}

void sub_100E6311C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10218CA10);
  v3 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289283;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2081;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"sqlite3_trace\", \"query\":%{private, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

void sub_100E63200(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const char *label;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;

  label = dispatch_queue_get_label(0);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10218CA10);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a1;
    v9 = a1 + 3;
    if (*((char *)a1 + 47) < 0)
      v9 = (_QWORD *)*v9;
    v10[0] = 68290307;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = v8;
    v15 = 2082;
    v16 = v9;
    v17 = 2081;
    v18 = a2;
    v19 = 2050;
    v20 = a3;
    v21 = 2082;
    v22 = label;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"sqlite3_profile\", \"db_ptr\":\"%{public}p\", \"db_name\":%{public, location:escape_only}s, \"query\":%{private, location:escape_only}s, \"elapsed_ns\":%{public}llu, \"queue\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x44u);
  }
}

uint64_t sub_100E63340(uint64_t a1, int *a2, const char *a3, sqlite3 **a4)
{
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  NSObject *v18;
  sqlite3 *v19;
  unsigned int v20;
  char v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  NSObject *v26;
  NSObject *v27;
  int v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  int v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  NSObject *v40;
  char v41;
  sqlite3 *v42;
  NSObject *v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  NSObject *v47;
  int v48;
  NSObject *v49;
  NSObject *v50;
  uint64_t result;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v57;
  int flags;
  int v59;
  void *v60[2];
  char v61;
  uint64_t v62;
  __int16 v63;
  __int128 __p;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint8_t v68[4];
  int v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  unsigned int *v77;
  uint8_t buf[8];
  __int16 v79;
  _BYTE v80[34];
  void **v81;
  void *v82;
  char v83;
  uint64_t v84;

  if (!sub_1000CDFB0(a1 + 24))
    sub_10192F470();
  if (*((_BYTE *)a2 + 8))
    v7 = 1;
  else
    v7 = 6;
  v8 = *a2;
  if (*a2 == 3)
  {
    v57 = 0;
    v13 = 3145728;
  }
  else if (v8 == 2)
  {
    v57 = 0;
    v13 = 0x200000;
  }
  else if (v8 == 1)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10218CA10);
    v9 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v10 = a3[23] >= 0 ? (uint64_t)a3 : *(_QWORD *)a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v79 = 2082;
      *(_QWORD *)v80 = "";
      *(_WORD *)&v80[8] = 2082;
      *(_QWORD *)&v80[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempted to open an encrypted database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
    }
    v11 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      if (a3[23] >= 0)
        v12 = a3;
      else
        v12 = *(const char **)a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v79 = 2082;
      *(_QWORD *)v80 = "";
      *(_WORD *)&v80[8] = 2082;
      *(_QWORD *)&v80[10] = v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempted to open an encrypted database", "{\"msg%{public}.0s\":\"Attempted to open an encrypted database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v57 = 0;
    v13 = 0x100000;
  }
  else
  {
    v57 = 1;
    v13 = 0x400000;
  }
  flags = v7 | v13 | 0x20000;
  v67 = 1;
  while (1)
  {
    if (a3[23] >= 0)
      v14 = a3;
    else
      v14 = *(const char **)a3;
    v67 = sqlite3_open_v2(v14, a4, flags, 0);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10218CA10);
    v15 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      if (a3[23] >= 0)
        v16 = a3;
      else
        v16 = *(const char **)a3;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v79 = 2082;
      *(_QWORD *)v80 = "";
      *(_WORD *)&v80[8] = 1040;
      *(_DWORD *)&v80[10] = 4;
      *(_WORD *)&v80[14] = 2098;
      *(_QWORD *)&v80[16] = &v67;
      *(_WORD *)&v80[24] = 2082;
      *(_QWORD *)&v80[26] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"openDatabase\", \"rc\":%{public, location:SqliteResult}.*P, \"path\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
    if (!v67)
    {
      if (*((_BYTE *)a2 + 8))
        goto LABEL_38;
      v19 = *a4;
      v62 = *(_QWORD *)a2;
      v63 = *((_WORD *)a2 + 4);
      if (*((char *)a2 + 39) < 0)
      {
        sub_100115CE4(&__p, *((void **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        __p = *((_OWORD *)a2 + 1);
        v65 = *((_QWORD *)a2 + 4);
      }
      v66 = *((_QWORD *)a2 + 5);
      sub_10063F794(v19, &v62, *(unsigned __int8 *)(a1 + 41));
      if (SHIBYTE(v65) < 0)
        operator delete((void *)__p);
      if (!v67)
      {
LABEL_38:
        v67 = sqlite3_exec(*a4, "pragma page_size = 4096;", 0, 0, 0);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_10218CA10);
        v17 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          v79 = 2082;
          *(_QWORD *)v80 = "";
          *(_WORD *)&v80[8] = 1040;
          *(_DWORD *)&v80[10] = 4;
          *(_WORD *)&v80[14] = 2098;
          *(_QWORD *)&v80[16] = &v67;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma page_size = 4096\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        }
        if (!v67 && !*((_BYTE *)a2 + 8))
        {
          v67 = sqlite3_exec(*a4, "pragma journal_mode=WAL;", 0, 0, 0);
          if (qword_1022A0280 != -1)
            dispatch_once(&qword_1022A0280, &stru_10218CA10);
          v18 = off_1022A0288;
          if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            v79 = 2082;
            *(_QWORD *)v80 = "";
            *(_WORD *)&v80[8] = 1040;
            *(_DWORD *)&v80[10] = 4;
            *(_WORD *)&v80[14] = 2098;
            *(_QWORD *)&v80[16] = &v67;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma journal_mode=WAL\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
          }
        }
      }
    }
    v20 = v67;
    v21 = v57;
    if (v67)
      v21 = 1;
    if ((v21 & 1) == 0)
    {
      sub_100263E50((uint64_t)buf);
      v22 = *(unsigned __int8 *)(a1 + 40);
      v23 = sub_100263F7C(&v80[6], (uint64_t)"pragma secure_delete = ", 23);
      v24 = (_QWORD *)std::ostream::operator<<(v23, v22 != 0);
      sub_100263F7C(v24, (uint64_t)";", 1);
      std::stringbuf::str(v60, &v80[14]);
      if (v61 >= 0)
        v25 = v60;
      else
        v25 = (void **)v60[0];
      v67 = sqlite3_exec(*a4, (const char *)v25, 0, 0, 0);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
      v26 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v68 = 68289794;
        v69 = 0;
        v70 = 2082;
        v71 = "";
        v72 = 1026;
        v73 = v22;
        v74 = 1040;
        v75 = 4;
        v76 = 2098;
        v77 = &v67;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma secure_delete\", \"useSecureDelete\":%{public}hhd, \"rc\":%{public, location:SqliteResult}.*P}", v68, 0x28u);
      }
      if (v61 < 0)
        operator delete(v60[0]);
      *(_QWORD *)buf = v55;
      *(_QWORD *)&buf[*(_QWORD *)(v55 - 24)] = v54;
      *(_QWORD *)&v80[6] = v53;
      if (v83 < 0)
        operator delete(v82);
      std::streambuf::~streambuf(&v80[14]);
      std::ios::~ios(&v84);
      v20 = v67;
    }
    if (!v20)
    {
      v42 = *a4;
      if (*((_BYTE *)a2 + 8))
      {
        v67 = sqlite3_exec(v42, "pragma cache_size = 5;", 0, 0, 0);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_10218CA10);
        v43 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          v79 = 2082;
          *(_QWORD *)v80 = "";
          *(_WORD *)&v80[8] = 1040;
          *(_DWORD *)&v80[10] = 4;
          *(_WORD *)&v80[14] = 2098;
          *(_QWORD *)&v80[16] = &v67;
          v44 = v43;
          v45 = "{\"msg%{public}.0s\":\"pragma cache_size = 5\", \"rc\":%{public, location:SqliteResult}.*P}";
LABEL_118:
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, v45, buf, 0x22u);
        }
      }
      else
      {
        v67 = sqlite3_exec(v42, "pragma cache_size = 50;", 0, 0, 0);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_10218CA10);
        v46 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          v79 = 2082;
          *(_QWORD *)v80 = "";
          *(_WORD *)&v80[8] = 1040;
          *(_DWORD *)&v80[10] = 4;
          *(_WORD *)&v80[14] = 2098;
          *(_QWORD *)&v80[16] = &v67;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma cache_size = 50\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        }
        if (v67)
        {
LABEL_124:
          v41 = 0;
          goto LABEL_125;
        }
        v67 = sqlite3_exec(*a4, "pragma cache_spill = 500;", 0, 0, 0);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_10218CA10);
        v52 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          v79 = 2082;
          *(_QWORD *)v80 = "";
          *(_WORD *)&v80[8] = 1040;
          *(_DWORD *)&v80[10] = 4;
          *(_WORD *)&v80[14] = 2098;
          *(_QWORD *)&v80[16] = &v67;
          v44 = v52;
          v45 = "{\"msg%{public}.0s\":\"pragma cache_spill = 500\", \"rc\":%{public, location:SqliteResult}.*P}";
          goto LABEL_118;
        }
      }
    }
    if (v67)
      goto LABEL_124;
    v67 = sqlite3_exec(*a4, "pragma recursive_triggers = true;", 0, 0, 0);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10218CA10);
    v27 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v79 = 2082;
      *(_QWORD *)v80 = "";
      *(_WORD *)&v80[8] = 1040;
      *(_DWORD *)&v80[10] = 4;
      *(_WORD *)&v80[14] = 2098;
      *(_QWORD *)&v80[16] = &v67;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma recursive_triggers = true\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
    }
    if (v67)
      goto LABEL_124;
    sqlite3_limit(*a4, 10, 10);
    v28 = sqlite3_limit(*a4, 10, -1);
    if (v28 != 10)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
      v29 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v79 = 2082;
        *(_QWORD *)v80 = "";
        *(_WORD *)&v80[8] = 1026;
        *(_DWORD *)&v80[10] = 10;
        *(_WORD *)&v80[14] = 1026;
        *(_DWORD *)&v80[16] = v28;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Trigger depth\", \"expected\":%{public}d, \"actual\":%{public}d}", buf, 0x1Eu);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_10218CA10);
      }
      v30 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v79 = 2082;
        *(_QWORD *)v80 = "";
        *(_WORD *)&v80[8] = 1026;
        *(_DWORD *)&v80[10] = 10;
        *(_WORD *)&v80[14] = 1026;
        *(_DWORD *)&v80[16] = v28;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Trigger depth", "{\"msg%{public}.0s\":\"Trigger depth\", \"expected\":%{public}d, \"actual\":%{public}d}", buf, 0x1Eu);
      }
    }
    if (v67)
      goto LABEL_124;
    v67 = sqlite3_extended_result_codes(*a4, 1);
    if (v67)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
      v31 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v79 = 2082;
        *(_QWORD *)v80 = "";
        *(_WORD *)&v80[8] = 1040;
        *(_DWORD *)&v80[10] = 4;
        *(_WORD *)&v80[14] = 2098;
        *(_QWORD *)&v80[16] = &v67;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to enable extended result codes\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_10218CA10);
      }
      v32 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v79 = 2082;
        *(_QWORD *)v80 = "";
        *(_WORD *)&v80[8] = 1040;
        *(_DWORD *)&v80[10] = 4;
        *(_WORD *)&v80[14] = 2098;
        *(_QWORD *)&v80[16] = &v67;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to enable extended result codes", "{\"msg%{public}.0s\":\"Failed to enable extended result codes\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      }
      if (v67)
        goto LABEL_124;
    }
    *(_DWORD *)v68 = -1;
    LODWORD(v60[0]) = 0;
    LODWORD(v60[0]) = sqlite3_file_control(*a4, "main", 4, v68);
    v33 = sqlite3_db_readonly(*a4, "main");
    if (*((_BYTE *)a2 + 8))
      break;
    v34 = v33;
    if (v33 < 1)
      break;
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10218CA10);
    v35 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v36 = *((unsigned __int8 *)a2 + 8);
      *(_DWORD *)buf = 68290306;
      *(_DWORD *)&buf[4] = 0;
      v79 = 2082;
      *(_QWORD *)v80 = "";
      *(_WORD *)&v80[8] = 1026;
      *(_DWORD *)&v80[10] = v36;
      *(_WORD *)&v80[14] = 1026;
      *(_DWORD *)&v80[16] = v34;
      *(_WORD *)&v80[20] = 1026;
      *(_DWORD *)&v80[22] = *(_DWORD *)v68;
      *(_WORD *)&v80[26] = 1040;
      *(_DWORD *)&v80[28] = 4;
      *(_WORD *)&v80[32] = 2098;
      v81 = v60;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Database opened with read/write access was found to be read-only.\", \"properties.readOnly\":%{public}d, \"sqlite3_db_readonly\":%{public}d, \"last POSIX errNo\":%{public}d, \"File control rc\":%{public, location:SqliteResult}.*P}", buf, 0x34u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
    }
    v37 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v38 = *((unsigned __int8 *)a2 + 8);
      *(_DWORD *)buf = 68290306;
      *(_DWORD *)&buf[4] = 0;
      v79 = 2082;
      *(_QWORD *)v80 = "";
      *(_WORD *)&v80[8] = 1026;
      *(_DWORD *)&v80[10] = v38;
      *(_WORD *)&v80[14] = 1026;
      *(_DWORD *)&v80[16] = v34;
      *(_WORD *)&v80[20] = 1026;
      *(_DWORD *)&v80[22] = *(_DWORD *)v68;
      *(_WORD *)&v80[26] = 1040;
      *(_DWORD *)&v80[28] = 4;
      *(_WORD *)&v80[32] = 2098;
      v81 = v60;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Database opened with read/write access was found to be read-only.", "{\"msg%{public}.0s\":\"Database opened with read/write access was found to be read-only.\", \"properties.readOnly\":%{public}d, \"sqlite3_db_readonly\":%{public}d, \"last POSIX errNo\":%{public}d, \"File control rc\":%{public, location:SqliteResult}.*P}", buf, 0x34u);
    }
    v59 = 0;
    v59 = sqlite3_close(*a4);
    if (v59)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
      v39 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v79 = 2082;
        *(_QWORD *)v80 = "";
        *(_WORD *)&v80[8] = 1040;
        *(_DWORD *)&v80[10] = 4;
        *(_WORD *)&v80[14] = 2098;
        *(_QWORD *)&v80[16] = &v59;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to close partially opened database\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_10218CA10);
      }
      v40 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v79 = 2082;
        *(_QWORD *)v80 = "";
        *(_WORD *)&v80[8] = 1040;
        *(_DWORD *)&v80[10] = 4;
        *(_WORD *)&v80[14] = 2098;
        *(_QWORD *)&v80[16] = &v59;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to close partially opened database", "{\"msg%{public}.0s\":\"Failed to close partially opened database\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      }
    }
    *a4 = 0;
    sub_100E645C8();
    if (v67)
    {
      v41 = 1;
LABEL_125:
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
      v47 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
      {
        v48 = *__error();
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        v79 = 2082;
        *(_QWORD *)v80 = "";
        *(_WORD *)&v80[8] = 1026;
        *(_DWORD *)&v80[10] = v48;
        *(_WORD *)&v80[14] = 1040;
        *(_DWORD *)&v80[16] = 4;
        *(_WORD *)&v80[20] = 2098;
        *(_QWORD *)&v80[22] = &v67;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"failed to obtain database handle\", \"errno\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x28u);
      }
      *(_DWORD *)v68 = 0;
      *(_DWORD *)v68 = sqlite3_close(*a4);
      if (*(_DWORD *)v68)
      {
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_10218CA10);
        v49 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          v79 = 2082;
          *(_QWORD *)v80 = "";
          *(_WORD *)&v80[8] = 1040;
          *(_DWORD *)&v80[10] = 4;
          *(_WORD *)&v80[14] = 2098;
          *(_QWORD *)&v80[16] = v68;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to close partially opened database\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
          if (qword_1022A0280 != -1)
            dispatch_once(&qword_1022A0280, &stru_10218CA10);
        }
        v50 = off_1022A0288;
        if (os_signpost_enabled((os_log_t)off_1022A0288))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          v79 = 2082;
          *(_QWORD *)v80 = "";
          *(_WORD *)&v80[8] = 1040;
          *(_DWORD *)&v80[10] = 4;
          *(_WORD *)&v80[14] = 2098;
          *(_QWORD *)&v80[16] = v68;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to close partially opened database", "{\"msg%{public}.0s\":\"Failed to close partially opened database\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        }
      }
      *a4 = 0;
      result = v67;
      if (v67 == 10 || v67 == 13)
      {
        sub_100E645C8();
      }
      else if ((v41 & 1) == 0)
      {
        return result;
      }
    }
  }
  v41 = 0;
  if (v67)
    goto LABEL_125;
  return 0;
}

void sub_100E64578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E645C8()
{
  return sleep(5u);
}

uint64_t sub_100E645E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  __int128 __p;
  uint64_t v11;
  uint64_t v12;
  std::string v13;

  sub_100633AB4((gid_t *)a2, &v13);
  v8 = *(_QWORD *)a2;
  v9 = *(_WORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 32);
  }
  v12 = *(_QWORD *)(a2 + 40);
  v6 = sub_100E646D8(a1, &v8, (const void **)&v13.__r_.__value_.__l.__data_, a3);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v6;
}

void sub_100E646A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E646D8(uint64_t a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  __int128 v17;
  NSObject *v18;
  const void *v19;
  int v20;
  uint64_t v22;
  __int16 v23;
  __int128 __p;
  uint64_t v25;
  uint64_t v26;
  sqlite3 *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  std::string v32;
  uint64_t v33;
  pthread_mutex_t *v34;
  __int16 v35;
  uint8_t buf[8];
  _WORD v37[5];
  __int16 v38;
  const void *v39;
  __int16 v40;
  int v41;

  v8 = *(_QWORD *)(a1 + 24);
  v33 = a1 + 24;
  (*(void (**)(void))(v8 + 16))();
  v35 = 256;
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10218CA10);
  v9 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *a3;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v37[0] = 2082;
    *(_QWORD *)&v37[1] = "";
    v38 = 2082;
    v39 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Opening database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = sub_10019C4C0(a1, a3);
  v12 = a1 + 8;
  if (a1 + 8 != v11)
  {
    v13 = 0;
    goto LABEL_29;
  }
  memset(&v32, 0, sizeof(v32));
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v31 = 0;
  std::string::operator=(&v32, (const std::string *)a3);
  v27 = 0;
  v22 = *a2;
  v23 = *((_WORD *)a2 + 4);
  if (*((char *)a2 + 39) < 0)
  {
    sub_100115CE4(&__p, (void *)a2[2], a2[3]);
  }
  else
  {
    __p = *((_OWORD *)a2 + 1);
    v25 = a2[4];
  }
  v26 = a2[5];
  v14 = sub_100E63340(a1, (int *)&v22, (const char *)a3, &v27);
  v13 = v14;
  if (SHIBYTE(v25) < 0)
  {
    operator delete((void *)__p);
    if ((_DWORD)v13)
      goto LABEL_15;
LABEL_24:
    operator new();
  }
  if (!(_DWORD)v14)
    goto LABEL_24;
LABEL_15:
  if (v27)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10218CA10);
    v15 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v37[0] = 2082;
      *(_QWORD *)&v37[1] = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"openDatabase failed to open a connection and then to clean up after itself\"}", buf, 0x12u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
    }
    v16 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v37[0] = 2082;
      *(_QWORD *)&v37[1] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "openDatabase failed to open a connection and then to clean up after itself", "{\"msg%{public}.0s\":\"openDatabase failed to open a connection and then to clean up after itself\"}", buf, 0x12u);
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30) < 0)
    operator delete(v28);
LABEL_29:
  if (v11 != v12)
  {
    v17 = *(_OWORD *)(v11 + 56);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v11 + 72);
    *(_OWORD *)a4 = v17;
    std::string::operator=((std::string *)(a4 + 24), (const std::string *)(v11 + 80));
    ++*(_DWORD *)(v11 + 104);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10218CA10);
    v18 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a3 + 23) >= 0)
        v19 = a3;
      else
        v19 = *a3;
      v20 = *(_DWORD *)(v11 + 104);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v37[0] = 2082;
      *(_QWORD *)&v37[1] = "";
      v38 = 2082;
      v39 = v19;
      v40 = 1026;
      v41 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Reference count increased\", \"path\":%{public, location:escape_only}s, \"referenceCount\":%{public}d}", buf, 0x22u);
    }
  }
  if (HIBYTE(v35))
  {
    if ((_BYTE)v35)
      pthread_mutex_unlock(v34);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  }
  return v13;
}

void sub_100E64CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_100261F44((uint64_t)&a32);
  sub_100E64D90((uint64_t)&a18);
  sub_10187E514((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100E64D40(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100E64D90(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_100E64DD0(uint64_t a1, sqlite3 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  NSObject *v8;
  _QWORD *v9;
  int v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  int v22;

  v14 = a1 + 24;
  (*(void (**)(void))(*(_QWORD *)(a1 + 24) + 16))();
  v4 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    while ((sqlite3 *)v4[7] != a2)
    {
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (uint64_t *)(a1 + 8))
        goto LABEL_28;
    }
    --*((_DWORD *)v4 + 26);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10218CA10);
    v8 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      v9 = v4 + 14;
      if (*((char *)v4 + 135) < 0)
        v9 = (_QWORD *)*v9;
      v10 = *((_DWORD *)v4 + 26);
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = v9;
      v21 = 1026;
      v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Reference count decreased\", \"path\":%{public, location:escape_only}s, \"referenceCount\":%{public}d}", buf, 0x22u);
    }
    if (!*((_DWORD *)v4 + 26))
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10218CA10);
      v11 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
      {
        v12 = v4 + 14;
        if (*((char *)v4 + 135) < 0)
          v12 = (_QWORD *)*v12;
        *(_DWORD *)buf = 68289282;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        v19 = 2082;
        v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Destroying database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sqlite3_close(a2);
      v13 = v4[8];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v4[9])
        operator delete();
      sub_10008A9F0((uint64_t **)a1, v4);
      sub_100E6524C((uint64_t)(v4 + 4));
      operator delete(v4);
    }
  }
LABEL_28:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
}

void sub_100E65084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E650AC(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100E650D8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

char *sub_100E65104(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = *a3;
  *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(__dst + 24) = v6;
  if (*((char *)a3 + 47) < 0)
  {
    sub_100115CE4(__dst + 48, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)__dst + 8) = *((_QWORD *)a3 + 5);
    *((_OWORD *)__dst + 3) = v7;
  }
  *((_DWORD *)__dst + 18) = *((_DWORD *)a3 + 12);
  v8 = __dst + 80;
  if (*((char *)a3 + 79) < 0)
  {
    sub_100115CE4(v8, *((void **)a3 + 7), *((_QWORD *)a3 + 8));
  }
  else
  {
    v9 = *(__int128 *)((char *)a3 + 56);
    *((_QWORD *)__dst + 12) = *((_QWORD *)a3 + 9);
    *(_OWORD *)v8 = v9;
  }
  return __dst;
}

void sub_100E651D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100E65204(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100E65204(a1, *a2);
    sub_100E65204(a1, a2[1]);
    sub_100E6524C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100E6524C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *sub_100E652A0(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  __int128 v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)sub_10019C424((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x88uLL);
    v10[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *((_QWORD *)v6 + 12) = *(_QWORD *)(a3 + 64);
    v6[5] = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *((_DWORD *)v6 + 26) = *(_DWORD *)(a3 + 72);
    v8 = *(_OWORD *)(a3 + 80);
    *((_QWORD *)v6 + 16) = *(_QWORD *)(a3 + 96);
    v6[7] = v8;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    v11 = 1;
    sub_1000145B0(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    sub_100E653A0((uint64_t)v10, 0);
  }
  return v6;
}

void sub_100E653A0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100E6524C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_100E653E4(_QWORD *a1)
{
  *a1 = off_10218CA60;
  operator new();
}

void sub_100E65474()
{
  operator delete();
}

uint64_t sub_100E654CC(uint64_t a1, uint64_t a2)
{
  return sub_100E654D4(a2, a2);
}

uint64_t sub_100E654D4(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  BOOL v5;
  double v6;

  if (!*(_BYTE *)(a1 + 352))
    return CLMotionActivity::isTypeRunning(*(unsigned int *)(a1 + 152), a2);
  v2 = *(double *)(a1 + 448);
  v3 = fmax(((float)(*(float *)(a1 + 1360) * 39.37) + -59.0) * 0.0375 + 4.2, 4.2);
  v4 = 2.23693991 / v3;
  v5 = v3 <= 4.8;
  v6 = 0.466029147;
  if (v5)
    v6 = v4;
  return v6 > v2 && v2 > 0.0;
}

double sub_100E65558(double a1)
{
  float v1;
  double result;

  v1 = a1 * 39.3700981;
  result = fmax((v1 + -59.0) * 0.0375 + 4.2, 4.2);
  if (result > 4.8)
    return 4.8;
  return result;
}

_QWORD *sub_100E655A4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10218CA60;
  v2 = (uint64_t)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 3));
  sub_100261F44(v2);
  return a1;
}

void sub_100E655E4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_10218CA60;
  v1 = (uint64_t)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 3));
  sub_100261F44(v1);
  operator delete();
}

void sub_100E65634(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100E65660(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E656B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E656D8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100E656F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100E65730(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E65788(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E657A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100E657C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_100E65800(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = a2[1];
  *result = *a2;
  result[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a3[1];
  result[2] = *a3;
  result[3] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

BOOL sub_100E65844(_QWORD *a1)
{
  int v2;
  double v3;
  double Current;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  double v11;
  char *v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  void *__p;
  char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  int v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  double v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  double v43;

  v32 = 0;
  v33 = 0u;
  v35 = 0;
  v34 = 0u;
  v2 = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)*a1 + 32))(*a1, &v32);
  if (v2 != 109)
  {
    v3 = *(double *)&v33;
    Current = CFAbsoluteTimeGetCurrent();
    v29 = 0;
    v30 = 0;
    v31 = 0;
    __p = 0;
    v27 = 0;
    v28 = 0;
    v5 = (*(uint64_t (**)(_QWORD, void **, double, double))(*(_QWORD *)a1[2] + 24))(a1[2], &v29, v3 + 5.0, Current);
    if (v29 != v30)
    {
      sub_100E65E10(v5, (uint64_t *)&v29, (uint64_t)&__p);
      v6 = (char *)__p;
      if (__p == v27)
      {
LABEL_28:
        if (v6)
        {
          v27 = v6;
          operator delete(v6);
        }
        if (v29)
        {
          v30 = v29;
          operator delete(v29);
        }
        return v2 != 109;
      }
      if (Current - *((double *)v27 - 5) < 30.0)
      {
        v27 -= 48;
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10218CBD8);
        v7 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
        {
          v8 = *((_QWORD *)v27 - 5);
          *(_DWORD *)buf = 134349312;
          v41 = v8;
          v42 = 2050;
          v43 = Current;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsProcessor]: Skipping last entry since we may not yet have all gait metrics entries, startTime : %{public}f, now : %{public}f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10218CBD8);
          v22 = *((_QWORD *)v27 - 5);
          v36 = 134349312;
          v37 = v22;
          v38 = 2050;
          v39 = Current;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[SmoothedGaitMetricsProcessor]: Skipping last entry since we may not yet have all gait metrics entries, startTime : %{public}f, now : %{public}f", &v36, 22);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
      }
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10218CBD8);
      v9 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        v10 = *((_QWORD *)__p + 1);
        v11 = *((double *)v27 - 5);
        *(_DWORD *)buf = 134349312;
        v41 = v10;
        v42 = 2050;
        v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsProcessor]: Processed smoothed gait matrics, first entry startTime : %{public}f, last entry startTime : %{public}f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10218CBD8);
        v18 = *((_QWORD *)__p + 1);
        v19 = *((double *)v27 - 5);
        v36 = 134349312;
        v37 = v18;
        v38 = 2050;
        v39 = v19;
        LODWORD(v25) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[SmoothedGaitMetricsProcessor]: Processed smoothed gait matrics, first entry startTime : %{public}f, last entry startTime : %{public}f", &v36, v25);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v12 = (char *)__p;
      v13 = v27;
      while (v12 != v13)
      {
        (*(void (**)(_QWORD, char *))(*(_QWORD *)*a1 + 16))(*a1, v12);
        v12 += 48;
      }
    }
    v6 = (char *)__p;
    goto LABEL_28;
  }
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10218CBD8);
  v14 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[SmoothedGaitMetricsProcessor]: Could not access db", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10218CBD8);
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "[SmoothedGaitMetricsProcessor]: Could not access db", &v29, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return v2 != 109;
}

void sub_100E65DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100E65E10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float v8;
  float v9;
  unsigned int v10;
  double v11;
  double v12;
  float v13;
  float32x4_t v14;
  float v15;
  float v16;
  float32x4_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  NSObject *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  uint8_t *v38;
  float32x4_t v39;
  int v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  uint8_t buf[4];
  unint64_t v45;
  __int16 v46;
  unint64_t v47;

  v6 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v7 = 0uLL;
    v8 = 0.0;
    v9 = 0.0;
    do
    {
      v10 = 0;
      v11 = *(double *)(v6 + 8);
      v12 = v11 + 5.0;
      while (*(double *)(v6 + 8) < v12)
      {
        v13 = *(float *)(v6 + 48);
        v9 = v9 + v13;
        v14 = *(float32x4_t *)(v6 + 24);
        v8 = vmlas_n_f32(v8, v13, v14.f32[0]);
        v7 = vaddq_f32(v7, v14);
        ++v10;
        v6 += 96;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
      if (v10)
      {
        *(float *)&v12 = (float)v10;
        v15 = v9 / (float)v10;
        v16 = v8 / (float)v10;
        v17 = vdivq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v12, 0));
        v19 = *(_DWORD **)(a3 + 8);
        v18 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v19 >= v18)
        {
          v21 = *(_DWORD **)a3;
          v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *(_QWORD *)a3) >> 4);
          v23 = v22 + 1;
          if (v22 + 1 > 0x555555555555555)
            sub_100259694();
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v21) >> 4);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x2AAAAAAAAAAAAAALL)
            v25 = 0x555555555555555;
          else
            v25 = v23;
          if (v25)
          {
            v39 = v17;
            v26 = (char *)sub_100313718(a3 + 16, v25);
            v17 = v39;
            v27 = v26;
            v21 = *(_DWORD **)a3;
            v19 = *(_DWORD **)(a3 + 8);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[48 * v22];
          *(_DWORD *)v28 = 0;
          *((double *)v28 + 1) = v11;
          *((float32x4_t *)v28 + 1) = v17;
          *((float *)v28 + 8) = v16;
          *((float *)v28 + 9) = v15;
          *((_DWORD *)v28 + 10) = v10;
          v29 = v28;
          if (v19 != v21)
          {
            do
            {
              v30 = *((_OWORD *)v19 - 3);
              v31 = *((_OWORD *)v19 - 2);
              *(_OWORD *)(v29 - 20) = *(_OWORD *)(v19 - 5);
              *((_OWORD *)v29 - 3) = v30;
              *((_OWORD *)v29 - 2) = v31;
              v29 -= 48;
              v19 -= 12;
            }
            while (v19 != v21);
            v21 = *(_DWORD **)a3;
          }
          v20 = v28 + 48;
          *(_QWORD *)a3 = v29;
          *(_QWORD *)(a3 + 8) = v28 + 48;
          *(_QWORD *)(a3 + 16) = &v27[48 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v19 = 0;
          *((double *)v19 + 1) = v11;
          *((float32x4_t *)v19 + 1) = v17;
          *((float *)v19 + 8) = v16;
          *((float *)v19 + 9) = v15;
          v20 = v19 + 12;
          v19[10] = v10;
        }
        *(_QWORD *)(a3 + 8) = v20;
        v5 = a2[1];
        v7 = 0uLL;
        v9 = 0.0;
        v8 = 0.0;
      }
    }
    while (v6 != v5);
  }
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10218CBD8);
  v32 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    v33 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    *(_DWORD *)buf = 134349312;
    v45 = v33;
    v46 = 2050;
    v47 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsProcessor]: Processed %{public}ld gait metrics entries, resulting in %{public}ld smoothed gait metrics entries", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10218CBD8);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v40 = 134349312;
    v41 = v35;
    v42 = 2050;
    v43 = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[SmoothedGaitMetricsProcessor]: Processed %{public}ld gait metrics entries, resulting in %{public}ld smoothed gait metrics entries", &v40, 22);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::SmoothedGaitMetricsProcessor::calculateSmoothedGaitMetrics(const std::vector<GaitMetrics> &, std::vector<SmoothedGaitMetrics> &)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
}

void sub_100E661E8(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100E66214(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  float64x2_t v11;
  NSObject *v12;
  int v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  float64_t v17;
  float64_t v18;
  float64_t v19;
  float64_t v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  float64_t v25;
  float64_t v26;
  float64_t v27;
  float64_t v28;
  float64_t v29;
  float64_t v30;
  float64_t v31;
  float64_t v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  float64_t v38;
  float64_t v39;
  float64_t v40;
  float64_t v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  int v47;
  float64_t v48;
  __int16 v49;
  float64_t v50;
  __int16 v51;
  float64_t v52;
  __int16 v53;
  float64_t v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  uint8_t buf[4];
  float64_t v62;
  __int16 v63;
  float64_t v64;
  __int16 v65;
  float64_t v66;
  __int16 v67;
  float64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  v11 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a2, v11), (int32x4_t)vceqq_f64(a2[1], v11)))) & 1) != 0)
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218CC18);
    v12 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Rejection: SteadinessModelGaitBaseline missing required feature inputs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_10218CC18);
      LOWORD(v47) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "Rejection: SteadinessModelGaitBaseline missing required feature inputs", &v47, 2);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const SteadinessModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    *(_DWORD *)(a5 + 48) = 8;
    v13 = 12;
  }
  else
  {
    v13 = 4;
  }
  if (!*(_BYTE *)(a4 + 57))
    *(_DWORD *)(a5 + 48) = v13;
  sub_100725800(a1, a5, a3);
  v14 = sub_1009FF93C(a2);
  *(double *)(a5 + 24) = v14;
  *(double *)(a5 + 32) = sub_1009FF9BC(v14);
  *(_QWORD *)(a5 + 40) = v15;
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218CC18);
  v16 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(double *)(a5 + 32);
    v18 = *(double *)(a5 + 40);
    v19 = *(double *)(a5 + 16);
    v20 = *(double *)(a5 + 24);
    v21 = *(_DWORD *)(a5 + 48);
    v22 = *(_DWORD *)(a5 + 8);
    v23 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)buf = 134350593;
    v62 = v19;
    v63 = 2050;
    v64 = v17;
    v65 = 2050;
    v66 = v18;
    v67 = 2050;
    v68 = v20;
    v69 = 1026;
    v70 = v21;
    v71 = 1025;
    v72 = v22;
    v73 = 1025;
    v74 = v23;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelGaitBaseline::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{public}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218CC18);
    v29 = *(double *)(a5 + 32);
    v30 = *(double *)(a5 + 40);
    v31 = *(double *)(a5 + 16);
    v32 = *(double *)(a5 + 24);
    v33 = *(_DWORD *)(a5 + 48);
    v34 = *(_DWORD *)(a5 + 8);
    v35 = *(_DWORD *)(a5 + 12);
    v47 = 134350593;
    v48 = v31;
    v49 = 2050;
    v50 = v29;
    v51 = 2050;
    v52 = v30;
    v53 = 2050;
    v54 = v32;
    v55 = 1026;
    v56 = v33;
    v57 = 1025;
    v58 = v34;
    v59 = 1025;
    v60 = v35;
    LODWORD(v46) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelGaitBaseline::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{public}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", &v47, v46);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const SteadinessModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218CC18);
  v24 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v26 = a2[1].f64[0];
    v25 = a2[1].f64[1];
    v28 = a2->f64[0];
    v27 = a2->f64[1];
    *(_DWORD *)buf = 134284289;
    v62 = v25;
    v63 = 2049;
    v64 = v27;
    v65 = 2049;
    v66 = v26;
    v67 = 2049;
    v68 = v28;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelGaitBaseline::Features,balancePrior,%{private}.3f,intermediateBoutsStepLengthQ95Heightnorm,%{private}.3f,intermediateBoutsWalkingSpeedQ95Sqrtheightnorm,%{private}.3f,height,%{private}.2f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218CC18);
    v39 = a2[1].f64[0];
    v38 = a2[1].f64[1];
    v41 = a2->f64[0];
    v40 = a2->f64[1];
    v47 = 134284289;
    v48 = v38;
    v49 = 2049;
    v50 = v40;
    v51 = 2049;
    v52 = v39;
    v53 = 2049;
    v54 = v41;
    LODWORD(v46) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelGaitBaseline::Features,balancePrior,%{private}.3f,intermediateBoutsStepLengthQ95Heightnorm,%{private}.3f,intermediateBoutsWalkingSpeedQ95Sqrtheightnorm,%{private}.3f,height,%{private}.2f", &v47, v46);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const SteadinessModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
}

double sub_100E667A4(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double *v11;
  double *v12;
  double v13;
  int v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  float v39;
  const char *v41;
  char *v42;
  void *v43;
  char *v44;
  char *v45;
  void *__p;
  char *v47;
  char *v48;
  void *v49;
  double *v50;
  uint64_t v51;
  int v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  _BYTE buf[12];
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  v6 = *a3;
  v7 = a3[1];
  *(_QWORD *)buf = &v49;
  if (v6 == v7)
  {
    __p = 0;
    v47 = 0;
    v48 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v8 = a1 + -2419200.0;
    do
    {
      v9 = *(double *)(v6 + 8);
      if (v9 < a1 && v9 >= v8)
        sub_1007264EC((void ***)buf, (_OWORD *)v6);
      v6 += 224;
    }
    while (v6 != v7);
    v11 = (double *)v49;
    v12 = v50;
    __p = 0;
    v47 = 0;
    v48 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    if (v49 != v50)
    {
      do
      {
        v13 = v11[2] - v11[1];
        if (v13 <= 600.0 && v13 > 60.0)
        {
          v15 = *((_DWORD *)v11 + 13);
          if (v15)
            v16 = 42;
          else
            v16 = -1;
          if ((v16 & (_DWORD)v11[24]) == 0)
          {
            v17 = v47;
            if (v47 >= v48)
            {
              v19 = (char *)__p;
              v20 = (v47 - (_BYTE *)__p) >> 3;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 61)
                goto LABEL_75;
              v22 = v48 - (_BYTE *)__p;
              if ((v48 - (_BYTE *)__p) >> 2 > v21)
                v21 = v22 >> 2;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
                v23 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23)
              {
                v24 = (char *)sub_10025E6A0((uint64_t)&v48, v23);
                v19 = (char *)__p;
                v17 = v47;
              }
              else
              {
                v24 = 0;
              }
              v25 = &v24[8 * v20];
              *(double *)v25 = v11[14];
              v18 = v25 + 8;
              while (v17 != v19)
              {
                v26 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v25 - 1) = v26;
                v25 -= 8;
              }
              __p = v25;
              v47 = v18;
              v48 = &v24[8 * v23];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *(double *)v47 = v11[14];
              v18 = v17 + 8;
            }
            v47 = v18;
            v15 = *((_DWORD *)v11 + 13);
          }
          if (v15)
            v27 = 42;
          else
            v27 = -1;
          if ((v27 & (_DWORD)v11[25]) == 0)
          {
            v28 = v44;
            if (v44 >= v45)
            {
              v30 = (char *)v43;
              v31 = (v44 - (_BYTE *)v43) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
LABEL_75:
                sub_100259694();
              v33 = v45 - (_BYTE *)v43;
              if ((v45 - (_BYTE *)v43) >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)sub_10025E6A0((uint64_t)&v45, v34);
                v30 = (char *)v43;
                v28 = v44;
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[8 * v31];
              *(double *)v36 = v11[16];
              v29 = v36 + 8;
              while (v28 != v30)
              {
                v37 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v36 - 1) = v37;
                v36 -= 8;
              }
              v43 = v36;
              v44 = v29;
              v45 = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(double *)v44 = v11[16];
              v29 = v28 + 8;
            }
            v44 = v29;
          }
        }
        v11 += 28;
      }
      while (v11 != v12);
    }
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218CC18);
  v38 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = a1;
    v61 = 2050;
    v62 = 0x6DB6DB6DB6DB6DB7 * (((char *)v50 - (_BYTE *)v49) >> 5);
    v63 = 2050;
    v64 = (v47 - (_BYTE *)__p) >> 3;
    v65 = 2050;
    v66 = (v44 - (_BYTE *)v43) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "SteadinessModelGaitBaseline::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermediateWalkingSpeeds,%{public}lu,numIntermediateStepLengths,%{public}lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218CC18);
    v52 = 134349824;
    v53 = a1;
    v54 = 2050;
    v55 = 0x6DB6DB6DB6DB6DB7 * (((char *)v50 - (_BYTE *)v49) >> 5);
    v56 = 2050;
    v57 = (v47 - (_BYTE *)__p) >> 3;
    v58 = 2050;
    v59 = (v44 - (_BYTE *)v43) >> 3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "SteadinessModelGaitBaseline::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermediateWalkingSpeeds,%{public}lu,numIntermediateStepLengths,%{public}lu", &v52, 42);
    v42 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelGaitBaseline::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &, const CLBodyMetrics &, double) const", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  sub_1011A3088((uint64_t)&v43, 95);
  sub_1011A3088((uint64_t)&__p, 95);
  v39 = *(float *)(a4 + 8);
  if (v43)
  {
    v44 = (char *)v43;
    operator delete(v43);
  }
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
  if (v49)
  {
    v50 = (double *)v49;
    operator delete(v49);
  }
  return v39;
}

void sub_100E66D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_100E66D50(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100E66E20(id a1)
{
  qword_102308C30 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLOutdoorServiceSilo"));
}

void sub_100E66F60(id a1)
{
  sub_100197040();
  if (sub_100195F08() && (sub_1001B7910() & 0x400000000000000) != 0
    || (sub_100197040(), sub_1000C4240()))
  {
    if (sub_100C1DCF8())
      byte_102308C40 = 1;
  }
}

void sub_100E6732C()
{
  operator delete();
}

id sub_100E6736C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onDaemonStatusNotification:data:", a2, a3);
}

id sub_100E6737C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onFitnessTrackingNotification:data:", a2, a3);
}

void sub_100E6738C(id a1, BPSCompletion *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  const char *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (-[BPSCompletion state](a2, "state"))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218CD38);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v12 = objc_msgSend(objc_msgSend(-[BPSCompletion error](a2, "error"), "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registering for Biome stream UserFocus.SleepMode with error: %s\n", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218CD38);
    v4 = qword_10229FC78;
    v9 = 136315138;
    v10 = objc_msgSend(objc_msgSend(-[BPSCompletion error](a2, "error"), "description"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 1, "Registering for Biome stream UserFocus.SleepMode with error: %s\n", (const char *)&v9);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLOutdoorService beginService]_block_invoke", "%s\n", v5);
    if (v6 == buf)
      return;
LABEL_20:
    free(v6);
    return;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10218CD38);
  v7 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Registering for Biome stream UserFocus.SleepMode", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218CD38);
    LOWORD(v9) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for Biome stream UserFocus.SleepMode", &v9, 2);
    v6 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLOutdoorService beginService]_block_invoke", "%s\n", v8);
    if (v6 != buf)
      goto LABEL_20;
  }
}

id sub_100E67680(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onBiomeUserFocusSleepModeEvent:", objc_msgSend(a2, "eventBody"));
}

uint64_t *sub_100E67820(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100883C64(result);
    operator delete();
  }
  return result;
}

void sub_100E678C0()
{
  operator delete();
}

uint64_t sub_100E678E4()
{
  const __CFString *v0;
  const __CFString *v1;
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  int Value;
  _BOOL8 v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  _BOOL4 v15;

  if (qword_102308C50 != -1)
    dispatch_once(&qword_102308C50, &stru_10218CD78);
  if (!qword_102308C58 || !off_1022FBE60[0]() || !off_1022FBE68())
    return 1;
  v0 = (const __CFString *)off_1022FBE68();
  v1 = (const __CFString *)off_1022FBE60[0]();
  v2 = (const __CFBoolean *)CFPreferencesCopyValue(v0, v1, CFSTR("mobile"), kCFPreferencesAnyHost);
  if (!v2)
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218CD58);
    v7 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Daylight time using default", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_10218CD58);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 0, "Daylight time using default", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL getHKPrivacyPreferencesEnableDaylightTime()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return 1;
  }
  v3 = v2;
  Value = CFBooleanGetValue(v2);
  v5 = Value != 0;
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10218CD58);
  v6 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v15 = Value != 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Daylight time setting update, enabled %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218CD58);
    v13[0] = 67240192;
    v13[1] = Value != 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 0, "Daylight time setting update, enabled %{public}d", v13, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL getHKPrivacyPreferencesEnableDaylightTime()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  CFRelease(v3);
  return v5;
}

void sub_100E68158()
{
  operator delete();
}

id sub_100E68180(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onOldMotionCoprocessorData:", a1);
}

id sub_100E6818C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onBacklightStateNotification:data:", a2, a3);
}

id sub_100E6819C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onOdometerNotification:data:", a2, a3);
}

id sub_100E681AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onSignalEnvironmentNotification:data:", a2, a3);
}

id sub_100E681BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onGnssLeechLocationNotification:data:", a2, a3);
}

id sub_100E68980(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v3 = objc_msgSend(a2, "isAuthorizedForServiceTypeMask:", 16);
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10218CD58);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v10 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Motion calibration service authorization update, enabled %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218CD58);
    v8[0] = 67240192;
    v8[1] = (_DWORD)v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 0, "Motion calibration service authorization update, enabled %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "-[CLOutdoorService updateLocationAuthorization]_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 32), "toggleManagerBySettingFlag:toState:", *(_QWORD *)(a1 + 32) + 154, v3);
}

void sub_100E68D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100E69418(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = sub_100E678E4();
  return _objc_msgSend(a2, "onHKPrivacyPreferencesEnableDaylightTime:", v3);
}

void sub_100E69A50(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100E69A7C(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_100E69AA8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  sub_10047F25C((_QWORD *)(a1 + 8944));
  sub_101363668(a1 + 6368);
  v2 = *(_QWORD **)(a1 + 6352);
  *(_QWORD *)(a1 + 6352) = 0;
  if (v2)
    sub_100E62D30(a1 + 6352, v2);
  v3 = *(_QWORD *)(a1 + 6344);
  *(_QWORD *)(a1 + 6344) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10127ADA4(a1 + 6064);
  v4 = *(void **)(a1 + 5704);
  if (v4)
  {
    *(_QWORD *)(a1 + 5712) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 5632);
  if (v5)
  {
    *(_QWORD *)(a1 + 5640) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 5631) < 0)
    operator delete(*(void **)(a1 + 5608));
  sub_1005938E4(a1 + 5504);
  if (*(char *)(a1 + 2575) < 0)
    operator delete(*(void **)(a1 + 2552));
  if (*(char *)(a1 + 2527) < 0)
    operator delete(*(void **)(a1 + 2504));
  sub_1006D7440((_QWORD *)(a1 + 16));
  return a1;
}

void sub_100E69B84(id a1)
{
  qword_102308C58 = (uint64_t)dlopen("/System/Library/Frameworks/HealthKit.framework/HealthKit", 2);
}

uint64_t sub_100E69BAC()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102308C50 != -1)
    dispatch_once(&qword_102308C50, &stru_10218CD78);
  v0 = (uint64_t *)dlsym((void *)qword_102308C58, "kHKNanoLifestylePrivacyPreferencesChangedNotification");
  if (v0)
  {
    result = *v0;
    qword_102308C60 = result;
  }
  else
  {
    result = qword_102308C60;
  }
  off_1022FBE58[0] = sub_100E69C24;
  return result;
}

uint64_t sub_100E69C24()
{
  return qword_102308C60;
}

uint64_t sub_100E69C30()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102308C50 != -1)
    dispatch_once(&qword_102308C50, &stru_10218CD78);
  v0 = (uint64_t *)dlsym((void *)qword_102308C58, "kHKPrivacyPreferencesDomain");
  if (v0)
  {
    result = *v0;
    qword_102308C68 = result;
  }
  else
  {
    result = qword_102308C68;
  }
  off_1022FBE60[0] = sub_100E69CA8;
  return result;
}

uint64_t sub_100E69CA8()
{
  return qword_102308C68;
}

uint64_t sub_100E69CB4()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102308C50 != -1)
    dispatch_once(&qword_102308C50, &stru_10218CD78);
  v0 = (uint64_t *)dlsym((void *)qword_102308C58, "kHKPrivacyPreferencesKeyEnableDaylightTime");
  if (v0)
  {
    result = *v0;
    qword_102308C70 = result;
  }
  else
  {
    result = qword_102308C70;
  }
  off_1022FBE68 = sub_100E69D2C;
  return result;
}

uint64_t sub_100E69D2C()
{
  return qword_102308C70;
}

uint64_t sub_100E69D38()
{
  sub_1015A2E04(qword_102308C18, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308C18, (void *)&_mh_execute_header);
}

id *sub_100E69E00(id *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (*a3 == 8)
  {
    v5 = result;
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10218CDB8);
    v6 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      v13 = sub_10011A5AC(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLGatheringRoutineOTASubscription Mobile asset notification data: %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10218CDB8);
      v7 = qword_1022A0158;
      v10 = 138477827;
      v11 = sub_10011A5AC(a4);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLGatheringRoutineOTASubscription Mobile asset notification data: %{private}@", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLGatheringRoutineOTASubscription::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return (id *)objc_msgSend(v5[1], "onUpdatedSettings:", sub_10011A5AC(a4));
  }
  return result;
}

id sub_100E69FE4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    sub_1013DF780();
  return objc_msgSend(*(id *)(v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1 + 8), 8, 0);
}

void sub_100E6A074(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGatheringRoutineOTASubscription::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218CDD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGatheringRoutineOTASubscription::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218CDD8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGatheringRoutineOTASubscription::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100E69E00(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100E6A22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100E6A24C(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[2];
  if (v1)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 16), "unregister:forNotification:", *(_QWORD *)(v1 + 8), 8);
    result = (_QWORD *)v2[2];
    v2[2] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100E6A29C(id a1)
{
  qword_1022A0158 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

void sub_100E6A2C8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

_QWORD *sub_100E6A2F4(_QWORD *a1, int a2)
{
  char *v4;
  void *__p[2];
  char v7;

  if (byte_102308C8F >= 0)
    v4 = (char *)&xmmword_102308C78;
  else
    v4 = (char *)xmmword_102308C78;
  sub_1015A2E04(__p, "");
  sub_100E6A3EC((uint64_t)a1, v4, a2, (uint64_t)__p, 1, 30.0);
  if (v7 < 0)
    operator delete(__p[0]);
  *a1 = off_10218CE08;
  a1[9] = off_10218CEC0;
  sub_100E81598(a1 + 41, 0, 0);
  sub_100E81598(a1 + 43, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100E6A3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E6A3EC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_10218D040;
  *(_QWORD *)(a1 + 72) = off_10218D0E8;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10218D040;
  *(_QWORD *)(a1 + 72) = off_10218D0E8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 248) = 12000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 264));
  *(_QWORD *)(a1 + 264) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100E6A79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[32] = off_102138DA8;
  sub_100427950(v27);
  sub_10047F660(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100E6A840()
{
  JUMPOUT(0x100E6A820);
}

_QWORD *sub_100E6A848(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10218D0E8;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10218D040;
  a1[32] = off_102138DA8;
  sub_100427950(a1 + 33);
  sub_10047F660(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100E6A8C8(uint64_t a1)
{
  return sub_100E6A848((_QWORD *)(a1 - 72));
}

void sub_100E6A8D0(_QWORD *a1)
{
  sub_100E6A848(a1);
  operator delete();
}

void sub_100E6A8F4(uint64_t a1)
{
  sub_100E6A848((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100E6A91C(uint64_t *a1, uint64_t a2)
{
  double Current;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) != 1.79769313e308 || !sub_10008950C(a1 + 9))
    return -1;
  sub_10001E638(a1[10]);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100087AF4(a1 + 41, &v13);
  v5 = (sqlite3_stmt *)sub_100026CC8(v13);
  if (sub_1000890C4(v5, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
  {
    v6 = a1[10];
    v7 = (sqlite3_stmt *)sub_100026CC8(v13);
    sub_10023C9B0(v6, v7);
    v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    v8 = -1;
  }
  sub_10001E99C(a1[10]);
  v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = *(_QWORD *)(v9 + 88);
  sub_100053048(v9, v10);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return v8;
}

void sub_100E6AA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E6AA48(uint64_t a1, uint64_t a2)
{
  return sub_100E6A91C((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100E6AA50(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from ElevationGradeHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100E6AC14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E6AC3C(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  double v9;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v9 = sqlite3_column_double(v8, 2);
  result = 0;
  *(double *)(a2 + 16) = v9;
  return result;
}

uint64_t sub_100E6ACCC(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM ElevationGradeHistory");
  return 0xFFFFFFFFLL;
}

void sub_100E6AD6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E6AD90(uint64_t a1)
{
  return sub_100E6ACCC(a1 - 72);
}

void *sub_100E6AD98@<X0>(uint64_t a1@<X8>)
{
  void *result;

  if (byte_102308C8F < 0)
    return sub_100115CE4((_BYTE *)a1, (void *)xmmword_102308C78, *((unint64_t *)&xmmword_102308C78 + 1));
  *(_OWORD *)a1 = xmmword_102308C78;
  *(_QWORD *)(a1 + 16) = unk_102308C88;
  return result;
}

void *sub_100E6ADD4@<X0>(uint64_t a1@<X8>)
{
  void *result;

  if (byte_102308C8F < 0)
    return sub_100115CE4((_BYTE *)a1, (void *)xmmword_102308C78, *((unint64_t *)&xmmword_102308C78 + 1));
  *(_OWORD *)a1 = xmmword_102308C78;
  *(_QWORD *)(a1 + 16) = unk_102308C88;
  return result;
}

uint64_t sub_100E6AE10(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  pthread_mutex_t *v14;
  __int16 v15;
  uint8_t buf[16];

  v6 = *(_QWORD *)(a1 + 112);
  v5 = a1 + 112;
  v7 = v5 - 40;
  v13 = v5;
  (*(void (**)(void))(v6 + 16))();
  v15 = 256;
  if ((sub_10008950C(v7) & 1) != 0)
  {
    a3[1] = *a3;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM ElevationGradeHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10218CF50);
  v8 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "ElevationGradeHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10218CF50);
    LOWORD(v12) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "ElevationGradeHistory, DB not accessible", &v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CMError CLElevationGradeRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, int, std::vector<CLElevationGradeEntry> &) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if ((_BYTE)v15)
    pthread_mutex_unlock(v14);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 109;
}

void sub_100E6B324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6B378(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100E6B3F4((uint64_t)a1);
    sub_100634364(a1[10], "ElevationGradeHistory", (const char **)&off_10218CF70, (const std::string::value_type **)&off_1022FBE70, 0);
    a1[41] = sub_10063D314(a1[10], "DELETE FROM ElevationGradeHistory WHERE startTime < ?");
    a1[42] = v3;
    result = sub_10063D314(a1[10], "INSERT INTO ElevationGradeHistory (startTime, fractionalGrade) VALUES (?, ?)");
    a1[43] = result;
    a1[44] = v4;
  }
  return result;
}

uint64_t sub_100E6B3F4(uint64_t a1)
{
  uint64_t result;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "ElevationGradeHistory");
  if ((_DWORD)result)
  {
    result = sub_100E6B9D0(a1, "ElevationGradeHistory");
    if ((_DWORD)result)
      return sub_10063D3BC(*(_QWORD *)(a1 + 80), "ElevationGradeHistory");
  }
  return result;
}

uint64_t sub_100E6B460(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM ElevationGradeHistory");
  return result;
}

void sub_100E6B4F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E6B514(uint64_t a1)
{
  return sub_100E6B460(a1 - 72);
}

uint64_t sub_100E6B51C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM ElevationGradeHistory WHERE startTime > ?");
  }
  return result;
}

void sub_100E6B5E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E6B604(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE ElevationGradeHistory SET startTime = startTime + ?");
  return result;
}

void sub_100E6B69C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

id *sub_100E6B6BC(uint64_t a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v11;
  uint8_t *v12;
  __int16 v13;
  uint64_t v14;
  id v15[2];
  uint8_t buf[1640];

  v15[0] = (id)os_transaction_create("CLElevationGradeRecorderDb::insertRecordUL");
  v15[1] = 0;
  if (sub_10008950C(a1 + 72))
  {
    sub_100087AF4((_QWORD *)(a1 + 344), &v14);
    if (v14 && sub_100026CC8(v14))
    {
      v4 = (sqlite3_stmt *)sub_100026CC8(v14);
      if (sub_1000890C4(v4, 1, *(double *)(a2 + 8)))
      {
        v5 = (sqlite3_stmt *)sub_100026CC8(v14);
        if (sub_1000890C4(v5, 2, *(double *)(a2 + 16)))
        {
          v6 = *(_QWORD *)(a1 + 80);
          v7 = (sqlite3_stmt *)sub_100026CC8(v14);
          sub_10023C9B0(v6, v7);
        }
      }
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10218CF50);
      v8 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ElevationGradeHistory, insert statement is NULL", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_10218CF50);
        v13 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "ElevationGradeHistory, insert statement is NULL", &v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLElevationGradeRecorderDb::insertRecordUL(const CLElevationGradeEntry &, BOOL)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    v9 = v14;
    v14 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return sub_100131740(v15);
}

void sub_100E6B8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a5)
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6B928()
{
  return 0;
}

uint64_t sub_100E6B930(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM ElevationGradeHistory ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_100E6B9B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E6B9D0(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218D128);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218D128);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100E6CB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6CE88(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if (SHIBYTE(v16) < 0)
  {
    v1 = v15[1];
    operator delete(v15[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v15);
        v5 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v17);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v16))
  {
    goto LABEL_3;
  }
  sub_10192F644(v4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v15
  v16 = v11;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v19);
  return 2;
}

void sub_100E6D1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6D238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10218D128);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218D128);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218D128);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100E6D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100E6D850(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  id v35[2];
  int v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  uint64_t v43;

  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v35);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v32 = 0;
  v33 = 0.0;
  v34 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218D128);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218D128);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v36, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v33;
    v9 = v7 - v33;
    if (v7 - v33 < 0.0)
      v9 = -(v7 - v33);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218D128);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v41 = v33;
        v42 = 2050;
        v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218D128);
        v23 = *((_QWORD *)a2 + 1);
        v36 = 134349312;
        v37 = v33;
        v38 = 2050;
        v39 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v36, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v33;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218D128);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v41 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218D128);
          v26 = *((double *)a2 + 1);
          v36 = 134217984;
          v37 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v36));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10218D128);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v41 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218D128);
        v36 = 134217984;
        v37 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v36));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v35);
}

void sub_100E6DF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6DFC8(uint64_t a1)
{
  return sub_100E6D238(a1 - 72);
}

void sub_100E6DFD0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100E6DFFC(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10192F7B0(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100E6E300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6E368(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10192F91C(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100E6E5C8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192FA88(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100E6E800(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192FBF4(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100E6EA28(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100E6EA54()
{
  sub_1015A2E04(&xmmword_102308C78, "ElevationGradeHistory");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102308C78, (void *)&_mh_execute_header);
}

BOOL sub_100E6EA98(uint64_t a1, id *a2)
{
  double v4;
  int v5;
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  NSObject *v9;
  uint8_t *v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint8_t buf[1640];

  if (!sub_10011CE64(*(double *)(a1 + 160), *(double *)(a1 + 168)) && *(double *)(a1 + 176) > 0.0)
    return 1;
  v4 = *(double *)(a1 + 4);
  v14 = *(double *)(a1 + 12);
  v15 = v4;
  v13 = *(double *)(a1 + 20);
  v5 = sub_100E3E4B0(a2, *(_DWORD *)(a1 + 132), &v15, &v14, &v13, 5, v4, v14, v13);
  if (v5)
  {
    if (v5 == 1)
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_10218D148);
      v6 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLAccessory,shift,coordinate shifting failed", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_10218D148);
        LOWORD(v12) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,shift,coordinate shifting failed", &v12, 2, v12);
LABEL_21:
        v10 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLChinaShiftedDataStructure::computeShiftedCoordinate(CLGeoLocationShifter &)", "%s\n", v8);
        if (v10 != buf)
          free(v10);
        return 0;
      }
      return result;
    }
    v11 = v14;
    *(double *)(a1 + 160) = v15;
    *(double *)(a1 + 168) = v11;
    *(double *)(a1 + 176) = v13;
    return 1;
  }
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_10218D148);
  v9 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLAccessory,shift,coordinate shifting not required", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_10218D148);
    LOWORD(v12) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,shift,coordinate shifting not required", &v12, 2, v12);
    goto LABEL_21;
  }
  return result;
}

BOOL sub_100E6ED7C(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  char *v8;
  unsigned __int8 v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  NSObject *v29;
  int v30;
  int v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t *v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  _BYTE v76[12];
  __int16 v77;
  double v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  double v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  _BYTE buf[32];
  __int128 v102;
  _BYTE v103[32];
  _BYTE v104[48];
  _OWORD v105[2];
  __int128 v106;

  v2 = (unsigned int *)(a2 + 96);
  if (*(_DWORD *)(a2 + 96) != 3 || *(_DWORD *)(a2 + 132) != 2)
    return 0;
  if (sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_10218D148);
    v5 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessory,shift,null coordinate", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_10218D148);
    *(_WORD *)v76 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,shift,null coordinate", v76, 2);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_102308CA8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_102308CA8))
  {
    *(_DWORD *)&buf[16] = 4;
    *(_OWORD *)buf = xmmword_101C2AF38;
    sub_100E6F9FC(qword_102308C90, buf, 5uLL);
    __cxa_atexit((void (*)(void *))sub_100E6FA7C, qword_102308C90, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102308CA8);
  }
  v10 = (unsigned int *)qword_102308C90[0];
  v11 = (unsigned int *)unk_102308C98;
  if (qword_102308C90[0] == unk_102308C98)
    return 0;
  v12 = a1 + 232;
  while (1)
  {
    v13 = sub_100270BB8((_QWORD *)(a1 + 232), v10);
    v14 = v13;
    if (v13)
    {
      if (!sub_10011CE64(*(double *)((char *)v13 + 28), *(double *)((char *)v13 + 36)))
      {
        v15 = v14 + 3;
        v16 = *(double *)(a2 + 76);
        v17 = *(double *)((char *)v14 + 100);
        if (sub_100E6EA98((uint64_t)(v14 + 3), (id *)a1))
        {
          v18 = vabdd_f64(v16, v17);
          v19 = *(_OWORD *)v15;
          v20 = *(_OWORD *)(v14 + 5);
          v21 = *(_OWORD *)(v14 + 9);
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(v14 + 7);
          *(_OWORD *)(a1 + 96) = v21;
          *(_OWORD *)(a1 + 48) = v19;
          *(_OWORD *)(a1 + 64) = v20;
          v22 = *(_OWORD *)(v14 + 11);
          v23 = *(_OWORD *)(v14 + 13);
          v24 = *(_OWORD *)(v14 + 17);
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(v14 + 15);
          *(_OWORD *)(a1 + 160) = v24;
          *(_OWORD *)(a1 + 112) = v22;
          *(_OWORD *)(a1 + 128) = v23;
          v25 = *(_OWORD *)(v14 + 19);
          v26 = *(_OWORD *)(v14 + 21);
          v27 = *(_OWORD *)(v14 + 23);
          *(_QWORD *)(a1 + 224) = v14[25];
          *(_OWORD *)(a1 + 192) = v26;
          *(_OWORD *)(a1 + 208) = v27;
          *(_OWORD *)(a1 + 176) = v25;
        }
        else
        {
          if (sub_10011CE64(*(double *)(a1 + 208), *(double *)(a1 + 216)) || *(double *)(a1 + 224) <= 0.0)
          {
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_10218D148);
            v36 = qword_1022A0008;
            if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
            {
              v37 = *(_QWORD *)(a2 + 76);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v37;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLAccessory,shift,%{public}.1lf,coordinate not shifted", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_44;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_10218D148);
            v42 = *(_QWORD *)(a2 + 76);
            *(_DWORD *)v76 = 134349056;
            *(_QWORD *)&v76[4] = v42;
            LODWORD(v73) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,shift,%{public}.1lf,coordinate not shifted", v76, v73);
            v33 = (char *)v43;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v43);
LABEL_57:
            if (v33 != buf)
              free(v33);
            goto LABEL_44;
          }
          v18 = vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 124));
          if (v18 >= 45.0)
          {
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_10218D148);
            v38 = qword_1022A0008;
            if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
            {
              v39 = *(_QWORD *)(a2 + 76);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v39;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "CLAccessory,shift,%{public}.1lf,shifted coordinate not available", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_44;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_10218D148);
            v40 = *(_QWORD *)(a2 + 76);
            *(_DWORD *)v76 = 134349056;
            *(_QWORD *)&v76[4] = v40;
            LODWORD(v73) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,shift,%{public}.1lf,shifted coordinate not available", v76, v73);
            v33 = (char *)v41;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v41);
            goto LABEL_57;
          }
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_10218D148);
          v34 = qword_1022A0008;
          if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
          {
            v35 = *(_QWORD *)(a2 + 76);
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = v35;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v18;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "CLAccessory,shift,%{public}.1lf,usingPriorShiftedLocation,%{public}.1lf", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_10218D148);
            v44 = *(_QWORD *)(a2 + 76);
            *(_DWORD *)v76 = 134349312;
            *(_QWORD *)&v76[4] = v44;
            v77 = 2050;
            v78 = v18;
            LODWORD(v73) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,shift,%{public}.1lf,usingPriorShiftedLocation,%{public}.1lf", v76, v73);
            v46 = (char *)v45;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v45);
            if (v46 != buf)
              free(v46);
          }
          v15 = (uint64_t *)(a1 + 48);
        }
        v28 = sub_1010B97B4((double *)(a1 + 8), a2, *((double *)v15 + 20), *((double *)v15 + 21));
        if (v28 < v18 * 40.0 + 500.0)
          break;
      }
    }
LABEL_44:
    if (++v10 == v11)
      return 0;
  }
  v74 = 0;
  v75 = 0.0;
  if (!sub_100E3E5C0((double *)(a1 + 8), &v75, (double *)&v74, *(double *)((char *)v15 + 4), *(double *)((char *)v15 + 12), *((double *)v15 + 20), *((double *)v15 + 21), *(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_10218D148);
    v29 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      v30 = *((_DWORD *)v15 + 24);
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "CLAccessory,shift,computeCorrectedCoordinate failed using location of type,%{private}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_44;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_10218D148);
    v31 = *((_DWORD *)v15 + 24);
    *(_DWORD *)v76 = 67174657;
    *(_DWORD *)&v76[4] = v31;
    LODWORD(v73) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,shift,computeCorrectedCoordinate failed using location of type,%{private}d", v76, v73);
    v33 = (char *)v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v32);
    goto LABEL_57;
  }
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_10218D148);
  v47 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v48 = *(_QWORD *)(a2 + 76);
    v49 = *(_QWORD *)(a2 + 4);
    v50 = *(_QWORD *)(a2 + 12);
    v51 = *(uint64_t *)((char *)v15 + 76);
    v52 = *((_DWORD *)v15 + 24);
    v53 = *(uint64_t *)((char *)v15 + 4);
    v54 = *(uint64_t *)((char *)v15 + 12);
    v55 = v15[20];
    v56 = v15[21];
    *(_DWORD *)buf = 134352129;
    *(_QWORD *)&buf[4] = v48;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v49;
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)&buf[24] = v50;
    LOWORD(v102) = 2049;
    *(_QWORD *)((char *)&v102 + 2) = v51;
    WORD5(v102) = 1025;
    HIDWORD(v102) = v52;
    *(_WORD *)v103 = 2049;
    *(_QWORD *)&v103[2] = v53;
    *(_WORD *)&v103[10] = 2049;
    *(_QWORD *)&v103[12] = v54;
    *(_WORD *)&v103[20] = 2049;
    *(_QWORD *)&v103[22] = v55;
    *(_WORD *)&v103[30] = 2049;
    *(_QWORD *)v104 = v56;
    *(_WORD *)&v104[8] = 2049;
    *(double *)&v104[10] = v75;
    *(_WORD *)&v104[18] = 2049;
    *(_QWORD *)&v104[20] = v74;
    *(_WORD *)&v104[28] = 2049;
    *(double *)&v104[30] = v28;
    *(_WORD *)&v104[38] = 2050;
    *(double *)&v104[40] = v18;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLAccessory,shift,%{public}.1lf,accessoryLL,%{private}.7lf,%{private}.7lf,posTime,%{private}.3lf,posType,%{private}d,posLL,%{private}.7lf,%{private}.7lf,posLLMod,%{private}.7lf,%{private}.7lf,posCorrected,%{private}.7lf,%{private}.7lf,distance,%{private}.3lf,timeDiff,%{public}.3lf", buf, 0x80u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_10218D148);
    v62 = *(_QWORD *)(a2 + 76);
    v63 = *(double *)(a2 + 4);
    v64 = *(_QWORD *)(a2 + 12);
    v65 = *(uint64_t *)((char *)v15 + 76);
    v66 = *((_DWORD *)v15 + 24);
    v67 = *(uint64_t *)((char *)v15 + 4);
    v68 = *(uint64_t *)((char *)v15 + 12);
    v69 = v15[20];
    v70 = v15[21];
    *(_DWORD *)v76 = 134352129;
    *(_QWORD *)&v76[4] = v62;
    v77 = 2049;
    v78 = v63;
    v79 = 2049;
    v80 = v64;
    v81 = 2049;
    v82 = v65;
    v83 = 1025;
    v84 = v66;
    v85 = 2049;
    v86 = v67;
    v87 = 2049;
    v88 = v68;
    v89 = 2049;
    v90 = v69;
    v91 = 2049;
    v92 = v70;
    v93 = 2049;
    v94 = v75;
    v95 = 2049;
    v96 = v74;
    v97 = 2049;
    v98 = v28;
    v99 = 2050;
    v100 = v18;
    LODWORD(v73) = 128;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,shift,%{public}.1lf,accessoryLL,%{private}.7lf,%{private}.7lf,posTime,%{private}.3lf,posType,%{private}d,posLL,%{private}.7lf,%{private}.7lf,posLLMod,%{private}.7lf,%{private}.7lf,posCorrected,%{private}.7lf,%{private}.7lf,distance,%{private}.3lf,timeDiff,%{public}.3lf", v76, v73);
    v72 = (char *)v71;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v71);
    if (v72 != buf)
      free(v72);
  }
  *(double *)(a2 + 4) = v75;
  *(_QWORD *)(a2 + 12) = v74;
  *(_DWORD *)(a2 + 132) = 1;
  v57 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v104[16] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v104[32] = v57;
  v105[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v105 + 12) = *(_OWORD *)(a2 + 140);
  v58 = *(_OWORD *)(a2 + 48);
  v102 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v103 = v58;
  v59 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v103[16] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v104 = v59;
  v60 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)buf = *(_OWORD *)a2;
  *(_OWORD *)&buf[16] = v60;
  v106 = 0uLL;
  *(_QWORD *)v76 = v2;
  v61 = sub_100153808(v12, v2, (uint64_t)&unk_101B9EB60, (_DWORD **)v76);
  *(_OWORD *)(v61 + 17) = *(_OWORD *)&v104[32];
  *(_OWORD *)(v61 + 19) = v105[0];
  *(_OWORD *)(v61 + 21) = v105[1];
  *(_OWORD *)(v61 + 23) = v106;
  *(_OWORD *)(v61 + 9) = *(_OWORD *)v103;
  *(_OWORD *)(v61 + 11) = *(_OWORD *)&v103[16];
  *(_OWORD *)(v61 + 13) = *(_OWORD *)v104;
  *(_OWORD *)(v61 + 15) = *(_OWORD *)&v104[16];
  *(_OWORD *)(v61 + 3) = *(_OWORD *)buf;
  *(_OWORD *)(v61 + 5) = *(_OWORD *)&buf[16];
  *(_OWORD *)(v61 + 7) = v102;
  v61[25] = 0xBFF0000000000000;
  return 1;
}

void sub_100E6F9DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308CA8);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E6F9FC(_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_1002720D4(a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_100E6FA60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E6FA7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100E6FAAC(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

__n128 sub_100E6FAD8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0xD0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  *((_DWORD *)v8 + 4) = **a3;
  *((_DWORD *)v8 + 6) = 0xFFFF;
  *(_QWORD *)(v8 + 28) = 0;
  *(_QWORD *)(v8 + 36) = 0;
  *(_OWORD *)(v8 + 44) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(v8 + 60) = result;
  *(__n128 *)(v8 + 76) = result;
  *(__n128 *)(v8 + 92) = result;
  *((_DWORD *)v8 + 27) = 0;
  *((_DWORD *)v8 + 34) = 0;
  *((_QWORD *)v8 + 14) = 0xBFF0000000000000;
  *((_QWORD *)v8 + 15) = 0;
  *((_QWORD *)v8 + 16) = 0;
  *(_QWORD *)(v8 + 140) = 0xBFF0000000000000;
  *((_DWORD *)v8 + 37) = 0x7FFFFFFF;
  *((_QWORD *)v8 + 21) = 0;
  *((_QWORD *)v8 + 22) = 0;
  *((_QWORD *)v8 + 19) = 0;
  *((_QWORD *)v8 + 20) = 0;
  v8[176] = 0;
  *((_QWORD *)v8 + 23) = 0;
  *((_QWORD *)v8 + 24) = 0;
  *((_QWORD *)v8 + 25) = 0xBFF0000000000000;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100E6FB8C(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  BOOL v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  float64_t v19;
  float64_t v20;
  uint64_t v21;
  float64_t v22;
  int v23;
  int v24;
  int v25;
  NSObject *v26;
  float64_t v27;
  float64_t v28;
  float64_t v29;
  float64_t v30;
  float64_t v31;
  float64_t v32;
  float64_t v33;
  float64_t v34;
  float64_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  float64_t v40;
  int v41;
  int v42;
  int v43;
  const char *v44;
  char *v45;
  float64_t v46;
  float64_t v47;
  float64_t v48;
  float64_t v49;
  float64_t v50;
  float64_t v51;
  float64_t v52;
  float64_t v53;
  float64_t v54;
  float64_t v55;
  const char *v56;
  char *v57;
  const char *v58;
  char *v59;
  uint64_t v60;
  void *__p;
  void *v62;
  uint64_t v63;
  int v64;
  float64_t v65;
  __int16 v66;
  float64_t v67;
  __int16 v68;
  float64_t v69;
  __int16 v70;
  float64_t v71;
  __int16 v72;
  _BYTE v73[10];
  float64_t v74;
  __int16 v75;
  float64_t v76;
  __int16 v77;
  float64_t v78;
  __int16 v79;
  float64_t v80;
  __int16 v81;
  float64_t v82;
  _BYTE buf[12];
  __int16 v84;
  float64_t v85;
  __int16 v86;
  float64_t v87;
  __int16 v88;
  float64_t v89;
  __int16 v90;
  _BYTE v91[10];
  float64_t v92;
  __int16 v93;
  float64_t v94;
  __int16 v95;
  float64_t v96;
  __int16 v97;
  float64_t v98;
  __int16 v99;
  float64_t v100;

  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  v11 = sub_100E70204(a2->f64);
  v12 = 0;
  if (!v11)
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218D188);
    v13 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Rejection: ModelTemporalEntropy missing required feature inputs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_10218D188);
      LOWORD(v64) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "Rejection: ModelTemporalEntropy missing required feature inputs", &v64, 2);
      v59 = (char *)v58;
      sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
    v12 = *(_DWORD *)(a5 + 48) | 8;
    *(_DWORD *)(a5 + 48) = v12;
  }
  if (!*(_BYTE *)(a4 + 57))
    *(_DWORD *)(a5 + 48) = v12 | 4;
  __p = 0;
  v62 = 0;
  v63 = 0;
  v15 = *a3;
  v14 = a3[1];
  *(_QWORD *)buf = &__p;
  while (v15 != v14)
  {
    if (*(double *)(v15 + 72) != 0.0)
      sub_1007264EC((void ***)buf, (_OWORD *)v15);
    v15 += 224;
  }
  sub_100725800(a1, a5, (uint64_t *)&__p);
  v16 = sub_1009FF848(a2);
  *(double *)(a5 + 24) = v16;
  *(double *)(a5 + 32) = sub_1009FF8FC(v16);
  *(_QWORD *)(a5 + 40) = v17;
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218D188);
  v18 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(double *)(a5 + 32);
    v20 = *(double *)(a5 + 40);
    v21 = *(_QWORD *)(a5 + 16);
    v22 = *(double *)(a5 + 24);
    v23 = *(_DWORD *)(a5 + 48);
    v24 = *(_DWORD *)(a5 + 8);
    v25 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)buf = 134350593;
    *(_QWORD *)&buf[4] = v21;
    v84 = 2050;
    v85 = v19;
    v86 = 2050;
    v87 = v20;
    v88 = 2049;
    v89 = v22;
    v90 = 1026;
    *(_DWORD *)v91 = v23;
    *(_WORD *)&v91[4] = 1025;
    *(_DWORD *)&v91[6] = v24;
    LOWORD(v92) = 1025;
    *(_DWORD *)((char *)&v92 + 2) = v25;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelTemporalEntropy::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218D188);
    v37 = *(double *)(a5 + 32);
    v38 = *(double *)(a5 + 40);
    v39 = *(double *)(a5 + 16);
    v40 = *(double *)(a5 + 24);
    v41 = *(_DWORD *)(a5 + 48);
    v42 = *(_DWORD *)(a5 + 8);
    v43 = *(_DWORD *)(a5 + 12);
    v64 = 134350593;
    v65 = v39;
    v66 = 2050;
    v67 = v37;
    v68 = 2050;
    v69 = v38;
    v70 = 2049;
    v71 = v40;
    v72 = 1026;
    *(_DWORD *)v73 = v41;
    *(_WORD *)&v73[4] = 1025;
    *(_DWORD *)&v73[6] = v42;
    LOWORD(v74) = 1025;
    *(_DWORD *)((char *)&v74 + 2) = v43;
    LODWORD(v60) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelTemporalEntropy::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", &v64, v60);
    v45 = (char *)v44;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218D188);
  v26 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v28 = a2->f64[0];
    v27 = a2->f64[1];
    v29 = a2[3].f64[0];
    v30 = a2[3].f64[1];
    v32 = a2[4].f64[0];
    v31 = a2[4].f64[1];
    v33 = a2[1].f64[0];
    v34 = a2[1].f64[1];
    v36 = a2[2].f64[0];
    v35 = a2[2].f64[1];
    *(_DWORD *)buf = 134285825;
    *(float64_t *)&buf[4] = v35;
    v84 = 2049;
    v85 = v27;
    v86 = 2049;
    v87 = v28;
    v88 = 2049;
    v89 = v33;
    v90 = 2049;
    *(float64_t *)v91 = v29;
    *(_WORD *)&v91[8] = 2049;
    v92 = v30;
    v93 = 2049;
    v94 = v31;
    v95 = 2049;
    v96 = v32;
    v97 = 2049;
    v98 = v34;
    v99 = 2049;
    v100 = v36;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelTemporalEntropy::Features,allBoutsMinGaitMetrics21StepLengthEntropyMeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropyP5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log,%{private}.2f", buf, 0x66u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218D188);
    v47 = a2->f64[0];
    v46 = a2->f64[1];
    v48 = a2[3].f64[0];
    v49 = a2[3].f64[1];
    v51 = a2[4].f64[0];
    v50 = a2[4].f64[1];
    v52 = a2[1].f64[0];
    v53 = a2[1].f64[1];
    v55 = a2[2].f64[0];
    v54 = a2[2].f64[1];
    v64 = 134285825;
    v65 = v54;
    v66 = 2049;
    v67 = v46;
    v68 = 2049;
    v69 = v47;
    v70 = 2049;
    v71 = v52;
    v72 = 2049;
    *(float64_t *)v73 = v48;
    *(_WORD *)&v73[8] = 2049;
    v74 = v49;
    v75 = 2049;
    v76 = v50;
    v77 = 2049;
    v78 = v51;
    v79 = 2049;
    v80 = v53;
    v81 = 2049;
    v82 = v55;
    LODWORD(v60) = 102;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelTemporalEntropy::Features,allBoutsMinGaitMetrics21StepLengthEntropyMeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropyP5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log,%{private}.2f", &v64, v60);
    v57 = (char *)v56;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v56);
    if (v57 != buf)
      free(v57);
  }
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
}

void sub_100E701D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100E70204(double *a1)
{
  return *a1 != -INFINITY
      && a1[1] != -INFINITY
      && a1[2] != -INFINITY
      && a1[3] != -INFINITY
      && a1[4] != -INFINITY
      && a1[5] != -INFINITY
      && a1[6] != -INFINITY
      && a1[7] != -INFINITY
      && a1[8] != -INFINITY
      && a1[9] != -INFINITY;
}

void sub_100E702B4(uint64_t *a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  int64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  _BYTE *v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  NSObject *v109;
  const char *v110;
  char *v111;
  void *v112;
  char *v113;
  char *v114;
  void *v115;
  char *v116;
  char *v117;
  void *v118;
  char *v119;
  char *v120;
  void *v121;
  char *v122;
  char *v123;
  void *v124;
  char *v125;
  char *v126;
  void *__p;
  char *v128;
  char *v129;
  void *v130;
  _BYTE *v131;
  uint64_t v132;
  int v133;
  double v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  _BYTE buf[12];
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;

  v5 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)a2 = v5;
  *(int64x2_t *)(a2 + 16) = v5;
  *(int64x2_t *)(a2 + 32) = v5;
  *(int64x2_t *)(a2 + 48) = v5;
  *(int64x2_t *)(a2 + 64) = v5;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v6 = *a1;
  v7 = a1[1];
  *(_QWORD *)buf = &v130;
  if (v6 == v7)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    do
    {
      v8 = *(double *)(v6 + 8);
      if (v8 < a3 && v8 >= a3 + -2419200.0)
        sub_1007264EC((void ***)buf, (_OWORD *)v6);
      v6 += 224;
    }
    while (v6 != v7);
    v10 = v130;
    v11 = v131;
  }
  __p = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  if (v10 == v11)
  {
    v97 = 0;
    v96 = 0;
  }
  else
  {
    do
    {
      if (*((_DWORD *)v10 + 9) >= 0x15u)
      {
        v12 = v10[8];
        if (((v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v12 == 0x7FF0000000000000
          || (v12 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          v16 = v128;
          if (v128 >= v129)
          {
            v18 = (char *)__p;
            v19 = (v128 - (_BYTE *)__p) >> 3;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61)
              goto LABEL_213;
            v21 = v129 - (_BYTE *)__p;
            if ((v129 - (_BYTE *)__p) >> 2 > v20)
              v20 = v21 >> 2;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)sub_10025E6A0((uint64_t)&v129, v22);
              v18 = (char *)__p;
              v16 = v128;
              v12 = v10[8];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[8 * v19];
            *(_QWORD *)v24 = v12;
            v17 = v24 + 8;
            while (v16 != v18)
            {
              v25 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v24 - 1) = v25;
              v24 -= 8;
            }
            __p = v24;
            v128 = v17;
            v129 = &v23[8 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_QWORD *)v128 = v12;
            v17 = v16 + 8;
          }
          v128 = v17;
        }
        v26 = v10[9];
        if (((v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v26 == 0x7FF0000000000000
          || (v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          v30 = v125;
          if (v125 >= v126)
          {
            v32 = (char *)v124;
            v33 = (v125 - (_BYTE *)v124) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_213;
            v35 = v126 - (_BYTE *)v124;
            if ((v126 - (_BYTE *)v124) >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)sub_10025E6A0((uint64_t)&v126, v36);
              v32 = (char *)v124;
              v30 = v125;
              v26 = v10[9];
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[8 * v33];
            *(_QWORD *)v38 = v26;
            v31 = v38 + 8;
            while (v30 != v32)
            {
              v39 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v38 - 1) = v39;
              v38 -= 8;
            }
            v124 = v38;
            v125 = v31;
            v126 = &v37[8 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v125 = v26;
            v31 = v30 + 8;
          }
          v125 = v31;
        }
        v40 = v10[10];
        if (((v40 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v40 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v40 == 0x7FF0000000000000
          || (v40 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          v44 = v122;
          if (v122 >= v123)
          {
            v46 = (char *)v121;
            v47 = (v122 - (_BYTE *)v121) >> 3;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
              goto LABEL_213;
            v49 = v123 - (_BYTE *)v121;
            if ((v123 - (_BYTE *)v121) >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)sub_10025E6A0((uint64_t)&v123, v50);
              v46 = (char *)v121;
              v44 = v122;
              v40 = v10[10];
            }
            else
            {
              v51 = 0;
            }
            v52 = &v51[8 * v47];
            *(_QWORD *)v52 = v40;
            v45 = v52 + 8;
            while (v44 != v46)
            {
              v53 = *((_QWORD *)v44 - 1);
              v44 -= 8;
              *((_QWORD *)v52 - 1) = v53;
              v52 -= 8;
            }
            v121 = v52;
            v122 = v45;
            v123 = &v51[8 * v50];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(_QWORD *)v122 = v40;
            v45 = v44 + 8;
          }
          v122 = v45;
        }
        v54 = v10[11];
        if (((v54 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v54 == 0x7FF0000000000000
          || (v54 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          v58 = v119;
          if (v119 >= v120)
          {
            v60 = (char *)v118;
            v61 = (v119 - (_BYTE *)v118) >> 3;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 61)
              goto LABEL_213;
            v63 = v120 - (_BYTE *)v118;
            if ((v120 - (_BYTE *)v118) >> 2 > v62)
              v62 = v63 >> 2;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              v65 = (char *)sub_10025E6A0((uint64_t)&v120, v64);
              v60 = (char *)v118;
              v58 = v119;
              v54 = v10[11];
            }
            else
            {
              v65 = 0;
            }
            v66 = &v65[8 * v61];
            *(_QWORD *)v66 = v54;
            v59 = v66 + 8;
            while (v58 != v60)
            {
              v67 = *((_QWORD *)v58 - 1);
              v58 -= 8;
              *((_QWORD *)v66 - 1) = v67;
              v66 -= 8;
            }
            v118 = v66;
            v119 = v59;
            v120 = &v65[8 * v64];
            if (v60)
              operator delete(v60);
          }
          else
          {
            *(_QWORD *)v119 = v54;
            v59 = v58 + 8;
          }
          v119 = v59;
        }
        v68 = v10[12];
        if (((v68 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v68 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v68 == 0x7FF0000000000000
          || (v68 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          v72 = v116;
          if (v116 >= v117)
          {
            v74 = (char *)v115;
            v75 = (v116 - (_BYTE *)v115) >> 3;
            v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 61)
              goto LABEL_213;
            v77 = v117 - (_BYTE *)v115;
            if ((v117 - (_BYTE *)v115) >> 2 > v76)
              v76 = v77 >> 2;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
              v78 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v78 = v76;
            if (v78)
            {
              v79 = (char *)sub_10025E6A0((uint64_t)&v117, v78);
              v74 = (char *)v115;
              v72 = v116;
              v68 = v10[12];
            }
            else
            {
              v79 = 0;
            }
            v80 = &v79[8 * v75];
            *(_QWORD *)v80 = v68;
            v73 = v80 + 8;
            while (v72 != v74)
            {
              v81 = *((_QWORD *)v72 - 1);
              v72 -= 8;
              *((_QWORD *)v80 - 1) = v81;
              v80 -= 8;
            }
            v115 = v80;
            v116 = v73;
            v117 = &v79[8 * v78];
            if (v74)
              operator delete(v74);
          }
          else
          {
            *(_QWORD *)v116 = v68;
            v73 = v72 + 8;
          }
          v116 = v73;
        }
        v82 = v10[13];
        if (((v82 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v82 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v82 == 0x7FF0000000000000
          || (v82 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          v86 = v113;
          if (v113 >= v114)
          {
            v88 = (char *)v112;
            v89 = (v113 - (_BYTE *)v112) >> 3;
            v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 61)
LABEL_213:
              sub_100259694();
            v91 = v114 - (_BYTE *)v112;
            if ((v114 - (_BYTE *)v112) >> 2 > v90)
              v90 = v91 >> 2;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
              v92 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v92 = v90;
            if (v92)
            {
              v93 = (char *)sub_10025E6A0((uint64_t)&v114, v92);
              v88 = (char *)v112;
              v86 = v113;
              v82 = v10[13];
            }
            else
            {
              v93 = 0;
            }
            v94 = &v93[8 * v89];
            *(_QWORD *)v94 = v82;
            v87 = v94 + 8;
            while (v86 != v88)
            {
              v95 = *((_QWORD *)v86 - 1);
              v86 -= 8;
              *((_QWORD *)v94 - 1) = v95;
              v94 -= 8;
            }
            v112 = v94;
            v113 = v87;
            v114 = &v93[8 * v92];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *(_QWORD *)v113 = v82;
            v87 = v86 + 8;
          }
          v113 = v87;
        }
      }
      v10 += 28;
    }
    while (v10 != v11);
    v97 = __p;
    v96 = v128;
  }
  if ((unint64_t)(v96 - v97) > 8)
  {
    v98 = sub_101081E0C((double **)&__p);
    *(long double *)(a2 + 40) = log(v98);
  }
  if ((unint64_t)(v119 - (_BYTE *)v118) >= 9)
  {
    v99 = sub_101081E0C((double **)&v118);
    *(long double *)(a2 + 8) = log(v99);
    v100 = sub_1011A3088((uint64_t)&v118, 95);
    v101 = sub_1011A3088((uint64_t)&v118, 5);
    *(long double *)a2 = log(v100 - v101);
    v102 = sub_1011A3088((uint64_t)&v118, 5);
    *(long double *)(a2 + 16) = log(v102);
  }
  if ((unint64_t)(v125 - (_BYTE *)v124) >= 9)
  {
    v103 = sub_1011A3088((uint64_t)&v124, 5);
    *(long double *)(a2 + 48) = log(v103);
    v104 = sub_1011A3088((uint64_t)&v124, 95);
    *(long double *)(a2 + 56) = log(v104);
  }
  if ((unint64_t)(v122 - (_BYTE *)v121) >= 9)
  {
    v105 = sub_1011A3088((uint64_t)&v121, 5);
    *(long double *)(a2 + 72) = log(v105);
    v106 = sub_101081E0C((double **)&v121);
    *(long double *)(a2 + 64) = log(v106);
  }
  if ((unint64_t)(v116 - (_BYTE *)v115) >= 9)
  {
    v107 = sub_1011A3088((uint64_t)&v115, 5);
    *(long double *)(a2 + 24) = log(v107);
  }
  if ((unint64_t)(v113 - (_BYTE *)v112) >= 9)
  {
    v108 = sub_1011A3088((uint64_t)&v112, 5);
    *(long double *)(a2 + 32) = log(v108);
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218D188);
  v109 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = a3;
    v142 = 2050;
    v143 = 0x6DB6DB6DB6DB6DB7 * ((v131 - (_BYTE *)v130) >> 5);
    v144 = 2050;
    v145 = (v128 - (_BYTE *)__p) >> 3;
    v146 = 2050;
    v147 = (v119 - (_BYTE *)v118) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "SteadinessModelTemporalEntropy::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numStepLengthEntropy,%{public}lu,cycleTimeEntropy,%{public}lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218D188);
    v133 = 134349824;
    v134 = a3;
    v135 = 2050;
    v136 = 0x6DB6DB6DB6DB6DB7 * ((v131 - (_BYTE *)v130) >> 5);
    v137 = 2050;
    v138 = (v128 - (_BYTE *)__p) >> 3;
    v139 = 2050;
    v140 = (v119 - (_BYTE *)v118) >> 3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "SteadinessModelTemporalEntropy::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numStepLengthEntropy,%{public}lu,cycleTimeEntropy,%{public}lu", &v133, 42);
    v111 = (char *)v110;
    sub_100512490("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelTemporalEntropy::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &) const", "%s\n", v110);
    if (v111 != buf)
      free(v111);
  }
  if (v112)
  {
    v113 = (char *)v112;
    operator delete(v112);
  }
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118)
  {
    v119 = (char *)v118;
    operator delete(v118);
  }
  if (v121)
  {
    v122 = (char *)v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = (char *)v124;
    operator delete(v124);
  }
  if (__p)
  {
    v128 = (char *)__p;
    operator delete(__p);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
}

void sub_100E70CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  if (a33)
    operator delete(a33);
  if (a36)
    operator delete(a36);
  _Unwind_Resume(exception_object);
}

void sub_100E70D78(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100E70DA4(uint64_t a1)
{
  sub_100F96154(a1);
}

void sub_100E70DE0(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_100F961B8(v1);
  _Unwind_Resume(a1);
}

void sub_100E70DF4(float32x2_t *a1, __int128 *a2)
{
  __int128 v3;
  NSObject *v4;
  __int16 *v5;
  unsigned int v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  _DWORD v24[4];
  uint8_t buf[4];
  unsigned int v26;

  v3 = a2[1];
  v21 = *a2;
  v22 = v3;
  v23[0] = a2[2];
  *(_OWORD *)((char *)v23 + 13) = *(__int128 *)((char *)a2 + 45);
  if (sub_100F97338())
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10218D218);
    v4 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Device still has original rear camera. Using unit-specific calibration info", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10218D218);
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Device still has original rear camera. Using unit-specific calibration info", v24, 2, v21, v22, v23[0], v23[1]);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v5 = (__int16 *)((char *)&v21 + 7);
LABEL_27:
    sub_100F96F10(a1, v5);
    return;
  }
  v6 = sub_100F974AC();
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_10218D218);
  v7 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Rear camera was replaced. VCM actuator ID is %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10218D218);
    v24[0] = 67109120;
    v24[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Rear camera was replaced. VCM actuator ID is %d", v24);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (v6 == 4)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10218D218);
    v9 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Using generic Alps calibration info", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10218D218);
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Using generic Alps calibration info", v24, 2, v21, v22, v23[0], v23[1]);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v5 = (__int16 *)((char *)v23 + 11);
    goto LABEL_27;
  }
  if (v6 == 3)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10218D218);
    v8 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using generic Mitsumi calibration info", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10218D218);
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Using generic Mitsumi calibration info", v24, 2, v21, v22, v23[0], v23[1]);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v5 = (__int16 *)((char *)&v22 + 9);
    goto LABEL_27;
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_10218D218);
  v10 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Unrecongized VCM actuator. Not performing compensation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10218D218);
    LOWORD(v24[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Unrecongized VCM actuator. Not performing compensation", v24, 2, v21, v22, v23[0], v23[1]);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_100E714B4(_DWORD *a1)
{
  sub_100F961B8(a1);
  operator delete();
}

void sub_100E714D8(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100E71728(uint64_t a1, void *a2)
{
  double v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  double v12;
  NSData *v13;
  NSObject *v14;
  uint8_t *v15;
  double v16;
  NSObject *v17;
  NSData *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  NSArray *v30;
  NSData *v31;
  NSObject *v32;
  double v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  const char *v46;
  uint8_t *v47;
  double v48;
  double v49;
  double v50;
  NSNumber *v51;
  NSNumber *v52;
  _BYTE v53[12];
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  id v61;
  __int16 v62;
  uint64_t v63;
  _QWORD v64[5];
  uint8_t buf[4];
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  id v74;
  __int16 v75;
  uint64_t v76;

  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 256)) < *(double *)(a1 + 272) || !*(_BYTE *)(a1 + 288))
    return;
  objc_msgSend(a2, "accuracy");
  if (v4 > 140.0)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10218D350);
    v5 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(a2, "accuracy");
      *(_DWORD *)buf = 134217984;
      v66 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "phone, not sending altitude to watch, uncertainty %f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10218D350);
    v7 = qword_10229FE88;
    objc_msgSend(a2, "accuracy");
    *(_DWORD *)v53 = 134217984;
    *(_QWORD *)&v53[4] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "phone, not sending altitude to watch, uncertainty %f", COERCE_DOUBLE(v53));
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)", "%s\n", v9);
    if (v10 == buf)
      return;
LABEL_50:
    free(v10);
    return;
  }
  objc_msgSend(a2, "altitude");
  if (v11 <= -900.0 || (objc_msgSend(a2, "altitude"), v12 >= 10000.0))
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10218D350);
    v17 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "invalid altitude, not sending to watch", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_10218D350);
      *(_WORD *)v53 = 0;
      v33 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "invalid altitude, not sending to watch", v53, 2);
      v10 = v34;
      sub_100512490("Generic", 1, 0, 0, "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)", "%s\n", v33);
LABEL_49:
      if (v10 == buf)
        return;
      goto LABEL_50;
    }
  }
  else
  {
    objc_msgSend(a2, "timestamp");
    v64[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    objc_msgSend(a2, "altitude");
    v64[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    objc_msgSend(a2, "accuracy");
    v64[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    objc_msgSend(a2, "precision");
    v64[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v64[4] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "statusInfo"));
    v50 = 0.0;
    v13 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v64, 5), 0, &v50);
    if (v50 == 0.0)
    {
      v18 = v13;
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_10218D350);
      v19 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(a2, "timestamp");
        v21 = v20;
        objc_msgSend(a2, "altitude");
        v23 = v22;
        objc_msgSend(a2, "accuracy");
        v25 = v24;
        objc_msgSend(a2, "precision");
        v27 = v26;
        v28 = objc_msgSend(a2, "statusInfo");
        objc_msgSend(a2, "filteredPressure");
        *(_DWORD *)buf = 134219264;
        v66 = v21;
        v67 = 2048;
        v68 = v23;
        v69 = 2048;
        v70 = v25;
        v71 = 2048;
        v72 = v27;
        v73 = 2048;
        v74 = v28;
        v75 = 2048;
        v76 = v29;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "sending altimeter data to watch: timestamp %f, altitude %f, accuracy %f, precision %f, status info %lu, filteredPressure, %f", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_10218D350);
        v35 = qword_10229FE88;
        objc_msgSend(a2, "timestamp");
        v37 = v36;
        objc_msgSend(a2, "altitude");
        v39 = v38;
        objc_msgSend(a2, "accuracy");
        v41 = v40;
        objc_msgSend(a2, "precision");
        v43 = v42;
        v44 = objc_msgSend(a2, "statusInfo");
        objc_msgSend(a2, "filteredPressure");
        *(_DWORD *)v53 = 134219264;
        *(_QWORD *)&v53[4] = v37;
        v54 = 2048;
        v55 = v39;
        v56 = 2048;
        v57 = v41;
        v58 = 2048;
        v59 = v43;
        v60 = 2048;
        v61 = v44;
        v62 = 2048;
        v63 = v45;
        LODWORD(v48) = 62;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 2, "sending altimeter data to watch: timestamp %f, altitude %f, accuracy %f, precision %f, status info %lu, filteredPressure, %f", COERCE_DOUBLE(v53), v48, v49, v50, v51, *(double *)&v52);
        v47 = (uint8_t *)v46;
        sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)", "%s\n", v46);
        if (v47 != buf)
          free(v47);
      }
      sub_10061F764(120.0, a1, 20, v18, 300, 1, 0, 0, 0, 0);
      *(CFAbsoluteTime *)(a1 + 256) = CFAbsoluteTimeGetCurrent();
      v51 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent());
      objc_msgSend(a2, "filteredPressure");
      v52 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      v30 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v51, 2);
      *(_QWORD *)v53 = 0;
      v31 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v30, 0, v53);
      if (!*(_QWORD *)v53)
      {
        sub_10061F764(120.0, a1, 36, v31, 300, 1, 0, 0, 0, 0);
        return;
      }
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_10218D350);
      v32 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Filtered Pressure entry", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_10218D350);
        LOWORD(v49) = 0;
        LODWORD(v48) = 2;
        v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "#Warning error serializing Filtered Pressure entry", &v49, *(_QWORD *)&v48, *(_QWORD *)&v49);
        goto LABEL_44;
      }
    }
    else
    {
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_10218D350);
      v14 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Absolute Altitude entry", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_10218D350);
        *(_WORD *)v53 = 0;
        v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "#Warning error serializing Absolute Altitude entry", v53, 2, *(_QWORD *)&v49);
LABEL_44:
        v10 = v15;
        sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)", "%s\n", v16);
        goto LABEL_49;
      }
    }
  }
}

void sub_100E72054(uint64_t a1, void *a2)
{
  sub_10061E42C(a1, a2);
}

void sub_100E72300(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  sub_100261F44(v2 - 64);
  v4 = v1[20];
  v1[20] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10061F47C(v1);
  _Unwind_Resume(a1);
}

void sub_100E72358(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCompanionNotifierCompanion::onOdometerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218D370);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCompanionNotifierCompanion::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218D370);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCompanionNotifierCompanion::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100E739B0((_BYTE *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100E72510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100E72530(uint64_t a1)
{
  return sub_100E72538(*(_QWORD *)(a1 + 32));
}

id sub_100E72538(uint64_t a1)
{
  id result;

  result = sub_10061F468();
  if ((_DWORD)result && !*(_BYTE *)(a1 + 200) && *(_BYTE *)(a1 + 109))
  {
    if (*(_BYTE *)(a1 + 110))
    {
      sub_10061F764(120.0, a1, 15, 0, 300, 0, 0, 0, 0, 0);
      result = objc_msgSend(*(id *)(a1 + 208), "invalidate");
      *(_BYTE *)(a1 + 200) = 1;
    }
  }
  return result;
}

void sub_100E725BC(uint64_t a1)
{
  sub_100E725C4(*(_QWORD *)(a1 + 32));
}

void sub_100E725C4(uint64_t a1)
{
  void *v2;
  double v3;
  double Current;
  double v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if ((sub_10061F468() & 1) != 0)
  {
    sub_100E734B8(a1, *(unsigned __int8 *)(a1 + 224));
    v2 = *(void **)(a1 + 216);
    v3 = 1.79769313e308;
LABEL_11:
    objc_msgSend(v2, "setNextFireDelay:", v3);
    return;
  }
  Current = CFAbsoluteTimeGetCurrent();
  objc_msgSend((id)qword_102310A10, "pairedDeviceLastSeenTimestamp");
  if (Current - v5 <= 3599.0)
  {
    v2 = *(void **)(a1 + 216);
    v3 = 3600.0;
    goto LABEL_11;
  }
  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_10218D390);
  v6 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Spectator subscriptions expired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_10218D390);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 0, "#Warning Spectator subscriptions expired", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::checkAndToggleSpectatorSources()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100E734B8(a1, 0);
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 289) = 0;
  sub_100E73714(a1, 0);
}

uint64_t sub_100E72828(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10218D248;
  v2 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  *(_QWORD *)(a1 + 248) = 0;
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_10061F47C((_QWORD *)a1);
}

void sub_100E728A8(uint64_t a1)
{
  sub_100E72828(a1);
  operator delete();
}

void sub_100E728CC(uint64_t a1, int a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  const char *v48;
  NSObject *v49;
  id v50;
  uint64_t v51;
  id v52;
  uint8_t *v53;
  id v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  const char *v58;
  uint8_t *v59;
  uint64_t v60;
  unsigned int v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[5];
  _QWORD v69[5];
  id v70;
  int v71;
  _QWORD v72[3];
  uint8_t buf[4];
  _QWORD v74[203];

  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_10218D390);
  v6 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    LODWORD(v74[0]) = a2;
    WORD2(v74[0]) = 2048;
    *(_QWORD *)((char *)v74 + 6) = objc_msgSend(a3, "length");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received message,type,%d,size,%lu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_10218D390);
    v57 = qword_10229FEB8;
    v71 = 67109376;
    LODWORD(v72[0]) = a2;
    WORD2(v72[0]) = 2048;
    *(_QWORD *)((char *)v72 + 6) = objc_msgSend(a3, "length");
    LODWORD(v64) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v57, 2, "Received message,type,%d,size,%lu", &v71, v64);
    v59 = (uint8_t *)v58;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
  *(CFAbsoluteTime *)(a1 + 192) = CFAbsoluteTimeGetCurrent();
  switch(a2)
  {
    case 0:
      if (!*(_BYTE *)(a1 + 168))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 2, 0);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 4, 0);
        *(_BYTE *)(a1 + 168) = 1;
      }
      goto LABEL_69;
    case 1:
      if (*(_BYTE *)(a1 + 168))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 2);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 4);
        *(_BYTE *)(a1 + 168) = 0;
      }
      goto LABEL_69;
    case 4:
      if (!*(_BYTE *)(a1 + 169))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 3, 0);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 7, 0);
        *(_BYTE *)(a1 + 169) = 1;
      }
      goto LABEL_69;
    case 5:
      if (*(_BYTE *)(a1 + 169))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 3);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 7);
        *(_BYTE *)(a1 + 169) = 0;
      }
      goto LABEL_69;
    case 7:
      v70 = 0;
      v10 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", a3, 0, &v70);
      if (!v70)
      {
        v11 = v10;
        if (objc_msgSend(v10, "count") == (id)1)
        {
          v12 = objc_msgSend(objc_msgSend(v11, "firstObject"), "integerValue");
          *(_QWORD *)(a1 + 176) = v12;
          v13 = *(void **)(a1 + 232);
          if (v13)
            objc_msgSend(v13, "setSession:", v12);
          else
            objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor", v12), "proxyForService:", CFSTR("CLStepCountNotifier")), "strideCalibratorSetSession:", *(_QWORD *)(a1 + 176));
          v54 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLRunningAggregatorAWD"));
          v55 = *(_QWORD *)(a1 + 176);
LABEL_67:
          objc_msgSend(v54, "updateSession:", v55);
          goto LABEL_69;
        }
      }
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218D3B0);
      v49 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
      {
        v50 = objc_msgSend(objc_msgSend(v70, "description"), "UTF8String");
        *(_DWORD *)buf = 136315138;
        v74[0] = v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#Warning Error deserializing session override: %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10218D3B0);
        v51 = qword_10229FCD8;
        v52 = objc_msgSend(objc_msgSend(v70, "description"), "UTF8String");
        v71 = 136315138;
        v72[0] = v52;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 16, "#Warning Error deserializing session override: %s", &v71);
        goto LABEL_63;
      }
      break;
    case 8:
      *(_QWORD *)(a1 + 176) = 0;
      v14 = *(void **)(a1 + 232);
      if (v14)
        objc_msgSend(v14, "setSession:", 0);
      else
        objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "strideCalibratorSetSession:", 0);
      v54 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLRunningAggregatorAWD"));
      v55 = 0;
      goto LABEL_67;
    case 11:
      *(_BYTE *)(a1 + 224) = 1;
      v15 = a1;
      v16 = 1;
      goto LABEL_24;
    case 12:
      *(_BYTE *)(a1 + 224) = 0;
      v15 = a1;
      v16 = 0;
LABEL_24:
      sub_100E734B8(v15, v16);
      goto LABEL_69;
    case 14:
      v17 = objc_opt_class(NSString, v7);
      v19 = objc_opt_class(NSNumber, v18);
      v21 = objc_opt_class(NSDictionary, v20);
      v23 = objc_opt_class(NSArray, v22);
      v25 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v17, v19, v21, v23, objc_opt_class(CMPedometerBin, v24), 0), a3, 0);
      v26 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLMotionSyncStore"));
      v69[0] = _NSConcreteStackBlock;
      v69[1] = 3221225472;
      v69[2] = sub_100E736E4;
      v69[3] = &unk_102155328;
      v69[4] = v25;
      v27 = v69;
      goto LABEL_27;
    case 18:
      v26 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLMotionStateObserver"));
      v68[0] = _NSConcreteStackBlock;
      v68[1] = 3221225472;
      v68[2] = sub_100E736FC;
      v68[3] = &unk_102155328;
      v68[4] = a3;
      v27 = v68;
LABEL_27:
      objc_msgSend(v26, "doAsync:", v27);
      goto LABEL_69;
    case 21:
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLPredictedWalkDistanceServiceCompanion")), "receivePredictedWalkDistanceBout:", a3);
      goto LABEL_69;
    case 22:
      sub_100E73714(a1, 1);
      goto LABEL_69;
    case 24:
      if ((sub_10142EA54() & 1) != 0)
        goto LABEL_69;
      v28 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
      v29 = 65793;
LABEL_37:
      objc_msgSend(v28, "collect:isLocal:", v29, 0);
      goto LABEL_69;
    case 25:
      if ((sub_10142EA54() & 1) != 0)
        goto LABEL_69;
      v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
      v9 = 257;
LABEL_34:
      objc_msgSend(v8, "dontcollect:isLocal:", v9, 0);
      goto LABEL_69;
    case 26:
      v28 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
      v29 = 0x101000001;
      goto LABEL_37;
    case 27:
    case 29:
      v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
      v9 = 16777217;
      goto LABEL_34;
    case 28:
      v28 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
      v29 = 0x100000101000001;
      goto LABEL_37;
    case 30:
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier")), "companionHeartbeat:", a3);
      goto LABEL_69;
    case 31:
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLVO2MaxCloudKitManager")), "receiveVO2MaxCloudKitDailyStatsFromWatch:", a3);
      goto LABEL_69;
    case 34:
      v70 = 0;
      v67 = objc_opt_class(NSString, v7);
      v66 = objc_opt_class(NSDictionary, v32);
      v34 = objc_opt_class(NSArray, v33);
      v36 = objc_opt_class(CLHRRecoveryInputHRData, v35);
      v38 = objc_opt_class(CLHRRecoveryInputWRData, v37);
      v40 = objc_opt_class(CLHRRecoverySessionData, v39);
      v42 = objc_opt_class(CLPredictedWalkDistanceData, v41);
      v44 = objc_opt_class(CLElevationGradeData, v43);
      v46 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v67, v66, v34, v36, v38, v40, v42, v44, objc_opt_class(NSUUID, v45), 0), a3, &v70);
      if (v70)
      {
        if (qword_10229FEB0 != -1)
          dispatch_once(&qword_10229FEB0, &stru_10218D390);
        v47 = qword_10229FEB8;
        if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v74[0] = v70;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to deserialize healthColdStorageUpdate : %@ ", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEB0 != -1)
            dispatch_once(&qword_10229FEB0, &stru_10218D390);
          v71 = 138412290;
          v72[0] = v70;
          LODWORD(v65) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 16, "Failed to deserialize healthColdStorageUpdate : %@ ", &v71, v65);
LABEL_63:
          v53 = (uint8_t *)v48;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v48);
          if (v53 != buf)
            free(v53);
        }
      }
      else
      {
        objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CMHealthColdStorageCompanionSyncService")), "receiveColdStorageDataUpdate:", v46);
LABEL_69:
        v56 = *(_BYTE *)(a1 + 168) || *(_BYTE *)(a1 + 169) || *(_QWORD *)(a1 + 176) != 0;
        sub_10061FAD8(a1, v56);
      }
      break;
    case 37:
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218D3B0);
      v30 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        v31 = objc_msgSend(a3, "length");
        *(_DWORD *)buf = 67109120;
        LODWORD(v74[0]) = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Phone received workout distance core analytics data from watch. Message size: %d bytes", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10218D3B0);
        v60 = qword_10229FCD8;
        v61 = objc_msgSend(a3, "length");
        v71 = 67109120;
        LODWORD(v72[0]) = v61;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 0, "Phone received workout distance core analytics data from watch. Message size: %d bytes", &v71);
        v63 = (uint8_t *)v62;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "receiveWorkoutDistanceAnalyticsMessage:", a3);
      goto LABEL_69;
    default:
      goto LABEL_69;
  }
}

void sub_100E734B8(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  if (sub_10075E1DC())
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10218D3F0);
    v4 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 224);
      v6 = *(unsigned __int8 *)(a1 + 110);
      *(_DWORD *)buf = 67109632;
      v17 = a2;
      v18 = 1024;
      v19 = v5;
      v20 = 1024;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "coarse elevation src,enable,%d,elevationSpectator,%d,fitnessTracking,%d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10218D3F0);
      v7 = *(unsigned __int8 *)(a1 + 224);
      v8 = *(unsigned __int8 *)(a1 + 110);
      v12 = 1024;
      v13 = v7;
      v14 = 1024;
      v15 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "coarse elevation src,enable,%d,elevationSpectator,%d,fitnessTracking,%d", &v11, 20, 67109632);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::toggleCoarseElevationSource(BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (a2)
    {
      if (*(_BYTE *)(a1 + 224))
      {
        if (*(_BYTE *)(a1 + 110))
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 5, 0);
          return;
        }
      }
      else if (*(_BYTE *)(a1 + 110))
      {
        return;
      }
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 5);
  }
}

uint64_t sub_100E736E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100E736FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 208))(a2, *(_QWORD *)(a1 + 32));
}

void sub_100E73714(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  _QWORD v7[2];
  uint8_t buf[1640];

  if (a2)
  {
    if (!*(_BYTE *)(a1 + 288) && sub_10061F468())
    {
      objc_msgSend(*(id *)(a1 + 248), "registerClient:forNotification:", *(_QWORD *)(a1 + 240), 1);
      *(_BYTE *)(a1 + 288) = 1;
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_10218D350);
      v3 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "supported watch connected, phone subscribes to absolute altitude updates", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_10218D350);
        LOWORD(v7[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "supported watch connected, phone subscribes to absolute altitude updates", v7, 2, v7[0]);
LABEL_22:
        v6 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::toggleBarometerCalibration(BOOL)", "%s\n", v4);
        if (v6 != buf)
          free(v6);
      }
    }
  }
  else if (*(_BYTE *)(a1 + 288))
  {
    objc_msgSend(*(id *)(a1 + 248), "unregisterClient:forNotification:", *(_QWORD *)(a1 + 240), 1);
    *(_BYTE *)(a1 + 288) = 0;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10218D350);
    v5 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "supported watch disconnected, phone unsubscribes from absolute altitude updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_10218D350);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "supported watch disconnected, phone unsubscribes from absolute altitude updates", v7, 2, v7[0]);
      goto LABEL_22;
    }
  }
}

void sub_100E739B0(_BYTE *a1, uint64_t a2, int *a3, double *a4)
{
  int v6;
  NSData *v7;
  NSObject *v8;
  const char *v9;
  NSData *v10;
  NSObject *v11;
  NSData *v12;
  NSObject *v13;
  uint8_t *v14;
  NSData *v15;
  double v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[3];
  uint8_t buf[1632];
  _QWORD v26[9];

  v6 = *a3;
  if (*a3 == 7)
  {
    if (!a1[169])
      return;
    v24[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[1]);
    v24[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a4 + 4));
    v24[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a4 + 5));
    v22 = 0;
    v10 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v24, 3), 0, &v22);
    if (v22)
    {
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_10218D3D0);
      v11 = qword_10229FDF8;
      if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Odometer(Elevation) entry", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDF0 != -1)
          dispatch_once(&qword_10229FDF0, &stru_10218D3D0);
        LOWORD(v21[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "#Warning error serializing Odometer(Elevation) entry", v21, 2, v21[0]);
        goto LABEL_34;
      }
      return;
    }
    v15 = v10;
    v16 = 120.0;
    v17 = (uint64_t)a1;
    v18 = 6;
LABEL_39:
    v19 = 1;
    v20 = 0;
LABEL_41:
    sub_10061F764(v16, v17, v18, v15, 300, v19, 0, v20, 0, 0);
    return;
  }
  if (v6 != 5)
  {
    if (v6 != 4 || !a1[168])
      return;
    v26[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *a4);
    v26[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[1]);
    v26[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[3]);
    v26[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[4]);
    v26[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[6]);
    v26[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[2]);
    v26[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[7]);
    v26[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[8]);
    v26[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[5]);
    v22 = 0;
    v7 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v26, 9), 0, &v22);
    if (v22)
    {
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_10218D3D0);
      v8 = qword_10229FDF8;
      if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Odometer(GPS) entry", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDF0 != -1)
          dispatch_once(&qword_10229FDF0, &stru_10218D3D0);
        LOWORD(v21[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "#Warning error serializing Odometer(GPS) entry", v21, 2, v21[0]);
LABEL_34:
        v14 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v9);
        if (v14 != buf)
          free(v14);
        return;
      }
      return;
    }
    v15 = v7;
    v16 = 120.0;
    v17 = (uint64_t)a1;
    v18 = 2;
    goto LABEL_39;
  }
  if (!a1[224])
  {
    sub_100E734B8((uint64_t)a1, 0);
    return;
  }
  v23[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *a4);
  v23[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a4 + 2));
  v22 = 0;
  v12 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2), 0, &v22);
  if (!v22)
  {
    v15 = v12;
    v16 = 180.0;
    v17 = (uint64_t)a1;
    v18 = 13;
    v19 = 0;
    v20 = 1;
    goto LABEL_41;
  }
  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_10218D3D0);
  v13 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Odometer(Coarse Elevation) entry", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_10218D3D0);
    LOWORD(v21[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "#Warning error serializing Odometer(Coarse Elevation) entry", v21, 2, v21[0]);
    goto LABEL_34;
  }
}

id sub_100E73F58(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 4);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 7);
    *(_WORD *)(a1 + 168) = 0;
  }
  sub_100E72538(a1);
  sub_100E725C4(a1);
  return sub_100E73FD0(a1);
}

id sub_100E73FD0(uint64_t a1)
{
  id result;

  result = sub_10061F468();
  if ((_DWORD)result && !*(_BYTE *)(a1 + 289))
  {
    if (*(_BYTE *)(a1 + 109))
    {
      result = sub_10061F764(120.0, a1, 23, 0, 300, 0, 0, 0, 0, 0);
      *(_BYTE *)(a1 + 289) = 1;
    }
  }
  return result;
}

void sub_100E74044(uint64_t a1)
{
  NSObject *v2;
  CFAbsoluteTime v3;
  uint64_t v4;
  CFAbsoluteTime v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  CFAbsoluteTime v9;
  uint8_t buf[4];
  CFAbsoluteTime v11;

  if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 192) > *(double *)(a1 + 184))
  {
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_10218D390);
    v2 = qword_10229FEB8;
    if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEBUG))
    {
      v3 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 192);
      *(_DWORD *)buf = 134217984;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Time to the last received message from Watch is %lf. Lost connection to Watch.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEB0 != -1)
        dispatch_once(&qword_10229FEB0, &stru_10218D390);
      v4 = qword_10229FEB8;
      v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 192);
      v8 = 134217984;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 2, "Time to the last received message from Watch is %lf. Lost connection to Watch.", COERCE_DOUBLE(&v8));
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierCompanion::handleStateSyncTimerExpiry()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_10061EED4(a1, 0);
  }
}

id sub_100E74228(id result, _DWORD *a2, __int128 *a3)
{
  __int128 v3;
  int v4;
  __int128 v5;
  __int128 v6;
  int v7;

  if (*a2 == 1)
  {
    v4 = 1;
    v3 = a3[1];
    v5 = *a3;
    v6 = v3;
    v7 = *((_DWORD *)a3 + 8);
    return sub_10061F764(120.0, (uint64_t)result, 18, +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v4, 40), 300, 0, 0, 0, 0, 0);
  }
  return result;
}

void sub_100E742E0(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100E7430C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E74338(id a1)
{
  qword_10229FEB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_100E74364(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100E74390(id a1)
{
  qword_10229FDF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_100E743BC(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

uint64_t sub_100E743E8()
{
  sub_1015A2E04(qword_102308CB0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308CB0, (void *)&_mh_execute_header);
}

_QWORD *sub_100E7442C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_10218D420;
  a1[1] = a2;
  sub_100270E34((uint64_t)(a1 + 2), a3);
  return a1;
}

double sub_100E74490()
{
  return 0.0;
}

uint64_t sub_100E7449C()
{
  return 0;
}

uint64_t sub_100E744A4()
{
  return 0;
}

uint64_t sub_100E744AC()
{
  return 0;
}

uint64_t sub_100E744B4()
{
  return 0;
}

uint64_t sub_100E744BC()
{
  return 0;
}

uint64_t sub_100E744D0()
{
  return 0;
}

uint64_t sub_100E744D8()
{
  return 0;
}

uint64_t sub_100E744E4()
{
  return 0;
}

uint64_t sub_100E744EC()
{
  return 0;
}

uint64_t sub_100E744F4()
{
  return 0;
}

uint64_t sub_100E744FC()
{
  return 0;
}

uint64_t sub_100E7452C()
{
  return 0;
}

uint64_t sub_100E74534()
{
  return 0;
}

uint64_t sub_100E74544()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_100E7454C()
{
  return 0;
}

uint64_t sub_100E74554()
{
  return 0;
}

uint64_t sub_100E74578()
{
  return 0;
}

uint64_t sub_100E74584()
{
  return 0;
}

uint64_t sub_100E74590()
{
  return 0;
}

uint64_t sub_100E74598()
{
  return 0;
}

_QWORD *sub_100E745AC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10218D420;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100E74608(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_10218D420;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100E74674(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100E74744((uint64_t)a1, "CyclingFTPInputHistory", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_10218D640;
  a1[9] = off_10218D6F8;
  sub_100E81598(a1 + 46, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100E74718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E74744(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v18;
  void *__p[2];
  uint64_t v21;
  uint64_t v22;
  __int16 v23;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_10218D988;
  *(_QWORD *)(a1 + 72) = off_10218DA30;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10218D988;
  *(_QWORD *)(a1 + 72) = off_10218DA30;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 240) = xmmword_101BEAB40;
  *(_DWORD *)(a1 + 256) = -1082130432;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 272) = _Q0;
  *(_DWORD *)(a1 + 288) = 12000;
  *(_QWORD *)(a1 + 296) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 304));
  *(_QWORD *)(a1 + 304) = &off_102138DD8;
  v18 = *(_QWORD *)(a1 + 112);
  v22 = a1 + 112;
  (*(void (**)(void))(v18 + 16))();
  v23 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v21 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  return a1;
}

void sub_100E74B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[37] = off_102138DA8;
  sub_100427950(v27);
  sub_100554930(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100E74BB8()
{
  JUMPOUT(0x100E74B98);
}

_QWORD *sub_100E74BC0(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10218DA30;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10218D988;
  a1[37] = off_102138DA8;
  sub_100427950(a1 + 38);
  sub_100554930(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100E74C40(uint64_t a1)
{
  return sub_100E74BC0((_QWORD *)(a1 - 72));
}

void sub_100E74C48(_QWORD *a1)
{
  sub_100E74BC0(a1);
  operator delete();
}

void sub_100E74C6C(uint64_t a1)
{
  sub_100E74BC0((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100E74C94(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];
  __int16 v17;

  v7 = a1 + 14;
  v6 = a1[14];
  v16[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v6 + 16))(a1 + 14);
  v17 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 9))
  {
    sub_10001E638(a1[10]);
    sub_100087AF4(a1 + 46, v16);
    v8 = (sqlite3_stmt *)sub_100026CC8(v16[0]);
    if (sub_1000890C4(v8, 1, a3 - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
    {
      v9 = a1[10];
      v10 = (sqlite3_stmt *)sub_100026CC8(v16[0]);
      sub_10023C9B0(v9, v10);
      v11 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
    }
    else
    {
      v11 = -1;
    }
    sub_10001E99C(a1[10]);
    v12 = a1[10];
    if (*(uint64_t *)(v12 + 88) <= 0)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = *(_QWORD *)(v12 + 88);
    sub_100053048(v12, v13);
    v14 = v16[0];
    v16[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v11 = -1;
  }
  (*(void (**)(uint64_t *))(*v7 + 24))(v7);
  return v11;
}

void sub_100E74DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E74E0C(uint64_t *a1, uint64_t a2)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  return sub_100E74C94(a1, a2, Current);
}

uint64_t sub_100E74E38(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  double Current;

  v3 = (uint64_t *)(a1 - 72);
  Current = CFAbsoluteTimeGetCurrent();
  return sub_100E74C94(v3, a2, Current);
}

uint64_t sub_100E74E64(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM CyclingFTPInputHistory");
  return 0xFFFFFFFFLL;
}

void sub_100E74F04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E74F28(uint64_t a1)
{
  return sub_100E74E64(a1 - 72);
}

uint64_t sub_100E74F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 8);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 288))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_100555498(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218DA70);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218DA70);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_100E77C80(v12, a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218DA70);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218DA70);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_100E752FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E75324(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int16 v9;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v8 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v9 = 256;
  if (sub_10008950C(v6))
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from CyclingFTPInputHistory ORDER BY start_time ASC");
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_100E75530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E75570(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  float v9;
  sqlite3_stmt *v10;
  float v11;
  sqlite3_stmt *v12;
  float v13;
  sqlite3_stmt *v14;
  float v15;
  sqlite3_stmt *v16;
  float v17;
  sqlite3_stmt *v18;
  double v19;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int64(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v9 = sqlite3_column_double(v8, 2);
  *(float *)(a2 + 16) = v9;
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v11 = sqlite3_column_double(v10, 3);
  *(float *)(a2 + 20) = v11;
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v13 = sqlite3_column_double(v12, 4);
  *(float *)(a2 + 24) = v13;
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v15 = sqlite3_column_double(v14, 5);
  *(float *)(a2 + 28) = v15;
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v17 = sqlite3_column_double(v16, 6);
  *(float *)(a2 + 32) = v17;
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v19 = sqlite3_column_double(v18, 7);
  result = 0;
  *(double *)(a2 + 40) = v19;
  return result;
}

uint64_t sub_100E75674(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[3];
  __int16 v12;
  uint8_t buf[16];

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v11[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v12 = 256;
  if ((sub_10008950C(v6) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM CyclingFTPInputHistory WHERE start_time >= ? and start_time <= ? ORDER BY start_time ASC");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10218D788);
  v7 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CyclingFTPInputHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10218D788);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "CyclingFTPInputHistory, DB not accessible", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "CMError CLCyclingFTPInputDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<CLCyclingFTPInput> &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return 109;
}

void sub_100E75A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E75A68(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100634364(a1[10], "CyclingFTPInputHistory", (const char **)&off_10218D7A8, (const std::string::value_type **)&off_1022FBE80, 0);
    result = sub_10063D314(a1[10], "DELETE FROM CyclingFTPInputHistory WHERE start_time < ?");
    a1[46] = result;
    a1[47] = v3;
  }
  return result;
}

uint64_t sub_100E75AC8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM CyclingFTPInputHistory");
  return result;
}

void sub_100E75B5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E75B7C(uint64_t a1)
{
  return sub_100E75AC8(a1 - 72);
}

void sub_100E75B8C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[1640];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO CyclingFTPInputHistory (start_time, hr, hr_confidence, vertical_speed, external_cadence, external_power, raw_gps_speed) VALUES (?, ?, ?, ?, ?, ?, ?)");
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_10218D958);
  v4 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CyclingFTPInputHistory, database isn't available for entry with startTime, %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_10218D958);
    v6 = *(_QWORD *)(a2 + 8);
    v9 = 134349056;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "CyclingFTPInputHistory, database isn't available for entry with startTime, %{public}f", &v9, 12);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLCyclingFTPInputDb::insertRecordUL(const CLCyclingFTPInput &, BOOL)", "%s\n", v7);
    if (v8 != (char *)buf)
      free(v8);
  }
}

void sub_100E75F84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E75FB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_100E75FC0()
{
  return 0;
}

uint64_t sub_100E75FC8(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM CyclingFTPInputHistory ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_100E76048(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E76068(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10192FD60(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100E763B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100E7641C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10218DA70);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218DA70);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218DA70);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100E769E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100E76A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_100E76A2C(uint64_t a1)
{
  return sub_100E7641C(a1 - 72);
}

void sub_100E76A34(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100E76A60(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

uint64_t sub_100E76A8C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10192FECC(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100E76D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  sub_1018B38B4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

id *sub_100E76DFC(uint64_t a1, __int128 *a2, char a3)
{
  int v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  double v38;
  char v39[8];
  double v40;
  __int128 v41;
  int v42;
  __int128 v43;
  unint64_t v44;
  id v45[2];
  int v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  uint8_t buf[4];
  double v51;
  __int16 v52;
  uint64_t v53;

  v45[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v45[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v45);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v40 = -1.0;
  v41 = xmmword_101BEAB40;
  v42 = -1082130432;
  __asm { FMOV            V0.2D, #-1.0 }
  v43 = _Q0;
  v44 = 0xBFF0000000000000;
  v11 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v39);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v11)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218DA70);
      v19 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218DA70);
        LOWORD(v46) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v46, 2);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      goto LABEL_43;
    }
    v12 = *((double *)a2 + 1);
    v13 = v40;
    v14 = v12 - v40;
    if (v12 - v40 < 0.0)
      v14 = -(v12 - v40);
    if (v14 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218DA70);
      v15 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v51 = v40;
        v52 = 2050;
        v53 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218DA70);
        v30 = *((_QWORD *)a2 + 1);
        v46 = 134349312;
        v47 = v40;
        v48 = 2050;
        v49 = v30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v46, 22);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v12 = *((double *)a2 + 1);
      v13 = v40;
    }
    if (v12 < v13)
    {
      if (v13 - v12 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218DA70);
        v17 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v18 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v51 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218DA70);
          v33 = *((double *)a2 + 1);
          v46 = 134217984;
          v47 = v33;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v46));
          v35 = (uint8_t *)v34;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v22 = v12 - v13;
      v23 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v38 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10218DA70);
        v23 = v38;
      }
      v24 = v22 - v23;
      v25 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v51 = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218DA70);
        v46 = 134217984;
        v47 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v46));
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v24);
    }
    (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v39, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v26 = *a2;
  v27 = a2[1];
  v28 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v28;
  *(_OWORD *)(a1 + 224) = v26;
  *(_OWORD *)(a1 + 240) = v27;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v45);
}

void sub_100E77568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E77594(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101930038(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100E777F4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019301A4(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100E77A2C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101930310(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100E77C54(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_100E77C80(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E77D14(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_100E77D14(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x40;
  v4 = v2 - 64;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E77FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E78028(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  sub_100270E34((uint64_t)v20, a3);
  sub_100270E34((uint64_t)v18, a4);
  sub_100270E34((uint64_t)v16, a5);
  sub_100D6C128((uint64_t)a1, a2, CFSTR("Routine"), 1, 1, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *a1 = &off_10218DAA0;
  return a1;
}

void sub_100E78178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = a13;
  if (a13 == v21)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a17;
  if (a17 == &a14)
  {
    v26 = 4;
    v25 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a21;
  if (a21 == &a18)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void sub_100E78230(uint64_t a1)
{
  sub_100D6C25C(a1);
  operator delete();
}

id sub_100E78254(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  void *v4;
  NSObject *v6;
  id v7;
  int v8;
  int v9;
  id v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  void *v16;
  unint64_t size;
  int v18;
  NSObject *v19;
  id v20;
  uint64_t v22;
  id v23;
  int v24;
  int v25;
  const char *v26;
  std::string *v27;
  uint64_t v28;
  id v29;
  const char *v30;
  std::string *v31;
  __int128 __dst;
  _BYTE v33[7];
  char v34;
  void *__p[2];
  unsigned __int8 v36;
  _DWORD v37[2];
  _BYTE v38[16];
  std::string v39;
  std::string buf[68];

  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *a2 = sub_1007FA8FC(v4);
    *a3 = sub_1007FA8C8(*(void **)(a1 + 128));
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218DB40);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v8 = sub_1007FA8FC(*(void **)(a1 + 128));
      v9 = sub_1007FA8C8(*(void **)(a1 + 128));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v8;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsToDict,reading contents of asset for sending to routined,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218DB40);
      v22 = qword_1022A02A8;
      v23 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v24 = sub_1007FA8FC(*(void **)(a1 + 128));
      v25 = sub_1007FA8C8(*(void **)(a1 + 128));
      LODWORD(v39.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
      WORD2(v39.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v39.__r_.__value_.__r.__words[1] + 6) = v24;
      WORD1(v39.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v39.__r_.__value_.__r.__words[2]) = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#CLConfig,%{public}s,copySettingsToDict,reading contents of asset for sending to routined,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v39, 24);
      v27 = (std::string *)v26;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLRoutineConfigAsset::copySettingsToDict(int32_t &, int32_t &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    sub_100119F3C(v38);
    sub_100D6D640(a1, CFSTR("settings.plist"), (uint64_t)v38);
    v10 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", sub_10011A5AC((uint64_t)v38));
    sub_1015A2E04(&v39, "#CLConfig,");
    v11 = std::string::append(&v39, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_1015A2E04(__p, ",copySettingsToDict,");
    if ((v36 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v36 & 0x80u) == 0)
      v14 = v36;
    else
      v14 = (std::string::size_type)__p[1];
    v15 = std::string::append(buf, (const std::string::value_type *)v13, v14);
    v16 = (void *)v15->__r_.__value_.__r.__words[0];
    size = v15->__r_.__value_.__l.__size_;
    v37[0] = v15->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v37 + 3) = *(_DWORD *)((char *)&v15->__r_.__value_.__r.__words[2] + 3);
    v18 = SHIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((char)v36 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((v18 & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((v18 & 0x80000000) == 0)
    {
LABEL_19:
      *(_QWORD *)&__dst = v16;
      *((_QWORD *)&__dst + 1) = size;
      *(_DWORD *)v33 = v37[0];
      *(_DWORD *)&v33[3] = *(_DWORD *)((char *)v37 + 3);
      v34 = v18;
      goto LABEL_28;
    }
    sub_100115CE4(&__dst, v16, size);
LABEL_28:
    sub_1007FA930(&__dst, v10);
    if (v34 < 0)
    {
      operator delete((void *)__dst);
      if ((v18 & 0x80000000) == 0)
        goto LABEL_30;
    }
    else if ((v18 & 0x80000000) == 0)
    {
LABEL_30:
      sub_10011A5A8(v38);
      return v10;
    }
    operator delete(v16);
    goto LABEL_30;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218DB40);
  v19 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v20 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,copySettingsToDict,no asset present", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218DB40);
    v28 = qword_1022A02A8;
    v29 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(v39.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 0, "#Warning #CLConfig,%{public}s,copySettingsToDict,no asset present", &v39, 12);
    v31 = (std::string *)v30;
    sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLRoutineConfigAsset::copySettingsToDict(int32_t &, int32_t &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  return 0;
}

void sub_100E78770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;

  operator delete(v39);
  sub_10011A5A8(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100E78804(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v8;
  id v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  id v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218DB40);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v4 = sub_1007FA8FC(*(void **)(a1 + 128));
    v5 = sub_1007FA8C8(*(void **)(a1 + 128));
    *(_DWORD *)buf = 136446722;
    v21 = v3;
    v22 = 1026;
    v23 = v4;
    v24 = 1026;
    v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kRoutineConfigAssetChangedNotification for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218DB40);
    v8 = qword_1022A02A8;
    v9 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v10 = sub_1007FA8FC(*(void **)(a1 + 128));
    v11 = sub_1007FA8C8(*(void **)(a1 + 128));
    v14 = 136446722;
    v15 = v9;
    v16 = 1026;
    v17 = v10;
    v18 = 1026;
    v19 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#CLConfig,%{public}s,sending kRoutineConfigAssetChangedNotification for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v14, 24);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLRoutineConfigAsset::sendNotifications()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kRoutineConfigAssetChangedNotification"), 0, 0, 1u);
  sub_100119F3C(buf);
  sub_100D6D640(a1, CFSTR("settings.plist"), (uint64_t)buf);
  sub_100D6EF24(a1, 8, (uint64_t)buf);
  return sub_10011A5A8(buf);
}

void sub_100E78A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E78A90(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void sub_100E78A9C(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100E78AC8()
{
  if (qword_102308CC8 != -1)
    dispatch_once(&qword_102308CC8, &stru_10218DB60);
  return qword_102311748;
}

void sub_100E78B08(id a1)
{
  +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", sub_10024455C());
  operator new();
}

void sub_100E78B68()
{
  operator delete();
}

uint64_t sub_100E78B8C(uint64_t a1, uint64_t a2)
{
  NSObject *global_queue;
  _QWORD block[5];

  *(_QWORD *)a1 = off_10218DB90;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_WORD *)(a1 + 56) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 64), "");
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100E78C5C;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(global_queue, block);
  return a1;
}

void sub_100E78C30(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1000F34E0(v2);
  _Unwind_Resume(a1);
}

void sub_100E78C5C()
{
  sub_1012B2C64();
}

void sub_100E78D1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 40);
  *(_QWORD *)(v1 - 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sub_100E78D48(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  char v5;
  uint64_t v6;
  _QWORD v7[5];
  char v8;

  if (!*a2)
  {
    v5 = sub_100E78DBC();
    v6 = sub_100127B9C();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100E7A244;
    v7[3] = &unk_1021468D0;
    v7[4] = a4;
    v8 = v5;
    sub_1000A50A8(v6, (uint64_t)v7);
  }
}

uint64_t sub_100E78DBC()
{
  unsigned int v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  v7 = 0;
  sub_1001E4804(&v5);
  v0 = sub_1001E48E4(v5, (uint64_t)CFSTR("GestureServiceEnabled"), &v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v7)
    return v0;
  else
    return 0;
}

void sub_100E78E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E78E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v2;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100E78EA0(v3, *(unsigned __int8 *)(a1 + 48));
}

void sub_100E78EA0(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;

  if (qword_10229FCF0 != -1)
    dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
  v4 = qword_10229FCF8;
  if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Disabling";
    if (a2)
      v5 = "Enabling";
    *(_DWORD *)buf = 136446210;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s ear gesture", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
    v6 = "Disabling";
    if (a2)
      v6 = "Enabling";
    v9 = 136446210;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "%{public}s ear gesture", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEarGestureClientManager::setEnabledInternal(BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_BYTE *)(a1 + 56) = a2;
  sub_100E791EC(a1);
}

uint64_t sub_100E79088(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10218DB90;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1000F34E0((_QWORD *)(a1 + 24));
  return a1;
}

void sub_100E790E8(uint64_t a1)
{
  sub_100E79088(a1);
  operator delete();
}

void sub_100E7910C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v9[7];
  int v10;

  v8 = sub_100127B9C();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100E79188;
  v9[3] = &unk_10218DBA8;
  v9[5] = a1;
  v9[6] = a2;
  v10 = a3;
  v9[4] = a4;
  sub_1000A50A8(v8, (uint64_t)v9);
}

void sub_100E79188(uint64_t a1)
{
  sub_100E7919C(*(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(void **)(a1 + 32));
}

void sub_100E7919C(_QWORD *a1, uint64_t a2, int a3, void *a4)
{
  sub_100E796F4(a1, a2);
  if (a4)
    sub_100E79A4C(a1, a2, a3, a4);
  sub_100E791EC((uint64_t)a1);
}

void sub_100E791EC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  sub_100E79CA4(a1);
  if (*(_BYTE *)(a1 + 57) && *(_QWORD *)(a1 + 40))
  {
    if (sub_100E795A4(a1))
    {
      v2 = sub_100CD0E98();
      sub_100CD1E18(v2, a1 + 64);
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
      v3 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registering for ear gesture notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Registering for ear gesture notifications", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureClientManager::refreshDispatcherIfNecessaryInternal()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      operator new();
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v4 = (uint64_t *)(a1 + 16);
    if (v5)
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
      v6 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unregistering for ear gesture notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Unregistering for ear gesture notifications", v12, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLEarGestureClientManager::refreshDispatcherIfNecessaryInternal()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      v7 = sub_100CD0E98();
      sub_1000A4A6C(v7, 0, *v4);
      if (*v4)
        (*(void (**)(uint64_t))(*(_QWORD *)*v4 + 8))(*v4);
      *v4 = 0;
    }
  }
}

void sub_100E79578()
{
  operator delete();
}

uint64_t sub_100E795A4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  unint64_t v5;
  void **v6;
  size_t v7;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;

  v2 = a1 + 64;
  if (*(char *)(a1 + 87) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v2;
    v14 = *(_QWORD *)(a1 + 80);
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) & 0xFFFFFFFE) == 2)
    sub_1015A2E04(&v11, "EarGesture_Prototype_Msgs_1");
  else
    sub_1015A2E04(&v11, "EarGesture_Prototypes_Siri_1");
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v2);
  *(_OWORD *)v2 = v11;
  *(_QWORD *)(v2 + 16) = v12;
  v3 = SHIBYTE(v14);
  if (v14 >= 0)
    v4 = (void *)HIBYTE(v14);
  else
    v4 = __p[1];
  if (v4)
  {
    if (*(char *)(a1 + 87) < 0)
    {
      v2 = *(_QWORD *)(a1 + 64);
      v5 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v5 = *(unsigned __int8 *)(a1 + 87);
    }
    v6 = v14 >= 0 ? __p : (void **)__p[0];
    v7 = (unint64_t)v4 >= v5 ? v5 : (size_t)v4;
    if (!memcmp((const void *)v2, v6, v7) && v4 == (void *)v5)
    {
      v9 = 0;
      if ((v3 & 0x80000000) == 0)
        return v9;
      goto LABEL_27;
    }
  }
  v9 = 1;
  if (v3 < 0)
LABEL_27:
    operator delete(__p[0]);
  return v9;
}

void sub_100E796D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E796F4(_QWORD *a1, uint64_t a2)
{
  uint64_t *i;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (a1[5])
  {
    for (i = (uint64_t *)a1[4]; i != a1 + 3; i = (uint64_t *)i[1])
    {
      if (i[3] == a2)
      {
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
        v8 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134283521;
          v15 = a2;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Removing client %{private}p", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
          v12 = 134283521;
          v13 = a2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Removing client %{private}p", &v12, 12);
          v11 = (uint8_t *)v10;
          sub_100512490("Generic", 1, 0, 2, "void CLEarGestureClientManager::removeClientInternal(const void *)", "%s\n", v10);
          if (v11 != buf)
            free(v11);
        }
        _Block_release((const void *)i[4]);
        v9 = *i;
        *(_QWORD *)(v9 + 8) = i[1];
        *(_QWORD *)i[1] = v9;
        --a1[5];
        operator delete(i);
        return;
      }
    }
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
    v5 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Unknown client instance %{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
      v12 = 134283521;
      v13 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "Unknown client instance %{private}p", &v12, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEarGestureClientManager::removeClientInternal(const void *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

_DWORD *sub_100E79A4C(_QWORD *a1, uint64_t a2, int a3, void *aBlock)
{
  void *v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t *i;
  _DWORD *result;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;

  v7 = _Block_copy(aBlock);
  if (qword_10229FCF0 != -1)
    dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
  v8 = qword_10229FCF8;
  if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134283777;
    v21 = a2;
    v22 = 1026;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Adding client %{private}p with priority %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
    v16 = 134283777;
    v17 = a2;
    v18 = 1026;
    v19 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Adding client %{private}p with priority %{public}d", &v16, 18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLEarGestureClientManager::addClientInternal(const void *, int, CLEarGestureClientManager::Handler)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v9 = a1 + 3;
  for (i = (uint64_t *)a1[4]; ; i = (uint64_t *)i[1])
  {
    if (i == v9)
    {
      result = operator new(0x28uLL);
      result[4] = a3;
      *((_QWORD *)result + 3) = a2;
      *((_QWORD *)result + 4) = v7;
      v12 = *v9;
      *(_QWORD *)(v12 + 8) = result;
      *v9 = (uint64_t)result;
      *(_QWORD *)result = v12;
      *((_QWORD *)result + 1) = v9;
      goto LABEL_12;
    }
    if (*((_DWORD *)i + 4) <= a3)
      break;
  }
  result = operator new(0x28uLL);
  result[4] = a3;
  *((_QWORD *)result + 3) = a2;
  *((_QWORD *)result + 4) = v7;
  v13 = *i;
  *(_QWORD *)(v13 + 8) = result;
  *(_QWORD *)result = v13;
  *i = (uint64_t)result;
  *((_QWORD *)result + 1) = i;
LABEL_12:
  ++a1[5];
  return result;
}

void sub_100E79CA4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  const char *v5;
  int v6;
  const char *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;

  *(_BYTE *)(a1 + 57) = 0;
  v2 = *(int *)(*(_QWORD *)(a1 + 32) + 16);
  if ((int)v2 > 1 || *(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(a1 + 57) = 1;
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
    v3 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(unsigned __int8 *)(a1 + 57);
      if (v2 > 3)
        v5 = "PriorityNotSupported!";
      else
        v5 = off_10218DC68[v2];
      *(_DWORD *)buf = 67240450;
      v14 = v4;
      v15 = 2082;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ear Gesture EnabledForTopClient: %{public}d (%{public}s)", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
      v6 = *(unsigned __int8 *)(a1 + 57);
      if (v2 > 3)
        v7 = "PriorityNotSupported!";
      else
        v7 = off_10218DC68[v2];
      v10[0] = 67240450;
      v10[1] = v6;
      v11 = 2082;
      v12 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Ear Gesture EnabledForTopClient: %{public}d (%{public}s)", v10, 18);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEarGestureClientManager::updateEnabledStatusForTopClient()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_100E79ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100E79F34;
  v5[3] = &unk_102143528;
  v5[4] = a2;
  v5[5] = a1;
  sub_1000A50A8(v4, (uint64_t)v5);
}

void sub_100E79F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  NSObject *global_queue;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD block[7];
  __int128 v15;
  int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  __int128 *v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  __int128 *v24;
  __int128 v25;
  int v26;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 40))
  {
    v3 = *(_QWORD *)(v1 + 32);
    v13 = *(_QWORD *)(v3 + 16);
    v4 = *(_QWORD *)(v3 + 24);
    v5 = _Block_copy(*(const void **)(v3 + 32));
    v6 = *(__int128 **)(a1 + 40);
    v7 = *((_DWORD *)v6 + 4);
    v25 = *v6;
    v26 = v7;
    if (v13 > 3)
      v8 = "PriorityNotSupported!";
    else
      v8 = off_10218DC68[(int)v13];
    sub_100CD3774((uint64_t)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8), 1);
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
    v9 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283779;
      v22 = v4;
      v23 = 2081;
      v24 = &v25;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Dispatching ear gesture to instance %{private}p from prototype %{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_10218DBF8);
      v17 = 134283779;
      v18 = v4;
      v19 = 2081;
      v20 = &v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "Dispatching ear gesture to instance %{private}p from prototype %{private}s", &v17, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "static void CLEarGestureClientManager::onEarGesture(const CLEarGestureNotifier::NotificationData *, void *)_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    global_queue = dispatch_get_global_queue(2, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100E7A1CC;
    block[3] = &unk_10218DBC8;
    block[4] = v13;
    block[5] = v4;
    block[6] = v5;
    v15 = v25;
    v16 = v26;
    dispatch_async(global_queue, block);
  }
}

void sub_100E7A1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  int v6;

  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 72);
  v5 = *(_OWORD *)(a1 + 56);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v4 + 16))(v4, &v5, a3);
  _Block_release(*(const void **)(a1 + 48));
}

void sub_100E7A244(uint64_t a1)
{
  sub_100E78EA0(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100E7A254(id a1)
{
  qword_10229FCF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

uint64_t sub_100E7A280(uint64_t a1, uint64_t a2)
{
  _OWORD v4[2];
  int v5;

  *(_QWORD *)a1 = off_10218DC98;
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 20) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  v4[0] = xmmword_101C2B13C;
  v4[1] = unk_101C2B14C;
  v5 = 973279855;
  sub_100C9B770(a1 + 28, (uint64_t)v4);
  return a1;
}

BOOL sub_100E7A300(uint64_t a1)
{
  _BOOL8 result;
  _OWORD v3[2];
  int v4;

  *(_BYTE *)(a1 + 10) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 20) = 0x3F80000000000000;
  v3[0] = xmmword_101C2B13C;
  v3[1] = unk_101C2B14C;
  v4 = 973279855;
  result = sub_100C9B770(a1 + 28, (uint64_t)v3);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  return result;
}

void sub_100E7A370(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned int v4;
  _BOOL4 v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  NSObject *v14;
  float v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _BYTE v36[10];
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  _BOOL4 v44;
  uint8_t buf[4];
  float v46;
  _BYTE v47[10];
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  _BOOL4 v55;

  v2 = atomic_load((unsigned __int8 *)&qword_102308CD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102308CD8))
  {
    dword_102308CD0 = 1060439283;
    __cxa_guard_release(&qword_102308CD8);
  }
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(unsigned __int16 *)(v3 + 10);
  if (*(_DWORD *)(v3 + 12) == v4)
  {
    if (*(_BYTE *)(v3 + 417))
    {
      v5 = !sub_100B27754(v3);
      v3 = *(_QWORD *)(a1 + 56);
      if (v5)
      {
        v20 = 0;
        v6 = *(float *)(v3 + 216);
        v7 = *(float *)(v3 + 220);
        v8 = *(float *)(v3 + 224);
        *(float *)buf = v6;
        v46 = v7;
        *(float *)v47 = v8;
        v21 = 0.0;
        do
        {
          v21 = v21 + (float)(*(float *)&buf[v20] * *(float *)&buf[v20]);
          v20 += 4;
        }
        while (v20 != 12);
        if (sqrtf(v21) > 0.00000011921)
        {
          v22 = 0;
          v23 = 0.0;
          do
          {
            v23 = v23 + (float)(*(float *)&buf[v22] * *(float *)&buf[v22]);
            v22 += 4;
          }
          while (v22 != 12);
          v24 = sqrtf(v23);
          v6 = v6 / v24;
          v7 = v7 / v24;
          v8 = v8 / v24;
        }
        goto LABEL_13;
      }
      v4 = *(unsigned __int16 *)(v3 + 10);
    }
    v6 = sub_1006877E0((unsigned __int16 *)(v3 + 8), 0, v4);
    v9 = 0;
    *(float *)buf = v6;
    v46 = v7;
    *(float *)v47 = v8;
    v10 = 0.0;
    do
    {
      v10 = v10 + (float)(*(float *)&buf[v9] * *(float *)&buf[v9]);
      v9 += 4;
    }
    while (v9 != 12);
    if (sqrtf(v10) > 0.00000011921)
    {
      v11 = 0;
      v12 = 0.0;
      do
      {
        v12 = v12 + (float)(*(float *)&buf[v11] * *(float *)&buf[v11]);
        v11 += 4;
      }
      while (v11 != 12);
      v13 = sqrtf(v12);
      v6 = v6 / v13;
      v7 = v7 / v13;
      v8 = v8 / v13;
    }
    v5 = 0;
LABEL_13:
    *(_QWORD *)&v33 = 1065353216;
    LODWORD(v34) = 0;
    if (fabsf(v6) > *(float *)&dword_102308CD0)
    {
      *(float *)&v33 = (float)(v8 * -0.0) - v7;
      *((float *)&v33 + 1) = v6 + (float)(v8 * 0.0);
      *(float *)&v34 = (float)(v7 * -0.0) + (float)(v6 * 0.0);
    }
    *(_BYTE *)(a1 + 10) = sub_100E7A784(a1, (float *)&v33, (uint64_t)&v33, 0.04);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218DD88);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v15) = *(unsigned __int8 *)(a1 + 10);
      v16 = *(float *)(a1 + 12);
      v17 = *(float *)(a1 + 16);
      v18 = *(float *)(a1 + 20);
      v19 = *(float *)(a1 + 24);
      *(_DWORD *)buf = 67110400;
      v46 = v15;
      *(_WORD *)v47 = 2048;
      *(double *)&v47[2] = v16;
      v48 = 2048;
      v49 = v17;
      v50 = 2048;
      v51 = v18;
      v52 = 2048;
      v53 = v19;
      v54 = 1024;
      v55 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "initialized down,%u,q.x,%f,q.y,%f,q.z,%f,q.w,%f, withAvgGrav, %d", buf, 0x36u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218DD88);
      v25 = *(unsigned __int8 *)(a1 + 10);
      v26 = *(float *)(a1 + 12);
      v27 = *(float *)(a1 + 16);
      v28 = *(float *)(a1 + 20);
      v29 = *(float *)(a1 + 24);
      LODWORD(v35) = 67110400;
      HIDWORD(v35) = v25;
      *(_WORD *)v36 = 2048;
      *(double *)&v36[2] = v26;
      v37 = 2048;
      v38 = v27;
      v39 = 2048;
      v40 = v28;
      v41 = 2048;
      v42 = v29;
      v43 = 1024;
      v44 = v5;
      LODWORD(v32) = 54;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "initialized down,%u,q.x,%f,q.y,%f,q.z,%f,q.w,%f, withAvgGrav, %d", &v35, v32, v33, v34, v35, *(_DWORD *)v36);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "virtual void CMSensorFusionMekfPhone::initializeAttitude()", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
}

BOOL sub_100E7A784(uint64_t a1, float *a2, uint64_t a3, float32_t a4)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  NSObject *v26;
  _BOOL8 v27;
  double v28;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  _WORD v46[8];
  float32x4_t v47;
  _DWORD v48[3];
  int v49;
  double v50;
  int8x8_t v51;
  uint8_t buf[16];
  __int128 v53;
  int v54;

  v7 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(v7 + 417))
  {
    if (!*(_BYTE *)(a1 + 10))
      goto LABEL_7;
LABEL_6:
    v19 = sub_10012C7A4((float *)(a1 + 12));
LABEL_8:
    v16 = v19;
    v17 = v20;
    v18 = v21;
    *(float *)v48 = v19;
    goto LABEL_9;
  }
  v8 = sub_100B27754(v7);
  if (*(_BYTE *)(a1 + 10))
    goto LABEL_6;
  v15 = v8;
  v7 = *(_QWORD *)(a1 + 56);
  if (v15)
  {
LABEL_7:
    v19 = sub_1006877E0((unsigned __int16 *)(v7 + 8), 0, *(unsigned __int16 *)(v7 + 10));
    goto LABEL_8;
  }
  v16 = *(float *)(v7 + 216);
  v17 = *(float *)(v7 + 220);
  v18 = *(float *)(v7 + 224);
  *(float *)v48 = v16;
LABEL_9:
  v22 = 0;
  *(float *)&v48[1] = v17;
  *(float *)&v48[2] = v18;
  v23 = 0.0;
  do
  {
    v23 = v23 + (float)(*(float *)&v48[v22] * *(float *)&v48[v22]);
    ++v22;
  }
  while (v22 != 3);
  v24 = sqrtf(v23);
  v25 = fabsf(v24 + -1.0);
  if (v25 <= 1.0)
  {
    *(float32_t *)&v28 = a4;
    *((float *)&v28 + 1) = (float)(v25 / v24) * (float)(v25 / v24);
    __asm { FMOV            V1.2S, #1.0 }
    v51 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3C3295EA3D23D70ALL, *(float32x2_t *)&v28), (int8x8_t)0x42B77C7A41C80000, (int8x8_t)vdiv_f32(_D1, *(float32x2_t *)&v28));
    v47.i64[0] = 0;
    v47.i64[1] = 0x3F80000000000000;
    LODWORD(v28) = *(_DWORD *)(a3 + 8);
    v27 = sub_100B62074((float *)&v51, &v47, (uint64_t)&v49, *a2, a2[1], a2[2], v16, v17, v18, v28, v14, v9, v10, v11, v12, v13, *(_QWORD *)a3, *(float *)&v28);
    if (v27)
    {
      if ((float32x4_t *)(a1 + 12) != &v47)
        *(float32x4_t *)(a1 + 12) = v47;
      v34 = a1 + 28;
      if (!sub_100C9B770(v34, (uint64_t)&v49))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10218DD88);
        v35 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "invalid initial covariance !(P > 0), using default", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10218DD88);
          v46[0] = 0;
          LODWORD(v44) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "invalid initial covariance !(P > 0), using default", v46, v44);
          v43 = (uint8_t *)v42;
          sub_100512490("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "%s\n", v42);
          if (v43 != buf)
            free(v43);
        }
        v54 = 973279855;
        *(_OWORD *)buf = xmmword_101C2B13C;
        v53 = unk_101C2B14C;
        sub_100C9B770(v34, (uint64_t)buf);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218DD88);
      v36 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "initializeState northAndGravity failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10218DD88);
        v46[0] = 0;
        LODWORD(v44) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "initializeState northAndGravity failed", v46, v44);
        v41 = (uint8_t *)v40;
        sub_100512490("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218DD88);
    v26 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "initializeState MaxInitialDiffUnity failed,magnitude,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218DD88);
      v49 = 134217984;
      v50 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "initializeState MaxInitialDiffUnity failed,magnitude,%f", COERCE_DOUBLE(&v49));
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    return 0;
  }
  return v27;
}

void sub_100E7AD28(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (*(_WORD *)(v1 + 10))
  {
    sub_100C9BB0C((unsigned __int16 *)(v1 + 8));
    sub_10012C7A4((float *)(a1 + 12));
  }
}

double sub_100E7AD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  float32x4_t *v10;
  double result;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  __int32 v15;

  v6 = 0;
  v14 = *(_QWORD *)a2;
  v15 = *(_DWORD *)(a2 + 8);
  do
  {
    *(float *)((char *)&v14 + v6) = -*(float *)((char *)&v14 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  v13.i64[0] = v14;
  v13.i32[2] = v15;
  sub_100B278EC(v13.f32, (uint64_t)&v14);
  *(float *)(a1 + 64) = sub_1005335A4((uint64_t)&v14, (float *)(a1 + 64));
  *(_DWORD *)(a1 + 68) = v7;
  *(_DWORD *)(a1 + 72) = v8;
  sub_100C9BEC8(a1 + 28, (uint64_t)&v14, a3);
  *(double *)v9.i64 = sub_100B61FD0(&v13, (float *)a2);
  v10 = (float32x4_t *)(a1 + 12);
  result = sub_100B61EC4((uint64_t)&v13, v10->f32, &v12, v9);
  if (v10 != &v12)
  {
    result = *(double *)v12.i64;
    *v10 = v12;
  }
  return result;
}

double sub_100E7AE70(_QWORD *a1, int a2, unint64_t a3)
{
  double result;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint8_t buf[4];
  int v17;
  int v18;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
    return result;
  v7 = *(_QWORD *)(a1[7] + 408);
  v8 = a3 >= v7;
  v9 = a3 - v7;
  if (v9 == 0 || !v8)
    return result;
  result = (double)v9 * 0.000001;
  *(float *)&result = result;
  if (*(float *)&result <= 0.0)
    return result;
  if (a2 == 2 || a2 == 1)
  {
    v10 = 833342583;
    goto LABEL_18;
  }
  v10 = 0;
  if (a2)
  {
LABEL_18:
    *(_DWORD *)buf = v10;
    v17 = v10;
    v18 = v10;
    v14 = 0;
    v15 = 0;
    return sub_100E7AD98((uint64_t)a1, (uint64_t)&v14, (uint64_t)buf);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10218DD88);
  v11 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "invalid quiescentState kInMotion, ignoring quiescent", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218DD88);
    LOWORD(v14) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "invalid quiescentState kInMotion, ignoring quiescent", &v14, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CMSensorFusionMekfPhone::feedQuiescent(CMDeviceMotionInputs::QuiescentState, uint64_t)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return result;
}

void sub_100E7B07C(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  float v10;
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  float *v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  BOOL v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float32x2_t v39;
  float v40;
  uint64_t v41;
  int v42;
  float32x2_t v43;
  float v44;
  float32x2_t v45;
  float v46;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(v6 + 408);
    v8 = a3 >= v7;
    v9 = a3 - v7;
    if (v9 != 0 && v8)
    {
      v10 = (double)v9 * 0.000001;
      if (v10 > 0.0)
      {
        v11 = vsub_f32(*a2, *(float32x2_t *)(v6 + 444));
        v12 = a2[1].f32[0] - *(float *)(v6 + 452);
        v43 = v11;
        v44 = v12;
        v13 = vaddv_f32(vmul_f32(v11, v11));
        v14 = v12 * v12;
        v41 = 0;
        v42 = 0;
        v38 = (double)v9 * 0.000001;
        if (*(_BYTE *)(a1 + 9))
        {
          v15 = 0;
          v45 = vmul_f32(v11, (float32x2_t)vdup_n_s32(0x3D23D70Au));
          v46 = v12 * 0.04;
          do
          {
            v16 = (float *)sub_100534E68((uint64_t)&v45, v15);
            v17 = fminf(fmaxf(*v16 * *v16, 0.0027416), 9.8696);
            *(float *)sub_100534E68((uint64_t)&v41, v15++) = v17;
          }
          while (v15 != 3);
          *(_BYTE *)(a1 + 9) = 0;
          v10 = v38;
        }
        v18 = 0;
        v19 = v13 + v14;
        v20 = v10 * v10;
        v21 = (float)(v10 * 0.0017) * (float)(v10 * 0.0017);
        v22 = (float)(v10 * 17.453) * (float)(v10 * 17.453);
        do
        {
          v23 = (float)(v20 * sub_100533668(*(_QWORD *)(a1 + 56) + 420, v18)) + (float)(v38 * 0.000000010966);
          v24 = sub_100533668((uint64_t)&v43, v18);
          v25 = v23 + (float)((float)((float)(v24 * 0.00033) * v38) * (float)((float)(v24 * 0.00033) * v38));
          v26 = sub_100533668((uint64_t)&v43, v18);
          v27 = v25 + (float)((float)(v19 - (float)(v26 * v26)) * v21);
          v28 = sub_100533668((uint64_t)&v43, v18);
          if (v28 <= 0.0)
            v29 = -v28;
          else
            v29 = v28;
          v30 = v29 <= sub_100E7D490();
          v31 = 0.0;
          if (!v30)
            v31 = v22;
          v32 = *(float *)sub_100534E68((uint64_t)&v41, v18) + (float)(v27 + v31);
          *(float *)sub_100534E68((uint64_t)&v45, v18++) = v32;
        }
        while (v18 != 3);
        v33 = *(_QWORD *)(a1 + 56);
        v34 = (float)((float)((float)(*(float *)(v33 + 464) + a2[1].f32[0]) * 0.5) - *(float *)(v33 + 452)) * v38;
        v39 = vmul_n_f32(vsub_f32(vmul_f32(vadd_f32(*(float32x2_t *)(v33 + 456), *a2), (float32x2_t)0x3F0000003F000000), *(float32x2_t *)(v33 + 444)), v38);
        v40 = v34;
        sub_100E7AD98(a1, (uint64_t)&v39, (uint64_t)&v45);
        v35 = 0;
        if (a2->f32[0] <= 0.0)
          v36 = -a2->f32[0];
        else
          v36 = a2->f32[0];
        do
        {
          v37 = a2->f32[v35 + 1];
          if (v37 <= 0.0)
            v37 = -v37;
          if (v37 > v36)
            v36 = v37;
          ++v35;
        }
        while (v35 != 2);
        if (v36 > sub_100E7D490())
          *(_QWORD *)(a1 + 80) = 1;
      }
    }
  }
}

uint64_t sub_100E7B368(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v3 + 820) || *(_DWORD *)(v3 + 276) == *(unsigned __int16 *)(v3 + 274))
    && *(_DWORD *)(v3 + 12) == *(unsigned __int16 *)(v3 + 10))
  {
    return sub_100E7B3A0(a1, a2, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100E7B3A0(uint64_t a1, uint64_t a2, float *a3)
{
  float v5;
  int v6;
  int v7;
  float v8;
  uint64_t i;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  int v25;
  int v26;
  float v27;
  _BOOL4 v28;
  int v29;
  float v30;
  float v31;
  float v33;
  int v34;
  int v35;

  sub_100687C30((unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 8), 0, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 10));
  v34 = v6;
  v35 = v7;
  if (v5 <= 0.0)
    v8 = -v5;
  else
    v8 = v5;
  for (i = 4; i != 12; i += 4)
  {
    v10 = *(float *)((char *)&v33 + i);
    if (v10 <= 0.0)
      v10 = -v10;
    if (v10 > v8)
      v8 = v10;
  }
  v11 = sub_1006877E0((unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 8), 0, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 10));
  v12 = 0;
  v33 = v11;
  v34 = v13;
  v35 = v14;
  v15 = 0.0;
  do
  {
    v15 = v15 + (float)(*(float *)((char *)&v33 + v12) * *(float *)((char *)&v33 + v12));
    v12 += 4;
  }
  while (v12 != 12);
  v16 = sqrtf(v8);
  v17 = sqrtf(v15) + -1.0;
  v18 = *(_QWORD *)(a1 + 56);
  v19 = 0.0;
  if (*(_BYTE *)(v18 + 820))
  {
    v20 = 0.0;
  }
  else
  {
    v20 = sub_100B2784C(*(_QWORD *)(a1 + 56));
    v18 = *(_QWORD *)(a1 + 56);
  }
  v21 = fabsf(v17);
  v22 = sub_100E7BBA0(flt_101C2B160, flt_101C2B16C, 3, v16);
  v23 = sub_1006877E0((unsigned __int16 *)(v18 + 8), 0, *(unsigned __int16 *)(v18 + 10));
  v24 = 0;
  v33 = v23;
  v34 = v25;
  v35 = v26;
  do
  {
    v19 = v19 + (float)(*(float *)((char *)&v33 + v24) * *(float *)((char *)&v33 + v24));
    v24 += 4;
  }
  while (v24 != 12);
  v27 = sub_100E7BBA0(flt_101C2B178, flt_101C2B194, 7, sqrtf(v19) + -1.0);
  v28 = v16 >= 0.1;
  if (v21 >= 0.12)
    v28 = 1;
  v29 = v20 >= 0.05 || v28;
  if ((v29 & 1) == 0)
  {
    v30 = sub_100E7BBA0(flt_101C2B1B0, flt_101C2B1BC, 3, v20);
    if (v22 >= v27)
      v31 = v27;
    else
      v31 = v22;
    if (v31 < v30)
      v30 = v31;
    *a3 = v30 * v30;
  }
  return v29 ^ 1u;
}

uint64_t sub_100E7B5A0(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v4;
  int v5;
  BOOL v6;
  unint64_t v7;
  float v8;
  float32_t v10;
  char v11;
  float32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  __int32 v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  int v24;
  int v25;
  float v26;
  uint64_t i;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  _DWORD v41[3];
  float v42;
  unint64_t v43;
  float v44;

  if (!a1[1].i8[2])
  {
    (*(void (**)(float32x2_t *))(*(_QWORD *)a1 + 160))(a1);
    return 0;
  }
  v4 = a1[7];
  v5 = *(unsigned __int8 *)(*(_QWORD *)&v4 + 820);
  if (a1[1].i8[0])
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v5 = 0;
    a1[10] = (float32x2_t)1;
    a1[1].i8[1] = 1;
  }
  a1[1].i8[0] = v5 != 0;
  v7 = (unint64_t)a1[10];
  if (v7)
  {
    v8 = 1.0 / (float)v7;
    if (v8 < 0.001)
    {
      v7 = 999;
      a1[10] = (float32x2_t)999;
      v8 = 0.001;
    }
  }
  else
  {
    v8 = 1.0;
  }
  if (*(_BYTE *)(*(_QWORD *)&v4 + 240))
  {
    v10 = (float)((float)(1.0 - v8) * a1[9].f32[0]) + (float)(v8 * *(float *)(*(_QWORD *)&v4 + 236));
    a1[8] = vadd_f32(vmul_n_f32(a1[8], 1.0 - v8), vmul_n_f32(*(float32x2_t *)(*(_QWORD *)&v4 + 228), v8));
    a1[9].f32[0] = v10;
    a1[10] = (float32x2_t)(v7 + 1);
  }
  v40 = v8;
  v42 = 0.0;
  v11 = sub_100E7B368((uint64_t)a1, a3, &v42);
  v12 = a1[7];
  if ((v11 & 1) == 0 && !*(_BYTE *)(*(_QWORD *)&v12 + 820))
  {
    if (*(_BYTE *)(*(_QWORD *)&v12 + 240))
    {
      v22 = (float)(v40 / 0.001) * 0.00030462;
      v26 = 0.0;
      for (i = 16; i != 19; ++i)
        v26 = v26 + (float)(a1->f32[i] * a1->f32[i]);
      v28 = sqrtf(v26);
      v29 = v28 + -1.0;
      if ((float)(v28 + -1.0) <= 0.0)
        v29 = -(float)(v28 + -1.0);
      v30 = acosf(1.0 / (float)(v29 + 1.0));
      if (v28 < 1.0 && v30 <= (float)((float)((float)(1.0 - v28) * 180.0) * 0.017453))
        v30 = (float)((float)(1.0 - v28) * 180.0) * 0.017453;
      v31 = 0;
      v32 = v30 * v30;
      if (v22 <= v32)
        v22 = v32;
      v34 = a1[8].f32[0];
      v33 = a1[8].f32[1];
      v35 = a1[9].f32[0];
      v43 = __PAIR64__(LODWORD(v33), LODWORD(v34));
      v44 = v35;
      v36 = 0.0;
      do
      {
        v36 = v36 + (float)(*(float *)((char *)&v43 + v31) * *(float *)((char *)&v43 + v31));
        v31 += 4;
      }
      while (v31 != 12);
      if (sqrtf(v36) > 0.00000011921)
      {
        v37 = 0;
        v38 = 0.0;
        do
        {
          v38 = v38 + (float)(*(float *)((char *)&v43 + v37) * *(float *)((char *)&v43 + v37));
          v37 += 4;
        }
        while (v37 != 12);
        v39 = sqrtf(v38);
        v34 = v34 / v39;
        v33 = v33 / v39;
        v35 = v35 / v39;
      }
      v43 = __PAIR64__(LODWORD(v33), LODWORD(v34));
      v23 = (float *)&a1[1] + 1;
      v44 = v35;
      goto LABEL_28;
    }
    return 0;
  }
  v13 = sub_100E7B8D0((unsigned __int16 *)(*(_QWORD *)&v12 + 8), 7uLL);
  v14 = 0;
  v16 = *(_DWORD *)v13;
  v15 = *(float *)(v13 + 4);
  v17 = *(float *)(v13 + 8);
  LODWORD(v43) = *(_DWORD *)v13;
  *((float *)&v43 + 1) = v15;
  v44 = v17;
  v18 = 0.0;
  do
  {
    v18 = v18 + (float)(*(float *)((char *)&v43 + v14) * *(float *)((char *)&v43 + v14));
    v14 += 4;
  }
  while (v14 != 12);
  if (sqrtf(v18) > 0.00000011921)
  {
    v19 = 0;
    v20 = 0.0;
    do
    {
      v20 = v20 + (float)(*(float *)((char *)&v43 + v19) * *(float *)((char *)&v43 + v19));
      v19 += 4;
    }
    while (v19 != 12);
    v21 = sqrtf(v20);
    *(float *)&v16 = *(float *)&v16 / v21;
    v15 = v15 / v21;
    v17 = v17 / v21;
  }
  v43 = __PAIR64__(LODWORD(v15), v16);
  v44 = v17;
  if (*(_BYTE *)(*(_QWORD *)&a1[7] + 820))
    v22 = 0.1;
  else
    v22 = v42;
  v23 = (float *)&a1[1] + 1;
LABEL_28:
  v41[0] = sub_10012C7A4(v23);
  v41[1] = v24;
  v41[2] = v25;
  sub_100E7BA94((uint64_t)a1, (float32x2_t *)&v43, (uint64_t)v41, v22);
  return 1;
}

uint64_t sub_100E7B8D0(unsigned __int16 *a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  uint8_t buf[4];
  unint64_t v11;

  if (a1[1] <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218DD88);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 45,out of buffer range %zu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218DD88);
      v8 = 134217984;
      v9 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 45,out of buffer range %zu.", (size_t)&v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "const Element &CMVectorBufferBase<float, 3>::operator[](const size_t) const [T = float, N = 3]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return sub_100687A34(a1, a2);
}

void sub_100E7BA94(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4)
{
  float v5;
  float v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x4_t *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23[3];
  _DWORD v24[3];
  _DWORD v25[2];
  float32x2_t v26;
  int v27;
  float32x2_t v28;
  float v29;
  int v30;
  float32x2_t v31;
  float v32;

  v5 = *(float *)(a3 + 8);
  v6 = a2[1].f32[0] - v5;
  v7 = *(float32x2_t *)a3;
  v31 = vsub_f32(*a2, *(float32x2_t *)a3);
  v32 = v6;
  v8 = *(float32x2_t *)(a3 + 4);
  v25[0] = 0;
  *(float *)&v25[1] = v5;
  v26 = vneg_f32(v8);
  v27 = 0;
  v28 = v7;
  v29 = -v7.f32[0];
  v30 = 0;
  *(float *)v24 = a4;
  *(float *)&v24[1] = a4;
  *(float *)&v24[2] = a4;
  sub_100C9CA4C((float *)(a1 + 28), (uint64_t)v25, (uint64_t)v24, (uint64_t)&v31);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = (float32x4_t *)(a1 + 12);
  v16 = sub_10012C7A4(v15->f32);
  v19 = (float)((float)(v17 * v14) + (float)(v12 * v18)) + (float)(v10 * v16);
  v23[0] = v10 - (float)(v16 * v19);
  v23[1] = v12 - (float)(v18 * v19);
  v23[2] = v14 - (float)(v17 * v19);
  *(double *)v20.i64 = sub_100B61FD0(&v22, v23);
  sub_100B61EC4((uint64_t)&v22, v15->f32, &v21, v20);
  if (v15 != &v21)
    *v15 = v21;
}

float sub_100E7BBA0(float *a1, float *a2, uint64_t a3, float a4)
{
  uint64_t v4;
  float *v5;
  float *i;
  float v7;
  float v8;
  float v10;
  float v11;
  float v12;

  if (*a1 >= a4)
    return *a2;
  v4 = a3 - 1;
  if (a1[a3 - 1] <= a4)
    return a2[v4];
  if (a3 == 1)
    return *a2;
  v5 = a1 + 1;
  for (i = a2; ; ++i)
  {
    v7 = *(v5 - 1);
    if (v7 <= a4)
    {
      v8 = *v5;
      if (*v5 >= a4)
        break;
    }
    ++v5;
    if (!--v4)
      return *a2;
  }
  v10 = v8 - v7;
  if ((float)(v8 - v7) <= 0.0)
  {
    v11 = *i;
    v12 = 0.0;
  }
  else
  {
    v11 = *i;
    v12 = (float)(i[1] - *i) / v10;
  }
  return v11 + (float)(v12 * (float)(a4 - v7));
}

void sub_100E7BC30()
{
  operator delete();
}

uint64_t sub_100E7BC44(uint64_t a1)
{
  return a1 + 12;
}

uint64_t sub_100E7BC4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) + 432;
}

BOOL sub_100E7BC58(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  return *(_BYTE *)(v1 + 416) && *(_QWORD *)(v1 + 408) && *(_BYTE *)(a1 + 10) != 0;
}

void sub_100E7BC84(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100E7BCB0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_QWORD *)result = off_10218DDB8;
  *(_WORD *)(result + 41) = 256;
  return result;
}

uint64_t sub_100E7BCD8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18[2];
  void *v19[2];
  __int128 v20;
  void *v21[2];
  void *v22[2];
  __int128 v23;
  void *v24[2];
  __int128 v25;
  void *v26[2];
  void *__p[2];
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;

  *(_QWORD *)a1 = off_10218DDB8;
  if (sub_1009D0418())
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10218DE08);
    v2 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138543362;
      v33 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Service client is going away: %{public}@. Unregistering for MagicMount updates.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10218DE08);
      v11 = *(_QWORD *)(a1 + 24);
      v30 = 138543362;
      v31 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 0, "Service client is going away: %{public}@. Unregistering for MagicMount updates.", &v30, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMagicMountSubscription::~CLMagicMountSubscription()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    if (*(_BYTE *)(a1 + 41))
    {
      *(_BYTE *)(a1 + 41) = 0;
      v4 = sub_1009D0418();
      sub_1009D0560(v4, *(_BYTE *)(a1 + 41));
      v5 = (_BYTE *)sub_100E5A538();
      v6 = *(void **)(a1 + 24);
      if (v6)
      {
        objc_msgSend(v6, "clientName");
      }
      else
      {
        v29 = 0;
        *(_OWORD *)__p = 0u;
        v28 = 0u;
        v25 = 0u;
        *(_OWORD *)v26 = 0u;
        v23 = 0u;
        *(_OWORD *)v24 = 0u;
        *(_OWORD *)v21 = 0u;
        *(_OWORD *)v22 = 0u;
        *(_OWORD *)v19 = 0u;
        v20 = 0u;
        *(_OWORD *)v18 = 0u;
      }
      sub_100E5A8C4(v5, (uint64_t)v18, 0);
      if (SHIBYTE(v28) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v25) < 0)
        operator delete(v24[1]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[1]);
      if (SHIBYTE(v22[0]) < 0)
        operator delete(v21[0]);
      if (SHIBYTE(v20) < 0)
        operator delete(v19[1]);
      if (SHIBYTE(v19[0]) < 0)
        operator delete(v18[0]);
    }
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10218DE08);
    v7 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(unsigned __int8 *)(a1 + 42);
      *(_DWORD *)buf = 67240192;
      LODWORD(v33) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "fAPWake is %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10218DE08);
      v14 = *(unsigned __int8 *)(a1 + 42);
      v30 = 67240192;
      LODWORD(v31) = v14;
      LODWORD(v17) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 2, "fAPWake is %{public}d", &v30, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMagicMountSubscription::~CLMagicMountSubscription()", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    if (!*(_BYTE *)(a1 + 42))
    {
      *(_BYTE *)(a1 + 42) = 1;
      v9 = sub_1009D0418();
      sub_1009D1478(v9, *(_BYTE *)(a1 + 42));
    }
  }
  sub_10002FA68(a1);
  return a1;
}

void sub_100E7C0E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E7C0F4(uint64_t a1)
{
  sub_100E7BCD8(a1);
  operator delete();
}

_QWORD *sub_100E7C118@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_10218DE38;
  v11[1] = sub_100E7C380;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageMagicMountServiceRequest");
  sub_100BBF140((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_10218DE38;
  v9[1] = sub_100E7C890;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageMagicMountAPWakesAllowed");
  sub_100BBF140((uint64_t)v16, (uint64_t)v9);
  sub_100E7D0B0(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_100E7C2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

uint64_t sub_100E7C380(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  CLConnectionMessage *v17;
  uint64_t v18;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  void *v23[2];
  void *v24[2];
  __int128 v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  void *v29[2];
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  NSNumber *v36;
  _DWORD v37[2];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _UNKNOWN **v41;
  uint8_t buf[8];
  __int16 v43;
  uint64_t v44;

  sub_1001A638C(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v5 = CMMagicMountServiceEnable;
  if (objc_msgSend(Dictionary, "objectForKey:", CMMagicMountServiceEnable)
    && (v6 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", v5)) != 0)
  {
    v7 = v6;
    if (sub_1009D0418())
    {
      v8 = objc_msgSend(v7, "BOOLValue");
      if (objc_msgSend(Dictionary, "objectForKey:", v5))
      {
        if (qword_10229FD10 != -1)
          dispatch_once(&qword_10229FD10, &stru_10218DE08);
        v9 = qword_10229FD18;
        if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_INFO))
        {
          v10 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)buf = 67240450;
          *(_DWORD *)&buf[4] = v8;
          v43 = 2114;
          v44 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Incoming MagicMount service request: %{public}d, client: %{public}@", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD10 != -1)
            dispatch_once(&qword_10229FD10, &stru_10218DE08);
          v20 = *(_QWORD *)(a1 + 24);
          v37[0] = 67240450;
          v37[1] = v8;
          v38 = 2114;
          v39 = v20;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 1, "Incoming MagicMount service request: %{public}d, client: %{public}@", v37, 18);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "void CLMagicMountSubscription::handleMessageMagicMountServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        v11 = sub_1009D0418();
        if (sub_1009D0560(v11, v8))
        {
          *(_BYTE *)(a1 + 41) = v8;
          v12 = (_BYTE *)sub_100E5A538();
          v13 = *(void **)(a1 + 24);
          if (v13)
          {
            objc_msgSend(v13, "clientName");
          }
          else
          {
            v34 = 0;
            *(_OWORD *)__p = 0u;
            v33 = 0u;
            v30 = 0u;
            *(_OWORD *)v31 = 0u;
            v28 = 0u;
            *(_OWORD *)v29 = 0u;
            *(_OWORD *)v26 = 0u;
            *(_OWORD *)v27 = 0u;
            *(_OWORD *)v24 = 0u;
            v25 = 0u;
            *(_OWORD *)v23 = 0u;
          }
          sub_100E5A8C4(v12, (uint64_t)v23, v8);
          if (SHIBYTE(v33) < 0)
            operator delete(__p[1]);
          if (SHIBYTE(__p[0]) < 0)
            operator delete(v31[0]);
          if (SHIBYTE(v30) < 0)
            operator delete(v29[1]);
          if (SHIBYTE(v28) < 0)
            operator delete(v27[1]);
          if (SHIBYTE(v27[0]) < 0)
            operator delete(v26[0]);
          if (SHIBYTE(v25) < 0)
            operator delete(v24[1]);
          if (SHIBYTE(v24[0]) < 0)
            operator delete(v23[0]);
          v18 = 100;
        }
        else
        {
          v18 = 108;
        }
        v35 = CMErrorMessage;
        v36 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18);
        *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
        sub_100E7CE3C(a1, buf);
      }
    }
    else
    {
      v17 = *a2;
      v40 = CMErrorMessage;
      v41 = &off_10221C1B8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
      CLConnectionMessage::sendReply(v17);
    }
  }
  else
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10218DE08);
    v14 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10218DE08);
      LOWORD(v37[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 17, "Invalid parameters!", v37, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLMagicMountSubscription::handleMessageMagicMountServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  return sub_1001A638C(a1);
}

void sub_100E7C874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E7C890(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int v8;
  CLConnectionMessage *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  CLConnectionMessage *v14;
  unsigned int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  NSNumber *v26;
  _DWORD v27[2];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint8_t buf[8];
  __int16 v35;
  uint64_t v36;

  sub_1001A638C(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v5 = CMMagicMountAPWakesAllowed;
  if (!objc_msgSend(Dictionary, "objectForKey:", CMMagicMountAPWakesAllowed)
    || (v6 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", v5)) == 0)
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10218DE08);
    v13 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10218DE08);
      LOWORD(v27[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 17, "Invalid parameters!", v27, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    goto LABEL_19;
  }
  v7 = v6;
  if (!sub_1009D0418())
  {
    v14 = *a2;
    v32 = CMErrorMessage;
    v33 = &off_10221C1B8;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
    CLConnectionMessage::sendReply(v14);
LABEL_19:
    sub_1001A638C(a1);
    return;
  }
  v8 = objc_msgSend(v7, "BOOLValue");
  if (*(unsigned __int8 *)(a1 + 42) != v8)
  {
    v15 = v8;
    if (objc_msgSend(Dictionary, "objectForKey:", v5))
    {
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10218DE08);
      v16 = qword_10229FD18;
      if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_INFO))
      {
        v17 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&buf[4] = v15;
        v35 = 2114;
        v36 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Incoming MagicMount setAPWakesAllowed request: %{public}d, client: %{public}@", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD10 != -1)
          dispatch_once(&qword_10229FD10, &stru_10218DE08);
        v22 = *(_QWORD *)(a1 + 24);
        v27[0] = 67240450;
        v27[1] = v15;
        v28 = 2114;
        v29 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 1, "Incoming MagicMount setAPWakesAllowed request: %{public}d, client: %{public}@", v27, 18);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      v18 = sub_1009D0418();
      if (sub_1009D1478(v18, v15))
      {
        *(_BYTE *)(a1 + 42) = v15;
        v19 = 100;
      }
      else
      {
        v19 = 108;
      }
      v25 = CMErrorMessage;
      v26 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19);
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
      sub_100E7CE3C(a1, buf);
    }
    goto LABEL_19;
  }
  v9 = *a2;
  v30 = CMErrorMessage;
  v31 = &off_10221C1D0;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
  CLConnectionMessage::sendReply(v9);
  if (qword_10229FD10 != -1)
    dispatch_once(&qword_10229FD10, &stru_10218DE08);
  v10 = qword_10229FD18;
  if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Already set AP wakes for this client", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10218DE08);
    LOWORD(v27[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 17, "Already set AP wakes for this client", v27, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_100E7CE3C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10218DEB8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E7CED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E7CEE4(id a1)
{
  qword_10229FD18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

__n128 sub_100E7CF10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10218DE38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100E7CF4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218DE38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E7CF70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100E7CFC0(a1 + 8, a2, a3);
}

uint64_t sub_100E7CF78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E7CFB4()
{
}

void sub_100E7CFC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100E7D094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100E7D0B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100E7D128(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100E7D114(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100E7D128(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100E7D3A8(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100E7D390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E7D3A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100E7D41C(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100E7D404(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E7D41C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100E7D474(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sub_100E7D490()
{
  return 27.925;
}

void sub_100E7D4A0(_QWORD *a1)
{
  sub_1000CDA1C(a1);
  operator delete();
}

uint64_t sub_100E7D4CC(double *a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  BOOL v16;
  uint64_t result;
  double *v18;
  double v19;
  double v20;
  BOOL v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  int v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint8_t buf[4];
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10218DF60);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v6 = sub_100B30608(v5, buf);
    v7 = *((_QWORD *)a1 + 382);
    v8 = *((_QWORD *)a1 + 63);
    v9 = *((_QWORD *)a1 + 254);
    v10 = *((_QWORD *)a1 + 384);
    *(_DWORD *)buf = 134219264;
    v45 = v6;
    v46 = 2048;
    v47 = a2;
    v48 = 2048;
    v49 = v7;
    v50 = 2048;
    v51 = v8;
    v52 = 2048;
    v53 = v9;
    v54 = 2048;
    v55 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%.1lf,DeadReckoning,%.2lf,fLastPASCDVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLastGPSLocationTime,%.2lf,fLastGPSPropagationTime,%.2lf", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218DF60);
    v23 = qword_1022A02D8;
    v24 = sub_1005FECEC();
    v25 = *((_QWORD *)a1 + 382);
    v26 = *((_QWORD *)a1 + 63);
    v27 = *((_QWORD *)a1 + 254);
    v28 = *((_QWORD *)a1 + 384);
    v32 = 134219264;
    v33 = v24;
    v34 = 2048;
    v35 = a2;
    v36 = 2048;
    v37 = v25;
    v38 = 2048;
    v39 = v26;
    v40 = 2048;
    v41 = v27;
    v42 = 2048;
    v43 = v28;
    LODWORD(v31) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "%.1lf,DeadReckoning,%.2lf,fLastPASCDVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLastGPSLocationTime,%.2lf,fLastGPSPropagationTime,%.2lf", COERCE_DOUBLE(&v32), v31);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "BOOL PropagationDataHistory::shallPropagateAccessory(const CFTimeInterval)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  v11 = a1[384];
  v16 = v11 < 0.0;
  v12 = vabdd_f64(a2, v11);
  v13 = !v16 && v12 <= 3.0;
  if (v13)
    goto LABEL_14;
  v14 = a1[382];
  v13 = v14 <= 0.0;
  v15 = vabdd_f64(a2, v14);
  v16 = !v13 && v15 < 10.0;
  if (!v16
    || ((v19 = a1[63], v13 = v19 <= 0.001, v20 = vabdd_f64(a2, v19), !v13) ? (v21 = v20 < 3.0) : (v21 = 1),
        v21 || (v18 = a1 + 382, v22 = a1[254], v22 >= 0.001) && vabdd_f64(a2, v22) < 3.0))
  {
LABEL_14:
    result = 0;
    v18 = a1 + 382;
  }
  else
  {
    result = 1;
  }
  *v18 = a2;
  return result;
}

void sub_100E7D794(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100E7D7C0(uint64_t a1, void *a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  BOOL v10[16];
  void *__p;
  std::__shared_weak_count *v12;

  v3 = sub_100AD58FC(a1, a2);
  *v3 = off_10218DF90;
  v3[14] = 0;
  v3[15] = 0;
  sub_1009CB60C((uint64_t)(v3 + 16));
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 176) = 1;
  *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 289) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  sub_1001E4804(&__p);
  v10[0] = 0;
  v4 = sub_1001E4874((uint64_t)__p, "CLTSPEnableDeviceMotionVDRNotifications", v10);
  if (v10[0])
    v5 = v4;
  else
    v5 = 0;
  v6 = v12;
  if (!v12)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v5)
LABEL_9:
      operator new();
  }
  else
  {
LABEL_8:
    if (v5)
      goto LABEL_9;
  }
  return a1;
}

void sub_100E7DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v26 = *(_QWORD *)(v18 + 328);
  *(_QWORD *)(v18 + 328) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *v24;
  *v24 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_10047F660((_QWORD *)(v21 + 96));
  sub_100E809F8((_QWORD *)(v21 + 48));
  v28 = (_QWORD *)*v22;
  *v22 = 0;
  if (v28)
    sub_100E80AE8((uint64_t)v22, v28);
  sub_1006F1E24((_QWORD **)v21, 0);
  nullsub_34(v20);
  sub_100694874(v19, 0);
  v29 = *v23;
  *v23 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  sub_100AD59C4(v18);
  _Unwind_Resume(a1);
}

void sub_100E7DD70()
{
  JUMPOUT(0x100E7DD3CLL);
}

void sub_100E7DD7C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLVDR2DofNotifierFromSR::maintainEstimatorState");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218E088);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVDR2DofNotifierFromSR::maintainEstimatorState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218E088);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVDR2DofNotifierFromSR::maintainEstimatorState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100E7E25C(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100E7DF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100E7DF4C(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLVDR2DofNotifierFromSR::onMotionActivityNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218E088);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVDR2DofNotifierFromSR::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218E088);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVDR2DofNotifierFromSR::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100E80114(a4, v8, v6, v7, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100E7E0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100E7E11C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 5 && (*(_DWORD *)(a3 + 96) & 0xFFFFFFF7) == 1)
    sub_1009CB61C(a4 + 128, *(double *)(a3 + 184), *(double *)(a3 + 504));
}

uint64_t sub_100E7E150(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_10218DF90;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 1);
  v3 = *(_QWORD *)(a1 + 312);
  if (v3)
    objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 5);
  v4 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_10047F660((_QWORD *)(a1 + 256));
  sub_100E809F8((_QWORD *)(a1 + 208));
  v6 = *(_QWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v6)
    sub_100E80AE8(a1 + 200, v6);
  sub_1006F1E24((_QWORD **)(a1 + 160), 0);
  nullsub_34(a1 + 128);
  sub_100694874((uint64_t *)(a1 + 120), 0);
  v7 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return sub_100AD59C4(a1);
}

void sub_100E7E238(uint64_t a1)
{
  sub_100E7E150(a1);
  operator delete();
}

void sub_100E7E25C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  CFAbsoluteTime Current;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  _WORD v19[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 328))
  {
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    v4 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState taking power assertion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState taking power assertion", v19, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_100E3E6F0(*(_QWORD *)(a1 + 328));
    v5 = *(_QWORD *)(a1 + 328);
    sub_1015A2E04(__p, "none");
    sub_10002B684(v5, (uint64_t *)__p);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  if (*(_BYTE *)(a1 + 304))
  {
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    v6 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState initiating/extending sensor recorder subscription", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      v19[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState initiating/extending sensor recorder subscription", v19, v16);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v7 = *(_QWORD *)(a1 + 320);
    if (v7)
    {
      sub_10124BC18(v7, 0, 600.0);
      sub_10124BC18(*(_QWORD *)(a1 + 320), 1u, 600.0);
    }
  }
  if (a2)
  {
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    v8 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP,  CLVDR2DofNotifierFromSR::maintainEstimatorState setting next timer fire date", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      v19[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLTSP,  CLVDR2DofNotifierFromSR::maintainEstimatorState setting next timer fire date", v19, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001F40D0(a2, Current + 120.0);
  }
}

void sub_100E7E6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E7E708(uint64_t result)
{
  int64x2_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  float32x2_t v18;
  __int32 v19;

  v1 = (int64x2_t *)result;
  v2 = result + 208;
  v3 = result + 256;
  while (1)
  {
    v4 = v1[18].i64[1];
    if (!v1[15].i64[1])
      break;
    v5 = v1[13].i64[1];
    v6 = v1[15].u64[0];
    v7 = v6 / 0xCC;
    if (!v4)
    {
      v9 = v6 % 0xCC;
      v8 = *(_QWORD *)(v5 + 8 * v7);
      v10 = *(_QWORD *)(v8 + 20 * (v6 % 0xCC) + 12);
      goto LABEL_10;
    }
    v8 = *(_QWORD *)(v5 + 8 * v7);
    v9 = v6 % 0xCC;
    v10 = *(_QWORD *)(v8 + 20 * (v6 % 0xCC) + 12);
    v11 = v1[18].u64[0];
    v12 = *(_QWORD *)(v1[16].i64[1] + 8 * (v11 / 0xAA));
    v13 = v11 % 0xAA;
    v14 = *(_QWORD *)(v12 + 24 * v13 + 16);
    if (v10 >= v14)
    {
LABEL_8:
      v16 = (float32x2_t *)(v12 + 24 * v13);
      v18 = *v16;
      v19 = v16[1].i32[0];
      sub_1013446A4(v1[12].i64[1], &v18, (double)v14 / 1000000.0);
      v1[18] = vaddq_s64(v1[18], (int64x2_t)xmmword_101B9DFC0);
      result = sub_10047FDC4(v3, 1);
    }
    else
    {
LABEL_10:
      v17 = (float32x2_t *)(v8 + 20 * v9);
      v18 = *v17;
      v19 = v17[1].i32[0];
      sub_10134481C((float32x2_t *)v1[12].i64[1], &v18, (double)v10 / 1000000.0);
      v1[15] = vaddq_s64(v1[15], (int64x2_t)xmmword_101B9DFC0);
      result = sub_100E80A8C(v2, 1);
    }
  }
  if (v4)
  {
    v15 = v1[18].u64[0];
    v13 = v15 % 0xAA;
    v12 = *(_QWORD *)(v1[16].i64[1] + 8 * (v15 / 0xAA));
    v14 = *(_QWORD *)(v12 + 24 * (v15 % 0xAA) + 16);
    goto LABEL_8;
  }
  return result;
}

double sub_100E7E8B8(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  uint8_t v16[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _DWORD buf[3];
  __int16 v21;
  uint64_t v22;

  result = __chkstk_darwin(a1);
  if (*(_BYTE *)(v1 + 176))
  {
    v3 = v1;
    if (*(_BYTE *)(v1 + 192))
    {
      result = *(double *)(v1 + 184);
      if (result > *(double *)(v1 + 168))
      {
        if (qword_1022A01A0 != -1)
          dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
        v4 = qword_1022A01A8;
        if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
        {
          if (!*(_BYTE *)(v3 + 176) || !*(_BYTE *)(v3 + 192))
            sub_10028DF3C();
          v5 = *(_QWORD *)(v3 + 168);
          v6 = *(_QWORD *)(v3 + 184);
          buf[0] = 134349312;
          *(_QWORD *)&buf[1] = v5;
          v21 = 2050;
          v22 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData, requesting data from %{public}.1f to %{public}.1f", (uint8_t *)buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01A0 != -1)
            dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
          if (!*(_BYTE *)(v3 + 176))
            sub_10028DF3C();
          if (!*(_BYTE *)(v3 + 192))
            sub_10028DF3C();
          v9 = *(_QWORD *)(v3 + 168);
          v10 = *(_QWORD *)(v3 + 184);
          *(_DWORD *)v16 = 134349312;
          v17 = v9;
          v18 = 2050;
          v19 = v10;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData, requesting data from %{public}.1f to %{public}.1f", v16, 22);
          v12 = (char *)v11;
          sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()", "%s\n", v11);
          if (v12 != (char *)buf)
            free(v12);
        }
        v7 = *(_QWORD **)(v3 + 200);
        *(_QWORD *)(v3 + 200) = 0;
        if (v7)
          sub_100E80AE8(v3 + 200, v7);
        if (qword_1022A01A0 != -1)
          dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
        v8 = qword_1022A01A8;
        if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#VDR,allocating DeviceMotionSource processor", (uint8_t *)buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01A0 != -1)
            dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
          *(_WORD *)v16 = 0;
          LODWORD(v15) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,allocating DeviceMotionSource processor", v16, v15);
          v14 = (char *)v13;
          sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()", "%s\n", v13);
          if (v14 != (char *)buf)
            free(v14);
        }
        operator new();
      }
    }
  }
  return result;
}

void sub_100E7FC58(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t *v3;
  uint64_t v4;

  v3 = (unint64_t *)STACK[0x898];
  if (STACK[0x898] == v1)
  {
    v4 = 4;
    v3 = &STACK[0x880];
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

__n128 sub_100E7FCE0(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 204 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E80C2C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xCC)) + 20 * (v7 % 0xCC));
  result = *a2;
  v8[1].n128_u32[0] = a2[1].n128_u32[0];
  *v8 = result;
  ++a1[5];
  return result;
}

__n128 sub_100E7FD94(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E80F40(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_100E7FE40(uint64_t a1, float *a2, float *a3, float *a4, double a5)
{
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;
  double v15[2];
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 160))
  {
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    v10 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no estimator is instantiated.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no estimator is instantiated.", v15, 2, v14);
LABEL_22:
    v13 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::handleDeviceMotionData(const CMOQuaternion &, const CMVector3d &, const CMVector3d &, double)", "%s\n", v11);
    if (v13 != buf)
      free(v13);
    return;
  }
  v15[0] = -1.0;
  if (sub_1009CB81C(a1 + 128, v15, a5))
  {
    sub_1009E0DA8(*(_QWORD *)(a1 + 160), a2, a3, v15[0], (uint64_t)a4, a4);
    return;
  }
  if (a5 - *(double *)(a1 + 152) > 1.0)
  {
    *(double *)(a1 + 152) = a5;
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    v12 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no Mach to GPS conversion is available.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      LOWORD(v14) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no Mach to GPS conversion is available.", &v14, 2, v14);
      goto LABEL_22;
    }
  }
}

double sub_100E80114(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  int v6;
  int isTypeInVehicle;
  int v8;
  double result;
  int v10;
  double Current;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;

  v6 = a5[25];
  isTypeInVehicle = CLMotionActivity::isTypeInVehicle(*a5, a2);
  if (v6 > 0)
    v8 = 1;
  else
    v8 = isTypeInVehicle;
  if (sub_10019CFA0() != 1)
    v8 = 0;
  v10 = *(unsigned __int8 *)(a1 + 304);
  *(_BYTE *)(a1 + 304) = v8;
  if (v10 != v8)
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (v8)
    {
      *(double *)(a1 + 168) = Current;
      *(_BYTE *)(a1 + 176) = 1;
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      v12 = qword_1022A01A8;
      if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
      {
        if (!*(_BYTE *)(a1 + 176))
          goto LABEL_34;
        v13 = *(_QWORD *)(a1 + 168);
        *(_DWORD *)buf = 134349056;
        v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, requesting start sensor recording from %{public}.1f", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_14:
        v14 = *(_QWORD *)(a1 + 120);
        if (v14)
          sub_100E7E25C(a1, v14);
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      if (*(_BYTE *)(a1 + 176))
      {
        v17 = *(_QWORD *)(a1 + 168);
        v23 = 134349056;
        v24 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, requesting start sensor recording from %{public}.1f", &v23, 12);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
        goto LABEL_14;
      }
LABEL_34:
      sub_10028DF3C();
    }
    *(double *)(a1 + 184) = Current;
    *(_BYTE *)(a1 + 192) = 1;
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    v15 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      if (!*(_BYTE *)(a1 + 192))
        goto LABEL_34;
      v16 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)buf = 134349056;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, no longer required sensor recording from %{public}.1f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      if (!*(_BYTE *)(a1 + 192))
        goto LABEL_34;
      v20 = *(_QWORD *)(a1 + 184);
      v23 = 134349056;
      v24 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, no longer required sensor recording from %{public}.1f", &v23, 12);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    return sub_100E7E8B8(a1);
  }
  return result;
}

void sub_100E804A4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint8_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;

  if (sub_100E80900(a1, (double *)a2))
  {
    v4 = a2[1];
    v39 = *a2;
    v40 = v4;
    v41 = a2[2];
    v42 = *((_QWORD *)a2 + 6);
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    v5 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      v9 = *((_QWORD *)a2 + 3);
      v10 = *((_QWORD *)a2 + 4);
      v11 = *((_QWORD *)a2 + 5);
      v12 = *((_QWORD *)a2 + 6);
      *(_DWORD *)buf = 134350592;
      v58 = v6;
      v59 = 2050;
      v60 = v7;
      v61 = 2050;
      v62 = v8;
      v63 = 2050;
      v64 = v9;
      v65 = 2050;
      v66 = v10;
      v67 = 2050;
      v68 = v11;
      v69 = 2050;
      v70 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#VDR,CLVDR2DofNotifier,SR,measurement,timestamp_s,%{public}.3f,dataPeriod_s,%{public}.3f,deltaCourse_rad,%{public}.6f,deltaSpeed_mps,%{public}.6f,deltaCourseVar_rad2,%{public}.6f,deltaSpeedVar_mps2,%{public}.6f,deltaCourseSpeedCov_radmps,%{public}.6f", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      v21 = *(_QWORD *)a2;
      v22 = *((_QWORD *)a2 + 1);
      v23 = *((_QWORD *)a2 + 2);
      v24 = *((_QWORD *)a2 + 3);
      v25 = *((_QWORD *)a2 + 4);
      v26 = *((_QWORD *)a2 + 5);
      v27 = *((_QWORD *)a2 + 6);
      v43 = 134350592;
      v44 = v21;
      v45 = 2050;
      v46 = v22;
      v47 = 2050;
      v48 = v23;
      v49 = 2050;
      v50 = v24;
      v51 = 2050;
      v52 = v25;
      v53 = 2050;
      v54 = v26;
      v55 = 2050;
      v56 = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLVDR2DofNotifier,SR,measurement,timestamp_s,%{public}.3f,dataPeriod_s,%{public}.3f,deltaCourse_rad,%{public}.6f,deltaSpeed_mps,%{public}.6f,deltaCourseVar_rad2,%{public}.6f,deltaSpeedVar_mps2,%{public}.6f,deltaCourseSpeedCov_radmps,%{public}.6f", &v43, 72, v39, v40, v41, v42);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::onVDR2DoFMeasurement(const CLVDR2DofMeasurement &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v39, 0, 0xFFFFFFFFLL, 0);
  }
  else
  {
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
    v13 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)a2;
      v15 = *((_QWORD *)a2 + 1);
      v16 = *((_QWORD *)a2 + 2);
      v17 = *((_QWORD *)a2 + 3);
      v18 = *((_QWORD *)a2 + 4);
      v19 = *((_QWORD *)a2 + 5);
      v20 = *((_QWORD *)a2 + 6);
      *(_DWORD *)buf = 134350592;
      v58 = v14;
      v59 = 2050;
      v60 = v15;
      v61 = 2050;
      v62 = v16;
      v63 = 2050;
      v64 = v17;
      v65 = 2050;
      v66 = v18;
      v67 = 2050;
      v68 = v19;
      v69 = 2050;
      v70 = v20;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#VDR,CLVDR2DofNotifierFromSR, Warning, invalid measurement,timestamp,%{public}.3f,dataPeriod,%{public}.3f,deltaCourse,%{public}.6f,deltaSpeed,%{public}.6f,courseVar,%{public}.6f,speedVar,%{public}.6f,deltaCourseSpeedCovar,%{public}.6f", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10218E0A8);
      v30 = *(_QWORD *)a2;
      v31 = *((_QWORD *)a2 + 1);
      v32 = *((_QWORD *)a2 + 2);
      v33 = *((_QWORD *)a2 + 3);
      v34 = *((_QWORD *)a2 + 4);
      v35 = *((_QWORD *)a2 + 5);
      v36 = *((_QWORD *)a2 + 6);
      v43 = 134350592;
      v44 = v30;
      v45 = 2050;
      v46 = v31;
      v47 = 2050;
      v48 = v32;
      v49 = 2050;
      v50 = v33;
      v51 = 2050;
      v52 = v34;
      v53 = 2050;
      v54 = v35;
      v55 = 2050;
      v56 = v36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLVDR2DofNotifierFromSR, Warning, invalid measurement,timestamp,%{public}.3f,dataPeriod,%{public}.3f,deltaCourse,%{public}.6f,deltaSpeed,%{public}.6f,courseVar,%{public}.6f,speedVar,%{public}.6f,deltaCourseSpeedCovar,%{public}.6f", &v43, 72);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::onVDR2DoFMeasurement(const CLVDR2DofMeasurement &)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
  }
}

BOOL sub_100E80900(uint64_t a1, double *a2)
{
  double v2;
  BOOL v3;
  _BOOL8 result;
  double v5;
  double v6;

  v2 = a2[1];
  if (v2 == 0.0)
    return 0;
  v3 = v2 > 0.001 && v2 < 60.0;
  if (!v3 || fabs(a2[2]) > 3.14159265)
    return 0;
  result = 0;
  if (fabs(a2[3] / v2) <= 20.0)
  {
    v5 = a2[4];
    if (v5 > 0.0)
    {
      v6 = a2[5];
      if (v6 > 0.0)
        return a2[6] * a2[6] <= v5 * 1.05 * v6;
    }
  }
  return result;
}

void sub_100E809A0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E809CC(id a1)
{
  qword_1022A01A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_100E809F8(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 102;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 204;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_100E80A8C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0xCC)
    a2 = 1;
  if (v2 < 0x198)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 204;
  }
  return v4 ^ 1u;
}

void sub_100E80AE8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2)
  {
    v3 = (_QWORD *)a2[236];
    if (v3 == a2 + 233)
    {
      v4 = 4;
      v3 = a2 + 233;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    a2[114] = off_10214AE70;
    *a2 = off_102172790;
    operator delete();
  }
}

_QWORD *sub_100E80B70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10218E0D8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E80BA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10218E0D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E80BC8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, double))(a1 + 8))(*a2, a3, a4, a5, *a6);
}

uint64_t sub_100E80BE4(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10218E158))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100E80C20()
{
  return &off_10218E158;
}

void sub_100E80C2C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xCC;
  v4 = v2 - 204;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E80EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100E80F40(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E81208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100E81254()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C2B4A8;
      v1[3] = unk_101C2B4B8;
      v1[4] = xmmword_101C2B4C8;
      v1[0] = xmmword_101C2B488;
      v1[1] = unk_101C2B498;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100E81328(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100E8156C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_100E81598(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

BOOL sub_100E815A0(_QWORD *a1)
{
  return *a1 && a1[1] != 0;
}

void sub_100E816F8(uint64_t *a1)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t *v8;
  uint8_t buf[4];
  uint64_t *v10;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218E198);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0)
      v3 = a1;
    else
      v3 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136380675;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#SettingsMap,create,root,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    if (*((char *)a1 + 23) >= 0)
      v4 = a1;
    else
      v4 = (uint64_t *)*a1;
    v7 = 136380675;
    v8 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#SettingsMap,create,root,%{private}s", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "static std::shared_ptr<RootNode> CLMASettingsMap::RootNode::create(const std::string &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  operator new();
}

void sub_100E818F4()
{
  operator delete();
}

void sub_100E81920(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  NSObject *v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  const char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  uint64_t v54;
  _BYTE buf[1628];

  sub_1007208BC(&v49, (_QWORD *)(a1 + 32));
  v6 = v50;
  if (!v50 || v50->__shared_owners_ == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v26 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,root,%{private}s,failed to get shared this", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v34 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v34 = (_QWORD *)*v34;
      v51 = 136380675;
      v52 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,addBranch,root,%{private}s,failed to get shared this", &v51, 12);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    v8 = v49;
    *(_QWORD *)buf = v49;
    *(_QWORD *)&buf[8] = v50;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v47 = v8;
    v48 = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v12 = v50;
    v45 = v8;
    v46 = v50;
    if (v50)
    {
      v13 = (unint64_t *)&v50->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    sub_100E81FE4((uint64_t *)a2, &v47, &v45, a3);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    std::__shared_weak_count::__release_weak(v6);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v16 = a3[1];
    if (!v16 || *(_QWORD *)(v16 + 8) == -1)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v28 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v29 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v29 = (_QWORD *)*v29;
        if (*(char *)(a2 + 23) >= 0)
          v30 = a2;
        else
          v30 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)&buf[4] = v29;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,failed to create branch", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_10218E198);
        v37 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v37 = (_QWORD *)*v37;
        if (*(char *)(a2 + 23) >= 0)
          v38 = a2;
        else
          v38 = *(_QWORD *)a2;
        v51 = 136380931;
        v52 = v37;
        v53 = 2081;
        v54 = v38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,failed to create branch", &v51, 22, v45, v46, v47, v48);
        v40 = (char *)v39;
        sub_100512490("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v17 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        v18 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v18 = (_QWORD *)*v18;
        if (*(char *)(a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,successful", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_10218E198);
        v41 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v41 = (_QWORD *)*v41;
        if (*(char *)(a2 + 23) >= 0)
          v42 = a2;
        else
          v42 = *(_QWORD *)a2;
        v51 = 136380931;
        v52 = v41;
        v53 = 2081;
        v54 = v42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,successful", &v51, 22, v45, v46, v47, v48);
        v44 = (char *)v43;
        sub_100512490("Generic", 1, 0, 2, "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      v20 = *(_QWORD *)(a1 + 48);
      v21 = operator new(0x18uLL);
      v23 = *a3;
      v22 = a3[1];
      *v21 = v20;
      v21[1] = v23;
      v21[2] = v22;
      if (v22)
      {
        v24 = (unint64_t *)(v22 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      *(_QWORD *)(a1 + 48) = v21;
    }
  }
  v31 = v50;
  if (v50)
  {
    v32 = (unint64_t *)&v50->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_100E81F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_100261F44(v7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E81FE4(uint64_t *a1@<X0>, std::__shared_weak_count **a2@<X1>, std::__shared_weak_count **a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v8;
  NSObject *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t *p_shared_owners;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t *v21;
  uint64_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  int v39;
  uint64_t *v40;
  __int16 v41;
  uint64_t *v42;
  __int16 v43;
  uint64_t *v44;
  uint8_t buf[4];
  uint64_t *v46;
  __int16 v47;
  uint64_t *v48;
  __int16 v49;
  uint64_t *v50;

  v6 = a2[1];
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
    {
      v8 = a3[1];
      if (v8)
      {
        if (v8->__shared_owners_ != -1)
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_10218E198);
          v10 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)a1 + 23) >= 0)
              v11 = a1;
            else
              v11 = (uint64_t *)*a1;
            v12 = std::__shared_weak_count::lock(a2[1]);
            p_shared_owners = &(*a2)->__shared_owners_;
            if (SHIBYTE((*a2)[1].__vftable) < 0)
              p_shared_owners = (uint64_t *)*p_shared_owners;
            v14 = std::__shared_weak_count::lock(a3[1]);
            v15 = &(*a3)->__shared_owners_;
            if (SHIBYTE((*a3)[1].__vftable) < 0)
              v15 = (uint64_t *)*v15;
            *(_DWORD *)buf = 136381187;
            v46 = v11;
            v47 = 2081;
            v48 = p_shared_owners;
            v49 = 2081;
            v50 = v15;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#SettingsMap,create,branch,%{private}s,parent,%{private}s,root,%{private}s", buf, 0x20u);
            v16 = (unint64_t *)&v14->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
            v18 = (unint64_t *)&v12->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_10218E198);
            v25 = qword_1022A02A8;
            if (*((char *)a1 + 23) >= 0)
              v26 = a1;
            else
              v26 = (uint64_t *)*a1;
            v37 = 0;
            v38 = 0;
            v27 = a2[1];
            if (v27 && (v38 = std::__shared_weak_count::lock(v27)) != 0)
            {
              v28 = *a2;
              v37 = *a2;
            }
            else
            {
              v28 = 0;
            }
            v29 = &v28->__shared_owners_;
            if (SHIBYTE(v28[1].__vftable) < 0)
              v29 = (uint64_t *)*v29;
            v35 = 0;
            v36 = 0;
            v30 = a3[1];
            if (v30 && (v36 = std::__shared_weak_count::lock(v30)) != 0)
            {
              v31 = *a3;
              v35 = *a3;
            }
            else
            {
              v31 = 0;
            }
            v32 = &v31->__shared_owners_;
            if (SHIBYTE(v31[1].__vftable) < 0)
              v32 = (uint64_t *)*v32;
            v39 = 136381187;
            v40 = v26;
            v41 = 2081;
            v42 = v29;
            v43 = 2081;
            v44 = v32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "#SettingsMap,create,branch,%{private}s,parent,%{private}s,root,%{private}s", &v39, 32);
            v34 = v33;
            sub_100261F44((uint64_t)&v35);
            sub_100261F44((uint64_t)&v37);
            sub_100512490("Generic", 1, 0, 2, "static std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::create(const std::string &, std::weak_ptr<NodeBase>, std::weak_ptr<RootNode>)", "%s\n", v34);
            if (v34 != (char *)buf)
              free(v34);
          }
          operator new();
        }
      }
    }
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218E198);
  v20 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0)
      v21 = a1;
    else
      v21 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136380675;
    v46 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#SettingsMap,create,branch,%{private}s,parent and/or root is empty", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    if (*((char *)a1 + 23) >= 0)
      v22 = a1;
    else
      v22 = (uint64_t *)*a1;
    v39 = 136380675;
    v40 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,create,branch,%{private}s,parent and/or root is empty", &v39, 12);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 0, "static std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::create(const std::string &, std::weak_ptr<NodeBase>, std::weak_ptr<RootNode>)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  *a4 = 0;
  a4[1] = 0;
}

void sub_100E8254C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  int v14;

  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v14)
    operator delete();
  _Unwind_Resume(exception_object);
}

void sub_100E82594(uint64_t *a1@<X0>, int a2@<W1>, std::__shared_weak_count **a3@<X2>, std::__shared_weak_count **a4@<X3>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  NSObject *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t *p_shared_owners;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  int v41;
  uint64_t *v42;
  __int16 v43;
  uint64_t *v44;
  __int16 v45;
  uint64_t *v46;
  __int16 v47;
  int v48;
  uint8_t buf[4];
  uint64_t *v50;
  __int16 v51;
  uint64_t *v52;
  __int16 v53;
  uint64_t *v54;
  __int16 v55;
  int v56;

  v7 = a3[1];
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
    {
      v9 = a4[1];
      if (v9)
      {
        if (v9->__shared_owners_ != -1)
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_10218E198);
          v12 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)a1 + 23) >= 0)
              v13 = a1;
            else
              v13 = (uint64_t *)*a1;
            v14 = std::__shared_weak_count::lock(a3[1]);
            p_shared_owners = &(*a3)->__shared_owners_;
            if (SHIBYTE((*a3)[1].__vftable) < 0)
              p_shared_owners = (uint64_t *)*p_shared_owners;
            v16 = std::__shared_weak_count::lock(a4[1]);
            v17 = &(*a4)->__shared_owners_;
            if (SHIBYTE((*a4)[1].__vftable) < 0)
              v17 = (uint64_t *)*v17;
            *(_DWORD *)buf = 136381443;
            v50 = v13;
            v51 = 2081;
            v52 = p_shared_owners;
            v53 = 2081;
            v54 = v17;
            v55 = 1025;
            v56 = a2;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#SettingsMap,create,leaf,%{private}s,parent,%{private}s,root,%{private}s,type,%{private}d", buf, 0x26u);
            v18 = (unint64_t *)&v16->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
            v20 = (unint64_t *)&v14->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_10218E198);
            v27 = qword_1022A02A8;
            if (*((char *)a1 + 23) >= 0)
              v28 = a1;
            else
              v28 = (uint64_t *)*a1;
            v39 = 0;
            v40 = 0;
            v29 = a3[1];
            if (v29 && (v40 = std::__shared_weak_count::lock(v29)) != 0)
            {
              v30 = *a3;
              v39 = *a3;
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30->__shared_owners_;
            if (SHIBYTE(v30[1].__vftable) < 0)
              v31 = (uint64_t *)*v31;
            v37 = 0;
            v38 = 0;
            v32 = a4[1];
            if (v32 && (v38 = std::__shared_weak_count::lock(v32)) != 0)
            {
              v33 = *a4;
              v37 = *a4;
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33->__shared_owners_;
            if (SHIBYTE(v33[1].__vftable) < 0)
              v34 = (uint64_t *)*v34;
            v41 = 136381443;
            v42 = v28;
            v43 = 2081;
            v44 = v31;
            v45 = 2081;
            v46 = v34;
            v47 = 1025;
            v48 = a2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "#SettingsMap,create,leaf,%{private}s,parent,%{private}s,root,%{private}s,type,%{private}d", &v41, 38);
            v36 = v35;
            sub_100261F44((uint64_t)&v37);
            sub_100261F44((uint64_t)&v39);
            sub_100512490("Generic", 1, 0, 2, "static std::shared_ptr<LeafNode> CLMASettingsMap::LeafNode::create(const std::string &, DataType, std::weak_ptr<NodeBase>, std::weak_ptr<RootNode>)", "%s\n", v36);
            if (v36 != (char *)buf)
              free(v36);
          }
          operator new();
        }
      }
    }
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218E198);
  v22 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0)
      v23 = a1;
    else
      v23 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136380675;
    v50 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#SettingsMap,create,leaf,%{private}s,parent and/or root is empty", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    if (*((char *)a1 + 23) >= 0)
      v24 = a1;
    else
      v24 = (uint64_t *)*a1;
    v41 = 136380675;
    v42 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,create,leaf,%{private}s,parent and/or root is empty", &v41, 12);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 0, "static std::shared_ptr<LeafNode> CLMASettingsMap::LeafNode::create(const std::string &, DataType, std::weak_ptr<NodeBase>, std::weak_ptr<RootNode>)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  *a5 = 0;
  a5[1] = 0;
}

void sub_100E82B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  int v14;

  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v14)
    operator delete();
  _Unwind_Resume(exception_object);
}

void sub_100E82B68(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  for (i = *(_QWORD **)(a1 + 48); i; i = (_QWORD *)*i)
  {
    v4 = i[1];
    v5 = (std::__shared_weak_count *)i[2];
    v18 = v4;
    v19 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v16 = v4;
      v17 = v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    else
    {
      v16 = v4;
      v17 = 0;
    }
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_100E82C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100E82C90(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  for (i = *(_QWORD **)(a1 + 56); i; i = (_QWORD *)*i)
  {
    v4 = i[1];
    v5 = (std::__shared_weak_count *)i[2];
    v18 = v4;
    v19 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v16 = v4;
      v17 = v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    else
    {
      v16 = v4;
      v17 = 0;
    }
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_100E82D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100E82DB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  _QWORD *v33;
  _QWORD *v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  const char *v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  int v78;
  _QWORD *v79;
  __int16 v80;
  _QWORD *v81;
  __int16 v82;
  uint64_t v83;
  _BYTE buf[22];
  __int16 v85;
  uint64_t v86;

  sub_1007208BC(&v76, (_QWORD *)(a1 + 32));
  v6 = v77;
  if (!v77 || v77->__shared_owners_ == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v32 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v33 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v33 = (_QWORD *)*v33;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,branch,%{private}s,failed to get shared this", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_61;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v34 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v34 = (_QWORD *)*v34;
    v78 = 136380675;
    v79 = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,addBranch,branch,%{private}s,failed to get shared this", &v78, 12);
    v36 = (char *)v35;
    sub_100512490("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)", "%s\n", v35);
    goto LABEL_98;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (!v7 || *(_QWORD *)(v7 + 8) == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v37 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v38 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v38 = (_QWORD *)*v38;
      if (*(char *)(a2 + 23) >= 0)
        v39 = a2;
      else
        v39 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v38;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,branch,%{private}s,subBranch,%{private}s,root is empty", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_61;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v55 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v55 = (_QWORD *)*v55;
    if (*(char *)(a2 + 23) >= 0)
      v56 = a2;
    else
      v56 = *(_QWORD *)a2;
    v78 = 136380931;
    v79 = v55;
    v80 = 2081;
    v81 = (_QWORD *)v56;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,addBranch,branch,%{private}s,subBranch,%{private}s,root is empty", &v78, 22);
    v36 = (char *)v57;
    sub_100512490("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)", "%s\n", v57);
LABEL_98:
    if (v36 != buf)
      free(v36);
LABEL_61:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_62;
  }
  p_shared_owners = (unint64_t *)&v77->__shared_owners_;
  v9 = v76;
  *(_QWORD *)buf = v76;
  *(_QWORD *)&buf[8] = v77;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v74 = v9;
  v75 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *(std::__shared_weak_count **)(a1 + 72);
  v72 = *(std::__shared_weak_count **)(a1 + 64);
  v73 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_100E81FE4((uint64_t *)a2, &v74, &v72, a3);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  std::__shared_weak_count::__release_weak(v6);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v17 = a3[1];
  if (!v17 || *(_QWORD *)(v17 + 8) == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v43 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v44 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v44 = (_QWORD *)*v44;
      v45 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      v46 = *(_QWORD *)(a1 + 64);
      v47 = (_QWORD *)(v46 + 8);
      if (*(char *)(v46 + 31) < 0)
        v47 = (_QWORD *)*v47;
      if (*(char *)(a2 + 23) >= 0)
        v48 = a2;
      else
        v48 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = v44;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v47;
      v85 = 2081;
      v86 = v48;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,failed to create branch", buf, 0x20u);
      v49 = (unint64_t *)&v45->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v51 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v51 = (_QWORD *)*v51;
      v52 = qword_1022A02A8;
      v70 = 0;
      v71 = 0;
      v53 = *(std::__shared_weak_count **)(a1 + 72);
      if (v53 && (v71 = std::__shared_weak_count::lock(v53)) != 0)
      {
        v54 = *(_QWORD *)(a1 + 64);
        v70 = v54;
      }
      else
      {
        v54 = 0;
      }
      v62 = (_QWORD *)(v54 + 8);
      if (*(char *)(v54 + 31) < 0)
        v62 = (_QWORD *)*v62;
      if (*(char *)(a2 + 23) >= 0)
        v63 = a2;
      else
        v63 = *(_QWORD *)a2;
      v78 = 136381187;
      v79 = v51;
      v80 = 2081;
      v81 = v62;
      v82 = 2081;
      v83 = v63;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v52, 16, "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,failed to create branch", &v78, 32, v70, v71, v72, v73, v74, v75);
      v65 = v64;
      sub_100261F44((uint64_t)&v70);
      sub_100512490("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)", "%s\n", v65);
      if (v65 != buf)
        free(v65);
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v18 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v19 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v19 = (_QWORD *)*v19;
      v20 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      v21 = *(_QWORD *)(a1 + 64);
      v22 = (_QWORD *)(v21 + 8);
      if (*(char *)(v21 + 31) < 0)
        v22 = (_QWORD *)*v22;
      if (*(char *)(a2 + 23) >= 0)
        v23 = a2;
      else
        v23 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = v19;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v22;
      v85 = 2081;
      v86 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,successful", buf, 0x20u);
      v24 = (unint64_t *)&v20->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v58 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v58 = (_QWORD *)*v58;
      v59 = qword_1022A02A8;
      v70 = 0;
      v71 = 0;
      v60 = *(std::__shared_weak_count **)(a1 + 72);
      if (v60 && (v71 = std::__shared_weak_count::lock(v60)) != 0)
      {
        v61 = *(_QWORD *)(a1 + 64);
        v70 = v61;
      }
      else
      {
        v61 = 0;
      }
      v66 = (_QWORD *)(v61 + 8);
      if (*(char *)(v61 + 31) < 0)
        v66 = (_QWORD *)*v66;
      if (*(char *)(a2 + 23) >= 0)
        v67 = a2;
      else
        v67 = *(_QWORD *)a2;
      v78 = 136381187;
      v79 = v58;
      v80 = 2081;
      v81 = v66;
      v82 = 2081;
      v83 = v67;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 2, "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,successful", &v78, 32, v70, v71, v72, v73, v74, v75);
      v69 = v68;
      sub_100261F44((uint64_t)&v70);
      sub_100512490("Generic", 1, 0, 2, "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)", "%s\n", v69);
      if (v69 != buf)
        free(v69);
    }
    v26 = *(_QWORD *)(a1 + 80);
    v27 = operator new(0x18uLL);
    v29 = *a3;
    v28 = a3[1];
    *v27 = v26;
    v27[1] = v29;
    v27[2] = v28;
    if (v28)
    {
      v30 = (unint64_t *)(v28 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    *(_QWORD *)(a1 + 80) = v27;
  }
LABEL_62:
  v40 = v77;
  if (v77)
  {
    v41 = (unint64_t *)&v77->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_100E83714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_100261F44(v9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E83774(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  const char *v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  int v80;
  _QWORD *v81;
  __int16 v82;
  _QWORD *v83;
  __int16 v84;
  uint64_t v85;
  _BYTE buf[22];
  __int16 v87;
  uint64_t v88;

  sub_1007208BC(&v78, (_QWORD *)(a1 + 32));
  v8 = v79;
  if (!v79 || v79->__shared_owners_ == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v34 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v35 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v35 = (_QWORD *)*v35;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#SettingsMap,addLeaf,branch,%{private}s,failed to get shared this", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_61;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    v80 = 136380675;
    v81 = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,addLeaf,branch,%{private}s,failed to get shared this", &v80, 12);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)", "%s\n", v37);
    goto LABEL_98;
  }
  v9 = *(_QWORD *)(a1 + 72);
  if (!v9 || *(_QWORD *)(v9 + 8) == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v39 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v40 = (_QWORD *)*v40;
      if (*(char *)(a2 + 23) >= 0)
        v41 = a2;
      else
        v41 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v41;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#SettingsMap,addLeaf,branch,%{private}s,leaf,%{private}s,root is empty", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_61;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v57 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v57 = (_QWORD *)*v57;
    if (*(char *)(a2 + 23) >= 0)
      v58 = a2;
    else
      v58 = *(_QWORD *)a2;
    v80 = 136380931;
    v81 = v57;
    v82 = 2081;
    v83 = (_QWORD *)v58;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,addLeaf,branch,%{private}s,leaf,%{private}s,root is empty", &v80, 22);
    v38 = (char *)v59;
    sub_100512490("Generic", 1, 0, 0, "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)", "%s\n", v59);
LABEL_98:
    if (v38 != buf)
      free(v38);
LABEL_61:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_62;
  }
  p_shared_owners = (unint64_t *)&v79->__shared_owners_;
  v11 = v78;
  *(_QWORD *)buf = v78;
  *(_QWORD *)&buf[8] = v79;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v76 = v11;
  v77 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(std::__shared_weak_count **)(a1 + 72);
  v74 = *(std::__shared_weak_count **)(a1 + 64);
  v75 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  sub_100E82594((uint64_t *)a2, a3, &v76, &v74, a4);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  std::__shared_weak_count::__release_weak(v8);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v19 = a4[1];
  if (!v19 || *(_QWORD *)(v19 + 8) == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v45 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v46 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v46 = (_QWORD *)*v46;
      v47 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      v48 = *(_QWORD *)(a1 + 64);
      v49 = (_QWORD *)(v48 + 8);
      if (*(char *)(v48 + 31) < 0)
        v49 = (_QWORD *)*v49;
      if (*(char *)(a2 + 23) >= 0)
        v50 = a2;
      else
        v50 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = v46;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v49;
      v87 = 2081;
      v88 = v50;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,failed to create leaf", buf, 0x20u);
      v51 = (unint64_t *)&v47->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v53 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v53 = (_QWORD *)*v53;
      v54 = qword_1022A02A8;
      v72 = 0;
      v73 = 0;
      v55 = *(std::__shared_weak_count **)(a1 + 72);
      if (v55 && (v73 = std::__shared_weak_count::lock(v55)) != 0)
      {
        v56 = *(_QWORD *)(a1 + 64);
        v72 = v56;
      }
      else
      {
        v56 = 0;
      }
      v64 = (_QWORD *)(v56 + 8);
      if (*(char *)(v56 + 31) < 0)
        v64 = (_QWORD *)*v64;
      if (*(char *)(a2 + 23) >= 0)
        v65 = a2;
      else
        v65 = *(_QWORD *)a2;
      v80 = 136381187;
      v81 = v53;
      v82 = 2081;
      v83 = v64;
      v84 = 2081;
      v85 = v65;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 16, "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,failed to create leaf", &v80, 32, v72, v73, v74, v75, v76, v77);
      v67 = v66;
      sub_100261F44((uint64_t)&v72);
      sub_100512490("Generic", 1, 0, 0, "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)", "%s\n", v67);
      if (v67 != buf)
        free(v67);
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v20 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v21 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v21 = (_QWORD *)*v21;
      v22 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (_QWORD *)(v23 + 8);
      if (*(char *)(v23 + 31) < 0)
        v24 = (_QWORD *)*v24;
      if (*(char *)(a2 + 23) >= 0)
        v25 = a2;
      else
        v25 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v24;
      v87 = 2081;
      v88 = v25;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,successful", buf, 0x20u);
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v60 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v60 = (_QWORD *)*v60;
      v61 = qword_1022A02A8;
      v72 = 0;
      v73 = 0;
      v62 = *(std::__shared_weak_count **)(a1 + 72);
      if (v62 && (v73 = std::__shared_weak_count::lock(v62)) != 0)
      {
        v63 = *(_QWORD *)(a1 + 64);
        v72 = v63;
      }
      else
      {
        v63 = 0;
      }
      v68 = (_QWORD *)(v63 + 8);
      if (*(char *)(v63 + 31) < 0)
        v68 = (_QWORD *)*v68;
      if (*(char *)(a2 + 23) >= 0)
        v69 = a2;
      else
        v69 = *(_QWORD *)a2;
      v80 = 136381187;
      v81 = v60;
      v82 = 2081;
      v83 = v68;
      v84 = 2081;
      v85 = v69;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v61, 2, "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,successful", &v80, 32, v72, v73, v74, v75, v76, v77);
      v71 = v70;
      sub_100261F44((uint64_t)&v72);
      sub_100512490("Generic", 1, 0, 2, "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)", "%s\n", v71);
      if (v71 != buf)
        free(v71);
    }
    v28 = *(_QWORD *)(a1 + 88);
    v29 = operator new(0x18uLL);
    v31 = *a4;
    v30 = a4[1];
    *v29 = v28;
    v29[1] = v31;
    v29[2] = v30;
    if (v30)
    {
      v32 = (unint64_t *)(v30 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    *(_QWORD *)(a1 + 88) = v29;
  }
LABEL_62:
  v42 = v79;
  if (v79)
  {
    v43 = (unint64_t *)&v79->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_100E840D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_100261F44(v9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E84138(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  for (i = *(_QWORD **)(a1 + 80); i; i = (_QWORD *)*i)
  {
    v4 = i[1];
    v5 = (std::__shared_weak_count *)i[2];
    v18 = v4;
    v19 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v16 = v4;
      v17 = v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    else
    {
      v16 = v4;
      v17 = 0;
    }
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_100E84240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100E84260(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  for (i = *(_QWORD **)(a1 + 88); i; i = (_QWORD *)*i)
  {
    v4 = i[1];
    v5 = (std::__shared_weak_count *)i[2];
    v18 = v4;
    v19 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v16 = v4;
      v17 = v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    else
    {
      v16 = v4;
      v17 = 0;
    }
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_100E84368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

id sub_100E84388(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  const char *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v14;
  uint8_t *v15;
  __int128 v16;
  uint8_t buf[4];
  _QWORD *v18;

  if (!a2)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v11 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v12 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v12 = (_QWORD *)*v12;
      *(_DWORD *)buf = 136380675;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#SettingsMap,getBranchFromDict,branch,%{private}s,dict is nil", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v14 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v14 = (_QWORD *)*v14;
    LODWORD(v16) = 136380675;
    *(_QWORD *)((char *)&v16 + 4) = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,getBranchFromDict,branch,%{private}s,dict is nil", &v16, 12, v16);
    goto LABEL_32;
  }
  v3 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v4 = (_QWORD *)*v3;
  v6 = objc_msgSend(a2, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
  if (v6)
  {
    v7 = objc_opt_class(NSDictionary, v5);
    if ((objc_opt_isKindOfClass(v6, v7) & 1) == 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v8 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v9 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v9 = (_QWORD *)*v3;
        *(_DWORD *)buf = 136380675;
        v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#SettingsMap,getBranchFromDict,branch,%{private}s,found branch but not a dict", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      LODWORD(v16) = 136380675;
      *(_QWORD *)((char *)&v16 + 4) = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,getBranchFromDict,branch,%{private}s,found branch but not a dict", &v16, 12, v16);
LABEL_32:
      v15 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLMASettingsMap::BranchNode::getBranchFromDict(NSDictionary *)", "%s\n", v10);
      if (v15 != buf)
        free(v15);
      return 0;
    }
  }
  return v6;
}

uint64_t sub_100E846B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  char *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  char *v29;
  _QWORD *v30;
  const char *v31;
  char *v32;
  char *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _QWORD *v41;
  _BYTE buf[1628];

  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  v4 = (_QWORD *)(a1 + 8);
  sub_100E84C60((uint64_t)&v35, (__int128 *)(a1 + 8));
  v33 = 0;
  v34 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    v34 = v6;
    if (v6)
    {
      v33 = *(char **)(a1 + 40);
      while (v6->__shared_owners_ != -1)
      {
        if (!(*(unsigned int (**)(char *))(*(_QWORD *)v33 + 16))(v33))
        {
          *(_OWORD *)a2 = v35;
          v24 = *((_QWORD *)&v36 + 1);
          *(_QWORD *)(a2 + 16) = v36;
          *(_QWORD *)(a2 + 24) = v24;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(a2 + 32) = v37;
          v37 = 0uLL;
          goto LABEL_37;
        }
        if ((*(unsigned int (**)(char *))(*(_QWORD *)v33 + 16))(v33) != 1)
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_10218E198);
          v25 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
          {
            v26 = v4;
            if (*(char *)(a1 + 31) < 0)
              v26 = (_QWORD *)*v4;
            v27 = v33 + 8;
            if (v33[31] < 0)
              v27 = (_QWORD *)*v27;
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = v26;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)&buf[14] = v27;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#SettingsMap,getLocationOnTree,leaf,%{private}s,parent,%{private}s,parent is not branch or root", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_10218E198);
            if (*(char *)(a1 + 31) < 0)
              v4 = (_QWORD *)*v4;
            v30 = v33 + 8;
            if (v33[31] < 0)
              v30 = (_QWORD *)*v30;
            v38 = 136380931;
            v39 = v4;
            v40 = 2081;
            v41 = v30;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,getLocationOnTree,leaf,%{private}s,parent,%{private}s,parent is not branch or root", &v38, 22);
            v32 = (char *)v31;
            sub_100512490("Generic", 1, 0, 0, "std::deque<std::string> CLMASettingsMap::LeafNode::getLocationOnTree() const", "%s\n", v31);
            if (v32 != buf)
              free(v32);
          }
          *(_OWORD *)(a2 + 16) = 0u;
          *(_OWORD *)(a2 + 32) = 0u;
          *(_OWORD *)a2 = 0u;
          goto LABEL_37;
        }
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          *(_QWORD *)buf = v7;
          *(_QWORD *)&buf[8] = v6;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        else
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
        }
        sub_100E84C60((uint64_t)&v35, (__int128 *)(v7 + 8));
        v10 = *(_QWORD *)buf;
        v11 = *(std::__shared_weak_count **)(*(_QWORD *)buf + 56);
        if (v11 && (v11 = std::__shared_weak_count::lock(v11)) != 0)
          v12 = *(char **)(v10 + 48);
        else
          v12 = 0;
        v13 = v34;
        v33 = v12;
        v34 = v11;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v16 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v6 = v34;
        if (!v34)
          break;
      }
    }
  }
  else
  {
    v6 = 0;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218E198);
  v19 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v20 = v4;
    if (*(char *)(a1 + 31) < 0)
      v20 = (_QWORD *)*v4;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#SettingsMap,getLocationOnTree,leaf,%{private}s,parent is empty", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    if (*(char *)(a1 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v38 = 136380675;
    v39 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,getLocationOnTree,leaf,%{private}s,parent is empty", &v38, 12, v33, v34);
    v29 = (char *)v28;
    sub_100512490("Generic", 1, 0, 0, "std::deque<std::string> CLMASettingsMap::LeafNode::getLocationOnTree() const", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (v6)
  {
LABEL_37:
    v21 = (unint64_t *)&v6->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return sub_100C95458(&v35);
}

void sub_100E84C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100C95458(va1);
  _Unwind_Resume(a1);
}

int64x2_t sub_100E84C60(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_100E87CAC((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0xAA));
  v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4080;
  v8 = (_BYTE *)(v7 - 24);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(v8, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(v7 - 8) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v8 = v9;
  }
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_100E84D14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(int *)(a1 + 32);
  if (v2 <= 2)
  {
    v4 = objc_opt_class(*off_10218E698[v2], a2);
    LOBYTE(a1) = objc_opt_isKindOfClass(a2, v4);
  }
  return a1 & 1;
}

uint64_t sub_100E84D60(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  NSObject *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  const char *v23;
  const char *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  _QWORD *v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  _QWORD *v32;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  v5 = a2[1];
  if (!v5 || *(_QWORD *)(v5 + 8) == -1 || (v7 = a3[1]) == 0 || *(_QWORD *)(v7 + 8) == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v16 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,constructor,from and/or to root is empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      LOWORD(v25) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,constructor,from and/or to root is empty", &v25, 2);
      v15 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "CLMASettingsMap::DictMap::DictMap(std::shared_ptr<RootNode>, std::shared_ptr<RootNode>)", "%s\n", v24);
      goto LABEL_47;
    }
  }
  else if (*a2 == *a3)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v18 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v19 = (_QWORD *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0)
        v19 = (_QWORD *)*v19;
      v20 = (_QWORD *)(*a3 + 8);
      if (*(char *)(*a3 + 31) < 0)
        v20 = (_QWORD *)*v20;
      *(_DWORD *)buf = 136380931;
      v30 = v19;
      v31 = 2081;
      v32 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,constructor,from,%{private}s,to,%{private}s,from and to root are the same", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v21 = (_QWORD *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0)
        v21 = (_QWORD *)*v21;
      v22 = (_QWORD *)(*a3 + 8);
      if (*(char *)(*a3 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136380931;
      v26 = v21;
      v27 = 2081;
      v28 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,constructor,from,%{private}s,to,%{private}s,from and to root are the same", &v25, 22);
      v15 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "CLMASettingsMap::DictMap::DictMap(std::shared_ptr<RootNode>, std::shared_ptr<RootNode>)", "%s\n", v23);
      goto LABEL_47;
    }
  }
  else
  {
    sub_100349198((_QWORD *)a1, a2);
    sub_100349198(v4, a3);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (_QWORD *)(*a3 + 8);
      if (*(char *)(*a3 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136380931;
      v30 = v10;
      v31 = 2081;
      v32 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,constructor,from,%{private}s,to,%{private}s,created", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v12 = (_QWORD *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0)
        v12 = (_QWORD *)*v12;
      v13 = (_QWORD *)(*a3 + 8);
      if (*(char *)(*a3 + 31) < 0)
        v13 = (_QWORD *)*v13;
      v25 = 136380931;
      v26 = v12;
      v27 = 2081;
      v28 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#SettingsMap,DictMap,constructor,from,%{private}s,to,%{private}s,created", &v25, 22);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLMASettingsMap::DictMap::DictMap(std::shared_ptr<RootNode>, std::shared_ptr<RootNode>)", "%s\n", v14);
LABEL_47:
      if (v15 != buf)
        free(v15);
    }
  }
  return a1;
}

void sub_100E852B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100E87984(v1 + 32);
  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E852E4(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  char v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  const char *v33;
  NSObject *v34;
  _QWORD *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  const char *v49;
  char *v50;
  _QWORD *v51;
  const char *v52;
  char *v53;
  _QWORD *v54;
  const char *v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  int v68;
  _QWORD *v69;
  __int16 v70;
  _QWORD *v71;
  __int16 v72;
  _QWORD *v73;
  __int16 v74;
  _QWORD *v75;
  _BYTE buf[12];
  __int16 v77;
  _QWORD *v78;
  __int16 v79;
  _QWORD *v80;
  __int16 v81;
  _QWORD *v82;

  v3 = a1[1];
  if (!v3
    || *(_QWORD *)(v3 + 8) == -1
    || (v5 = a1[3]) == 0
    || *(_QWORD *)(v5 + 8) == -1
    || (v7 = a2[1]) == 0
    || *(_QWORD *)(v7 + 8) == -1
    || (v9 = a3[1]) == 0
    || *(_QWORD *)(v9 + 8) == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v19 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,from and/or to root and/or leaf is empty", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    LOWORD(v68) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,addRelation,from and/or to root and/or leaf is empty", &v68, 2);
    v28 = (char *)v33;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v33);
    goto LABEL_58;
  }
  v10 = *a2;
  if (*(_DWORD *)(*a2 + 32) != *(_DWORD *)(*a3 + 32))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v22 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v23 = (_QWORD *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0)
        v23 = (_QWORD *)*v23;
      v24 = (_QWORD *)(*a3 + 8);
      if (*(char *)(*a3 + 31) < 0)
        v24 = (_QWORD *)*v24;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v23;
      v77 = 2081;
      v78 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,from,%{private}s,to,%{private}s,from and to leaf are the same", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v25 = (_QWORD *)(*a2 + 8);
    if (*(char *)(*a2 + 31) < 0)
      v25 = (_QWORD *)*v25;
    v26 = (_QWORD *)(*a3 + 8);
    if (*(char *)(*a3 + 31) < 0)
      v26 = (_QWORD *)*v26;
    v68 = 136380931;
    v69 = v25;
    v70 = 2081;
    v71 = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,addRelation,from,%{private}s,to,%{private}s,from and to leaf are the same", &v68, 22);
    v28 = (char *)v27;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v27);
LABEL_58:
    if (v28 != buf)
      free(v28);
    return 0;
  }
  v11 = *(std::__shared_weak_count **)(v10 + 64);
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    v13 = v12;
    v67 = v12;
    if (v12)
    {
      v66 = *(_QWORD *)(v10 + 56);
      if (v12->__shared_owners_ != -1 && *(_QWORD *)(v10 + 56) == *a1)
      {
        v14 = *a3;
        v64 = 0;
        v65 = 0;
        v15 = *(std::__shared_weak_count **)(*a3 + 64);
        if (v15)
        {
          v16 = std::__shared_weak_count::lock(v15);
          v17 = v16;
          v65 = v16;
          if (v16)
          {
            v64 = *(_QWORD *)(v14 + 56);
            if (v16->__shared_owners_ != -1 && *(_QWORD *)(v14 + 56) == a1[2])
            {
              v38 = (uint64_t)(a1 + 4);
              if (sub_100E87FC4(a1 + 4, a2))
              {
                if (qword_1022A02A0 != -1)
                  dispatch_once(&qword_1022A02A0, &stru_10218E198);
                v39 = qword_1022A02A8;
                if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                {
                  v40 = (_QWORD *)(*a2 + 8);
                  if (*(char *)(*a2 + 31) < 0)
                    v40 = (_QWORD *)*v40;
                  *(_DWORD *)buf = 136380675;
                  *(_QWORD *)&buf[4] = v40;
                  _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,from,%{private}s,from leaf already related", buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A02A0 != -1)
                    dispatch_once(&qword_1022A02A0, &stru_10218E198);
                  v54 = (_QWORD *)(*a2 + 8);
                  if (*(char *)(*a2 + 31) < 0)
                    v54 = (_QWORD *)*v54;
                  v68 = 136380675;
                  v69 = v54;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,addRelation,from,%{private}s,from leaf already related", &v68, 12, v64, v65, v66);
                  v56 = (char *)v55;
                  sub_100512490("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v55);
                  if (v56 != buf)
                    free(v56);
                }
                v20 = 0;
              }
              else
              {
                if (qword_1022A02A0 != -1)
                  dispatch_once(&qword_1022A02A0, &stru_10218E198);
                v41 = qword_1022A02A8;
                if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
                {
                  v42 = (_QWORD *)(*a2 + 8);
                  if (*(char *)(*a2 + 31) < 0)
                    v42 = (_QWORD *)*v42;
                  v43 = (_QWORD *)(*a1 + 8);
                  if (*(char *)(*a1 + 31) < 0)
                    v43 = (_QWORD *)*v43;
                  v44 = (_QWORD *)(*a3 + 8);
                  if (*(char *)(*a3 + 31) < 0)
                    v44 = (_QWORD *)*v44;
                  v45 = a1[2];
                  v46 = (_QWORD *)(v45 + 8);
                  if (*(char *)(v45 + 31) < 0)
                    v46 = (_QWORD *)*v46;
                  *(_DWORD *)buf = 136381443;
                  *(_QWORD *)&buf[4] = v42;
                  v77 = 2081;
                  v78 = v43;
                  v79 = 2081;
                  v80 = v44;
                  v81 = 2081;
                  v82 = v46;
                  _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,addRelation,fromLeaf,%{private}s,fromRoot,%{private}s,toLeaf,%{private}s,toRoot,%{private}s,related added", buf, 0x2Au);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A02A0 != -1)
                    dispatch_once(&qword_1022A02A0, &stru_10218E198);
                  v57 = (_QWORD *)(*a2 + 8);
                  if (*(char *)(*a2 + 31) < 0)
                    v57 = (_QWORD *)*v57;
                  v58 = (_QWORD *)(*a1 + 8);
                  if (*(char *)(*a1 + 31) < 0)
                    v58 = (_QWORD *)*v58;
                  v59 = (_QWORD *)(*a3 + 8);
                  if (*(char *)(*a3 + 31) < 0)
                    v59 = (_QWORD *)*v59;
                  v60 = a1[2];
                  v61 = (_QWORD *)(v60 + 8);
                  if (*(char *)(v60 + 31) < 0)
                    v61 = (_QWORD *)*v61;
                  v68 = 136381443;
                  v69 = v57;
                  v70 = 2081;
                  v71 = v58;
                  v72 = 2081;
                  v73 = v59;
                  v74 = 2081;
                  v75 = v61;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#SettingsMap,DictMap,addRelation,fromLeaf,%{private}s,fromRoot,%{private}s,toLeaf,%{private}s,toRoot,%{private}s,related added", &v68, 42, v64, v65, v66);
                  v63 = (char *)v62;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v62);
                  if (v63 != buf)
                    free(v63);
                }
                *(_QWORD *)buf = a2;
                v47 = sub_100E880B0(v38, a2, (uint64_t)&unk_101B9EB60, (_QWORD **)buf);
                sub_100349198(v47 + 4, a3);
                v20 = 1;
              }
              goto LABEL_70;
            }
            v18 = 0;
LABEL_62:
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_10218E198);
            v34 = qword_1022A02A8;
            if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
            {
              v35 = (_QWORD *)(*a3 + 8);
              if (*(char *)(*a3 + 31) < 0)
                v35 = (_QWORD *)*v35;
              *(_DWORD *)buf = 136380675;
              *(_QWORD *)&buf[4] = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,to,%{private}s,to leaf's root is either empty or doesn't match", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02A0 != -1)
                dispatch_once(&qword_1022A02A0, &stru_10218E198);
              v51 = (_QWORD *)(*a3 + 8);
              if (*(char *)(*a3 + 31) < 0)
                v51 = (_QWORD *)*v51;
              v68 = 136380675;
              v69 = v51;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,addRelation,to,%{private}s,to leaf's root is either empty or doesn't match", &v68, 12, v64, v65, v66);
              v53 = (char *)v52;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v52);
              if (v53 != buf)
                free(v53);
            }
            v20 = 0;
            if ((v18 & 1) != 0)
            {
LABEL_74:
              v13 = v67;
              if (!v67)
                return v20;
              goto LABEL_51;
            }
LABEL_70:
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            goto LABEL_74;
          }
        }
        else
        {
          v17 = 0;
        }
        v18 = 1;
        goto LABEL_62;
      }
    }
  }
  else
  {
    v13 = 0;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218E198);
  v29 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v30 = (_QWORD *)(*a2 + 8);
    if (*(char *)(*a2 + 31) < 0)
      v30 = (_QWORD *)*v30;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,from,%{private}s,from leaf's root is either empty or doesn't match", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v48 = (_QWORD *)(*a2 + 8);
    if (*(char *)(*a2 + 31) < 0)
      v48 = (_QWORD *)*v48;
    v68 = 136380675;
    v69 = v48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,addRelation,from,%{private}s,from leaf's root is either empty or doesn't match", &v68, 12);
    v50 = (char *)v49;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  v20 = 0;
  if (v13)
  {
LABEL_51:
    v31 = (unint64_t *)&v13->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v20;
}

void sub_100E85E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100E85E9C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _WORD v19[8];
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint8_t buf[1640];

  if (!a2 || !a3)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapDict,source and/or dest dict is nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v19[0] = 0;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,mapDict,source and/or dest dict is nil", v19, 2);
    sub_100512490("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapDict(NSDictionary *, NSMutableDictionary *)", "%s\n", v13);
LABEL_34:
    if (v13 != (char *)buf)
      free(v13);
    return;
  }
  v5 = a1[1];
  if (!v5 || *(_QWORD *)(v5 + 8) == -1 || (v6 = a1[3]) == 0 || *(_QWORD *)(v6 + 8) == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v14 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapDict,from and/or to root is empty", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v19[0] = 0;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,mapDict,from and/or to root is empty", v19, 2);
    sub_100512490("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapDict(NSDictionary *, NSMutableDictionary *)", "%s\n", v13);
    goto LABEL_34;
  }
  v8 = *a1;
  v9 = operator new(0x20uLL);
  *v9 = off_10218E488;
  v9[1] = a1;
  v9[2] = a2;
  v9[3] = a3;
  v23 = v9;
  sub_100E82C90(v8, (uint64_t)v22);
  v10 = v23;
  if (v23 == v22)
  {
    v11 = 4;
    v10 = v22;
    goto LABEL_25;
  }
  if (v23)
  {
    v11 = 5;
LABEL_25:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v15 = *a1;
  v16 = operator new(0x20uLL);
  *v16 = off_10218E518;
  v16[1] = a1;
  v16[2] = a2;
  v16[3] = a3;
  v21 = v16;
  sub_100E82B68(v15, (uint64_t)v20);
  v17 = v21;
  if (v21 == v20)
  {
    v18 = 4;
    v17 = v20;
    goto LABEL_30;
  }
  if (v21)
  {
    v18 = 5;
LABEL_30:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
}

void sub_100E86244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a16;
  if (a16 == v20)
  {
    v23 = 4;
    v22 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100E862A0(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  const char *v24;
  _WORD v25[8];
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint8_t buf[1640];

  if (!a3 || !a4)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v16 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapBranch,source and/or dest dict is nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v25[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,mapBranch,source and/or dest dict is nil", v25, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapBranch(std::shared_ptr<BranchNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v17);
LABEL_37:
    if (v18 != buf)
      free(v18);
    return;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6
    || *(_QWORD *)(v6 + 8) == -1
    || (v7 = *(_QWORD *)(a1 + 24)) == 0
    || *(_QWORD *)(v7 + 8) == -1
    || (v9 = a2[1]) == 0
    || *(_QWORD *)(v9 + 8) == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v19 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapBranch,from root, to root, and/or branch is empty", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v25[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,mapBranch,from root, to root, and/or branch is empty", v25, 2);
    v18 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapBranch(std::shared_ptr<BranchNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v24);
    goto LABEL_37;
  }
  v10 = sub_100E84388(*a2, a3);
  if (!v10)
    return;
  v11 = v10;
  v12 = *a2;
  v13 = operator new(0x20uLL);
  *v13 = off_10218E5A8;
  v13[1] = a1;
  v13[2] = v11;
  v13[3] = a4;
  v29 = v13;
  sub_100E84260(v12, (uint64_t)v28);
  v14 = v29;
  if (v29 == v28)
  {
    v15 = 4;
    v14 = v28;
    goto LABEL_28;
  }
  if (v29)
  {
    v15 = 5;
LABEL_28:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v20 = *a2;
  v21 = operator new(0x20uLL);
  *v21 = off_10218E628;
  v21[1] = a1;
  v21[2] = v11;
  v21[3] = a4;
  v27 = v21;
  sub_100E84138(v20, (uint64_t)v26);
  v22 = v27;
  if (v27 == v26)
  {
    v23 = 4;
    v22 = v26;
    goto LABEL_33;
  }
  if (v27)
  {
    v23 = 5;
LABEL_33:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
}

void sub_100E86678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a16;
  if (a16 == v20)
  {
    v23 = 4;
    v22 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100E866D4(_QWORD *a1, _QWORD *a2, void *a3, void *a4)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t i;
  unint64_t v18;
  uint64_t v19;
  NSString *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  const char *v29;
  NSObject *v30;
  _QWORD *v31;
  _QWORD *v32;
  const char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  const char *v39;
  uint64_t v40;
  _QWORD *v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  const char *v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  const char *v52;
  char *v53;
  NSObject *v54;
  NSObject *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  const char *v60;
  NSObject *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  const char *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  const char *v70;
  NSObject *v71;
  uint64_t v72;
  _QWORD *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  const char *v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  _BYTE v82[12];
  __int16 v83;
  _QWORD *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  _QWORD *v88;
  int v89;
  _BYTE v90[18];
  __int16 v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE buf[12];
  __int16 v96;
  _QWORD *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  _QWORD *v101;

  if (a3 && (v4 = a4) != 0)
  {
    v6 = a1[1];
    if (!v6
      || *(_QWORD *)(v6 + 8) == -1
      || (v7 = a1[3]) == 0
      || *(_QWORD *)(v7 + 8) == -1
      || (v9 = a2[1]) == 0
      || *(_QWORD *)(v9 + 8) == -1)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      v54 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapLeaf,from root, to root, and/or leaf is empty", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_10218E198);
        LOWORD(v89) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,mapLeaf,from root, to root, and/or leaf is empty", &v89, 2);
        v53 = (char *)v74;
        sub_100512490("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v74);
        goto LABEL_131;
      }
    }
    else
    {
      v11 = (_QWORD *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0)
        v11 = (_QWORD *)*v11;
      v12 = objc_msgSend(a3, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
      if (v12)
      {
        v13 = v12;
        if ((sub_100E84D14(*a2, (uint64_t)v12) & 1) != 0)
        {
          v14 = (uint64_t)(a1 + 4);
          if (sub_100E87FC4(a1 + 4, a2))
          {
            *(_QWORD *)buf = a2;
            v15 = sub_100E880B0((uint64_t)(a1 + 4), a2, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[5];
            if (v15)
            {
              if (*(_QWORD *)(v15 + 8) != -1)
              {
                *(_QWORD *)buf = a2;
                v16 = sub_100E880B0((uint64_t)(a1 + 4), a2, (uint64_t)&unk_101B9EB60, (_QWORD **)buf);
                sub_100E846B8(v16[4], (uint64_t)&v89);
                if (v94)
                {
                  for (i = 0; i < v94; ++i)
                  {
                    v18 = *(_QWORD *)(*(_QWORD *)&v90[4] + 8 * ((i + v93) / 0xAA)) + 24 * ((i + v93) % 0xAA);
                    if (*(char *)(v18 + 23) < 0)
                      v18 = *(_QWORD *)v18;
                    v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18);
                    if (i == v94 - 1)
                    {
                      v21 = objc_opt_class(NSArray, v19);
                      if ((objc_opt_isKindOfClass(v13, v21) & 1) != 0)
                        objc_msgSend(v4, "setObject:forKey:", (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v13, 2uLL), v20);
                      else
                        objc_msgSend(v4, "setObject:forKey:", objc_msgSend(v13, "copy"), v20);
                      if (qword_1022A02A0 != -1)
                        dispatch_once(&qword_1022A02A0, &stru_10218E198);
                      v30 = qword_1022A02A8;
                      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
                      {
                        v31 = (_QWORD *)(*a2 + 8);
                        if (*(char *)(*a2 + 31) < 0)
                          v31 = (_QWORD *)*v31;
                        v32 = (_QWORD *)(*a1 + 8);
                        if (*(char *)(*a1 + 31) < 0)
                          v32 = (_QWORD *)*v32;
                        v33 = -[NSString UTF8String](v20, "UTF8String");
                        v34 = a1[2];
                        v35 = (_QWORD *)(v34 + 8);
                        if (*(char *)(v34 + 31) < 0)
                          v35 = (_QWORD *)*v35;
                        *(_DWORD *)buf = 136381443;
                        *(_QWORD *)&buf[4] = v31;
                        v96 = 2081;
                        v97 = v32;
                        v98 = 2081;
                        v99 = v33;
                        v100 = 2081;
                        v101 = v35;
                        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,mapLeaf,fromLeaf,%{private}s,fromRoot,%{private}s,toLeaf,%{private}s,toRoot,%{private}s,added leaf to dest", buf, 0x2Au);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A02A0 != -1)
                          dispatch_once(&qword_1022A02A0, &stru_10218E198);
                        v36 = qword_1022A02A8;
                        v37 = (_QWORD *)(*a2 + 8);
                        if (*(char *)(*a2 + 31) < 0)
                          v37 = (_QWORD *)*v37;
                        v38 = (_QWORD *)(*a1 + 8);
                        if (*(char *)(*a1 + 31) < 0)
                          v38 = (_QWORD *)*v38;
                        v39 = -[NSString UTF8String](v20, "UTF8String");
                        v40 = a1[2];
                        v41 = (_QWORD *)(v40 + 8);
                        if (*(char *)(v40 + 31) < 0)
                          v41 = (_QWORD *)*v41;
                        *(_DWORD *)v82 = 136381443;
                        *(_QWORD *)&v82[4] = v37;
                        v83 = 2081;
                        v84 = v38;
                        v85 = 2081;
                        v86 = v39;
                        v87 = 2081;
                        v88 = v41;
                        LODWORD(v80) = 42;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "#SettingsMap,DictMap,mapLeaf,fromLeaf,%{private}s,fromRoot,%{private}s,toLeaf,%{private}s,toRoot,%{private}s,added leaf to dest", v82, v80);
                        v43 = (char *)v42;
                        sub_100512490("Generic", 1, 0, 2, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v42);
                        if (v43 != buf)
                          free(v43);
                        v23 = v4;
                      }
                      else
                      {
                        v23 = v4;
                      }
                    }
                    else
                    {
                      v23 = objc_msgSend(v4, "objectForKey:", v20);
                      if (!v23
                        || (v24 = objc_opt_class(NSMutableDictionary, v22),
                            (objc_opt_isKindOfClass(v23, v24) & 1) == 0))
                      {
                        if (qword_1022A02A0 != -1)
                          dispatch_once(&qword_1022A02A0, &stru_10218E198);
                        v25 = qword_1022A02A8;
                        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
                        {
                          v26 = (_QWORD *)(*a2 + 8);
                          if (*(char *)(*a2 + 31) < 0)
                            v26 = (_QWORD *)*v26;
                          v27 = a1[2];
                          v28 = (_QWORD *)(v27 + 8);
                          if (*(char *)(v27 + 31) < 0)
                            v28 = (_QWORD *)*v28;
                          v29 = -[NSString UTF8String](v20, "UTF8String");
                          *(_DWORD *)buf = 136381187;
                          *(_QWORD *)&buf[4] = v26;
                          v96 = 2081;
                          v97 = v28;
                          v98 = 2081;
                          v99 = v29;
                          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,toRoot,%{private}s,creating branch in dest,%{private}s", buf, 0x20u);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A02A0 != -1)
                            dispatch_once(&qword_1022A02A0, &stru_10218E198);
                          v44 = qword_1022A02A8;
                          v45 = (_QWORD *)(*a2 + 8);
                          if (*(char *)(*a2 + 31) < 0)
                            v45 = (_QWORD *)*v45;
                          v46 = a1[2];
                          v47 = (_QWORD *)(v46 + 8);
                          if (*(char *)(v46 + 31) < 0)
                            v47 = (_QWORD *)*v47;
                          v48 = -[NSString UTF8String](v20, "UTF8String");
                          *(_DWORD *)v82 = 136381187;
                          *(_QWORD *)&v82[4] = v45;
                          v83 = 2081;
                          v84 = v47;
                          v85 = 2081;
                          v86 = v48;
                          LODWORD(v80) = 32;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 2, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,toRoot,%{private}s,creating branch in dest,%{private}s", v82, v80);
                          v50 = (char *)v49;
                          sub_100512490("Generic", 1, 0, 2, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v49);
                          if (v50 != buf)
                            free(v50);
                        }
                        v23 = objc_alloc_init((Class)NSMutableDictionary);
                        objc_msgSend(v4, "setObject:forKey:", v23, v20);
                      }
                    }
                    v4 = v23;
                  }
                }
                else
                {
                  if (qword_1022A02A0 != -1)
                    dispatch_once(&qword_1022A02A0, &stru_10218E198);
                  v71 = qword_1022A02A8;
                  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                  {
                    *(_QWORD *)v82 = a2;
                    v72 = sub_100E880B0(v14, a2, (uint64_t)&unk_101B9EB60, (_QWORD **)v82)[4];
                    v73 = (_QWORD *)(v72 + 8);
                    if (*(char *)(v72 + 31) < 0)
                      v73 = (_QWORD *)*v73;
                    *(_DWORD *)buf = 136380675;
                    *(_QWORD *)&buf[4] = v73;
                    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapLeaf,toLeaf,%{private}s,failed to retrieve mapped to location", buf, 0xCu);
                  }
                  if (sub_1001BFF7C(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A02A0 != -1)
                      dispatch_once(&qword_1022A02A0, &stru_10218E198);
                    v75 = qword_1022A02A8;
                    v81 = a2;
                    v76 = sub_100E880B0(v14, a2, (uint64_t)&unk_101B9EB60, &v81)[4];
                    v77 = (_QWORD *)(v76 + 8);
                    if (*(char *)(v76 + 31) < 0)
                      v77 = (_QWORD *)*v77;
                    *(_DWORD *)v82 = 136380675;
                    *(_QWORD *)&v82[4] = v77;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v75, 16, "#SettingsMap,DictMap,mapLeaf,toLeaf,%{private}s,failed to retrieve mapped to location", v82, 12);
                    v79 = (char *)v78;
                    sub_100512490("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v78);
                    if (v79 != buf)
                      free(v79);
                  }
                }
                sub_100C95458(&v89);
                return;
              }
            }
          }
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_10218E198);
          v61 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
          {
            v62 = (_QWORD *)(*a2 + 8);
            if (*(char *)(*a2 + 31) < 0)
              v62 = (_QWORD *)*v62;
            v63 = (_QWORD *)(*a1 + 8);
            if (*(char *)(*a1 + 31) < 0)
              v63 = (_QWORD *)*v63;
            v64 = a1[2];
            v65 = (const char *)(v64 + 8);
            if (*(char *)(v64 + 31) < 0)
              v65 = *(const char **)v65;
            *(_DWORD *)buf = 136381187;
            *(_QWORD *)&buf[4] = v62;
            v96 = 2081;
            v97 = v63;
            v98 = 2081;
            v99 = v65;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,fromRoot,%{private}s,toRoot,%{private}s,leaf not mapped", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_10218E198);
            v66 = (_QWORD *)(*a2 + 8);
            if (*(char *)(*a2 + 31) < 0)
              v66 = (_QWORD *)*v66;
            v67 = (_QWORD *)(*a1 + 8);
            if (*(char *)(*a1 + 31) < 0)
              v67 = (_QWORD *)*v67;
            v68 = a1[2];
            v69 = (_QWORD *)(v68 + 8);
            if (*(char *)(v68 + 31) < 0)
              v69 = (_QWORD *)*v69;
            v89 = 136381187;
            *(_QWORD *)v90 = v66;
            *(_WORD *)&v90[8] = 2081;
            *(_QWORD *)&v90[10] = v67;
            v91 = 2081;
            v92 = v69;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,fromRoot,%{private}s,toRoot,%{private}s,leaf not mapped", &v89, 32);
            v53 = (char *)v70;
            sub_100512490("Generic", 1, 0, 2, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v70);
LABEL_131:
            if (v53 != buf)
              free(v53);
          }
        }
        else
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_10218E198);
          v55 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
          {
            v56 = (_QWORD *)(*a2 + 8);
            if (*(char *)(*a2 + 31) < 0)
              v56 = (_QWORD *)*v56;
            v57 = (_QWORD *)(*a1 + 8);
            if (*(char *)(*a1 + 31) < 0)
              v57 = (_QWORD *)*v57;
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = v56;
            v96 = 2081;
            v97 = v57;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,root,%{private}s,leaf data type is incorrect", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_10218E198);
            v58 = (_QWORD *)(*a2 + 8);
            if (*(char *)(*a2 + 31) < 0)
              v58 = (_QWORD *)*v58;
            v59 = (_QWORD *)(*a1 + 8);
            if (*(char *)(*a1 + 31) < 0)
              v59 = (_QWORD *)*v59;
            v89 = 136380931;
            *(_QWORD *)v90 = v58;
            *(_WORD *)&v90[8] = 2081;
            *(_QWORD *)&v90[10] = v59;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,root,%{private}s,leaf data type is incorrect", &v89, 22);
            v53 = (char *)v60;
            sub_100512490("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v60);
            goto LABEL_131;
          }
        }
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218E198);
    v51 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapLeaf,source and/or dest dict is nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218E198);
      LOWORD(v89) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#SettingsMap,DictMap,mapLeaf,source and/or dest dict is nil", &v89, 2);
      v53 = (char *)v52;
      sub_100512490("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v52);
      goto LABEL_131;
    }
  }
}

void sub_100E87554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100C95458((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100E875A0(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

_QWORD *sub_100E875CC(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_10218E248;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  a1[4] = 0;
  a1[5] = 0;
  *a1 = off_10218E1C8;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void sub_100E87640(uint64_t a1)
{
  sub_100E87664(a1);
  operator delete();
}

uint64_t sub_100E87664(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_10218E1C8;
  sub_1008AF89C((_QWORD **)(a1 + 56));
  sub_1008AF89C((_QWORD **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)a1 = off_10218E248;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_100E876CC(_QWORD *a1, __int128 *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  *a1 = off_10218E248;
  v7 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    v7[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  a1[4] = 0;
  a1[5] = 0;
  *a1 = off_10218E270;
  v9 = a3[1];
  a1[6] = *a3;
  a1[7] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a4[1];
  a1[8] = *a4;
  a1[9] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 16);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  a1[10] = 0;
  a1[11] = 0;
  return a1;
}

void sub_100E87790(uint64_t a1)
{
  sub_100E877B4(a1);
  operator delete();
}

uint64_t sub_100E877B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)a1 = off_10218E270;
  sub_1008AF89C((_QWORD **)(a1 + 88));
  sub_1008AF89C((_QWORD **)(a1 + 80));
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  *(_QWORD *)a1 = off_10218E248;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100E87834(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)a1 = off_10218E248;
  v9 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)v9, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v9 = v10;
  }
  *(_QWORD *)a1 = off_10218E2E0;
  *(_DWORD *)(a1 + 32) = a3;
  v11 = a4[1];
  *(_QWORD *)(a1 + 40) = *a4;
  *(_QWORD *)(a1 + 48) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a5[1];
  *(_QWORD *)(a1 + 56) = *a5;
  *(_QWORD *)(a1 + 64) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return a1;
}

void sub_100E878F8(uint64_t a1)
{
  sub_100E8791C(a1);
  operator delete();
}

uint64_t sub_100E8791C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)a1 = off_10218E2E0;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *(_QWORD *)a1 = off_10218E248;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100E87984(uint64_t a1)
{
  void *v2;

  sub_100E879BC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100E879BC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100261F44((uint64_t)(v2 + 4));
      sub_100261F44((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100E87A0C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E87A7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E87A9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100E87AB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100E87AF4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E87B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E87B84(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100E87B9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100E87BDC(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E87C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E87C54(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100E87C6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100E87CAC(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 170 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0xAA)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 85;
      else
        v40 = (uint64_t)a1[4] + 170;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 85;
      else
        v35 = (uint64_t)a1[4] + 170;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_100E87F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E87FC4(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_100E880B0(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x30uLL);
  i = v16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v16[4] = 0;
  v16[5] = 0;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    sub_10012E444(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *i = *v28;
LABEL_41:
    *v28 = i;
    goto LABEL_42;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v27 + 8 * v4) = v15;
  if (*i)
  {
    v29 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_100E88338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_100E88354(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100E88354(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100261F44((uint64_t)__p + 32);
    sub_100261F44((uint64_t)__p + 16);
  }
  if (__p)
    operator delete(__p);
}

void sub_100E883A4()
{
  operator delete();
}

__n128 sub_100E883B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10218E488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100E883F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218E488;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E88420(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD **)(a1 + 8);
  v12 = v2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_100E866D4(v4, &v12, *(void **)(a1 + 16), *(void **)(a1 + 24));
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E884E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    sub_1019304B4(a10);
  sub_10193047C(v10 == 0, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100E8850C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E88548()
{
}

void sub_100E88558()
{
  operator delete();
}

__n128 sub_100E8856C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10218E518;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100E885AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218E518;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E885D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10[2];

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v10[0] = v2;
  v10[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_100E862A0(v4, v10, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E88698(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_1019304E4(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E886B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E886EC()
{
}

void sub_100E886FC()
{
  operator delete();
}

__n128 sub_100E88710(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10218E5A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100E88750(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218E5A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E88778(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD **)(a1 + 8);
  v12 = v2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_100E866D4(v4, &v12, *(void **)(a1 + 16), *(void **)(a1 + 24));
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E8883C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    sub_1019304B4(a10);
  sub_10193047C(v10 == 0, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100E88864(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E888A0()
{
}

void sub_100E888B0()
{
  operator delete();
}

__n128 sub_100E888C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10218E628;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100E88904(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218E628;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E8892C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10[2];

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v10[0] = v2;
  v10[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_100E862A0(v4, v10, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E889F0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_1019304E4(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E88A08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E88A44()
{
}

void sub_100E88A50()
{
  unint64_t *v0;
  unint64_t v1;

  v1 = __ldaxr(v0);
  __stlxr(v1 - 1, v0);
}

void sub_100E88A60(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

uint64_t sub_100E88A84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10218E6C0;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  objc_msgSend(*(id *)(a1 + 64), "setValid:", 0);

  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_10002FA68(a1);
}

void sub_100E88B00(uint64_t a1)
{
  sub_100E88A84(a1);
  operator delete();
}

_QWORD *sub_100E88B24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t (**v45)();
  _QWORD v46[2];
  uint64_t (***v47)();
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;

  v48[0] = off_10218E7F0;
  v48[1] = sub_1000172EC;
  v48[2] = 0;
  v49 = v48;
  sub_1015A2E04(v50, "kCLConnectionMessageStepCountUpdate");
  sub_100BB62E0((uint64_t)&v51, (uint64_t)v48);
  v45 = off_10218E7F0;
  v46[0] = sub_100E89360;
  v46[1] = 0;
  v47 = &v45;
  sub_1015A2E04(v52, "kCLConnectionMessagePedometerEvent");
  sub_100BB62E0((uint64_t)&v53, (uint64_t)&v45);
  v43[0] = off_10218E7F0;
  v43[1] = sub_100E89678;
  v43[2] = 0;
  v44 = v43;
  sub_1015A2E04(v54, "kCLConnectionMessageOdometerSuitabilityUpdate");
  sub_100BB62E0((uint64_t)&v55, (uint64_t)v43);
  v41[0] = off_10218E8A0;
  v41[1] = sub_100E89AB4;
  v41[2] = 0;
  v42 = v41;
  sub_1015A2E04(v56, "kCLConnectionMessageStartStepCountAvailable");
  sub_100BB62E0((uint64_t)&v57, (uint64_t)v41);
  v39[0] = off_10218E8A0;
  v39[1] = sub_100044E20;
  v39[2] = 0;
  v40 = v39;
  sub_1015A2E04(v58, "kCLConnectionMessageStepCountQuery");
  sub_100BB62E0((uint64_t)&v59, (uint64_t)v39);
  v37[0] = off_10218E8A0;
  v37[1] = sub_100E89B98;
  v37[2] = 0;
  v38 = v37;
  sub_1015A2E04(v60, "kCLConnectionMessageStepCountRecordQuery");
  sub_100BB62E0((uint64_t)&v61, (uint64_t)v37);
  v35[0] = off_10218E8A0;
  v35[1] = sub_100E8A5AC;
  v35[2] = 0;
  v36 = v35;
  sub_1015A2E04(v62, "kCLConnectionMessageStepCountReset");
  sub_100BB62E0((uint64_t)&v63, (uint64_t)v35);
  v33[0] = off_10218E8A0;
  v33[1] = sub_100E8A9D8;
  v33[2] = 0;
  v34 = v33;
  sub_1015A2E04(v64, "kCLConnectionMessageFloorCountAvailable");
  sub_100BB62E0((uint64_t)&v65, (uint64_t)v33);
  v31[0] = off_10218E8A0;
  v31[1] = sub_100E8AAC0;
  v31[2] = 0;
  v32 = v31;
  sub_1015A2E04(v66, "kCLConnectionMessagePaceAndCadenceAPIAvailable");
  sub_100BB62E0((uint64_t)&v67, (uint64_t)v31);
  v29[0] = off_10218E8A0;
  v29[1] = sub_100E8ABA8;
  v29[2] = 0;
  v30 = v29;
  sub_1015A2E04(v68, "kCLConnectionMessageStrideCalibrationDump");
  sub_100BB62E0((uint64_t)&v69, (uint64_t)v29);
  v27[0] = off_10218E8A0;
  v27[1] = sub_100E8B278;
  v27[2] = 0;
  v28 = v27;
  sub_1015A2E04(v70, "kCLConnectionMessagePedometerCalibrationQuery");
  sub_100BB62E0((uint64_t)&v71, (uint64_t)v27);
  sub_100E8C6E8(a1, (unsigned __int8 *)v50, 11);
  v2 = 77;
  do
  {
    v3 = (_QWORD *)v50[v2 - 1];
    if (&v48[v2] == v3)
    {
      v3 = &v48[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v47)[v2]) < 0)
      operator delete((void *)v46[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v28;
  if (v28 == v27)
  {
    v6 = 4;
    v5 = v27;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v28)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v30;
  if (v30 == v29)
  {
    v8 = 4;
    v7 = v29;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v30)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v32;
  if (v32 == v31)
  {
    v10 = 4;
    v9 = v31;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v32)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v34;
  if (v34 == v33)
  {
    v12 = 4;
    v11 = v33;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v34)
  {
    v12 = 5;
    goto LABEL_29;
  }
  v13 = v36;
  if (v36 == v35)
  {
    v14 = 4;
    v13 = v35;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  else if (v36)
  {
    v14 = 5;
    goto LABEL_34;
  }
  v15 = v38;
  if (v38 == v37)
  {
    v16 = 4;
    v15 = v37;
LABEL_39:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  else if (v38)
  {
    v16 = 5;
    goto LABEL_39;
  }
  v17 = v40;
  if (v40 == v39)
  {
    v18 = 4;
    v17 = v39;
LABEL_44:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  else if (v40)
  {
    v18 = 5;
    goto LABEL_44;
  }
  v19 = v42;
  if (v42 == v41)
  {
    v20 = 4;
    v19 = v41;
LABEL_49:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  else if (v42)
  {
    v20 = 5;
    goto LABEL_49;
  }
  v21 = v44;
  if (v44 == v43)
  {
    v22 = 4;
    v21 = v43;
LABEL_54:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v44)
  {
    v22 = 5;
    goto LABEL_54;
  }
  v23 = v47;
  if (v47 == &v45)
  {
    v24 = 4;
    v23 = &v45;
LABEL_59:
    (*v23)[v24]();
  }
  else if (v47)
  {
    v24 = 5;
    goto LABEL_59;
  }
  result = v49;
  if (v49 == v48)
  {
    v26 = 4;
    result = v48;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v26))();
  }
  else if (v49)
  {
    v26 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v26))();
  }
  return result;
}

void sub_100E89074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,char *a36,char a37,uint64_t a38,uint64_t a39,char *a40,char a41,uint64_t a42,uint64_t a43,char *a44,char a45,uint64_t a46,uint64_t a47,char *a48,char a49,uint64_t a50,uint64_t a51,char *a52,char a53)
{
  uint64_t i;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;

  for (i = 560; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a53 + i));
  v55 = a12;
  if (a12 == &a9)
  {
    v56 = 4;
    v55 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_8:
  v57 = a16;
  if (a16 == &a13)
  {
    v58 = 4;
    v57 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
LABEL_13:
  v59 = a20;
  if (a20 == &a17)
  {
    v60 = 4;
    v59 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_18:
  v61 = a24;
  if (a24 == &a21)
  {
    v62 = 4;
    v61 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_23;
    v62 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
LABEL_23:
  v63 = a28;
  if (a28 == &a25)
  {
    v64 = 4;
    v63 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_28;
    v64 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
LABEL_28:
  v65 = a32;
  if (a32 == &a29)
  {
    v66 = 4;
    v65 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_33;
    v66 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v65 + 8 * v66))();
LABEL_33:
  v67 = a36;
  if (a36 == &a33)
  {
    v68 = 4;
    v67 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_38;
    v68 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v67 + 8 * v68))();
LABEL_38:
  v69 = a40;
  if (a40 == &a37)
  {
    v70 = 4;
    v69 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_43;
    v70 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v69 + 8 * v70))();
LABEL_43:
  v71 = a44;
  if (a44 == &a41)
  {
    v72 = 4;
    v71 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_48;
    v72 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
LABEL_48:
  v73 = a48;
  if (a48 == &a45)
  {
    v74 = 4;
    v73 = &a45;
  }
  else
  {
    if (!a48)
      goto LABEL_53;
    v74 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_53:
  v75 = a52;
  if (a52 == &a49)
  {
    v76 = 4;
    v75 = &a49;
  }
  else
  {
    if (!a52)
      goto LABEL_58;
    v76 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v75 + 8 * v76))();
LABEL_58:
  _Unwind_Resume(a1);
}

void sub_100E89314()
{
  JUMPOUT(0x100E891C4);
}

void sub_100E89320()
{
  JUMPOUT(0x100E891F4);
}

void sub_100E8932C()
{
  JUMPOUT(0x100E89224);
}

void sub_100E89338()
{
  JUMPOUT(0x100E89254);
}

void sub_100E89344()
{
  JUMPOUT(0x100E89284);
}

void sub_100E89350()
{
  JUMPOUT(0x100E892B4);
}

void sub_100E89360(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;
  _UNKNOWN **v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  _BYTE buf[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    v24 = 2048;
    v25 = a1;
    v26 = 1024;
    v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PedometerEvent subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v10 = *(_QWORD *)(a1 + 24);
    v17 = 138412802;
    v18 = v10;
    v19 = 2048;
    v20 = a1;
    v21 = 1024;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "PedometerEvent subscription changed, %@, %p, %d", &v17, 28);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestPedometerEvent(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if ((sub_1001BBC08(a1) & 1) != 0)
  {
    sub_100197040();
    if ((sub_1001B7910() & 0x100000000) != 0)
    {
      sub_1001A638C(a1);
      v7 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(v7 + 8);
      v8 = *(void **)(v7 + 16);
      if (a2)
        objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 2, 0);
      else
        objc_msgSend(v8, "unregister:forNotification:", v9, 2);
    }
    else
    {
      v13 = CMErrorMessage;
      v14 = &off_10221C230;
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
      sub_100E8BB9C(a1, buf);
    }
  }
  else
  {
    v15 = CMErrorMessage;
    v16 = &off_10221C218;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
    sub_100E8BB9C(a1, buf);
  }

}

void sub_100E89638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100E89678(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  _UNKNOWN **v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    v28 = 2048;
    v29 = a1;
    v30 = 1024;
    v31 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "OdometerSuitabilityUpdate subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v11 = *(_QWORD *)(a1 + 24);
    v21 = 138412802;
    v22 = v11;
    v23 = 2048;
    v24 = a1;
    v25 = 1024;
    v26 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "OdometerSuitabilityUpdate subscription changed, %@, %p, %d", &v21, 28);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestOdometerSuitabilityUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if ((sub_100236AC4() & 1) != 0)
  {
    if ((sub_1001BBC08(a1) & 1) != 0)
    {
      sub_1001A638C(a1);
      v7 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(v7 + 8);
      v8 = *(void **)(v7 + 16);
      if (a2)
        objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 3, 0);
      else
        objc_msgSend(v8, "unregister:forNotification:", v9, 3);
    }
    else
    {
      v17 = CMErrorMessage;
      v18 = &off_10221C218;
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
      sub_100E8BC3C(a1, buf);
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v10 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Cannot subscribe to step count updates, step counting is not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v21) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Cannot subscribe to step count updates, step counting is not available", &v21, v16);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestOdometerSuitabilityUpdate(BOOL, const CLNameValuePair &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v19 = CMErrorMessage;
    v20 = &off_10221C200;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
    sub_100E8BC3C(a1, buf);
  }

}

void sub_100E89A74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100E89AB4(uint64_t a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  NSNumber *v5;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = CMAvailable;
  v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100236AC4());
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  CLConnectionMessage::sendReply(*a2);

}

void sub_100E89B70(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100E89B98(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSSet *v10;
  void *DictionaryOfClasses;
  void *v12;
  uint64_t v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  id v24;
  id v25;
  double v26;
  double v27;
  double v28;
  NSNumber *v29;
  NSNumber *v30;
  NSNumber *v31;
  unsigned int v32;
  unsigned int v33;
  NSNumber *v34;
  NSNumber *v35;
  id v36;
  char *v37;
  CLConnectionMessage *v38;
  NSObject *v39;
  NSObject *v40;
  CLConnectionMessage *v41;
  NSObject *v42;
  CLConnectionMessage *v43;
  const char *v44;
  void **v45;
  const char *v46;
  void **v47;
  const char *v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  CLConnectionMessage **v52;
  id v53;
  char *v54;
  id v55;
  uint64_t v56;
  NSNumber *v57;
  NSNumber *v58;
  unsigned int v59;
  _QWORD v60[3];
  unsigned int v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  char *v76;
  uint64_t v77;
  id v78[2];
  uint64_t v79;
  id v80;
  uint64_t v81;
  NSNumber *v82;
  _DWORD v83[4];
  uint64_t v84;
  _UNKNOWN **v85;
  uint64_t v86;
  _UNKNOWN **v87;
  uint64_t v88;
  _UNKNOWN **v89;
  void *__p[2];
  char v91;
  uint64_t v92;
  _UNKNOWN **v93;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(__p, "com.apple.locationd.natalimetry");
  v5 = sub_1002255E0(a1);
  v6 = v5;
  if ((v91 & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_3;
LABEL_37:
    v38 = *a2;
    v92 = CMErrorMessage;
    v93 = &off_10221C218;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v93, &v92, 1);
LABEL_45:
    CLConnectionMessage::sendReply(v38);
    goto LABEL_46;
  }
  operator delete(__p[0]);
  if ((v6 & 1) == 0)
    goto LABEL_37;
LABEL_3:
  if ((sub_100236AC4() & 1) == 0)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v39 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "query for step count was received but step counts were not available", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v75) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FCD8, 2, "query for step count was received but step counts were not available", &v75, 2);
      v45 = (void **)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v44);
      if (v45 != __p)
        free(v45);
    }
    v38 = *a2;
    v88 = CMErrorMessage;
    v89 = &off_10221C200;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v89, &v88, 1);
    goto LABEL_45;
  }
  if ((sub_1001BBC08(a1) & 1) == 0)
  {
    v38 = *a2;
    v86 = CMErrorMessage;
    v87 = &off_10221C218;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1);
    goto LABEL_45;
  }
  v8 = objc_opt_class(CMPedometerData, v7);
  v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v8, objc_opt_class(NSString, v9), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v10);
  v12 = DictionaryOfClasses;
  if (DictionaryOfClasses
    && (v13 = CMPedometerDataObject, objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMPedometerDataObject)))
  {
    v14 = objc_msgSend(v12, "objectForKeyedSubscript:", v13);
    v15 = objc_msgSend(objc_msgSend(v14, "numberOfSteps"), "integerValue");
    objc_msgSend(objc_msgSend(v14, "distance"), "doubleValue");
    v17 = v16;
    v18 = objc_msgSend(v14, "recordId");
    v19 = objc_msgSend(objc_msgSend(v14, "sourceId"), "UUIDString");
    sub_100131938(v78, (uint64_t)"CLDaemonClient.StepCountRecordQuery", 0);
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v20 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier"));
    memset(v60, 0, sizeof(v60));
    v61 = v15;
    v62 = 0;
    v63 = v17;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0;
    v68 = v18;
    v69 = 0;
    v70 = v19;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v21 = objc_msgSend(v20, "syncgetQueryPedometerDataSince:withResponseArray:", v60, &v75);
    if ((_DWORD)v21 == 100)
    {
      v53 = v4;
      v22 = objc_alloc_init((Class)NSMutableArray);
      v52 = a2;
      v54 = v76;
      v55 = v22;
      if (v75 != v76)
      {
        v23 = (char *)v75 + 88;
        do
        {
          if (*((_QWORD *)v23 + 2))
            v24 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *((_QWORD *)v23 + 2));
          else
            v24 = 0;
          v25 = objc_alloc((Class)CMPedometerData);
          v26 = *((double *)v23 - 10);
          v59 = *((_DWORD *)v23 - 16);
          v27 = *((double *)v23 - 7);
          if (*(_BYTE *)(a1 + 56))
          {
            v58 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v23 - 6));
            if (*(_BYTE *)(a1 + 56))
            {
              v57 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v23 - 5));
              goto LABEL_18;
            }
          }
          else
          {
            v58 = 0;
          }
          v57 = 0;
LABEL_18:
          v28 = 0.0;
          v56 = *((int *)v23 + 2);
          if (!*(_BYTE *)(a1 + 57))
          {
            v30 = 0;
            v29 = 0;
            goto LABEL_26;
          }
          if (*((double *)v23 - 2) == 0.0)
          {
            v29 = 0;
          }
          else
          {
            v29 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            if (!*(_BYTE *)(a1 + 57))
            {
              v30 = 0;
LABEL_26:
              v31 = 0;
              goto LABEL_29;
            }
          }
          if (*((double *)v23 - 1) == 0.0)
          {
            v30 = 0;
          }
          else
          {
            v30 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            if (!*(_BYTE *)(a1 + 57))
              goto LABEL_26;
          }
          v28 = *((double *)v23 - 9);
          v31 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)v23);
LABEL_29:
          v33 = *((_DWORD *)v23 + 14);
          v32 = *((_DWORD *)v23 + 15);
          if (!*(_BYTE *)(a1 + 58))
          {
            v34 = 0;
LABEL_33:
            v35 = 0;
            goto LABEL_34;
          }
          v34 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v23 + 17));
          if (!*(_BYTE *)(a1 + 58))
            goto LABEL_33;
          v35 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v23 + 18));
LABEL_34:
          LODWORD(v51) = v23[78];
          v36 = objc_msgSend(v25, "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:", v59, v58, v57, v56, v29, v30, v26, v26, v27, v28, v31, v24, 0, 0, __PAIR64__(v32, v33),
                  v34,
                  v35,
                  v51);
          objc_msgSend(v55, "addObject:", v36);

          v37 = v23 + 88;
          v23 += 176;
        }
        while (v37 != v54);
      }
      v79 = CMPedometerDataArray;
      v80 = v55;
      v4 = v53;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v80, &v79, 1);

      CLConnectionMessage::sendReply(*v52);
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      v42 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = (_DWORD)v21;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Error querying pedometer data, %{public}d", (uint8_t *)__p, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
        v83[0] = 67240192;
        v83[1] = (_DWORD)v21;
        LODWORD(v50) = 8;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Error querying pedometer data, %{public}d", v83, v50);
        v49 = (void **)v48;
        sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v48);
        if (v49 != __p)
          free(v49);
      }
      v43 = *a2;
      v81 = CMErrorMessage;
      v82 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v21);
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v82, &v81, 1);
      CLConnectionMessage::sendReply(v43);
    }
    if (v75)
    {
      v76 = (char *)v75;
      operator delete(v75);
    }
    sub_100131740(v78);
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v40 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed!", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v75) = 0;
      LODWORD(v50) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Programmer error: Wrong parameters were passed!", &v75, v50);
      v47 = (void **)v46;
      sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v46);
      if (v47 != __p)
        free(v47);
    }
    v41 = *a2;
    v84 = CMErrorMessage;
    v85 = &off_10221C260;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v85, &v84, 1);
    CLConnectionMessage::sendReply(v41);
  }
LABEL_46:

}

void sub_100E8A50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,id a51)
{
  if (__p)
    operator delete(__p);
  sub_100131740(&a51);

  _Unwind_Resume(a1);
}

void sub_100E8A5AC(uint64_t a1)
{
  id v2;
  char v3;
  char v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  _UNKNOWN **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  _BYTE buf[12];
  char v20;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100236AC4() & 1) != 0)
  {
    sub_1015A2E04(buf, "com.apple.locationd.activity");
    v3 = sub_1002255E0(a1);
    v4 = v3;
    if (v20 < 0)
    {
      operator delete(*(void **)buf);
      if ((v4 & 1) != 0)
        goto LABEL_4;
    }
    else if ((v3 & 1) != 0)
    {
LABEL_4:
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "reset");
      goto LABEL_18;
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v6 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      v10 = *(_QWORD *)(a1 + 24);
      v15 = 138412290;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", &v15, 12);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStepCountReset(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v13 = CMErrorMessage;
    v14 = &off_10221C278;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
    sub_100E8BCDC(a1, buf);
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Step count reset failed as it was not available!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Step count reset failed as it was not available!", &v15, 2);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStepCountReset(std::shared_ptr<CLConnectionMessage>)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v17 = CMErrorMessage;
    v18 = &off_10221C200;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
    sub_100E8BCDC(a1, buf);
  }
LABEL_18:

}

void sub_100E8A980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100E8A9D8(uint64_t a1, uint64_t *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSNumber *v6;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = *a2;
  v5 = CMAvailable;
  v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100236AAC());
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1);
  CLConnectionMessage::sendReply(v4);

}

void sub_100E8AA98(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100E8AAC0(uint64_t a1, uint64_t *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSNumber *v6;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = *a2;
  v5 = CMAvailable;
  v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100236A54());
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1);
  CLConnectionMessage::sendReply(v4);

}

void sub_100E8AB80(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100E8ABA8(uint64_t a1, uint64_t *a2)
{
  id v4;
  char v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[5];
  std::__shared_weak_count *v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  _UNKNOWN **v34;
  int v35;
  uint64_t v36;
  _BYTE buf[12];
  char v38;
  uint64_t v39;
  _UNKNOWN **v40;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.activity");
  v5 = sub_1002255E0(a1);
  v6 = v5;
  if ((v38 & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_3;
LABEL_19:
    v16 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v39 = CMErrorMessage;
    v40 = &off_10221C218;
    CLConnectionMessage::sendReply(v16, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1));
    goto LABEL_32;
  }
  operator delete(*(void **)buf);
  if ((v6 & 1) == 0)
    goto LABEL_19;
LABEL_3:
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
  v7 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLDaemonClient received StrideCalibrationDump request,client,%@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v21 = *(_QWORD *)(a1 + 24);
    v35 = 138412290;
    v36 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "CLDaemonClient received StrideCalibrationDump request,client,%@", &v35, 12);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  if ((sub_100236AC4() & 1) != 0)
  {
    v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier"));
    objc_msgSend(v9, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(a1 + 8), "silo"));
    if (v9)
    {
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3321888768;
      v29[2] = sub_100E8BD7C;
      v29[3] = &unk_10218E6E0;
      v10 = (std::__shared_weak_count *)a2[1];
      v29[4] = *a2;
      v30 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      objc_msgSend(v9, "getPedometerBinsAndHistoryWithReply:", v29);

      v13 = v30;
      if (v30)
      {
        v14 = (unint64_t *)&v30->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_34;
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v19 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cannot find step count proxy", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v35) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Cannot find step count proxy", &v35, v28);
      v27 = (char *)v26;
      sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    v20 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v31 = CMErrorMessage;
    v32 = &off_10221C200;
    CLConnectionMessage::sendReply(v20, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v17 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Step count notifier not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v35) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Step count notifier not available", &v35, v28);
      v25 = (char *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    v18 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v33 = CMErrorMessage;
    v34 = &off_10221C200;
    CLConnectionMessage::sendReply(v18, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
  }
LABEL_32:
  if (v38 < 0)
    operator delete(*(void **)buf);
LABEL_34:

}

void sub_100E8B1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void sub_100E8B278(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  id v12;
  NSObject *v13;
  id v14;
  std::__shared_weak_count *v15;
  CLConnectionMessage *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CLConnectionMessage *v22;
  NSObject *v23;
  id v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  CLConnectionMessage *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  _QWORD v40[5];
  std::__shared_weak_count *v41;
  _QWORD v42[6];
  std::__shared_weak_count *v43;
  _WORD v44[8];
  uint64_t v45;
  _UNKNOWN **v46;
  uint8_t buf[1640];
  uint64_t v48;
  _UNKNOWN **v49;
  uint64_t v50;
  _UNKNOWN **v51;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_1001BBC08(a1);
  v6 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    v8 = Dictionary;
    if (Dictionary
      && (v9 = CMPedometerCalibrationTypeId,
          objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMPedometerCalibrationTypeId))
      && (v10 = CMPedometerFetchRemoteCalibrations,
          objc_msgSend(v8, "objectForKeyedSubscript:", CMPedometerFetchRemoteCalibrations)))
    {
      v11 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v10), "BOOLValue");
      v12 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v9), "integerValue");
      if (v11)
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
        v13 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "received request for remote pedometer calibrations", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
          v44[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "received request for remote pedometer calibrations", v44, 2);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLMotionSyncStore"));
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3321888768;
        v42[2] = sub_100E8BD84;
        v42[3] = &unk_10218E710;
        v16 = *(CLConnectionMessage **)a2;
        v15 = *(std::__shared_weak_count **)(a2 + 8);
        v42[4] = v12;
        v42[5] = v16;
        v43 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        objc_msgSend(v14, "doAsync:", v42);
        v19 = v43;
        if (v43)
        {
          v20 = (unint64_t *)&v43->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
        v23 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "received request for pedometer calibrations", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
          v44[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "received request for pedometer calibrations", v44, 2);
          v36 = (uint8_t *)v35;
          sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
        v24 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier"));
        objc_msgSend(v24, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(a1 + 8), "silo"));
        if (v24)
        {
          v40[0] = _NSConcreteStackBlock;
          v40[1] = 3321888768;
          v40[2] = sub_100E8C180;
          v40[3] = &unk_10218E740;
          v25 = *(std::__shared_weak_count **)(a2 + 8);
          v40[4] = *(_QWORD *)a2;
          v41 = v25;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          objc_msgSend(v24, "getPedometerCalibrationBins:withReply:", v12, v40);
          v28 = v41;
          if (v41)
          {
            v29 = (unint64_t *)&v41->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        else
        {
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
          v31 = qword_10229FCD8;
          if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Cannot find step count proxy", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
            v44[0] = 0;
            LODWORD(v39) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Cannot find step count proxy", v44, v39);
            v38 = (uint8_t *)v37;
            sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v37);
            if (v38 != buf)
              free(v38);
          }
          v32 = *(CLConnectionMessage **)a2;
          v45 = CMErrorMessage;
          v46 = &off_10221C218;
          +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
          CLConnectionMessage::sendReply(v32);
        }

      }
    }
    else
    {
      v22 = *(CLConnectionMessage **)a2;
      v48 = CMErrorMessage;
      v49 = &off_10221C260;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1);
      CLConnectionMessage::sendReply(v22);
    }
  }
  else
  {
    v50 = CMErrorMessage;
    v51 = &off_10221C218;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_100E8B954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100E8B9AC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_10218E918, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E8BA40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8BA54(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_10218E920, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E8BAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8BAFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_10218E910, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E8BB88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8BB9C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_10218E918, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E8BC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8BC3C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_10218E920, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E8BCC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8BCDC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_10218E928, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E8BD68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E8BD7C(uint64_t a1)
{
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100E8BD84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSMutableDictionary *v8;
  NSMutableDictionary *v9;
  NSObject *v11;
  uint64_t v12;
  _UNKNOWN ***v13;
  uint64_t *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  _WORD v20[8];
  uint64_t v21;
  _UNKNOWN **v22;
  uint64_t v23;
  _UNKNOWN **v24;
  uint8_t buf[1640];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 != 1)
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      v11 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Requested calibration type not recognized", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
        v20[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Requested calibration type not recognized", v20, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      v12 = *(_QWORD *)(a1 + 40);
      v23 = CMErrorMessage;
      v24 = &off_10221C260;
      v13 = &v24;
      v14 = &v23;
      goto LABEL_21;
    }
    v6 = 31;
  }
  else
  {
    v6 = 30;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8 * v6))(a2);
  v8 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 2);
  v9 = v8;
  if (v4)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v4, CLMotionSyncStoreLastUpdate);
  if (v7)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v7, CMPedometerCalibrationBins);
    return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 40));
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
  v15 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "No remote pedometer calibrations available", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "No remote pedometer calibrations available", v20, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v12 = *(_QWORD *)(a1 + 40);
  v21 = CMErrorMessage;
  v22 = &off_10221C230;
  v13 = &v22;
  v14 = &v21;
LABEL_21:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v14, 1);
  return CLConnectionMessage::sendReply(v12);
}

uint64_t sub_100E8C180(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _UNKNOWN ***v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint64_t v12;
  _UNKNOWN **v13;
  uint8_t buf[1640];
  _QWORD v15[2];
  _QWORD v16[2];

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v15[0] = CMPedometerCalibrationBins;
    v15[1] = CLMotionSyncStoreLastUpdate;
    v16[0] = a2;
    v16[1] = +[NSDate date](NSDate, "date");
    v4 = (_UNKNOWN ***)v16;
    v5 = v15;
    v6 = 2;
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v7 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No pedometer calibrations available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "No pedometer calibrations available", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v3 = *(_QWORD *)(a1 + 32);
    v12 = CMErrorMessage;
    v13 = &off_10221C230;
    v4 = &v13;
    v5 = &v12;
    v6 = 1;
  }
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v5, v6);
  return CLConnectionMessage::sendReply(v3);
}

void sub_100E8C3A0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E8C3CC(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

__n128 sub_100E8C3F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10218E7F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100E8C434(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218E7F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100E8C458(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E8C494()
{
}

void sub_100E8C4A0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_10020FDBC(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100E8C50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

void sub_100E8C524(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100E8C550(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10218E8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100E8C58C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218E8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100E8C5B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E8C5EC()
{
}

void sub_100E8C5F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100E8C6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100E8C6E8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100E8C760(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100E8C74C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100E8C760(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100E8C9E0(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100E8C9C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E8C9E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100E8CA54(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100E8CA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E8CA54(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100E8CAAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E8CAC8()
{
  sub_1015A2E04(qword_102308CE0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308CE0, (void *)&_mh_execute_header);
}

double sub_100E8CB0C(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)a1 = off_102142018;
  *(_DWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

void sub_100E8CB30(uint64_t a1, uint64_t a2)
{
  sub_100E8CB3C(a1, a2, 2.56);
}

void sub_100E8CB3C(uint64_t a1, uint64_t a2, double a3)
{
  double v5;
  NSObject *v6;
  unsigned int v7;
  const char *v8;
  uint64_t v10;
  NSObject *v11;
  unsigned int v12;
  const char *v13;
  unsigned int v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  const char *v34;
  char *v35;
  unsigned int v36;
  const char *v37;
  unint64_t v38;
  double v39;
  const char *v40;
  char *v41;
  int v42;
  const char *v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  _BYTE buf[22];
  __int16 v49;
  double v50;

  v5 = *(double *)a2;
  if (*(double *)a2 < a3)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10218E930);
    v6 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_DWORD *)(a1 + 8) - 1;
      if (v7 > 2)
        v8 = "Unknown";
      else
        v8 = off_10218E950[v7];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v5;
      v49 = 2050;
      v50 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning FitnessMinuteEstimatorYouth (%{public}s), Invalid timestamps - ignored the epoch, epochStartTime:%{public}.3f, epochDuration:%{public}.3f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10218E930);
      v14 = *(_DWORD *)(a1 + 8) - 1;
      if (v14 > 2)
        v15 = "Unknown";
      else
        v15 = off_10218E950[v14];
      v42 = 136446722;
      v43 = v15;
      v44 = 2050;
      v45 = v5;
      v46 = 2050;
      v47 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#Warning FitnessMinuteEstimatorYouth (%{public}s), Invalid timestamps - ignored the epoch, epochStartTime:%{public}.3f, epochDuration:%{public}.3f", &v42, 32);
      v35 = (char *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLGenericFitnessMinuteEstimatorYouth::slideActivityWindowYouth(CFTimeInterval, const CLMotionStateMediator_Type::MediatedMotionActivity &)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    return;
  }
  v10 = *(_QWORD *)(a1 + 56);
  if (v10
    && v5 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * ((v10 + *(_QWORD *)(a1 + 48) - 1) / 0xAAuLL))
                      + 24 * ((v10 + *(_QWORD *)(a1 + 48) - 1) % 0xAAuLL)))
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10218E930);
    v11 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_DWORD *)(a1 + 8) - 1;
      if (v12 > 2)
        v13 = "Unknown";
      else
        v13 = off_10218E950[v12];
      v16 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 48) - 1;
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v16 / 0xAA)) + 24 * (v16 % 0xAA));
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v17;
      v49 = 2050;
      v50 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning FitnessMinuteEstimatorYouth (%{public}s), Time rolled back, past back:%{public}.3f, current epochStartTime:%{public}.3f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10218E930);
      v36 = *(_DWORD *)(a1 + 8) - 1;
      if (v36 > 2)
        v37 = "Unknown";
      else
        v37 = off_10218E950[v36];
      v38 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 48) - 1;
      v39 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v38 / 0xAA)) + 24 * (v38 % 0xAA));
      v42 = 136446722;
      v43 = v37;
      v44 = 2050;
      v45 = v39;
      v46 = 2050;
      v47 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#Warning FitnessMinuteEstimatorYouth (%{public}s), Time rolled back, past back:%{public}.3f, current epochStartTime:%{public}.3f", &v42, 32);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLGenericFitnessMinuteEstimatorYouth::slideActivityWindowYouth(CFTimeInterval, const CLMotionStateMediator_Type::MediatedMotionActivity &)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    v18 = *(void ***)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v20 = v19 - (_QWORD)v18;
    if (v20 >= 0x11)
    {
      do
      {
        operator delete(*v18);
        v21 = *(_QWORD *)(a1 + 32);
        v18 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v18;
        v20 = v21 - (_QWORD)v18;
      }
      while (v20 > 0x10);
    }
    if (v20 >> 3 == 1)
    {
      v22 = 85;
      goto LABEL_30;
    }
    if (v20 >> 3 == 2)
    {
      v22 = 170;
LABEL_30:
      *(_QWORD *)(a1 + 48) = v22;
    }
  }
  *(double *)buf = v5;
  *(double *)&buf[8] = a3;
  *(_DWORD *)&buf[16] = *(_DWORD *)(a2 + 136);
  sub_100E8D348((_QWORD *)(a1 + 16), (__int128 *)buf);
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 48);
  v25 = (double *)(*(_QWORD *)(v23 + 8 * (v24 / 0xAA)) + 24 * (v24 % 0xAA));
  v26 = v25[1];
  v27 = *v25 - v26;
  if (*(double *)(*(_QWORD *)(v23 + 8 * ((v24 + *(_QWORD *)(a1 + 56) - 1) / 0xAA))
                 + 24 * ((v24 + *(_QWORD *)(a1 + 56) - 1) % 0xAA))
     - v27 >= 60.0)
  {
    sub_100E8D1EC((_QWORD *)a1, (uint64_t)buf);
    if (*(double *)buf >= 60.0)
    {
      if (((*(uint64_t (**)(uint64_t, _BYTE *, double))(*(_QWORD *)a1 + 24))(a1, buf, *(double *)buf) & 1) != 0)
      {
        (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 16))(a1, v27);
        v26 = 60.0;
      }
      else
      {
        v26 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (*(_QWORD *)(a1 + 48) / 0xAAuLL))
                        + 24 * (*(_QWORD *)(a1 + 48) % 0xAAuLL)
                        + 8);
      }
    }
    v28 = *(_QWORD *)(a1 + 56);
    if (v28)
    {
      v29 = v27 + v26;
      do
      {
        v30 = *(_QWORD *)(a1 + 48);
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v30 / 0xAA));
        v32 = 24 * (v30 % 0xAA);
        v33 = *(double *)(v31 + v32);
        if (v29 <= v33 - *(double *)(v31 + v32 + 8))
          break;
        if (v33 > v29)
        {
          *(double *)(v31 + v32 + 8) = v33 - v29;
          return;
        }
        *(_QWORD *)(a1 + 56) = v28 - 1;
        *(_QWORD *)(a1 + 48) = v30 + 1;
        sub_10047FDC4(a1 + 16, 1);
        v28 = *(_QWORD *)(a1 + 56);
      }
      while (v28);
    }
  }
}

_QWORD *sub_100E8D1EC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = result[3];
  if (result[4] == v2)
    goto LABEL_17;
  v3 = result[6];
  v4 = *(_QWORD *)(v2 + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA);
  v5 = *(_QWORD *)(v2 + 8 * ((result[7] + v3) / 0xAA)) + 24 * ((result[7] + v3) % 0xAA);
  if (v4 == v5)
    goto LABEL_17;
  v6 = (_QWORD *)(v2 + 8 * (v3 / 0xAA));
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    if (v11 < 60.0)
    {
      v12 = 60.0 - v11;
      if (60.0 - v11 >= *(double *)(v4 + 8))
        v12 = *(double *)(v4 + 8);
      v11 = v11 + v12;
      *(double *)a2 = v11;
      switch(*(_DWORD *)(v4 + 16))
      {
        case 0:
          v7 = v12 + v7;
          *(double *)(a2 + 8) = v7;
          break;
        case 1:
          v9 = v12 + v9;
          *(double *)(a2 + 16) = v9;
          break;
        case 2:
          v10 = v12 + v10;
          *(double *)(a2 + 24) = v10;
          break;
        case 3:
          v8 = v12 + v8;
          *(double *)(a2 + 32) = v8;
          break;
        default:
          break;
      }
    }
    v4 += 24;
    if (v4 - *v6 == 4080)
    {
      v13 = v6[1];
      ++v6;
      v4 = v13;
    }
  }
  while (v4 != v5);
  if (v11 <= 0.0)
  {
LABEL_17:
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
  }
  else
  {
    *(double *)(a2 + 8) = v7 * 100.0 / v11;
    *(double *)(a2 + 16) = v9 * 100.0 / v11;
    *(double *)(a2 + 24) = v10 * 100.0 / v11;
    *(double *)(a2 + 32) = v8 * 100.0 / v11;
  }
  return result;
}

uint64_t sub_100E8D348(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E8D45C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  v10 = a1[4];
  v11 = a1[5] + 1;
  a1[5] = v11;
  v12 = v10 + v11;
  v13 = a1[1];
  v14 = (_QWORD *)(v13 + 8 * (v12 / 0xAA));
  v15 = *v14 + 24 * (v12 % 0xAA);
  if (a1[2] == v13)
    v15 = 0;
  if (v15 == *v14)
    v15 = *(v14 - 1) + 4080;
  return v15 - 24;
}

void sub_100E8D430(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_100E8D45C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E8D724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100E8DE64(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
      return sub_1004C5730(*(_QWORD *)(a3 + 8));
  }
  return result;
}

void sub_100E8DEFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  int v18;
  float v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  double v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  double v32;
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;

  v6 = *(float *)(a2 + 296);
  v7 = *(float *)(a2 + 1368);
  v8 = *(float *)(a2 + 1372);
  v9 = *(float *)(a2 + 1376);
  v10 = *(float *)(a2 + 1380);
  v11 = *(double *)(a2 + 112);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  sub_1006B2E70();
  v13 = v12;
  *(float *)(a3 + 12) = v12;
  if (sub_100219944(a2) && *(double *)(a2 + 600) < *(double *)a2)
  {
    v14 = *(double *)(a2 + 560);
    v15 = (v10 - v14) / (v10 - v9);
    v16 = v7 * sub_10108B14C(v15, v8);
    *(float *)(a3 + 20) = v16;
    v17 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(double *)(a1 + 8) = v11;
    *(float *)(a1 + 16) = v16;
  }
  else
  {
    v16 = *(float *)(a1 + 16);
    if (v16 <= 0.0 || vabdd_f64(v11, *(double *)(a1 + 8)) >= 150.0)
    {
      v17 = 0;
      *(float *)(a3 + 20) = v13;
      *(_DWORD *)(a3 + 24) = 0;
      v16 = v13;
    }
    else
    {
      if (v6 > 18.0)
      {
        *(double *)(a1 + 8) = v11;
        v16 = v16 * 1.2;
      }
      *(float *)(a3 + 20) = v16;
      v17 = 1;
      *(_DWORD *)(a3 + 24) = 1;
    }
  }
  *(float *)(a3 + 28) = v16;
  *(_DWORD *)(a3 + 32) = v17;
  *(_DWORD *)(a3 + 36) = 15;
  v18 = v17;
  v19 = v16;
  if (v16 < 2.1)
  {
    *(_QWORD *)(a3 + 20) = 0x340066666;
    v18 = 3;
    v19 = 2.1;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10218EA58);
  v20 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218752;
    v32 = v19;
    v33 = 1024;
    v34 = v18;
    v35 = 2048;
    v36 = v16;
    v37 = 1024;
    v38 = v17;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Calisthenics (HIIT), METS, %f, %d, truthMETS, %f, %d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10218EA58);
    v23 = 134218752;
    v24 = v19;
    v25 = 1024;
    v26 = v18;
    v27 = 2048;
    v28 = v16;
    v29 = 1024;
    v30 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Calisthenics (HIIT), METS, %f, %d, truthMETS, %f, %d", COERCE_DOUBLE(&v23), 34);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieCalisthenicsModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

void sub_100E8E25C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100E8E288()
{
  uint64_t result;

  if (qword_102311750)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311750 + 8))(qword_102311750);
  if (qword_102311758)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311758 + 8))(qword_102311758);
  if (qword_102311760)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311760 + 8))(qword_102311760);
  if (qword_102311768)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311768 + 8))(qword_102311768);
  if (qword_102311770)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311770 + 8))(qword_102311770);
  if (qword_102311778)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311778 + 8))(qword_102311778);
  if (qword_102311780)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311780 + 8))(qword_102311780);
  if (qword_102311788)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311788 + 8))(qword_102311788);
  if (qword_102311790)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311790 + 8))(qword_102311790);
  if (qword_102311798)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311798 + 8))(qword_102311798);
  if (qword_1023117A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117A0 + 8))(qword_1023117A0);
  if (qword_1023117A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117A8 + 8))(qword_1023117A8);
  if (qword_1023117B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117B0 + 8))(qword_1023117B0);
  if (qword_1023117B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117B8 + 8))(qword_1023117B8);
  if (qword_1023117C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117C0 + 8))(qword_1023117C0);
  if (qword_1023117C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117C8 + 8))(qword_1023117C8);
  if (qword_1023117D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117D0 + 8))(qword_1023117D0);
  if (qword_1023117D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117D8 + 8))(qword_1023117D8);
  if (qword_1023117E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117E0 + 8))(qword_1023117E0);
  if (qword_1023117E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117E8 + 8))(qword_1023117E8);
  if (qword_1023117F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117F0 + 8))(qword_1023117F0);
  if (qword_1023117F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023117F8 + 8))(qword_1023117F8);
  if (qword_102311800)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311800 + 8))(qword_102311800);
  if (qword_102311808)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311808 + 8))(qword_102311808);
  if (qword_102311810)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311810 + 8))(qword_102311810);
  if (qword_102311818)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311818 + 8))(qword_102311818);
  if (qword_102311820)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311820 + 8))(qword_102311820);
  if (qword_102311828)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311828 + 8))(qword_102311828);
  if (qword_102311830)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311830 + 8))(qword_102311830);
  if (qword_102311838)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311838 + 8))(qword_102311838);
  if (qword_102311840)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311840 + 8))(qword_102311840);
  if (qword_102311848)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311848 + 8))(qword_102311848);
  if (qword_102311850)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311850 + 8))(qword_102311850);
  if (qword_102311858)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311858 + 8))(qword_102311858);
  if (qword_102311860)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311860 + 8))(qword_102311860);
  if (qword_102311868)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311868 + 8))(qword_102311868);
  if (qword_102311870)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311870 + 8))(qword_102311870);
  if (qword_102311878)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311878 + 8))(qword_102311878);
  if (qword_102311880)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311880 + 8))(qword_102311880);
  if (qword_102311888)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311888 + 8))(qword_102311888);
  result = qword_102311890;
  if (qword_102311890)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102311890 + 8))(qword_102311890);
  return result;
}

void sub_100E8E674(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((byte_102308CF8 & 1) == 0)
  {
    byte_102308CF8 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", a4);
    sub_10043FA90(v4, v5, v6, v7);
    operator new();
  }
}

uint64_t sub_100E8F27C(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10218EA88;
  *(_QWORD *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

_QWORD *sub_100E8F2A0(_QWORD *result)
{
  *result = &off_10218EC68;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100E8F2B4(uint64_t result)
{
  *(_QWORD *)result = off_10218EBF0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_QWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

_QWORD *sub_100E8F2E8(_QWORD *result)
{
  *result = &off_10218ED58;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F2FC(_QWORD *result)
{
  result[5] = 0;
  *result = off_10218ECE0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *(_QWORD *)((char *)result + 29) = 0;
  return result;
}

_QWORD *sub_100E8F318(_QWORD *result)
{
  *result = &off_10218EE48;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100E8F32C(uint64_t result)
{
  *(_QWORD *)result = off_10218EDD0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_100E8F340(_QWORD *result)
{
  *result = &off_10218EF38;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

double sub_100E8F354(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10218EEC0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

_QWORD *sub_100E8F370(_QWORD *result)
{
  *result = &off_10218F028;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100E8F384(uint64_t result)
{
  *(_QWORD *)result = off_10218EFB0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_100E8F398(_QWORD *result)
{
  *result = &off_10218F118;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100E8F3AC(uint64_t result)
{
  *(_QWORD *)result = off_10218F0A0;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_100E8F3C4(_QWORD *result)
{
  *result = &off_10218F208;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100E8F3D8(uint64_t result)
{
  *(_QWORD *)result = off_10218F190;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_100E8F3F0(_QWORD *result)
{
  *result = &off_10218F2F8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F404(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_10218F280;
  return result;
}

_QWORD *sub_100E8F418(_QWORD *result)
{
  *result = &off_10218F3E8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F42C(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_10218F370;
  return result;
}

_QWORD *sub_100E8F440(_QWORD *result)
{
  *result = &off_10218F4D8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F454(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_10218F460;
  return result;
}

_QWORD *sub_100E8F468(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = off_10218F550;
  return result;
}

_QWORD *sub_100E8F47C(_QWORD *result)
{
  *result = &off_10218F640;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F490(_QWORD *result)
{
  *result = off_10218F5C8;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = 0;
  return result;
}

double sub_100E8F4AC(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)a1 = off_10218F730;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)(a1 + 48) = xmmword_101B99EF0;
  return result;
}

_QWORD *sub_100E8F4D8(_QWORD *result)
{
  *result = &off_10218F898;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F4EC(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_10218F820;
  return result;
}

_QWORD *sub_100E8F500(_QWORD *result)
{
  *result = &off_10218F988;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F514(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_10218F910;
  return result;
}

_QWORD *sub_100E8F528(_QWORD *result)
{
  *result = &off_10218FA78;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100E8F53C(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10218FA00;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

_QWORD *sub_100E8F558(_QWORD *result)
{
  *result = &off_10218FB68;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F56C(_QWORD *result)
{
  *result = off_10218FAF0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F580(_QWORD *result)
{
  *result = &off_10218FC58;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_100E8F594(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_10218FBE0;
  return result;
}

_QWORD *sub_100E8F5A8(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = off_10218FCD0;
  return result;
}

uint64_t sub_100E8F5BC(_QWORD *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t result;

  v5 = sub_100446050((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  v9 = sub_1004491C0(v5, v6, v7, v8);
  a1[2] = v9;
  v13 = sub_10044E760(v9, v10, v11, v12);
  a1[3] = v13;
  v17 = sub_10044BCDC(v13, v14, v15, v16);
  a1[4] = v17;
  v21 = sub_10044C0E8(v17, v18, v19, v20);
  a1[7] = v21;
  v25 = sub_10044C570(v21, v22, v23, v24);
  a1[8] = v25;
  v29 = sub_10044CD50(v25, v26, v27, v28);
  a1[9] = v29;
  v33 = sub_10046CE34(v29, v30, v31, v32);
  a1[10] = v33;
  v37 = sub_10044EFB0(v33, v34, v35, v36);
  a1[11] = v37;
  result = sub_10044F558(v37, v38, v39, v40);
  a1[12] = result;
  return result;
}

uint64_t sub_100E8F628(_QWORD *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = sub_100442924((uint64_t)a1, a2, a3, a4);
  a1[1] = result;
  v6 = qword_102311888;
  if (qword_102311888)
  {
    a1[2] = qword_102311888;
  }
  else
  {
    result = ((uint64_t (*)(void))sub_100E8E674)();
    v6 = qword_102311888;
    a1[2] = qword_102311888;
    if (!v6)
    {
      result = sub_100E8E674(result);
      v6 = qword_102311888;
    }
  }
  a1[3] = v6;
  v7 = qword_102311760;
  if (!qword_102311760)
  {
    result = sub_100E8E674(result);
    v7 = qword_102311760;
  }
  a1[4] = v7;
  v8 = qword_102311778;
  if (!qword_102311778)
  {
    result = sub_100E8E674(result);
    v8 = qword_102311778;
  }
  a1[5] = v8;
  v9 = qword_102311788;
  if (!qword_102311788)
  {
    result = sub_100E8E674(result);
    v9 = qword_102311788;
  }
  a1[6] = v9;
  v10 = qword_102311798;
  if (!qword_102311798)
  {
    result = sub_100E8E674(result);
    v10 = qword_102311798;
  }
  a1[7] = v10;
  v11 = qword_1023117A8;
  if (!qword_1023117A8)
  {
    result = sub_100E8E674(result);
    v11 = qword_1023117A8;
  }
  a1[8] = v11;
  v12 = qword_1023117B8;
  if (!qword_1023117B8)
  {
    result = sub_100E8E674(result);
    v12 = qword_1023117B8;
  }
  a1[9] = v12;
  v13 = qword_1023117C8;
  if (!qword_1023117C8)
  {
    result = sub_100E8E674(result);
    v13 = qword_1023117C8;
  }
  a1[10] = v13;
  v14 = qword_1023117D8;
  if (!qword_1023117D8)
  {
    result = sub_100E8E674(result);
    v14 = qword_1023117D8;
  }
  a1[11] = v14;
  v15 = qword_1023117E8;
  if (!qword_1023117E8)
  {
    result = sub_100E8E674(result);
    v15 = qword_1023117E8;
  }
  a1[12] = v15;
  v16 = qword_1023117F8;
  if (!qword_1023117F8)
  {
    result = sub_100E8E674(result);
    v16 = qword_1023117F8;
  }
  a1[13] = v16;
  v17 = qword_102311808;
  if (!qword_102311808)
  {
    result = sub_100E8E674(result);
    v17 = qword_102311808;
  }
  a1[14] = v17;
  v18 = qword_102311810;
  if (!qword_102311810)
  {
    result = sub_100E8E674(result);
    v18 = qword_102311810;
  }
  a1[15] = v18;
  v19 = qword_102311820;
  if (!qword_102311820)
  {
    result = sub_100E8E674(result);
    v19 = qword_102311820;
  }
  a1[16] = v19;
  v20 = qword_102311838;
  if (!qword_102311838)
  {
    result = sub_100E8E674(result);
    v20 = qword_102311838;
  }
  a1[17] = v20;
  v21 = qword_102311848;
  if (!qword_102311848)
  {
    result = sub_100E8E674(result);
    v21 = qword_102311848;
  }
  a1[18] = v21;
  v22 = qword_102311858;
  if (!qword_102311858)
  {
    result = sub_100E8E674(result);
    v22 = qword_102311858;
  }
  a1[19] = v22;
  v23 = qword_102311868;
  if (!qword_102311868)
  {
    result = sub_100E8E674(result);
    v23 = qword_102311868;
  }
  a1[20] = v23;
  v24 = qword_102311878;
  if (!qword_102311878)
  {
    result = sub_100E8E674(result);
    v24 = qword_102311878;
  }
  a1[21] = v24;
  return result;
}

BOOL sub_100E8F82C(unsigned int a1)
{
  return a1 < 0x1B;
}

void sub_100E8F838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 483);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1002A19E0(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v7;
      v6 = *(_DWORD *)(a2 + 40);
    }
    if ((v6 & 2) != 0)
    {
      v8 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      v9 = *(std::string **)(a1 + 8);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v9, v8);
    }
  }
}

void sub_100E8F960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E8F978(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218EA88;
  sub_100109DDC((uint64_t)a1);
  if (*((_QWORD *)a1 + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E8F9C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E8F978(a1);
  operator delete();
}

void sub_100E8F9EC()
{
  operator new();
}

uint64_t sub_100E8FA34(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_100E8FA84(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  int v16;
  void *v17;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  _BYTE *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  char v31;
  unsigned int v32[12];

  v5 = a1 + 16;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v32[0] = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
          if (!(_DWORD)result)
            return result;
          v14 = v32[0];
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          v14 = *v13;
          v15 = v13 + 1;
          *((_QWORD *)this + 1) = v15;
        }
        *(_DWORD *)(a1 + 32) = v14;
        v16 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v16;
        if ((unint64_t)v15 < v12 && *v15 == 18)
        {
          *((_QWORD *)this + 1) = v15 + 1;
          goto LABEL_30;
        }
      }
      if (v8 != 2)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_20;
      v16 = *(_DWORD *)(a1 + 40);
LABEL_30:
      *(_DWORD *)(a1 + 40) = v16 | 2;
      v17 = *(void **)(a1 + 8);
      if (v17 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v17);
      if (!(_DWORD)result)
        return result;
      v18 = (char *)*((_QWORD *)this + 1);
      v10 = (char *)*((_QWORD *)this + 2);
      if (v18 < v10 && *v18 == 24)
      {
        do
        {
          v11 = v18 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_36:
          v32[0] = 0;
          if (v11 >= v10 || *v11 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
            if (!(_DWORD)result)
              return result;
            v19 = v32[0];
          }
          else
          {
            v19 = *v11;
            *((_QWORD *)this + 1) = v11 + 1;
          }
          v20 = *(_DWORD *)(a1 + 24);
          if (v20 == *(_DWORD *)(a1 + 28))
          {
            sub_1002A19E0(v5, v20 + 1);
            v20 = *(_DWORD *)(a1 + 24);
          }
          v21 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v20 + 1;
          *(_DWORD *)(v21 + 4 * v20) = v19;
          v22 = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 24);
          if (v22 >= 1)
          {
            v23 = v22 + 1;
            do
            {
              v24 = (_BYTE *)*((_QWORD *)this + 1);
              v25 = *((_QWORD *)this + 2);
              if ((unint64_t)v24 >= v25 || *v24 != 24)
                break;
              *((_QWORD *)this + 1) = v24 + 1;
              v32[0] = 0;
              if ((unint64_t)(v24 + 1) >= v25 || (char)v24[1] < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
                if (!(_DWORD)result)
                  return result;
                v26 = v32[0];
              }
              else
              {
                v26 = v24[1];
                *((_QWORD *)this + 1) = v24 + 2;
              }
              v27 = *(_DWORD *)(a1 + 24);
              if (v27 >= *(_DWORD *)(a1 + 28))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v32, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                v28 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v31, v28);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
                v27 = *(_DWORD *)(a1 + 24);
              }
              v29 = *(_QWORD *)(a1 + 16);
              *(_DWORD *)(a1 + 24) = v27 + 1;
              *(_DWORD *)(v29 + 4 * v27) = v26;
              --v23;
            }
            while (v23 > 1);
          }
LABEL_55:
          v18 = (char *)*((_QWORD *)this + 1);
          v10 = (char *)*((_QWORD *)this + 2);
        }
        while (v18 < v10 && *v18 == 24);
        if (v18 == v10 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v8 != 3)
    {
      v9 = TagFallback & 7;
      goto LABEL_20;
    }
    v9 = TagFallback & 7;
    if (v9 == 2)
      break;
    if ((TagFallback & 7) == 0)
    {
      v11 = (char *)*((_QWORD *)this + 1);
      v10 = (char *)*((_QWORD *)this + 2);
      goto LABEL_36;
    }
LABEL_20:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  result = sub_100B3CD70(this, v5);
  if ((_DWORD)result)
    goto LABEL_55;
  return result;
}

void sub_100E8FDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E8FE10(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
  }
  if ((v6 & 2) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  if (*(int *)(v5 + 24) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  return result;
}

uint64_t sub_100E8FE9C(uint64_t a1, unsigned int a2)
{
  char v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 40);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_22;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 40) & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      goto LABEL_22;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v4 += v11 + v7 + 1;
LABEL_22:
  v12 = *(_DWORD *)(a1 + 24);
  if (v12 < 1)
  {
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 16)
                                                                                             + 4 * v13);
      if ((v15 & 0x80000000) != 0)
      {
        v16 = 10;
      }
      else if (v15 >= 0x80)
      {
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
        v12 = *(_DWORD *)(a1 + 24);
      }
      else
      {
        v16 = 1;
      }
      v14 += v16;
      ++v13;
    }
    while (v13 < v12);
  }
  result = (v14 + v4 + v12);
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

void sub_100E8FFCC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E8F838(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E90018()
{
  return 1;
}

_QWORD *sub_100E90020@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.Client");
}

void sub_100E90030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  char v20;
  _BYTE v21[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v21, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 1043);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  v5 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v5)
    goto LABEL_27;
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 64) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311758 + 8);
    sub_100445BD4(v6, v7);
    v5 = *(_DWORD *)(a2 + 64);
  }
  if ((v5 & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_12:
      if ((v5 & 8) == 0)
        goto LABEL_13;
      goto LABEL_20;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_12;
  }
  v9 = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_BYTE *)(a1 + 24) = v9;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_BYTE *)(a1 + 25) = v10;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0)
      goto LABEL_15;
LABEL_22:
    v12 = *(_BYTE *)(a2 + 27);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_BYTE *)(a1 + 27) = v12;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_16:
      if ((v5 & 0x80) == 0)
        goto LABEL_27;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_21:
  v11 = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_BYTE *)(a1 + 26) = v11;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0)
    goto LABEL_22;
LABEL_15:
  if ((v5 & 0x40) == 0)
    goto LABEL_16;
LABEL_23:
  v13 = *(_DWORD *)(a2 + 28);
  if (v13 >= 0xC)
    sub_1019305D0();
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 28) = v13;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x80) != 0)
  {
LABEL_25:
    v14 = *(_DWORD *)(a2 + 32);
    if ((sub_10044254C(v14) & 1) == 0)
      sub_1019305A8();
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 32) = v14;
    v5 = *(_DWORD *)(a2 + 64);
  }
LABEL_27:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      v15 = *(_DWORD *)(a2 + 36);
      if (v15 >= 5)
        sub_101930580();
      *(_DWORD *)(a1 + 64) |= 0x100u;
      *(_DWORD *)(a1 + 36) = v15;
      v5 = *(_DWORD *)(a2 + 64);
    }
    if ((v5 & 0x200) != 0)
    {
      v16 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 64) |= 0x200u;
      *(_QWORD *)(a1 + 40) = v16;
      v5 = *(_DWORD *)(a2 + 64);
    }
    if ((v5 & 0x400) != 0)
    {
      v17 = *(_DWORD *)(a2 + 48);
      if (!sub_100176BA4(v17))
        sub_101930558();
      *(_DWORD *)(a1 + 64) |= 0x400u;
      *(_DWORD *)(a1 + 48) = v17;
      v5 = *(_DWORD *)(a2 + 64);
    }
    if ((v5 & 0x800) != 0)
    {
      v18 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 64) |= 0x800u;
      *(_DWORD *)(a1 + 52) = v18;
      v5 = *(_DWORD *)(a2 + 64);
    }
    if ((v5 & 0x1000) != 0)
    {
      v19 = *(_DWORD *)(a2 + 56);
      if (v19 >= 6)
        sub_101930530();
      *(_DWORD *)(a1 + 64) |= 0x1000u;
      *(_DWORD *)(a1 + 56) = v19;
    }
  }
}

void sub_100E902C0()
{
  operator delete();
}

void sub_100E902F8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218EB00;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311758 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E9034C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E902F8(a1);
  operator delete();
}

void sub_100E90370()
{
  operator new();
}

uint64_t sub_100E903B8(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 64);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_1004460E8(result);
        v2 = *(_DWORD *)(v1 + 64);
      }
    }
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_DWORD *)(v1 + 32) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_QWORD *)(v1 + 44) = 0;
    *(_QWORD *)(v1 + 36) = 0;
    *(_QWORD *)(v1 + 52) = 0;
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

uint64_t sub_100E90414(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  uint64_t result;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  _BYTE *v44;
  int v45;
  _BYTE *v46;
  unsigned int v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  _BYTE *v51;
  unsigned int v52;
  _BYTE *v53;
  unsigned int v54;
  unsigned int v55[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_37;
        *(_DWORD *)(a1 + 64) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v55[0] = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55))return 0;
        }
        else
        {
          v55[0] = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v25 = *((_DWORD *)this + 14);
        v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26)
          return 0;
        v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55[0]);
        if (!sub_100446188(v8, this, v28) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        v29 = *((_DWORD *)this + 14);
        v30 = __OFSUB__(v29, 1);
        v31 = v29 - 1;
        if (v31 < 0 == v30)
          *((_DWORD *)this + 14) = v31;
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 != 17)
          continue;
        *((_QWORD *)this + 1) = v32 + 1;
        goto LABEL_50;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_37;
LABEL_50:
        *(_QWORD *)v55 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v55) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v55;
        *(_DWORD *)(a1 + 64) |= 2u;
        v33 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v33 >= v10 || *v33 != 24)
          continue;
        v11 = v33 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_54:
        v55[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result)
            return result;
          v34 = v55[0];
          v35 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v34 = *v11;
          v35 = v11 + 1;
          *((_QWORD *)this + 1) = v35;
        }
        *(_BYTE *)(a1 + 24) = v34 != 0;
        *(_DWORD *)(a1 + 64) |= 4u;
        if ((unint64_t)v35 >= v10 || *v35 != 32)
          continue;
        v12 = v35 + 1;
        *((_QWORD *)this + 1) = v12;
LABEL_62:
        v55[0] = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result)
            return result;
          v37 = v55[0];
          v38 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v37 = *v12;
          v38 = v12 + 1;
          *((_QWORD *)this + 1) = v38;
        }
        *(_BYTE *)(a1 + 25) = v37 != 0;
        *(_DWORD *)(a1 + 64) |= 8u;
        if ((unint64_t)v38 >= v10 || *v38 != 40)
          continue;
        v13 = v38 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_70:
        v55[0] = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result)
            return result;
          v39 = v55[0];
          v40 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v39 = *v13;
          v40 = v13 + 1;
          *((_QWORD *)this + 1) = v40;
        }
        *(_BYTE *)(a1 + 26) = v39 != 0;
        *(_DWORD *)(a1 + 64) |= 0x10u;
        if ((unint64_t)v40 >= v10 || *v40 != 48)
          continue;
        v14 = v40 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_78:
        v55[0] = 0;
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result)
            return result;
          v41 = v55[0];
          v42 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v41 = *v14;
          v42 = v14 + 1;
          *((_QWORD *)this + 1) = v42;
        }
        *(_BYTE *)(a1 + 27) = v41 != 0;
        *(_DWORD *)(a1 + 64) |= 0x20u;
        if ((unint64_t)v42 >= v10 || *v42 != 56)
          continue;
        v15 = v42 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_86:
        v55[0] = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result)
            return result;
          v43 = v55[0];
        }
        else
        {
          v43 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        if (v43 <= 0xB)
        {
          *(_DWORD *)(a1 + 64) |= 0x40u;
          *(_DWORD *)(a1 + 28) = v43;
        }
        v44 = (_BYTE *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v44 >= v16 || *v44 != 64)
          continue;
        v17 = v44 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_96:
        v55[0] = 0;
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result)
            return result;
          v45 = v55[0];
        }
        else
        {
          v45 = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
        }
        if (sub_10044254C(v45))
        {
          if ((sub_10044254C(v45) & 1) == 0)
            sub_1019305A8();
          *(_DWORD *)(a1 + 64) |= 0x80u;
          *(_DWORD *)(a1 + 32) = v45;
        }
        v46 = (_BYTE *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        if ((unint64_t)v46 >= v18 || *v46 != 72)
          continue;
        v19 = v46 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_107:
        v55[0] = 0;
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!(_DWORD)result)
            return result;
          v47 = v55[0];
        }
        else
        {
          v47 = *v19;
          *((_QWORD *)this + 1) = v19 + 1;
        }
        if (v47 <= 4)
        {
          *(_DWORD *)(a1 + 64) |= 0x100u;
          *(_DWORD *)(a1 + 36) = v47;
        }
        v48 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v48 >= *((_QWORD *)this + 2) || *v48 != 81)
          continue;
        *((_QWORD *)this + 1) = v48 + 1;
LABEL_117:
        *(_QWORD *)v55 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v55) & 1) != 0)
        {
          *(_QWORD *)(a1 + 40) = *(_QWORD *)v55;
          *(_DWORD *)(a1 + 64) |= 0x200u;
          v49 = (_BYTE *)*((_QWORD *)this + 1);
          v20 = *((_QWORD *)this + 2);
          if ((unint64_t)v49 < v20 && *v49 == 88)
          {
            v21 = v49 + 1;
            *((_QWORD *)this + 1) = v21;
LABEL_121:
            v55[0] = 0;
            if ((unint64_t)v21 >= v20 || *v21 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
              if (!(_DWORD)result)
                return result;
              v50 = v55[0];
            }
            else
            {
              v50 = *v21;
              *((_QWORD *)this + 1) = v21 + 1;
            }
            if (sub_100176BA4(v50))
            {
              if (!sub_100176BA4(v50))
                sub_101930558();
              *(_DWORD *)(a1 + 64) |= 0x400u;
              *(_DWORD *)(a1 + 48) = v50;
            }
            v51 = (_BYTE *)*((_QWORD *)this + 1);
            v22 = *((_QWORD *)this + 2);
            if ((unint64_t)v51 < v22 && *v51 == 96)
            {
              v23 = v51 + 1;
              *((_QWORD *)this + 1) = v23;
LABEL_132:
              v55[0] = 0;
              if ((unint64_t)v23 >= v22 || *v23 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
                if (!(_DWORD)result)
                  return result;
                v52 = v55[0];
                v53 = (_BYTE *)*((_QWORD *)this + 1);
                v22 = *((_QWORD *)this + 2);
              }
              else
              {
                v52 = *v23;
                v53 = v23 + 1;
                *((_QWORD *)this + 1) = v53;
              }
              *(_DWORD *)(a1 + 52) = v52;
              *(_DWORD *)(a1 + 64) |= 0x800u;
              if ((unint64_t)v53 < v22 && *v53 == 104)
              {
                v24 = v53 + 1;
                *((_QWORD *)this + 1) = v24;
LABEL_140:
                v55[0] = 0;
                if ((unint64_t)v24 >= v22 || *v24 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
                  if (!(_DWORD)result)
                    return result;
                  v54 = v55[0];
                }
                else
                {
                  v54 = *v24;
                  *((_QWORD *)this + 1) = v24 + 1;
                }
                if (v54 <= 5)
                {
                  *(_DWORD *)(a1 + 64) |= 0x1000u;
                  *(_DWORD *)(a1 + 56) = v54;
                }
                if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  result = 1;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_54;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v12 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_62;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_70;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v14 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_78;
      case 7u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v15 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_86;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_96;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v19 = (char *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        goto LABEL_107;
      case 0xAu:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_117;
        goto LABEL_37;
      case 0xBu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v21 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_121;
      case 0xCu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v23 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_132;
      case 0xDu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_37;
        v24 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_140;
      default:
        v7 = TagFallback & 7;
LABEL_37:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_100E90BBC()
{
  operator delete();
}

uint64_t sub_100E90BE0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311758 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 25), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 26), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 27), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 28), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 32), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 36), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, (int)a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 48), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 56), (int)a2, a4);
  }
LABEL_28:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 52), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 64) & 0x1000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 56), (int)a2, a4);
  return result;
}

uint64_t sub_100E90D80(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;

  v3 = *(_DWORD *)(a1 + 64);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        v6 = *(_QWORD *)(qword_102311758 + 8);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004CA60(v6, a2);
      v8 = (int)v7;
      if (v7 >= 0x80)
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      else
        v9 = 1;
      v4 = v8 + v9 + 1;
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 2;
    if ((v3 & 8) != 0)
      v4 += 2;
    if ((v3 & 0x10) != 0)
      v4 += 2;
    if ((v3 & 0x20) != 0)
      v5 = v4 + 2;
    else
      v5 = v4;
    if ((v3 & 0x40) != 0)
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
      if ((v10 & 0x80000000) != 0)
      {
        v11 = 11;
      }
      else if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
        v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        v11 = 2;
      }
      v5 = (v11 + v5);
    }
    if ((v3 & 0x80) != 0)
    {
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v12 & 0x80000000) != 0)
      {
        v13 = 11;
      }
      else if (v12 >= 0x80)
      {
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
        v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        v13 = 2;
      }
      v5 = (v13 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
      if ((v14 & 0x80000000) != 0)
      {
        v15 = 11;
      }
      else if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
        v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        v15 = 2;
      }
      LODWORD(v5) = v15 + v5;
    }
    if ((v3 & 0x200) != 0)
      v5 = (v5 + 9);
    else
      v5 = v5;
    if ((v3 & 0x400) != 0)
    {
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
      if ((v16 & 0x80000000) != 0)
      {
        v17 = 11;
      }
      else if (v16 >= 0x80)
      {
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
        v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        v17 = 2;
      }
      v5 = (v17 + v5);
      if ((v3 & 0x800) == 0)
      {
LABEL_49:
        if ((v3 & 0x1000) == 0)
          goto LABEL_69;
        goto LABEL_63;
      }
    }
    else if ((v3 & 0x800) == 0)
    {
      goto LABEL_49;
    }
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v18 & 0x80000000) != 0)
    {
      v19 = 11;
    }
    else if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v19 = 2;
    }
    v5 = (v19 + v5);
    if ((v3 & 0x1000) != 0)
    {
LABEL_63:
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if ((v20 & 0x80000000) != 0)
      {
        v21 = 11;
      }
      else if (v20 >= 0x80)
      {
        v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
      }
      else
      {
        v21 = 2;
      }
      v5 = (v21 + v5);
    }
  }
LABEL_69:
  *(_DWORD *)(a1 + 60) = v5;
  return v5;
}

void sub_100E90F94(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E90030(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E90FE0()
{
  return 1;
}

_QWORD *sub_100E90FE8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.FusionStatus");
}

void sub_100E90FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 1310);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311768 + 8);
    sub_100E90030(v5, v6);
  }
}

void sub_100E910D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E910EC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218EB78;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311768 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E91140(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E910EC(a1);
  operator delete();
}

void sub_100E91164()
{
  operator new();
}

uint64_t sub_100E9119C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100E903B8(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100E911D0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100E90414(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100E91390(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311768 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100E913BC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102311768 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E90D80(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100E91428(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E90FF8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E91474()
{
  return 1;
}

_QWORD *sub_100E9147C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SystemNotification.InternalToolDataCapture");
}

void sub_100E9148C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  const std::string *v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v21, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 1686);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 36);
      v8 = *(int *)(a1 + 32);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v7 + 1);
          v7 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 32) = v8 + 1;
      sub_100E8F838(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 32));
  }
  LOBYTE(v10) = *(_BYTE *)(a2 + 72);
  if (!(_BYTE)v10)
    return;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      operator new();
    v12 = *(_QWORD *)(a2 + 8);
    if (!v12)
      v12 = *(_QWORD *)(qword_102311770 + 8);
    sub_10044282C(v11, v12);
    v10 = *(_DWORD *)(a2 + 72);
  }
  if ((v10 & 2) != 0)
  {
    v13 = *(_BYTE *)(a2 + 16);
    *(_DWORD *)(a1 + 72) |= 2u;
    *(_BYTE *)(a1 + 16) = v13;
    v10 = *(_DWORD *)(a2 + 72);
    if ((v10 & 4) == 0)
    {
LABEL_20:
      if ((v10 & 0x10) == 0)
        goto LABEL_21;
LABEL_26:
      v15 = *(_DWORD *)(a2 + 64);
      if (v15 >= 3)
        sub_1019305F8();
      *(_DWORD *)(a1 + 72) |= 0x10u;
      *(_DWORD *)(a1 + 64) = v15;
      v10 = *(_DWORD *)(a2 + 72);
      if ((v10 & 0x20) == 0)
      {
LABEL_22:
        if ((v10 & 0x40) == 0)
          return;
        goto LABEL_31;
      }
      goto LABEL_28;
    }
  }
  else if ((v10 & 4) == 0)
  {
    goto LABEL_20;
  }
  v14 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_DWORD *)(a1 + 20) = v14;
  v10 = *(_DWORD *)(a2 + 72);
  if ((v10 & 0x10) != 0)
    goto LABEL_26;
LABEL_21:
  if ((v10 & 0x20) == 0)
    goto LABEL_22;
LABEL_28:
  v16 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 72) |= 0x20u;
  v17 = *(std::string **)(a1 + 48);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v17, v16);
  if ((*(_DWORD *)(a2 + 72) & 0x40) != 0)
  {
LABEL_31:
    *(_DWORD *)(a1 + 72) |= 0x40u;
    v18 = *(_QWORD *)(a1 + 56);
    if (!v18)
      operator new();
    v19 = *(_QWORD *)(a2 + 56);
    if (!v19)
      v19 = *(_QWORD *)(qword_102311770 + 56);
    sub_100E90FF8(v18, v19);
  }
}

void sub_100E91778()
{
  operator delete();
}

void sub_100E917B0(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_10218EBF0;
  v2 = a1 + 3;
  sub_100E917F0(a1);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_100E917F0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = result;
  v2 = result[6];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_102311770 != result)
  {
    v4 = result[1];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)v1[7];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100E91890(uint64_t *a1)
{
  sub_100E917B0(a1);
  operator delete();
}

void sub_100E918B4()
{
  operator new();
}

uint64_t sub_100E9190C(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 72);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 72) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100442990(result);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    *(_BYTE *)(v1 + 16) = 0;
    *(_DWORD *)(v1 + 20) = 0;
    *(_DWORD *)(v1 + 64) = 0;
    if ((v2 & 0x20) != 0)
    {
      v3 = *(_QWORD *)(v1 + 48);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(v1 + 72) & 0x40) != 0)
    {
      v4 = *(_QWORD *)(v1 + 56);
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v4 + 8);
          if (result)
            result = sub_100E903B8(result);
        }
        *(_DWORD *)(v4 + 20) = 0;
      }
    }
  }
  if (*(int *)(v1 + 32) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_100E919EC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t result;
  unsigned int v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  _BYTE *v42;
  void *v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 < *((_QWORD *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        *(_DWORD *)(a1 + 72) |= 1u;
        v9 = *(_QWORD *)(a1 + 8);
        if (!v9)
          operator new();
        v53 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v53))return 0;
        }
        else
        {
          v53 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v53);
        if (!sub_1004429A8(v9, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v23 >= v11 || *v23 != 16)
          continue;
        v12 = v23 + 1;
        *((_QWORD *)this + 1) = v12;
        goto LABEL_38;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_38:
        v53 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v53);
          if (!(_DWORD)result)
            return result;
          v24 = v53;
          v25 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v24 = *v12;
          v25 = v12 + 1;
          *((_QWORD *)this + 1) = v25;
        }
        *(_BYTE *)(a1 + 16) = v24 != 0;
        *(_DWORD *)(a1 + 72) |= 2u;
        if ((unint64_t)v25 >= v11 || *v25 != 24)
          continue;
        v13 = v25 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_46:
        v53 = 0;
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v53);
          if (!(_DWORD)result)
            return result;
          v27 = v53;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v27 = *v13;
          v28 = v13 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 20) = v27;
        *(_DWORD *)(a1 + 72) |= 4u;
        if ((unint64_t)v28 >= v11 || *v28 != 34)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v28 + 1;
LABEL_54:
          v29 = *(_DWORD *)(a1 + 36);
          v30 = *(int *)(a1 + 32);
          if ((int)v30 >= v29)
          {
            if (v29 == *(_DWORD *)(a1 + 40))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v29 + 1);
              v29 = *(_DWORD *)(a1 + 36);
            }
            *(_DWORD *)(a1 + 36) = v29 + 1;
            operator new();
          }
          v31 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = v30 + 1;
          v32 = *(_QWORD *)(v31 + 8 * v30);
          v53 = 0;
          v33 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v33 >= *((_QWORD *)this + 2) || *v33 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v53))return 0;
          }
          else
          {
            v53 = *v33;
            *((_QWORD *)this + 1) = v33 + 1;
          }
          v34 = *((_DWORD *)this + 14);
          v35 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v34 + 1;
          if (v34 >= v35)
            return 0;
          v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v53);
          if (!sub_100E8FA84(v32, this, v37) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
          v38 = *((_DWORD *)this + 14);
          v21 = __OFSUB__(v38, 1);
          v39 = v38 - 1;
          if (v39 < 0 == v21)
            *((_DWORD *)this + 14) = v39;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
          if ((unint64_t)v28 >= v14)
            goto LABEL_2;
          v40 = *v28;
        }
        while (v40 == 34);
        if (v40 != 40)
          continue;
        v15 = v28 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_72:
        v53 = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v53);
          if (!(_DWORD)result)
            return result;
          v41 = v53;
        }
        else
        {
          v41 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        if (v41 <= 2)
        {
          *(_DWORD *)(a1 + 72) |= 0x10u;
          *(_DWORD *)(a1 + 64) = v41;
        }
        v42 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v42 >= *((_QWORD *)this + 2) || *v42 != 50)
          continue;
        *((_QWORD *)this + 1) = v42 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 72) |= 0x20u;
        v43 = *(void **)(a1 + 48);
        if (v43 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v43);
        if (!(_DWORD)result)
          return result;
        v44 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v44 >= *((_QWORD *)this + 2) || *v44 != 58)
          continue;
        *((_QWORD *)this + 1) = v44 + 1;
LABEL_88:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        v45 = *(_QWORD *)(a1 + 56);
        if (!v45)
          operator new();
        v53 = 0;
        v46 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v53))return 0;
        }
        else
        {
          v53 = *v46;
          *((_QWORD *)this + 1) = v46 + 1;
        }
        v47 = *((_DWORD *)this + 14);
        v48 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v47 + 1;
        if (v47 >= v48)
          return 0;
        v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v53);
        if (!sub_100E911D0(v45, this, v50) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
        v51 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v51, 1);
        v52 = v51 - 1;
        if (v52 < 0 == v21)
          *((_DWORD *)this + 14) = v52;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_46;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_54;
        goto LABEL_26;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_72;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_82;
        goto LABEL_26;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        goto LABEL_88;
      default:
        v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_100E92034()
{
  operator delete();
}

uint64_t sub_100E92058(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    v9 = *(_QWORD *)(result + 8);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311770 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v9, a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 16), (BOOL)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 4) != 0)
LABEL_4:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
LABEL_5:
  if (*(int *)(v5 + 32) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 32));
  }
  v8 = *(_DWORD *)(v5 + 72);
  if ((v8 & 0x10) == 0)
  {
    if ((v8 & 0x20) == 0)
      goto LABEL_10;
LABEL_18:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(6, *(_QWORD *)(v5 + 48), a2);
    if ((*(_DWORD *)(v5 + 72) & 0x40) == 0)
      return result;
    goto LABEL_19;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 64), (int)a2, a4);
  v8 = *(_DWORD *)(v5 + 72);
  if ((v8 & 0x20) != 0)
    goto LABEL_18;
LABEL_10:
  if ((v8 & 0x40) == 0)
    return result;
LABEL_19:
  v10 = *(_QWORD *)(v5 + 56);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311770 + 56);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v10, a2, a4);
}

uint64_t sub_100E92184(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  int v29;

  LOBYTE(v3) = *(_BYTE *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_46;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311770 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C8BC(v6);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    else
      v9 = 1;
    v4 = v8 + v9 + 1;
    v3 = *(_DWORD *)(a1 + 72);
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 2) != 0)
    v5 = v4 + 2;
  else
    v5 = v4;
  if ((v3 & 4) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v10 & 0x80000000) != 0)
    {
      v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      v3 = *(_DWORD *)(a1 + 72);
    }
    else
    {
      v11 = 2;
    }
    v5 += v11;
    if ((v3 & 0x10) == 0)
    {
LABEL_16:
      if ((v3 & 0x20) == 0)
        goto LABEL_17;
      goto LABEL_31;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_16;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = 11;
  }
  else if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    v3 = *(_DWORD *)(a1 + 72);
  }
  else
  {
    v13 = 2;
  }
  v5 += v13;
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0)
      goto LABEL_46;
    goto LABEL_40;
  }
LABEL_31:
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = v15;
  v17 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = v17;
  if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v17 = *(_QWORD *)(v14 + 8);
    v3 = *(_DWORD *)(a1 + 72);
    v16 = *(_BYTE *)(v14 + 23);
  }
  else
  {
    v19 = 1;
  }
  if (v16 < 0)
    v15 = v17;
  v5 += v19 + v15 + 1;
  if ((v3 & 0x40) != 0)
  {
LABEL_40:
    v20 = *(_QWORD *)(a1 + 56);
    if (!v20)
      v20 = *(_QWORD *)(qword_102311770 + 56);
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E913BC(v20, a2);
    v22 = (int)v21;
    if (v21 >= 0x80)
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    else
      v23 = 1;
    v5 += v22 + v23 + 1;
  }
LABEL_46:
  v24 = *(_DWORD *)(a1 + 32);
  v25 = (v24 + v5);
  if (v24 >= 1)
  {
    v26 = 0;
    do
    {
      v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E8FE9C(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v26), a2);
      v28 = (int)v27;
      if (v27 >= 0x80)
        v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2);
      else
        v29 = 1;
      v25 = (v28 + v25 + v29);
      ++v26;
    }
    while (v26 < *(int *)(a1 + 32));
  }
  *(_DWORD *)(a1 + 68) = v25;
  return v25;
}

void sub_100E92380(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9148C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E923CC()
{
  return 1;
}

_QWORD *sub_100E923D4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SystemNotification.NotificationData");
}

void sub_100E923E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 1948);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 5)
        sub_101930620();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311760 + 16);
      sub_100E9148C(v8, v9);
    }
  }
}

void sub_100E92518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E92530(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218EC68;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311760 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E92584(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E92530(a1);
  operator delete();
}

void sub_100E925A8()
{
  operator new();
}

uint64_t sub_100E925E0(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = sub_100E9190C(result);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E9261C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E919EC(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E92908(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311760 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E92990(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311760 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E92184(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E92A88(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E923E4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E92AD4()
{
  return 1;
}

_QWORD *sub_100E92ADC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SystemNotification");
}

void sub_100E92AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  int v16;
  char v17;
  _BYTE v18[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v18, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 2381);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  v5 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v5)
    goto LABEL_23;
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 44) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311780 + 8);
    sub_10045CE64(v6, v7);
    v5 = *(_DWORD *)(a2 + 44);
  }
  if ((v5 & 2) != 0)
  {
    *(_DWORD *)(a1 + 44) |= 2u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311780 + 16);
    sub_10045D4E8(v8, v9);
    v5 = *(_DWORD *)(a2 + 44);
  }
  if ((v5 & 4) != 0)
  {
    v12 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_BYTE *)(a1 + 24) = v12;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_18:
      if ((v5 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_28;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_18;
  }
  v13 = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(_BYTE *)(a1 + 25) = v13;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20) == 0)
      goto LABEL_20;
LABEL_29:
    v15 = *(_BYTE *)(a2 + 27);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_BYTE *)(a1 + 27) = v15;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x40) == 0)
    {
LABEL_21:
      if ((v5 & 0x80) == 0)
        goto LABEL_23;
      goto LABEL_22;
    }
    goto LABEL_30;
  }
LABEL_28:
  v14 = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  *(_BYTE *)(a1 + 26) = v14;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_29;
LABEL_20:
  if ((v5 & 0x40) == 0)
    goto LABEL_21;
LABEL_30:
  v16 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) |= 0x40u;
  *(_DWORD *)(a1 + 28) = v16;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x80) != 0)
  {
LABEL_22:
    v10 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x80u;
    *(_DWORD *)(a1 + 32) = v10;
    v5 = *(_DWORD *)(a2 + 44);
  }
LABEL_23:
  if ((v5 & 0x100) != 0)
  {
    v11 = *(_BYTE *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_BYTE *)(a1 + 36) = v11;
  }
}

void sub_100E92CFC()
{
  operator delete();
}

_QWORD *sub_100E92D48(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311780 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100E92DA4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218ECE0;
  sub_100E92D48(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E92DD4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218ECE0;
  sub_100E92D48(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E92E18()
{
  operator new();
}

uint64_t sub_100E92E58(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 44);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_10045D02C(result);
        v2 = *(_DWORD *)(v1 + 44);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
      {
        result = sub_10045D6F0(result);
        v2 = *(_DWORD *)(v1 + 44);
      }
    }
    *(_DWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 24) = 0;
  }
  if ((v2 & 0xFF00) != 0)
    *(_BYTE *)(v1 + 36) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100E92EC0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t result;
  unsigned int v38;
  _BYTE *v39;
  unsigned int v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int v44;
  _BYTE *v45;
  unsigned int v46;
  _BYTE *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_29;
        *(_DWORD *)(a1 + 44) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v50 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50))return 0;
        }
        else
        {
          v50 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v18 = *((_DWORD *)this + 14);
        v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 >= v19)
          return 0;
        v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v50);
        if (!sub_10045D044(v8, this, v21) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
        v22 = *((_DWORD *)this + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)this + 14) = v24;
        v25 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 != 18)
          continue;
        *((_QWORD *)this + 1) = v25 + 1;
        goto LABEL_42;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_29;
LABEL_42:
        *(_DWORD *)(a1 + 44) |= 2u;
        v26 = *(_QWORD *)(a1 + 16);
        if (!v26)
          operator new();
        v50 = 0;
        v27 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50))return 0;
        }
        else
        {
          v50 = *v27;
          *((_QWORD *)this + 1) = v27 + 1;
        }
        v28 = *((_DWORD *)this + 14);
        v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 < v29)
        {
          v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v50);
          if (sub_10045D714(v26, this, v31))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
              v32 = *((_DWORD *)this + 14);
              v23 = __OFSUB__(v32, 1);
              v33 = v32 - 1;
              if (v33 < 0 == v23)
                *((_DWORD *)this + 14) = v33;
              v34 = (_BYTE *)*((_QWORD *)this + 1);
              v10 = *((_QWORD *)this + 2);
              if ((unint64_t)v34 < v10 && *v34 == 24)
              {
                v11 = v34 + 1;
                *((_QWORD *)this + 1) = v11;
LABEL_56:
                v50 = 0;
                if ((unint64_t)v11 >= v10 || *v11 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                  if (!(_DWORD)result)
                    return result;
                  v35 = v50;
                  v36 = (_BYTE *)*((_QWORD *)this + 1);
                  v10 = *((_QWORD *)this + 2);
                }
                else
                {
                  v35 = *v11;
                  v36 = v11 + 1;
                  *((_QWORD *)this + 1) = v36;
                }
                *(_BYTE *)(a1 + 24) = v35 != 0;
                *(_DWORD *)(a1 + 44) |= 4u;
                if ((unint64_t)v36 < v10 && *v36 == 32)
                {
                  v13 = v36 + 1;
                  *((_QWORD *)this + 1) = v13;
LABEL_64:
                  v50 = 0;
                  if ((unint64_t)v13 >= v10 || *v13 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                    if (!(_DWORD)result)
                      return result;
                    v38 = v50;
                    v39 = (_BYTE *)*((_QWORD *)this + 1);
                    v10 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    v38 = *v13;
                    v39 = v13 + 1;
                    *((_QWORD *)this + 1) = v39;
                  }
                  *(_BYTE *)(a1 + 25) = v38 != 0;
                  *(_DWORD *)(a1 + 44) |= 8u;
                  if ((unint64_t)v39 < v10 && *v39 == 40)
                  {
                    v12 = v39 + 1;
                    *((_QWORD *)this + 1) = v12;
LABEL_72:
                    v50 = 0;
                    if ((unint64_t)v12 >= v10 || *v12 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                      if (!(_DWORD)result)
                        return result;
                      v40 = v50;
                      v41 = (_BYTE *)*((_QWORD *)this + 1);
                      v10 = *((_QWORD *)this + 2);
                    }
                    else
                    {
                      v40 = *v12;
                      v41 = v12 + 1;
                      *((_QWORD *)this + 1) = v41;
                    }
                    *(_BYTE *)(a1 + 26) = v40 != 0;
                    *(_DWORD *)(a1 + 44) |= 0x10u;
                    if ((unint64_t)v41 < v10 && *v41 == 48)
                    {
                      v14 = v41 + 1;
                      *((_QWORD *)this + 1) = v14;
LABEL_80:
                      v50 = 0;
                      if ((unint64_t)v14 >= v10 || *v14 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                        if (!(_DWORD)result)
                          return result;
                        v42 = v50;
                        v43 = (_BYTE *)*((_QWORD *)this + 1);
                        v10 = *((_QWORD *)this + 2);
                      }
                      else
                      {
                        v42 = *v14;
                        v43 = v14 + 1;
                        *((_QWORD *)this + 1) = v43;
                      }
                      *(_BYTE *)(a1 + 27) = v42 != 0;
                      *(_DWORD *)(a1 + 44) |= 0x20u;
                      if ((unint64_t)v43 < v10 && *v43 == 56)
                      {
                        v15 = v43 + 1;
                        *((_QWORD *)this + 1) = v15;
LABEL_88:
                        v50 = 0;
                        if ((unint64_t)v15 >= v10 || *v15 < 0)
                        {
                          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                          if (!(_DWORD)result)
                            return result;
                          v44 = v50;
                          v45 = (_BYTE *)*((_QWORD *)this + 1);
                          v10 = *((_QWORD *)this + 2);
                        }
                        else
                        {
                          v44 = *v15;
                          v45 = v15 + 1;
                          *((_QWORD *)this + 1) = v45;
                        }
                        *(_DWORD *)(a1 + 28) = v44;
                        *(_DWORD *)(a1 + 44) |= 0x40u;
                        if ((unint64_t)v45 < v10 && *v45 == 64)
                        {
                          v16 = v45 + 1;
                          *((_QWORD *)this + 1) = v16;
LABEL_96:
                          v50 = 0;
                          if ((unint64_t)v16 >= v10 || *v16 < 0)
                          {
                            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                            if (!(_DWORD)result)
                              return result;
                            v46 = v50;
                            v47 = (_BYTE *)*((_QWORD *)this + 1);
                            v10 = *((_QWORD *)this + 2);
                          }
                          else
                          {
                            v46 = *v16;
                            v47 = v16 + 1;
                            *((_QWORD *)this + 1) = v47;
                          }
                          *(_DWORD *)(a1 + 32) = v46;
                          *(_DWORD *)(a1 + 44) |= 0x80u;
                          if ((unint64_t)v47 < v10 && *v47 == 72)
                          {
                            v17 = v47 + 1;
                            *((_QWORD *)this + 1) = v17;
LABEL_104:
                            v50 = 0;
                            if ((unint64_t)v17 >= v10 || *v17 < 0)
                            {
                              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                              if (!(_DWORD)result)
                                return result;
                              v48 = v50;
                              v49 = (unsigned __int8 *)*((_QWORD *)this + 1);
                              v10 = *((_QWORD *)this + 2);
                            }
                            else
                            {
                              v48 = *v17;
                              v49 = (unsigned __int8 *)(v17 + 1);
                              *((_QWORD *)this + 1) = v49;
                            }
                            *(_BYTE *)(a1 + 36) = v48 != 0;
                            *(_DWORD *)(a1 + 44) |= 0x100u;
                            if (v49 == (unsigned __int8 *)v10
                              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                            {
                              *((_DWORD *)this + 8) = 0;
                              result = 1;
                              *((_BYTE *)this + 36) = 1;
                              return result;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_56;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_64;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v12 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_72;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v14 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_80;
      case 7u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v15 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_88;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v16 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_96;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v17 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_104;
      default:
        v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_100E93504()
{
  operator delete();
}

uint64_t sub_100E9353C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311780 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311780 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 25), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 26), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 27), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 28), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 36), (BOOL)a2, a4);
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 32), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 36), (BOOL)a2, a4);
  return result;
}

uint64_t sub_100E9367C(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_41;
  }
  if ((v3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311780 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045D3C4(v6, a2);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    else
      v9 = 1;
    v4 = v8 + v9 + 1;
    v3 = *(_DWORD *)(a1 + 44);
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = 0;
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v10 = *(_QWORD *)(a1 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311780 + 16);
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045DB84(v10, a2);
    v12 = (int)v11;
    if (v11 >= 0x80)
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    else
      v13 = 1;
    v4 += v12 + v13 + 1;
    v3 = *(_DWORD *)(a1 + 44);
  }
LABEL_18:
  v14 = v4 + 2;
  if ((v3 & 4) == 0)
    v14 = v4;
  if ((v3 & 8) != 0)
    v14 += 2;
  if ((v3 & 0x10) != 0)
    v14 += 2;
  if ((v3 & 0x20) != 0)
    v5 = v14 + 2;
  else
    v5 = v14;
  if ((v3 & 0x40) != 0)
  {
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v15 & 0x80000000) != 0)
    {
      v16 = 11;
    }
    else if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v16 = 2;
    }
    v5 += v16;
  }
  if ((v3 & 0x80) != 0)
  {
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v17 & 0x80000000) != 0)
    {
      v18 = 11;
    }
    else if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v18 = 2;
    }
    v5 += v18;
  }
LABEL_41:
  if ((v3 & 0x100) != 0)
    result = v5 + 2;
  else
    result = v5;
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

void sub_100E937F4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E92AEC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E93840()
{
  return 1;
}

_QWORD *sub_100E93848@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.DaemonStatusNotification.NotificationData");
}

void sub_100E93858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 2655);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (!sub_10045DCAC(v7))
        sub_101930648();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311778 + 16);
      sub_100E92AEC(v8, v9);
    }
  }
}

void sub_100E93980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E93998(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218ED58;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311778 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E939EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E93998(a1);
  operator delete();
}

void sub_100E93A10()
{
  operator new();
}

uint64_t sub_100E93A48(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = sub_100E92E58(result);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E93A84(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (sub_10045DCAC(v15))
        {
          if (!sub_10045DCAC(v15))
            sub_101930648();
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_37:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E92EC0(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E93D6C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311778 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E93DF4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311778 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9367C(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E93EEC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E93858(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E93F38()
{
  return 1;
}

_QWORD *sub_100E93F40@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.DaemonStatusNotification");
}

void sub_100E93F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 2852);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (!sub_10002A324(v5))
      sub_101930670();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_100E93FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E94000(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218EDD0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E94010(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218EDD0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E94040()
{
  operator new();
}

uint64_t sub_100E94078(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100E9408C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v10 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!(_DWORD)result)
          return result;
        v8 = v10;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (sub_10002A324(v8))
      {
        if (!sub_10002A324(v8))
          sub_101930670();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100E941C4(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100E941E0(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100E94238(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E93F50(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E94284()
{
  return 1;
}

_QWORD *sub_100E9428C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.ClientManagerNotification.NotificationData");
}

void sub_100E9429C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 3092);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 3)
        sub_101930698();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311788 + 16);
      sub_100E93F50(v8, v9);
    }
  }
}

void sub_100E943B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E943C8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218EE48;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311788 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E9441C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E943C8(a1);
  operator delete();
}

void sub_100E94440()
{
  operator new();
}

uint64_t sub_100E94478(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16))
          *(_DWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100E944A8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E9408C(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E94774(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311788 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E947FC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311788 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E941E0(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E948F4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9429C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E94940()
{
  return 1;
}

_QWORD *sub_100E94948@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.ClientManagerNotification");
}

void sub_100E94958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  _BYTE v16[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 3464);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_BYTE *)(a2 + 28);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_BYTE *)(a1 + 28) = v6;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 24);
      if (!sub_10021E0B4(v7))
        sub_1019019E0();
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 24) = v7;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 4u;
      v8 = *(_QWORD *)(a1 + 8);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 8);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023117A0 + 8);
      sub_10046B29C(v8, v9);
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      v10 = *(_QWORD *)(a1 + 16);
      if (!v10)
        operator new();
      v11 = *(_QWORD *)(a2 + 16);
      if (!v11)
        v11 = *(_QWORD *)(qword_1023117A0 + 16);
      sub_10046B79C(v10, v11);
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 0x10) != 0)
    {
      v13 = *(_BYTE *)(a2 + 29);
      *(_DWORD *)(a1 + 36) |= 0x10u;
      *(_BYTE *)(a1 + 29) = v13;
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 0x20) == 0)
      {
LABEL_23:
        if ((v5 & 0x40) == 0)
          return;
        goto LABEL_24;
      }
    }
    else if ((v5 & 0x20) == 0)
    {
      goto LABEL_23;
    }
    v14 = *(_BYTE *)(a2 + 30);
    *(_DWORD *)(a1 + 36) |= 0x20u;
    *(_BYTE *)(a1 + 30) = v14;
    if ((*(_DWORD *)(a2 + 36) & 0x40) != 0)
    {
LABEL_24:
      v12 = *(_BYTE *)(a2 + 31);
      *(_DWORD *)(a1 + 36) |= 0x40u;
      *(_BYTE *)(a1 + 31) = v12;
    }
  }
}

void sub_100E94B30()
{
  operator delete();
}

_QWORD *sub_100E94B7C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_1023117A0 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100E94BD8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218EEC0;
  sub_100E94B7C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E94C08(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218EEC0;
  sub_100E94B7C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E94C4C()
{
  operator new();
}

uint64_t sub_100E94C8C(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 36);
  if ((_BYTE)v2)
  {
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_10046B428(result);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
        result = sub_10046B9F8(result);
    }
    *(_WORD *)(v1 + 29) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100E94CE8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t result;
  unsigned int v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v45 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
          if (!(_DWORD)result)
            return result;
          v10 = v45;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_BYTE *)(a1 + 28) = v10 != 0;
        *(_DWORD *)(a1 + 36) |= 1u;
        if ((unint64_t)v11 < v8 && *v11 == 16)
        {
          v12 = v11 + 1;
          *((_QWORD *)this + 1) = v12;
          goto LABEL_32;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_32:
        v45 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
          if (!(_DWORD)result)
            return result;
          v18 = v45;
        }
        else
        {
          v18 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (sub_10021E0B4(v18))
        {
          if (!sub_10021E0B4(v18))
            sub_1019019E0();
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 24) = v18;
        }
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 26)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 36) |= 4u;
        v20 = *(_QWORD *)(a1 + 8);
        if (!v20)
          operator new();
        v45 = 0;
        v21 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45))return 0;
        }
        else
        {
          v45 = *v21;
          *((_QWORD *)this + 1) = v21 + 1;
        }
        v22 = *((_DWORD *)this + 14);
        v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23)
          return 0;
        v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
        if (!sub_10046B464(v20, this, v25) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        v26 = *((_DWORD *)this + 14);
        v27 = __OFSUB__(v26, 1);
        v28 = v26 - 1;
        if (v28 < 0 == v27)
          *((_DWORD *)this + 14) = v28;
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v29 >= *((_QWORD *)this + 2) || *v29 != 34)
          continue;
        *((_QWORD *)this + 1) = v29 + 1;
LABEL_57:
        *(_DWORD *)(a1 + 36) |= 8u;
        v30 = *(_QWORD *)(a1 + 16);
        if (!v30)
          operator new();
        v45 = 0;
        v31 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v31 >= *((_QWORD *)this + 2) || *v31 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45))return 0;
        }
        else
        {
          v45 = *v31;
          *((_QWORD *)this + 1) = v31 + 1;
        }
        v32 = *((_DWORD *)this + 14);
        v33 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v32 + 1;
        if (v32 < v33)
        {
          v34 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
          if (sub_10046BA74(v30, this, v35))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v34);
              v36 = *((_DWORD *)this + 14);
              v27 = __OFSUB__(v36, 1);
              v37 = v36 - 1;
              if (v37 < 0 == v27)
                *((_DWORD *)this + 14) = v37;
              v38 = (_BYTE *)*((_QWORD *)this + 1);
              v13 = *((_QWORD *)this + 2);
              if ((unint64_t)v38 < v13 && *v38 == 40)
              {
                v14 = v38 + 1;
                *((_QWORD *)this + 1) = v14;
LABEL_71:
                v45 = 0;
                if ((unint64_t)v14 >= v13 || *v14 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
                  if (!(_DWORD)result)
                    return result;
                  v39 = v45;
                  v40 = (_BYTE *)*((_QWORD *)this + 1);
                  v13 = *((_QWORD *)this + 2);
                }
                else
                {
                  v39 = *v14;
                  v40 = v14 + 1;
                  *((_QWORD *)this + 1) = v40;
                }
                *(_BYTE *)(a1 + 29) = v39 != 0;
                *(_DWORD *)(a1 + 36) |= 0x10u;
                if ((unint64_t)v40 < v13 && *v40 == 48)
                {
                  v15 = v40 + 1;
                  *((_QWORD *)this + 1) = v15;
LABEL_79:
                  v45 = 0;
                  if ((unint64_t)v15 >= v13 || *v15 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
                    if (!(_DWORD)result)
                      return result;
                    v41 = v45;
                    v42 = (_BYTE *)*((_QWORD *)this + 1);
                    v13 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    v41 = *v15;
                    v42 = v15 + 1;
                    *((_QWORD *)this + 1) = v42;
                  }
                  *(_BYTE *)(a1 + 30) = v41 != 0;
                  *(_DWORD *)(a1 + 36) |= 0x20u;
                  if ((unint64_t)v42 < v13 && *v42 == 56)
                  {
                    v16 = v42 + 1;
                    *((_QWORD *)this + 1) = v16;
LABEL_87:
                    v45 = 0;
                    if ((unint64_t)v16 >= v13 || *v16 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
                      if (!(_DWORD)result)
                        return result;
                      v43 = v45;
                      v44 = (unsigned __int8 *)*((_QWORD *)this + 1);
                      v13 = *((_QWORD *)this + 2);
                    }
                    else
                    {
                      v43 = *v16;
                      v44 = (unsigned __int8 *)(v16 + 1);
                      *((_QWORD *)this + 1) = v44;
                    }
                    *(_BYTE *)(a1 + 31) = v43 != 0;
                    *(_DWORD *)(a1 + 36) |= 0x40u;
                    if (v44 == (unsigned __int8 *)v13
                      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      result = 1;
                      *((_BYTE *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_43;
        goto LABEL_23;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_57;
        goto LABEL_23;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_71;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v15 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_79;
      case 7u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v16 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_87;
      default:
        v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_100E95250()
{
  operator delete();
}

uint64_t sub_100E95288(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 28), (BOOL)a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 24), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023117A0 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_14:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023117A0 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 31), (BOOL)a2, a4);
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 30), (BOOL)a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 31), (BOOL)a2, a4);
  return result;
}

uint64_t sub_100E95390(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  uint64_t v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v3 = *(_DWORD *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_32;
  }
  v4 = 2 * (v3 & 1);
  if ((v3 & 2) == 0)
  {
    if ((v3 & 4) == 0)
      goto LABEL_4;
LABEL_13:
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023117A0 + 8);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002145E4(v8, a2);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    else
      v11 = 1;
    v4 += v10 + v11 + 1;
    v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 8) == 0)
      goto LABEL_25;
    goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v7 = 2;
  }
  v4 += v7;
  if ((v3 & 4) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v3 & 8) != 0)
  {
LABEL_19:
    v12 = *(_QWORD *)(a1 + 16);
    if (!v12)
      v12 = *(_QWORD *)(qword_1023117A0 + 16);
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100214B2C(v12, a2);
    v15 = (int)v13;
    if (v13 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, v14);
    else
      v16 = 1;
    v4 += v15 + v16 + 1;
    v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_25:
  v17 = v4 + 2;
  if ((v3 & 0x10) == 0)
    v17 = v4;
  if ((v3 & 0x20) != 0)
    v17 += 2;
  if ((v3 & 0x40) != 0)
    result = v17 + 2;
  else
    result = v17;
LABEL_32:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_100E954C4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E94958(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E95510()
{
  return 1;
}

_QWORD *sub_100E95518@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.WifiServiceNotification.NotificationData");
}

void sub_100E95528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 3728);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (!sub_10021E0B4(v7))
        sub_1019306C0();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311798 + 16);
      sub_100E94958(v8, v9);
    }
  }
}

void sub_100E95650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E95668(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218EF38;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311798 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E956BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E95668(a1);
  operator delete();
}

void sub_100E956E0()
{
  operator new();
}

uint64_t sub_100E95718(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = sub_100E94C8C(result);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E95754(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (sub_10021E0B4(v15))
        {
          if (!sub_10021E0B4(v15))
            sub_1019306C0();
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_37:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E94CE8(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E95A3C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311798 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E95AC4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311798 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E95390(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E95BBC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E95528(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E95C08()
{
  return 1;
}

_QWORD *sub_100E95C10@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.WifiServiceNotification");
}

void sub_100E95C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 3923);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (!sub_10008D1F0(v5))
      sub_1019306E8();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_100E95CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E95CD0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218EFB0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E95CE0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218EFB0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E95D10()
{
  operator new();
}

uint64_t sub_100E95D48(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100E95D5C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v10 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!(_DWORD)result)
          return result;
        v8 = v10;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (sub_10008D1F0(v8))
      {
        if (!sub_10008D1F0(v8))
          sub_1019306E8();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100E95E94(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100E95EB0(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100E95F08(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E95C20(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E95F54()
{
  return 1;
}

_QWORD *sub_100E95F5C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.DataProtectionManagerNotification.NotificationData");
}

void sub_100E95F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 4163);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2)
        sub_101930710();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023117A8 + 16);
      sub_100E95C20(v8, v9);
    }
  }
}

void sub_100E96080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E96098(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F028;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023117A8 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E960EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E96098(a1);
  operator delete();
}

void sub_100E96110()
{
  operator new();
}

uint64_t sub_100E96148(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16))
          *(_DWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100E96178(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E95D5C(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E96444(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023117A8 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E964CC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023117A8 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E95EB0(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E965C4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E95F6C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E96610()
{
  return 1;
}

_QWORD *sub_100E96618@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.DataProtectionManagerNotification");
}

void sub_100E96628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 4357);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_BYTE *)(a1 + 8) = v5;
  }
}

void sub_100E966B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E966C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F0A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E966D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F0A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E96708()
{
  operator new();
}

uint64_t sub_100E96744(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100E96758(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      v7 = *((_QWORD *)this + 2);
      if ((unint64_t)v8 >= v7 || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v9 = v12;
        v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v7 = *((_QWORD *)this + 2);
      }
      else
      {
        v9 = *v8;
        v10 = (unsigned __int8 *)(v8 + 1);
        *((_QWORD *)this + 1) = v10;
      }
      *(_BYTE *)(a1 + 8) = v9 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if (v10 == (unsigned __int8 *)v7 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100E96874(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100E96890(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 16))
    v1 = 2 * (*(_DWORD *)(a1 + 16) & 1u);
  else
    v1 = 0;
  *(_DWORD *)(a1 + 12) = v1;
  return v1;
}

void sub_100E968AC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E96628(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E968F8()
{
  return 1;
}

_QWORD *sub_100E96900@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.BluetoothServiceNotification.NotificationData");
}

void sub_100E96910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 4597);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 4)
        sub_10191983C();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023117B8 + 16);
      sub_100E96628(v8, v9);
    }
  }
}

void sub_100E96A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E96A40(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F118;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023117B8 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E96A94(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E96A40(a1);
  operator delete();
}

void sub_100E96AB8()
{
  operator new();
}

uint64_t sub_100E96AF0(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16))
          *(_BYTE *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100E96B20(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 3)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E96758(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E96DF0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023117B8 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E96E78(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023117B8 + 16);
    if (*(_DWORD *)(v8 + 16))
      v9 = 2 * (*(_DWORD *)(v8 + 16) & 1);
    else
      v9 = 0;
    *(_DWORD *)(v8 + 12) = v9;
    v4 = (v4 + v9 + 2);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E96F58(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E96910(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E96FA4()
{
  return 1;
}

_QWORD *sub_100E96FAC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.BluetoothServiceNotification");
}

void sub_100E96FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 4787);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_BYTE *)(a1 + 8) = v5;
  }
}

void sub_100E97044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9705C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F190;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E9706C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F190;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E9709C()
{
  operator new();
}

uint64_t sub_100E970D8(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100E970EC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      v7 = *((_QWORD *)this + 2);
      if ((unint64_t)v8 >= v7 || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v9 = v12;
        v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v7 = *((_QWORD *)this + 2);
      }
      else
      {
        v9 = *v8;
        v10 = (unsigned __int8 *)(v8 + 1);
        *((_QWORD *)this + 1) = v10;
      }
      *(_BYTE *)(a1 + 8) = v9 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if (v10 == (unsigned __int8 *)v7 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100E97208(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100E97224(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 16))
    v1 = 2 * (*(_DWORD *)(a1 + 16) & 1u);
  else
    v1 = 0;
  *(_DWORD *)(a1 + 12) = v1;
  return v1;
}

void sub_100E97240(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E96FBC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9728C()
{
  return 1;
}

_QWORD *sub_100E97294@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.CompanionNotifierNotification.NotificationData");
}

void sub_100E972A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 5027);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2)
        sub_101919864();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023117C8 + 16);
      sub_100E96FBC(v8, v9);
    }
  }
}

void sub_100E973BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E973D4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F208;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023117C8 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E97428(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E973D4(a1);
  operator delete();
}

void sub_100E9744C()
{
  operator new();
}

uint64_t sub_100E97484(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16))
          *(_BYTE *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100E974B4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E970EC(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E97784(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023117C8 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E9780C(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023117C8 + 16);
    if (*(_DWORD *)(v8 + 16))
      v9 = 2 * (*(_DWORD *)(v8 + 16) & 1);
    else
      v9 = 0;
    *(_DWORD *)(v8 + 12) = v9;
    v4 = (v4 + v9 + 2);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E978EC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E972A4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E97938()
{
  return 1;
}

_QWORD *sub_100E97940@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.CompanionNotifierNotification");
}

void sub_100E97950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 5233);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_1023117E0 + 8);
    sub_10044F770(v5, v6);
  }
}

void sub_100E97A20()
{
  operator delete();
}

void sub_100E97A58(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F280;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023117E0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E97AAC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E97A58(a1);
  operator delete();
}

void sub_100E97AD0()
{
  operator new();
}

uint64_t sub_100E97B08(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_10044FC3C(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100E97B3C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_10044FCB8(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

void sub_100E97CD8()
{
  operator delete();
}

uint64_t sub_100E97CFC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_1023117E0 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100E97D28(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_1023117E0 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100450828(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100E97D94(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E97950(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E97DE0()
{
  return 1;
}

_QWORD *sub_100E97DE8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MotionStateNotification.NotificationData");
}

void sub_100E97DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 5473);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 5)
        sub_10191988C();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023117D8 + 16);
      sub_100E97950(v8, v9);
    }
  }
}

void sub_100E97F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E97F24(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F2F8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023117D8 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E97F78(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E97F24(a1);
  operator delete();
}

void sub_100E97F9C()
{
  operator new();
}

uint64_t sub_100E97FD4(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v3 + 8);
          if (result)
            result = sub_10044FC3C(result);
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E98024(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E97B3C(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E982F0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023117D8 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E98378(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023117D8 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E97D28(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E98470(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E97DF8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E984BC()
{
  return 1;
}

_QWORD *sub_100E984C4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MotionStateNotification");
}

void sub_100E984D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 5673);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_1023117F0 + 8);
    sub_10045141C(v5, v6);
  }
}

void sub_100E985A4()
{
  operator delete();
}

void sub_100E985DC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F370;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023117F0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E98630(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E985DC(a1);
  operator delete();
}

void sub_100E98654()
{
  operator new();
}

uint64_t sub_100E9868C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100451678(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100E986C0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_1004516B4(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

void sub_100E9885C()
{
  operator delete();
}

uint64_t sub_100E98880(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_1023117F0 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100E988AC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_1023117F0 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100451AA4(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100E98918(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E984D4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E98964()
{
  return 1;
}

_QWORD *sub_100E9896C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MotionStateObserverNotification.NotificationData");
}

void sub_100E9897C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 5913);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2)
        sub_101930738();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023117E8 + 16);
      sub_100E984D4(v8, v9);
    }
  }
}

void sub_100E98A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E98AA8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F3E8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023117E8 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E98AFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E98AA8(a1);
  operator delete();
}

void sub_100E98B20()
{
  operator new();
}

uint64_t sub_100E98B58(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v3 + 8);
          if (result)
            result = sub_100451678(result);
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E98BA8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E986C0(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E98E74(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023117E8 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E98EFC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023117E8 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E988AC(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E98FF4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9897C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E99040()
{
  return 1;
}

_QWORD *sub_100E99048@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MotionStateObserverNotification");
}

void sub_100E99058(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 6113);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_DWORD **)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311800 + 8);
    sub_10045F79C(v5, v6);
  }
}

void sub_100E99128()
{
  operator delete();
}

void sub_100E99160(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F460;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311800 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E991B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E99160(a1);
  operator delete();
}

void sub_100E991D8()
{
  operator new();
}

uint64_t sub_100E99210(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_10045F924(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100E99244(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  _DWORD *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_DWORD **)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_10045F93C(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

void sub_100E993E0()
{
  operator delete();
}

uint64_t sub_100E99404(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311800 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100E99430(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102311800 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045FB4C(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100E9949C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E99058(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E994E8()
{
  return 1;
}

_QWORD *sub_100E994F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SignalEnvironmentNotification.NotificationData");
}

void sub_100E99500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 6353);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2)
        sub_1019198B4();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023117F8 + 16);
      sub_100E99058(v8, v9);
    }
  }
}

void sub_100E99614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9962C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F4D8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023117F8 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E99680(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E9962C(a1);
  operator delete();
}

void sub_100E996A4()
{
  operator new();
}

uint64_t sub_100E996DC(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v3 + 8);
          if (result)
            result = sub_10045F924(result);
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E9972C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E99244(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E999F8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023117F8 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E99A80(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023117F8 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E99430(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E99B78(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E99500(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E99BC4()
{
  return 1;
}

_QWORD *sub_100E99BCC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SignalEnvironmentNotification");
}

void sub_100E99BDC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 6581);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 3)
        sub_101930760();
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_100E99C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E99CA8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F550;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E99CB8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F550;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E99CE8()
{
  operator new();
}

uint64_t sub_100E99D20(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100E99D34(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v15 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
        if (!(_DWORD)result)
          return result;
        v11 = v15;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      a1[2] = v11;
      a1[5] |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_23:
        v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
        }
        else
        {
          v13 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v13 <= 2)
        {
          a1[5] |= 2u;
          a1[3] = v13;
        }
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100E99EE0(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_100E99F38(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0)
        goto LABEL_19;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      v7 = 2;
    }
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_100E99FE0(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E99BDC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9A02C()
{
  return 1;
}

_QWORD *sub_100E9A034@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.TelephonyServiceNotification");
}

void sub_100E9A044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const std::string *v5;
  std::string *v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 6783);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v5 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    v6 = *(std::string **)(a1 + 8);
    if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v6, v5);
  }
}

void sub_100E9A108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9A120(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F5C8;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E9A150(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F5C8;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E9A194()
{
  operator new();
}

uint64_t sub_100E9A1D4(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v1 = *(_QWORD *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(_BYTE **)v1 = 0;
        *(_QWORD *)(v1 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v1 = 0;
        *(_BYTE *)(v1 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100E9A218(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  void *v7;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(void **)(a1 + 8);
      if (v7 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v7);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100E9A334(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(result + 8), a2);
  return result;
}

uint64_t sub_100E9A350(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = v7;
    if (v8 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v7 = *(_QWORD *)(v4 + 8);
      v9 = v10 + 1;
      v6 = *(_BYTE *)(v4 + 23);
    }
    else
    {
      v9 = 2;
    }
    if (v6 < 0)
      v5 = v7;
    result = (v9 + v5);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100E9A3CC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9A044(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9A418()
{
  return 1;
}

_QWORD *sub_100E9A420@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.AppMonitorNotification.NotificationData");
}

void sub_100E9A430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 7023);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 6)
        sub_101930788();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311810 + 16);
      sub_100E9A044(v8, v9);
    }
  }
}

void sub_100E9A54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9A564(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F640;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311810 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E9A5B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E9A564(a1);
  operator delete();
}

void sub_100E9A5DC()
{
  operator new();
}

uint64_t sub_100E9A614(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if ((*(_BYTE *)(v2 + 20) & 1) != 0)
        {
          v3 = *(_QWORD *)(v2 + 8);
          if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v3 + 23) < 0)
            {
              **(_BYTE **)v3 = 0;
              *(_QWORD *)(v3 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v3 = 0;
              *(_BYTE *)(v3 + 23) = 0;
            }
          }
        }
        *(_DWORD *)(v2 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100E9A674(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 5)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E9A218(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E9A948(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311810 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E9A9D0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311810 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9A350(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E9AAC8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9A430(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9AB14()
{
  return 1;
}

_QWORD *sub_100E9AB1C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.AppMonitorNotification");
}

void sub_100E9AB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BYTE v31[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v31, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 7798);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v31, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v30, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v31);
  }
  v5 = *(_DWORD *)(a2 + 112);
  if (!(_BYTE)v5)
    goto LABEL_42;
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311828 + 8);
    sub_100445BD4(v6, v7);
    v5 = *(_DWORD *)(a2 + 112);
  }
  if ((v5 & 2) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 2u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311828 + 16);
    sub_100448724(v8, v9);
    v5 = *(_DWORD *)(a2 + 112);
  }
  if ((v5 & 4) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 4u;
    v10 = *(_QWORD *)(a1 + 24);
    if (!v10)
      operator new();
    v11 = *(_QWORD *)(a2 + 24);
    if (!v11)
      v11 = *(_QWORD *)(qword_102311828 + 24);
    sub_10044E65C(v10, v11);
    v5 = *(_DWORD *)(a2 + 112);
  }
  if ((v5 & 8) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 8u;
    v12 = *(_QWORD *)(a1 + 32);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 32);
    if (!v13)
      v13 = *(_QWORD *)(qword_102311828 + 32);
    sub_10044BC00(v12, v13);
    v5 = *(_DWORD *)(a2 + 112);
  }
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 0x20) == 0)
      goto LABEL_30;
LABEL_34:
    v15 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 112) |= 0x20u;
    *(_QWORD *)(a1 + 40) = v15;
    v5 = *(_DWORD *)(a2 + 112);
    if ((v5 & 0x40) == 0)
    {
LABEL_31:
      if ((v5 & 0x80) == 0)
        goto LABEL_42;
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  v14 = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 112) |= 0x10u;
  *(_BYTE *)(a1 + 48) = v14;
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x20) != 0)
    goto LABEL_34;
LABEL_30:
  if ((v5 & 0x40) == 0)
    goto LABEL_31;
LABEL_35:
  v16 = *(_DWORD *)(a2 + 52);
  if (!sub_10008D1F0(v16))
    sub_101901A08();
  *(_DWORD *)(a1 + 112) |= 0x40u;
  *(_DWORD *)(a1 + 52) = v16;
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x80) != 0)
  {
LABEL_37:
    *(_DWORD *)(a1 + 112) |= 0x80u;
    v17 = *(_QWORD *)(a1 + 56);
    if (!v17)
      operator new();
    v18 = *(_QWORD *)(a2 + 56);
    if (!v18)
      v18 = *(_QWORD *)(qword_102311828 + 56);
    sub_10044BFD0(v17, v18);
    v5 = *(_DWORD *)(a2 + 112);
  }
LABEL_42:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x100u;
      v19 = *(_QWORD *)(a1 + 64);
      if (!v19)
        operator new();
      v20 = *(_QWORD *)(a2 + 64);
      if (!v20)
        v20 = *(_QWORD *)(qword_102311828 + 64);
      sub_10044C4A0(v19, v20);
      v5 = *(_DWORD *)(a2 + 112);
    }
    if ((v5 & 0x200) != 0)
    {
      v21 = *(_DWORD *)(a2 + 104);
      if (!sub_10008D1F0(v21))
        sub_101901A30();
      *(_DWORD *)(a1 + 112) |= 0x200u;
      *(_DWORD *)(a1 + 104) = v21;
      v5 = *(_DWORD *)(a2 + 112);
    }
    if ((v5 & 0x400) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x400u;
      v22 = *(_QWORD *)(a1 + 72);
      if (!v22)
        operator new();
      v23 = *(_QWORD *)(a2 + 72);
      if (!v23)
        v23 = *(_QWORD *)(qword_102311828 + 72);
      sub_10044CC58(v22, v23);
      v5 = *(_DWORD *)(a2 + 112);
    }
    if ((v5 & 0x800) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x800u;
      v24 = *(_QWORD *)(a1 + 80);
      if (!v24)
        operator new();
      v25 = *(_QWORD *)(a2 + 80);
      if (!v25)
        v25 = *(_QWORD *)(qword_102311828 + 80);
      sub_10046CCD4(v24, v25);
      v5 = *(_DWORD *)(a2 + 112);
    }
    if ((v5 & 0x1000) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x1000u;
      v26 = *(_QWORD *)(a1 + 88);
      if (!v26)
        operator new();
      v27 = *(_QWORD *)(a2 + 88);
      if (!v27)
        v27 = *(_QWORD *)(qword_102311828 + 88);
      sub_10044EE74(v26, v27);
      v5 = *(_DWORD *)(a2 + 112);
    }
    if ((v5 & 0x2000) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x2000u;
      v28 = *(_QWORD *)(a1 + 96);
      if (!v28)
        operator new();
      v29 = *(_QWORD *)(a2 + 96);
      if (!v29)
        v29 = *(_QWORD *)(qword_102311828 + 96);
      sub_10044F4A8(v28, v29);
    }
  }
}

void sub_100E9AFE8()
{
  operator delete();
}

void sub_100E9B0DC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F6B8;
  sub_1001664CC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E9B10C()
{
  operator new();
}

uint64_t sub_100E9B160(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 112);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_1004460E8(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
      {
        result = sub_100449298(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(v1 + 24);
      if (result)
      {
        result = sub_10044E7D4(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(v1 + 32);
      if (result)
      {
        result = sub_10044BD48(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(_BYTE *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 52) = 0;
    if ((v2 & 0x80) != 0)
    {
      result = *(_QWORD *)(v1 + 56);
      if (result)
      {
        result = sub_10044C158(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      result = *(_QWORD *)(v1 + 64);
      if (result)
      {
        result = sub_10044C5D4(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(_DWORD *)(v1 + 104) = 0;
    if ((v2 & 0x400) != 0)
    {
      result = *(_QWORD *)(v1 + 72);
      if (result)
      {
        result = sub_10044CDBC(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x800) != 0)
    {
      result = *(_QWORD *)(v1 + 80);
      if (result)
      {
        result = sub_10046CEA0(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x1000) != 0)
    {
      result = *(_QWORD *)(v1 + 88);
      if (result)
      {
        result = sub_10044F028(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x2000) != 0)
    {
      result = *(_QWORD *)(v1 + 96);
      if (result)
        result = sub_10044F5C0(result);
    }
  }
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t sub_100E9B268(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  _BYTE *v32;
  int *v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  _BYTE *v50;
  unsigned int v51;
  _BYTE *v52;
  uint64_t result;
  _BYTE *v54;
  unsigned int v55;
  _BYTE *v56;
  uint64_t v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  _BYTE *v65;
  uint64_t v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  _BYTE *v74;
  unsigned int v75;
  _BYTE *v76;
  uint64_t v77;
  char *v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  _BYTE *v94;
  uint64_t v95;
  char *v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  _BYTE *v103;
  uint64_t v104;
  char *v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112[2];

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_40;
        *(_DWORD *)(a1 + 112) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v112[0] = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_100446188(v8, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 != 18)
          continue;
        *((_QWORD *)this + 1) = v23 + 1;
        goto LABEL_52;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_40;
LABEL_52:
        *(_DWORD *)(a1 + 112) |= 2u;
        v24 = *(_QWORD *)(a1 + 16);
        if (!v24)
          operator new();
        v112[0] = 0;
        v25 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)this + 14);
        v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27)
          return 0;
        v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1004494A8(v24, this, v29) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        v30 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v30, 1);
        v31 = v30 - 1;
        if (v31 < 0 == v21)
          *((_DWORD *)this + 14) = v31;
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 != 26)
          continue;
        *((_QWORD *)this + 1) = v32 + 1;
LABEL_66:
        *(_DWORD *)(a1 + 112) |= 4u;
        v33 = *(int **)(a1 + 24);
        if (!v33)
          operator new();
        v112[0] = 0;
        v34 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v34 >= *((_QWORD *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v34;
          *((_QWORD *)this + 1) = v34 + 1;
        }
        v35 = *((_DWORD *)this + 14);
        v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36)
          return 0;
        v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10044E864(v33, this, v38) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        v39 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v39, 1);
        v40 = v39 - 1;
        if (v40 < 0 == v21)
          *((_DWORD *)this + 14) = v40;
        v41 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v41 >= *((_QWORD *)this + 2) || *v41 != 34)
          continue;
        *((_QWORD *)this + 1) = v41 + 1;
LABEL_80:
        *(_DWORD *)(a1 + 112) |= 8u;
        v42 = *(_QWORD *)(a1 + 32);
        if (!v42)
          operator new();
        v112[0] = 0;
        v43 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v43 >= *((_QWORD *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v43;
          *((_QWORD *)this + 1) = v43 + 1;
        }
        v44 = *((_DWORD *)this + 14);
        v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45)
          return 0;
        v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10044BD60(v42, this, v47) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        v48 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v48, 1);
        v49 = v48 - 1;
        if (v49 < 0 == v21)
          *((_DWORD *)this + 14) = v49;
        v50 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v50 >= v10 || *v50 != 40)
          continue;
        v11 = v50 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_94:
        v112[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!(_DWORD)result)
            return result;
          v51 = v112[0];
          v52 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v51 = *v11;
          v52 = v11 + 1;
          *((_QWORD *)this + 1) = v52;
        }
        *(_BYTE *)(a1 + 48) = v51 != 0;
        *(_DWORD *)(a1 + 112) |= 0x10u;
        if ((unint64_t)v52 >= v10 || *v52 != 49)
          continue;
        *((_QWORD *)this + 1) = v52 + 1;
LABEL_102:
        *(_QWORD *)v112 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v112) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v112;
        *(_DWORD *)(a1 + 112) |= 0x20u;
        v54 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v54 >= v12 || *v54 != 56)
          continue;
        v13 = v54 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_106:
        v112[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!(_DWORD)result)
            return result;
          v55 = v112[0];
        }
        else
        {
          v55 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (sub_10008D1F0(v55))
        {
          if (!sub_10008D1F0(v55))
            sub_101901A08();
          *(_DWORD *)(a1 + 112) |= 0x40u;
          *(_DWORD *)(a1 + 52) = v55;
        }
        v56 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v56 >= *((_QWORD *)this + 2) || *v56 != 66)
          continue;
        *((_QWORD *)this + 1) = v56 + 1;
LABEL_117:
        *(_DWORD *)(a1 + 112) |= 0x80u;
        v57 = *(_QWORD *)(a1 + 56);
        if (!v57)
          operator new();
        v112[0] = 0;
        v58 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v58 >= *((_QWORD *)this + 2) || *v58 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v58;
          *((_QWORD *)this + 1) = v58 + 1;
        }
        v59 = *((_DWORD *)this + 14);
        v60 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v59 + 1;
        if (v59 >= v60)
          return 0;
        v61 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10044C174(v57, this, v62) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v61);
        v63 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v63, 1);
        v64 = v63 - 1;
        if (v64 < 0 == v21)
          *((_DWORD *)this + 14) = v64;
        v65 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v65 >= *((_QWORD *)this + 2) || *v65 != 74)
          continue;
        *((_QWORD *)this + 1) = v65 + 1;
LABEL_131:
        *(_DWORD *)(a1 + 112) |= 0x100u;
        v66 = *(_QWORD *)(a1 + 64);
        if (!v66)
          operator new();
        v112[0] = 0;
        v67 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v67 >= *((_QWORD *)this + 2) || *v67 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v67;
          *((_QWORD *)this + 1) = v67 + 1;
        }
        v68 = *((_DWORD *)this + 14);
        v69 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v68 + 1;
        if (v68 >= v69)
          return 0;
        v70 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10044C5E8(v66, this, v71) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v70);
        v72 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v72, 1);
        v73 = v72 - 1;
        if (v73 < 0 == v21)
          *((_DWORD *)this + 14) = v73;
        v74 = (_BYTE *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        if ((unint64_t)v74 >= v14 || *v74 != 80)
          continue;
        v15 = v74 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_145:
        v112[0] = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!(_DWORD)result)
            return result;
          v75 = v112[0];
        }
        else
        {
          v75 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        if (sub_10008D1F0(v75))
        {
          if (!sub_10008D1F0(v75))
            sub_101901A30();
          *(_DWORD *)(a1 + 112) |= 0x200u;
          *(_DWORD *)(a1 + 104) = v75;
        }
        v76 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v76 >= *((_QWORD *)this + 2) || *v76 != 90)
          continue;
        *((_QWORD *)this + 1) = v76 + 1;
LABEL_156:
        *(_DWORD *)(a1 + 112) |= 0x400u;
        v77 = *(_QWORD *)(a1 + 72);
        if (!v77)
          operator new();
        v112[0] = 0;
        v78 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v78 >= *((_QWORD *)this + 2) || *v78 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v78;
          *((_QWORD *)this + 1) = v78 + 1;
        }
        v79 = *((_DWORD *)this + 14);
        v80 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v79 + 1;
        if (v79 >= v80)
          return 0;
        v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10044CDD4(v77, this, v82) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
        v83 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v83, 1);
        v84 = v83 - 1;
        if (v84 < 0 == v21)
          *((_DWORD *)this + 14) = v84;
        v85 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v85 >= *((_QWORD *)this + 2) || *v85 != 98)
          continue;
        *((_QWORD *)this + 1) = v85 + 1;
LABEL_170:
        *(_DWORD *)(a1 + 112) |= 0x800u;
        v86 = *(_QWORD *)(a1 + 80);
        if (!v86)
          operator new();
        v112[0] = 0;
        v87 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v87 >= *((_QWORD *)this + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v87;
          *((_QWORD *)this + 1) = v87 + 1;
        }
        v88 = *((_DWORD *)this + 14);
        v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89)
          return 0;
        v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10046CED4(v86, this, v91) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        v92 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v92, 1);
        v93 = v92 - 1;
        if (v93 < 0 == v21)
          *((_DWORD *)this + 14) = v93;
        v94 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v94 >= *((_QWORD *)this + 2) || *v94 != 106)
          continue;
        *((_QWORD *)this + 1) = v94 + 1;
LABEL_184:
        *(_DWORD *)(a1 + 112) |= 0x1000u;
        v95 = *(_QWORD *)(a1 + 88);
        if (!v95)
          operator new();
        v112[0] = 0;
        v96 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v96 >= *((_QWORD *)this + 2) || *v96 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v96;
          *((_QWORD *)this + 1) = v96 + 1;
        }
        v97 = *((_DWORD *)this + 14);
        v98 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v97 + 1;
        if (v97 >= v98)
          return 0;
        v99 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10044F04C(v95, this, v100) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v99);
        v101 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v101, 1);
        v102 = v101 - 1;
        if (v102 < 0 == v21)
          *((_DWORD *)this + 14) = v102;
        v103 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v103 >= *((_QWORD *)this + 2) || *v103 != 114)
          continue;
        *((_QWORD *)this + 1) = v103 + 1;
LABEL_198:
        *(_DWORD *)(a1 + 112) |= 0x2000u;
        v104 = *(_QWORD *)(a1 + 96);
        if (!v104)
          operator new();
        v112[0] = 0;
        v105 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v105 >= *((_QWORD *)this + 2) || *v105 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0;
        }
        else
        {
          v112[0] = *v105;
          *((_QWORD *)this + 1) = v105 + 1;
        }
        v106 = *((_DWORD *)this + 14);
        v107 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v106 + 1;
        if (v106 >= v107)
          return 0;
        v108 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10044F5D4(v104, this, v109) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v108);
        v110 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v110, 1);
        v111 = v110 - 1;
        if (v111 < 0 == v21)
          *((_DWORD *)this + 14) = v111;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_66;
        goto LABEL_40;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_80;
        goto LABEL_40;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_94;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_102;
        goto LABEL_40;
      case 7u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_106;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_117;
        goto LABEL_40;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_131;
        goto LABEL_40;
      case 0xAu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_145;
      case 0xBu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_156;
        goto LABEL_40;
      case 0xCu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_170;
        goto LABEL_40;
      case 0xDu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_184;
        goto LABEL_40;
      case 0xEu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_198;
        goto LABEL_40;
      default:
        v7 = TagFallback & 7;
LABEL_40:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_100E9BF18()
{
  operator delete();
}

uint64_t sub_100E9BFF8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_DWORD *)(result + 112);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311828 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 112);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311828 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_22:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311828 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_25:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311828 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 48), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 52), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_31:
  v11 = *(_QWORD *)(v5 + 56);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311828 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_34:
  v12 = *(_QWORD *)(v5 + 64);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311828 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 104), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_38:
  v13 = *(_QWORD *)(v5 + 72);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311828 + 72);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_41:
  v14 = *(_QWORD *)(v5 + 80);
  if (!v14)
    v14 = *(_QWORD *)(qword_102311828 + 80);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v14, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      return result;
    goto LABEL_47;
  }
LABEL_44:
  v15 = *(_QWORD *)(v5 + 88);
  if (!v15)
    v15 = *(_QWORD *)(qword_102311828 + 88);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v15, a2, a4);
  if ((*(_DWORD *)(v5 + 112) & 0x2000) != 0)
  {
LABEL_47:
    v16 = *(_QWORD *)(v5 + 96);
    if (!v16)
      v16 = *(_QWORD *)(qword_102311828 + 96);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v16, a2, a4);
  }
  return result;
}

void sub_100E9C244(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9AB2C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9C290()
{
  return 1;
}

_QWORD *sub_100E9C298@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification.NotificationData");
}

void sub_100E9C2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  _BYTE v17[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v17, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 8297);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  v5 = *(_DWORD *)(a2 + 60);
  if ((_BYTE)v5)
  {
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 60) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 60);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 60) |= 2u;
    *(_QWORD *)(a1 + 16) = v7;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    v8 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(_QWORD *)(a1 + 24) = v8;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
LABEL_16:
    v9 = *(_BYTE *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 32) = v9;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
LABEL_17:
    v10 = *(_BYTE *)(a2 + 33);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(_BYTE *)(a1 + 33) = v10;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0)
        goto LABEL_11;
      goto LABEL_19;
    }
LABEL_18:
    v11 = *(_BYTE *)(a2 + 34);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(_BYTE *)(a1 + 34) = v11;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_20;
    }
LABEL_19:
    v12 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x40u;
    *(_QWORD *)(a1 + 40) = v12;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x80) == 0)
      goto LABEL_22;
LABEL_20:
    v13 = *(_DWORD *)(a2 + 36);
    if (!sub_10008D1F0(v13))
      sub_101930800();
    *(_DWORD *)(a1 + 60) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v13;
    v5 = *(_DWORD *)(a2 + 60);
  }
LABEL_22:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      v14 = *(_DWORD *)(a2 + 48);
      if (!sub_10002A324(v14))
        sub_1019307D8();
      *(_DWORD *)(a1 + 60) |= 0x100u;
      *(_DWORD *)(a1 + 48) = v14;
      v5 = *(_DWORD *)(a2 + 60);
    }
    if ((v5 & 0x200) != 0)
    {
      v15 = *(_DWORD *)(a2 + 52);
      if (!sub_10008D1F0(v15))
        sub_1019307B0();
      *(_DWORD *)(a1 + 60) |= 0x200u;
      *(_DWORD *)(a1 + 52) = v15;
    }
  }
}

void sub_100E9C494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9C4AC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F730;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E9C4BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F730;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E9C4EC()
{
  operator new();
}

uint64_t sub_100E9C53C(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 60);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_DWORD *)(result + 36) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 31) = 0;
  }
  if ((v1 & 0xFF00) != 0)
    *(_QWORD *)(result + 48) = 0x100000001;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

uint64_t sub_100E9C574(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unsigned int v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t result;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_39;
        *(_QWORD *)v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v34) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v34;
        *(_DWORD *)(a1 + 60) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_39;
LABEL_14:
        *(_QWORD *)v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v34) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v34;
        *(_DWORD *)(a1 + 60) |= 2u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 25)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
LABEL_19:
        *(_QWORD *)v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v34) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v34;
        *(_DWORD *)(a1 + 60) |= 4u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 != 32)
          continue;
        v12 = v11 + 1;
        *((_QWORD *)this + 1) = v12;
LABEL_25:
        v34[0] = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!(_DWORD)result)
            return result;
          v13 = v34[0];
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v12;
          v14 = v12 + 1;
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 32) = v13 != 0;
        *(_DWORD *)(a1 + 60) |= 8u;
        if ((unint64_t)v14 >= v10 || *v14 != 40)
          continue;
        v15 = v14 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_48:
        v34[0] = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!(_DWORD)result)
            return result;
          v24 = v34[0];
          v25 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v24 = *v15;
          v25 = v15 + 1;
          *((_QWORD *)this + 1) = v25;
        }
        *(_BYTE *)(a1 + 33) = v24 != 0;
        *(_DWORD *)(a1 + 60) |= 0x10u;
        if ((unint64_t)v25 >= v10 || *v25 != 48)
          continue;
        v16 = v25 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_56:
        v34[0] = 0;
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!(_DWORD)result)
            return result;
          v26 = v34[0];
          v27 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v26 = *v16;
          v27 = v16 + 1;
          *((_QWORD *)this + 1) = v27;
        }
        *(_BYTE *)(a1 + 34) = v26 != 0;
        *(_DWORD *)(a1 + 60) |= 0x20u;
        if ((unint64_t)v27 >= v10 || *v27 != 57)
          continue;
        *((_QWORD *)this + 1) = v27 + 1;
LABEL_64:
        *(_QWORD *)v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v34) & 1) != 0)
        {
          *(_QWORD *)(a1 + 40) = *(_QWORD *)v34;
          *(_DWORD *)(a1 + 60) |= 0x40u;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v17 = *((_QWORD *)this + 2);
          if ((unint64_t)v28 < v17 && *v28 == 64)
          {
            v18 = v28 + 1;
            *((_QWORD *)this + 1) = v18;
LABEL_68:
            v34[0] = 0;
            if ((unint64_t)v18 >= v17 || *v18 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
              if (!(_DWORD)result)
                return result;
              v29 = v34[0];
            }
            else
            {
              v29 = *v18;
              *((_QWORD *)this + 1) = v18 + 1;
            }
            if (sub_10008D1F0(v29))
            {
              if (!sub_10008D1F0(v29))
                sub_101930800();
              *(_DWORD *)(a1 + 60) |= 0x80u;
              *(_DWORD *)(a1 + 36) = v29;
            }
            v30 = (_BYTE *)*((_QWORD *)this + 1);
            v19 = *((_QWORD *)this + 2);
            if ((unint64_t)v30 < v19 && *v30 == 72)
            {
              v20 = v30 + 1;
              *((_QWORD *)this + 1) = v20;
LABEL_79:
              v34[0] = 0;
              if ((unint64_t)v20 >= v19 || *v20 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
                if (!(_DWORD)result)
                  return result;
                v31 = v34[0];
              }
              else
              {
                v31 = *v20;
                *((_QWORD *)this + 1) = v20 + 1;
              }
              if (sub_10002A324(v31))
              {
                if (!sub_10002A324(v31))
                  sub_1019307D8();
                *(_DWORD *)(a1 + 60) |= 0x100u;
                *(_DWORD *)(a1 + 48) = v31;
              }
              v32 = (_BYTE *)*((_QWORD *)this + 1);
              v21 = *((_QWORD *)this + 2);
              if ((unint64_t)v32 < v21 && *v32 == 80)
              {
                v22 = v32 + 1;
                *((_QWORD *)this + 1) = v22;
LABEL_90:
                v34[0] = 0;
                if ((unint64_t)v22 >= v21 || *v22 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
                  if (!(_DWORD)result)
                    return result;
                  v33 = v34[0];
                }
                else
                {
                  v33 = *v22;
                  *((_QWORD *)this + 1) = v22 + 1;
                }
                if (sub_10008D1F0(v33))
                {
                  if (!sub_10008D1F0(v33))
                    sub_1019307B0();
                  *(_DWORD *)(a1 + 60) |= 0x200u;
                  *(_DWORD *)(a1 + 52) = v33;
                }
                if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  result = 1;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_19;
        goto LABEL_39;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v12 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_25;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v15 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_48;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v16 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_56;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_64;
        goto LABEL_39;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v18 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_68;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v20 = (char *)*((_QWORD *)this + 1);
        v19 = *((_QWORD *)this + 2);
        goto LABEL_79;
      case 0xAu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v22 = (char *)*((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        goto LABEL_90;
      default:
        v7 = TagFallback & 7;
LABEL_39:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100E9CAE4(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 60);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 60);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 32), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 33), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 34), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 36), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 52), a2, a4);
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 48), a2, a4);
  if ((*(_DWORD *)(v5 + 60) & 0x200) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 52), a2, a4);
  return result;
}

uint64_t sub_100E9CC20(unsigned int *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;

  v3 = a1[15];
  if ((_BYTE)v3)
  {
    v4 = ((int)(v3 << 31) >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v4 += 2;
    if ((v3 & 0x10) != 0)
      v4 += 2;
    if ((v3 & 0x20) != 0)
      v4 += 2;
    if ((v3 & 0x40) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 0x80) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = a1[15];
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[12];
      if ((v8 & 0x80000000) != 0)
      {
        v9 = 11;
      }
      else if (v8 >= 0x80)
      {
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
        v3 = a1[15];
      }
      else
      {
        v9 = 2;
      }
      v5 = (v9 + v5);
    }
    if ((v3 & 0x200) != 0)
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[13];
      if ((v10 & 0x80000000) != 0)
      {
        v11 = 11;
      }
      else if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      }
      else
      {
        v11 = 2;
      }
      v5 = (v11 + v5);
    }
  }
  a1[14] = v5;
  return v5;
}

void sub_100E9CD4C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9C2A8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9CD98()
{
  return 1;
}

_QWORD *sub_100E9CDA0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification.RegInfo");
}

void sub_100E9CDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 8614);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 0x31)
        sub_101919814();
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311820 + 16);
      sub_100E9AB2C(v8, v9);
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        operator new();
      v11 = *(_QWORD *)(a2 + 24);
      if (!v11)
        v11 = *(_QWORD *)(qword_102311820 + 24);
      sub_100E9C2A8(v10, v11);
    }
  }
}

void sub_100E9CF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9CF70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F7A8;
  sub_10016642C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E9CFA0()
{
  operator new();
}

uint64_t sub_100E9CFE0(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 36);
  if ((_BYTE)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = sub_100E9B160(result);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 8) != 0)
    {
      v3 = *(_QWORD *)(v1 + 24);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 + 60);
        if ((_BYTE)v4)
        {
          *(_QWORD *)(v3 + 40) = 0;
          *(_DWORD *)(v3 + 36) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
          *(_QWORD *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 31) = 0;
        }
        if ((v4 & 0xFF00) != 0)
          *(_QWORD *)(v3 + 48) = 0x100000001;
        *(_DWORD *)(v3 + 60) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100E9D060(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  uint64_t result;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v34 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!(_DWORD)result)
            return result;
          v10 = v34;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 36) |= 1u;
        if ((unint64_t)v11 < v8 && *v11 == 16)
        {
          v12 = v11 + 1;
          *((_QWORD *)this + 1) = v12;
          goto LABEL_25;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_25:
        v34 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!(_DWORD)result)
            return result;
          v14 = v34;
        }
        else
        {
          v14 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (v14 <= 0x30)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 12) = v14;
        }
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 26)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_35:
        *(_DWORD *)(a1 + 36) |= 4u;
        v16 = *(_QWORD *)(a1 + 16);
        if (!v16)
          operator new();
        v34 = 0;
        v17 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34))return 0;
        }
        else
        {
          v34 = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
        }
        v18 = *((_DWORD *)this + 14);
        v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 >= v19)
          return 0;
        v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
        if (!sub_100E9B268(v16, this, v21) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
        v22 = *((_DWORD *)this + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)this + 14) = v24;
        v25 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 != 34)
          continue;
        *((_QWORD *)this + 1) = v25 + 1;
LABEL_49:
        *(_DWORD *)(a1 + 36) |= 8u;
        v26 = *(_QWORD *)(a1 + 24);
        if (!v26)
          operator new();
        v34 = 0;
        v27 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34))return 0;
        }
        else
        {
          v34 = *v27;
          *((_QWORD *)this + 1) = v27 + 1;
        }
        v28 = *((_DWORD *)this + 14);
        v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 < v29)
        {
          v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
          if (sub_100E9C574(v26, this, v31))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
              v32 = *((_DWORD *)this + 14);
              v23 = __OFSUB__(v32, 1);
              v33 = v32 - 1;
              if (v33 < 0 == v23)
                *((_DWORD *)this + 14) = v33;
              if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_35;
        goto LABEL_17;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
        goto LABEL_49;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100E9D484(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    goto LABEL_11;
  }
LABEL_8:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311820 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
  {
LABEL_11:
    v8 = *(_QWORD *)(v5 + 24);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311820 + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  }
  return result;
}

void sub_100E9D538(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9CDB0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9D584()
{
  return 1;
}

_QWORD *sub_100E9D58C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification");
}

float sub_100E9D59C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 8818);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311840 + 8);
    return sub_100475800(v6, v7);
  }
  return result;
}

void sub_100E9D66C()
{
  operator delete();
}

void sub_100E9D6A4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F820;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311840 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E9D6F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E9D6A4(a1);
  operator delete();
}

void sub_100E9D71C()
{
  operator new();
}

uint64_t sub_100E9D754(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100475A58(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100E9D788(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100475A7C(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

void sub_100E9D924()
{
  operator delete();
}

uint64_t sub_100E9D948(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311840 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100E9D974(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102311840 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100475FB0(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

float sub_100E9D9E0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100E9D59C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9DA2C()
{
  return 1;
}

_QWORD *sub_100E9DA34@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.OutdoorServiceNotification.NotificationData");
}

float sub_100E9DA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 9058);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= 2)
        sub_101930828();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v8;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v9 = *(_QWORD *)(a1 + 16);
      if (!v9)
        operator new();
      v10 = *(_QWORD *)(a2 + 16);
      if (!v10)
        v10 = *(_QWORD *)(qword_102311838 + 16);
      return sub_100E9D59C(v9, v10);
    }
  }
  return result;
}

void sub_100E9DB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9DB70(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F898;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311838 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E9DBC4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E9DB70(a1);
  operator delete();
}

void sub_100E9DBE8()
{
  operator new();
}

uint64_t sub_100E9DC20(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v3 + 8);
          if (result)
            result = sub_100475A58(result);
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E9DC70(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E9D788(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E9DF3C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311838 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E9DFC4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311838 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9D974(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

float sub_100E9E0BC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100E9DA44(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9E108()
{
  return 1;
}

_QWORD *sub_100E9E110@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.OutdoorServiceNotification");
}

double sub_100E9E120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 9260);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311850 + 8);
    return sub_1004746D8(v6, v7);
  }
  return result;
}

void sub_100E9E1F0()
{
  operator delete();
}

void sub_100E9E228(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F910;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311850 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E9E27C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E9E228(a1);
  operator delete();
}

void sub_100E9E2A0()
{
  operator new();
}

uint64_t sub_100E9E2D8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100474BA0(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100E9E30C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100474C8C(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

void sub_100E9E4A8()
{
  operator delete();
}

uint64_t sub_100E9E4CC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311850 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100E9E4F8(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102311850 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100475560(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

double sub_100E9E564(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100E9E120(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9E5B0()
{
  return 1;
}

_QWORD *sub_100E9E5B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.RoutineVisitNotification.NotificationData");
}

double sub_100E9E5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 9500);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= 3)
        sub_101930850();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v8;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v9 = *(_QWORD *)(a1 + 16);
      if (!v9)
        operator new();
      v10 = *(_QWORD *)(a2 + 16);
      if (!v10)
        v10 = *(_QWORD *)(qword_102311848 + 16);
      return sub_100E9E120(v9, v10);
    }
  }
  return result;
}

void sub_100E9E6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9E6F4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218F988;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311848 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E9E748(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E9E6F4(a1);
  operator delete();
}

void sub_100E9E76C()
{
  operator new();
}

uint64_t sub_100E9E7A4(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v3 + 8);
          if (result)
            result = sub_100474BA0(result);
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E9E7F4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E9E30C(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E9EAC0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311848 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E9EB48(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311848 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9E4F8(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

double sub_100E9EC40(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100E9E5C8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9EC8C()
{
  return 1;
}

_QWORD *sub_100E9EC94@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.RoutineVisitNotification");
}

void sub_100E9ECA4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 9689);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        sub_10060013C();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_10047611C(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_100E9EDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9EDE0(uint64_t *a1)
{
  *a1 = (uint64_t)off_10218FA00;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100E9EE18(uint64_t *a1)
{
  sub_100E9EDE0(a1);
  operator delete();
}

void sub_100E9EE3C()
{
  operator new();
}

uint64_t sub_100E9EE7C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100E9EED4(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          sub_10060013C();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_QWORD *)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_1004764E0(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100E9F0C4(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100E9F120(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100476EF8(*(unsigned int **)(*(_QWORD *)(a1 + 8)+ 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      else
        v7 = 1;
      v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_100E9F19C(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9ECA4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9F1E8()
{
  return 1;
}

_QWORD *sub_100E9F1F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.InertialOdometryNotification.NotificationData");
}

void sub_100E9F200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 9925);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2)
        sub_101930878();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_DWORD **)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311858 + 16);
      sub_100E9ECA4(v8, v9);
    }
  }
}

void sub_100E9F31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100E9F334(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218FA78;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311858 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100E9F388(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100E9F334(a1);
  operator delete();
}

void sub_100E9F3AC()
{
  operator new();
}

uint64_t sub_100E9F3E4(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          v4 = 0;
          do
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
            ++v4;
          }
          while (v4 < *(int *)(v3 + 16));
        }
        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E9F460(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  int *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(int **)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E9EED4(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100E9F734(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311858 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100E9F7BC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311858 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9F120(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100E9F8B4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9F200(a1, (uint64_t)lpsrc);
}

uint64_t sub_100E9F900()
{
  return 1;
}

_QWORD *sub_100E9F908@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.InertialOdometryNotification");
}

void sub_100E9F918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 10166);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102311870 + 8);
      sub_100454364(v6, v7);
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311870 + 16);
      sub_100452DA8(v8, v9);
    }
  }
}

void sub_100E9FA48()
{
  operator delete();
}

_QWORD *sub_100E9FA94(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311870 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100E9FAF0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218FAF0;
  sub_100E9FA94(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100E9FB20(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218FAF0;
  sub_100E9FA94(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100E9FB64()
{
  operator new();
}

uint64_t sub_100E9FB9C(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 28);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100454584(result);
        v2 = *(_DWORD *)(v1 + 28);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
        result = sub_10045317C(result);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100E9FBE8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
        *(_DWORD *)(a1 + 28) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v27 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0;
        }
        else
        {
          v27 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)this + 14);
        v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_1004545C4(v8, this, v13) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        v14 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)this + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 18)
        {
          *((_QWORD *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_17;
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      v18 = *(_QWORD *)(a1 + 16);
      if (!v18)
        operator new();
      v28 = 0;
      v19 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0;
      }
      else
      {
        v28 = *v19;
        *((_QWORD *)this + 1) = v19 + 1;
      }
      v20 = *((_DWORD *)this + 14);
      v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21)
        return 0;
      v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      if (!sub_100453224(v18, this, v23) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      v24 = *((_DWORD *)this + 14);
      v15 = __OFSUB__(v24, 1);
      v25 = v24 - 1;
      if (v25 < 0 == v15)
        *((_DWORD *)this + 14) = v25;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

void sub_100E9FE9C()
{
  operator delete();
}

uint64_t sub_100E9FED4(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311870 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311870 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t sub_100E9FF50(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_BYTE *)(a1 + 28))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_102311870 + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100454908(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_12:
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311870 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004538AC(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v3 = (v3 + v11 + v12 + 1);
  }
LABEL_18:
  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

void sub_100EA0020(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100E9F918(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EA006C()
{
  return 1;
}

_QWORD *sub_100EA0074@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MotionStateMediatorNotification.NotificationData");
}

void sub_100EA0084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 10410);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 3)
        sub_1019308A0();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311868 + 16);
      sub_100E9F918(v8, v9);
    }
  }
}

void sub_100EA0198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100EA01B0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218FB68;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311868 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100EA0204(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100EA01B0(a1);
  operator delete();
}

void sub_100EA0228()
{
  operator new();
}

uint64_t sub_100EA0260(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = sub_100E9FB9C(result);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100EA029C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100E9FBE8(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100EA0568(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311868 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100EA05F0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311868 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9FF50(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100EA06E8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100EA0084(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EA0734()
{
  return 1;
}

_QWORD *sub_100EA073C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MotionStateMediatorNotification");
}

void sub_100EA074C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 10610);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311880 + 8);
    sub_10045B0B8(v5, v6);
  }
}

void sub_100EA081C()
{
  operator delete();
}

void sub_100EA0854(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218FBE0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311880 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100EA08A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100EA0854(a1);
  operator delete();
}

void sub_100EA08CC()
{
  operator new();
}

uint64_t sub_100EA0904(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_10045B490(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100EA0938(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_10045B538(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

void sub_100EA0AD4()
{
  operator delete();
}

uint64_t sub_100EA0AF8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311880 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100EA0B24(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102311880 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045BB8C(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100EA0B90(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100EA074C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EA0BDC()
{
  return 1;
}

_QWORD *sub_100EA0BE4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MapRouteHintNotification.NotificationData");
}

void sub_100EA0BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 10850);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2)
        sub_1019308C8();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311878 + 16);
      sub_100EA074C(v8, v9);
    }
  }
}

void sub_100EA0D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100EA0D20(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10218FC58;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311878 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100EA0D74(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100EA0D20(a1);
  operator delete();
}

void sub_100EA0D98()
{
  operator new();
}

uint64_t sub_100EA0DD0(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v3 + 8);
          if (result)
            result = sub_10045B490(result);
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100EA0E20(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v26 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!(_DWORD)result)
              return result;
            v11 = v26;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v15 = v27;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100EA0938(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100EA10EC(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311878 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100EA1174(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311878 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100EA0B24(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100EA126C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100EA0BF4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EA12B8()
{
  return 1;
}

_QWORD *sub_100EA12C0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MapRouteHintNotification");
}

void sub_100EA12D0(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 11083);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 0x1B)
        sub_101901A80();
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 4)
        sub_101901A58();
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_100EA1390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100EA13A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218FCD0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100EA13B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218FCD0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100EA13E8()
{
  operator new();
}

uint64_t sub_100EA1420(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100EA1434(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v16 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
        if (!(_DWORD)result)
          return result;
        v11 = v16;
      }
      else
      {
        v11 = *v10;
        *((_QWORD *)this + 1) = v10 + 1;
      }
      if (v11 <= 0x1A)
      {
        a1[5] |= 1u;
        a1[2] = v11;
      }
      v12 = (_BYTE *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_25:
        v15 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!(_DWORD)result)
            return result;
          v13 = v15;
        }
        else
        {
          v13 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v13 <= 3)
        {
          a1[5] |= 2u;
          a1[3] = v13;
        }
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_25;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100EA15E8(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_100EA1640(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0)
        goto LABEL_19;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      v7 = 2;
    }
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_100EA16E8(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100EA12D0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EA1734()
{
  return 1;
}

_QWORD *sub_100EA173C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.Silo");
}

void sub_100EA174C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _BYTE v50[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v50, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", 12084);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v50, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v49, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v50);
  }
  v5 = *(_DWORD *)(a2 + 184);
  if (!(_BYTE)v5)
    goto LABEL_50;
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311890 + 8);
    sub_10044282C(v6, v7);
    v5 = *(_DWORD *)(a2 + 184);
  }
  if ((v5 & 2) != 0)
  {
    v8 = *(_DWORD *)(a2 + 176);
    if (v8 >= 5)
      sub_1019019B8();
    *(_DWORD *)(a1 + 184) |= 2u;
    *(_DWORD *)(a1 + 176) = v8;
    v5 = *(_DWORD *)(a2 + 184);
  }
  if ((v5 & 4) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 4u;
    v9 = *(_DWORD **)(a1 + 16);
    if (!v9)
      operator new();
    v10 = *(_QWORD *)(a2 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311890 + 16);
    sub_100EA12D0(v9, v10);
    v5 = *(_DWORD *)(a2 + 184);
    if ((v5 & 8) == 0)
    {
LABEL_15:
      if ((v5 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_30;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_15;
  }
  *(_DWORD *)(a1 + 184) |= 8u;
  v11 = *(_DWORD **)(a1 + 24);
  if (!v11)
    operator new();
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311890 + 24);
  sub_100EA12D0(v11, v12);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
LABEL_35:
    *(_DWORD *)(a1 + 184) |= 0x20u;
    v15 = *(_QWORD *)(a1 + 40);
    if (!v15)
      operator new();
    v16 = *(_QWORD *)(a2 + 40);
    if (!v16)
      v16 = *(_QWORD *)(qword_102311890 + 40);
    sub_100E93858(v15, v16);
    v5 = *(_DWORD *)(a2 + 184);
    if ((v5 & 0x40) == 0)
    {
LABEL_18:
      if ((v5 & 0x80) == 0)
        goto LABEL_50;
      goto LABEL_45;
    }
    goto LABEL_40;
  }
LABEL_30:
  *(_DWORD *)(a1 + 184) |= 0x10u;
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    operator new();
  v14 = *(_QWORD *)(a2 + 32);
  if (!v14)
    v14 = *(_QWORD *)(qword_102311890 + 32);
  sub_100E923E4(v13, v14);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x20) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x40) == 0)
    goto LABEL_18;
LABEL_40:
  *(_DWORD *)(a1 + 184) |= 0x40u;
  v17 = *(_QWORD *)(a1 + 48);
  if (!v17)
    operator new();
  v18 = *(_QWORD *)(a2 + 48);
  if (!v18)
    v18 = *(_QWORD *)(qword_102311890 + 48);
  sub_100E9429C(v17, v18);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x80) != 0)
  {
LABEL_45:
    *(_DWORD *)(a1 + 184) |= 0x80u;
    v19 = *(_QWORD *)(a1 + 56);
    if (!v19)
      operator new();
    v20 = *(_QWORD *)(a2 + 56);
    if (!v20)
      v20 = *(_QWORD *)(qword_102311890 + 56);
    sub_100E95528(v19, v20);
    v5 = *(_DWORD *)(a2 + 184);
  }
LABEL_50:
  if ((v5 & 0xFF00) == 0)
    goto LABEL_100;
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 0x100u;
    v21 = *(_QWORD *)(a1 + 64);
    if (!v21)
      operator new();
    v22 = *(_QWORD *)(a2 + 64);
    if (!v22)
      v22 = *(_QWORD *)(qword_102311890 + 64);
    sub_100E95F6C(v21, v22);
    v5 = *(_DWORD *)(a2 + 184);
    if ((v5 & 0x200) == 0)
    {
LABEL_53:
      if ((v5 & 0x400) == 0)
        goto LABEL_54;
      goto LABEL_70;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_53;
  }
  *(_DWORD *)(a1 + 184) |= 0x200u;
  v23 = *(_QWORD *)(a1 + 72);
  if (!v23)
    operator new();
  v24 = *(_QWORD *)(a2 + 72);
  if (!v24)
    v24 = *(_QWORD *)(qword_102311890 + 72);
  sub_100E96910(v23, v24);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x400) == 0)
  {
LABEL_54:
    if ((v5 & 0x800) == 0)
      goto LABEL_55;
    goto LABEL_75;
  }
LABEL_70:
  *(_DWORD *)(a1 + 184) |= 0x400u;
  v25 = *(_QWORD *)(a1 + 80);
  if (!v25)
    operator new();
  v26 = *(_QWORD *)(a2 + 80);
  if (!v26)
    v26 = *(_QWORD *)(qword_102311890 + 80);
  sub_100E972A4(v25, v26);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x800) == 0)
  {
LABEL_55:
    if ((v5 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_80;
  }
LABEL_75:
  *(_DWORD *)(a1 + 184) |= 0x800u;
  v27 = *(_QWORD *)(a1 + 88);
  if (!v27)
    operator new();
  v28 = *(_QWORD *)(a2 + 88);
  if (!v28)
    v28 = *(_QWORD *)(qword_102311890 + 88);
  sub_100E97DF8(v27, v28);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x1000) == 0)
  {
LABEL_56:
    if ((v5 & 0x2000) == 0)
      goto LABEL_57;
    goto LABEL_85;
  }
LABEL_80:
  *(_DWORD *)(a1 + 184) |= 0x1000u;
  v29 = *(_QWORD *)(a1 + 96);
  if (!v29)
    operator new();
  v30 = *(_QWORD *)(a2 + 96);
  if (!v30)
    v30 = *(_QWORD *)(qword_102311890 + 96);
  sub_100E9897C(v29, v30);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x2000) == 0)
  {
LABEL_57:
    if ((v5 & 0x4000) == 0)
      goto LABEL_58;
    goto LABEL_90;
  }
LABEL_85:
  *(_DWORD *)(a1 + 184) |= 0x2000u;
  v31 = *(_QWORD *)(a1 + 104);
  if (!v31)
    operator new();
  v32 = *(_QWORD *)(a2 + 104);
  if (!v32)
    v32 = *(_QWORD *)(qword_102311890 + 104);
  sub_100E99500(v31, v32);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x4000) == 0)
  {
LABEL_58:
    if ((v5 & 0x8000) == 0)
      goto LABEL_100;
    goto LABEL_95;
  }
LABEL_90:
  *(_DWORD *)(a1 + 184) |= 0x4000u;
  v33 = *(_DWORD **)(a1 + 112);
  if (!v33)
    operator new();
  v34 = *(_QWORD *)(a2 + 112);
  if (!v34)
    v34 = *(_QWORD *)(qword_102311890 + 112);
  sub_100E99BDC(v33, v34);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x8000) != 0)
  {
LABEL_95:
    *(_DWORD *)(a1 + 184) |= 0x8000u;
    v35 = *(_QWORD *)(a1 + 120);
    if (!v35)
      operator new();
    v36 = *(_QWORD *)(a2 + 120);
    if (!v36)
      v36 = *(_QWORD *)(qword_102311890 + 120);
    sub_100E9A430(v35, v36);
    v5 = *(_DWORD *)(a2 + 184);
  }
LABEL_100:
  if ((v5 & 0xFF0000) == 0)
    return;
  if ((v5 & 0x10000) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 0x10000u;
    v37 = *(_QWORD *)(a1 + 128);
    if (!v37)
      operator new();
    v38 = *(_QWORD *)(a2 + 128);
    if (!v38)
      v38 = *(_QWORD *)(qword_102311890 + 128);
    sub_100E9CDB0(v37, v38);
    v5 = *(_DWORD *)(a2 + 184);
    if ((v5 & 0x20000) == 0)
    {
LABEL_103:
      if ((v5 & 0x40000) == 0)
        goto LABEL_104;
      goto LABEL_118;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_103;
  }
  *(_DWORD *)(a1 + 184) |= 0x20000u;
  v39 = *(_QWORD *)(a1 + 136);
  if (!v39)
    operator new();
  v40 = *(_QWORD *)(a2 + 136);
  if (!v40)
    v40 = *(_QWORD *)(qword_102311890 + 136);
  sub_100E9DA44(v39, v40);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x40000) == 0)
  {
LABEL_104:
    if ((v5 & 0x80000) == 0)
      goto LABEL_105;
    goto LABEL_123;
  }
LABEL_118:
  *(_DWORD *)(a1 + 184) |= 0x40000u;
  v41 = *(_QWORD *)(a1 + 144);
  if (!v41)
    operator new();
  v42 = *(_QWORD *)(a2 + 144);
  if (!v42)
    v42 = *(_QWORD *)(qword_102311890 + 144);
  sub_100E9E5C8(v41, v42);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x80000) == 0)
  {
LABEL_105:
    if ((v5 & 0x100000) == 0)
      goto LABEL_106;
    goto LABEL_128;
  }
LABEL_123:
  *(_DWORD *)(a1 + 184) |= 0x80000u;
  v43 = *(_QWORD *)(a1 + 152);
  if (!v43)
    operator new();
  v44 = *(_QWORD *)(a2 + 152);
  if (!v44)
    v44 = *(_QWORD *)(qword_102311890 + 152);
  sub_100E9F200(v43, v44);
  v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x100000) == 0)
  {
LABEL_106:
    if ((v5 & 0x200000) == 0)
      return;
    goto LABEL_133;
  }
LABEL_128:
  *(_DWORD *)(a1 + 184) |= 0x100000u;
  v45 = *(_QWORD *)(a1 + 160);
  if (!v45)
    operator new();
  v46 = *(_QWORD *)(a2 + 160);
  if (!v46)
    v46 = *(_QWORD *)(qword_102311890 + 160);
  sub_100EA0084(v45, v46);
  if ((*(_DWORD *)(a2 + 184) & 0x200000) != 0)
  {
LABEL_133:
    *(_DWORD *)(a1 + 184) |= 0x200000u;
    v47 = *(_QWORD *)(a1 + 168);
    if (!v47)
      operator new();
    v48 = *(_QWORD *)(a2 + 168);
    if (!v48)
      v48 = *(_QWORD *)(qword_102311890 + 168);
    sub_100EA0BF4(v47, v48);
  }
}

void sub_100EA2034()
{
  operator delete();
}

void sub_100EA206C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218FD48;
  sub_100166210(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_100EA209C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311890;
  if (!qword_102311890)
  {
    sub_100E8E674(0, a2, a3, a4);
    return qword_102311890;
  }
  return result;
}

void sub_100EA20C8()
{
  operator new();
}

uint64_t sub_100EA2130(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *(_DWORD *)(result + 184);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100442990(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    *(_DWORD *)(v1 + 176) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 8) != 0)
    {
      v4 = *(_QWORD *)(v1 + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 20))
          *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 20) = 0;
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 32);
      if (result)
      {
        result = sub_100E925E0(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      result = *(_QWORD *)(v1 + 40);
      if (result)
      {
        result = sub_100E93A48(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      result = *(_QWORD *)(v1 + 48);
      if (result)
      {
        result = sub_100E94478(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      result = *(_QWORD *)(v1 + 56);
      if (result)
      {
        result = sub_100E95718(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      result = *(_QWORD *)(v1 + 64);
      if (result)
      {
        result = sub_100E96148(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      result = *(_QWORD *)(v1 + 72);
      if (result)
      {
        result = sub_100E96AF0(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x400) != 0)
    {
      result = *(_QWORD *)(v1 + 80);
      if (result)
      {
        result = sub_100E97484(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x800) != 0)
    {
      result = *(_QWORD *)(v1 + 88);
      if (result)
      {
        result = sub_100E97FD4(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x1000) != 0)
    {
      result = *(_QWORD *)(v1 + 96);
      if (result)
      {
        result = sub_100E98B58(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x2000) != 0)
    {
      result = *(_QWORD *)(v1 + 104);
      if (result)
      {
        result = sub_100E996DC(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x4000) != 0)
    {
      v5 = *(_QWORD *)(v1 + 112);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 20))
          *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 20) = 0;
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x8000) != 0)
    {
      result = *(_QWORD *)(v1 + 120);
      if (result)
      {
        result = sub_100E9A614(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      result = *(_QWORD *)(v1 + 128);
      if (result)
      {
        result = sub_100E9CFE0(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x20000) != 0)
    {
      result = *(_QWORD *)(v1 + 136);
      if (result)
      {
        result = sub_100E9DC20(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x40000) != 0)
    {
      result = *(_QWORD *)(v1 + 144);
      if (result)
      {
        result = sub_100E9E7A4(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x80000) != 0)
    {
      result = *(_QWORD *)(v1 + 152);
      if (result)
      {
        result = sub_100E9F3E4(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x100000) != 0)
    {
      result = *(_QWORD *)(v1 + 160);
      if (result)
      {
        result = sub_100EA0260(result);
        v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x200000) != 0)
    {
      result = *(_QWORD *)(v1 + 168);
      if (result)
        result = sub_100EA0DD0(result);
    }
  }
  *(_DWORD *)(v1 + 184) = 0;
  return result;
}

uint64_t sub_100EA2334(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  uint64_t result;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  _BYTE *v31;
  _DWORD *v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  _BYTE *v67;
  uint64_t v68;
  char *v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  _BYTE *v76;
  uint64_t v77;
  char *v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  _BYTE *v94;
  uint64_t v95;
  char *v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  _BYTE *v103;
  uint64_t v104;
  char *v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  _BYTE *v121;
  uint64_t v122;
  char *v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  _BYTE *v130;
  _DWORD *v131;
  char *v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  unsigned __int8 *v139;
  uint64_t v140;
  char *v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  unsigned __int8 *v148;
  uint64_t v149;
  char *v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  unsigned __int8 *v157;
  uint64_t v158;
  char *v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  unsigned __int8 *v166;
  uint64_t v167;
  char *v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  unsigned __int8 *v175;
  uint64_t v176;
  char *v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  unsigned __int8 *v184;
  uint64_t v185;
  char *v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unsigned __int8 *v193;
  uint64_t v194;
  char *v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_55;
        *(_DWORD *)(a1 + 184) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v202 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v12 = *((_DWORD *)this + 14);
        v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13)
          return 0;
        v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_1004429A8(v8, this, v15) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        v16 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v16, 1);
        v18 = v16 - 1;
        if (v18 < 0 == v17)
          *((_DWORD *)this + 14) = v18;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v19 >= v10 || *v19 != 16)
          continue;
        v11 = v19 + 1;
        *((_QWORD *)this + 1) = v11;
        goto LABEL_67;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_55;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_67:
        v202 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202);
          if (!(_DWORD)result)
            return result;
          v20 = v202;
        }
        else
        {
          v20 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v20 <= 4)
        {
          *(_DWORD *)(a1 + 184) |= 2u;
          *(_DWORD *)(a1 + 176) = v20;
        }
        v22 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v22 >= *((_QWORD *)this + 2) || *v22 != 26)
          continue;
        *((_QWORD *)this + 1) = v22 + 1;
LABEL_77:
        *(_DWORD *)(a1 + 184) |= 4u;
        v23 = *(_DWORD **)(a1 + 16);
        if (!v23)
          operator new();
        v202 = 0;
        v24 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v24 >= *((_QWORD *)this + 2) || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v24;
          *((_QWORD *)this + 1) = v24 + 1;
        }
        v25 = *((_DWORD *)this + 14);
        v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26)
          return 0;
        v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100EA1434(v23, this, v28) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        v29 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v29, 1);
        v30 = v29 - 1;
        if (v30 < 0 == v17)
          *((_DWORD *)this + 14) = v30;
        v31 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v31 >= *((_QWORD *)this + 2) || *v31 != 34)
          continue;
        *((_QWORD *)this + 1) = v31 + 1;
LABEL_91:
        *(_DWORD *)(a1 + 184) |= 8u;
        v32 = *(_DWORD **)(a1 + 24);
        if (!v32)
          operator new();
        v202 = 0;
        v33 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v33 >= *((_QWORD *)this + 2) || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v33;
          *((_QWORD *)this + 1) = v33 + 1;
        }
        v34 = *((_DWORD *)this + 14);
        v35 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v34 + 1;
        if (v34 >= v35)
          return 0;
        v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100EA1434(v32, this, v37) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
        v38 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v38, 1);
        v39 = v38 - 1;
        if (v39 < 0 == v17)
          *((_DWORD *)this + 14) = v39;
        v40 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v40 >= *((_QWORD *)this + 2) || *v40 != 42)
          continue;
        *((_QWORD *)this + 1) = v40 + 1;
LABEL_105:
        *(_DWORD *)(a1 + 184) |= 0x10u;
        v41 = *(_QWORD *)(a1 + 32);
        if (!v41)
          operator new();
        v202 = 0;
        v42 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v42 >= *((_QWORD *)this + 2) || *v42 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v42;
          *((_QWORD *)this + 1) = v42 + 1;
        }
        v43 = *((_DWORD *)this + 14);
        v44 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v43 + 1;
        if (v43 >= v44)
          return 0;
        v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E9261C(v41, this, v46) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v45);
        v47 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v47, 1);
        v48 = v47 - 1;
        if (v48 < 0 == v17)
          *((_DWORD *)this + 14) = v48;
        v49 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v49 >= *((_QWORD *)this + 2) || *v49 != 50)
          continue;
        *((_QWORD *)this + 1) = v49 + 1;
LABEL_119:
        *(_DWORD *)(a1 + 184) |= 0x20u;
        v50 = *(_QWORD *)(a1 + 40);
        if (!v50)
          operator new();
        v202 = 0;
        v51 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v51 >= *((_QWORD *)this + 2) || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v51;
          *((_QWORD *)this + 1) = v51 + 1;
        }
        v52 = *((_DWORD *)this + 14);
        v53 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v52 + 1;
        if (v52 >= v53)
          return 0;
        v54 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E93A84(v50, this, v55) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v54);
        v56 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v56, 1);
        v57 = v56 - 1;
        if (v57 < 0 == v17)
          *((_DWORD *)this + 14) = v57;
        v58 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v58 >= *((_QWORD *)this + 2) || *v58 != 58)
          continue;
        *((_QWORD *)this + 1) = v58 + 1;
LABEL_133:
        *(_DWORD *)(a1 + 184) |= 0x40u;
        v59 = *(_QWORD *)(a1 + 48);
        if (!v59)
          operator new();
        v202 = 0;
        v60 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v60 >= *((_QWORD *)this + 2) || *v60 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v60;
          *((_QWORD *)this + 1) = v60 + 1;
        }
        v61 = *((_DWORD *)this + 14);
        v62 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v61 + 1;
        if (v61 >= v62)
          return 0;
        v63 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E944A8(v59, this, v64) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v63);
        v65 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v65, 1);
        v66 = v65 - 1;
        if (v66 < 0 == v17)
          *((_DWORD *)this + 14) = v66;
        v67 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v67 >= *((_QWORD *)this + 2) || *v67 != 66)
          continue;
        *((_QWORD *)this + 1) = v67 + 1;
LABEL_147:
        *(_DWORD *)(a1 + 184) |= 0x80u;
        v68 = *(_QWORD *)(a1 + 56);
        if (!v68)
          operator new();
        v202 = 0;
        v69 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v69 >= *((_QWORD *)this + 2) || *v69 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v69;
          *((_QWORD *)this + 1) = v69 + 1;
        }
        v70 = *((_DWORD *)this + 14);
        v71 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v70 + 1;
        if (v70 >= v71)
          return 0;
        v72 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E95754(v68, this, v73) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v72);
        v74 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v74, 1);
        v75 = v74 - 1;
        if (v75 < 0 == v17)
          *((_DWORD *)this + 14) = v75;
        v76 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v76 >= *((_QWORD *)this + 2) || *v76 != 74)
          continue;
        *((_QWORD *)this + 1) = v76 + 1;
LABEL_161:
        *(_DWORD *)(a1 + 184) |= 0x100u;
        v77 = *(_QWORD *)(a1 + 64);
        if (!v77)
          operator new();
        v202 = 0;
        v78 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v78 >= *((_QWORD *)this + 2) || *v78 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v78;
          *((_QWORD *)this + 1) = v78 + 1;
        }
        v79 = *((_DWORD *)this + 14);
        v80 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v79 + 1;
        if (v79 >= v80)
          return 0;
        v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E96178(v77, this, v82) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
        v83 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v83, 1);
        v84 = v83 - 1;
        if (v84 < 0 == v17)
          *((_DWORD *)this + 14) = v84;
        v85 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v85 >= *((_QWORD *)this + 2) || *v85 != 82)
          continue;
        *((_QWORD *)this + 1) = v85 + 1;
LABEL_175:
        *(_DWORD *)(a1 + 184) |= 0x200u;
        v86 = *(_QWORD *)(a1 + 72);
        if (!v86)
          operator new();
        v202 = 0;
        v87 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v87 >= *((_QWORD *)this + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v87;
          *((_QWORD *)this + 1) = v87 + 1;
        }
        v88 = *((_DWORD *)this + 14);
        v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89)
          return 0;
        v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E96B20(v86, this, v91) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        v92 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v92, 1);
        v93 = v92 - 1;
        if (v93 < 0 == v17)
          *((_DWORD *)this + 14) = v93;
        v94 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v94 >= *((_QWORD *)this + 2) || *v94 != 90)
          continue;
        *((_QWORD *)this + 1) = v94 + 1;
LABEL_189:
        *(_DWORD *)(a1 + 184) |= 0x400u;
        v95 = *(_QWORD *)(a1 + 80);
        if (!v95)
          operator new();
        v202 = 0;
        v96 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v96 >= *((_QWORD *)this + 2) || *v96 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v96;
          *((_QWORD *)this + 1) = v96 + 1;
        }
        v97 = *((_DWORD *)this + 14);
        v98 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v97 + 1;
        if (v97 >= v98)
          return 0;
        v99 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E974B4(v95, this, v100) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v99);
        v101 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v101, 1);
        v102 = v101 - 1;
        if (v102 < 0 == v17)
          *((_DWORD *)this + 14) = v102;
        v103 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v103 >= *((_QWORD *)this + 2) || *v103 != 98)
          continue;
        *((_QWORD *)this + 1) = v103 + 1;
LABEL_203:
        *(_DWORD *)(a1 + 184) |= 0x800u;
        v104 = *(_QWORD *)(a1 + 88);
        if (!v104)
          operator new();
        v202 = 0;
        v105 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v105 >= *((_QWORD *)this + 2) || *v105 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v105;
          *((_QWORD *)this + 1) = v105 + 1;
        }
        v106 = *((_DWORD *)this + 14);
        v107 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v106 + 1;
        if (v106 >= v107)
          return 0;
        v108 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E98024(v104, this, v109) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v108);
        v110 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v110, 1);
        v111 = v110 - 1;
        if (v111 < 0 == v17)
          *((_DWORD *)this + 14) = v111;
        v112 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v112 >= *((_QWORD *)this + 2) || *v112 != 106)
          continue;
        *((_QWORD *)this + 1) = v112 + 1;
LABEL_217:
        *(_DWORD *)(a1 + 184) |= 0x1000u;
        v113 = *(_QWORD *)(a1 + 96);
        if (!v113)
          operator new();
        v202 = 0;
        v114 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v114 >= *((_QWORD *)this + 2) || *v114 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v114;
          *((_QWORD *)this + 1) = v114 + 1;
        }
        v115 = *((_DWORD *)this + 14);
        v116 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v115 + 1;
        if (v115 >= v116)
          return 0;
        v117 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E98BA8(v113, this, v118) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v117);
        v119 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v119, 1);
        v120 = v119 - 1;
        if (v120 < 0 == v17)
          *((_DWORD *)this + 14) = v120;
        v121 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v121 >= *((_QWORD *)this + 2) || *v121 != 114)
          continue;
        *((_QWORD *)this + 1) = v121 + 1;
LABEL_231:
        *(_DWORD *)(a1 + 184) |= 0x2000u;
        v122 = *(_QWORD *)(a1 + 104);
        if (!v122)
          operator new();
        v202 = 0;
        v123 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v123 >= *((_QWORD *)this + 2) || *v123 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v123;
          *((_QWORD *)this + 1) = v123 + 1;
        }
        v124 = *((_DWORD *)this + 14);
        v125 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v124 + 1;
        if (v124 >= v125)
          return 0;
        v126 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E9972C(v122, this, v127) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v126);
        v128 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v128, 1);
        v129 = v128 - 1;
        if (v129 < 0 == v17)
          *((_DWORD *)this + 14) = v129;
        v130 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v130 >= *((_QWORD *)this + 2) || *v130 != 122)
          continue;
        *((_QWORD *)this + 1) = v130 + 1;
LABEL_245:
        *(_DWORD *)(a1 + 184) |= 0x4000u;
        v131 = *(_DWORD **)(a1 + 112);
        if (!v131)
          operator new();
        v202 = 0;
        v132 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v132 >= *((_QWORD *)this + 2) || *v132 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v132;
          *((_QWORD *)this + 1) = v132 + 1;
        }
        v133 = *((_DWORD *)this + 14);
        v134 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v133 + 1;
        if (v133 >= v134)
          return 0;
        v135 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E99D34(v131, this, v136) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v135);
        v137 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v137, 1);
        v138 = v137 - 1;
        if (v138 < 0 == v17)
          *((_DWORD *)this + 14) = v138;
        v139 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v139 <= 1 || *v139 != 130 || v139[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v139 + 2;
LABEL_260:
        *(_DWORD *)(a1 + 184) |= 0x8000u;
        v140 = *(_QWORD *)(a1 + 120);
        if (!v140)
          operator new();
        v202 = 0;
        v141 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v141 >= *((_QWORD *)this + 2) || *v141 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v141;
          *((_QWORD *)this + 1) = v141 + 1;
        }
        v142 = *((_DWORD *)this + 14);
        v143 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v142 + 1;
        if (v142 >= v143)
          return 0;
        v144 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E9A674(v140, this, v145) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v144);
        v146 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v146, 1);
        v147 = v146 - 1;
        if (v147 < 0 == v17)
          *((_DWORD *)this + 14) = v147;
        v148 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v148 <= 1 || *v148 != 138 || v148[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v148 + 2;
LABEL_275:
        *(_DWORD *)(a1 + 184) |= 0x10000u;
        v149 = *(_QWORD *)(a1 + 128);
        if (!v149)
          operator new();
        v202 = 0;
        v150 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v150 >= *((_QWORD *)this + 2) || *v150 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v150;
          *((_QWORD *)this + 1) = v150 + 1;
        }
        v151 = *((_DWORD *)this + 14);
        v152 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v151 + 1;
        if (v151 >= v152)
          return 0;
        v153 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E9D060(v149, this, v154) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v153);
        v155 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v155, 1);
        v156 = v155 - 1;
        if (v156 < 0 == v17)
          *((_DWORD *)this + 14) = v156;
        v157 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v157 <= 1 || *v157 != 146 || v157[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v157 + 2;
LABEL_290:
        *(_DWORD *)(a1 + 184) |= 0x20000u;
        v158 = *(_QWORD *)(a1 + 136);
        if (!v158)
          operator new();
        v202 = 0;
        v159 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v159 >= *((_QWORD *)this + 2) || *v159 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v159;
          *((_QWORD *)this + 1) = v159 + 1;
        }
        v160 = *((_DWORD *)this + 14);
        v161 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v160 + 1;
        if (v160 >= v161)
          return 0;
        v162 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E9DC70(v158, this, v163) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v162);
        v164 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v164, 1);
        v165 = v164 - 1;
        if (v165 < 0 == v17)
          *((_DWORD *)this + 14) = v165;
        v166 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v166 <= 1 || *v166 != 154 || v166[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v166 + 2;
LABEL_305:
        *(_DWORD *)(a1 + 184) |= 0x40000u;
        v167 = *(_QWORD *)(a1 + 144);
        if (!v167)
          operator new();
        v202 = 0;
        v168 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v168 >= *((_QWORD *)this + 2) || *v168 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v168;
          *((_QWORD *)this + 1) = v168 + 1;
        }
        v169 = *((_DWORD *)this + 14);
        v170 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v169 + 1;
        if (v169 >= v170)
          return 0;
        v171 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E9E7F4(v167, this, v172) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v171);
        v173 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v173, 1);
        v174 = v173 - 1;
        if (v174 < 0 == v17)
          *((_DWORD *)this + 14) = v174;
        v175 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v175 <= 1 || *v175 != 162 || v175[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v175 + 2;
LABEL_320:
        *(_DWORD *)(a1 + 184) |= 0x80000u;
        v176 = *(_QWORD *)(a1 + 152);
        if (!v176)
          operator new();
        v202 = 0;
        v177 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v177 >= *((_QWORD *)this + 2) || *v177 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v177;
          *((_QWORD *)this + 1) = v177 + 1;
        }
        v178 = *((_DWORD *)this + 14);
        v179 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v178 + 1;
        if (v178 >= v179)
          return 0;
        v180 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100E9F460(v176, this, v181) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v180);
        v182 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v182, 1);
        v183 = v182 - 1;
        if (v183 < 0 == v17)
          *((_DWORD *)this + 14) = v183;
        v184 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v184 <= 1 || *v184 != 170 || v184[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v184 + 2;
LABEL_335:
        *(_DWORD *)(a1 + 184) |= 0x100000u;
        v185 = *(_QWORD *)(a1 + 160);
        if (!v185)
          operator new();
        v202 = 0;
        v186 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v186 >= *((_QWORD *)this + 2) || *v186 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v186;
          *((_QWORD *)this + 1) = v186 + 1;
        }
        v187 = *((_DWORD *)this + 14);
        v188 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v187 + 1;
        if (v187 >= v188)
          return 0;
        v189 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100EA029C(v185, this, v190) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v189);
        v191 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v191, 1);
        v192 = v191 - 1;
        if (v192 < 0 == v17)
          *((_DWORD *)this + 14) = v192;
        v193 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v193 <= 1 || *v193 != 178 || v193[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v193 + 2;
LABEL_350:
        *(_DWORD *)(a1 + 184) |= 0x200000u;
        v194 = *(_QWORD *)(a1 + 168);
        if (!v194)
          operator new();
        v202 = 0;
        v195 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v195 >= *((_QWORD *)this + 2) || *v195 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0;
        }
        else
        {
          v202 = *v195;
          *((_QWORD *)this + 1) = v195 + 1;
        }
        v196 = *((_DWORD *)this + 14);
        v197 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v196 + 1;
        if (v196 >= v197)
          return 0;
        v198 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100EA0E20(v194, this, v199) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v198);
        v200 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v200, 1);
        v201 = v200 - 1;
        if (v201 < 0 == v17)
          *((_DWORD *)this + 14) = v201;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_77;
        goto LABEL_55;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_91;
        goto LABEL_55;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_105;
        goto LABEL_55;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_119;
        goto LABEL_55;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_133;
        goto LABEL_55;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_147;
        goto LABEL_55;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_161;
        goto LABEL_55;
      case 0xAu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_175;
        goto LABEL_55;
      case 0xBu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_189;
        goto LABEL_55;
      case 0xCu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_203;
        goto LABEL_55;
      case 0xDu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_217;
        goto LABEL_55;
      case 0xEu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_231;
        goto LABEL_55;
      case 0xFu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_245;
        goto LABEL_55;
      case 0x10u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_260;
        goto LABEL_55;
      case 0x11u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_275;
        goto LABEL_55;
      case 0x12u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_290;
        goto LABEL_55;
      case 0x13u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_305;
        goto LABEL_55;
      case 0x14u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_320;
        goto LABEL_55;
      case 0x15u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_335;
        goto LABEL_55;
      case 0x16u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_55;
        goto LABEL_350;
      default:
        v7 = TagFallback & 7;
LABEL_55:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_100EA3AC4()
{
  operator delete();
}

uint64_t sub_100EA3AE8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = result;
  v6 = *(_DWORD *)(result + 184);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311890 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 184);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 176), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_28:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311890 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_31:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311890 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_34:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311890 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_37:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311890 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_40:
  v12 = *(_QWORD *)(v5 + 48);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311890 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_43:
  v13 = *(_QWORD *)(v5 + 56);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311890 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_46:
  v14 = *(_QWORD *)(v5 + 64);
  if (!v14)
    v14 = *(_QWORD *)(qword_102311890 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v14, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_52;
  }
LABEL_49:
  v15 = *(_QWORD *)(v5 + 72);
  if (!v15)
    v15 = *(_QWORD *)(qword_102311890 + 72);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v15, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_55;
  }
LABEL_52:
  v16 = *(_QWORD *)(v5 + 80);
  if (!v16)
    v16 = *(_QWORD *)(qword_102311890 + 80);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v16, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_58;
  }
LABEL_55:
  v17 = *(_QWORD *)(v5 + 88);
  if (!v17)
    v17 = *(_QWORD *)(qword_102311890 + 88);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v17, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_58:
  v18 = *(_QWORD *)(v5 + 96);
  if (!v18)
    v18 = *(_QWORD *)(qword_102311890 + 96);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v18, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_64;
  }
LABEL_61:
  v19 = *(_QWORD *)(v5 + 104);
  if (!v19)
    v19 = *(_QWORD *)(qword_102311890 + 104);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v19, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_64:
  v20 = *(_QWORD *)(v5 + 112);
  if (!v20)
    v20 = *(_QWORD *)(qword_102311890 + 112);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v20, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_70;
  }
LABEL_67:
  v21 = *(_QWORD *)(v5 + 120);
  if (!v21)
    v21 = *(_QWORD *)(qword_102311890 + 120);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v21, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_73;
  }
LABEL_70:
  v22 = *(_QWORD *)(v5 + 128);
  if (!v22)
    v22 = *(_QWORD *)(qword_102311890 + 128);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v22, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_76;
  }
LABEL_73:
  v23 = *(_QWORD *)(v5 + 136);
  if (!v23)
    v23 = *(_QWORD *)(qword_102311890 + 136);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v23, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_79;
  }
LABEL_76:
  v24 = *(_QWORD *)(v5 + 144);
  if (!v24)
    v24 = *(_QWORD *)(qword_102311890 + 144);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v24, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_82;
  }
LABEL_79:
  v25 = *(_QWORD *)(v5 + 152);
  if (!v25)
    v25 = *(_QWORD *)(qword_102311890 + 152);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v25, a2, a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      return result;
    goto LABEL_85;
  }
LABEL_82:
  v26 = *(_QWORD *)(v5 + 160);
  if (!v26)
    v26 = *(_QWORD *)(qword_102311890 + 160);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v26, a2, a4);
  if ((*(_DWORD *)(v5 + 184) & 0x200000) != 0)
  {
LABEL_85:
    v27 = *(_QWORD *)(v5 + 168);
    if (!v27)
      v27 = *(_QWORD *)(qword_102311890 + 168);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v27, a2, a4);
  }
  return result;
}

void sub_100EA3EC4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100EA174C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EA3F10()
{
  return 1;
}

_QWORD *sub_100EA3F18@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.LocationControllerLogEntry");
}

uint64_t sub_100EA3F2C(uint64_t a1)
{
  _OWORD *v2;

  v2 = (_OWORD *)(a1 + 328);
  *(_QWORD *)a1 = dispatch_queue_create("com.apple.CLWorkoutSessionMetrics", 0);
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 26;
  *(_DWORD *)(a1 + 72) = -1;
  *(_BYTE *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 96) = xmmword_101BAFEE0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_QWORD *)(a1 + 232) = 26;
  *(_QWORD *)(a1 + 240) = -1;
  *(_QWORD *)(a1 + 248) = -1;
  *(_DWORD *)(a1 + 256) = -1;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_BYTE *)(a1 + 324) = 0;
  *v2 = xmmword_101C2CDD0;
  v2[1] = xmmword_101BB6FC0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 3;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 521) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)((char *)v2 + 212) = xmmword_101C24B50;
  *(_DWORD *)(a1 + 556) = -1;
  *(_WORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 562) = 0;
  *(_QWORD *)(a1 + 564) = 0x1FFFFFFFFLL;
  *(_WORD *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 578) = 0;
  *(_QWORD *)(a1 + 584) = 26;
  *(_DWORD *)(a1 + 592) = -1;
  return a1;
}

void sub_100EA4060(id a1)
{
  operator new();
}

void sub_100EA4094(uint64_t a1)
{
  uint64_t v7;
  __int128 v8;
  _BYTE v9[19];
  __int128 v10;
  _BYTE v11[80];
  __int128 v12;
  _QWORD v13[9];
  _BYTE v14[80];

  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)v9 = 0;
  *(_DWORD *)&v9[11] = 0;
  *(_QWORD *)&v10 = 26;
  *((_QWORD *)&v10 + 1) = -1;
  *(_QWORD *)v11 = -1;
  *(_DWORD *)&v11[8] = -1;
  memset(&v11[12], 0, 65);
  LOBYTE(v12) = 0;
  DWORD1(v12) = 0;
  *((_QWORD *)&v12 + 1) = 3;
  v13[0] = 0;
  memset(v14, 0, 57);
  memset((char *)&v13[1] + 2, 0, 56);
  *(_OWORD *)&v14[60] = xmmword_101C24B50;
  *(_DWORD *)&v14[76] = -1;
  *(_OWORD *)(a1 + 232) = v10;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v9[3];
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)&v11[16];
  *(_OWORD *)(a1 + 280) = *(_OWORD *)&v11[32];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 328) = xmmword_101C2CDD0;
  *(_OWORD *)(a1 + 344) = xmmword_101BB6FC0;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)&v11[48];
  *(_OWORD *)(a1 + 312) = *(_OWORD *)&v11[64];
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)((char *)v13 + 2);
  *(_OWORD *)(a1 + 360) = v12;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)((char *)&v13[2] + 2);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)((char *)&v13[4] + 2);
  v7 = a1 + 456;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = *(_OWORD *)((char *)&v13[6] + 2);
  *(_QWORD *)(v7 + 16) = 0;
  sub_1006D24A8((_QWORD *)(a1 + 480), (uint64_t)v14);
  v8 = *(_OWORD *)&v14[64];
  *(_OWORD *)(a1 + 528) = *(_OWORD *)&v14[48];
  *(_OWORD *)(a1 + 544) = v8;
  sub_100544F70(v14);
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 140));
  *(_QWORD *)(a1 + 64) = 26;
  *(_DWORD *)(a1 + 72) = -1;
  *(_WORD *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 578) = 0;
  *(_QWORD *)(a1 + 584) = 26;
  *(_DWORD *)(a1 + 592) = -1;
}

void sub_100EA42AC(dispatch_queue_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  NSObject *v8;
  _QWORD v9[7];
  char v10;

  dispatch_assert_queue_not_V2(*a1);
  v8 = *a1;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100EA4330;
  v9[3] = &unk_1021528C0;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v10 = a4;
  dispatch_sync(v8, v9);
}

void sub_100EA4330(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint8_t buf[4];
  uint64_t v56;
  __int16 v57;
  uint64_t v58;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  switch(*(_QWORD *)(v2 + 16))
  {
    case 1:
      if (*(_QWORD *)(v2 + 112) == 33 && *(_DWORD *)(v4 + 136))
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021901D8);
        v5 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
        {
          v6 = *(_QWORD *)(a1 + 40);
          v7 = v6 + 64;
          v8 = *(_QWORD *)(v6 + 112);
          *(_DWORD *)buf = 136315394;
          v56 = v7;
          v57 = 2048;
          v58 = v8;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Workouttype is MultisportTransition and updating transition time for session : %s and activity %ld", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021901D8);
          v44 = *(_QWORD *)(a1 + 40);
          v45 = v44 + 64;
          v46 = *(_QWORD *)(v44 + 112);
          v51 = 136315394;
          v52 = v45;
          v53 = 2048;
          v54 = v46;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Workouttype is MultisportTransition and updating transition time for session : %s and activity %ld", (const char *)&v51, 22);
          v48 = (uint8_t *)v47;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSessionMetrics::handleWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionPriors &, BOOL)_block_invoke", "%s\n", v47);
          if (v48 != buf)
            free(v48);
        }
        *(_DWORD *)(v4 + 528) = (int)(*(double *)(*(_QWORD *)(a1 + 40) + 24)
                                    - (double)*(int *)(v4 + 136)
                                    + (double)*(int *)(v4 + 528));
        *(_DWORD *)(v4 + 136) = 0;
      }
      return;
    case 7:
      *(_QWORD *)(v4 + 368) = *(_QWORD *)(v2 + 120);
      return;
    case 8:
      *(_BYTE *)(v4 + 9) = 1;
      return;
    case 0xALL:
      sub_100EA4094(*(_QWORD *)(a1 + 32));
      return;
    case 0xBLL:
      *(_BYTE *)(v4 + 10) = 1;
      return;
    case 0xDLL:
      v9 = *(unsigned __int8 *)(v4 + 9);
      v10 = *(unsigned __int8 *)(v4 + 10);
      sub_100EA4094(*(_QWORD *)(a1 + 32));
      uuid_unparse((const unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 64), (char *)(v4 + 184));
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(v11 + 80);
      if (v12 >= 2)
      {
        v13 = (_QWORD *)(v11 + 40);
        *(_BYTE *)(v4 + 376) = 1;
        *(_QWORD *)(v4 + 432) = v12;
        *(_OWORD *)(v4 + 440) = *(_OWORD *)v11;
        std::string::operator=((std::string *)(v4 + 456), (const std::string *)(v11 + 16));
        sub_1006D1EE4((_QWORD *)(v4 + 480), v13);
        if (*(_QWORD *)(v4 + 432))
        {
          v14 = 0;
          while (uuid_compare((const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 488)+ 8 * ((v14 + *(_QWORD *)(v4 + 512)) / 0x18uLL))+ 168 * ((v14 + *(_QWORD *)(v4 + 512)) % 0x18uLL)+ 16), (const unsigned __int8 *)(v4 + 440)))
          {
            if (*(_QWORD *)(v4 + 432) <= (unint64_t)++v14)
              goto LABEL_41;
          }
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021901D8);
          v20 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Multisport prior Overview Id doesn't match main overviewId", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_1021901D8);
            LOWORD(v51) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Multisport prior Overview Id doesn't match main overviewId", &v51, 2);
            v50 = (uint8_t *)v49;
            sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSessionMetrics::handleWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionPriors &, BOOL)_block_invoke", "%s\n", v49);
            if (v50 != buf)
              free(v50);
          }
        }
LABEL_41:
        *(_DWORD *)(v4 + 364) = *(_BYTE *)(a1 + 56) == 0;
      }
      *(_BYTE *)(v4 + 8) = 1;
      v21 = *(_QWORD **)(a1 + 40);
      *(_QWORD *)(v4 + 232) = v21[14];
      *(_DWORD *)(v4 + 240) = v21[7];
      *(_QWORD *)(v4 + 16) = v21[3];
      sub_100EA4B20((dispatch_queue_t *)v4);
      v22 = *(_QWORD *)(a1 + 40);
      v23 = *(unsigned __int8 *)(v22 + 144);
      *(_BYTE *)(v4 + 360) = v23;
      if (v23)
        *(_QWORD *)(v4 + 416) = *(_QWORD *)(v22 + 216);
      uuid_unparse((const unsigned __int8 *)(v22 + 80), (char *)(v4 + 377));
      if (v9)
        v24 = 2;
      else
        v24 = 1;
      if (v10)
        v24 = 3;
      *(_DWORD *)(v4 + 260) = v24;
      sub_100EA4B88((dispatch_queue_t *)v4);
      v25 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v25 + 24);
      *(_QWORD *)(v4 + 24) = 0xBFF0000000000000;
      v26 = *(_QWORD *)(v25 + 112);
      *(_QWORD *)(v4 + 64) = v26;
      v27 = *(_DWORD *)(v25 + 56);
      *(_DWORD *)(v4 + 72) = v27;
      v28 = *(_QWORD *)(a1 + 48);
      v29 = (_QWORD *)(v28 + 16);
      v30 = *(unsigned __int8 *)(v28 + 39);
      if ((v30 & 0x80) != 0)
      {
        v31 = *(_QWORD *)(v28 + 24);
        if (v31 != 17)
        {
          if (v31 != 27)
          {
LABEL_65:
            v39 = 0;
            goto LABEL_76;
          }
          v29 = (_QWORD *)*v29;
          goto LABEL_56;
        }
        v29 = (_QWORD *)*v29;
      }
      else if (v30 != 17)
      {
        if (v30 != 27)
          goto LABEL_65;
LABEL_56:
        v32 = (_QWORD *)*v29;
        v33 = v29[1];
        v34 = v29[2];
        v35 = *(_QWORD *)((char *)v29 + 19);
        v38 = v32 == (_QWORD *)0x6C7070612E6D6F63
           && v33 == 0x6F69737365532E65
           && v34 == 0x72656B636172546ELL
           && v35 == 0x70704172656B6361;
        goto LABEL_73;
      }
      v40 = (_QWORD *)*v29;
      v41 = v29[1];
      v42 = *((unsigned __int8 *)v29 + 16);
      v38 = v40 == (_QWORD *)0x6C7070612E6D6F63 && v41 == 0x73656E7469462E65 && v42 == 115;
LABEL_73:
      v39 = v38;
LABEL_76:
      *(_BYTE *)(v4 + 576) = v39 ^ 1;
      *(_QWORD *)(v4 + 584) = v26;
      *(_DWORD *)(v4 + 592) = v27;
      return;
    case 0xELL:
      if (*(_QWORD *)(v2 + 112) == 33)
      {
        *(_DWORD *)(v4 + 136) = (int)*(double *)(v2 + 24);
        if (*(_DWORD *)(v4 + 364) == 1)
          *(_DWORD *)(v4 + 364) = 2;
      }
      v15 = uuid_compare((const unsigned __int8 *)(v4 + 140), (const unsigned __int8 *)(v2 + 64));
      v16 = *(_QWORD *)(a1 + 40);
      if (!v15 && *(_QWORD *)(v16 + 112) != 33)
      {
        ++*(_DWORD *)(v4 + 424);
        uuid_copy((unsigned __int8 *)(v4 + 140), (const unsigned __int8 *)(v16 + 64));
        v16 = *(_QWORD *)(a1 + 40);
      }
      *(_QWORD *)(v4 + 64) = *(_QWORD *)(v16 + 112);
      *(_DWORD *)(v4 + 72) = *(_QWORD *)(v16 + 56);
      return;
    case 0xFLL:
      if (*(_BYTE *)(v4 + 8))
      {
        v17 = *(double *)(v2 + 24);
        *(double *)(v4 + 24) = v17;
        *(_DWORD *)(v4 + 224) += (int)(v17 - *(double *)(v4 + 16));
        *(_BYTE *)(v4 + 8) = 0;
        v18 = (uint64_t)sub_1008293CC(a1, a2);
        if ((_DWORD)v18)
        {
          sub_100197040();
          v18 = sub_100195F08();
          if ((_DWORD)v18)
            sub_100EA4BF0(v4);
        }
        if (sub_1008293CC(v18, v19))
        {
          sub_100197040();
          if (sub_1000C4240())
            sub_100EA4E48(v4);
        }
      }
      return;
    case 0x10:
      ++*(_DWORD *)(v4 + 428);
      *(_QWORD *)(v4 + 168) = *(_QWORD *)(v2 + 24);
      return;
    case 0x11:
      *(double *)(v4 + 176) = *(double *)(v4 + 176) + *(double *)(v2 + 24) - *(double *)(v4 + 168);
      return;
    default:
      return;
  }
}

void sub_100EA4B20(dispatch_queue_t *a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_assert_queue_V2(*a1);
  v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100EA52AC;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_100EA4B88(dispatch_queue_t *a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_assert_queue_V2(*a1);
  v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100EA5530;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_100EA4BF0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _QWORD v5[5];
  _QWORD v6[5];
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  if (sub_100EA6248(a1))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021901D8);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v12 = a1 + 184;
      v13 = 2080;
      v14 = a1 + 377;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021901D8);
      v7 = 136315394;
      v8 = a1 + 184;
      v9 = 2080;
      v10 = a1 + 377;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s", (const char *)&v7, 22);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSessionMetrics::sendEventToCoreAnalyticsWatch()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100EA63C0;
    v6[3] = &unk_102166DC0;
    v6[4] = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FitnessSession"), v6);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100EA6A94;
    v5[3] = &unk_102131FE8;
    v5[4] = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.CMBatchedSensorUsage"), v5);
  }
  sub_100EA4094(a1);
}

void sub_100EA4E48(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _QWORD v5[5];
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  if (sub_100EA6338(a1))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021901D8);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v11 = a1 + 184;
      v12 = 2080;
      v13 = a1 + 377;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021901D8);
      v6 = 136315394;
      v7 = a1 + 184;
      v8 = 2080;
      v9 = a1 + 377;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s", (const char *)&v6, 22);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSessionMetrics::sendEventToCoreAnalyticsPhone()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100EA6BA8;
    v5[3] = &unk_102166DC0;
    v5[4] = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FitnessSessionPhone"), v5);
  }
  sub_100EA4094(a1);
}

void sub_100EA5068(dispatch_queue_t *a1, char a2)
{
  NSObject *v4;
  _QWORD v5[5];
  char v6;

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA50D8;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100EA50D8(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
    ++*(_DWORD *)(*(_QWORD *)(result + 32) + 252);
  return result;
}

void sub_100EA50F4(dispatch_queue_t *a1, float a2)
{
  NSObject *v4;
  _QWORD v5[5];
  float v6;

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA516C;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

float sub_100EA516C(uint64_t a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    result = *(float *)(a1 + 40) + *(float *)(v1 + 32);
    *(float *)(v1 + 32) = result;
  }
  return result;
}

void sub_100EA518C(dispatch_queue_t *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA51F8;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

double sub_100EA51F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  result = *(double *)v2;
  *(_DWORD *)(v1 + 564) = (int)*(double *)v2;
  *(_DWORD *)(v1 + 568) = *(_DWORD *)(v2 + 8);
  return result;
}

void sub_100EA5214(dispatch_queue_t *a1, char a2, char a3)
{
  NSObject *v6;
  _QWORD v7[5];
  char v8;
  char v9;

  dispatch_assert_queue_not_V2(*a1);
  v6 = *a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100EA5294;
  v7[3] = &unk_102173700;
  v7[4] = a1;
  v8 = a2;
  v9 = a3;
  dispatch_sync(v6, v7);
}

uint64_t sub_100EA5294(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  *(_BYTE *)(v1 + 560) = *(_BYTE *)(result + 40);
  *(_BYTE *)(v1 + 562) = *(_BYTE *)(result + 41);
  return result;
}

void sub_100EA52AC(uint64_t a1)
{
  uint64_t v1;
  const __CFBoolean *v2;
  const __CFBoolean *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("EnableAutoPause"), CFSTR("com.apple.nanolifestyle.sessiontrackerapp"), CFSTR("mobile"), kCFPreferencesAnyHost);
  if (v2)
  {
    v3 = v2;
    *(_BYTE *)(v1 + 561) = CFBooleanGetValue(v2) != 0;
    CFRelease(v3);
  }
}

void sub_100EA5318(dispatch_queue_t *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA5384;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100EA5384(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    switch(**(_DWORD **)(result + 40))
    {
      case 1:
        ++*(_DWORD *)(v1 + 268);
        goto LABEL_17;
      case 2:
        ++*(_DWORD *)(v1 + 272);
        goto LABEL_17;
      case 3:
        ++*(_DWORD *)(v1 + 276);
        goto LABEL_17;
      case 4:
        ++*(_DWORD *)(v1 + 280);
        goto LABEL_17;
      case 5:
        ++*(_DWORD *)(v1 + 284);
        goto LABEL_17;
      case 6:
        ++*(_DWORD *)(v1 + 288);
        goto LABEL_17;
      case 7:
        ++*(_DWORD *)(v1 + 292);
        goto LABEL_17;
      case 8:
        ++*(_DWORD *)(v1 + 296);
        goto LABEL_17;
      case 9:
        ++*(_DWORD *)(v1 + 300);
        goto LABEL_17;
      case 0xA:
        ++*(_DWORD *)(v1 + 304);
        goto LABEL_17;
      case 0xB:
        ++*(_DWORD *)(v1 + 308);
        goto LABEL_17;
      case 0xC:
        ++*(_DWORD *)(v1 + 312);
        goto LABEL_17;
      case 0xD:
        ++*(_DWORD *)(v1 + 316);
        goto LABEL_17;
      case 0xE:
        ++*(_DWORD *)(v1 + 320);
LABEL_17:
        ++*(_DWORD *)(v1 + 264);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_100EA54A8(dispatch_queue_t *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA5514;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100EA5514(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 8))
    *(_DWORD *)(v1 + 336) = **(_DWORD **)(result + 40);
  return result;
}

void sub_100EA5530(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  __int16 v17;
  void *__p;
  char *v19;
  uint64_t v20;
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
    v2 = sub_101125448();
    sub_101125B34(v2, &__p);
    v3 = (char *)__p;
    v4 = v19;
    if (__p == v19)
      goto LABEL_17;
    v5 = (char *)__p + 144;
    while (*(v5 - 36))
    {
      v6 = v5 == v19;
      v5 += 144;
      if (v6)
        goto LABEL_15;
    }
    v7 = v5 - 144;
    if (v5 - 144 != v19)
    {
      while (v5 != v4)
      {
        if (v5[108])
        {
          *(_OWORD *)v7 = *(_OWORD *)v5;
          v8 = *((_OWORD *)v5 + 1);
          v9 = *((_OWORD *)v5 + 2);
          v10 = *((_OWORD *)v5 + 4);
          *((_OWORD *)v7 + 3) = *((_OWORD *)v5 + 3);
          *((_OWORD *)v7 + 4) = v10;
          *((_OWORD *)v7 + 1) = v8;
          *((_OWORD *)v7 + 2) = v9;
          v11 = *((_OWORD *)v5 + 5);
          v12 = *((_OWORD *)v5 + 6);
          v13 = *((_OWORD *)v5 + 8);
          *((_OWORD *)v7 + 7) = *((_OWORD *)v5 + 7);
          *((_OWORD *)v7 + 8) = v13;
          *((_OWORD *)v7 + 5) = v11;
          *((_OWORD *)v7 + 6) = v12;
          v7 += 144;
        }
        v5 += 144;
      }
    }
    if (v7 != v4)
    {
      v4 = v7;
      v19 = v7;
    }
LABEL_15:
    if (v3 == v4)
    {
LABEL_17:
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021901F8);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLWorkoutSessionMetrics, no VO2Max records found at start of workout session", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021901F8);
        v17 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "CLWorkoutSessionMetrics, no VO2Max records found at start of workout session", &v17, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSessionMetrics::queryVO2Max()_block_invoke", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    else
    {
      *(_DWORD *)(v1 + 332) = (int)*((double *)v4 - 14);
    }
    if (__p)
    {
      v19 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_100EA57A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100EA57C8(dispatch_queue_t *a1, char a2, char a3)
{
  NSObject *v6;
  _QWORD v7[5];
  char v8;
  char v9;

  dispatch_assert_queue_not_V2(*a1);
  v6 = *a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100EA5848;
  v7[3] = &unk_102173700;
  v7[4] = a1;
  v8 = a2;
  v9 = a3;
  dispatch_sync(v6, v7);
}

CFAbsoluteTime sub_100EA5848(uint64_t a1)
{
  uint64_t v2;
  CFAbsoluteTime result;
  double v4;
  double v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  result = CFAbsoluteTimeGetCurrent();
  v4 = *(double *)(v2 + 16);
  if (v4 < result)
  {
    if (*(_BYTE *)(v2 + 76))
    {
      v5 = *(double *)(v2 + 88);
      if (v4 >= v5)
        v5 = *(double *)(v2 + 16);
      *(double *)(v2 + 80) = *(double *)(v2 + 80) + result - v5;
    }
    *(_BYTE *)(v2 + 76) = *(_BYTE *)(a1 + 40);
    *(CFAbsoluteTime *)(v2 + 88) = result;
    if (*(_BYTE *)(a1 + 41))
    {
      *(_BYTE *)(v2 + 112) = 1;
      *(CFAbsoluteTime *)(v2 + 104) = result;
    }
    else if (!*(_BYTE *)(v2 + 112))
    {
      return result;
    }
    v6 = 16;
    if (v4 < *(double *)(v2 + 104))
      v6 = 104;
    result = *(double *)(v2 + 96) + result - *(double *)(v2 + v6);
    *(CFAbsoluteTime *)(v2 + 96) = result;
  }
  return result;
}

double sub_100EA58E8(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double result;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v3 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  if (*(_BYTE *)(a1 + 76))
  {
    v4 = *(double *)(a1 + 88);
    if (v3 >= v4)
      v4 = *(double *)(a1 + 16);
    v5 = *(double *)(a1 + 80) + v2 - v4;
    *(double *)(a1 + 80) = v5;
  }
  else
  {
    v5 = *(double *)(a1 + 80);
  }
  result = v5 / (v2 - v3) * 100.0;
  *(_DWORD *)(a1 + 328) = (int)result;
  return result;
}

double sub_100EA5954(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double result;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v3 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  if (*(_BYTE *)(a1 + 112))
  {
    v4 = *(double *)(a1 + 104);
    if (v3 >= v4)
      v4 = *(double *)(a1 + 16);
    v5 = *(double *)(a1 + 96) + v2 - v4;
    *(double *)(a1 + 96) = v5;
  }
  else
  {
    v5 = *(double *)(a1 + 96);
  }
  result = v5 / (v2 - v3) * 100.0;
  *(_DWORD *)(a1 + 540) = (int)result;
  return result;
}

void sub_100EA59C0(dispatch_queue_t *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA5A2C;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100EA5A2C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 8))
    *(_DWORD *)(v1 + 344) = **(_DWORD **)(result + 40);
  return result;
}

void sub_100EA5A48(dispatch_queue_t *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA5AB8;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100EA5AB8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 8))
    *(_QWORD *)(v1 + 128) = *(unsigned int *)(result + 40);
  return result;
}

void sub_100EA5AD0(dispatch_queue_t *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA5B40;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100EA5B40(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 8))
    *(_QWORD *)(v1 + 120) = *(unsigned int *)(result + 40);
  return result;
}

void sub_100EA5B58(NSObject **a1, __int128 *a2)
{
  NSObject *v3;
  _QWORD block[5];
  __int128 __p;
  uint64_t v6;
  int v7;

  v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100EA5C00;
  block[3] = &unk_1021901A8;
  block[4] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  v7 = *((_DWORD *)a2 + 6);
  dispatch_async(v3, block);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
}

uint64_t sub_100EA5C00(uint64_t result)
{
  uint64_t v1;
  const void **v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    v2 = (const void **)(result + 40);
    v3 = *(unsigned __int8 *)(result + 63);
    v4 = *(_QWORD *)(result + 48);
    if ((v3 & 0x80u) == 0)
      v5 = *(unsigned __int8 *)(result + 63);
    else
      v5 = *(_QWORD *)(result + 48);
    v6 = qword_102308D08;
    if (byte_102308D17 >= 0)
      v6 = byte_102308D17;
    if (v5 == v6)
    {
      if (byte_102308D17 >= 0)
        v7 = &qword_102308D00;
      else
        v7 = (uint64_t *)qword_102308D00;
      if ((v3 & 0x80) == 0)
      {
        if (*(_BYTE *)(result + 63))
        {
          v8 = (unsigned __int8 *)(result + 40);
          v9 = *(unsigned __int8 *)(result + 63);
          while (*v8 == *(unsigned __int8 *)v7)
          {
            ++v8;
            v7 = (uint64_t *)((char *)v7 + 1);
            if (!--v9)
              goto LABEL_29;
          }
          goto LABEL_18;
        }
LABEL_29:
        *(_BYTE *)(v1 + 577) = 1;
        goto LABEL_32;
      }
      result = memcmp(*v2, v7, v4);
      if (!(_DWORD)result)
        goto LABEL_29;
    }
LABEL_18:
    v10 = qword_102308D28;
    if (byte_102308D37 >= 0)
      v10 = byte_102308D37;
    if (v5 != v10)
      goto LABEL_32;
    if (byte_102308D37 >= 0)
      v11 = &qword_102308D20;
    else
      v11 = (uint64_t *)qword_102308D20;
    if ((v3 & 0x80) == 0)
    {
      if ((_DWORD)v3)
      {
        while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v11)
        {
          v2 = (const void **)((char *)v2 + 1);
          v11 = (uint64_t *)((char *)v11 + 1);
          if (!--v3)
            goto LABEL_31;
        }
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    result = memcmp(*v2, v11, v4);
    if (!(_DWORD)result)
LABEL_31:
      *(_BYTE *)(v1 + 578) = 1;
LABEL_32:
    *(_QWORD *)(v1 + 584) = *(_QWORD *)(v1 + 64);
    *(_DWORD *)(v1 + 592) = *(_DWORD *)(v1 + 72);
  }
  return result;
}

_QWORD *sub_100EA5D60(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v5;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    result[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)result = v5;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_100EA5DB4(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

BOOL sub_100EA5DC8(uint64_t a1)
{
  int v2;
  double v3;
  NSObject *v4;
  int v5;
  _BOOL8 result;
  int v7;
  double v8;
  uint8_t *v9;
  uint8_t *v10;
  NSObject *v11;
  int v12;
  _BOOL4 v13;
  uint8_t *v14;
  double v15;
  int v16;
  NSObject *v17;
  int v18;
  _BOOL4 v19;
  _DWORD v20[4];
  uint8_t buf[4];
  int v22;
  double v23;

  v2 = *(_DWORD *)(a1 + 224);
  if (v2 <= 0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021901D8);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_DWORD *)(a1 + 224);
      *(_DWORD *)buf = 67109120;
      v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Discarding workout CA event, invalid session duration %d", buf, 8u);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v13)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021901D8);
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Discarding workout CA event, invalid session duration %d", v20);
    goto LABEL_30;
  }
  v3 = (double)v2;
  sub_1018BEA14(buf, "WorkoutSessionMinSessionLengthSeconds", &qword_101C2CE18, 0);
  if (v23 <= v3)
  {
    v16 = *(_DWORD *)(a1 + 36);
    if (v16 > 0)
    {
      *(_DWORD *)(a1 + 244) = llroundf((float)((float)*(int *)(a1 + 56) * 100.0) / (float)v16);
      *(_DWORD *)(a1 + 256) = llroundf((float)(*(float *)(a1 + 32) * 100.0) / (float)v16);
      return 1;
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021901D8);
    v17 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)buf = 67109120;
      v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Discarding workout CA event, invalid total epochs %d", buf, 8u);
    }
    v19 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v19)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021901D8);
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Discarding workout CA event, invalid total epochs %d", v20);
LABEL_30:
    v10 = v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutSessionMetrics::processMetrics()", "%s\n", v15);
LABEL_31:
    if (v10 != buf)
      free(v10);
    return 0;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021901D8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 224);
    *(_DWORD *)buf = 67109120;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Discarding workout CA event, duration %d does not meet kWorkoutSessionMinSessionLength", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021901D8);
    v7 = *(_DWORD *)(a1 + 224);
    v20[0] = 67109120;
    v20[1] = v7;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Discarding workout CA event, duration %d does not meet kWorkoutSessionMinSessionLength", v20);
    v10 = v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutSessionMetrics::processMetrics()", "%s\n", v8);
    goto LABEL_31;
  }
  return result;
}

BOOL sub_100EA6248(uint64_t a1)
{
  _BOOL8 v2;
  int v3;
  float v4;
  int v5;

  v2 = sub_100EA5DC8(a1);
  if (v2)
  {
    *(_DWORD *)(a1 + 248) = llroundf((float)((float)*(int *)(a1 + 52) * 100.0) / (float)*(int *)(a1 + 36));
    *(_BYTE *)(a1 + 324) = *(_BYTE *)(a1 + 76);
    sub_100EA58E8(a1);
    v3 = *(_DWORD *)(a1 + 48);
    v4 = (float)*(int *)(a1 + 36);
    v5 = llroundf((float)((float)*(int *)(a1 + 40) * 100.0) / v4);
    *(_DWORD *)(a1 + 340) = llroundf((float)((float)*(int *)(a1 + 44) * 100.0) / v4);
    *(_DWORD *)(a1 + 348) = v5;
    *(_DWORD *)(a1 + 352) = llroundf((float)((float)v3 * 100.0) / v4);
    *(_DWORD *)(a1 + 356) = (*(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 120)) / 100;
    *(_DWORD *)(a1 + 556) = (int)*(double *)(a1 + 176);
  }
  return v2;
}

BOOL sub_100EA6338(uint64_t a1)
{
  _BOOL8 v2;

  v2 = sub_100EA5DC8(a1);
  if (v2)
  {
    *(_BYTE *)(a1 + 536) = *(_BYTE *)(a1 + 112);
    sub_100EA5954(a1);
    *(_DWORD *)(a1 + 548) = llround(*(double *)(a1 + 160) * 100.0 / (float)((float)*(int *)(a1 + 36) * 2.56));
    *(_DWORD *)(a1 + 556) = (int)*(double *)(a1 + 176);
  }
  return v2;
}

uint64_t sub_100EA63B4(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 552) = *a2;
  return result;
}

id sub_100EA63C0(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD v8[10];
  _QWORD v9[10];
  _QWORD v10[39];
  _QWORD v11[39];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v10[0] = CFSTR("sessionId");
  v11[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1 + 184);
  v10[1] = CFSTR("sessionDuration");
  v11[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 224));
  v10[2] = CFSTR("workoutType");
  v11[2] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 232));
  v10[3] = CFSTR("otherWorkoutLabel");
  v11[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 240));
  v10[4] = CFSTR("pctSessionGPSSourcePhone");
  v11[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 244));
  v10[5] = CFSTR("pctSessionGPSSourceWatch");
  v11[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 248));
  v10[6] = CFSTR("exerciseMinuteThreshold");
  v11[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 564));
  v10[7] = CFSTR("exerciseMinutes");
  v11[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 252));
  v10[8] = CFSTR("averageWorkoutIntensity");
  v11[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 256));
  v10[9] = CFSTR("workoutStartType");
  v11[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 260));
  v10[10] = CFSTR("autoStartEnabled");
  v11[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 560));
  v10[11] = CFSTR("autoPauseEnabled");
  v11[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 561));
  v10[12] = CFSTR("autoStopEnabled");
  v11[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 562));
  v10[13] = CFSTR("numberOfStopAlerts");
  v11[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 264));
  v10[14] = CFSTR("numStopAlertStopModel");
  v11[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 268));
  v10[15] = CFSTR("numStopAlertSteps");
  v11[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 272));
  v10[16] = CFSTR("numStopAlertOffWrist");
  v11[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 276));
  v10[17] = CFSTR("numStopAlertOnCharger");
  v11[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 280));
  v10[18] = CFSTR("numStopAlertHeartRate");
  v11[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 284));
  v10[19] = CFSTR("numStopAlertTurns");
  v11[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 288));
  v10[20] = CFSTR("numStopAlertTier2Classification");
  v11[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 292));
  v10[21] = CFSTR("numStopAlertConnectedToVehicleBluetooth");
  v11[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 296));
  v10[22] = CFSTR("numStopAlertVehicleSpeed");
  v11[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 300));
  v10[23] = CFSTR("numStopAlertExitedGeoFence");
  v11[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 304));
  v10[24] = CFSTR("numStopAlertVehicleSpeedArmConstrained");
  v11[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 308));
  v10[25] = CFSTR("numStopAlertHRHeading");
  v11[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 312));
  v10[26] = CFSTR("numStopAlertDelayedPreferenceChange");
  v11[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 316));
  v10[27] = CFSTR("numStopAlertUnsupportedWorkoutType");
  v11[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 320));
  v10[28] = CFSTR("sourceOfExerciseMinuteThreshold");
  v11[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 568));
  v10[29] = CFSTR("companionAvailable");
  v11[29] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 324));
  v10[30] = CFSTR("idsAvailability");
  v11[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 328));
  v10[31] = CFSTR("hrSource");
  v11[31] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 336));
  v10[32] = CFSTR("eVO2Max");
  v11[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 332));
  v10[33] = CFSTR("loadCalibrationUtilization");
  v11[33] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 340));
  v10[34] = CFSTR("PALEstimationStatus");
  v11[34] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 344));
  v10[35] = CFSTR("pctPedestrianGPSAvailable");
  v11[35] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 348));
  v10[36] = CFSTR("pctPedestrianCalibrated");
  v11[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 352));
  v10[37] = CFSTR("workoutElevationError");
  v11[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 356));
  v10[38] = CFSTR("totalManualPauseDuration");
  v11[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 556));
  objc_msgSend(v2, "addEntriesFromDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 39));
  v3 = *(_QWORD *)(v1 + 520);
  if (v3 >= 1)
  {
    v4 = 0;
    if (v3 >= 10)
      v5 = 10;
    else
      v5 = *(_QWORD *)(v1 + 520);
    do
    {
      v6 = +[CMWorkout workoutName:](CMWorkout, "workoutName:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 488) + 8 * ((v4 + *(_QWORD *)(v1 + 512)) / 0x18uLL))+ 168 * ((v4 + *(_QWORD *)(v1 + 512)) % 0x18uLL)+ 48));
      objc_msgSend(v2, "setObject:forKey:", v6, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("multisportPrior%d"), ++v4));
    }
    while (v5 != v4);
  }
  v8[0] = CFSTR("isMultisport");
  v9[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 376));
  v8[1] = CFSTR("isFitnessPlus");
  v9[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 360));
  v8[2] = CFSTR("detectedLocationType");
  v9[2] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 368));
  v8[3] = CFSTR("sessionOverviewId");
  v9[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1 + 377);
  v8[4] = CFSTR("multisportProgressionType");
  v9[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 364));
  v8[5] = CFSTR("workoutMediaType");
  v9[5] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 416));
  v8[6] = CFSTR("numWorkoutLegs");
  v9[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 424));
  v8[7] = CFSTR("countManualPauses");
  v9[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 428));
  v8[8] = CFSTR("numMultisportPriors");
  v9[8] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(v1 + 432));
  v8[9] = CFSTR("totalTransitionDuration");
  v9[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 528));
  objc_msgSend(v2, "addEntriesFromDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 10));
  return v2;
}

NSDictionary *sub_100EA6A94(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  _QWORD v4[6];

  v1 = *(_QWORD *)(a1 + 32);
  v3[0] = CFSTR("isHighFrequencyAccelActive");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 577));
  v3[1] = CFSTR("isHighFrequencyDeviceMotionActive");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 578));
  v3[2] = CFSTR("isMultisportWorkout");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 376));
  v3[3] = CFSTR("isThirdPartyWorkout");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 576));
  v3[4] = CFSTR("workoutLabel");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 592));
  v3[5] = CFSTR("workoutType");
  v4[5] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 584));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

id sub_100EA6BA8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  _QWORD v4[16];
  _QWORD v5[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v4[0] = CFSTR("sessionId");
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1 + 184);
  v4[1] = CFSTR("sessionDuration");
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 224));
  v4[2] = CFSTR("workoutType");
  v5[2] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 232));
  v4[3] = CFSTR("otherWorkoutLabel");
  v5[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 240));
  v4[4] = CFSTR("pctSessionGPSSourcePhone");
  v5[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 244));
  v4[5] = CFSTR("isFitnessPlus");
  v5[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 360));
  v4[6] = CFSTR("detectedLocationType");
  v5[6] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 368));
  v4[7] = CFSTR("countManualPauses");
  v5[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 428));
  v4[8] = CFSTR("watchAvailable");
  v5[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v1 + 536));
  v4[9] = CFSTR("pctWatchConnected");
  v5[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 540));
  v4[10] = CFSTR("workoutMediaType");
  v5[10] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 416));
  v4[11] = CFSTR("steps");
  v5[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 544));
  v4[12] = CFSTR("pctActiveTime");
  v5[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 548));
  v4[13] = CFSTR("averageWorkoutIntensity");
  v5[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 256));
  v4[14] = CFSTR("phoneFitnessMode");
  v5[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 552));
  v4[15] = CFSTR("totalManualPauseDuration");
  v5[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 556));
  objc_msgSend(v2, "addEntriesFromDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 16));
  return v2;
}

void sub_100EA6E00(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100EA6E2C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100EA6E58()
{
  sub_1015A2E04(&qword_102308D00, "Acc800Fp");
  dword_102308D18 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, &qword_102308D00, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102308D20, "DmFp");
  dword_102308D38 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, &qword_102308D20, (void *)&_mh_execute_header);
}

void sub_100EA6EE4(uint64_t a1)
{
  sub_100F96154(a1);
}

void sub_100EA6F20(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_100F961B8(v1);
  _Unwind_Resume(a1);
}

void sub_100EA6F34(float32x2_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  NSObject *v5;
  __int16 *v6;
  unsigned int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  _DWORD v22[4];
  uint8_t buf[4];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v4 = a2[3];
  v27[0] = a2[2];
  v27[1] = v4;
  if (sub_100F97338())
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102190288);
    v5 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Device still has original rear camera. Using unit-specific calibration info", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102190288);
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Device still has original rear camera. Using unit-specific calibration info", v22, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v6 = (__int16 *)((unint64_t)&v25 | 0xA);
LABEL_27:
    sub_100F96F10(a1, v6);
    return;
  }
  v7 = sub_100F974AC();
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102190288);
  v8 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Rear camera was replaced. VCM actuator ID is %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102190288);
    v22[0] = 67109120;
    v22[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Rear camera was replaced. VCM actuator ID is %d", v22);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (v7 == 4)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102190288);
    v10 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Using generic Alps calibration info", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102190288);
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Using generic Alps calibration info", v22, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    v6 = (__int16 *)v27 + 7;
    goto LABEL_27;
  }
  if (v7 == 3)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102190288);
    v9 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Using generic Mitsumi calibration info", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102190288);
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Using generic Mitsumi calibration info", v22, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v6 = (__int16 *)&v26 + 6;
    goto LABEL_27;
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102190288);
  v11 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Unrecongized VCM actuator. Not performing compensation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102190288);
    LOWORD(v22[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Unrecongized VCM actuator. Not performing compensation", v22, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_100EA75F0(_DWORD *a1)
{
  sub_100F961B8(a1);
  operator delete();
}

void sub_100EA7614(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100EA7ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EA8214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EA87D0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void (**v4)(id, _QWORD);
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021902A8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138477827;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2APNSHelper,receiveAPNSToken,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021902A8);
    v6 = *(_QWORD *)(a1 + 32);
    v12 = 138477827;
    v13 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2APNSHelper,receiveAPNSToken,%{private}@", &v12, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CLEmergencyEED2APNSHelper connection:didReceiveToken:forTopic:identifier:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (objc_msgSend(*(id *)(a1 + 40), "fAPNSTokenCallback"))
  {
    v4 = (void (**)(id, _QWORD))objc_msgSend(*(id *)(a1 + 40), "fAPNSTokenCallback");
    v4[2](v4, *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021902A8);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2APNSHelper,receiveAPNSToken,nil fAPNSTokenCallback,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021902A8);
      LOWORD(v12) = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2APNSHelper,receiveAPNSToken,nil fAPNSTokenCallback,early return", &v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "-[CLEmergencyEED2APNSHelper connection:didReceiveToken:forTopic:identifier:]_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_100EA8E70(uint64_t a1)
{
  void (**v2)(id, id);
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (objc_msgSend(*(id *)(a1 + 32), "fAPNSMessageCallback"))
  {
    v2 = (void (**)(id, id))objc_msgSend(*(id *)(a1 + 32), "fAPNSMessageCallback");
    v2[2](v2, objc_msgSend(*(id *)(a1 + 40), "userInfo"));
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021902A8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2APNSHelper,receiveAPNSToken,nil fAPNSTokenCallback,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021902A8);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2APNSHelper,receiveAPNSToken,nil fAPNSTokenCallback,early return", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "-[CLEmergencyEED2APNSHelper connection:didReceiveIncomingMessage:]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100EA9228(uint64_t a1)
{
  void (**v2)(id);
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (objc_msgSend(*(id *)(a1 + 32), "fAPNSReconnectedCallback") && objc_msgSend(*(id *)(a1 + 32), "apsConnection"))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "apsConnection"), "setEnableCriticalReliability:", 1);
    v2 = (void (**)(id))objc_msgSend(*(id *)(a1 + 32), "fAPNSReconnectedCallback");
    v2[2](v2);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021902A8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2APNSHelper,connectionDidReconnect,nil fAPNSReconnectedCallback or apsConnection,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021902A8);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2APNSHelper,connectionDidReconnect,nil fAPNSReconnectedCallback or apsConnection,early return", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "-[CLEmergencyEED2APNSHelper connectionDidReconnect:]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100EA9470(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100EA949C()
{
  sub_1015A2E04(&qword_102308D48, "com.apple.eed.apnshelperqueue");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102308D48, (void *)&_mh_execute_header);
}

void sub_100EA9540(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;

  if (a2)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v4 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#loip received visit\", \"visit\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_100EAA200(a1, a2);
  }
  else
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v5 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#loip cannot request LOI location for a nil visit", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 16, "#loip cannot request LOI location for a nil visit", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLLoiLocationProvider::onVisit(CLVisit *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100EA9820(id a1)
{
  qword_102308D60 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLLoiLocationProviderSilo"));
}

uint64_t sub_100EA98D4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100EAA4F4;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102308D78 != -1)
    dispatch_once(&qword_102308D78, block);
  return qword_1023118A0;
}

uint64_t sub_100EA9C18(uint64_t a1, void *a2)
{
  uint64_t v3;
  id *v4;
  id v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD v15[5];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v3 = sub_1006DAF10(a1, "CLLoiLocationProvider", a2);
  *(_QWORD *)v3 = off_1021902F8;
  *(_QWORD *)(v3 + 120) = 0;
  v4 = (id *)(v3 + 120);
  *(_QWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 136) = 0xFFFF;
  *(_QWORD *)(v3 + 148) = 0;
  *(_QWORD *)(v3 + 140) = 0;
  *(_OWORD *)(v3 + 156) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v3 + 172) = _Q0;
  *(_OWORD *)(v3 + 188) = _Q0;
  *(_OWORD *)(v3 + 204) = _Q0;
  *(_DWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0xBFF0000000000000;
  *(_DWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 252) = 0xBFF0000000000000;
  *(_DWORD *)(v3 + 260) = 0x7FFFFFFF;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_BYTE *)(v3 + 288) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 300) = 0;
  *(_QWORD *)(v3 + 292) = 0;
  *(_QWORD *)(a1 + 128) = -[CLLoiLocationProviderRoutineAdapter initWithLoiLocationProvider:]([CLLoiLocationProviderRoutineAdapter alloc], "initWithLoiLocationProvider:", a1);
  v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
  *v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 128), objc_msgSend(*(id *)(a1 + 32), "silo"));
    objc_msgSend(*v4, "setDelegateEntityName:", "CLLoiLocationProvider");
    v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
    *(_QWORD *)(a1 + 296) = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100EA9EE4;
    v15[3] = &unk_10212ECA0;
    v15[4] = a1;
    objc_msgSend(v11, "setHandler:", v15);
  }
  else
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v12 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip error CLRoutineMonitor is not supported.\"}", buf, 0x12u);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
    }
    v13 = qword_1022A0178;
    if (os_signpost_enabled((os_log_t)qword_1022A0178))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#loip error CLRoutineMonitor is not supported.", "{\"msg%{public}.0s\":\"#loip error CLRoutineMonitor is not supported.\"}", buf, 0x12u);
    }
  }
  return a1;
}

void sub_100EA9ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006DB4AC(v1);
  _Unwind_Resume(a1);
}

void sub_100EA9EE4(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  _QWORD v5[5];

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v1 + 296), "setNextFireDelay:", 1.79769313e308);
  v2 = objc_alloc((Class)RTStoredVisitFetchOptions);
  v3 = objc_msgSend(v2, "initWithAscending:confidence:dateInterval:labelVisit:limit:", 0, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", RTVisitConfidenceHigh), 0, 1, &off_10221C290);
  v4 = *(void **)(v1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EA9FA8;
  v5[3] = &unk_10214C458;
  v5[4] = v1;
  objc_msgSend(v4, "fetchStoredVisitsWithOptions:withReply:", v3, v5);

}

void sub_100EA9FA8(uint64_t a1, void *a2, void *a3)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;

  if (a3)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v4 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_ERROR))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip error fetching visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
    }
    v5 = qword_1022A0178;
    if (os_signpost_enabled((os_log_t)qword_1022A0178))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#loip error fetching visits", "{\"msg%{public}.0s\":\"#loip error fetching visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = objc_msgSend(objc_alloc((Class)CLVisit), "initWithVisit:", objc_msgSend(a2, "firstObject"));
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v8 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#loip fetched most recent visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    sub_100EAA200(v6, v7);

  }
}

id sub_100EAA200(uint64_t a1, void *a2)
{
  id result;

  if (objc_msgSend(a2, "hasArrivalDate") && (objc_msgSend(a2, "hasDepartureDate") & 1) == 0)
    return sub_100EAADC8(a1, a2);
  result = objc_msgSend(a2, "hasArrivalDate");
  if ((_DWORD)result)
  {
    result = objc_msgSend(a2, "hasDepartureDate");
    if ((_DWORD)result)
      return (id)sub_100EAABA4(a1, 1);
  }
  return result;
}

uint64_t sub_100EAA278(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021902F8;
  sub_100EAA330(a1);

  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0xFFFF;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 156) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 172) = _Q0;
  *(_OWORD *)(a1 + 188) = _Q0;
  *(_OWORD *)(a1 + 204) = _Q0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 252) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 260) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  objc_msgSend(*(id *)(a1 + 296), "invalidate");

  *(_QWORD *)(a1 + 296) = 0;
  return sub_1006DB4AC(a1);
}

id sub_100EAA330(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  sub_1006DB4DC(a1);
  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021904F0);
  v2 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#loip stop leeching visits", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 1, "#loip stop leeching visits", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLoiLocationProvider::shutdown()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 120), "stopLeechingVisitsForClient:", *(_QWORD *)(a1 + 128));
}

void sub_100EAA4D0(uint64_t a1)
{
  sub_100EAA278(a1);
  operator delete();
}

void sub_100EAA4F4()
{
  operator new();
}

void sub_100EAA53C()
{
  operator delete();
}

uint64_t sub_100EAA560(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  double v7;
  int v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021904D0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@ClxLoi, registerForNotificationInternal, notification, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021904D0);
    v9 = *a2;
    v15[0] = 67240192;
    v15[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@ClxLoi, registerForNotificationInternal, notification, %{public}d", v15, 8);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLoiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1001B3B80();
  if (!*a2)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v6 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#loip register to leech visits", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
      LOWORD(v15[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 1, "#loip register to leech visits", v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLoiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    objc_msgSend(*(id *)(a1 + 120), "startLeechingVisitsForClient:", *(_QWORD *)(a1 + 128));
    objc_msgSend(*(id *)(a1 + 296), "nextFireDelay");
    if (v7 == 1.79769313e308)
      objc_msgSend(*(id *)(a1 + 296), "setNextFireDelay:", 10.0);
  }
  return 1;
}

uint64_t sub_100EAA888(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021904D0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@ClxLoi, unregisterForNotificationInternal, notification, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021904D0);
    v8 = *a2;
    v14[0] = 67240192;
    v14[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@ClxLoi, unregisterForNotificationInternal, notification, %{public}d", v14, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLoiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_10003DFD4(a1);
  if (!*a2)
  {
    *(_DWORD *)buf = 0;
    if (!sub_1001B7864(a1, (int *)buf, 1))
    {
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
      v6 = qword_1022A0178;
      if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#loip stop leeching visits", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0170 != -1)
          dispatch_once(&qword_1022A0170, &stru_1021904F0);
        LOWORD(v14[0]) = 0;
        LODWORD(v13) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 1, "#loip stop leeching visits", v14, v13);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLoiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      objc_msgSend(*(id *)(a1 + 120), "stopLeechingVisitsForClient:", *(_QWORD *)(a1 + 128));
    }
  }
  return 1;
}

uint64_t sub_100EAABA4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 136) = 0xFFFF;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 156) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 172) = _Q0;
  *(_OWORD *)(a1 + 188) = _Q0;
  *(_OWORD *)(a1 + 204) = _Q0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 252) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 260) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 232) = 13;
  *(_DWORD *)(a1 + 292) = 0;
  if (a2)
    return sub_100EAAC14(a1);
  return a1;
}

uint64_t sub_100EAAC14(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021904F0);
  v2 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#loip notify LOI location unavailable", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 1, "#loip notify LOI location unavailable", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLLoiLocationProvider::notifyLocationUnavailable()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_DWORD *)buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
}

id sub_100EAADC8(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (!objc_msgSend(objc_msgSend(a2, "_placeInference"), "_loiIdentifier"))
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v5 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#loip cannot request LOI location for a nil LOI identifier", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return (id)sub_100EAABA4(a1, 1);
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 1, "#loip cannot request LOI location for a nil LOI identifier", v9, 2);
    goto LABEL_21;
  }
  v3 = *(void **)(a1 + 120);
  if (v3)
    return objc_msgSend(v3, "fetchLocationOfInterestWithIdentifier:withReply:");
  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021904F0);
  v7 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#loip skip requesting Loi location as routine monitor is not up", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 1, "#loip skip requesting Loi location as routine monitor is not up", v9, 2);
LABEL_21:
    v8 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLLoiLocationProvider::updateLoiFromVisit(CLVisit *)", "%s\n", v6);
    if (v8 != buf)
      free(v8);
  }
  return (id)sub_100EAABA4(a1, 1);
}

void sub_100EAB090(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  int v12;
  double v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  void *v25;
  double v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  void *v32;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  int v44;
  int v45;
  int v46;
  id v47;
  NSObject *v48;
  id v49;
  _BOOL4 v50;
  uint64_t v51;
  const char *v52;
  uint8_t *v53;
  int v54;
  id v55;
  uint8_t buf[4];
  _BYTE v57[14];
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;

  v5 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v7 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_ERROR))
    {
      v8 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(_QWORD *)&v57[6] = "";
      v58 = 2113;
      v59 = v8;
      v60 = 2114;
      v61 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip error fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
    }
    v9 = qword_1022A0178;
    if (os_signpost_enabled((os_log_t)qword_1022A0178))
    {
      v10 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(_QWORD *)&v57[6] = "";
      v58 = 2113;
      v59 = v10;
      v60 = 2114;
      v61 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#loip error fetching LOI", "{\"msg%{public}.0s\":\"#loip error fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v11 = objc_msgSend(a3, "domain");
    if (!objc_msgSend(v11, "isEqualToString:", RTErrorDomain)
      || objc_msgSend(a3, "code") != (id)5 && objc_msgSend(a3, "code") != (id)8)
    {
      goto LABEL_43;
    }
    v12 = *(_DWORD *)(v5 + 304);
    if (v12 > 0)
      goto LABEL_43;
    *(_DWORD *)(v5 + 304) = v12 + 1;
    objc_msgSend(*(id *)(v5 + 296), "nextFireDelay");
    if (v13 == 1.79769313e308)
      objc_msgSend(*(id *)(v5 + 296), "setNextFireDelay:", 10.0);
  }
  if (!a2)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v17 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_ERROR))
    {
      v18 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(_QWORD *)&v57[6] = "";
      v58 = 2113;
      v59 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip received nil in return when fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
    }
    v19 = qword_1022A0178;
    if (!os_signpost_enabled((os_log_t)qword_1022A0178))
      goto LABEL_43;
    v20 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(_QWORD *)&v57[6] = "";
    v58 = 2113;
    v59 = v20;
    v21 = "#loip received nil in return when fetching LOI";
    v22 = "{\"msg%{public}.0s\":\"#loip received nil in return when fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@}";
    v23 = v19;
    v24 = 28;
LABEL_42:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v21, v22, buf, v24);
    goto LABEL_43;
  }
  if (!objc_msgSend(objc_msgSend(a2, "visits"), "count"))
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v14 = qword_1022A0178;
    if (!os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    v25 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(_QWORD *)&v57[6] = "";
    v58 = 2113;
    v59 = a2;
    v60 = 2113;
    v61 = v25;
    v16 = "{\"msg%{public}.0s\":\"#loip received LOI has no visit history\", \"loi\":%{private, location:escape_only}@, \""
          "loiIdentifier\":%{private, location:escape_only}@}";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0x26u);
LABEL_43:
    sub_100EAABA4(v5, 1);
    return;
  }
  if (objc_msgSend(objc_msgSend(a2, "location"), "referenceFrame") == 2)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v14 = qword_1022A0178;
    if (!os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    v15 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(_QWORD *)&v57[6] = "";
    v58 = 2113;
    v59 = a2;
    v60 = 2113;
    v61 = v15;
    v16 = "{\"msg%{public}.0s\":\"#loip received China Shifted LOI\", \"loi\":%{private, location:escape_only}@, \"loiIde"
          "ntifier\":%{private, location:escape_only}@}";
    goto LABEL_33;
  }
  objc_msgSend(a2, "confidence");
  if (v26 < 0.0)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v27 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_ERROR))
    {
      v28 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(_QWORD *)&v57[6] = "";
      v58 = 2113;
      v59 = a2;
      v60 = 2113;
      v61 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip received LOI has negative confidence value\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
    }
    v29 = qword_1022A0178;
    if (!os_signpost_enabled((os_log_t)qword_1022A0178))
      goto LABEL_43;
    v30 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(_QWORD *)&v57[6] = "";
    v58 = 2113;
    v59 = a2;
    v60 = 2113;
    v61 = v30;
    v21 = "#loip received LOI has negative confidence value";
    v22 = "{\"msg%{public}.0s\":\"#loip received LOI has negative confidence value\", \"loi\":%{private, location:escape_"
          "only}@, \"loiIdentifier\":%{private, location:escape_only}@}";
    v23 = v29;
    v24 = 38;
    goto LABEL_42;
  }
  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021904F0);
  v31 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)v57 = 0;
    *(_WORD *)&v57[4] = 2082;
    *(_QWORD *)&v57[6] = "";
    v58 = 2113;
    v59 = a2;
    v60 = 2113;
    v61 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#loip received LOI\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", buf, 0x26u);
  }
  *(_DWORD *)(v5 + 136) = 0xFFFF;
  *(_QWORD *)(v5 + 148) = 0;
  *(_QWORD *)(v5 + 140) = 0;
  *(_OWORD *)(v5 + 156) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v5 + 172) = _Q0;
  *(_OWORD *)(v5 + 188) = _Q0;
  *(_OWORD *)(v5 + 204) = _Q0;
  *(_DWORD *)(v5 + 220) = 0;
  *(_QWORD *)(v5 + 224) = 0xBFF0000000000000;
  *(_QWORD *)(v5 + 232) = 0;
  *(_QWORD *)(v5 + 240) = 0;
  *(_DWORD *)(v5 + 248) = 0;
  *(_QWORD *)(v5 + 252) = 0xBFF0000000000000;
  *(_DWORD *)(v5 + 260) = 0x7FFFFFFF;
  *(_QWORD *)(v5 + 272) = 0;
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 264) = 0;
  *(_BYTE *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 232) = 13;
  *(_DWORD *)(v5 + 292) = 0;
  objc_msgSend(objc_msgSend(a2, "location"), "latitude");
  *(_QWORD *)(v5 + 140) = v38;
  objc_msgSend(objc_msgSend(a2, "location"), "longitude");
  *(_QWORD *)(v5 + 148) = v39;
  objc_msgSend(objc_msgSend(a2, "location"), "horizontalUncertainty");
  *(_QWORD *)(v5 + 156) = v40;
  objc_msgSend(objc_msgSend(a2, "location"), "altitude");
  *(_QWORD *)(v5 + 164) = v41;
  objc_msgSend(objc_msgSend(a2, "location"), "verticalUncertainty");
  *(_QWORD *)(v5 + 172) = v42;
  objc_msgSend(a2, "confidence");
  v44 = vcvtmd_s64_f64(v43 * 13.0 + 67.0);
  *(_DWORD *)(v5 + 220) = v44;
  if (v44 <= 67)
    v45 = 25;
  else
    v45 = 50;
  if (v44 <= 73)
    v46 = v45;
  else
    v46 = 75;
  *(_DWORD *)(v5 + 264) = v46;
  v47 = objc_msgSend(objc_msgSend(a2, "location"), "sourceAccuracy");
  if ((unint64_t)v47 >= 3)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v48 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_ERROR))
    {
      v49 = objc_msgSend(objc_msgSend(a2, "location"), "sourceAccuracy");
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v57 = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "#loip unsupported location accuracy type, %lu", buf, 0xCu);
    }
    v50 = sub_1001BFF7C(115, 0);
    LODWORD(v47) = 0;
    if (v50)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021904F0);
      v51 = qword_1022A0178;
      v54 = 134217984;
      v55 = objc_msgSend(objc_msgSend(a2, "location"), "sourceAccuracy");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 16, "#loip unsupported location accuracy type, %lu", &v54);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 0, "void CLLoiLocationProvider::updateLoiFromVisit(CLVisit *)_block_invoke", "%s\n", v52);
      if (v53 != buf)
        free(v53);
      LODWORD(v47) = 0;
    }
  }
  *(_DWORD *)(v5 + 292) = (_DWORD)v47;
  *(_QWORD *)(v5 + 224) = 0x4024000000000000;
  *(CFAbsoluteTime *)(v5 + 212) = CFAbsoluteTimeGetCurrent();
  if (sub_100182290(v5 + 136))
    sub_100EABA04(v5);
  else
    sub_100EAAC14(v5);
  *(_DWORD *)(v5 + 304) = 0;
}

void sub_100EABA04(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  _BYTE buf[32];
  _BYTE v51[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[35];
  std::__shared_weak_count *v56;
  int v57;
  std::__shared_weak_count *v58;
  void *__p;
  char v60;
  std::__shared_weak_count *v61;
  id v62;

  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021904F0);
  v2 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 140);
    v4 = *(_QWORD *)(a1 + 148);
    v5 = *(_QWORD *)(a1 + 156);
    v6 = *(_QWORD *)(a1 + 164);
    v7 = *(_QWORD *)(a1 + 172);
    v8 = *(_DWORD *)(a1 + 220);
    v9 = *(unsigned int *)(a1 + 264);
    v10 = *(int *)(a1 + 292);
    *(_DWORD *)buf = 134285313;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v5;
    *(_WORD *)v51 = 2049;
    *(_QWORD *)&v51[2] = v6;
    *(_WORD *)&v51[10] = 2050;
    *(_QWORD *)&v51[12] = v7;
    *(_WORD *)&v51[20] = 1026;
    *(_DWORD *)&v51[22] = v8;
    *(_WORD *)&v51[26] = 2050;
    *(_QWORD *)&v51[28] = v9;
    *(_WORD *)&v51[36] = 2050;
    *(_QWORD *)&v51[38] = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#loip,notify LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,altitude,%{private}.2f,vunc,%{public}.2f,confidence,%{public}d,integrity,%{public}lu,sourceAccuracy,%{public}lu", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021904F0);
    v24 = *(_QWORD *)(a1 + 140);
    v25 = *(_QWORD *)(a1 + 148);
    v26 = *(_QWORD *)(a1 + 156);
    v27 = *(_QWORD *)(a1 + 164);
    v28 = *(_QWORD *)(a1 + 172);
    v29 = *(_DWORD *)(a1 + 220);
    v30 = *(unsigned int *)(a1 + 264);
    v31 = *(int *)(a1 + 292);
    v34 = 134285313;
    v35 = v24;
    v36 = 2049;
    v37 = v25;
    v38 = 2050;
    v39 = v26;
    v40 = 2049;
    v41 = v27;
    v42 = 2050;
    v43 = v28;
    v44 = 1026;
    v45 = v29;
    v46 = 2050;
    v47 = v30;
    v48 = 2050;
    v49 = v31;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 1, "#loip,notify LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,altitude,%{private}.2f,vunc,%{public}.2f,confidence,%{public}d,integrity,%{public}lu,sourceAccuracy,%{public}lu", &v34, 78);
    v33 = (char *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLLoiLocationProvider::notifyLocation()", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  sub_100129CA0((uint64_t)buf);
  v11 = *(_OWORD *)(a1 + 248);
  v53 = *(_OWORD *)(a1 + 232);
  v54 = v11;
  v55[0] = *(_OWORD *)(a1 + 264);
  *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)(a1 + 276);
  v12 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)v51 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)&v51[16] = v12;
  v13 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v51[32] = *(_OWORD *)(a1 + 200);
  v52 = v13;
  v14 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&buf[16] = v14;
  v57 = *(_DWORD *)(a1 + 292);
  v34 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v34, buf, 1, 0xFFFFFFFFLL, 0);

  v15 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v60 < 0)
    operator delete(__p);
  v18 = v58;
  if (v58)
  {
    v19 = (unint64_t *)&v58->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v56;
  if (v56)
  {
    v22 = (unint64_t *)&v56->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_100EABDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Unwind_Resume(exception_object);
}

void sub_100EABDE0()
{
  operator new();
}

void sub_100EABE90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100EABECC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100EABEF8(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100EABF24(id a1)
{
  qword_1022A0178 = (uint64_t)os_log_create("com.apple.locationd.Position", "LoiPosition");
}

void sub_100EAC688(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100EADC2C(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

BOOL sub_100EADC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t i;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v6 = sub_10012C7A4((float *)a2);
  v9 = 0.0;
  for (i = 28; i != 40; i += 4)
    v9 = v9 + (float)(*(float *)(a2 + i) * *(float *)(a2 + i));
  v11 = sqrtf(v9);
  v12 = (float)((float)(v7 * *(float *)(a2 + 20)) + (float)(v6 * *(float *)(a2 + 16)))
      + (float)(v8 * *(float *)(a2 + 24));
  v13 = -v12;
  v14 = fabsf(v12);
  v15 = sub_100EADEDC(a1, (float *)a2);
  sub_10083D1DC(a1 + 32, v15, v13);
  *(float *)a1 = v11 + *(float *)a1;
  v16 = *(_QWORD *)(a1 + 8) + 1;
  *(_QWORD *)(a1 + 8) = v16;
  v17 = v14 + *(float *)(a1 + 16);
  *(float *)(a1 + 16) = v17;
  v18 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v18;
  if (v16 >= 0x100)
  {
    if (v18)
      v19 = v17 / (float)(unint64_t)v18;
    else
      v19 = 0.0;
    v20 = *(unsigned __int16 *)(a1 + 152);
    v21 = *(unsigned __int16 *)(a1 + 154);
    v22 = *(unsigned int *)(a1 + 156);
    if (v20 + v21 >= v22)
      v23 = *(unsigned int *)(a1 + 156);
    else
      v23 = 0;
    *(float *)(a1 + 152 + 4 * (v20 + v21 - v23) + 8) = v19;
    if (v22 <= v21)
    {
      v24 = v20 + 1;
      if (v24 < v22)
        LOWORD(v22) = 0;
      *(_WORD *)(a1 + 152) = v24 - v22;
    }
    else
    {
      *(_WORD *)(a1 + 154) = v21 + 1;
    }
    *(_BYTE *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    sub_1004786E8(a1 + 136);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 140);
    v25 = *(_QWORD *)(a1 + 8);
    if (v25)
      v26 = *(float *)a1 / (float)v25;
    else
      v26 = 0.0;
    v27 = *(unsigned __int16 *)(a1 + 108);
    v28 = *(unsigned __int16 *)(a1 + 110);
    v29 = *(unsigned int *)(a1 + 112);
    if (v27 + v28 >= v29)
      v30 = *(unsigned int *)(a1 + 112);
    else
      v30 = 0;
    *(float *)(a1 + 108 + 4 * (v27 + v28 - v30) + 8) = v26;
    if (v29 <= v28)
    {
      v31 = v27 + 1;
      if (v31 < v29)
        LOWORD(v29) = 0;
      *(_WORD *)(a1 + 108) = v31 - v29;
    }
    else
    {
      *(_WORD *)(a1 + 110) = v28 + 1;
    }
    *(_BYTE *)(a1 + 92) = 1;
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    sub_1004786E8(a1 + 92);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 96);
    v32 = sub_10083D408(a1 + 32);
    v33 = *(unsigned __int16 *)(a1 + 196);
    v34 = fabsf(v32);
    v35 = *(unsigned __int16 *)(a1 + 198);
    v36 = *(unsigned int *)(a1 + 200);
    if (v33 + v35 >= v36)
      v37 = *(unsigned int *)(a1 + 200);
    else
      v37 = 0;
    *(float *)(a1 + 196 + 4 * (v33 + v35 - v37) + 8) = v34;
    if (v36 <= v35)
    {
      v38 = v33 + 1;
      if (v38 < v36)
        LOWORD(v36) = 0;
      *(_WORD *)(a1 + 196) = v38 - v36;
    }
    else
    {
      *(_WORD *)(a1 + 198) = v35 + 1;
    }
    *(_BYTE *)(a1 + 180) = 1;
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 60) = 0u;
    sub_1004786E8(a1 + 180);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 184);
    *(_QWORD *)a3 = *(_QWORD *)(a2 + 48);
  }
  return v16 > 0xFF;
}

float sub_100EADEDC(uint64_t a1, float *a2)
{
  unsigned __int8 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float result;
  int v15;
  float *v16;

  v3 = atomic_load((unsigned __int8 *)&qword_102308D90);
  if ((v3 & 1) == 0)
  {
    v16 = a2;
    v15 = __cxa_guard_acquire(&qword_102308D90);
    a2 = v16;
    if (v15)
    {
      qword_102308D80 = 1065353216;
      dword_102308D88 = 0;
      __cxa_guard_release(&qword_102308D90);
      a2 = v16;
    }
  }
  v5 = a2[8];
  v4 = a2[9];
  v6 = a2[7];
  v7 = (float)(v5 * *(float *)&dword_102308D88) - (float)(v4 * *((float *)&qword_102308D80 + 1));
  v8 = (float)(v4 * *(float *)&qword_102308D80) - (float)(v6 * *(float *)&dword_102308D88);
  v9 = (float)(v6 * *((float *)&qword_102308D80 + 1)) - (float)(v5 * *(float *)&qword_102308D80);
  v10 = sub_10012C7A4(a2);
  v13 = -(float)((float)((float)(v8 * v11) + (float)(v10 * v7)) + (float)(v12 * v9));
  result = v13 - *(float *)(a1 + 88);
  *(float *)(a1 + 88) = v13;
  return result;
}

void sub_100EADFBC(uint64_t a1, int a2)
{
  int v3;
  int v5;
  char v7;

  v3 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 <= v3 && v3 < a2)
  {
    v7 = 0;
    *(_BYTE *)(a1 + 15) = 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 8);
    if (*(_DWORD *)a1 <= v5 || v5 < a2)
      goto LABEL_12;
    v7 = 1;
  }
  *(_BYTE *)(a1 + 12) = v7;
LABEL_12:
  *(_DWORD *)a1 = a2;
  sub_10022B0A8(a1);
  if (*(_BYTE *)(a1 + 12) && *(_BYTE *)(a1 + 14))
    *(_BYTE *)(a1 + 15) = 1;
  sub_1001D3FC0((int *)a1);
}

void sub_100EAE034(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 13) = a2;
  sub_10022B0A8(a1);
  sub_1001D3FC0((int *)a1);
}

void sub_100EAE05C(int *a1, int a2)
{
  a1[6] = a2;
  sub_10022B0A8((uint64_t)a1);
  sub_1001D3FC0(a1);
}

void sub_100EAE084(uint64_t a1, double a2)
{
  if (a2 >= 0.0 && a2 <= 100.0)
  {
    *(double *)(a1 + 16) = a2;
    sub_10022B0A8(a1);
    sub_1001D3FC0((int *)a1);
  }
}

void sub_100EAE0C4(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_100EAE0F0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  *(_QWORD *)a1 = off_102190580;
  v2 = sub_100127B9C();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100EAE2DC;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v4);
  sub_100067AC4(a1 + 448);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

void sub_100EAE17C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100EAE2DC;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v3);
}

void sub_100EAE1E0(uint64_t a1)
{
  sub_100EAE0F0(a1);
  operator delete();
}

uint64_t sub_100EAE204(uint64_t result, uint64_t a2)
{
  int v2;
  float v3;
  int v4;

  v2 = *(unsigned __int8 *)(result + 1);
  v3 = *(float *)(result + 53);
  v4 = *(unsigned __int8 *)(a2 + 392);
  if (v2 != v4)
  {
    if (v2 == 2 && v4 == 4)
    {
      ++*(_DWORD *)(a2 + 396);
      goto LABEL_20;
    }
    if (v2 == 5 && v4 == 2)
    {
      ++*(_DWORD *)(a2 + 400);
LABEL_15:
      ++*(_DWORD *)(a2 + 408);
      *(float *)(a2 + 416) = v3 + *(float *)(a2 + 416);
      if (v3 > *(float *)(a2 + 432))
        *(float *)(a2 + 432) = v3;
      if (v3 < *(float *)(a2 + 424))
        *(float *)(a2 + 424) = v3;
      goto LABEL_24;
    }
  }
  if (v2 != 2)
  {
    if ((v2 & 0xFE) != 4)
      goto LABEL_24;
    goto LABEL_15;
  }
LABEL_20:
  ++*(_DWORD *)(a2 + 404);
  *(float *)(a2 + 412) = v3 + *(float *)(a2 + 412);
  if (v3 > *(float *)(a2 + 428))
    *(float *)(a2 + 428) = v3;
  if (v3 < *(float *)(a2 + 420))
    *(float *)(a2 + 420) = v3;
LABEL_24:
  *(_BYTE *)(a2 + 392) = v2;
  return result;
}

int *sub_100EAE2DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  _QWORD *v17;
  uint8_t buf[4];
  _QWORD *v19;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 8))
  {
    v2 = sub_1000A6A30();
    sub_1000A4A6C(v2, 0, *(_QWORD *)(v1 + 8));
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(v1 + 8) = 0;
  }
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = sub_1000A5944();
    sub_1000A4A6C(v4, 0, *(_QWORD *)(v1 + 16));
    v5 = *(_QWORD *)(v1 + 16);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(v1 + 16) = 0;
  }
  if (*(_QWORD *)(v1 + 24))
  {
    v6 = sub_1000A652C(0);
    sub_1000A4A6C(v6, 6, *(_QWORD *)(v1 + 24));
    v7 = *(_QWORD *)(v1 + 24);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    *(_QWORD *)(v1 + 24) = 0;
  }
  if (*(_QWORD *)(v1 + 32))
  {
    v8 = sub_1001FBB04(0);
    sub_1000A4A6C(v8, 0, *(_QWORD *)(v1 + 32));
    v9 = *(_QWORD *)(v1 + 32);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *(_QWORD *)(v1 + 32) = 0;
  }
  if ((sub_1001B7910() & 0x10) != 0)
    sub_100EAE5A0(v1);
  if (*(_BYTE *)(v1 + 40) && *(double *)(v1 + 80) < 0.0)
  {
    *(CFAbsoluteTime *)(v1 + 80) = CFAbsoluteTimeGetCurrent();
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021905A0);
    v10 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v11 = (_QWORD *)(v1 + 56);
      if (*(char *)(v1 + 79) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136315138;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "ending metric session (CompassSession) for %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021905A0);
      v13 = (_QWORD *)(v1 + 56);
      if (*(char *)(v1 + 79) < 0)
        v13 = (_QWORD *)*v13;
      v16 = 136315138;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "ending metric session (CompassSession) for %s", (const char *)&v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLCompassSessionStatsCollector::stop()_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  return sub_100EAE654((_DWORD *)v1);
}

uint64_t sub_100EAE5A0(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  int v6;
  uint32x2_t v7;

  v1 = *(_DWORD *)(result + 428);
  *(_DWORD *)(result + 192) = *(_DWORD *)(result + 420);
  *(_DWORD *)(result + 196) = v1;
  v2 = *(_DWORD *)(result + 404);
  if (v2 >= 1)
    *(float *)(result + 200) = *(float *)(result + 412) / (float)v2;
  v3 = *(_DWORD *)(result + 432);
  *(_DWORD *)(result + 204) = *(_DWORD *)(result + 424);
  *(_DWORD *)(result + 208) = v3;
  v4 = *(_DWORD *)(result + 408);
  if (v4 >= 1)
    *(float *)(result + 212) = *(float *)(result + 416) / (float)v4;
  v5 = vadd_s32(*(int32x2_t *)(result + 216), vrev64_s32(*(int32x2_t *)(result + 396)));
  *(int32x2_t *)(result + 216) = v5;
  *(_BYTE *)(result + 224) = *(_BYTE *)(result + 393);
  v6 = *(_DWORD *)(result + 444);
  if (v6 < 1)
  {
    v7 = 0;
  }
  else
  {
    *(float *)v5.i32 = (float)v6;
    v7 = vcvt_u32_f32(vrnda_f32(vmul_f32(vdiv_f32(vcvt_f32_s32(*(int32x2_t *)(result + 436)), (float32x2_t)vdup_lane_s32(v5, 0)), (float32x2_t)vdup_n_s32(0x42C80000u))));
  }
  *(uint32x2_t *)(result + 256) = v7;
  return result;
}

int *sub_100EAE654(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  int *v4;
  float v5;
  unsigned int v6;
  int *v7;
  unsigned int v8;
  int *v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  int *v13;
  unsigned int v14;
  int *v15;
  unsigned int v16;
  int *result;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;

  v2 = a1[122];
  v3 = (uint64_t)(a1 + 112);
  v19 = 0;
  v20 = &v19;
  v4 = (int *)sub_1000A6778((uint64_t)(a1 + 112), &v19, (uint64_t)&unk_101B9EB60, &v20);
  v5 = (float)v2;
  if (v2 < 1)
    v6 = 0;
  else
    v6 = vcvtas_u32_f32((float)((float)v4[5] / v5) * 100.0);
  a1[57] = v6;
  v19 = 1;
  v20 = &v19;
  v7 = (int *)sub_1000A6778(v3, &v19, (uint64_t)&unk_101B9EB60, &v20);
  if (v2 < 1)
    v8 = 0;
  else
    v8 = vcvtas_u32_f32((float)((float)v7[5] / v5) * 100.0);
  a1[58] = v8;
  v19 = 2;
  v20 = &v19;
  v9 = (int *)sub_1000A6778(v3, &v19, (uint64_t)&unk_101B9EB60, &v20);
  if (v2 < 1)
    v10 = 0;
  else
    v10 = vcvtas_u32_f32((float)((float)v9[5] / v5) * 100.0);
  a1[59] = v10;
  v19 = 3;
  v20 = &v19;
  v11 = (int *)sub_1000A6778(v3, &v19, (uint64_t)&unk_101B9EB60, &v20);
  if (v2 < 1)
    v12 = 0;
  else
    v12 = vcvtas_u32_f32((float)((float)v11[5] / v5) * 100.0);
  a1[60] = v12;
  v19 = 4;
  v20 = &v19;
  v13 = (int *)sub_1000A6778(v3, &v19, (uint64_t)&unk_101B9EB60, &v20);
  if (v2 < 1)
    v14 = 0;
  else
    v14 = vcvtas_u32_f32((float)((float)v13[5] / v5) * 100.0);
  a1[61] = v14;
  v19 = 5;
  v20 = &v19;
  v15 = (int *)sub_1000A6778(v3, &v19, (uint64_t)&unk_101B9EB60, &v20);
  if (v2 < 1)
    v16 = 0;
  else
    v16 = vcvtas_u32_f32((float)((float)v15[5] / v5) * 100.0);
  a1[62] = v16;
  v19 = 6;
  v20 = &v19;
  result = (int *)sub_1000A6778(v3, &v19, (uint64_t)&unk_101B9EB60, &v20);
  if (v2 < 1)
    v18 = 0;
  else
    v18 = vcvtas_u32_f32((float)((float)result[5] / v5) * 100.0);
  a1[63] = v18;
  return result;
}

void sub_100EAE908(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100EAE968;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v3);
}

uint64_t sub_100EAE968(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  void **v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[3];
  uint64_t v8;
  uint64_t v9[5];
  int v10;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 40))
  {
    memset(v7, 0, sizeof(v7));
    v2 = 0uLL;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0xBFF0000000000000;
    v3 = (void **)(v1 + 56);
    if (*(char *)(v1 + 79) < 0)
    {
      operator delete(*v3);
      v2 = 0uLL;
    }
    *v3 = 0;
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0xBFF0000000000000;
    *(_QWORD *)(v1 + 88) = 0x600000000;
    *(_QWORD *)(v1 + 96) = 0xCF0000004F000000;
    *(_QWORD *)(v1 + 104) = 0xFFFFFFFF00000000;
    *(_OWORD *)(v1 + 112) = v2;
    *(_OWORD *)(v1 + 128) = v2;
    *(_OWORD *)(v1 + 144) = v2;
    *(_OWORD *)(v1 + 160) = v2;
    *(_QWORD *)(v1 + 176) = 0;
    *(_QWORD *)(v1 + 184) = 0x8000000080000000;
    *(_OWORD *)(v1 + 192) = v2;
    *(_OWORD *)(v1 + 208) = v2;
    *(_BYTE *)(v1 + 224) = 6;
    v4 = v7[0];
    v5 = v7[1];
    *(_OWORD *)(v1 + 257) = v7[2];
    *(_OWORD *)(v1 + 241) = v5;
    *(_OWORD *)(v1 + 225) = v4;
    *(_DWORD *)(v1 + 273) = 0;
    *(_DWORD *)(v1 + 276) = 0;
    sub_1000A659C((uint64_t)v7);
    *(_QWORD *)(v1 + 440) = v8;
    v6 = v7[1];
    *(_OWORD *)(v1 + 392) = v7[0];
    *(_OWORD *)(v1 + 408) = v6;
    *(_OWORD *)(v1 + 424) = v7[2];
    sub_1000A6464(v1 + 448, v9);
    *(_DWORD *)(v1 + 488) = v10;
    return sub_100067AC4((uint64_t)v9);
  }
  return result;
}

void sub_100EAEAB8(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100EAEAE4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  *a1 = a2;
  v6 = (uint64_t)(a1 + 5);
  sub_100270E34((uint64_t)(a1 + 1), a3);
  sub_100270E34(v6, a4);
  sub_1017E365C(a1 + 9, *a1);
  operator new();
}

void sub_100EAF338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t *a14, uint64_t *a15)
{
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v21 = v15[1462];
  v15[1462] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v15[1460];
  v15[1460] = 0;
  if (v22)
    operator delete();
  v23 = v15[1457];
  v15[1457] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v15[1456];
  v15[1456] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v15[1455];
  v15[1455] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *v16;
  *v16 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_100EB64CC(v19);
  sub_100008848((uint64_t)(v15 + 193), *v18);
  sub_100F0C97C(a13);
  sub_100EB6994(a15, 0);
  sub_10042B248(a14, 0);
  sub_1006DD5DC((uint64_t)(v15 + 28));
  v15[10] = off_1021693F8;
  sub_10047F25C(v15 + 14);
  v27 = (_QWORD *)v15[8];
  if (v27 == v17)
  {
    v28 = 4;
    v27 = v17;
  }
  else
  {
    if (!v27)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_18:
  v29 = (_QWORD *)v15[4];
  if (v29 == a12)
  {
    v30 = 4;
    v29 = a12;
  }
  else
  {
    if (!v29)
      goto LABEL_23;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_23:
  _Unwind_Resume(a1);
}

void sub_100EAF5B8(uint64_t a1, int *a2, __int128 *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistancePosition::onGpsAssistantNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102190680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onGpsAssistantNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102190680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onGpsAssistantNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100EB0544((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100EAF770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100EAF790(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistancePosition::onStreamedLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102190680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onStreamedLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102190680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onStreamedLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100EB0A94((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100EAF948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100EAF968(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistancePosition::onWifiLocationProviderNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102190680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onWifiLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102190680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onWifiLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100EB0E04((uint64_t)a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100EAFB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100EAFB38(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistancePosition::onCellLocationProviderNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102190680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onCellLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102190680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onCellLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100EB0F34((uint64_t)a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100EAFCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100EAFD08(uint64_t a1)
{
  sub_100EAFD10(*(_QWORD *)(a1 + 32));
}

void sub_100EAFD10(uint64_t a1)
{
  double *v2;
  NSObject *v3;
  double v4;
  uint64_t v5;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  double v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  double v26;
  int v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  _BYTE buf[96];
  __int128 v32;
  __int128 v33;
  _BYTE v34[28];
  _QWORD v35[65];
  uint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;

  if (sub_100EB494C(a1))
  {
    v2 = (double *)(a1 + 7236);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *v2 + *(float *)(a1 + 7684);
      v5 = *(_QWORD *)(a1 + 7244);
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "triggerCellAssistanceDuringEmergency, CellLocation,alt(hae),%f,unc,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v22 = *v2 + *(float *)(a1 + 7684);
      v23 = *(_QWORD *)(a1 + 7244);
      v27 = 134218240;
      v28 = v22;
      v29 = 2048;
      v30 = v23;
      LODWORD(v26) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "triggerCellAssistanceDuringEmergency, CellLocation,alt(hae),%f,unc,%f", COERCE_DOUBLE(&v27), v26);
      v25 = (char *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::triggerCellAssistanceDuringEmergency()", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    *(_DWORD *)buf = 0xFFFF;
    *(_QWORD *)&buf[12] = 0;
    *(_QWORD *)&buf[4] = 0;
    *(_OWORD *)&buf[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&buf[36] = _Q0;
    *(_OWORD *)&buf[52] = _Q0;
    *(_OWORD *)&buf[68] = _Q0;
    *(_DWORD *)&buf[84] = 0;
    v32 = 0uLL;
    *(_QWORD *)&buf[88] = 0xBFF0000000000000;
    *(_QWORD *)((char *)&v33 + 4) = 0xBFF0000000000000;
    LODWORD(v33) = 0;
    HIDWORD(v33) = 0x7FFFFFFF;
    memset(v34, 0, 25);
    sub_10012A33C(v35);
    v11 = *(_OWORD *)(a1 + 7320);
    v32 = *(_OWORD *)(a1 + 7304);
    v33 = v11;
    *(_OWORD *)v34 = *(_OWORD *)(a1 + 7336);
    *(_OWORD *)&v34[12] = *(_OWORD *)(a1 + 7348);
    v12 = *(_OWORD *)(a1 + 7256);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a1 + 7240);
    *(_OWORD *)&buf[48] = v12;
    v13 = *(_OWORD *)(a1 + 7288);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a1 + 7272);
    *(_OWORD *)&buf[80] = v13;
    v14 = *(_OWORD *)(a1 + 7224);
    *(_OWORD *)buf = *(_OWORD *)(a1 + 7208);
    *(_OWORD *)&buf[16] = v14;
    memcpy(v15, (const void *)(a1 + 7368), 0x201uLL);
    sub_100349198(&v36, (uint64_t *)(a1 + 7888));
    v16 = *(_OWORD *)(a1 + 7952);
    v17 = *(_OWORD *)(a1 + 7984);
    v42 = *(_OWORD *)(a1 + 7968);
    v43 = v17;
    v18 = *(_OWORD *)(a1 + 7920);
    v38 = *(_OWORD *)(a1 + 7904);
    v39 = v18;
    v40 = *(_OWORD *)(a1 + 7936);
    v41 = v16;
    v44 = *(_BYTE *)(a1 + 8000);
    *(_QWORD *)&buf[76] = CFAbsoluteTimeGetCurrent();
    v35[43] = sub_1001FCBB4();
    sub_10013AEB8(a1, (uint64_t)buf, 1, 0);
    v19 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_100EB0070(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EB0094(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 11632) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 11632) + 8), 5);
  v2 = *(_QWORD *)(a1 + 11640);
  if (v2)
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 5);
  v3 = *(void **)(a1 + 11720);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 11720) = 0;
  }
  v4 = *(_QWORD *)(a1 + 11696);
  *(_QWORD *)(a1 + 11696) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 11680);
  *(_QWORD *)(a1 + 11680) = 0;
  if (v5)
    operator delete();
  v6 = *(_QWORD *)(a1 + 11656);
  *(_QWORD *)(a1 + 11656) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 11648);
  *(_QWORD *)(a1 + 11648) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 11640);
  *(_QWORD *)(a1 + 11640) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 11632);
  *(_QWORD *)(a1 + 11632) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_100EB64CC(a1 + 1576);
  sub_100008848(a1 + 1544, *(_QWORD **)(a1 + 1552));
  sub_100F0C97C(a1 + 496);
  sub_100EB6994((uint64_t *)(a1 + 488), 0);
  sub_10042B248((uint64_t *)(a1 + 480), 0);
  sub_1006DD5DC(a1 + 224);
  *(_QWORD *)(a1 + 80) = off_1021693F8;
  sub_10047F25C((_QWORD *)(a1 + 112));
  v10 = *(_QWORD **)(a1 + 64);
  if (v10 == (_QWORD *)(a1 + 40))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v10)
      goto LABEL_22;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_22:
  v12 = *(_QWORD **)(a1 + 32);
  if (v12 == (_QWORD *)(a1 + 8))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 8);
    goto LABEL_26;
  }
  if (v12)
  {
    v13 = 5;
LABEL_26:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return a1;
}

void sub_100EB0244(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,singleShot\"}", (uint8_t *)v3, 0x12u);
  }
  *(_BYTE *)(a1 + 1536) = 1;
  sub_10001146C(a1);
  sub_1000314C4(a1);
}

void sub_100EB0370(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v5 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GnssAssistancePosition: injectReferenceLocationFromRefPosMaintenance,type,%{public}d ", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v6 = *(_DWORD *)(a2 + 96);
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GnssAssistancePosition: injectReferenceLocationFromRefPosMaintenance,type,%{public}d ", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::injectReferenceLocationFromRefPosMaintenance(GNSS::DaemonLocation)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100F0D108(a1 + 496, a2);
  sub_10013AEB8(a1, a2, 0, 1);
}

void sub_100EB0544(uint64_t a1, uint64_t a2, int *a3, __int128 *a4)
{
  NSObject *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  NSObject *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  _DWORD v36[2];
  __int16 v37;
  const char *v38;
  __int16 v39;
  double v40;
  uint8_t buf[4];
  __int128 v42;
  _BYTE v43[48];
  __int128 v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE v56[528];
  std::__shared_weak_count *v57;

  if (*a3 == 4)
  {
    if (*((_BYTE *)a4 + 42))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(double *)a4;
        v12 = *((_QWORD *)a4 + 2);
        v13 = *((_QWORD *)a4 + 3);
        v14 = *((unsigned __int8 *)a4 + 42);
        *(_DWORD *)buf = 68290051;
        LODWORD(v42) = 0;
        WORD2(v42) = 2082;
        *(_QWORD *)((char *)&v42 + 6) = "";
        HIWORD(v42) = 2050;
        *(double *)v43 = v11;
        *(_WORD *)&v43[8] = 2049;
        *(_QWORD *)&v43[10] = v12;
        *(_WORD *)&v43[18] = 2049;
        *(_QWORD *)&v43[20] = v13;
        *(_WORD *)&v43[28] = 1026;
        *(_DWORD *)&v43[30] = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,received TBA\", \"time\":\"%{public}.2f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"isTunnel\":%{public}hhd}", buf, 0x36u);
      }
      v15 = *a4;
      v16 = a4[1];
      *(_OWORD *)(a1 + 4640) = a4[2];
      *(_OWORD *)(a1 + 4624) = v16;
      *(_OWORD *)(a1 + 4608) = v15;
    }
  }
  else if (*a3 == 5)
  {
    if (*((_BYTE *)a4 + 80))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v8 = *a3;
        *(_DWORD *)buf = 68289282;
        LODWORD(v42) = 0;
        WORD2(v42) = 2082;
        *(_QWORD *)((char *)&v42 + 6) = "";
        HIWORD(v42) = 1026;
        *(_DWORD *)v43 = v8;
        v9 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, TEPA ignored as it is produced when GNSS fix is available\""
             ", \"notification\":%{public}d}";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, v9, buf, 0x18u);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(double *)a4;
        v20 = *((_QWORD *)a4 + 1);
        v21 = *((_QWORD *)a4 + 2);
        v22 = *((_QWORD *)a4 + 3);
        v23 = *((_QWORD *)a4 + 6);
        v24 = *((_QWORD *)a4 + 7);
        v25 = *((_DWORD *)a4 + 19);
        *(_DWORD *)buf = 68290819;
        LODWORD(v42) = 0;
        WORD2(v42) = 2082;
        *(_QWORD *)((char *)&v42 + 6) = "";
        HIWORD(v42) = 2050;
        *(double *)v43 = v19;
        *(_WORD *)&v43[8] = 2049;
        *(_QWORD *)&v43[10] = v20;
        *(_WORD *)&v43[18] = 2049;
        *(_QWORD *)&v43[20] = v21;
        *(_WORD *)&v43[28] = 2050;
        *(_QWORD *)&v43[30] = v22;
        *(_WORD *)&v43[38] = 2050;
        *(_QWORD *)&v43[40] = v23;
        LOWORD(v44) = 2050;
        *(_QWORD *)((char *)&v44 + 2) = v24;
        WORD5(v44) = 1026;
        HIDWORD(v44) = v25;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Received TEPA\", \"time\":\"%{public}.1f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hunc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\", \"refFrame\":%{public}d}", buf, 0x54u);
      }
      *(_DWORD *)buf = 0xFFFF;
      v42 = 0uLL;
      *(_OWORD *)v43 = xmmword_101BAFC90;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&v43[16] = _Q0;
      *(_OWORD *)&v43[32] = _Q0;
      v44 = _Q0;
      v45 = 0;
      v47 = 0;
      v48 = 0;
      v46 = 0xBFF0000000000000;
      v49 = 0;
      v50 = 0xBFF0000000000000;
      v51 = 0x7FFFFFFF;
      v53 = 0;
      v54 = 0;
      v52 = 0;
      v55 = 0;
      sub_10012A33C(v56);
      *((_QWORD *)&v44 + 1) = *(_QWORD *)a4;
      v42 = *(__int128 *)((char *)a4 + 8);
      *(_OWORD *)&v43[8] = a4[3];
      v56[356] = 1;
      *(_QWORD *)v43 = *((_QWORD *)a4 + 3);
      LODWORD(v47) = 0;
      v45 = 90;
      HIDWORD(v52) = *((_DWORD *)a4 + 19);
      v31 = sub_1001FC7BC((uint64_t)buf, (uint64_t)v56);
      if (*(double *)a4 >= 0.0 && sub_100182290((uint64_t)buf) && v31 <= 10.0)
      {
        if (*(_BYTE *)(a1 + 11672))
        {
          *(_QWORD *)v43 = 0x4062A00000000000;
          v45 = 69;
        }
        sub_10013AEB8(a1, (uint64_t)buf, 1, 1);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v32 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v36[0] = 68289282;
          v36[1] = 0;
          v37 = 2082;
          v38 = "";
          v39 = 2050;
          v40 = v31;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,not feeding TEPA,invalid data or timedout\", \"age\":\"%{public}.1f\"}", (uint8_t *)v36, 0x1Cu);
        }
      }
      v33 = v57;
      if (v57)
      {
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v17 = *a3;
      *(_DWORD *)buf = 68289282;
      LODWORD(v42) = 0;
      WORD2(v42) = 2082;
      *(_QWORD *)((char *)&v42 + 6) = "";
      HIWORD(v42) = 1026;
      *(_DWORD *)v43 = v17;
      v9 = "{\"msg%{public}.0s\":\"#Warning, #GnssAssistancePosition, Unsupported notification\", \"notification\":%{public}d}";
      goto LABEL_18;
    }
  }
}

void sub_100EB0A78(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void sub_100EB0A94(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  int v27;
  _BYTE v28[96];
  __int128 v29;
  __int128 v30;
  _BYTE v31[28];
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)v28 = 68289026;
    *(_WORD *)&v28[8] = 2082;
    *(_QWORD *)&v28[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Received streamed location notification.\"}", v28, 0x12u);
  }
  if (*a3 == 5)
  {
    *(_DWORD *)v28 = 0xFFFF;
    *(_OWORD *)&v28[4] = 0uLL;
    *(_OWORD *)&v28[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v28[36] = _Q0;
    *(_OWORD *)&v28[52] = _Q0;
    *(_OWORD *)&v28[68] = _Q0;
    *(_DWORD *)&v28[84] = 0;
    v29 = 0uLL;
    *(_QWORD *)&v28[88] = 0xBFF0000000000000;
    LODWORD(v30) = 0;
    *(_QWORD *)((char *)&v30 + 4) = 0xBFF0000000000000;
    HIDWORD(v30) = 0x7FFFFFFF;
    memset(v31, 0, 25);
    sub_10012A33C(&v32);
    v13 = *(_OWORD *)(a4 + 112);
    v29 = *(_OWORD *)(a4 + 96);
    v30 = v13;
    *(_OWORD *)v31 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v31[12] = *(_OWORD *)(a4 + 140);
    v14 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&v28[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v28[48] = v14;
    v15 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&v28[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v28[80] = v15;
    v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v28 = *(_OWORD *)a4;
    *(_OWORD *)&v28[16] = v16;
    memcpy(v17, (const void *)(a4 + 160), 0x201uLL);
    sub_100349198(&v33, (uint64_t *)(a4 + 680));
    v18 = *(_OWORD *)(a4 + 776);
    v39 = *(_OWORD *)(a4 + 760);
    v40 = v18;
    v19 = *(_OWORD *)(a4 + 712);
    v35 = *(_OWORD *)(a4 + 696);
    v36 = v19;
    v20 = *(_OWORD *)(a4 + 744);
    v37 = *(_OWORD *)(a4 + 728);
    v38 = v20;
    v41 = *(_BYTE *)(a4 + 792);
    sub_10013AEB8(a1, (uint64_t)v28, 0, 1);
    v21 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v25 = *a3;
      *(_DWORD *)v28 = 68289282;
      *(_DWORD *)&v28[4] = 0;
      *(_WORD *)&v28[8] = 2082;
      *(_QWORD *)&v28[10] = "";
      *(_WORD *)&v28[18] = 1026;
      *(_DWORD *)&v28[20] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Unhandled notification\", \"notification\":%{public}d}", v28, 0x18u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
    }
    v26 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v27 = *a3;
      *(_DWORD *)v28 = 68289282;
      *(_DWORD *)&v28[4] = 0;
      *(_WORD *)&v28[8] = 2082;
      *(_QWORD *)&v28[10] = "";
      *(_WORD *)&v28[18] = 1026;
      *(_DWORD *)&v28[20] = v27;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, Unhandled notification", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Unhandled notification\", \"notification\":%{public}d}", v28, 0x18u);
    }
  }
}

void sub_100EB0DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100EB0E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 11672);
    v8 = *(_QWORD *)(a4 + 4);
    v9 = *(_QWORD *)(a4 + 12);
    v10 = *(_QWORD *)(a4 + 20);
    v11 = *(_DWORD *)(a4 + 84);
    v12[0] = 68290307;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v7;
    v17 = 2049;
    v18 = v8;
    v19 = 2049;
    v20 = v9;
    v21 = 2050;
    v22 = v10;
    v23 = 1026;
    v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, WiFi location notification received\", \"isEmergency\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"conf\":%{public}d}", (uint8_t *)v12, 0x3Cu);
  }
}

void sub_100EB0F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 11672);
    v8 = *(_QWORD *)(a4 + 4);
    v9 = *(_QWORD *)(a4 + 12);
    v10 = *(_QWORD *)(a4 + 20);
    v11[0] = 68290051;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 1026;
    v15 = v7;
    v16 = 2049;
    v17 = v8;
    v18 = 2049;
    v19 = v9;
    v20 = 2050;
    v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cell location notification received\", \"isEmergency\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\"}", (uint8_t *)v11, 0x36u);
  }
}

uint64_t sub_100EB1058(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[28];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[28];
  uint8_t v111[4];
  int v112;
  __int16 v113;
  const char *v114;
  __int16 v115;
  _BYTE v116[10];
  _BYTE v117[10];
  __int16 v118;
  double v119;
  _BYTE buf[32];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  _OWORD v127[2];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getVerifiedConfidenceForEmergency,called\"}", buf, 0x12u);
  }
  if ((*(_DWORD *)(a2 + 96) - 6) > 2)
  {
    v83 = (_BYTE *)(a1 + 11672);
    v8 = sub_100182290(a1 + 6408);
    v9 = sub_100182290(a1 + 8008);
    v125 = xmmword_101C174D8;
    v126 = xmmword_101C174E8;
    memset(v127, 0, 28);
    v121 = xmmword_101C17498;
    v122 = xmmword_101C174A8;
    v123 = xmmword_101C174B8;
    v124 = xmmword_101C174C8;
    *(_OWORD *)buf = xmmword_101C17478;
    *(_OWORD *)&buf[16] = xmmword_101C17488;
    v108 = *(_OWORD *)(a1 + 6504);
    v109 = *(_OWORD *)(a1 + 6520);
    *(_OWORD *)v110 = *(_OWORD *)(a1 + 6536);
    *(_OWORD *)&v110[12] = *(_OWORD *)(a1 + 6548);
    v104 = *(_OWORD *)(a1 + 6440);
    v105 = *(_OWORD *)(a1 + 6456);
    v106 = *(_OWORD *)(a1 + 6472);
    v107 = *(_OWORD *)(a1 + 6488);
    v102 = *(_OWORD *)(a1 + 6408);
    v103 = *(_OWORD *)(a1 + 6424);
    v90 = *(_OWORD *)(a1 + 8104);
    v91 = *(_OWORD *)(a1 + 8120);
    *(_OWORD *)v92 = *(_OWORD *)(a1 + 8136);
    *(_OWORD *)&v92[12] = *(_OWORD *)(a1 + 8148);
    v86 = *(_OWORD *)(a1 + 8040);
    v87 = *(_OWORD *)(a1 + 8056);
    v88 = *(_OWORD *)(a1 + 8072);
    v89 = *(_OWORD *)(a1 + 8088);
    v84 = *(_OWORD *)(a1 + 8008);
    v85 = *(_OWORD *)(a1 + 8024);
    v99 = *(_OWORD *)(a2 + 96);
    v100 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)v101 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)&v101[12] = *(_OWORD *)(a2 + 140);
    v95 = *(_OWORD *)(a2 + 32);
    v96 = *(_OWORD *)(a2 + 48);
    v97 = *(_OWORD *)(a2 + 64);
    v98 = *(_OWORD *)(a2 + 80);
    v93 = *(_OWORD *)a2;
    v94 = *(_OWORD *)(a2 + 16);
    if ((sub_100182290(a2) & 1) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v111 = 68289026;
        v112 = 0;
        v113 = 2082;
        v114 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Invalid location assistance\"}", v111, 0x12u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
      }
      v14 = qword_1022A0078;
      if (os_signpost_enabled((os_log_t)qword_1022A0078))
      {
        *(_DWORD *)v111 = 68289026;
        v112 = 0;
        v113 = 2082;
        v114 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, Invalid location assistance", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Invalid location assistance\"}", v111, 0x12u);
      }
      v15 = 0x1000010001;
      goto LABEL_79;
    }
    v7 = *(unsigned int *)(a2 + 84);
    if (v7 <= 0x40)
    {
      if (*v83)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v10 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          goto LABEL_56;
        *(_DWORD *)v111 = 68289538;
        v112 = 0;
        v113 = 2082;
        v114 = "";
        v115 = 1026;
        *(_DWORD *)v116 = v7;
        *(_WORD *)&v116[4] = 1026;
        *(_DWORD *)&v116[6] = -1;
        v11 = v10;
        v12 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v29 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          goto LABEL_56;
        *(_DWORD *)v111 = 68289538;
        v112 = 0;
        v113 = 2082;
        v114 = "";
        v115 = 1026;
        *(_DWORD *)v116 = v7;
        *(_WORD *)&v116[4] = 1026;
        *(_DWORD *)&v116[6] = -1;
        v11 = v29;
        v12 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, downgrade,conf doesn't meet E911 requirement\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x1Eu);
LABEL_56:
      v15 = 0x800010001;
LABEL_79:
      *(_QWORD *)(a1 + 3976) = v15;
      v7 = 0xFFFFFFFFLL;
LABEL_80:
      v39 = v126;
      *(_OWORD *)(a1 + 4080) = v125;
      *(_OWORD *)(a1 + 4096) = v39;
      *(_OWORD *)(a1 + 4112) = v127[0];
      v40 = v122;
      *(_OWORD *)(a1 + 4016) = v121;
      *(_OWORD *)(a1 + 4032) = v40;
      v41 = v124;
      *(_OWORD *)(a1 + 4048) = v123;
      *(_OWORD *)(a1 + 4064) = v41;
      v42 = *(_OWORD *)&buf[16];
      *(_OWORD *)(a1 + 3984) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 4000) = v42;
      *(_OWORD *)(a1 + 4124) = *(_OWORD *)((char *)v127 + 12);
      *(_OWORD *)(a1 + 4236) = v108;
      *(_OWORD *)(a1 + 4252) = v109;
      *(_OWORD *)(a1 + 4268) = *(_OWORD *)v110;
      *(_OWORD *)(a1 + 4280) = *(_OWORD *)&v110[12];
      *(_OWORD *)(a1 + 4172) = v104;
      *(_OWORD *)(a1 + 4188) = v105;
      *(_OWORD *)(a1 + 4204) = v106;
      *(_OWORD *)(a1 + 4220) = v107;
      *(_OWORD *)(a1 + 4140) = v102;
      *(_OWORD *)(a1 + 4156) = v103;
      *(_OWORD *)(a1 + 4392) = v99;
      *(_OWORD *)(a1 + 4408) = v100;
      *(_OWORD *)(a1 + 4424) = *(_OWORD *)v101;
      *(_OWORD *)(a1 + 4436) = *(_OWORD *)&v101[12];
      *(_OWORD *)(a1 + 4328) = v95;
      *(_OWORD *)(a1 + 4344) = v96;
      *(_OWORD *)(a1 + 4360) = v97;
      *(_OWORD *)(a1 + 4376) = v98;
      *(_OWORD *)(a1 + 4296) = v93;
      *(_OWORD *)(a1 + 4312) = v94;
      *(_OWORD *)(a1 + 4548) = v90;
      *(_OWORD *)(a1 + 4564) = v91;
      *(_OWORD *)(a1 + 4580) = *(_OWORD *)v92;
      *(_OWORD *)(a1 + 4592) = *(_OWORD *)&v92[12];
      *(_OWORD *)(a1 + 4484) = v86;
      *(_OWORD *)(a1 + 4500) = v87;
      *(_OWORD *)(a1 + 4516) = v88;
      *(_OWORD *)(a1 + 4532) = v89;
      *(_OWORD *)(a1 + 4452) = v84;
      *(_OWORD *)(a1 + 4468) = v85;
      return v7;
    }
    v16 = -1.0;
    v17 = -1.0;
    if (v8)
    {
      sub_10011E258((double *)(a1 + 11560), a1 + 6408, a2);
      v17 = v18;
    }
    if (v9)
    {
      sub_10011E258((double *)(a1 + 11560), a1 + 8008, a2);
      v16 = v19;
      v20 = v8 ^ 1u;
    }
    else
    {
      v20 = v8 ^ 1 | 2u;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v111 = 68290050;
      v113 = 2082;
      v112 = 0;
      v114 = "";
      v115 = 1026;
      *(_DWORD *)v116 = v8;
      *(_WORD *)&v116[4] = 1026;
      *(_DWORD *)&v116[6] = v9;
      *(_WORD *)v117 = 2050;
      *(double *)&v117[2] = v17;
      v118 = 2050;
      v119 = v16;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition\", \"CellLocationValid\":%{public}d, \"LacLocationValid\":%{public}d, \"distFromWifiToCell\":\"%{public}f\", \"distFromWifiToLAC\":\"%{public}f\"}", v111, 0x32u);
    }
    if (((v8 | v9) & 1) != 0)
    {
      v22 = v20;
      if ((*(_DWORD *)(a2 + 96) - 6) < 3)
        goto LABEL_88;
      if (v17 > 0.0 && v17 < 40000.0)
      {
        if (*v83)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v23 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            goto LABEL_124;
          *(_DWORD *)v111 = 68289282;
          v112 = 0;
          v113 = 2082;
          v114 = "";
          v115 = 1026;
          *(_DWORD *)v116 = v7;
          v24 = v23;
          v25 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v62 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            goto LABEL_124;
          *(_DWORD *)v111 = 68289282;
          v112 = 0;
          v113 = 2082;
          v114 = "";
          v115 = 1026;
          *(_DWORD *)v116 = v7;
          v24 = v62;
          v25 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cell cross check passed\", \"conf\":%{public}d}", v111, 0x18u);
LABEL_124:
        v63 = *(_OWORD *)(a2 + 112);
        v125 = *(_OWORD *)(a2 + 96);
        v126 = v63;
        v127[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a2 + 140);
        v64 = *(_OWORD *)(a2 + 48);
        v121 = *(_OWORD *)(a2 + 32);
        v122 = v64;
        v65 = *(_OWORD *)(a2 + 80);
        v123 = *(_OWORD *)(a2 + 64);
        v124 = v65;
        v66 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)buf = *(_OWORD *)a2;
        *(_OWORD *)&buf[16] = v66;
        v67 = (v20 << 32) | 1;
LABEL_143:
        *(_QWORD *)(a1 + 3976) = v67;
        goto LABEL_80;
      }
      if (*v83)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v33 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          goto LABEL_87;
        *(_DWORD *)v111 = 68289538;
        v112 = 0;
        v113 = 2082;
        v114 = "";
        v115 = 2050;
        *(_QWORD *)v116 = 0x40E3880000000000;
        *(_WORD *)&v116[8] = 2050;
        *(double *)v117 = v17;
        v34 = v33;
        v35 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v44 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          goto LABEL_87;
        *(_DWORD *)v111 = 68289538;
        v112 = 0;
        v113 = 2082;
        v114 = "";
        v115 = 2050;
        *(_QWORD *)v116 = 0x40E3880000000000;
        *(_WORD *)&v116[8] = 2050;
        *(double *)v117 = v17;
        v34 = v44;
        v35 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cell cross check failed\", \"threshold\":\"%{public}f\", \"distToCell\":\"%{public}.1f\"}", v111, 0x26u);
LABEL_87:
      v22 = v20 | 0x40;
      *(_QWORD *)(a1 + 3976) = (v22 << 32) | 0x10001;
      v45 = v126;
      *(_OWORD *)(a1 + 4080) = v125;
      *(_OWORD *)(a1 + 4096) = v45;
      *(_OWORD *)(a1 + 4112) = v127[0];
      v46 = v122;
      *(_OWORD *)(a1 + 4016) = v121;
      *(_OWORD *)(a1 + 4032) = v46;
      v47 = v124;
      *(_OWORD *)(a1 + 4048) = v123;
      *(_OWORD *)(a1 + 4064) = v47;
      v48 = *(_OWORD *)&buf[16];
      *(_OWORD *)(a1 + 3984) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 4000) = v48;
      *(_OWORD *)(a1 + 4124) = *(_OWORD *)((char *)v127 + 12);
      *(_OWORD *)(a1 + 4236) = v108;
      *(_OWORD *)(a1 + 4252) = v109;
      *(_OWORD *)(a1 + 4268) = *(_OWORD *)v110;
      *(_OWORD *)(a1 + 4280) = *(_OWORD *)&v110[12];
      *(_OWORD *)(a1 + 4172) = v104;
      *(_OWORD *)(a1 + 4188) = v105;
      *(_OWORD *)(a1 + 4204) = v106;
      *(_OWORD *)(a1 + 4220) = v107;
      *(_OWORD *)(a1 + 4140) = v102;
      *(_OWORD *)(a1 + 4156) = v103;
      *(_OWORD *)(a1 + 4392) = v99;
      *(_OWORD *)(a1 + 4408) = v100;
      *(_OWORD *)(a1 + 4424) = *(_OWORD *)v101;
      *(_OWORD *)(a1 + 4436) = *(_OWORD *)&v101[12];
      *(_OWORD *)(a1 + 4328) = v95;
      *(_OWORD *)(a1 + 4344) = v96;
      *(_OWORD *)(a1 + 4360) = v97;
      *(_OWORD *)(a1 + 4376) = v98;
      *(_OWORD *)(a1 + 4296) = v93;
      *(_OWORD *)(a1 + 4312) = v94;
      *(_OWORD *)(a1 + 4548) = v90;
      *(_OWORD *)(a1 + 4564) = v91;
      *(_OWORD *)(a1 + 4580) = *(_OWORD *)v92;
      *(_OWORD *)(a1 + 4592) = *(_OWORD *)&v92[12];
      *(_OWORD *)(a1 + 4484) = v86;
      *(_OWORD *)(a1 + 4500) = v87;
      *(_OWORD *)(a1 + 4516) = v88;
      *(_OWORD *)(a1 + 4532) = v89;
      *(_OWORD *)(a1 + 4452) = v84;
      *(_OWORD *)(a1 + 4468) = v85;
LABEL_88:
      if (v7 <= 0x4E)
      {
        if (*v83)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v49 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            goto LABEL_112;
          *(_DWORD *)v111 = 68289538;
          v112 = 0;
          v113 = 2082;
          v114 = "";
          v115 = 1026;
          *(_DWORD *)v116 = v7;
          *(_WORD *)&v116[4] = 1026;
          *(_DWORD *)&v116[6] = 65;
          v50 = v49;
          v51 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v58 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            goto LABEL_112;
          *(_DWORD *)v111 = 68289538;
          v112 = 0;
          v113 = 2082;
          v114 = "";
          v115 = 1026;
          *(_DWORD *)v116 = v7;
          *(_WORD *)&v116[4] = 1026;
          *(_DWORD *)&v116[6] = 65;
          v50 = v58;
          v51 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,LAC cross check passed\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x1Eu);
LABEL_112:
        v37 = ((unint64_t)(v22 | 8) << 32) | 0x10001;
        goto LABEL_113;
      }
      if (v16 >= 0.0 && v16 <= 150000.0)
      {
        if (*v83)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v52 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            goto LABEL_130;
          *(_DWORD *)v111 = 68289282;
          v112 = 0;
          v113 = 2082;
          v114 = "";
          v115 = 1026;
          *(_DWORD *)v116 = v7;
          v53 = v52;
          v54 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v68 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            goto LABEL_130;
          *(_DWORD *)v111 = 68289282;
          v112 = 0;
          v113 = 2082;
          v114 = "";
          v115 = 1026;
          *(_DWORD *)v116 = v7;
          v53 = v68;
          v54 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, LAC cross check passed\", \"conf\":%{public}d}", v111, 0x18u);
LABEL_130:
        v69 = *(_OWORD *)(a2 + 112);
        v125 = *(_OWORD *)(a2 + 96);
        v126 = v69;
        v127[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a2 + 140);
        v70 = *(_OWORD *)(a2 + 48);
        v121 = *(_OWORD *)(a2 + 32);
        v122 = v70;
        v71 = *(_OWORD *)(a2 + 80);
        v123 = *(_OWORD *)(a2 + 64);
        v124 = v71;
        v72 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)buf = *(_OWORD *)a2;
        *(_OWORD *)&buf[16] = v72;
        v67 = (v22 << 32) | 1;
        goto LABEL_143;
      }
      if (*(_DWORD *)(a2 + 96) == 10)
      {
        if (*v83)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v55 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            goto LABEL_136;
          *(_DWORD *)v111 = 68289794;
          v113 = 2082;
          v112 = 0;
          v114 = "";
          v115 = 2050;
          *(_QWORD *)v116 = 0x41024F8000000000;
          *(_WORD *)&v116[8] = 1026;
          *(_DWORD *)v117 = v7;
          *(_WORD *)&v117[4] = 1026;
          *(_DWORD *)&v117[6] = 65;
          v56 = v55;
          v57 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v73 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            goto LABEL_136;
          *(_DWORD *)v111 = 68289794;
          v113 = 2082;
          v112 = 0;
          v114 = "";
          v115 = 2050;
          *(_QWORD *)v116 = 0x41024F8000000000;
          *(_WORD *)&v116[8] = 1026;
          *(_DWORD *)v117 = v7;
          *(_WORD *)&v117[4] = 1026;
          *(_DWORD *)&v117[6] = 65;
          v56 = v73;
          v57 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,LAC cross check failed\", \"threshold\":\"%{public}f\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x28u);
LABEL_136:
        v74 = *(_OWORD *)(a2 + 112);
        v125 = *(_OWORD *)(a2 + 96);
        v126 = v74;
        v127[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a2 + 140);
        v75 = *(_OWORD *)(a2 + 48);
        v121 = *(_OWORD *)(a2 + 32);
        v122 = v75;
        v76 = *(_OWORD *)(a2 + 80);
        v123 = *(_OWORD *)(a2 + 64);
        v124 = v76;
        v77 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)buf = *(_OWORD *)a2;
        *(_OWORD *)&buf[16] = v77;
        v67 = (v22 << 32) | 1;
        v7 = 65;
        goto LABEL_143;
      }
      if (*v83)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v59 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          goto LABEL_142;
        *(_DWORD *)v111 = 68289794;
        v113 = 2082;
        v112 = 0;
        v114 = "";
        v115 = 2050;
        *(_QWORD *)v116 = 0x41024F8000000000;
        *(_WORD *)&v116[8] = 1026;
        *(_DWORD *)v117 = v7;
        *(_WORD *)&v117[4] = 1026;
        *(_DWORD *)&v117[6] = 69;
        v60 = v59;
        v61 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v78 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          goto LABEL_142;
        *(_DWORD *)v111 = 68289794;
        v113 = 2082;
        v112 = 0;
        v114 = "";
        v115 = 2050;
        *(_QWORD *)v116 = 0x41024F8000000000;
        *(_WORD *)&v116[8] = 1026;
        *(_DWORD *)v117 = v7;
        *(_WORD *)&v117[4] = 1026;
        *(_DWORD *)&v117[6] = 69;
        v60 = v78;
        v61 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,LAC cross check failed\", \"threshold\":\"%{public}f\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x28u);
LABEL_142:
      v79 = *(_OWORD *)(a2 + 112);
      v125 = *(_OWORD *)(a2 + 96);
      v126 = v79;
      v127[0] = *(_OWORD *)(a2 + 128);
      *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a2 + 140);
      v80 = *(_OWORD *)(a2 + 48);
      v121 = *(_OWORD *)(a2 + 32);
      v122 = v80;
      v81 = *(_OWORD *)(a2 + 80);
      v123 = *(_OWORD *)(a2 + 64);
      v124 = v81;
      v82 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)buf = *(_OWORD *)a2;
      *(_OWORD *)&buf[16] = v82;
      v67 = (v22 << 32) | 1;
      v7 = 69;
      goto LABEL_143;
    }
    if (v7 >= 0x42)
    {
      if (*v83)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v26 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          goto LABEL_72;
        *(_DWORD *)v111 = 68289538;
        v112 = 0;
        v113 = 2082;
        v114 = "";
        v115 = 1026;
        *(_DWORD *)v116 = v7;
        *(_WORD *)&v116[4] = 1026;
        *(_DWORD *)&v116[6] = 65;
        v27 = v26;
        v28 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v36 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          goto LABEL_72;
        *(_DWORD *)v111 = 68289538;
        v112 = 0;
        v113 = 2082;
        v114 = "";
        v115 = 1026;
        *(_DWORD *)v116 = v7;
        *(_WORD *)&v116[4] = 1026;
        *(_DWORD *)&v116[6] = 65;
        v27 = v36;
        v28 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, downgrade,no Cell/LAC fix available\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x1Eu);
LABEL_72:
      v37 = (v20 << 32) | 0x10001;
LABEL_113:
      *(_QWORD *)(a1 + 3976) = v37;
      v7 = 65;
      goto LABEL_80;
    }
    if (*v83)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v30 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_78;
      *(_DWORD *)v111 = 68289538;
      v112 = 0;
      v113 = 2082;
      v114 = "";
      v115 = 1026;
      *(_DWORD *)v116 = 65;
      *(_WORD *)&v116[4] = 1026;
      *(_DWORD *)&v116[6] = -1;
      v31 = v30;
      v32 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v38 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_78;
      *(_DWORD *)v111 = 68289538;
      v112 = 0;
      v113 = 2082;
      v114 = "";
      v115 = 1026;
      *(_DWORD *)v116 = 65;
      *(_WORD *)&v116[4] = 1026;
      *(_DWORD *)&v116[6] = -1;
      v31 = v38;
      v32 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, downgrade,invalid confidence\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x1Eu);
LABEL_78:
    v15 = (v20 << 32) | 0x10001;
    goto LABEL_79;
  }
  v5 = *(_DWORD *)(a2 + 84);
  if (v5 <= 0x45)
    v6 = 69;
  else
    v6 = *(_DWORD *)(a2 + 84);
  if (*(_BYTE *)(a1 + 11712))
    return v5;
  else
    return v6;
}

uint64_t sub_100EB23B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v5;
  double *v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  int v39;
  int v40;
  __int16 v41;
  const char *v42;

  v3 = (_BYTE *)(a1 + 11672);
  if ((_DWORD)a2 == -1)
  {
    if (*v3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v12 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 0xFFFFFFFFLL;
      v39 = 68289026;
      v40 = 0;
      v41 = 2082;
      v42 = "";
      v13 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,invalid confidence\"}";
LABEL_23:
      v14 = v12;
      v15 = OS_LOG_TYPE_DEFAULT;
LABEL_33:
      _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, (uint8_t *)&v39, 0x12u);
      return 0xFFFFFFFFLL;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v16 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return 0xFFFFFFFFLL;
    v39 = 68289026;
    v40 = 0;
    v41 = 2082;
    v42 = "";
    v13 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,invalid confidence\"}";
LABEL_32:
    v14 = v16;
    v15 = OS_LOG_TYPE_DEBUG;
    goto LABEL_33;
  }
  v5 = a2;
  if ((sub_100182290(a3) & 1) == 0)
  {
    if (*v3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v12 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 0xFFFFFFFFLL;
      v39 = 68289026;
      v40 = 0;
      v41 = 2082;
      v42 = "";
      v13 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,invalid location assistance\"}";
      goto LABEL_23;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v16 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return 0xFFFFFFFFLL;
    v39 = 68289026;
    v40 = 0;
    v41 = 2082;
    v42 = "";
    v13 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,invalid location assistance\"}";
    goto LABEL_32;
  }
  v7 = (double *)(a1 + 3196);
  if (v5 > 0x44 || !sub_100182290(a1 + 3176) || *(_DWORD *)(a1 + 3260) < 0x45u)
    goto LABEL_52;
  sub_10011E258((double *)(a1 + 11560), a3, a1 + 3176);
  if (v8 >= 0.0 && v8 <= (*v7 + *(double *)(a3 + 20)) * 3.0)
  {
    if (*v3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v19 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_51;
      v39 = 68289026;
      v40 = 0;
      v41 = 2082;
      v42 = "";
      v20 = v19;
      v21 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v22 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_51;
      v39 = 68289026;
      v40 = 0;
      v41 = 2082;
      v42 = "";
      v20 = v22;
      v21 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,cross-check with cached HELO passed. Bumping confidence to HIGH\"}", (uint8_t *)&v39, 0x12u);
LABEL_51:
    v5 = 79;
    goto LABEL_52;
  }
  if (*v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v39 = 68289026;
      v40 = 0;
      v41 = 2082;
      v42 = "";
      v10 = v9;
      v11 = OS_LOG_TYPE_DEFAULT;
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,cross-check with cached HELO failed. Not bumping confidence\"}", (uint8_t *)&v39, 0x12u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v39 = 68289026;
      v40 = 0;
      v41 = 2082;
      v42 = "";
      v10 = v18;
      v11 = OS_LOG_TYPE_DEBUG;
      goto LABEL_40;
    }
  }
LABEL_52:
  if (*v7 < 0.0 || *(_DWORD *)(a1 + 3260) <= (int)v5)
  {
    v23 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 3176) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 3192) = v23;
    v24 = *(_OWORD *)(a3 + 32);
    v25 = *(_OWORD *)(a3 + 48);
    v26 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a1 + 3240) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 3256) = v26;
    *(_OWORD *)(a1 + 3208) = v24;
    *(_OWORD *)(a1 + 3224) = v25;
    v27 = *(_OWORD *)(a3 + 96);
    v28 = *(_OWORD *)(a3 + 112);
    v29 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 3316) = *(_OWORD *)(a3 + 140);
    *(_OWORD *)(a1 + 3288) = v28;
    *(_OWORD *)(a1 + 3304) = v29;
    *(_OWORD *)(a1 + 3272) = v27;
    memcpy((void *)(a1 + 3336), (const void *)(a3 + 160), 0x201uLL);
    sub_100349198((_QWORD *)(a1 + 3856), (uint64_t *)(a3 + 680));
    v30 = *(_OWORD *)(a3 + 696);
    v31 = *(_OWORD *)(a3 + 712);
    *(_OWORD *)(a1 + 3904) = *(_OWORD *)(a3 + 728);
    *(_OWORD *)(a1 + 3888) = v31;
    *(_OWORD *)(a1 + 3872) = v30;
    v32 = *(_OWORD *)(a3 + 744);
    v33 = *(_OWORD *)(a3 + 760);
    v34 = *(_OWORD *)(a3 + 776);
    *(_BYTE *)(a1 + 3968) = *(_BYTE *)(a3 + 792);
    *(_OWORD *)(a1 + 3952) = v34;
    *(_OWORD *)(a1 + 3936) = v33;
    *(_OWORD *)(a1 + 3920) = v32;
    *(_DWORD *)(a1 + 3260) = v5;
    if (*v3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v35 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v39 = 68289026;
        v40 = 0;
        v41 = 2082;
        v42 = "";
        v36 = v35;
        v37 = OS_LOG_TYPE_DEFAULT;
LABEL_63:
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,cache,helo location with current location\"}", (uint8_t *)&v39, 0x12u);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v38 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v39 = 68289026;
        v40 = 0;
        v41 = 2082;
        v42 = "";
        v36 = v38;
        v37 = OS_LOG_TYPE_DEBUG;
        goto LABEL_63;
      }
    }
  }
  return v5;
}

uint64_t sub_100EB2A54(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = *(unsigned __int8 *)(a1 + 800);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v7;
  v10 = *(_OWORD *)(a2 + 112);
  v9 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v11;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  if (v4)
  {
    sub_100349198((_QWORD *)(a1 + 680), (uint64_t *)(a2 + 680));
    v13 = *(_OWORD *)(a2 + 712);
    v12 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 712) = v13;
    *(_OWORD *)(a1 + 728) = v12;
    v15 = *(_OWORD *)(a2 + 760);
    v14 = *(_OWORD *)(a2 + 776);
    v16 = *(_OWORD *)(a2 + 744);
    *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
    *(_OWORD *)(a1 + 760) = v15;
    *(_OWORD *)(a1 + 776) = v14;
    *(_OWORD *)(a1 + 744) = v16;
  }
  else
  {
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    v17 = *(_QWORD *)(a2 + 688);
    *(_QWORD *)(a1 + 688) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(_OWORD *)(a2 + 696);
    v21 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v21;
    *(_OWORD *)(a1 + 696) = v20;
    v22 = *(_OWORD *)(a2 + 744);
    v23 = *(_OWORD *)(a2 + 760);
    v24 = *(_OWORD *)(a2 + 776);
    *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
    *(_OWORD *)(a1 + 760) = v23;
    *(_OWORD *)(a1 + 776) = v24;
    *(_OWORD *)(a1 + 744) = v22;
    *(_BYTE *)(a1 + 800) = 1;
  }
  return a1;
}

void sub_100EB2B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _OWORD v38[8];
  _OWORD v39[2];
  _BYTE v40[513];
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  uint64_t buf;
  __int16 v53;
  const char *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;

  *(CFAbsoluteTime *)(a2 + 76) = CFAbsoluteTimeGetCurrent();
  *(double *)(a2 + 192) = sub_100078B88();
  *(double *)(a2 + 504) = sub_1001FCBB4();
  *(_QWORD *)(a2 + 808) = 0;
  if (*(_BYTE *)(a1 + 11672))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a2 + 4);
      v6 = *(_QWORD *)(a2 + 12);
      v7 = *(_QWORD *)(a2 + 28);
      v8 = *(_QWORD *)(a2 + 20);
      v9 = *(_QWORD *)(a2 + 36);
      v10 = *(_DWORD *)(a2 + 800);
      v11 = *(_DWORD *)(a2 + 804);
      v12 = *(unsigned __int8 *)(a2 + 816);
      buf = 68291075;
      v53 = 2082;
      v54 = "";
      v55 = 2049;
      v56 = v5;
      v57 = 2049;
      v58 = v6;
      v59 = 2050;
      v60 = v7;
      v61 = 2050;
      v62 = v8;
      v63 = 2050;
      v64 = v9;
      v65 = 1026;
      v66 = v10;
      v67 = 1026;
      v68 = v11;
      v69 = 1026;
      v70 = v12;
      v13 = v4;
      v14 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, TEPA location assistance\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"hReliability\":%{public}d, \"vReliability\":%{public}d, \"tightlyCoupled\":%{public}d}", (uint8_t *)&buf, 0x56u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a2 + 4);
      v17 = *(_QWORD *)(a2 + 12);
      v18 = *(_QWORD *)(a2 + 28);
      v19 = *(_QWORD *)(a2 + 20);
      v20 = *(_QWORD *)(a2 + 36);
      v21 = *(_DWORD *)(a2 + 800);
      v22 = *(_DWORD *)(a2 + 804);
      v23 = *(unsigned __int8 *)(a2 + 816);
      buf = 68291075;
      v53 = 2082;
      v54 = "";
      v55 = 2049;
      v56 = v16;
      v57 = 2049;
      v58 = v17;
      v59 = 2050;
      v60 = v18;
      v61 = 2050;
      v62 = v19;
      v63 = 2050;
      v64 = v20;
      v65 = 1026;
      v66 = v21;
      v67 = 1026;
      v68 = v22;
      v69 = 1026;
      v70 = v23;
      v13 = v15;
      v14 = OS_LOG_TYPE_DEBUG;
      goto LABEL_10;
    }
  }
  v24 = *(_OWORD *)(a2 + 112);
  v38[6] = *(_OWORD *)(a2 + 96);
  v38[7] = v24;
  v39[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)(a2 + 140);
  v25 = *(_OWORD *)(a2 + 48);
  v38[2] = *(_OWORD *)(a2 + 32);
  v38[3] = v25;
  v26 = *(_OWORD *)(a2 + 80);
  v38[4] = *(_OWORD *)(a2 + 64);
  v38[5] = v26;
  v27 = *(_OWORD *)(a2 + 16);
  v38[0] = *(_OWORD *)a2;
  v38[1] = v27;
  memcpy(v40, (const void *)(a2 + 160), sizeof(v40));
  v41 = *(_QWORD *)(a2 + 680);
  v28 = *(std::__shared_weak_count **)(a2 + 688);
  v42 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(_OWORD *)(a2 + 776);
  v47 = *(_OWORD *)(a2 + 760);
  v48 = v31;
  v32 = *(_OWORD *)(a2 + 712);
  v43 = *(_OWORD *)(a2 + 696);
  v44 = v32;
  v33 = *(_OWORD *)(a2 + 744);
  v45 = *(_OWORD *)(a2 + 728);
  v46 = v33;
  v49 = *(_BYTE *)(a2 + 792);
  v50 = *(_OWORD *)(a2 + 800);
  v51 = *(_QWORD *)(a2 + 816);
  v34 = *(_QWORD *)(a1 + 32);
  if (!v34)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v34 + 48))(v34, v38);
  v35 = v42;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_100EB2ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

__n128 sub_100EB2EE4(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  char v16;

  v4 = a1 + 9944;
  v5 = *a2;
  *(_OWORD *)(a1 + 9960) = a2[1];
  *(_OWORD *)(a1 + 9944) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  *(_OWORD *)(a1 + 10024) = a2[5];
  *(_OWORD *)(a1 + 10008) = v8;
  *(_OWORD *)(a1 + 9992) = v7;
  *(_OWORD *)(a1 + 9976) = v6;
  v9 = *(__int128 *)((char *)a2 + 140);
  v10 = a2[6];
  v11 = a2[7];
  *(_OWORD *)(a1 + 10072) = a2[8];
  *(_OWORD *)(a1 + 10056) = v11;
  *(_OWORD *)(a1 + 10040) = v10;
  *(_OWORD *)(a1 + 10084) = v9;
  memcpy((void *)(a1 + 10104), a2 + 10, 0x201uLL);
  sub_100349198((_QWORD *)(a1 + 10624), (uint64_t *)a2 + 85);
  v13 = *(__int128 *)((char *)a2 + 712);
  v12 = *(__int128 *)((char *)a2 + 728);
  *(_OWORD *)(a1 + 10640) = *(__int128 *)((char *)a2 + 696);
  *(_OWORD *)(a1 + 10656) = v13;
  *(_OWORD *)(a1 + 10672) = v12;
  v15 = *(__int128 *)((char *)a2 + 760);
  result = *(__n128 *)((char *)a2 + 776);
  v16 = *((_BYTE *)a2 + 792);
  *(_OWORD *)(a1 + 10688) = *(__int128 *)((char *)a2 + 744);
  *(_BYTE *)(v4 + 792) = v16;
  *(__n128 *)(a1 + 10720) = result;
  *(_OWORD *)(a1 + 10704) = v15;
  return result;
}

void sub_100EB2FB0(uint64_t a1, _OWORD *a2)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  _BYTE v24[96];
  __int128 v25;
  __int128 v26;
  _BYTE v27[32];
  uint64_t v28;
  std::__shared_weak_count *v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  *(_DWORD *)v24 = 0xFFFF;
  *(_OWORD *)&v24[4] = 0uLL;
  *(_OWORD *)&v24[20] = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v24[36] = _Q0;
  *(_OWORD *)&v24[52] = _Q0;
  *(_OWORD *)&v24[68] = _Q0;
  *(_DWORD *)&v24[84] = 0;
  v25 = 0uLL;
  *(_QWORD *)&v24[88] = 0xBFF0000000000000;
  LODWORD(v26) = 0;
  *(_QWORD *)((char *)&v26 + 4) = 0xBFF0000000000000;
  HIDWORD(v26) = 0x7FFFFFFF;
  memset(v27, 0, 25);
  sub_10012A33C(&v28);
  v9 = a2[7];
  v25 = a2[6];
  v26 = v9;
  *(_OWORD *)v27 = a2[8];
  *(_OWORD *)&v27[12] = *(_OWORD *)((char *)a2 + 140);
  v10 = a2[3];
  *(_OWORD *)&v24[32] = a2[2];
  *(_OWORD *)&v24[48] = v10;
  v11 = a2[5];
  *(_OWORD *)&v24[64] = a2[4];
  *(_OWORD *)&v24[80] = v11;
  v12 = a2[1];
  *(_OWORD *)v24 = *a2;
  *(_OWORD *)&v24[16] = v12;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021906A0);
  v13 = (uint64_t *)(a1 + 1580);
  v14 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v15 = *v13;
    v16 = *(_QWORD *)(a1 + 1588);
    *(_DWORD *)buf = 134283777;
    v35 = v15;
    v36 = 2049;
    v37 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "GnssAssistancePosition,CachedReferenceLocation location,lat,%{private}+.6f,lon,%{private}.6f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021906A0);
    v20 = *v13;
    v21 = *(_QWORD *)(a1 + 1588);
    v30 = 134283777;
    v31 = v20;
    v32 = 2049;
    v33 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "GnssAssistancePosition,CachedReferenceLocation location,lat,%{private}+.6f,lon,%{private}.6f", &v30, 22, *(_QWORD *)v24, *(_QWORD *)&v24[8], *(_OWORD *)&v24[16], *(_OWORD *)&v24[32], *(_OWORD *)&v24[48], *(_OWORD *)&v24[64], *(_QWORD *)&v24[80], *(_QWORD *)&v24[88], v25,
      v26,
      *(_OWORD *)v27,
      *(_QWORD *)&v27[16],
      *(_QWORD *)&v27[24]);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::setRelayedLocation(const CLDaemonLocation &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  sub_1001550DC(a1, (uint64_t)v24, 0);
  v17 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_100EB3268(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_100EB3284(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  v3 = (_BYTE *)(a1 + 11672);
  v4 = *(unsigned __int8 *)(a1 + 11672);
  *(_BYTE *)(a1 + 11672) = sub_100CD597C(a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *v3;
    v9 = 68289538;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 1026;
    v14 = v4;
    v15 = 1026;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Updating emergency state\", \"wasInEmergency\":%{public}d, \"fInEmergency\":%{public}d}", (uint8_t *)&v9, 0x1Eu);
  }
  if (v4)
  {
    if (!*v3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Exiting emergency mode\"}", (uint8_t *)&v9, 0x12u);
      }
      sub_100EB4324(a1);
    }
  }
  else if (*v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Entering emergency mode\"}", (uint8_t *)&v9, 0x12u);
    }
    sub_100EB34C0(a1);
  }
}

id sub_100EB34C0(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  NSObject *v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  id result;
  const char *v103;
  uint8_t *v104;
  const char *v105;
  uint8_t *v106;
  uint64_t v107;
  _WORD v108[8];
  uint8_t buf[4];
  int v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;

  v2 = a1 + 1576;
  *(_OWORD *)(a1 + 4080) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 4096) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 4112) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 4124) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 4016) = xmmword_101C17498;
  *(_OWORD *)(a1 + 4032) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 4048) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 4064) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 3984) = xmmword_101C17478;
  *(_OWORD *)(a1 + 4000) = xmmword_101C17488;
  *(_OWORD *)(a1 + 4236) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 4252) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 4268) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 4280) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 4172) = xmmword_101C17498;
  *(_OWORD *)(a1 + 4188) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 4204) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 4220) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 4140) = xmmword_101C17478;
  *(_OWORD *)(a1 + 4156) = xmmword_101C17488;
  *(_OWORD *)(a1 + 4392) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 4408) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 4424) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 4436) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 4328) = xmmword_101C17498;
  *(_OWORD *)(a1 + 4344) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 4360) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 4376) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 4296) = xmmword_101C17478;
  *(_OWORD *)(a1 + 4312) = xmmword_101C17488;
  *(_OWORD *)(a1 + 4548) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 4564) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 4580) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 4592) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 4484) = xmmword_101C17498;
  *(_OWORD *)(a1 + 4500) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 4516) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 4532) = xmmword_101C174C8;
  v3 = (_BYTE *)(a1 + 11672);
  v4 = (uint64_t *)(a1 + 1580);
  *(_QWORD *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 4452) = xmmword_101C17478;
  *(_OWORD *)(a1 + 4468) = xmmword_101C17488;
  if (*(_BYTE *)(a1 + 11672))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a1 + 1672);
      v7 = sub_100182290(v2);
      v8 = *v4;
      v9 = v4[1];
      v11 = v4[2];
      v10 = v4[3];
      v12 = v4[4];
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v6;
      v115 = 1026;
      v116 = v7;
      v117 = 2049;
      v118 = v8;
      v119 = 2049;
      v120 = v9;
      v121 = 2049;
      v122 = v10;
      v123 = 2050;
      v124 = v11;
      v125 = 2050;
      v126 = v12;
      v13 = v5;
      v14 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fCachedReferenceLocation \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_DWORD *)(a1 + 1672);
      v17 = sub_100182290(v2);
      v18 = *v4;
      v19 = v4[1];
      v21 = v4[2];
      v20 = v4[3];
      v22 = v4[4];
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v16;
      v115 = 1026;
      v116 = v17;
      v117 = 2049;
      v118 = v18;
      v119 = 2049;
      v120 = v19;
      v121 = 2049;
      v122 = v20;
      v123 = 2050;
      v124 = v21;
      v125 = 2050;
      v126 = v22;
      v13 = v15;
      v14 = OS_LOG_TYPE_DEBUG;
      goto LABEL_10;
    }
  }
  if (*v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_DWORD *)(a1 + 6504);
      v25 = sub_100182290(a1 + 6408);
      v26 = v4[604];
      v27 = v4[605];
      v28 = v4[607];
      v29 = v4[606];
      v30 = v4[608];
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v24;
      v115 = 1026;
      v116 = v25;
      v117 = 2049;
      v118 = v26;
      v119 = 2049;
      v120 = v27;
      v121 = 2049;
      v122 = v28;
      v123 = 2050;
      v124 = v29;
      v125 = 2050;
      v126 = v30;
      v31 = v23;
      v32 = OS_LOG_TYPE_DEFAULT;
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fLastCellLocation \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v33 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v34 = *(_DWORD *)(a1 + 6504);
      v35 = sub_100182290(a1 + 6408);
      v36 = v4[604];
      v37 = v4[605];
      v38 = v4[607];
      v39 = v4[606];
      v40 = v4[608];
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v34;
      v115 = 1026;
      v116 = v35;
      v117 = 2049;
      v118 = v36;
      v119 = 2049;
      v120 = v37;
      v121 = 2049;
      v122 = v38;
      v123 = 2050;
      v124 = v39;
      v125 = 2050;
      v126 = v40;
      v31 = v33;
      v32 = OS_LOG_TYPE_DEBUG;
      goto LABEL_20;
    }
  }
  if (*v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v42 = *(_DWORD *)(a1 + 7304);
      v43 = sub_100182290(a1 + 7208);
      v44 = v4[704];
      v45 = v4[705];
      v46 = v4[707];
      v47 = v4[706];
      v48 = v4[708];
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v42;
      v115 = 1026;
      v116 = v43;
      v117 = 2049;
      v118 = v44;
      v119 = 2049;
      v120 = v45;
      v121 = 2049;
      v122 = v46;
      v123 = 2050;
      v124 = v47;
      v125 = 2050;
      v126 = v48;
      v49 = v41;
      v50 = OS_LOG_TYPE_DEFAULT;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fLastPrefilteredCellLocation \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v51 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v52 = *(_DWORD *)(a1 + 7304);
      v53 = sub_100182290(a1 + 7208);
      v54 = v4[704];
      v55 = v4[705];
      v56 = v4[707];
      v57 = v4[706];
      v58 = v4[708];
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v52;
      v115 = 1026;
      v116 = v53;
      v117 = 2049;
      v118 = v54;
      v119 = 2049;
      v120 = v55;
      v121 = 2049;
      v122 = v56;
      v123 = 2050;
      v124 = v57;
      v125 = 2050;
      v126 = v58;
      v49 = v51;
      v50 = OS_LOG_TYPE_DEBUG;
      goto LABEL_30;
    }
  }
  if (*v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v59 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v60 = *(_DWORD *)(a1 + 8104);
      v61 = sub_100182290(a1 + 8008);
      v62 = v4[804];
      v63 = v4[805];
      v64 = v4[807];
      v65 = v4[806];
      v66 = v4[808];
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v60;
      v115 = 1026;
      v116 = v61;
      v117 = 2049;
      v118 = v62;
      v119 = 2049;
      v120 = v63;
      v121 = 2049;
      v122 = v64;
      v123 = 2050;
      v124 = v65;
      v125 = 2050;
      v126 = v66;
      v67 = v59;
      v68 = OS_LOG_TYPE_DEFAULT;
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fLastLACLocation \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v69 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v70 = *(_DWORD *)(a1 + 8104);
      v71 = sub_100182290(a1 + 8008);
      v72 = v4[804];
      v73 = v4[805];
      v74 = v4[807];
      v75 = v4[806];
      v76 = v4[808];
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v70;
      v115 = 1026;
      v116 = v71;
      v117 = 2049;
      v118 = v72;
      v119 = 2049;
      v120 = v73;
      v121 = 2049;
      v122 = v74;
      v123 = 2050;
      v124 = v75;
      v125 = 2050;
      v126 = v76;
      v67 = v69;
      v68 = OS_LOG_TYPE_DEBUG;
      goto LABEL_40;
    }
  }
  if (*v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v77 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v78 = *(_DWORD *)(a1 + 4908);
      v79 = sub_100182290(a1 + 4812);
      v80 = *(_QWORD *)(a1 + 4816);
      v81 = *(_QWORD *)(a1 + 4824);
      v82 = *(_QWORD *)(a1 + 4840);
      v83 = *(_QWORD *)(a1 + 4832);
      v84 = *(_QWORD *)(a1 + 4848);
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v78;
      v115 = 1026;
      v116 = v79;
      v117 = 2049;
      v118 = v80;
      v119 = 2049;
      v120 = v81;
      v121 = 2049;
      v122 = v82;
      v123 = 2050;
      v124 = v83;
      v125 = 2050;
      v126 = v84;
      v85 = v77;
      v86 = OS_LOG_TYPE_DEFAULT;
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fLastTightlyCoupledPosition \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v87 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v88 = *(_DWORD *)(a1 + 4908);
      v89 = sub_100182290(a1 + 4812);
      v90 = *(_QWORD *)(a1 + 4816);
      v91 = *(_QWORD *)(a1 + 4824);
      v92 = *(_QWORD *)(a1 + 4840);
      v93 = *(_QWORD *)(a1 + 4832);
      v94 = *(_QWORD *)(a1 + 4848);
      *(_DWORD *)buf = 68290819;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v113 = 1026;
      v114 = v88;
      v115 = 1026;
      v116 = v89;
      v117 = 2049;
      v118 = v90;
      v119 = 2049;
      v120 = v91;
      v121 = 2049;
      v122 = v92;
      v123 = 2050;
      v124 = v93;
      v125 = 2050;
      v126 = v94;
      v85 = v87;
      v86 = OS_LOG_TYPE_DEBUG;
      goto LABEL_50;
    }
  }
  if (v3[1] && *v3)
  {
    v95 = *(_QWORD *)(a1 + 11632);
    if (v95)
      objc_msgSend(*(id *)(v95 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v95 + 8), 4, 0);
    if (*(_QWORD *)(a1 + 11648))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021906C0);
      v96 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "WlpReg, 1, gnssemer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021906C0);
        v108[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WlpReg, 1, gnssemer", v108, 2);
        v104 = (uint8_t *)v103;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::onEmergencyEntry()", "%s\n", v103);
        if (v104 != buf)
          free(v104);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 11648) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 11648) + 8), 0, 0);
    }
    if (*(_QWORD *)(a1 + 11656))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021906C0);
      v97 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "UclpReg, 1, gnssemer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021906C0);
        v108[0] = 0;
        LODWORD(v107) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "UclpReg, 1, gnssemer", v108, v107);
        v106 = (uint8_t *)v105;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::onEmergencyEntry()", "%s\n", v105);
        if (v106 != buf)
          free(v106);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 11656) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 11656) + 8), 0, 0);
    }
  }
  *(CFAbsoluteTime *)(a1 + 11704) = CFAbsoluteTimeGetCurrent();
  if (*v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v98 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v99 = v98;
      v100 = OS_LOG_TYPE_DEFAULT;
LABEL_78:
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Initializing cell position injection timer, inject every 1 seconds during emergency\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v101 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      v110 = 0;
      v111 = 2082;
      v112 = "";
      v99 = v101;
      v100 = OS_LOG_TYPE_DEBUG;
      goto LABEL_78;
    }
  }
  result = objc_msgSend(*(id *)(a1 + 11720), "setNextFireDelay:interval:", 1.0, 1.0);
  v3[40] = 0;
  return result;
}

id sub_100EB4324(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  id result;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 11632);
  if (v2)
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 4);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021906C0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "WlpReg, 0, gnssemer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021906C0);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WlpReg, 0, gnssemer", v11, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::onEmergencyExit()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 11648) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 11648) + 8), 0);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021906C0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UclpReg, 0, gnssemer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021906C0);
    v11[0] = 0;
    LODWORD(v10) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "UclpReg, 0, gnssemer", v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::onEmergencyExit()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 11656) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 11656) + 8), 0);
  sub_100EB4740(a1);
  result = objc_msgSend(*(id *)(a1 + 11720), "setNextFireDelay:", 1.79769313e308);
  *(_BYTE *)(a1 + 11712) = 0;
  *(_QWORD *)(a1 + 11704) = 0xBFF0000000000000;
  return result;
}

void sub_100EB4638(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 11673);
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = v5;
    v11 = 1026;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Updating HELO permission\", \"old\":%{public}d, \"new\":%{public}d}", (uint8_t *)v6, 0x1Eu);
  }
  *(_BYTE *)(a1 + 11673) = a2;
}

double sub_100EB4740(uint64_t a1)
{
  NSObject *v2;
  double result;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Clearing cached HELO location\"}", (uint8_t *)v4, 0x12u);
  }
  sub_10021CBD4(a1 + 3176);
  *(_OWORD *)(a1 + 4080) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 4096) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 4112) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 4124) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 4016) = xmmword_101C17498;
  *(_OWORD *)(a1 + 4032) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 4048) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 4064) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 3984) = xmmword_101C17478;
  *(_OWORD *)(a1 + 4000) = xmmword_101C17488;
  *(_OWORD *)(a1 + 4236) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 4252) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 4268) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 4280) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 4172) = xmmword_101C17498;
  *(_OWORD *)(a1 + 4188) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 4204) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 4220) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 4140) = xmmword_101C17478;
  *(_OWORD *)(a1 + 4156) = xmmword_101C17488;
  *(_OWORD *)(a1 + 4392) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 4408) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 4424) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 4436) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 4328) = xmmword_101C17498;
  *(_OWORD *)(a1 + 4344) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 4360) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 4376) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 4296) = xmmword_101C17478;
  *(_OWORD *)(a1 + 4312) = xmmword_101C17488;
  *(_OWORD *)(a1 + 4548) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 4564) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 4580) = xmmword_101C174F8;
  result = 0.0;
  *(_OWORD *)(a1 + 4592) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 4484) = xmmword_101C17498;
  *(_OWORD *)(a1 + 4500) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 4516) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 4532) = xmmword_101C174C8;
  *(_QWORD *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 4452) = xmmword_101C17478;
  *(_OWORD *)(a1 + 4468) = xmmword_101C17488;
  return result;
}

BOOL sub_100EB494C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BOOL4 v3;
  _BOOL8 result;
  const char *v5;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  float v39;
  uint64_t v40;
  int v41;
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  int v56;

  v1 = (_BYTE *)(a1 + 11672);
  if (*(_BYTE *)(a1 + 11712))
  {
    if (*v1)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021906E0);
      v2 = qword_1022A0028;
      v3 = os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v3)
      {
        v41 = 68289026;
        v42 = 0;
        v43 = 2082;
        v44 = "";
        v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,wifi/pipel"
             "ined fix already provided\"}";
LABEL_42:
        v27 = v2;
        v28 = OS_LOG_TYPE_DEFAULT;
LABEL_52:
        _os_log_impl((void *)&_mh_execute_header, v27, v28, v5, (uint8_t *)&v41, 0x12u);
        return 0;
      }
      return result;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021906E0);
    v24 = qword_1022A0028;
    result = os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v41 = 68289026;
    v42 = 0;
    v43 = 2082;
    v44 = "";
    v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,wifi/pipelined"
         " fix already provided\"}";
LABEL_51:
    v27 = v24;
    v28 = OS_LOG_TYPE_DEBUG;
    goto LABEL_52;
  }
  if ((sub_100182290(a1 + 7208) & 1) != 0)
  {
    v7 = *(double *)(a1 + 9880);
    v8 = (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7 <= 30.0;
    if (!v8 || v7 <= 0.0 || (v9 = *(double *)(a1 + 9872), v9 <= -450.0) || v9 >= 8850.0 || *(_DWORD *)(a1 + 9896) == -1)
    {
      if (*v1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v2 = qword_1022A0078;
        v26 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v26)
        {
          v41 = 68289026;
          v42 = 0;
          v43 = 2082;
          v44 = "";
          v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,BaroAlti"
               "tude is invalid\"}";
          goto LABEL_42;
        }
        return result;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v24 = qword_1022A0078;
      result = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
      if (!result)
        return result;
      v41 = 68289026;
      v42 = 0;
      v43 = 2082;
      v44 = "";
      v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,BaroAltitude is invalid\"}";
      goto LABEL_51;
    }
    v10 = sub_1001FCBB4();
    v11 = *(double *)(a1 + 9864);
    v12 = vabdd_f64(v10, v11);
    if (fabs(v11) <= 2.22044605e-16 || (*(_QWORD *)(a1 + 9864) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      v12 = 315360000.0;
    if (v12 >= 5.0)
    {
      if (*v1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v29 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          return 1;
        v41 = 68289026;
        v42 = 0;
        v43 = 2082;
        v44 = "";
        v30 = v29;
        v31 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v40 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          return 1;
        v41 = 68289026;
        v42 = 0;
        v43 = 2082;
        v44 = "";
        v30 = v40;
        v31 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,BaroAltitude is invalid\"}", (uint8_t *)&v41, 0x12u);
      return 1;
    }
    v14 = (uint64_t *)(a1 + 7236);
    if (*v1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v15 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_64;
      v16 = *v14;
      v17 = *(_QWORD *)(a1 + 7244);
      v18 = *(_QWORD *)(a1 + 9872);
      v19 = *(_QWORD *)(a1 + 9880);
      v20 = *(_QWORD *)(a1 + 9888);
      v21 = *(_DWORD *)(a1 + 9896);
      v41 = 68290562;
      v42 = 0;
      v43 = 2082;
      v44 = "";
      v45 = 2050;
      v46 = v16;
      v47 = 2050;
      v48 = v17;
      v49 = 2050;
      v50 = v18;
      v51 = 2050;
      v52 = v19;
      v53 = 2050;
      v54 = v20;
      v55 = 1026;
      v56 = v21;
      v22 = v15;
      v23 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v32 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_64;
      v33 = *v14;
      v34 = *(_QWORD *)(a1 + 7244);
      v35 = *(_QWORD *)(a1 + 9872);
      v36 = *(_QWORD *)(a1 + 9880);
      v37 = *(_QWORD *)(a1 + 9888);
      v38 = *(_DWORD *)(a1 + 9896);
      v41 = 68290562;
      v42 = 0;
      v43 = 2082;
      v44 = "";
      v45 = 2050;
      v46 = v33;
      v47 = 2050;
      v48 = v34;
      v49 = 2050;
      v50 = v35;
      v51 = 2050;
      v52 = v36;
      v53 = 2050;
      v54 = v37;
      v55 = 1026;
      v56 = v38;
      v22 = v32;
      v23 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency, overwrite cell altitude with cached baro altitude\", \"altPrior\":\"%{public}f\", \"altUncPrior\":\"%{public}f\", \"altNew\":\"%{public}f\", \"altUncNew\":\"%{public}f\", \"undulation\":\"%{public}f\", \"undulationModel\":%{public}d}", (uint8_t *)&v41, 0x4Au);
LABEL_64:
    *(_OWORD *)v14 = *(_OWORD *)(a1 + 9872);
    v39 = *(double *)(a1 + 9888);
    *(float *)(a1 + 7684) = v39;
    *(_DWORD *)(a1 + 7680) = *(_DWORD *)(a1 + 9896);
    return 1;
  }
  if (!*v1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v24 = qword_1022A0078;
    result = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v41 = 68289026;
    v42 = 0;
    v43 = 2082;
    v44 = "";
    v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,fGnssCachedInf"
         "o.fLastPrefilteredCellLocation,invalid\"}";
    goto LABEL_51;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v2 = qword_1022A0078;
  v25 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v25)
  {
    v41 = 68289026;
    v42 = 0;
    v43 = 2082;
    v44 = "";
    v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,fGnssCachedInf"
         "o.fLastPrefilteredCellLocation,invalid\"}";
    goto LABEL_42;
  }
  return result;
}

__n128 sub_100EB5028(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)(a1 + 9864) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 9928) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 9912) = v4;
  *(_OWORD *)(a1 + 9896) = v3;
  *(__n128 *)(a1 + 9880) = result;
  return result;
}

void sub_100EB5050(uint64_t a1, char a2)
{
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  *(_BYTE *)(a1 + 1571) = a2;
  sub_100F0CD30(a1 + 496, a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 1571);
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#GnssAssistancePosition,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v5 = *(unsigned __int8 *)(a1 + 1571);
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssAssistancePosition,fIsAirborne,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::feedAirborneActivity(const BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

double sub_100EB520C(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,clearAllLocationAssistanceInformation, Clearing All Location Assistance Information\"}", (uint8_t *)v4, 0x12u);
  }
  sub_100EB5BF0((uint64_t)v4);
  sub_100EB5328(a1 + 1576, (uint64_t)v4);
  sub_100EB64CC((uint64_t)v4);
  return sub_100F0D368(a1 + 496);
}

uint64_t sub_100EB5328(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  sub_1002B7674(a1 + 680, (__int128 *)(a2 + 680));
  v11 = *(_OWORD *)(a2 + 696);
  v12 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v12;
  *(_OWORD *)(a1 + 696) = v11;
  v13 = *(_OWORD *)(a2 + 744);
  v14 = *(_OWORD *)(a2 + 760);
  v15 = *(_OWORD *)(a2 + 776);
  *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
  *(_OWORD *)(a1 + 760) = v14;
  *(_OWORD *)(a1 + 776) = v15;
  *(_OWORD *)(a1 + 744) = v13;
  v17 = *(_OWORD *)(a2 + 912);
  v16 = *(_OWORD *)(a2 + 928);
  v18 = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 940) = *(_OWORD *)(a2 + 940);
  *(_OWORD *)(a1 + 912) = v17;
  *(_OWORD *)(a1 + 928) = v16;
  *(_OWORD *)(a1 + 896) = v18;
  v20 = *(_OWORD *)(a2 + 832);
  v19 = *(_OWORD *)(a2 + 848);
  v21 = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 880) = v21;
  *(_OWORD *)(a1 + 832) = v20;
  *(_OWORD *)(a1 + 848) = v19;
  v22 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = v22;
  memcpy((void *)(a1 + 960), (const void *)(a2 + 960), 0x201uLL);
  sub_1002B7674(a1 + 1480, (__int128 *)(a2 + 1480));
  v23 = *(_OWORD *)(a2 + 1496);
  v24 = *(_OWORD *)(a2 + 1528);
  *(_OWORD *)(a1 + 1512) = *(_OWORD *)(a2 + 1512);
  *(_OWORD *)(a1 + 1528) = v24;
  *(_OWORD *)(a1 + 1496) = v23;
  v25 = *(_OWORD *)(a2 + 1544);
  v26 = *(_OWORD *)(a2 + 1560);
  v27 = *(_OWORD *)(a2 + 1576);
  *(_BYTE *)(a1 + 1592) = *(_BYTE *)(a2 + 1592);
  *(_OWORD *)(a1 + 1560) = v26;
  *(_OWORD *)(a1 + 1576) = v27;
  *(_OWORD *)(a1 + 1544) = v25;
  v28 = *(_OWORD *)(a2 + 1712);
  v29 = *(_OWORD *)(a2 + 1728);
  v30 = *(_OWORD *)(a2 + 1696);
  *(_OWORD *)(a1 + 1740) = *(_OWORD *)(a2 + 1740);
  *(_OWORD *)(a1 + 1696) = v30;
  *(_OWORD *)(a1 + 1728) = v29;
  *(_OWORD *)(a1 + 1712) = v28;
  v31 = *(_OWORD *)(a2 + 1648);
  v32 = *(_OWORD *)(a2 + 1664);
  v33 = *(_OWORD *)(a2 + 1632);
  *(_OWORD *)(a1 + 1680) = *(_OWORD *)(a2 + 1680);
  *(_OWORD *)(a1 + 1632) = v33;
  *(_OWORD *)(a1 + 1664) = v32;
  *(_OWORD *)(a1 + 1648) = v31;
  v34 = *(_OWORD *)(a2 + 1616);
  *(_OWORD *)(a1 + 1600) = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1616) = v34;
  memcpy((void *)(a1 + 1760), (const void *)(a2 + 1760), 0x201uLL);
  sub_1002B7674(a1 + 2280, (__int128 *)(a2 + 2280));
  v36 = *(_OWORD *)(a2 + 2312);
  v35 = *(_OWORD *)(a2 + 2328);
  *(_OWORD *)(a1 + 2296) = *(_OWORD *)(a2 + 2296);
  *(_OWORD *)(a1 + 2312) = v36;
  *(_OWORD *)(a1 + 2328) = v35;
  v38 = *(_OWORD *)(a2 + 2360);
  v37 = *(_OWORD *)(a2 + 2376);
  v39 = *(_OWORD *)(a2 + 2344);
  *(_BYTE *)(a1 + 2392) = *(_BYTE *)(a2 + 2392);
  *(_OWORD *)(a1 + 2360) = v38;
  *(_OWORD *)(a1 + 2376) = v37;
  *(_OWORD *)(a1 + 2344) = v39;
  memcpy((void *)(a1 + 2400), (const void *)(a2 + 2400), 0x3E0uLL);
  memcpy((void *)(a1 + 3392), (const void *)(a2 + 3392), 0x201uLL);
  sub_1002B7674(a1 + 3912, (__int128 *)(a2 + 3912));
  v40 = *(_OWORD *)(a2 + 3928);
  v41 = *(_OWORD *)(a2 + 3960);
  *(_OWORD *)(a1 + 3944) = *(_OWORD *)(a2 + 3944);
  *(_OWORD *)(a1 + 3960) = v41;
  *(_OWORD *)(a1 + 3928) = v40;
  v42 = *(_OWORD *)(a2 + 3976);
  v43 = *(_OWORD *)(a2 + 3992);
  v44 = *(_OWORD *)(a2 + 4008);
  *(_BYTE *)(a1 + 4024) = *(_BYTE *)(a2 + 4024);
  *(_OWORD *)(a1 + 3992) = v43;
  *(_OWORD *)(a1 + 4008) = v44;
  *(_OWORD *)(a1 + 3976) = v42;
  v45 = *(_OWORD *)(a2 + 4144);
  v46 = *(_OWORD *)(a2 + 4160);
  v47 = *(_OWORD *)(a2 + 4128);
  *(_OWORD *)(a1 + 4172) = *(_OWORD *)(a2 + 4172);
  *(_OWORD *)(a1 + 4128) = v47;
  *(_OWORD *)(a1 + 4160) = v46;
  *(_OWORD *)(a1 + 4144) = v45;
  v48 = *(_OWORD *)(a2 + 4080);
  v49 = *(_OWORD *)(a2 + 4096);
  v50 = *(_OWORD *)(a2 + 4064);
  *(_OWORD *)(a1 + 4112) = *(_OWORD *)(a2 + 4112);
  *(_OWORD *)(a1 + 4064) = v50;
  *(_OWORD *)(a1 + 4096) = v49;
  *(_OWORD *)(a1 + 4080) = v48;
  v51 = *(_OWORD *)(a2 + 4048);
  *(_OWORD *)(a1 + 4032) = *(_OWORD *)(a2 + 4032);
  *(_OWORD *)(a1 + 4048) = v51;
  memcpy((void *)(a1 + 4192), (const void *)(a2 + 4192), 0x201uLL);
  sub_1002B7674(a1 + 4712, (__int128 *)(a2 + 4712));
  v52 = *(_OWORD *)(a2 + 4728);
  v53 = *(_OWORD *)(a2 + 4760);
  *(_OWORD *)(a1 + 4744) = *(_OWORD *)(a2 + 4744);
  *(_OWORD *)(a1 + 4760) = v53;
  *(_OWORD *)(a1 + 4728) = v52;
  v54 = *(_OWORD *)(a2 + 4776);
  v55 = *(_OWORD *)(a2 + 4792);
  v56 = *(_OWORD *)(a2 + 4808);
  *(_BYTE *)(a1 + 4824) = *(_BYTE *)(a2 + 4824);
  *(_OWORD *)(a1 + 4792) = v55;
  *(_OWORD *)(a1 + 4808) = v56;
  *(_OWORD *)(a1 + 4776) = v54;
  v57 = *(_OWORD *)(a2 + 4944);
  v58 = *(_OWORD *)(a2 + 4960);
  v59 = *(_OWORD *)(a2 + 4928);
  *(_OWORD *)(a1 + 4972) = *(_OWORD *)(a2 + 4972);
  *(_OWORD *)(a1 + 4928) = v59;
  *(_OWORD *)(a1 + 4960) = v58;
  *(_OWORD *)(a1 + 4944) = v57;
  v60 = *(_OWORD *)(a2 + 4880);
  v61 = *(_OWORD *)(a2 + 4896);
  v62 = *(_OWORD *)(a2 + 4864);
  *(_OWORD *)(a1 + 4912) = *(_OWORD *)(a2 + 4912);
  *(_OWORD *)(a1 + 4864) = v62;
  *(_OWORD *)(a1 + 4896) = v61;
  *(_OWORD *)(a1 + 4880) = v60;
  v63 = *(_OWORD *)(a2 + 4848);
  *(_OWORD *)(a1 + 4832) = *(_OWORD *)(a2 + 4832);
  *(_OWORD *)(a1 + 4848) = v63;
  memcpy((void *)(a1 + 4992), (const void *)(a2 + 4992), 0x201uLL);
  sub_1002B7674(a1 + 5512, (__int128 *)(a2 + 5512));
  v64 = *(_OWORD *)(a2 + 5528);
  v65 = *(_OWORD *)(a2 + 5560);
  *(_OWORD *)(a1 + 5544) = *(_OWORD *)(a2 + 5544);
  *(_OWORD *)(a1 + 5560) = v65;
  *(_OWORD *)(a1 + 5528) = v64;
  v66 = *(_OWORD *)(a2 + 5576);
  v67 = *(_OWORD *)(a2 + 5592);
  v68 = *(_OWORD *)(a2 + 5608);
  *(_BYTE *)(a1 + 5624) = *(_BYTE *)(a2 + 5624);
  *(_OWORD *)(a1 + 5592) = v67;
  *(_OWORD *)(a1 + 5608) = v68;
  *(_OWORD *)(a1 + 5576) = v66;
  v69 = *(_OWORD *)(a2 + 5744);
  v70 = *(_OWORD *)(a2 + 5760);
  v71 = *(_OWORD *)(a2 + 5728);
  *(_OWORD *)(a1 + 5772) = *(_OWORD *)(a2 + 5772);
  *(_OWORD *)(a1 + 5728) = v71;
  *(_OWORD *)(a1 + 5760) = v70;
  *(_OWORD *)(a1 + 5744) = v69;
  v72 = *(_OWORD *)(a2 + 5680);
  v73 = *(_OWORD *)(a2 + 5696);
  v74 = *(_OWORD *)(a2 + 5664);
  *(_OWORD *)(a1 + 5712) = *(_OWORD *)(a2 + 5712);
  *(_OWORD *)(a1 + 5664) = v74;
  *(_OWORD *)(a1 + 5696) = v73;
  *(_OWORD *)(a1 + 5680) = v72;
  v75 = *(_OWORD *)(a2 + 5648);
  *(_OWORD *)(a1 + 5632) = *(_OWORD *)(a2 + 5632);
  *(_OWORD *)(a1 + 5648) = v75;
  memcpy((void *)(a1 + 5792), (const void *)(a2 + 5792), 0x201uLL);
  sub_1002B7674(a1 + 6312, (__int128 *)(a2 + 6312));
  v76 = *(_OWORD *)(a2 + 6328);
  v77 = *(_OWORD *)(a2 + 6360);
  *(_OWORD *)(a1 + 6344) = *(_OWORD *)(a2 + 6344);
  *(_OWORD *)(a1 + 6360) = v77;
  *(_OWORD *)(a1 + 6328) = v76;
  v78 = *(_OWORD *)(a2 + 6376);
  v79 = *(_OWORD *)(a2 + 6392);
  v80 = *(_OWORD *)(a2 + 6408);
  *(_BYTE *)(a1 + 6424) = *(_BYTE *)(a2 + 6424);
  *(_OWORD *)(a1 + 6392) = v79;
  *(_OWORD *)(a1 + 6408) = v80;
  *(_OWORD *)(a1 + 6376) = v78;
  v81 = *(_OWORD *)(a2 + 6544);
  v82 = *(_OWORD *)(a2 + 6560);
  v83 = *(_OWORD *)(a2 + 6528);
  *(_OWORD *)(a1 + 6572) = *(_OWORD *)(a2 + 6572);
  *(_OWORD *)(a1 + 6528) = v83;
  *(_OWORD *)(a1 + 6560) = v82;
  *(_OWORD *)(a1 + 6544) = v81;
  v84 = *(_OWORD *)(a2 + 6480);
  v85 = *(_OWORD *)(a2 + 6496);
  v86 = *(_OWORD *)(a2 + 6464);
  *(_OWORD *)(a1 + 6512) = *(_OWORD *)(a2 + 6512);
  *(_OWORD *)(a1 + 6464) = v86;
  *(_OWORD *)(a1 + 6496) = v85;
  *(_OWORD *)(a1 + 6480) = v84;
  v87 = *(_OWORD *)(a2 + 6448);
  *(_OWORD *)(a1 + 6432) = *(_OWORD *)(a2 + 6432);
  *(_OWORD *)(a1 + 6448) = v87;
  sub_100EB65FC((_QWORD *)(a1 + 6592), a2 + 6592);
  v88 = *(_OWORD *)(a2 + 6640);
  *(_OWORD *)(a1 + 6656) = *(_OWORD *)(a2 + 6656);
  *(_OWORD *)(a1 + 6640) = v88;
  v89 = *(_OWORD *)(a2 + 6672);
  v90 = *(_OWORD *)(a2 + 6688);
  v91 = *(_OWORD *)(a2 + 6704);
  *(_OWORD *)(a1 + 6720) = *(_OWORD *)(a2 + 6720);
  *(_OWORD *)(a1 + 6704) = v91;
  *(_OWORD *)(a1 + 6688) = v90;
  *(_OWORD *)(a1 + 6672) = v89;
  v92 = *(_OWORD *)(a2 + 6736);
  v93 = *(_OWORD *)(a2 + 6752);
  v94 = *(_OWORD *)(a2 + 6768);
  *(_OWORD *)(a1 + 6780) = *(_OWORD *)(a2 + 6780);
  *(_OWORD *)(a1 + 6768) = v94;
  *(_OWORD *)(a1 + 6752) = v93;
  *(_OWORD *)(a1 + 6736) = v92;
  memcpy((void *)(a1 + 6800), (const void *)(a2 + 6800), 0x201uLL);
  sub_1002B7674(a1 + 7320, (__int128 *)(a2 + 7320));
  v96 = *(_OWORD *)(a2 + 7352);
  v95 = *(_OWORD *)(a2 + 7368);
  *(_OWORD *)(a1 + 7336) = *(_OWORD *)(a2 + 7336);
  *(_OWORD *)(a1 + 7352) = v96;
  *(_OWORD *)(a1 + 7368) = v95;
  v98 = *(_OWORD *)(a2 + 7400);
  v97 = *(_OWORD *)(a2 + 7416);
  v99 = *(_OWORD *)(a2 + 7384);
  *(_BYTE *)(a1 + 7432) = *(_BYTE *)(a2 + 7432);
  *(_OWORD *)(a1 + 7400) = v98;
  *(_OWORD *)(a1 + 7416) = v97;
  *(_OWORD *)(a1 + 7384) = v99;
  v100 = *(_QWORD *)(a2 + 7456);
  *(_OWORD *)(a1 + 7440) = *(_OWORD *)(a2 + 7440);
  *(_QWORD *)(a1 + 7456) = v100;
  v101 = *(_OWORD *)(a2 + 7480);
  *(_OWORD *)(a1 + 7464) = *(_OWORD *)(a2 + 7464);
  *(_OWORD *)(a1 + 7480) = v101;
  v102 = *(_OWORD *)(a2 + 7544);
  v104 = *(_OWORD *)(a2 + 7496);
  v103 = *(_OWORD *)(a2 + 7512);
  *(_OWORD *)(a1 + 7528) = *(_OWORD *)(a2 + 7528);
  *(_OWORD *)(a1 + 7544) = v102;
  *(_OWORD *)(a1 + 7496) = v104;
  *(_OWORD *)(a1 + 7512) = v103;
  v106 = *(_OWORD *)(a2 + 7576);
  v105 = *(_OWORD *)(a2 + 7592);
  v107 = *(_OWORD *)(a2 + 7560);
  *(_OWORD *)(a1 + 7604) = *(_OWORD *)(a2 + 7604);
  *(_OWORD *)(a1 + 7576) = v106;
  *(_OWORD *)(a1 + 7592) = v105;
  *(_OWORD *)(a1 + 7560) = v107;
  memcpy((void *)(a1 + 7624), (const void *)(a2 + 7624), 0x201uLL);
  sub_1002B7674(a1 + 8144, (__int128 *)(a2 + 8144));
  v108 = *(_OWORD *)(a2 + 0x2000);
  v109 = *(_OWORD *)(a2 + 8176);
  *(_OWORD *)(a1 + 8160) = *(_OWORD *)(a2 + 8160);
  *(_OWORD *)(a1 + 8176) = v109;
  *(_OWORD *)(a1 + 0x2000) = v108;
  v110 = *(_BYTE *)(a2 + 8256);
  v111 = *(_OWORD *)(a2 + 8224);
  v112 = *(_OWORD *)(a2 + 8240);
  *(_OWORD *)(a1 + 8208) = *(_OWORD *)(a2 + 8208);
  *(_BYTE *)(a1 + 8256) = v110;
  *(_OWORD *)(a1 + 8240) = v112;
  *(_OWORD *)(a1 + 8224) = v111;
  v113 = *(_QWORD *)(a2 + 8280);
  *(_OWORD *)(a1 + 8264) = *(_OWORD *)(a2 + 8264);
  *(_QWORD *)(a1 + 8280) = v113;
  *(_OWORD *)(a1 + 8288) = *(_OWORD *)(a2 + 8288);
  v114 = *(_OWORD *)(a2 + 8320);
  v115 = *(_OWORD *)(a2 + 8336);
  v116 = *(_OWORD *)(a2 + 8352);
  *(_OWORD *)(a1 + 8304) = *(_OWORD *)(a2 + 8304);
  *(_OWORD *)(a1 + 8352) = v116;
  *(_OWORD *)(a1 + 8336) = v115;
  *(_OWORD *)(a1 + 8320) = v114;
  v117 = *(_OWORD *)(a2 + 8384);
  *(_OWORD *)(a1 + 8368) = *(_OWORD *)(a2 + 8368);
  *(_OWORD *)(a1 + 8384) = v117;
  v118 = *(_OWORD *)(a2 + 8416);
  v119 = *(_OWORD *)(a2 + 8432);
  v120 = *(_OWORD *)(a2 + 8448);
  *(_OWORD *)(a1 + 8400) = *(_OWORD *)(a2 + 8400);
  *(_OWORD *)(a1 + 8448) = v120;
  *(_OWORD *)(a1 + 8432) = v119;
  *(_OWORD *)(a1 + 8416) = v118;
  v121 = *(_OWORD *)(a2 + 8508);
  v122 = *(_OWORD *)(a2 + 8480);
  v123 = *(_OWORD *)(a2 + 8496);
  *(_OWORD *)(a1 + 8464) = *(_OWORD *)(a2 + 8464);
  *(_OWORD *)(a1 + 8508) = v121;
  *(_OWORD *)(a1 + 8496) = v123;
  *(_OWORD *)(a1 + 8480) = v122;
  memcpy((void *)(a1 + 8528), (const void *)(a2 + 8528), 0x201uLL);
  sub_1002B7674(a1 + 9048, (__int128 *)(a2 + 9048));
  v125 = *(_OWORD *)(a2 + 9080);
  v124 = *(_OWORD *)(a2 + 9096);
  *(_OWORD *)(a1 + 9064) = *(_OWORD *)(a2 + 9064);
  *(_OWORD *)(a1 + 9080) = v125;
  *(_OWORD *)(a1 + 9096) = v124;
  v127 = *(_OWORD *)(a2 + 9128);
  v126 = *(_OWORD *)(a2 + 9144);
  v128 = *(_OWORD *)(a2 + 9112);
  *(_BYTE *)(a1 + 9160) = *(_BYTE *)(a2 + 9160);
  *(_OWORD *)(a1 + 9128) = v127;
  *(_OWORD *)(a1 + 9144) = v126;
  *(_OWORD *)(a1 + 9112) = v128;
  sub_100EB6838(a1 + 9168, a2 + 9168);
  *(_QWORD *)(a1 + 9976) = *(_QWORD *)(a2 + 9976);
  return a1;
}

void *sub_100EB5A4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#GnssAssistancePosition,getHELOAWDData", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssAssistancePosition,getHELOAWDData", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "Emergency::HELOAWDData CLGnssAssistancePosition::getHELOAWDData()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return memcpy(a2, (const void *)(a1 + 3976), 0x278uLL);
}

uint64_t sub_100EB5BF0(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v9;
  __int128 v11;

  *(_DWORD *)a1 = 0xFFFF;
  *(_OWORD *)(a1 + 4) = 0u;
  v2 = (_BYTE *)(a1 + 9168);
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  v3 = a1 + 8324;
  __asm { FMOV            V0.2D, #-1.0 }
  v11 = _Q0;
  *(_OWORD *)(a1 + 36) = _Q0;
  v9 = a1 + 820;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_BYTE *)(a1 + 152) = 0;
  sub_10012A33C(a1 + 160);
  *(_DWORD *)(a1 + 800) = 0xFFFF;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)v9 = xmmword_101BAFC90;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v11;
  *(_DWORD *)(a1 + 884) = 0;
  *(_QWORD *)(a1 + 888) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_DWORD *)(a1 + 912) = 0;
  *(_QWORD *)(v9 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 924) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_BYTE *)(a1 + 952) = 0;
  sub_10012A33C(a1 + 960);
  *(_DWORD *)(a1 + 1600) = 0xFFFF;
  *(_OWORD *)(a1 + 1604) = 0u;
  *(_OWORD *)(v9 + 800) = xmmword_101BAFC90;
  *(_OWORD *)(v9 + 816) = v11;
  *(_OWORD *)(v9 + 832) = v11;
  *(_OWORD *)(v9 + 848) = v11;
  *(_DWORD *)(a1 + 1684) = 0;
  *(_QWORD *)(a1 + 1688) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_DWORD *)(a1 + 1712) = 0;
  *(_QWORD *)(v9 + 896) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1724) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_BYTE *)(a1 + 1752) = 0;
  sub_10012A33C(a1 + 1760);
  *(_OWORD *)(a1 + 2504) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 2520) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 2536) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 2548) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 2440) = xmmword_101C17498;
  *(_OWORD *)(a1 + 2456) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 2472) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 2488) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 2408) = xmmword_101C17478;
  *(_OWORD *)(a1 + 2424) = xmmword_101C17488;
  *(_OWORD *)(a1 + 2660) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 2676) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 2692) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 2704) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 2596) = xmmword_101C17498;
  *(_OWORD *)(a1 + 2612) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 2628) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 2644) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 2564) = xmmword_101C17478;
  *(_OWORD *)(a1 + 2580) = xmmword_101C17488;
  *(_OWORD *)(a1 + 2816) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 2832) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 2848) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 2860) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 2752) = xmmword_101C17498;
  *(_OWORD *)(a1 + 2768) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 2784) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 2800) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 2720) = xmmword_101C17478;
  *(_OWORD *)(a1 + 2736) = xmmword_101C17488;
  *(_OWORD *)(a1 + 2972) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 2988) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 3004) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 3016) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 2908) = xmmword_101C17498;
  *(_OWORD *)(a1 + 2924) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 2940) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 2956) = xmmword_101C174C8;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_OWORD *)(a1 + 2876) = xmmword_101C17478;
  *(_OWORD *)(a1 + 2892) = xmmword_101C17488;
  *(_DWORD *)(a1 + 3080) = 0xFFFF;
  *(_OWORD *)(a1 + 3084) = 0u;
  *(_OWORD *)(a1 + 3100) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 3116) = v11;
  *(_OWORD *)(a1 + 3132) = v11;
  *(_OWORD *)(a1 + 3148) = v11;
  *(_DWORD *)(a1 + 3164) = 0;
  *(_QWORD *)(a1 + 3168) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_DWORD *)(a1 + 3192) = 0;
  *(_QWORD *)(v9 + 2376) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3204) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 3208) = 0;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_BYTE *)(a1 + 3232) = 0;
  *(_DWORD *)(a1 + 3236) = 0xFFFF;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_QWORD *)(a1 + 3256) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 3264) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 3280) = v11;
  *(_OWORD *)(a1 + 3296) = v11;
  *(_QWORD *)(a1 + 3312) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3320) = 0;
  *(_QWORD *)(v9 + 2504) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3348) = 0;
  *(_OWORD *)(a1 + 3332) = 0u;
  *(_QWORD *)(a1 + 3352) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3360) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 3380) = 0;
  *(_OWORD *)(a1 + 3364) = 0u;
  *(_BYTE *)(a1 + 3388) = 0;
  sub_10012A33C(a1 + 3392);
  *(_DWORD *)(a1 + 4032) = 0xFFFF;
  *(_OWORD *)(a1 + 4036) = 0u;
  *(_OWORD *)(v9 + 3232) = xmmword_101BAFC90;
  *(_OWORD *)(v9 + 3248) = v11;
  *(_OWORD *)(v9 + 3264) = v11;
  *(_OWORD *)(v9 + 3280) = v11;
  *(_DWORD *)(a1 + 4116) = 0;
  *(_QWORD *)(a1 + 4120) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4128) = 0u;
  *(_DWORD *)(a1 + 4144) = 0;
  *(_QWORD *)(v9 + 3328) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4156) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 4168) = 0u;
  *(_BYTE *)(a1 + 4184) = 0;
  *(_QWORD *)(a1 + 4160) = 0;
  sub_10012A33C(a1 + 4192);
  *(_DWORD *)(a1 + 4832) = 0xFFFF;
  *(_OWORD *)(a1 + 4836) = 0u;
  *(_OWORD *)(v9 + 4032) = xmmword_101BAFC90;
  *(_OWORD *)(v9 + 4048) = v11;
  *(_OWORD *)(v9 + 4064) = v11;
  *(_OWORD *)(v9 + 4080) = v11;
  *(_DWORD *)(a1 + 4916) = 0;
  *(_QWORD *)(a1 + 4920) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_DWORD *)(a1 + 4944) = 0;
  *(_QWORD *)(v9 + 4128) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4956) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_BYTE *)(a1 + 4984) = 0;
  *(_QWORD *)(a1 + 4960) = 0;
  sub_10012A33C(a1 + 4992);
  *(_DWORD *)(a1 + 5632) = 0xFFFF;
  *(_OWORD *)(a1 + 5636) = 0u;
  *(_OWORD *)(v9 + 4832) = xmmword_101BAFC90;
  *(_OWORD *)(v9 + 4848) = v11;
  *(_OWORD *)(v9 + 4864) = v11;
  *(_OWORD *)(v9 + 4880) = v11;
  *(_DWORD *)(a1 + 5716) = 0;
  *(_QWORD *)(a1 + 5720) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 5728) = 0u;
  *(_DWORD *)(a1 + 5744) = 0;
  *(_QWORD *)(v9 + 4928) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 5756) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 5768) = 0u;
  *(_BYTE *)(a1 + 5784) = 0;
  *(_QWORD *)(a1 + 5760) = 0;
  sub_10012A33C(a1 + 5792);
  *(_DWORD *)(a1 + 6432) = 0xFFFF;
  *(_OWORD *)(a1 + 6436) = 0u;
  *(_OWORD *)(v9 + 5632) = xmmword_101BAFC90;
  *(_OWORD *)(v9 + 5648) = v11;
  *(_OWORD *)(v9 + 5664) = v11;
  *(_OWORD *)(v9 + 5680) = v11;
  *(_DWORD *)(a1 + 6516) = 0;
  *(_QWORD *)(a1 + 6520) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 6528) = 0u;
  *(_DWORD *)(a1 + 6544) = 0;
  *(_QWORD *)(v9 + 5728) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 6556) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 6560) = 0;
  *(_OWORD *)(a1 + 6568) = 0u;
  *(_BYTE *)(a1 + 6584) = 0;
  *(_OWORD *)(a1 + 6592) = 0u;
  *(_OWORD *)(a1 + 6608) = 0u;
  *(_OWORD *)(a1 + 6624) = 0u;
  *(_DWORD *)(a1 + 6640) = 0xFFFF;
  *(_OWORD *)(a1 + 6644) = 0u;
  *(_OWORD *)(v9 + 5840) = xmmword_101BAFC90;
  *(_OWORD *)(v9 + 5856) = v11;
  *(_OWORD *)(v9 + 5872) = v11;
  *(_OWORD *)(v9 + 5888) = v11;
  *(_DWORD *)(a1 + 6724) = 0;
  *(_QWORD *)(a1 + 6728) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 6752) = 0;
  *(_OWORD *)(a1 + 6736) = 0u;
  *(_QWORD *)(v9 + 5936) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 6764) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 6784) = 0;
  *(_OWORD *)(a1 + 6768) = 0u;
  *(_BYTE *)(a1 + 6792) = 0;
  sub_10012A33C(a1 + 6800);
  *(_BYTE *)(a1 + 7456) = 0;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_QWORD *)(a1 + 7460) = 0xFFFF00000003;
  *(_OWORD *)(a1 + 7484) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 7500) = v11;
  *(_OWORD *)(a1 + 7516) = v11;
  *(_OWORD *)(a1 + 7532) = v11;
  *(_OWORD *)(a1 + 7468) = 0u;
  *(_DWORD *)(a1 + 7548) = 0;
  *(_QWORD *)(a1 + 7552) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 7560) = 0u;
  *(_DWORD *)(a1 + 7576) = 0;
  *(_QWORD *)(v9 + 6760) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 7588) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 7608) = 0;
  *(_BYTE *)(a1 + 7616) = 0;
  *(_OWORD *)(a1 + 7592) = 0u;
  sub_10012A33C(a1 + 7624);
  *(_BYTE *)(a1 + 8280) = 0;
  *(_OWORD *)(a1 + 8264) = 0u;
  *(_DWORD *)(a1 + 8284) = 3;
  *(_OWORD *)(a1 + 8288) = 0u;
  *(_OWORD *)(a1 + 8304) = xmmword_101BAFC90;
  *(_DWORD *)(a1 + 8320) = -1;
  *(_WORD *)v3 = 0;
  *(_OWORD *)(a1 + 8328) = 0u;
  *(_OWORD *)(a1 + 8344) = 0u;
  *(_QWORD *)(a1 + 8360) = 0;
  *(_DWORD *)(a1 + 8368) = 0xFFFF;
  *(_OWORD *)(a1 + 8372) = 0u;
  *(_OWORD *)(v3 + 64) = xmmword_101BAFC90;
  *(_OWORD *)(v3 + 80) = v11;
  *(_OWORD *)(v3 + 96) = v11;
  *(_OWORD *)(v3 + 112) = v11;
  *(_DWORD *)(a1 + 8452) = 0;
  *(_QWORD *)(a1 + 8456) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 8472) = 0;
  *(_QWORD *)(a1 + 8464) = 0;
  *(_DWORD *)(a1 + 8480) = 0;
  *(_QWORD *)(v3 + 160) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 8492) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 8512) = 0;
  *(_QWORD *)(a1 + 8496) = 0;
  *(_QWORD *)(a1 + 8504) = 0;
  *(_BYTE *)(a1 + 8520) = 0;
  sub_10012A33C(a1 + 8528);
  *v2 = 0;
  v2[800] = 0;
  *(_QWORD *)(a1 + 9976) = 0x500000000;
  sub_100EB62AC(a1);
  return a1;
}

void sub_100EB6218(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  if (*(_BYTE *)(v4 + 800))
    sub_100261F44(v1 + 9848);
  sub_100261F44(v1 + 9048);
  sub_100261F44(v1 + 8144);
  sub_100261F44(v1 + 7320);
  sub_10047F25C(v2);
  sub_100261F44(v1 + 6312);
  sub_100261F44(v1 + 5512);
  sub_100261F44(v1 + 4712);
  sub_100261F44(v1 + 3912);
  sub_100261F44(v1 + 2280);
  sub_100261F44(v1 + 1480);
  sub_100261F44(v1 + 680);
  _Unwind_Resume(a1);
}

void sub_100EB62AC(uint64_t a1)
{
  void **v2;
  unint64_t v3;
  uint64_t v4;

  sub_10021CBD4(a1);
  sub_10021CBD4(a1 + 1600);
  *(_OWORD *)(a1 + 2504) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 2520) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 2536) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 2548) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 2440) = xmmword_101C17498;
  *(_OWORD *)(a1 + 2456) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 2472) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 2488) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 2408) = xmmword_101C17478;
  *(_OWORD *)(a1 + 2424) = xmmword_101C17488;
  *(_OWORD *)(a1 + 2660) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 2676) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 2692) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 2704) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 2596) = xmmword_101C17498;
  *(_OWORD *)(a1 + 2612) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 2628) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 2644) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 2564) = xmmword_101C17478;
  *(_OWORD *)(a1 + 2580) = xmmword_101C17488;
  *(_OWORD *)(a1 + 2816) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 2832) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 2848) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 2860) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 2752) = xmmword_101C17498;
  *(_OWORD *)(a1 + 2768) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 2784) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 2800) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 2720) = xmmword_101C17478;
  *(_OWORD *)(a1 + 2736) = xmmword_101C17488;
  *(_OWORD *)(a1 + 2972) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 2988) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 3004) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 3016) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 2908) = xmmword_101C17498;
  *(_OWORD *)(a1 + 2924) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 2940) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 2956) = xmmword_101C174C8;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_OWORD *)(a1 + 2876) = xmmword_101C17478;
  *(_OWORD *)(a1 + 2892) = xmmword_101C17488;
  *(_QWORD *)(a1 + 3032) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3040) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3048) = 0;
  *(_QWORD *)(a1 + 3064) = 0;
  *(_QWORD *)(a1 + 3056) = 0;
  *(_DWORD *)(a1 + 3072) = 0;
  v2 = *(void ***)(a1 + 6600);
  v3 = *(_QWORD *)(a1 + 6608) - (_QWORD)v2;
  *(_QWORD *)(a1 + 6632) = 0;
  if (v3 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*(_QWORD *)(a1 + 6600) + 8);
      *(_QWORD *)(a1 + 6600) = v2;
      v3 = *(_QWORD *)(a1 + 6608) - (_QWORD)v2;
    }
    while (v3 > 0x10);
  }
  if (v3 >> 3 == 1)
  {
    v4 = 256;
  }
  else
  {
    if (v3 >> 3 != 2)
      return;
    v4 = 512;
  }
  *(_QWORD *)(a1 + 6624) = v4;
}

void sub_100EB6474(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100EB64A0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100EB64CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9968))
    sub_100261F44(a1 + 9848);
  sub_100261F44(a1 + 9048);
  sub_100261F44(a1 + 8144);
  sub_100261F44(a1 + 7320);
  sub_10047F25C((_QWORD *)(a1 + 6592));
  sub_100261F44(a1 + 6312);
  sub_100261F44(a1 + 5512);
  sub_100261F44(a1 + 4712);
  sub_100261F44(a1 + 3912);
  sub_100261F44(a1 + 2280);
  sub_100261F44(a1 + 1480);
  sub_100261F44(a1 + 680);
  return a1;
}

void sub_100EB6578(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100EB65A4(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100EB65D0(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100EB65FC(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 512;
LABEL_7:
    a1[4] = v8;
  }
  sub_100EB669C(a1);
  result = sub_100EB67CC((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100EB669C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_10047F604((uint64_t)a1, 0);
    sub_100B4D3C0(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_100EB670C((uint64_t)a1);
}

void sub_100EB670C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_100EB67CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100EB670C(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

__n128 sub_100EB6838(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  if (*(unsigned __int8 *)(a1 + 800) == *(unsigned __int8 *)(a2 + 800))
  {
    if (*(_BYTE *)(a1 + 800))
    {
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      v7 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      v8 = *(_OWORD *)(a2 + 96);
      v9 = *(_OWORD *)(a2 + 112);
      v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v9;
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 96) = v8;
      memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
      sub_1002B7674(a1 + 680, (__int128 *)(a2 + 680));
      v12 = *(_OWORD *)(a2 + 712);
      v11 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 712) = v12;
      *(_OWORD *)(a1 + 728) = v11;
      v14 = *(_OWORD *)(a2 + 760);
      result = *(__n128 *)(a2 + 776);
      v15 = *(_OWORD *)(a2 + 744);
      *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 760) = v14;
      *(__n128 *)(a1 + 776) = result;
      *(_OWORD *)(a1 + 744) = v15;
    }
  }
  else if (*(_BYTE *)(a1 + 800))
  {
    sub_100261F44(a1 + 680);
    *(_BYTE *)(a1 + 800) = 0;
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v16;
    v17 = *(_OWORD *)(a2 + 32);
    v18 = *(_OWORD *)(a2 + 48);
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v18;
    v20 = *(_OWORD *)(a2 + 96);
    v21 = *(_OWORD *)(a2 + 112);
    v22 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 112) = v21;
    *(_OWORD *)(a1 + 128) = v22;
    *(_OWORD *)(a1 + 96) = v20;
    memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
    *(_OWORD *)(a2 + 680) = 0u;
    v23 = *(_BYTE *)(a2 + 792);
    v25 = *(_OWORD *)(a2 + 760);
    v24 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 760) = v25;
    *(_OWORD *)(a1 + 776) = v24;
    *(_BYTE *)(a1 + 792) = v23;
    v26 = *(_OWORD *)(a2 + 712);
    result = *(__n128 *)(a2 + 728);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 712) = v26;
    *(__n128 *)(a1 + 728) = result;
    *(_BYTE *)(a1 + 800) = 1;
  }
  return result;
}

uint64_t sub_100EB6994(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1014AD274();
    operator delete();
  }
  return result;
}

void sub_100EB69D4()
{
  operator delete();
}

_QWORD *sub_100EB69E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102190710;
  result[1] = v3;
  return result;
}

uint64_t sub_100EB6A1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102190710;
  a2[1] = v2;
  return result;
}

void sub_100EB6A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _OWORD v23[8];
  _OWORD v24[2];
  _BYTE v25[513];
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;

  v2 = *(_QWORD *)(a2 + 680);
  v3 = *(std::__shared_weak_count **)(a2 + 688);
  *(_OWORD *)(a2 + 680) = 0u;
  v22 = *(_BYTE *)(a2 + 792);
  v20 = *(_OWORD *)(a2 + 760);
  v21 = *(_OWORD *)(a2 + 776);
  v16 = *(_OWORD *)(a2 + 696);
  v17 = *(_OWORD *)(a2 + 712);
  v18 = *(_OWORD *)(a2 + 728);
  v19 = *(_OWORD *)(a2 + 744);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a2 + 112);
  v23[6] = *(_OWORD *)(a2 + 96);
  v23[7] = v5;
  v24[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(a2 + 140);
  v6 = *(_OWORD *)(a2 + 48);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v6;
  v7 = *(_OWORD *)(a2 + 80);
  v23[4] = *(_OWORD *)(a2 + 64);
  v23[5] = v7;
  v8 = *(_OWORD *)(a2 + 16);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v8;
  memcpy(v25, (const void *)(a2 + 160), sizeof(v25));
  v26 = v2;
  v27 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v32 = v20;
  v33 = v21;
  v28 = v16;
  v29 = v17;
  v30 = v18;
  v31 = v19;
  v34 = v22;
  sub_100EB0370(v4, (uint64_t)v23);
  v11 = v27;
  if (v27)
  {
    v12 = (unint64_t *)&v27->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v3)
  {
    v14 = (unint64_t *)&v3->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100EB6BA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  if (STACK[0x320])
    sub_10190D298((std::__shared_weak_count *)STACK[0x320]);
  sub_101930C78(v1 == 0, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100EB6BD0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100EB6C0C()
{
}

void sub_100EB6C18()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100EB6CB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100EB6CCC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100EB6D58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100EB6D70()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C2D040;
      v1[3] = unk_101C2D050;
      v1[4] = xmmword_101C2D060;
      v1[0] = xmmword_101C2D020;
      v1[1] = unk_101C2D030;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100EB6E44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100EB6E5C()
{
  sub_1015A2E04(qword_102308D98, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308D98, (void *)&_mh_execute_header);
}

void sub_100EB6F44(id a1)
{
  qword_102308DD0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMobilityWalkingBoutServiceSilo"));
}

void sub_100EB708C(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
    byte_102308DE0 = 1;
}

void sub_100EB7EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17)
{
  uint64_t i;

  sub_1002A3684(&a15);
  for (i = 16; i != -16; i -= 16)
    sub_100261F44((uint64_t)&a17 + i);
  _Unwind_Resume(a1);
}

void sub_100EB7FCC()
{
  operator new();
}

void sub_100EB816C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  operator delete();
}

void sub_100EB81A8()
{
  operator new();
}

void sub_100EB82D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  operator delete();
}

void sub_100EB8308()
{
  operator new();
}

void sub_100EB8474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  operator delete();
}

id sub_100EB84B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onUserInfoUpdate:data:", a2, a3);
}

id sub_100EB84C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onStatusNotification:data:", a2, a3);
}

id sub_100EB84D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateObserverNotification:data:", a2, a3);
}

id sub_100EB84E0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onSPUGaitMetrics:", a1);
}

id sub_100EB84EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onCompanionNotification:data:", a2, a3);
}

void sub_100EB9594(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  xpc_activity_state_t state;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  xpc_activity_state_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  __int16 v14;
  xpc_activity_state_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  xpc_activity_state_t v19;

  if (a2 == 109)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    v3 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "com.apple.locationd.Mobility.ProcessBouts";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BoutService: Data sources unavailable, did not process bouts (%s)", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021908E8);
      v12 = 136315138;
      v13 = "com.apple.locationd.Mobility.ProcessBouts";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 1, "BoutService: Data sources unavailable, did not process bouts (%s)", (const char *)&v12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onMobilityProcessBoutsActivity:]_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  if (xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32)) != 3
    && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    v4 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
    {
      state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v17 = "com.apple.locationd.Mobility.ProcessBouts";
      v18 = 2050;
      v19 = state;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark (%s) activity as done. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021908E8);
      v8 = qword_10229FE98;
      v9 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      v12 = 136315394;
      v13 = "com.apple.locationd.Mobility.ProcessBouts";
      v14 = 2050;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 17, "Failed to mark (%s) activity as done. Current state is %{public}ld", &v12, 22);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService onMobilityProcessBoutsActivity:]_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_100EB9C04(uint64_t a1, int a2, uint64_t a3)
{
  xpc_activity_state_t state;
  BOOL v7;
  NSObject *v8;
  xpc_activity_state_t v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  __int16 v16;
  xpc_activity_state_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  xpc_activity_state_t v21;

  state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  v7 = state == 4 || state == 2;
  if (v7 && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102190908);
    v8 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_FAULT))
    {
      v9 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v19 = "com.apple.locationd.Mobility.Classification";
      v20 = 2050;
      v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to mark activity (%s) as done. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v10 = qword_10229FC48;
      v11 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      v14 = 136315394;
      v15 = "com.apple.locationd.Mobility.Classification";
      v16 = 2050;
      v17 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Failed to mark activity (%s) as done. Current state is %{public}ld", &v14, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService onMobilityClassificationActivity:]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  if (a2)
    objc_msgSend(*(id *)(a1 + 40), "setUpClassificationActivityWithDeferral:", a3);
}

id sub_100EB9E98(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100EB9EF4;
  v3[3] = &unk_1021907F0;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "checkForBoutsReadyToProcessWithCompletion:activity:", v3, 0);
}

uint64_t sub_100EB9EF4(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  uint8_t *v11;
  int v12;
  uint8_t buf[4];
  int v14;

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021908E8);
  v4 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutService: Mobility data requested", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    LOWORD(v12) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutService: Mobility data requested", &v12, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onDataCollectionRequested:]_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (a2 != 100)
  {
    if (a2 == 109)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021908E8);
      v5 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BoutService: Data sources unavailable, did not process bouts onDataCollectionRequested", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021908E8);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutService: Data sources unavailable, did not process bouts onDataCollectionRequested");
LABEL_29:
        v11 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onDataCollectionRequested:]_block_invoke", "%s\n", v6);
        if (v11 != buf)
          free(v11);
      }
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021908E8);
      v7 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        v14 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BoutService: Data requested, but unable to query outstanding bouts. CMError: %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021908E8);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 1, "BoutService: Data requested, but unable to query outstanding bouts. CMError: %d", &v12);
        goto LABEL_29;
      }
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100EBA324(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (a2 != 100)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    v4 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutService: Unable to process BoutMetrics pre-aggregation, CMError: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021908E8);
      v11[0] = 67109120;
      v11[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutService: Unable to process BoutMetrics pre-aggregation, CMError: %d", v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onAggregationTimer]_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021908E8);
  v5 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMobilityWalkingBoutService: Aggregating WalkingBout, GaitMetrics, BoutMetrics records", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 0, "CLMobilityWalkingBoutService: Aggregating WalkingBout, GaitMetrics, BoutMetrics records", v11, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onAggregationTimer]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100EBA650(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
  sub_100EBABC4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
  sub_100EBB138(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 120));
  return sub_100EBB6AC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 176));
}

uint64_t sub_100EBA650(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102190A88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102190A88);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_100EC6894(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_100EC6894(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102190A88);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_100EC6894(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_100EBABC4(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102190A88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102190A88);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_100EC6ABC(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_100EC6ABC(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102190A88);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_100EC6ABC(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_100EBB138(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102190A88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102190A88);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_100EC6CB8(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_100EC6CB8(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102190A88);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_100EC6CB8(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_100EBB6AC(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102190A88);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102190A88);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_100EC6EB4(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_100EC6EB4(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102190A88);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_100EC6EB4(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

id sub_100EBC4B0(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(518400.0, a2, 35, *(void **)(a1 + 32), 300, 0, 1, 1, 0, 0);
}

void sub_100EBD07C(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  const void *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  void *__p;
  void *v15;
  uint64_t v16;
  int v17;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_100EBD16C;
  v10[3] = &unk_102190818;
  v13 = *(_OWORD *)(a1 + 56);
  v17 = a2;
  v12 = *(_QWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 32);
  v15 = 0;
  v16 = 0;
  v7 = *(const void **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a3) >> 3);
  __p = 0;
  sub_10041D904(&__p, v7, v8, v9);
  objc_msgSend(v6, "async:", v10);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_100EBD150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100EBD16C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double v6;
  double v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[1640];

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021908E8);
  v2 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BoutService: HK queried for workouts from (%{public}.2f) to (%{public}.2f)", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    v20 = 134349312;
    v21 = v10;
    v22 = 2050;
    v23 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutService: HK queried for workouts from (%{public}.2f) to (%{public}.2f)", &v20, 22);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService checkForBoutsReadyToProcessWithCompletion:activity:]_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (*(_DWORD *)(a1 + 96) == 100
    && !objc_msgSend(*(id *)(a1 + 32), "checkDeferRequestForBoutsActivity:", *(_QWORD *)(a1 + 40)))
  {
    memset(buf, 0, 24);
    v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 192);
    v6 = *(double *)(a1 + 56);
    v7 = *(double *)(a1 + 64);
    v18 = 0;
    v19 = 0;
    __p = 0;
    sub_10041D904(&__p, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3));
    v8 = sub_100C2B5D0(v5, (uint64_t *)&__p, (void **)buf, v6, v7);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    if (v8 == 100)
    {
      v9 = *(void **)(a1 + 32);
      v15 = 0;
      v16 = 0;
      v14 = 0;
      sub_100EC70B0(&v14, *(const void **)buf, *(uint64_t *)&buf[8], 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4));
      objc_msgSend(v9, "handleBoutResults:", &v14);
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_100EBD458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100EBD4A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v2 = (_QWORD *)(a1 + 72);
  v2[2] = 0;
  return sub_10041D904(v2, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
}

void sub_100EBD4D0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
}

void sub_100EBDB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100EBE7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_100EBE830(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, double **a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  char v14;
  char v15;
  double v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSDate *v22;
  NSDate *v23;
  NSObject *v24;
  double *v25;
  double v26;
  char *v27;
  double *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  double *v33;
  double *v34;
  __int128 v35;
  int v36;
  double v37;
  double v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  NSObject *v51;
  _BOOL4 v52;
  double v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _xpc_activity_s *v57;
  const char *v58;
  char *v59;
  const char *v60;
  char *v61;
  NSObject *v62;
  NSObject *v63;
  xpc_activity_state_t state;
  NSObject *v65;
  const char *v66;
  char *v67;
  NSObject *v68;
  _QWORD *v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  const char *v77;
  char *v78;
  const char *v79;
  char *v80;
  const char *v81;
  char *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v87;
  double v88;
  unsigned int v89;
  double v90;
  int v94;
  int v96;
  int v97;
  int v98;
  int v99;
  __int16 v100;
  double v101;
  __int128 v102;
  double v103;
  __int128 v104;
  uint64_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  unint64_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  unint64_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  char v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  char v143;
  int64x2_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  double v150;
  double v151;
  _OWORD v152[2];
  _BYTE v153[28];
  char v154;
  char v155;
  char v156;
  __int128 v157;
  char v158;
  double v159;
  double v160;
  uint64_t v161;
  __int128 v162;
  double v163;
  char v164;
  char v165;
  __int16 v166;
  uint64_t v167;
  char v168;
  _BYTE v169[99];
  int v170;
  int v171;
  int64x2_t v172;
  unint64_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  int64x2_t v180;
  int64x2_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  int v185;
  int v186;
  unint64_t v187;
  int64x2_t v188;
  int64x2_t v189;
  int64x2_t v190;
  int64x2_t v191;
  unint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  int v196;
  int v197;
  int64x2_t v198;
  int64x2_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  int v203;
  int v204;
  unint64_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  unint64_t v220;
  char v221;
  _BYTE v222[7];
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int64x2_t v226;
  unint64_t v227;
  char v228;
  char v229;
  char v230;
  int v231;
  char v232;
  __int128 v233;
  uint64_t v234;
  char v235;
  char v236;
  char v237;
  int v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  double v244;
  int v245;
  char v246;
  _BYTE v247[27];
  _OWORD v248[2];
  uint64_t v249;
  int v250;
  char v251;
  int v252;
  char v253;
  int v254;
  char v255;
  _DWORD v256[2];
  __int128 v257;
  __int128 v258;
  __int128 v259;
  int v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  int v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  int v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  int v272;
  __int128 v273;
  void *__p;
  char *v275;
  char *v276;
  int v277;
  double v278;
  int v279;
  xpc_activity_state_t v280;
  int v281;
  _BYTE buf[32];
  _BYTE v283[48];
  double v284;
  double v285;
  uint64_t v286;
  __int128 v287;
  double v288;
  unsigned __int8 v289;
  char v290;
  __int16 v291;
  uint64_t v292;
  unsigned __int8 v293;
  _BYTE v294[99];
  int v295;
  int v296;
  int64x2_t v297;
  unint64_t v298;
  int64x2_t v299;
  int64x2_t v300;
  int64x2_t v301;
  int64x2_t v302;
  int64x2_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  int v310;
  int v311;
  unint64_t v312;
  int64x2_t v313;
  int64x2_t v314;
  int64x2_t v315;
  int64x2_t v316;
  unint64_t v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  int v321;
  int v322;
  int64x2_t v323;
  int64x2_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  int v328;
  int v329;
  unint64_t v330;
  int64x2_t v331;
  int64x2_t v332;
  int64x2_t v333;
  int64x2_t v334;
  int64x2_t v335;
  int64x2_t v336;
  int64x2_t v337;
  int64x2_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  int64x2_t v342;
  int64x2_t v343;
  int64x2_t v344;
  unint64_t v345;
  char v346;
  _BYTE v347[7];
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  unint64_t v352;
  int v353;
  char v354;
  int v355;
  char v356;
  int v357;
  char v358;
  _OWORD v359[33];
  _OWORD v360[2];
  _OWORD v361[2];
  _OWORD v362[2];
  _BYTE v363[32];
  _OWORD v364[2];

  v275 = 0;
  __p = 0;
  v276 = 0;
  sub_1002782D0(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v9 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(v9 + 8);
  v10 = v9 + 8;
  v12 = *(double *)(v11 + 24);
  v146 = a1;
  if (v12 > *(double *)(a1 + 80))
  {
    v13 = 604800.0;
    goto LABEL_95;
  }
  v94 = 0;
  v89 = 0;
  v13 = 604800.0;
  v88 = 0.0;
  v90 = 0.0;
  while (1)
  {
    *(_OWORD *)v363 = xmmword_101C2D220;
    *(_OWORD *)&v363[16] = xmmword_101C2D230;
    v364[0] = xmmword_101C2D240;
    *(_OWORD *)((char *)v364 + 12) = *(__int128 *)((char *)&xmmword_101C2D240 + 12);
    *(_OWORD *)((char *)v361 + 3) = 0uLL;
    *(_OWORD *)((char *)v362 + 1) = 0uLL;
    v273 = 0uLL;
    v272 = 0;
    v271 = 0u;
    v270 = 0u;
    v269 = 0u;
    v268 = 0;
    v267 = 0u;
    v266 = 0u;
    v265 = 0u;
    v264 = 0;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    v260 = 0;
    v259 = 0u;
    v258 = 0u;
    v257 = 0u;
    *(_OWORD *)((char *)v360 + 3) = 0uLL;
    *(_QWORD *)((char *)&v360[1] + 3) = 0;
    v251 = 0;
    v250 = 0;
    if ((a2 & 1) != 0)
    {
      sub_1014A150C(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 200), (uint64_t)&__p, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), a4, (double **)a5, a6, (uint64_t)buf, *(double *)(*(_QWORD *)v10 + 24));
      *(_OWORD *)v363 = *(_OWORD *)buf;
      *(_OWORD *)&v363[16] = *(_OWORD *)&buf[16];
      v364[0] = *(_OWORD *)v283;
      *(_OWORD *)((char *)v364 + 12) = *(_OWORD *)&v283[12];
      v14 = v283[28];
      v15 = v283[29];
      v145 = v283[30];
      v362[0] = *(_OWORD *)&v283[31];
      LOBYTE(v362[1]) = v283[47];
      v151 = v284;
      v150 = v285;
      v273 = v287;
      v147 = v286;
      v16 = v288;
      v17 = v289;
      v143 = v290;
      v100 = v291;
      v148 = v292;
      v149 = v293;
      *(_DWORD *)((char *)v361 + 15) = *(_DWORD *)&v294[15];
      v361[0] = *(_OWORD *)v294;
      v136 = *(int64x2_t *)&v294[19];
      v121 = *(int64x2_t *)&v294[35];
      v272 = v295;
      v271 = *(_OWORD *)&v294[83];
      v270 = *(_OWORD *)&v294[67];
      v269 = *(_OWORD *)&v294[51];
      v99 = v296;
      v120 = v298;
      v118 = v299;
      v119 = v297;
      v116 = v301;
      v117 = v300;
      v113 = v303;
      v114 = v302;
      v111 = v305;
      v112 = v304;
      v268 = v310;
      v267 = v309;
      v266 = v308;
      v265 = v307;
      v98 = v311;
      v115 = v312;
      v109 = v313;
      v110 = v306;
      v107 = v315;
      v108 = v314;
      v106 = v316;
      v18 = v317;
      v264 = v321;
      v263 = v320;
      v262 = v319;
      v261 = v318;
      v97 = v322;
      v144 = v323;
      v142 = v324;
      v260 = v328;
      v259 = v327;
      v258 = v326;
      v257 = v325;
      v96 = v329;
      v19 = v330;
      v141 = v331;
      v140 = v332;
      v139 = v333;
      v138 = v334;
      *(_OWORD *)((char *)v360 + 11) = *(_OWORD *)((char *)v359 + 11);
      v360[0] = v359[0];
      v134 = v336;
      v135 = v335;
      v137 = v346;
      v256[0] = *(_DWORD *)v347;
      *(_DWORD *)((char *)v256 + 3) = *(_DWORD *)&v347[3];
      v254 = v353;
      v255 = v354;
      v253 = v356;
      v252 = v355;
      v251 = v358;
      v250 = v357;
      v132 = v338;
      v133 = v337;
      v130 = v340;
      v131 = v339;
      v128 = v342;
      v129 = v341;
      v126 = v344;
      v127 = v343;
      v20 = v345;
      v124 = v349;
      v125 = v348;
      v122 = v351;
      v123 = v350;
      v21 = v352;
    }
    else
    {
      v17 = 0;
      v137 = 0;
      v145 = 0;
      v15 = 0;
      v14 = 0;
      v21 = 0xFFF0000000000000;
      v149 = 1;
      v20 = 0xFFF0000000000000;
      v19 = 0xFFF0000000000000;
      v148 = 0x400000000;
      v18 = 0xFFF0000000000000;
      v115 = 0xFFF0000000000000;
      v143 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v120 = 0xFFF0000000000000;
      v121 = vdupq_n_s64(0xFFF0000000000000);
      v151 = 0.0;
      v118 = v121;
      v119 = v121;
      v150 = 0.0;
      v116 = v121;
      v117 = v121;
      v147 = 0;
      v113 = v121;
      v114 = v121;
      v16 = 0.0;
      v111 = v121;
      v112 = v121;
      v109 = v121;
      v110 = v121;
      v107 = v121;
      v108 = v121;
      v106 = v121;
      v144 = v121;
      v142 = v121;
      v141 = v121;
      v140 = v121;
      v139 = v121;
      v138 = v121;
      v134 = v121;
      v135 = v121;
      v132 = v121;
      v133 = v121;
      v130 = v121;
      v131 = v121;
      v128 = v121;
      v129 = v121;
      v126 = v121;
      v127 = v121;
      v124 = v121;
      v125 = v121;
      v122 = v121;
      v123 = v121;
      v136 = v121;
    }
    v101 = v12;
    if (v17)
    {
      v22 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v151);
      v23 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v150);
      if (*(_QWORD *)a5 == *(_QWORD *)(a5 + 8))
      {
        if (qword_10229FC40 != -1)
          dispatch_once(&qword_10229FC40, &stru_102190908);
        v24 = qword_10229FC48;
        if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "No steps detected, despite the presense of MobilityBoutMetrics", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_102190908);
          LOWORD(v279) = 0;
          LODWORD(v84) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 16, "No steps detected, despite the presense of MobilityBoutMetrics", &v279, v84);
          v59 = (char *)v58;
          sub_100512490("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v58);
          if (v59 != buf)
            free(v59);
        }
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "writeToHealthKitAppleWalkingSteadiness:startDate:endDate:source:", v22, v23, *(_QWORD *)(a1 + 40), v16);
      v25 = (double *)v275;
      v26 = v16 / 100.0;
      if (v275 >= v276)
      {
        v28 = (double *)__p;
        v29 = 0xAAAAAAAAAAAAAAABLL * ((v275 - (_BYTE *)__p) >> 3);
        v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((v276 - (_BYTE *)__p) >> 3) > v30)
          v30 = 0x5555555555555556 * ((v276 - (_BYTE *)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v276 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (char *)sub_1002596A8((uint64_t)&v276, v31);
          v25 = (double *)v275;
          v28 = (double *)__p;
        }
        else
        {
          v32 = 0;
        }
        v33 = (double *)&v32[24 * v29];
        *v33 = v151;
        v33[1] = v150;
        v33[2] = v26;
        v34 = v33;
        if (v25 != v28)
        {
          do
          {
            v35 = *(_OWORD *)(v25 - 3);
            *(v34 - 1) = *(v25 - 1);
            *(_OWORD *)(v34 - 3) = v35;
            v34 -= 3;
            v25 -= 3;
          }
          while (v25 != v28);
          v28 = (double *)__p;
        }
        v27 = (char *)(v33 + 3);
        __p = v34;
        v275 = (char *)(v33 + 3);
        v276 = &v32[24 * v31];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(double *)v275 = v151;
        v25[1] = v150;
        v27 = (char *)(v25 + 3);
        v25[2] = v26;
      }
      v275 = v27;
      a1 = v146;
    }
    v36 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "areWalkingSteadinessNotificationsEnabled");
    v37 = v13;
    v38 = *(double *)(a1 + 80);
    v39 = *(_OWORD *)(a8 + 16);
    v248[0] = *(_OWORD *)a8;
    v248[1] = v39;
    v249 = *(_QWORD *)(a8 + 32);
    sub_1014A352C((uint64_t *)&__p, a7, v36, (uint64_t)v248, (uint64_t)buf, v38);
    v40 = buf[0];
    v41 = buf[1];
    v42 = buf[2];
    v254 = *(_DWORD *)&buf[3];
    v255 = buf[7];
    v104 = *(_OWORD *)&buf[8];
    v105 = *(_QWORD *)&buf[24];
    v43 = v283[0];
    v44 = v283[1];
    v45 = v283[2];
    v252 = *(_DWORD *)&v283[3];
    v253 = v283[7];
    v46 = *(_QWORD *)&v283[8];
    v47 = *(_QWORD *)&v283[16];
    v48 = *(_QWORD *)&v283[24];
    v102 = *(_OWORD *)&v283[32];
    v103 = v284;
    if (buf[2])
    {
      v89 = *(_DWORD *)&v283[24];
      v90 = *(double *)&v283[8];
      v88 = *(double *)&v283[16];
      v94 = buf[2];
    }
    else
    {
      v87 = *(_QWORD *)&v283[24];
      if (v94 && v17)
      {
        v49 = sub_1010623A8((uint64_t)&v279, v16);
        if (v281 == 1)
          v50 = v49;
        else
          v50 = 0;
        if (v50 == 1)
        {
          if (qword_10229FC40 != -1)
            dispatch_once(&qword_10229FC40, &stru_102190908);
          v51 = qword_10229FC48;
          if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v90;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Most recent classification is OK, resetting previous notification %{private}.2f", buf, 0xCu);
          }
          v52 = sub_1001BFF7C(115, 2);
          v53 = 0.0;
          if (v52)
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC40 != -1)
              dispatch_once(&qword_10229FC40, &stru_102190908);
            v277 = 134283521;
            v278 = v90;
            LODWORD(v84) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "Most recent classification is OK, resetting previous notification %{private}.2f", &v277, v84);
            v61 = (char *)v60;
            sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v60);
            if (v61 != buf)
              free(v61);
            v89 = 0;
            v94 = 0;
            v88 = 0.0;
            v53 = 0.0;
          }
          else
          {
            v89 = 0;
            v94 = 0;
            v88 = 0.0;
          }
        }
        else
        {
          v53 = v90;
        }
        v90 = v53;
      }
      v48 = v87;
    }
    v159 = v151;
    v160 = v150;
    *(int64x2_t *)&v169[19] = v136;
    *(int64x2_t *)&v169[35] = v121;
    v172 = v119;
    v173 = v120;
    v174 = v118;
    v175 = v117;
    v176 = v116;
    v177 = v114;
    v178 = v113;
    v179 = v112;
    v180 = v111;
    v181 = v110;
    v187 = v115;
    v188 = v109;
    v189 = v108;
    v190 = v107;
    v191 = v106;
    v152[0] = *(_OWORD *)v363;
    v152[1] = *(_OWORD *)&v363[16];
    *(_OWORD *)v153 = v364[0];
    *(_OWORD *)&v153[12] = *(_OWORD *)((char *)v364 + 12);
    v157 = v362[0];
    v162 = v273;
    *(_DWORD *)&v169[15] = *(_DWORD *)((char *)v361 + 15);
    v163 = v16;
    *(_OWORD *)v169 = v361[0];
    *(_OWORD *)&v169[67] = v270;
    *(_OWORD *)&v169[83] = v271;
    *(_OWORD *)&v169[51] = v269;
    v183 = v266;
    v184 = v267;
    v154 = v14;
    v155 = v15;
    v156 = v145;
    v158 = v362[1];
    v164 = v17;
    v165 = v143;
    v170 = v272;
    v185 = v268;
    v196 = v264;
    v203 = v260;
    v221 = v137;
    *(_DWORD *)&v222[3] = *(_DWORD *)((char *)v256 + 3);
    *(_DWORD *)v222 = v256[0];
    v228 = v40;
    v229 = v41;
    v230 = v42;
    v231 = v254;
    v232 = v255;
    v235 = v43;
    v236 = v44;
    v161 = v147;
    v237 = v45;
    v239 = v253;
    v238 = v252;
    v246 = v251;
    v245 = v250;
    a1 = v146;
    v54 = *(void **)(v146 + 32);
    v166 = v100;
    v167 = v148;
    v168 = v149;
    v171 = v99;
    v182 = v265;
    v186 = v98;
    v192 = v18;
    v194 = v262;
    v195 = v263;
    v193 = v261;
    v197 = v97;
    v198 = v144;
    v199 = v142;
    v201 = v258;
    v202 = v259;
    v200 = v257;
    v204 = v96;
    v205 = v19;
    v206 = v141;
    v207 = v140;
    v208 = v139;
    v209 = v138;
    v210 = v135;
    v211 = v134;
    v212 = v133;
    v213 = v132;
    v214 = v131;
    v215 = v130;
    v216 = v129;
    v217 = v128;
    v218 = v127;
    v219 = v126;
    v220 = v20;
    v223 = v125;
    v224 = v124;
    v225 = v123;
    v226 = v122;
    v227 = v21;
    v233 = v104;
    v234 = v105;
    v240 = v46;
    v241 = v47;
    v242 = v48;
    v243 = v102;
    v244 = v103;
    *(_OWORD *)&v247[11] = *(_OWORD *)((char *)v360 + 11);
    *(_OWORD *)v247 = v360[0];
    objc_msgSend(v54, "sendAnalyticsSteadinessResult:", v152);
    v13 = v37;
    if (v149)
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v62 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "Finished Classification: data sources unavailable", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_93;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      LOWORD(v279) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "Finished Classification: data sources unavailable", &v279, v84);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v79);
      if (v80 != buf)
        free(v80);
LABEL_122:
      v13 = v37;
      goto LABEL_93;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v146 + 64) + 8) + 24) = v147;
    if ((v148 & 0x20) != 0)
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v63 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "Height not set, increasing minimum delay before next classification", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_93;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      LOWORD(v279) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "Height not set, increasing minimum delay before next classification", &v279, v84);
      v82 = (char *)v81;
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v81);
      if (v82 != buf)
        free(v82);
      goto LABEL_122;
    }
    v55 = *(_QWORD *)(v146 + 64);
    v56 = *(_QWORD *)(v55 + 8);
    v13 = *(double *)(v56 + 24) - v101;
    v57 = *(_xpc_activity_s **)(v146 + 48);
    if (v57)
      break;
    v12 = *(double *)(v56 + 24);
LABEL_55:
    if (v12 <= *(double *)(v146 + 80))
    {
      v10 = v55 + 8;
      if (v13 > 0.00999999978)
        continue;
    }
    goto LABEL_93;
  }
  if (!xpc_activity_should_defer(v57))
  {
    v55 = *(_QWORD *)(v146 + 64);
    v12 = *(double *)(*(_QWORD *)(v55 + 8) + 24);
    goto LABEL_55;
  }
  state = xpc_activity_get_state(*(xpc_activity_t *)(v146 + 48));
  if (xpc_activity_set_state(*(xpc_activity_t *)(v146 + 48), 3))
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102190908);
    v65 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "#warning: Classification deferred", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      LOWORD(v279) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "#warning: Classification deferred", &v279, v84);
      v67 = (char *)v66;
      sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v66);
      goto LABEL_126;
    }
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102190908);
    v68 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = state;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_FAULT, "Failed to mark activity as Deferred. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v279 = 134349056;
      v280 = state;
      LODWORD(v84) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 17, "Failed to mark activity as Deferred. Current state is %{public}ld", &v279, v84);
      v67 = (char *)v83;
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v83);
LABEL_126:
      if (v67 != buf)
        free(v67);
    }
  }
LABEL_93:
  if (v94)
    objc_msgSend(*(id *)(*(_QWORD *)(v146 + 32) + 240), "writeSteadinessEvent:startDate:endDate:source:", v89, +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v90), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v88), *(_QWORD *)(v146 + 40));
LABEL_95:
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_102190908);
  v69 = (_QWORD *)v146;
  v70 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v146 + 64) + 8) + 24);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v71;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v13;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Finishing Classification: nextClassificationTime=%{}.2f, nextFireInterval=%{}.2f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102190908);
    v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v146 + 64) + 8) + 24);
    *(_DWORD *)v363 = 134218240;
    *(_QWORD *)&v363[4] = v76;
    *(_WORD *)&v363[12] = 2048;
    *(double *)&v363[14] = v13;
    LODWORD(v84) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "Finishing Classification: nextClassificationTime=%{}.2f, nextFireInterval=%{}.2f", v363, v84);
    v78 = (char *)v77;
    sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v77);
    if (v78 != buf)
      free(v78);
    v69 = (_QWORD *)v146;
  }
  v72 = sub_100127B9C();
  sub_100081C10(v72, buf);
  sub_10018A4CC(*(uint64_t *)buf, "steadinessClassificationNextClassificationTime", (const void *)(*(_QWORD *)(v69[8] + 8) + 24));
  v73 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v74 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  (*(void (**)(void))(v69[7] + 16))();
  *(_BYTE *)(v69[4] + 208) = 0;
  if (__p)
  {
    v275 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100EBFFEC(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0xA98];
  if (STACK[0xA98])
  {
    STACK[0xAA0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100EC0710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100EC072C(id *result, int a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "setUpClassificationActivityWithDeferral:");
  return result;
}

void sub_100EC0BFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308E88);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EC0C5C(_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_1002720D4(a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_100EC0CC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EC0CDC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_100EC0D0C(_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_10025E660(a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_100EC0D70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100EC0D8C(uint64_t a1)
{
  int v2;
  void **v3;
  uint64_t v4;
  double v5;
  double v6;
  void **v7;
  float v8;
  void **v9;
  float v10;
  void **v11;
  float v12;
  void **v13;
  std::string *p_p;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v31;
  uint64_t v32;
  _BOOL8 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  int v44;
  int v45;
  NSDictionary *v46;
  std::string __p;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52[2];
  char v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57[2];
  char v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62[2];
  char v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67[2];
  char v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72[2];
  char v73;
  _QWORD v74[50];
  _QWORD v75[50];

  v75[0] = &off_10221C2A8;
  v74[0] = CFSTR("extraCount");
  v74[1] = CFSTR("boutNumGaitMetrics");
  v75[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v74[2] = CFSTR("boutWorkoutType");
  v75[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 28));
  v74[3] = CFSTR("boutStepCount");
  v75[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v74[4] = CFSTR("boutDuration");
  v75[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 16) - *(double *)(*(_QWORD *)(a1 + 32) + 8));
  v74[5] = CFSTR("boutTerminationReason");
  v75[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  v74[6] = CFSTR("boutDeviceSide");
  v75[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 48));
  v74[7] = CFSTR("boutNumGaitMetrics_bin");
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36);
  v70 = 0;
  v71 = 0;
  v69 = 0;
  sub_10027205C(&v69, (const void *)qword_102308E50, unk_102308E58, (unk_102308E58 - qword_102308E50) >> 2);
  sub_100EC18B8(v2, (uint64_t)&v69, v72);
  if (v73 >= 0)
    v3 = v72;
  else
    v3 = (void **)v72[0];
  v75[7] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v74[8] = CFSTR("boutDuration_bin");
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(double *)(v4 + 8);
  v5 = *(double *)(v4 + 16);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  sub_10025EA00(&v64, (const void *)qword_102308E70, unk_102308E78, (unk_102308E78 - qword_102308E70) >> 3);
  sub_10090D860((uint64_t)&v64, v67, v5 - v6);
  if (v68 >= 0)
    v7 = v67;
  else
    v7 = (void **)v67[0];
  v75[8] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v74[9] = CFSTR("boundaryType");
  v75[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  v74[10] = CFSTR("cycleTimeMean");
  v75[10] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 56));
  v74[11] = CFSTR("stepLengthEntropy");
  v75[11] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 64));
  v74[12] = CFSTR("stepLengthPoincareSD1");
  v75[12] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 72));
  v74[13] = CFSTR("stepLengthPoincareSD2");
  v75[13] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 80));
  v74[14] = CFSTR("cycleTimeEntropy");
  v75[14] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 88));
  v74[15] = CFSTR("cycleTimePoincareSD1");
  v75[15] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 96));
  v74[16] = CFSTR("cycleTimePoincareSD2");
  v75[16] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 104));
  v74[17] = CFSTR("userAge_bin");
  v8 = *(float *)(*(_QWORD *)(a1 + 40) + 4);
  v60 = 0;
  v61 = 0;
  v59 = 0;
  sub_10027205C(&v59, (const void *)qword_102308DF0, unk_102308DF8, (unk_102308DF8 - qword_102308DF0) >> 2);
  sub_10041CAFC((uint64_t)&v59, v62, v8);
  if (v63 >= 0)
    v9 = v62;
  else
    v9 = (void **)v62[0];
  v75[17] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9);
  v74[18] = CFSTR("userGender");
  v75[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8));
  v74[19] = CFSTR("userHeight_bin");
  v10 = *(float *)(*(_QWORD *)(a1 + 40) + 224);
  v55 = 0;
  v56 = 0;
  v54 = 0;
  sub_10027205C(&v54, (const void *)qword_102308E10, unk_102308E18, (unk_102308E18 - qword_102308E10) >> 2);
  sub_10041CAFC((uint64_t)&v54, v57, v10);
  if (v58 >= 0)
    v11 = v57;
  else
    v11 = (void **)v57[0];
  v75[19] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
  v74[20] = CFSTR("userWeight_bin");
  v12 = *(float *)(*(_QWORD *)(a1 + 40) + 232);
  v50 = 0;
  v51 = 0;
  v49 = 0;
  sub_10027205C(&v49, (const void *)qword_102308E30, unk_102308E38, (unk_102308E38 - qword_102308E30) >> 2);
  sub_10041CAFC((uint64_t)&v49, v52, v12);
  if (v53 >= 0)
    v13 = v52;
  else
    v13 = (void **)v52[0];
  v75[20] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13);
  v74[21] = CFSTR("userPAL_bin");
  sub_100EC1C3C(&__p, *(float *)(*(_QWORD *)(a1 + 40) + 12), 0.0, 3.0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v75[21] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  v74[22] = CFSTR("metricAsymmetryPercentage");
  v75[22] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 136));
  v74[23] = CFSTR("metricDoubleSupportPercentage");
  v75[23] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 120));
  v74[24] = CFSTR("metricStepLength");
  v75[24] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 128));
  v74[25] = CFSTR("metricWalkingSpeed");
  v75[25] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 112));
  v74[26] = CFSTR("isValidAsymmetryPercentage");
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_DWORD *)(v15 + 204);
  if (*(_DWORD *)(v15 + 52))
    v17 = 42;
  else
    v17 = -1;
  v75[26] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v17 & v16) == 0);
  v74[27] = CFSTR("isValidDoubleSupportPercentage");
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_DWORD *)(v18 + 196);
  if (*(_DWORD *)(v18 + 52))
    v20 = 42;
  else
    v20 = -1;
  v75[27] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v20 & v19) == 0);
  v74[28] = CFSTR("isValidStepLength");
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_DWORD *)(v21 + 200);
  if (*(_DWORD *)(v21 + 52))
    v23 = 42;
  else
    v23 = -1;
  v75[28] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v23 & v22) == 0);
  v74[29] = CFSTR("isValidWalkingSpeed");
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(_DWORD *)(v24 + 192);
  if (*(_DWORD *)(v24 + 52))
    v26 = 42;
  else
    v26 = -1;
  v75[29] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v26 & v25) == 0);
  v74[30] = CFSTR("isValidStepLengthEntropy");
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  v31 = (v27 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL
     || v27 == 0x7FF0000000000000
     || (v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000
     || ((v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  v75[30] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v31);
  v74[31] = CFSTR("isValidCycleTimeEntropy");
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
  v36 = (v32 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL
     || v32 == 0x7FF0000000000000
     || (v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000
     || ((v32 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  v75[31] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v36);
  v74[32] = CFSTR("metricStepIndexOfHarmonicityAP");
  LODWORD(v37) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 144);
  v75[32] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v37);
  v74[33] = CFSTR("metricStepIndexOfHarmonicityML");
  LODWORD(v38) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 148);
  v75[33] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v38);
  v74[34] = CFSTR("metricStepIndexOfHarmonicityVT");
  LODWORD(v39) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152);
  v75[34] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v39);
  v74[35] = CFSTR("metricSwingIndexOfHarmonicityAP");
  LODWORD(v40) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 156);
  v75[35] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v40);
  v74[36] = CFSTR("metricSwingIndexOfHarmonicityML");
  LODWORD(v41) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160);
  v75[36] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v41);
  v74[37] = CFSTR("metricSwingIndexOfHarmonicityVT");
  LODWORD(v42) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 164);
  v75[37] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v42);
  v74[38] = CFSTR("isValidIndexOfHarmonicity");
  v75[38] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10072640C(*(_QWORD *)(a1 + 32)));
  v74[39] = CFSTR("numSegmentsRejectedByIsCadenceConcordant");
  v75[39] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 188));
  v74[40] = CFSTR("numSegmentsRejectedByIsFeasibleWalkingSpeed");
  v75[40] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 176));
  v74[41] = CFSTR("numSegmentsRejectedByIsNotRunning");
  v75[41] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 172));
  v74[42] = CFSTR("numSegmentsRejectedByIsPendular");
  v75[42] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 180));
  v74[43] = CFSTR("numSegmentsRejectedByIsSufficientVerticalTwist");
  v75[43] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 184));
  v74[44] = CFSTR("numSegmentsRejectedByIsSwingStanceCycle");
  v75[44] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 168));
  v74[45] = CFSTR("isAccepted");
  v43 = *(_QWORD *)(a1 + 32);
  v44 = *(_DWORD *)(v43 + 192);
  if (*(_DWORD *)(v43 + 52))
    v45 = 42;
  else
    v45 = -1;
  v75[45] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v45 & v44) == 0);
  v74[46] = CFSTR("rejectedDueToGrade");
  v75[46] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 192) >> 2) & 1);
  v74[47] = CFSTR("rejectedDueToNumberOfGaitMetrics");
  v75[47] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 192) >> 1) & 1);
  v74[48] = CFSTR("rejectedDueToWorkout");
  v75[48] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 192) >> 3) & 1);
  v74[49] = CFSTR("rejectedDueToGaitMetricsYield");
  v75[49] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 192) >> 4) & 1);
  v46 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v75, v74, 50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v58 < 0)
    operator delete(v57[0]);
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v63 < 0)
    operator delete(v62[0]);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v68 < 0)
    operator delete(v67[0]);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v73 < 0)
    operator delete(v72[0]);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  return v46;
}

void sub_100EC1790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a32 < 0)
    operator delete(a27);
  if (a24)
    operator delete(a24);
  if (a41 < 0)
    operator delete(a36);
  if (a33)
    operator delete(a33);
  if (a50 < 0)
    operator delete(a45);
  if (a42)
    operator delete(a42);
  if (a59 < 0)
    operator delete(a54);
  if (a51)
    operator delete(a51);
  _Unwind_Resume(exception_object);
}

void sub_100EC18B8(int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *p_p;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  void *v24;
  std::string *v25;
  __int128 v26;
  __int128 v27;
  std::string __p;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_10027205C(&v33, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v6 = v34 - (_BYTE *)v33;
  if (v34 == (_BYTE *)v33)
  {
    if (!v34)
    {
      v9 = *(int **)a2;
      if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
        goto LABEL_30;
LABEL_36:
      sub_1015A2E04(a3, "(--inf,inf)");
      return;
    }
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = 0;
    v8 = v6 >> 2;
    if ((unint64_t)(v6 >> 2) <= 1)
      v8 = 1;
    while (v33[v7] < a1)
    {
      if (v8 == ++v7)
      {
        LODWORD(v7) = v8;
        break;
      }
    }
  }
  v34 = v33;
  operator delete(v33);
  v9 = *(int **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 == *(_QWORD *)a2)
    goto LABEL_36;
  if (!(_DWORD)v7)
  {
LABEL_30:
    std::to_string(&v31, *v9);
    v25 = std::string::insert(&v31, 0, "(--inf,");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v32, "]");
LABEL_31:
    v27 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a3[2] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)a3 = v27;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = (void *)v31.__r_.__value_.__r.__words[0];
      goto LABEL_35;
    }
    return;
  }
  if ((v10 - *(_QWORD *)a2) >> 2 == (int)v7)
  {
    std::to_string(&v31, *(_DWORD *)(v10 - 4));
    v11 = std::string::insert(&v31, 0, "(");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v32, ",inf)");
    goto LABEL_31;
  }
  std::to_string(&v29, v9[(int)v7 - 1]);
  v14 = std::string::insert(&v29, 0, "(");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v30, ",");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_DWORD *)(*(_QWORD *)a2 + 4 * (int)v7));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v31, (const std::string::value_type *)p_p, size);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v32, "]");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  a3[2] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    v24 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v24);
  }
}

void sub_100EC1B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100EC1C3C(std::string *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>)
{
  float v7;
  float v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;

  v7 = (float)(a2 - a3) / a4;
  v8 = ceilf(v7);
  std::to_string(&v20, a3 + (float)((float)(int)(vcvtps_s32_f32(v7) - 1) * a4));
  std::to_string(&v19, a3 + (float)((float)(int)v8 * a4));
  std::operator+<char>(&v16, "(", &v20);
  v9 = std::string::append(&v16, ",");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v19;
  else
    v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v17, (const std::string::value_type *)v11, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v18, "]");
  *a1 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_100EC1DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  _Unwind_Resume(exception_object);
}

void sub_100EC2650(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308EC8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100EC2680(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  float v4;
  void **v5;
  double v6;
  double v7;
  float v8;
  float v9;
  void **v10;
  float v11;
  std::string *v12;
  float v13;
  std::string *v14;
  float v15;
  std::string *v16;
  float v17;
  std::string *v18;
  std::string *v19;
  float v20;
  std::string *v21;
  float v22;
  std::string *v23;
  float v24;
  std::string *p_p;
  NSDictionary *v26;
  std::string __p;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39[2];
  char v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44[2];
  char v45;
  std::string v46;
  std::string v47;
  _QWORD v48[48];
  _QWORD v49[48];

  v48[0] = CFSTR("userHeight_bin");
  sub_100EC1C3C(&v47, *(float *)(a1 + 48), 0.0, 0.1);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v47;
  else
    v2 = (std::string *)v47.__r_.__value_.__r.__words[0];
  v49[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v48[1] = CFSTR("userWeight_bin");
  sub_100EC1C3C(&v46, *(float *)(a1 + 52), 0.0, 15.0);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v46;
  else
    v3 = (std::string *)v46.__r_.__value_.__r.__words[0];
  v49[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v48[2] = CFSTR("userAge_bin");
  v4 = *(float *)(a1 + 60);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  sub_10027205C(&v41, (const void *)qword_102308E90, unk_102308E98, (unk_102308E98 - qword_102308E90) >> 2);
  sub_10041CAFC((uint64_t)&v41, v44, v4);
  if (v45 >= 0)
    v5 = v44;
  else
    v5 = (void **)v44[0];
  v49[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v48[3] = CFSTR("userBMI_bin");
  LODWORD(v6) = *(_DWORD *)(a1 + 48);
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  objc_msgSend(*(id *)(a1 + 32), "BMIFromHeight:weight:", v6, v7);
  v9 = v8;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  sub_10027205C(&v36, (const void *)qword_102308EB0, unk_102308EB8, (unk_102308EB8 - qword_102308EB0) >> 2);
  sub_10041CAFC((uint64_t)&v36, v39, v9);
  if (v40 >= 0)
    v10 = v39;
  else
    v10 = (void **)v39[0];
  v49[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10);
  v48[4] = CFSTR("userSex");
  v49[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v48[5] = CFSTR("userIsHeightSet");
  v49[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 97));
  v48[6] = CFSTR("userIsWeightSet");
  v49[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 98));
  v48[7] = CFSTR("userIsAgeSet");
  v49[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 96));
  v48[8] = CFSTR("classificationSteadinessScoreIsValid");
  v49[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 168));
  v48[9] = CFSTR("classificationUnadjustedScore");
  v49[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 152));
  v48[10] = CFSTR("classificationSteadinessScore");
  v49[10] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 160));
  v48[11] = CFSTR("steadinessScore_bin");
  v11 = *(double *)(a1 + 160);
  sub_100EC1C3C(&v35, v11, 0.0, 5.0);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v35;
  else
    v12 = (std::string *)v35.__r_.__value_.__r.__words[0];
  v49[11] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12);
  v48[12] = CFSTR("classificationIsHistoricalCompute");
  v49[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 169));
  v48[13] = CFSTR("classificationRejectionStatusClassifier");
  v49[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 172));
  v48[14] = CFSTR("classificationAppliedBoutMetricCorrections");
  v49[14] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1132));
  v48[15] = CFSTR("steadinessScoreCapacity_bin");
  v13 = *(double *)(a1 + 1184);
  sub_100EC1C3C(&v34, v13, 0.0, 0.05);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v34;
  else
    v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
  v49[15] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14);
  v48[16] = CFSTR("steadinessScoreAnomalousGait_bin");
  v15 = *(double *)(a1 + 1240);
  sub_100EC1C3C(&v33, v15, 0.0, 0.05);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v33;
  else
    v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
  v49[16] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16);
  v48[17] = CFSTR("steadinessScoreCompensatoryGait_bin");
  v17 = *(double *)(a1 + 1296);
  sub_100EC1C3C(&v32, v17, 0.0, 0.05);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v32;
  else
    v18 = (std::string *)v32.__r_.__value_.__r.__words[0];
  v49[17] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18);
  v48[18] = CFSTR("steadinessScoreDemographics_bin");
  sub_100EC1C3C(&v31, 0.0, 0.0, 0.05);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v31;
  else
    v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
  v49[18] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19);
  v48[19] = CFSTR("steadinessScoreGaitSmoothness_bin");
  v20 = *(double *)(a1 + 1352);
  sub_100EC1C3C(&v30, v20, 0.0, 0.05);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v30;
  else
    v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
  v49[19] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21);
  v48[20] = CFSTR("unadjustedSteadinessScore_bin");
  v22 = *(double *)(a1 + 144);
  sub_100EC1C3C(&v29, v22, 0.0, 0.05);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v29;
  else
    v23 = (std::string *)v29.__r_.__value_.__r.__words[0];
  v49[20] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23);
  v48[21] = CFSTR("numValidStepBouts7Days");
  v49[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1224));
  v48[22] = CFSTR("numValidStepBouts28Days");
  v49[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1228));
  v48[23] = CFSTR("daysWithSufficientStepBouts7Days");
  v49[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 104));
  v48[24] = CFSTR("daysWithSufficientStepBouts28Days");
  v49[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 108));
  v48[25] = CFSTR("dailySteps30daysMax");
  v49[25] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 992));
  v48[26] = CFSTR("dailyFlights30daysMax");
  v49[26] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 984));
  v48[27] = CFSTR("dailySteps7daysMean");
  v49[27] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 1000));
  v48[28] = CFSTR("dailySteps30daysMean");
  v49[28] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 1032));
  v48[29] = CFSTR("dailyFlights30daysMean");
  v49[29] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 1024));
  v48[30] = CFSTR("inputNumFallsInQueryPeriod");
  v49[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1128));
  v48[31] = CFSTR("numStepsLast7Days_bin");
  v24 = *(double *)(a1 + 1144);
  sub_100EC1C3C(&__p, v24, 0.0, 500.0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v49[31] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  v48[32] = CFSTR("classificationRejectionStatusModelContinuousWalking");
  v49[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1208));
  v48[33] = CFSTR("classificationRejectionStatusModelEntropy");
  v49[33] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1320));
  v48[34] = CFSTR("classificationRejectionStatusModelGaitBaseline");
  v49[34] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1264));
  v48[35] = CFSTR("errorStatusClassifier");
  v49[35] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 176));
  v48[36] = CFSTR("errorDataSourcesUnavailable");
  v49[36] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 180));
  v48[37] = CFSTR("notificationWrittenToHealthKit");
  v49[37] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1042));
  v48[38] = CFSTR("notificationUserHasOnboarded");
  v49[38] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1041));
  v48[39] = CFSTR("notificationEventType");
  v49[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1096));
  v48[40] = CFSTR("notificationPercentOK");
  v49[40] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 1048));
  v48[41] = CFSTR("notificationPercentLow");
  v49[41] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 1056));
  v48[42] = CFSTR("notificationPercentVeryLow");
  v49[42] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 1064));
  v48[43] = CFSTR("notificationIsBlockoutPeriodLow");
  v49[43] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1072));
  v48[44] = CFSTR("notificationIsBlockoutPeriodVeryLow");
  v49[44] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1073));
  v48[45] = CFSTR("notificationIsSampleRecent");
  v49[45] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1074));
  v48[46] = CFSTR("weeksSinceLowNotification");
  v49[46] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1384));
  v48[47] = CFSTR("weeksSinceVeryLowNotification");
  v49[47] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1388));
  v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v49, v48, 48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v45 < 0)
    operator delete(v44[0]);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  return v26;
}

void sub_100EC2F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  if (a63 < 0)
    operator delete(a58);
  if (a55)
    operator delete(a55);
  if (a72 < 0)
    operator delete(a67);
  if (a64)
    operator delete(a64);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  _Unwind_Resume(a1);
}

void sub_100EC35B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EC35E4(uint64_t a1, xpc_activity_t activity)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  xpc_object_t v8;
  int64_t int64;
  int64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  int64_t v16;
  uint64_t v17;
  uint8_t *v18;
  _BYTE v19[24];
  uint64_t v20;
  uint8_t buf[4];
  const char *state;
  __int16 v23;
  int64_t v24;
  __int16 v25;
  uint64_t v26;

  if (!xpc_activity_get_state(activity))
  {
    v8 = xpc_activity_copy_criteria(activity);
    if (!v8)
      v8 = xpc_dictionary_create(0, 0, 0);
    int64 = xpc_dictionary_get_int64(v8, XPC_ACTIVITY_DELAY);
    if (int64)
    {
      v10 = int64;
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v11 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446722;
        state = "com.apple.locationd.Mobility.Classification";
        v23 = 2050;
        v24 = v10;
        v25 = 2050;
        v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: Checking in on XPC  %{public}s activity, previous delay (%{public}lld), new delay (%{public}lld)", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_29;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v19 = 136446722;
      *(_QWORD *)&v19[4] = "com.apple.locationd.Mobility.Classification";
      *(_WORD *)&v19[12] = 2050;
      *(_QWORD *)&v19[14] = v10;
      *(_WORD *)&v19[22] = 2050;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "XPC_CHECK_IN: Checking in on XPC  %{public}s activity, previous delay (%{public}lld), new delay (%{public}lld)", v19, 32, *(_OWORD *)v19, *(_QWORD *)&v19[16], v13);
    }
    else
    {
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v15 = qword_10229FC48;
      if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446466;
        state = "com.apple.locationd.Mobility.Classification";
        v23 = 2050;
        v24 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: Initializing %{public}s activity with delay %{public}lld", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_29;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v17 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v19 = 136446466;
      *(_QWORD *)&v19[4] = "com.apple.locationd.Mobility.Classification";
      *(_WORD *)&v19[12] = 2050;
      *(_QWORD *)&v19[14] = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "XPC_CHECK_IN: Initializing %{public}s activity with delay %{public}lld", v19, 22, *(_OWORD *)v19, *(_QWORD *)&v19[16], v20);
    }
    v18 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService setUpClassificationActivityWithDeferral:]_block_invoke", "%s\n", v14);
    if (v18 != buf)
      free(v18);
LABEL_29:
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, *(_QWORD *)(a1 + 40));
    xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REPEATING, 1);
    xpc_activity_set_criteria(activity, v8);
    xpc_release(v8);
    return;
  }
  objc_msgSend(*(id *)(a1 + 32), "onMobilityClassificationActivity:", activity);
  if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4))
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102190908);
    v4 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      state = (const char *)xpc_activity_get_state(activity);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102190908);
      v5 = qword_10229FC48;
      *(_DWORD *)v19 = 134349056;
      *(_QWORD *)&v19[4] = xpc_activity_get_state(activity);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 17, "Failed to mark activity as Continue. Current state is %{public}ld", v19, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService setUpClassificationActivityWithDeferral:]_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100EC3C6C(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v4;
  NSObject *v5;
  xpc_activity_state_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  xpc_activity_state_t v16;
  uint8_t buf[4];
  xpc_activity_state_t state;

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021908E8);
  v4 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BoutService: Data processing timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    v7 = qword_10229FE98;
    v15 = 134349056;
    v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "BoutService: Data processing timer fired (%{public}ld)", &v15, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService setUpProcessBoutsActivity]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 32), "onMobilityProcessBoutsActivity:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    v5 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
    {
      v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021908E8);
      v10 = qword_10229FE98;
      v11 = xpc_activity_get_state(a2);
      v15 = 134349056;
      v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Failed to mark activity as Continue. Current state is %{public}ld", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService setUpProcessBoutsActivity]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_100EC4164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EC4178(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102190A88);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLMobility::BoutBoundary>::setExpirationRule(CFTimeInterval) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100EC442C(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102190A88);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100EC46E0(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102190A88);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100EC4994(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102190A88);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102190A88);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

id sub_100EC4C48(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onAggregationTimer");
}

void sub_100EC4EF0(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v4;
  NSObject *v5;
  xpc_activity_state_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  xpc_activity_state_t v16;
  uint8_t buf[4];
  xpc_activity_state_t state;

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021908E8);
  v4 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "XPC Mobility Sync: Mobility sync with watch fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    v7 = qword_10229FE98;
    v15 = 134349056;
    v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "XPC Mobility Sync: Mobility sync with watch fired (%{public}ld)", &v15, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService setUpMobilityCompanionSyncActivity]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 32), "onMobilityCompanionSyncActivity:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021908E8);
    v5 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
    {
      v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "XPC Mobility Sync: Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021908E8);
      v10 = qword_10229FE98;
      v11 = xpc_activity_get_state(a2);
      v15 = 134349056;
      v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "XPC Mobility Sync: Failed to mark activity as Continue. Current state is %{public}ld", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService setUpMobilityCompanionSyncActivity]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_100EC5E48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100EC5E64(uint64_t a1)
{
  _QWORD v3[5];
  _QWORD v4[5];

  v3[0] = CFSTR("isActivityDeferred");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 36));
  v3[1] = CFSTR("isSuccess");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 37));
  v3[2] = CFSTR("isActivityValid");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 38));
  v3[3] = CFSTR("isWatchPaired");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 39));
  v3[4] = CFSTR("messageSize");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 5);
}

void sub_100EC62C0(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100EC62EC(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100EC6318(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

_QWORD *sub_100EC6344@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x248uLL);
  result = sub_100EC639C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100EC6388(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EC639C(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102190958;
  sub_100971314(a1 + 3, *a2);
  return a1;
}

void sub_100EC63D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100EC63EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102190958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EC6400(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102190958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100EC6434(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_100EC6444@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x268uLL);
  result = sub_100EC649C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100EC6488(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EC649C(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021909A8;
  sub_1013D4924(a1 + 3, *a2);
  return a1;
}

void sub_100EC64D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100EC64EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021909A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EC6500(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021909A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100EC6534(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_100EC6544@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  result = sub_100EC658C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100EC6578(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EC658C(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_1021909F8;
  a1[1] = 0;
  sub_1010DE24C(a1 + 3);
  return a1;
}

void sub_100EC65C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100EC65D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021909F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EC65EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021909F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100EC6620(uint64_t a1)
{
  return sub_1010DE2AC(a1 + 24);
}

void sub_100EC662C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2 + 216;
    if (*(char *)(a2 + 279) < 0)
      operator delete(*(void **)(a2 + 256));
    sub_100261F44(v3);
    if (*(char *)(a2 + 111) < 0)
      operator delete(*(void **)(a2 + 88));
    sub_100261F44(a2 + 48);
    sub_100261F44(a2 + 32);
    sub_100261F44(a2 + 16);
    sub_100261F44(a2);
    operator delete();
  }
}

uint64_t sub_100EC66AC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100261F44(result);
    operator delete();
  }
  return result;
}

_QWORD *sub_100EC66E8@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1C0uLL);
  result = sub_100EC6740(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100EC672C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EC6740(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102190A48;
  sub_100860DA0(a1 + 3, *a2);
  return a1;
}

void sub_100EC677C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100EC6790(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102190A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EC67A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102190A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100EC67D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t *sub_100EC67E8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100261F44(v2 + 16);
    sub_100261F44(v2);
    operator delete();
  }
  return result;
}

void sub_100EC6838(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  if (a2)
  {
    v3 = (std::__shared_weak_count *)a2[5];
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (std::__shared_weak_count *)a2[3];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    v5 = (std::__shared_weak_count *)a2[1];
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete();
  }
}

uint64_t sub_100EC6894(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102190928);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102190928);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMobility::BoutBoundary>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

void sub_100EC6A90(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100EC6ABC(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102190928);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102190928);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_100EC6CB8(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102190928);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102190928);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_100EC6EB4(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102190928);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102190928);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

_QWORD *sub_100EC70B0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100EC7128(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100EC710C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100EC7128(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x111111111111112)
    sub_100259694();
  result = (char *)sub_100273E28((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[240 * v4];
  return result;
}

unsigned __int8 *sub_100EC7178()
{
  unsigned __int8 *result;
  uint64_t v1;
  unsigned __int8 v2[8];
  uint64_t v3;

  sub_1015A2E04(qword_102308DB0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308DB0, (void *)&_mh_execute_header);
  v1 = 28800;
  result = sub_1018CA5B4(v2, "ActivityIntervalMobilityCompanionSync", &v1, 0);
  qword_102308DC8 = v3;
  return result;
}

unsigned __int8 *sub_100EC71F4()
{
  unsigned __int8 *result;
  uint64_t v1;
  char *v2;
  std::string *v3;
  __int128 v4;
  uint64_t v5;
  unsigned __int8 v6[8];
  uint64_t v7;
  void *v8[2];
  char v9;
  BOOL v10[8];
  __int128 __p;
  void *v12;
  void *v13[2];
  char v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  std::string v18;
  void *v19[2];
  std::string::size_type v20;
  int v21;
  unsigned __int8 v22[4];
  int v23;
  int v24;
  unsigned __int8 v25[4];
  int v26;
  uint64_t v27;
  unsigned __int8 v28[8];
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void *v33[3];
  void *v34[3];
  void *v35[3];
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 buf[8];
  __int128 __src;
  void *v41;

  sub_100EC7968("MslEnable");
  sub_100EC7968("MslFile");
  sub_100EC7968("MslFlushTimeout");
  LOBYTE(v30) = 0;
  result = sub_1018BF25C(buf, "MslLogger.Enable", (unsigned __int8 *)&v30, 0);
  if (buf[1])
  {
    v1 = sub_100127B9C();
    sub_100081C10(v1, &v38);
    v27 = 104857600;
    sub_1018CA5B4(v28, "MslLogger.FileSize", &v27, 0);
    v30 = v29;
    v24 = 86400;
    sub_1018C1A0C(v25, "MslLogger.FileTimeInterval", &v24, 0);
    v31 = v26;
    v21 = 50;
    sub_1018C1A0C(v22, "MslLogger.FilesToKeep", &v21, 0);
    v32 = v23;
    v2 = (char *)sub_1001FD94C();
    sub_1000B7884(v2, (uint64_t)&v18);
    v3 = std::string::append(&v18, "MslLogger");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v20 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)v19 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    sub_1018C9D4C((BOOL *)buf, "MslLogger.Directory", (__int128 *)v19, 0);
    if (SHIBYTE(v41) < 0)
    {
      sub_100115CE4(v33, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      *(_OWORD *)v33 = __src;
      v33[2] = v41;
    }
    sub_1015A2E04(v13, "locationdSensors");
    sub_1018C9D4C((BOOL *)&v15, "MslLogger.Prefix", (__int128 *)v13, 0);
    if (SHIBYTE(v17) < 0)
    {
      sub_100115CE4(v34, (void *)v16, *((unint64_t *)&v16 + 1));
    }
    else
    {
      *(_OWORD *)v34 = v16;
      v34[2] = v17;
    }
    sub_1015A2E04(v8, "msl");
    sub_1018C9D4C(v10, "MslLogger.Ext", (__int128 *)v8, 0);
    if (SHIBYTE(v12) < 0)
    {
      sub_100115CE4(v35, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      *(_OWORD *)v35 = __p;
      v35[2] = v12;
    }
    v36 = 4;
    v5 = -1;
    sub_1018CA5B4(v6, "MslLogger.FlushTimeout", &v5, 0);
    v37 = v7;
    if (SHIBYTE(v12) < 0)
      operator delete((void *)__p);
    if (v9 < 0)
      operator delete(v8[0]);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)v16);
    if (v14 < 0)
      operator delete(v13[0]);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)__src);
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    operator new();
  }
  return result;
}

void sub_100EC77C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a71;

  sub_100EC906C(&a39, 0);
  sub_100985540((uint64_t)&a58);
  sub_100261F44((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_100EC7960()
{
  JUMPOUT(0x100EC7958);
}

void sub_100EC7968(const char *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;

  v2 = sub_100127B9C();
  sub_100081C10(v2, &v12);
  v11 = 0;
  if (sub_100525C58(v12, a1, &v11, 0xFFFFFFFFLL))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102190AA8);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Legacy motion setting found '%{public}s'. Clearing.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102190AA8);
      v14 = 136446210;
      v15 = a1;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Legacy motion setting found '%{public}s'. Clearing.", &v14, 12);
      sub_100512490("Generic", 1, 0, 0, "void CLObsoleteMotionDefaultsWrite(const char *)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    sub_100525484(v12, a1, 0xFFFFFFFFLL);
    if (sub_100525C58(v12, a1, &v11, 0xFFFFFFFFLL))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102190AA8);
      v4 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v17 = a1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to clear legacy motion setting: '%{public}s'. Stale profile?", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102190AA8);
        v14 = 136446210;
        v15 = a1;
        LODWORD(v10) = 12;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to clear legacy motion setting: '%{public}s'. Stale profile?", &v14, v10);
        sub_100512490("Generic", 1, 0, 0, "void CLObsoleteMotionDefaultsWrite(const char *)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
    }
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_100EC7CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EC7CFC()
{
  uint64_t v0;

  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_102190AC8);
  v0 = qword_1023118B0;
  if (qword_1023118B0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)qword_1023118B0);
    sub_100EC7D6C((uint64_t *)(v0 + 8), 0);
    os_unfair_lock_unlock((os_unfair_lock_t)v0);
  }
}

uint64_t sub_100EC7D6C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1015E2ECC(result);
    operator delete();
  }
  return result;
}

void sub_100EC7DA8()
{
  operator new();
}

void sub_100EC7ED4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  operator delete();
}

id sub_100EC7F38(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSFileManager *v4;
  uint64_t v5;
  _QWORD *v6;
  NSArray *v7;
  uint64_t v8;
  _QWORD *v9;
  NSArray *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  NSString *v18;
  id v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v2 = +[NSMutableArray array](NSMutableArray, "array");
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    sub_1015E3AAC(v3);
  v4 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 16);
  if (*(char *)(v5 + 39) < 0)
    v6 = (_QWORD *)*v6;
  v7 = -[NSFileManager contentsOfDirectoryAtPath:error:](v4, "contentsOfDirectoryAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), 0);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_QWORD *)(v8 + 40);
  if (*(char *)(v8 + 63) < 0)
    v9 = (_QWORD *)*v9;
  v10 = -[NSArray filteredArrayUsingPredicate:](v7, "filteredArrayUsingPredicate:", +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("self BEGINSWITH %@"), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9)));
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v11 = -[NSArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v16 = *(_QWORD *)(a1 + 8);
        v17 = (_QWORD *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0)
          v17 = (_QWORD *)*v17;
        v18 = -[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17), "stringByAppendingPathComponent:", v15);
        v19 = objc_msgSend(CFSTR("/var/mobile/Library/Logs/CrashReporter/com.apple.locationd"), "stringByAppendingPathComponent:", v15);
        sub_100512FFC(-[NSString UTF8String](v18, "UTF8String"), (const char *)objc_msgSend(v19, "UTF8String"));
        objc_msgSend(v2, "addObject:", v19);
        sub_100512E44((const char *)objc_msgSend(v19, "UTF8String"));
      }
      v12 = -[NSArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v12);
  }
  return v2;
}

id sub_100EC8158(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  NSString *v5;
  uint64_t v6;
  _QWORD *v7;
  NSString *v8;
  id v9;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 136))
    return 0;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    sub_1015E3AAC(v2);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(v3 + 104);
  if (*(char *)(v3 + 127) < 0)
    v4 = (_QWORD *)*v4;
  v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(v6 + 16);
  if (*(char *)(v6 + 39) < 0)
    v7 = (_QWORD *)*v7;
  v8 = -[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), "stringByAppendingPathComponent:", v5);
  v9 = objc_msgSend(CFSTR("/var/mobile/Library/Logs/CrashReporter/com.apple.locationd"), "stringByAppendingPathComponent:", v5);
  sub_100512FFC(-[NSString UTF8String](v8, "UTF8String"), (const char *)objc_msgSend(v9, "UTF8String"));
  sub_100512E44((const char *)objc_msgSend(v9, "UTF8String"));
  return v9;
}

uint64_t sub_100EC8238(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[19];
  uint64_t v10;
  double v11;
  char v12;

  sub_1015EB864(v9);
  v12 |= 1u;
  v11 = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC82C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC82D4(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[21];
  uint64_t v10;
  double v11;
  char v12;

  sub_1015EB864(v9);
  v12 |= 1u;
  v11 = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC835C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8370(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[28];
  uint64_t v10;
  double v11;
  char v12;

  sub_1015EB864(v9);
  v12 |= 1u;
  v11 = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC83F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC840C(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[29];
  uint64_t v10;
  double v11;
  char v12;

  sub_1015EB864(v9);
  v12 |= 1u;
  v11 = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC84A8(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[36];
  uint64_t v10;
  double v11;
  char v12;

  sub_1015EB864(v9);
  v12 |= 1u;
  v11 = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8544(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[78];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC85CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC85E0(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[105];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC867C(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[135];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8718(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[136];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC87A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC87B4(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[137];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC883C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8850(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[168];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC88D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC88EC(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[169];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8988(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[174];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8A24(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[175];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8AC0(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[176];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8B5C(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[289];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8BF8(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[343];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8C94(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[344];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8D30(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[346];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8DCC(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[381];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8E68(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[386];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8F04(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[389];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC8F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC8FA0(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[417];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  v6 = *a2;
  *a2 = 0;
  v7 = v10;
  v10 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101888B64(a1, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100EC9028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100EC903C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t *sub_100EC906C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100EC7D6C((uint64_t *)(v2 + 8), 0);
    operator delete();
  }
  return result;
}

void sub_100EC91E0(id a1)
{
  qword_102308ED0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLAvengerScannerSilo"));
}

void sub_100ECAA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[8];

  v8 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100ECAADC;
  v10[3] = &unk_102150F38;
  v10[4] = a2;
  v10[5] = a3;
  v9 = *(_QWORD *)(a1 + 32);
  v10[6] = a4;
  v10[7] = v9;
  dispatch_async(v8, v10);
}

void sub_100ECAADC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102190B80);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v10 = 68289794;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v3;
    v16 = 2114;
    v17 = v4;
    v18 = 2114;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerScanner: number of advertisement buffers query\", \"total\":%{public, location:escape_only}@, \"remaining\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x30u);
  }
  if (*(_QWORD *)(a1 + 48))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102190B80);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 48);
      v10 = 68289283;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2113;
      v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLAvengerScanner: Error querying num buffers available\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102190B80);
    }
    v8 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v9 = *(_QWORD *)(a1 + 48);
      v10 = 68289283;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2113;
      v15 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLAvengerScanner: Error querying num buffers available", "{\"msg%{public}.0s\":\"CLAvengerScanner: Error querying num buffers available\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 72), "setTotalAdvertisementBuffersAvailable:", objc_msgSend(*(id *)(a1 + 32), "unsignedIntegerValue"));
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + 24) = 1;
  }
}

void sub_100ECC7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  _Block_object_dispose(&a22, 8);
  v29 = a28;
  a28 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_100ECC838(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "stopAggressiveScan");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  result = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100ECD180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v44;

  if (a23 < 0)
    operator delete(__p);
  _Block_object_dispose(&a37, 8);
  v44 = a43;
  a43 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  _Unwind_Resume(a1);
}

id sub_100ECD20C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "stopCoexFriendlyAggressiveScan");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return objc_msgSend(*(id *)(a1 + 32), "clearLongAggressiveTimeoutBlockForClient:", *(_QWORD *)(a1 + 40));
}

id sub_100ECD260(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "downgradedDuringCoexFriendlyAggressiveDiscoveryScan");
  v3 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    objc_msgSend(*(id *)(v3 + 112), "longAggressiveScanCoexImpactedDuration");
    v5 = v4;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "longAggressiveScanNonCoexImpactedDuration");
    v7 = v5 - v6;
    v8 = 0.0;
    if (v7 > 0.0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "longAggressiveScanCoexImpactedDuration");
      v10 = v9;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "longAggressiveScanNonCoexImpactedDuration");
      v8 = v10 - v11;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102190B80);
    v12 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 1026;
      v23 = (int)v8;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerScanner: extending LongAggressiveScan due to downgrade\", \"remainingDuration\":%{public}d}", buf, 0x18u);
    }
    objc_msgSend(*(id *)(a1 + 32), "clearLongAggressiveTimeoutBlockForClient:", *(_QWORD *)(a1 + 40));
    v13 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100ECD468;
    v17[3] = &unk_102190B38;
    v17[4] = v13;
    return objc_msgSend(v13, "createLongAggressiveTimeoutBlockForClient:seconds:withBlock:", *(_QWORD *)(a1 + 40), (uint64_t)v8, v17);
  }
  else
  {
    objc_msgSend(*(id *)(v3 + 72), "stopCoexFriendlyAggressiveScan");
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v16 = *(_QWORD *)(v15 + 48);
    *(_QWORD *)(v15 + 48) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return objc_msgSend(*(id *)(a1 + 32), "clearLongAggressiveTimeoutBlockForClient:", *(_QWORD *)(a1 + 40));
  }
}

id sub_100ECD468(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "stopCoexFriendlyAggressiveScan");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return objc_msgSend(*(id *)(a1 + 32), "clearLongAggressiveTimeoutBlockForClient:", *(_QWORD *)(a1 + 40));
}

id sub_100ECDA7C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "stopHawkeyeLowEnergyScan");
}

uint64_t sub_100ECE314(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_100ECE538(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_100ECE864(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100ECE91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

void sub_100ECE9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

id sub_100ECEAC4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onAnalyticsTimerFired:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
}

void sub_100ECEE28(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100ECEE54(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_100ECEE80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int32x2_t v18;
  uint64_t v19;
  int32x2_t v20;
  __int128 v21;
  uint64_t v22;
  int32x2_t v23;
  _BYTE v24[64];
  _BYTE v25[256];
  _BYTE v26[8];
  int8x16_t v27;
  uint64_t v28;
  int32x2_t v29;
  int v30;
  char v31;
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  char v35;
  _BYTE v36[224];
  _BYTE v37[8];
  int8x16_t v38;
  uint64_t v39;
  int32x2_t v40;
  int v41;
  char v42;
  _BYTE v43[184];
  _BYTE v44[8];
  int8x16_t v45;
  uint64_t v46;
  int32x2_t v47;
  int v48;
  char v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  __int16 v53;
  _BYTE v54[8];
  uint64_t v55;
  int8x16_t v56;
  int32x2_t v57;
  int v58;
  char v59;

  sub_10162FBBC(a2);
  v4 = *(_DWORD *)(a2 + 244);
  *(int8x16_t *)(a2 + 72) = vextq_s8(*(int8x16_t *)(a1 + 80), *(int8x16_t *)(a1 + 80), 8uLL);
  v5 = *(int32x2_t *)(a1 + 132);
  *(_WORD *)(a2 + 241) = *(_WORD *)(a1 + 57);
  *(_QWORD *)(a2 + 228) = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 96);
  *(_BYTE *)(a2 + 238) = *(_BYTE *)(a1 + 129);
  *(_BYTE *)(a2 + 239) = *(_BYTE *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a2 + 176) = v6;
  *(_QWORD *)(a2 + 184) = v7;
  *(_BYTE *)(a2 + 237) = *(_BYTE *)(a1 + 920);
  *(_BYTE *)(a2 + 236) = *(_BYTE *)(a1 + 1092);
  v8 = *(_QWORD *)(a1 + 952);
  v9 = *(_QWORD *)(a1 + 944);
  v10 = *(_QWORD *)(a1 + 960);
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(a2 + 240) = *(_BYTE *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 992);
  v12 = *(_QWORD *)(a1 + 984);
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v12;
  *(int32x2_t *)&v13 = vrev64_s32(*(int32x2_t *)(a1 + 1096));
  *((int32x2_t *)&v13 + 1) = vrev64_s32(v5);
  *(int8x16_t *)(a2 + 192) = vextq_s8(*(int8x16_t *)(a1 + 112), *(int8x16_t *)(a1 + 112), 8uLL);
  *(_OWORD *)(a2 + 208) = v13;
  v14 = *(_QWORD *)(a1 + 1104);
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = v10;
  v15 = *(_QWORD *)(a1 + 1112);
  *(_DWORD *)(a2 + 244) = v4 | 0x7FFFFFF;
  *(_QWORD *)(a2 + 24) = v15;
  sub_10161405C((uint64_t)v54);
  v56 = vextq_s8(*(int8x16_t *)(a1 + 560), *(int8x16_t *)(a1 + 560), 8uLL);
  v55 = *(_QWORD *)(a1 + 576);
  v58 = *(_DWORD *)(a1 + 584);
  v59 |= 0xE7u;
  v57 = vrev64_s32(*(int32x2_t *)(a1 + 544));
  sub_10161258C((uint64_t)v50);
  v53 |= 0x78u;
  v16 = *(_OWORD *)(a1 + 592);
  v52 = *(_OWORD *)(a1 + 608);
  v51 = v16;
  sub_10161405C((uint64_t)v44);
  v17 = *(_QWORD *)(a1 + 216);
  v45 = vextq_s8(*(int8x16_t *)(a1 + 224), *(int8x16_t *)(a1 + 224), 8uLL);
  v48 = *(_DWORD *)(a1 + 240);
  v49 |= 0xE7u;
  v18 = vrev64_s32(*(int32x2_t *)(a1 + 200));
  v46 = v17;
  v47 = v18;
  sub_100ECF404(a1 + 248, (uint64_t)v43);
  sub_10161405C((uint64_t)v37);
  v19 = *(_QWORD *)(a1 + 424);
  v38 = vextq_s8(*(int8x16_t *)(a1 + 432), *(int8x16_t *)(a1 + 432), 8uLL);
  v41 = *(_DWORD *)(a1 + 448);
  v42 |= 0xE7u;
  v20 = vrev64_s32(*(int32x2_t *)(a1 + 408));
  v39 = v19;
  v40 = v20;
  sub_100ECF47C(a1 + 456, (uint64_t)v36);
  sub_10161132C((uint64_t)v32);
  v35 |= 0xFu;
  v21 = *(_OWORD *)(a1 + 176);
  v33 = *(_OWORD *)(a1 + 160);
  v34 = v21;
  sub_10161405C((uint64_t)v26);
  v22 = *(_QWORD *)(a1 + 648);
  v27 = vextq_s8(*(int8x16_t *)(a1 + 656), *(int8x16_t *)(a1 + 656), 8uLL);
  v30 = *(_DWORD *)(a1 + 672);
  v31 |= 0xE7u;
  v23 = vrev64_s32(*(int32x2_t *)(a1 + 632));
  v28 = v22;
  v29 = v23;
  sub_100ECF4CC(a1 + 680, (uint64_t)v25);
  sub_100ECF558(a1 + 1000, (uint64_t)v24);
  operator new();
}

void sub_100ECF37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  PB::Base *v63;
  uint64_t v64;

  PB::Base::~Base((PB::Base *)&a10);
  PB::Base::~Base((PB::Base *)&a18);
  PB::Base::~Base((PB::Base *)&a50);
  PB::Base::~Base((PB::Base *)&a57);
  PB::Base::~Base((PB::Base *)&a63);
  PB::Base::~Base((PB::Base *)&STACK[0x290]);
  PB::Base::~Base((PB::Base *)&STACK[0x2C8]);
  PB::Base::~Base((PB::Base *)(v64 - 256));
  PB::Base::~Base((PB::Base *)(v64 - 200));
  PB::Base::~Base((PB::Base *)(v64 - 104));
  sub_10162FD3C(v63);
  _Unwind_Resume(a1);
}

__n128 sub_100ECF404@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v3 = sub_101611794(a2);
  v4 = *(_DWORD *)(v3 + 176);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  v6 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v3 + 24) = v5;
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v3 + 80) = v6;
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 136);
  v8 = *(_OWORD *)(a1 + 88);
  v9 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v3 + 160) = v7;
  *(_OWORD *)(v3 + 112) = v8;
  *(_OWORD *)(v3 + 128) = v9;
  *(_DWORD *)(v3 + 176) = v4 | 0x1FFFAF;
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v3 + 96) = result;
  return result;
}

__n128 sub_100ECF47C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v3 = sub_101614EF0(a2);
  v4 = *(_DWORD *)(v3 + 216);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)a1;
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 48);
  result = *(__n128 *)(a1 + 64);
  *(__n128 *)(v3 + 136) = result;
  *(_OWORD *)(v3 + 88) = v5;
  *(_DWORD *)(v3 + 216) = v4 | 0x3FF00;
  *(_OWORD *)(v3 + 104) = v6;
  return result;
}

__n128 sub_100ECF4CC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  v3 = sub_101612D54(a2);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 24) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 56) = v5;
  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 88) = v6;
  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v3 + 120) = v7;
  v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v3 + 152) = v8;
  v9 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v3 + 184) = v9;
  v10 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v3 + 216) = *(_OWORD *)(a1 + 208);
  result = *(__n128 *)(a1 + 224);
  *(__n128 *)(v3 + 232) = result;
  *(_DWORD *)(v3 + 248) |= 0x3FFFFFFFu;
  *(_OWORD *)(v3 + 200) = v10;
  return result;
}

double sub_100ECF558@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  __int16 v5;
  uint64_t v6;

  v3 = sub_1016109E4(a2);
  result = *(double *)(a1 + 40);
  v5 = *(_WORD *)(v3 + 60);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 56);
  *(_WORD *)(v3 + 55) = *(_WORD *)(a1 + 1);
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(a1 + 32);
  *(_WORD *)(v3 + 53) = *(_WORD *)(a1 + 33);
  *(int8x16_t *)(v3 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  v6 = *(_QWORD *)(a1 + 24);
  *(_WORD *)(v3 + 60) = v5 | 0x7EF;
  *(_QWORD *)(v3 + 24) = v6;
  *(double *)(v3 + 32) = result;
  return result;
}

_QWORD *sub_100ECF5C4(_QWORD *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  void *v11[2];
  uint64_t v12;
  __int128 __p;
  uint64_t v14;
  uint64_t v15;

  if (*(char *)(a5 + 23) < 0)
  {
    sub_100115CE4(v11, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a5;
    v12 = *(_QWORD *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a5 + 24), *(_QWORD *)(a5 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a5 + 24);
    v14 = *(_QWORD *)(a5 + 40);
  }
  v15 = *(_QWORD *)(a5 + 48);
  sub_10005164C((uint64_t)a1, a2, a3, a4, (__int128 *)v11);
  *a1 = off_102190D30;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  *a1 = &off_102190BD0;
  return a1;
}

void sub_100ECF6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100ECF6F4(uint64_t a1)
{
  sub_100720438(a1);
  operator delete();
}

_QWORD *sub_100ECF718@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  void *__p[2];
  char v9;
  _BYTE v10[24];
  _BYTE *v11;

  v6[0] = off_102190DA8;
  v6[1] = sub_100ECF874;
  v6[2] = 0;
  v7 = v6;
  sub_1015A2E04(__p, "kCLConnectionMessageLocationPush");
  sub_100BB2494((uint64_t)v10, (uint64_t)v6);
  sub_100ED1078(a1, (unsigned __int8 *)__p, 1);
  v2 = v11;
  if (v11 == v10)
  {
    v3 = 4;
    v2 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100ECF828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;

  sub_1004E21A4((uint64_t)&a13);
  v14 = a12;
  if (a12 == &a9)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100ECF874(uint64_t a1, uint64_t a2)
{
  id v4;
  const __CFDictionary *Dictionary;
  NSObject *v6;
  uint64_t v7;
  id v8;
  const __CFString *v9;
  const __CFString *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  id v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  CLConnectionMessage *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD v34[8];
  std::__shared_weak_count *v35;
  CLConnectionMessage *v36;
  std::__shared_weak_count *v37;
  BOOL v38;
  uint8_t v39[16];
  uint8_t buf[8];
  _BYTE v41[10];
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  _BOOL4 v45;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  sub_1001C1D6C((int)v39, Dictionary);
  v38 = 0;
  if ((sub_1001E4874((uint64_t)v39, "kCLConnectionMessageSubscribeKey", &v38) & 1) != 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102190D78);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v41 = 2082;
      *(_QWORD *)&v41[2] = "";
      v42 = 2114;
      v43 = v7;
      v44 = 1026;
      v45 = v38;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush client attempted to subscribe\", \"client\":%{public, location:escape_only}@, \"subscribe\":%{public}hhd}", buf, 0x22u);
    }
    if (v38)
    {
      v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      v9 = (const __CFString *)objc_msgSend(*(id *)(a1 + 64), "bundleId");
      if (v9)
        v10 = v9;
      else
        v10 = &stru_1021D8FB8;
      sub_1007208BC(buf, (_QWORD *)(a1 + 8));
      v12 = *(_QWORD *)buf;
      v11 = *(std::__shared_weak_count **)v41;
      if (*(_QWORD *)v41)
      {
        v13 = (unint64_t *)(*(_QWORD *)v41 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
        do
          v17 = __ldaxr(v13);
        while (__stlxr(v17 - 1, v13));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v18 = *(std::__shared_weak_count **)v41;
        if (*(_QWORD *)v41)
        {
          v19 = (unint64_t *)(*(_QWORD *)v41 + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      v21 = objc_msgSend(*(id *)(a1 + 128), "silo");
      v22 = +[CLLocationPushRegistrar sharedRegistrar](CLLocationPushRegistrar, "sharedRegistrar");
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3321888768;
      v34[2] = sub_100ECFCB4;
      v34[3] = &unk_102190C58;
      v34[6] = a1;
      v34[7] = v12;
      v34[4] = v21;
      v35 = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v26 = *(CLConnectionMessage **)a2;
      v25 = *(std::__shared_weak_count **)(a2 + 8);
      v34[5] = v8;
      v36 = v26;
      v37 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      objc_msgSend(v22, "registerForPushToken:completion:", v10, v34);
      v29 = v37;
      if (v37)
      {
        v30 = (unint64_t *)&v37->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v35)
        std::__shared_weak_count::__release_weak(v35);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
    }
    else
    {
      sub_100ECFEC0((_QWORD *)a1, 0);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102190D78);
    v32 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v41 = 2082;
      *(_QWORD *)&v41[2] = "";
      v42 = 2114;
      v43 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush couldn't get value for kCLConnectionMessageSubscribeKey key for client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  sub_10011A5A8(v39);

}

void sub_100ECFC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  v24 = v22;
  sub_100261F44(v24);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  sub_10011A5A8(&a21);

  _Unwind_Resume(a1);
}

void sub_100ECFCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[7];
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3321888768;
  v16[2] = sub_100ECFDD0;
  v16[3] = &unk_102190C20;
  v17 = *(_OWORD *)(a1 + 48);
  v5 = *(std::__shared_weak_count **)(a1 + 64);
  v18 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = *(_QWORD *)(a1 + 40);
  v16[4] = a2;
  v16[5] = v8;
  v10 = *(_QWORD *)(a1 + 72);
  v9 = *(std::__shared_weak_count **)(a1 + 80);
  v16[6] = a3;
  v19 = v10;
  v20 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  objc_msgSend(v4, "async:", v16);
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
}

void sub_100ECFDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  uint64_t v18;

  sub_100261F44(v18);
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  _Unwind_Resume(a1);
}

void sub_100ECFDD0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v8 = *(_QWORD *)(a1 + 64);
      if (v8)
      {
        if (objc_msgSend(*(id *)(a1 + 32), "length", v8, v4))
        {
          *(_DWORD *)(v3 + 252) = 0;
          sub_100ECFEC0((_QWORD *)v3, 1);
        }
        objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("kCLConnectionMessagePushTokenKey"));
        objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), CFSTR("kCLConnectionMessageErrorKey"));
        CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 80));
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_100ECFEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100ECFEC0(_QWORD *a1, int a2)
{
  void *v4;
  NSNumber *v5;

  v4 = (void *)sub_1001FE40C(a1, (uint64_t)CFSTR("registrationState"));
  if (!a2)
  {
    if (!v4)
      return;
    v5 = 0;
    goto LABEL_7;
  }
  if (!v4 || (objc_msgSend(v4, "BOOLValue") & 1) == 0)
  {
    v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
LABEL_7:
    sub_100E539FC((uint64_t)a1, (uint64_t)CFSTR("registrationState"), (uint64_t)v5);
    sub_100E53AAC((uint64_t)a1);
    sub_100ED003C((uint64_t)a1);
  }
}

_QWORD *sub_100ECFF44(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_100ECFF88(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_100261F44(a1 + 80);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *sub_100ECFFC0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_100ED0004(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_100261F44(a1 + 72);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_100ED003C(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;

  if (!*(_BYTE *)(a1 + 144))
  {
    if (objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 15))
      v2 = objc_msgSend((id)sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("registrationState")), "BOOLValue");
    else
      v2 = 0;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102190D78);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 64);
      v6[0] = 68289538;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2114;
      v10 = v4;
      v11 = 1026;
      v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LocationPush checking topic should be registered \", \"client\":%{public, location:escape_only}@, \"shouldBeRegistered\":%{public}hhd}", (uint8_t *)v6, 0x22u);
    }
    v5 = *(_DWORD *)(a1 + 252);
    if (v2)
    {
      if (v5 != 1)
        sub_100ED0618(a1);
    }
    else if (v5 != 2)
    {
      sub_100ED02A4(a1);
    }
  }
}

_QWORD *sub_100ED01A0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "Push");
}

void sub_100ED01B4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102190D78);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2114;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush client did invalidate \", \"client\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
  }
  sub_100ED02A4(a1);
}

void sub_100ED02A4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const __CFString *v4;
  id v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  id v16;
  const __CFString *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  void (*v23)(uint64_t, char);
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint8_t buf[32];
  __int128 v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  void *v34[2];
  __int128 v35;
  void *v36[2];
  void *__p[2];
  __int128 v38;
  uint64_t v39;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102190D78);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush unregistering push client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v4 = (const __CFString *)objc_msgSend(*(id *)(a1 + 64), "bundleId");
  v5 = objc_msgSend(*(id *)(a1 + 128), "silo");
  sub_1007208BC(buf, (_QWORD *)(a1 + 8));
  v7 = *(_QWORD *)buf;
  v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      v12 = __ldaxr(v8);
    while (__stlxr(v12 - 1, v8));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v16 = +[CLLocationPushRegistrar sharedRegistrar](CLLocationPushRegistrar, "sharedRegistrar");
  v21 = _NSConcreteStackBlock;
  if (v4)
    v17 = v4;
  else
    v17 = &stru_1021D8FB8;
  v22 = 3321888768;
  v23 = sub_100ED0BE8;
  v24 = &unk_102190CC0;
  v25 = v5;
  v26 = a1;
  v27 = v7;
  v28 = v6;
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  objc_msgSend(v16, "setLocationPushesActive:forAppBundleIdentifier:completion:", 0, v17, &v21, COERCE_DOUBLE(3321888768));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor", v21, v22, v23, v24, v25, v26, v27, v28), "proxyForService:", CFSTR("CLClientManager"));
  v20 = *(void **)(a1 + 64);
  if (v20)
  {
    objc_msgSend(v20, "clientName");
  }
  else
  {
    v39 = 0;
    *(_OWORD *)__p = 0u;
    v38 = 0u;
    v35 = 0u;
    *(_OWORD *)v36 = 0u;
    v33 = 0u;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)v32 = 0u;
    v30 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  sub_100248320();
}

void sub_100ED05C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  std::__shared_weak_count *v17;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(exception_object);
}

void sub_100ED0618(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const __CFString *v4;
  id v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  id v16;
  const __CFString *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  void (*v23)(uint64_t, char);
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint8_t buf[32];
  __int128 v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  void *v34[2];
  __int128 v35;
  void *v36[2];
  void *__p[2];
  __int128 v38;
  uint64_t v39;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102190D78);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush registering push topic \", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v4 = (const __CFString *)objc_msgSend(*(id *)(a1 + 64), "bundleId");
  v5 = objc_msgSend(*(id *)(a1 + 128), "silo");
  sub_1007208BC(buf, (_QWORD *)(a1 + 8));
  v7 = *(_QWORD *)buf;
  v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      v12 = __ldaxr(v8);
    while (__stlxr(v12 - 1, v8));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v16 = +[CLLocationPushRegistrar sharedRegistrar](CLLocationPushRegistrar, "sharedRegistrar");
  v21 = _NSConcreteStackBlock;
  if (v4)
    v17 = v4;
  else
    v17 = &stru_1021D8FB8;
  v22 = 3321888768;
  v23 = sub_100ED0984;
  v24 = &unk_102190CC0;
  v25 = v5;
  v26 = a1;
  v27 = v7;
  v28 = v6;
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  objc_msgSend(v16, "setLocationPushesActive:forAppBundleIdentifier:completion:", 1, v17, &v21, COERCE_DOUBLE(3321888768));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor", v21, v22, v23, v24, v25, v26, v27, v28), "proxyForService:", CFSTR("CLClientManager"));
  v20 = *(void **)(a1 + 64);
  if (v20)
  {
    objc_msgSend(v20, "clientName");
  }
  else
  {
    v39 = 0;
    *(_OWORD *)__p = 0u;
    v38 = 0u;
    v35 = 0u;
    *(_OWORD *)v36 = 0u;
    v33 = 0u;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)v32 = 0u;
    v30 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  sub_100248320();
}

void sub_100ED0938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  std::__shared_weak_count *v17;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(exception_object);
}

void sub_100ED0984(uint64_t a1, char a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD v7[4];
  __int128 v8;
  std::__shared_weak_count *v9;
  char v10;

  v3 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_100ED0A30;
  v7[3] = &unk_102190C88;
  v8 = *(_OWORD *)(a1 + 40);
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v10 = a2;
  objc_msgSend(v3, "async:", v7);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void sub_100ED0A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(exception_object);
}

void sub_100ED0A30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102190D78);
        v6 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *(_QWORD *)(v3 + 64);
          v8 = *(unsigned __int8 *)(a1 + 56);
          v11[0] = 68289538;
          v11[1] = 0;
          v12 = 2082;
          v13 = "";
          v14 = 2114;
          v15 = v7;
          v16 = 1026;
          v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush registered push topic \", \"client\":%{public, location:escape_only}@, \"success\":%{public}hhd}", (uint8_t *)v11, 0x22u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t sub_100ED0B80(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100ED0BA4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sub_100ED0BB4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100ED0BD8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_100ED0BE8(uint64_t a1, char a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD v7[4];
  __int128 v8;
  std::__shared_weak_count *v9;
  char v10;

  v3 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_100ED0C94;
  v7[3] = &unk_102190C88;
  v8 = *(_OWORD *)(a1 + 40);
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v10 = a2;
  objc_msgSend(v3, "async:", v7);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void sub_100ED0C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(exception_object);
}

void sub_100ED0C94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102190D78);
        v6 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *(_QWORD *)(v3 + 64);
          v8 = *(unsigned __int8 *)(a1 + 56);
          v11[0] = 68289538;
          v11[1] = 0;
          v12 = 2082;
          v13 = "";
          v14 = 2114;
          v15 = v7;
          v16 = 1026;
          v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush unregistered push topic \", \"client\":%{public, location:escape_only}@, \"success\":%{public}hhd}", (uint8_t *)v11, 0x22u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

id sub_100ED0DE4(uint64_t a1)
{
  id v2;
  _QWORD *v3;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 64), "clientKey"), CFSTR("ClientKeyPath"));
  v3 = (_QWORD *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    v3 = (_QWORD *)*v3;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), CFSTR("SubscriptionStorageName"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 136)), CFSTR("AuthContext"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 252)), CFSTR("TopicRegistrationState"));
  return v2;
}

void sub_100ED0EAC(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100ED0ED8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102190DA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100ED0F14(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102190DA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100ED0F38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100ED0F88(a1 + 8, a2, a3);
}

uint64_t sub_100ED0F40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ED0F7C()
{
}

void sub_100ED0F88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100ED105C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100ED1078(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100ED10F0(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100ED10DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100ED10F0(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100ED1370(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100ED1358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100ED1370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100ED13E4(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100ED13CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100ED13E4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100ED143C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED1458(_DWORD *a1)
{
  NSObject *v1;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if ((*a1 - 2) >= 0xA)
    return *a1 == 1;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102190E48);
  v1 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#FenceMetrics Unexpected event type for metric", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102190E48);
    v4[0] = 0;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "#FenceMetrics Unexpected event type for metric", v4, 2);
    sub_100512490("Generic", 1, 0, 0, "static CLFenceAnalytics::LocationMonitorTriggerEventType CLFenceAnalytics::eventTypeFromNotification(const CLFenceManager_Type::Notification &)", "%s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100ED1600(uint64_t a1)
{
  uint64_t v1;
  double v2;
  BOOL v4;
  NSObject *v6;
  char *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 160);
  if ((v1 & 0x80) != 0)
    return 3;
  v2 = *(double *)(a1 + 96);
  v4 = v2 > 400.0 || *(_BYTE *)(a1 + 188) != 0 || *(_DWORD *)(a1 + 180) == 2;
  if (!v4 && (v1 & 0x20) == 0 && *(_QWORD *)(a1 + 232) == *(_QWORD *)(a1 + 224))
    return 0;
  if (v2 <= 0.0)
  {
    if (*(_QWORD *)(a1 + 232) == *(_QWORD *)(a1 + 224))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102190E48);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#FenceMetrics Unexpected fence type for metric", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102190E48);
        v8[0] = 0;
        v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "#FenceMetrics Unexpected fence type for metric", v8, 2);
        sub_100512490("Generic", 1, 0, 0, "static CLFenceAnalytics::LocationMonitorTriggerFenceType CLFenceAnalytics::fenceTypeFromFence(const CLFenceManager_Type::Fence &)", "%s\n", v7);
        if (v7 != (char *)buf)
          free(v7);
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 4;
    }
  }
  else if (v2 < 7000.0)
  {
    return 1;
  }
  else
  {
    return 2;
  }
}

uint64_t sub_100ED1810(uint64_t a1)
{
  __int128 v2;

  sub_100197040();
  *(_BYTE *)a1 = sub_100760428();
  *(_BYTE *)(a1 + 1) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)(a1 + 304) = v2;
  *(_OWORD *)(a1 + 320) = v2;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

uint64_t sub_100ED1884@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, CLMotionActivity *a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  int v21;
  uint64_t result;
  double v23;
  int32x2_t v24;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 21) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = 1000;
  *(_BYTE *)(a4 + 36) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 48) = -1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a4 + 56) = _Q1;
  *(_QWORD *)(a4 + 72) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 80) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 104) = 0;
  std::string::operator=((std::string *)a4, (const std::string *)a2);
  *(_DWORD *)(a4 + 48) = sub_100ED1458(a1);
  v15 = *(double *)(a2 + 80);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a2 + 88);
  v16 = sub_100124100(*(double *)(a2 + 72), v15, *(double *)(a2 + 500), *(double *)(a2 + 508)) - *(double *)(a2 + 88);
  v17 = *(double *)(a2 + 128);
  v18 = a5 - v17;
  v19 = v17 <= 0.0;
  v20 = -1.0;
  if (!v19)
    v20 = v18;
  *(double *)(a4 + 64) = v16;
  *(double *)(a4 + 72) = v20;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a4 + 84) = sub_100ED1600(a2);
  v21 = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a4 + 91) = (~(_BYTE)v21 & 5) == 0;
  *(_BYTE *)(a4 + 88) = (v21 & 0x10) != 0;
  *(_BYTE *)(a4 + 89) = *(_QWORD *)(a2 + 232) != *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a4 + 90) = *(_BYTE *)(a2 + 188);
  *(_BYTE *)(a4 + 92) = CLMotionActivity::isInVehicle(a3);
  *(_BYTE *)(a4 + 93) = CLMotionActivity::isDriving(a3);
  *(_BYTE *)(a4 + 94) = CLMotionActivity::isStatic(a3);
  result = CLMotionActivity::isWalking(a3);
  *(_BYTE *)(a4 + 95) = result;
  v23 = *(double *)(a2 + 152);
  if (v23 <= 0.0)
    v23 = -1.0;
  v24 = vrev64_s32(*(int32x2_t *)(a2 + 140));
  *(double *)(a4 + 96) = v23;
  *(int32x2_t *)(a4 + 104) = v24;
  return result;
}

void sub_100ED19EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100ED1A08(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  _QWORD v6[24];
  _QWORD v7[24];

  v6[0] = CFSTR("airplaneMode");
  v7[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 27));
  v6[1] = CFSTR("bundleId");
  v2 = *(uint64_t **)(a1 + 32);
  if (*((char *)v2 + 23) < 0)
    v2 = (uint64_t *)*v2;
  v7[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v6[2] = CFSTR("cellAvailable");
  v7[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 24));
  v6[3] = CFSTR("eventDistance");
  v7[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 64));
  v6[4] = CFSTR("eventFenceType");
  v7[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 84));
  v6[5] = CFSTR("eventLatency");
  v7[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(*(_QWORD *)(a1 + 32) + 72));
  v6[6] = CFSTR("eventMask");
  v7[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80));
  v6[7] = CFSTR("eventRadius");
  v7[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(*(_QWORD *)(a1 + 32) + 56));
  v6[8] = CFSTR("eventType");
  v7[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v6[9] = CFSTR("isConservativeFence");
  v7[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 91));
  v6[10] = CFSTR("isDriving");
  v7[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 93));
  v6[11] = CFSTR("isEmergencyFence");
  v7[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 88));
  v6[12] = CFSTR("isInVehicle");
  v7[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 92));
  v6[13] = CFSTR("isPedestrian");
  v7[13] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 95));
  v6[14] = CFSTR("isPolygonalFence");
  v7[14] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 89));
  v6[15] = CFSTR("isStatic");
  v7[15] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 94));
  v6[16] = CFSTR("isThrottledFence");
  v7[16] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 90));
  v6[17] = CFSTR("numAPsFenceBounded");
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 104);
  if (v3 < 1)
  {
    v4 = 0;
  }
  else if (v3 > 0x14)
  {
    if (v3 <= 0xB4)
      v4 = ((v3 - 21) >> 4) + 5;
    else
      v4 = 1;
  }
  else
  {
    v4 = ((v3 - 1) >> 2) + 1;
  }
  v7[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4);
  v6[18] = CFSTR("numAPsFence");
  v7[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104));
  v6[19] = CFSTR("numAPsTotal");
  v7[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v6[20] = CFSTR("passcodeLocked");
  v7[20] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 26));
  v6[21] = CFSTR("reachability");
  v7[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  v6[22] = CFSTR("sinceLastEvent");
  v7[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(*(_QWORD *)(a1 + 32) + 96));
  v6[23] = CFSTR("wifiAvailable");
  v7[23] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 25));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 24);
}

void sub_100ED1DD4(_BYTE *a1, char a2, char a3, char a4, _QWORD *a5)
{
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD v14[4];
  _BYTE v15[288];
  _QWORD v16[4];
  _BYTE v17[288];
  _QWORD __src[36];
  uint64_t buf;
  __int16 v20;
  const char *v21;
  __int16 v22;
  _BYTE v23[10];
  uint64_t v24;
  _BYTE v25[10];
  __int16 v26;
  _BYTE v27[10];
  uint64_t v28;
  _BYTE v29[10];
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  sub_100ED2320((uint64_t)a1, (uint64_t)__src);
  sub_100ED23CC((uint64_t)a1, a2, a3, a4, a5);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102190E48);
  v10 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68292355;
    v20 = 2082;
    v21 = "";
    v22 = 2049;
    *(_QWORD *)v23 = __src[0];
    *(_WORD *)&v23[8] = 2049;
    v24 = __src[1];
    *(_WORD *)v25 = 2049;
    *(_QWORD *)&v25[2] = __src[2];
    v26 = 2049;
    *(_QWORD *)v27 = __src[3];
    *(_WORD *)&v27[8] = 2049;
    v28 = __src[4];
    *(_WORD *)v29 = 2049;
    *(_QWORD *)&v29[2] = __src[5];
    v30 = 2049;
    v31 = __src[6];
    v32 = 2049;
    v33 = __src[9];
    v34 = 2049;
    v35 = __src[7];
    v36 = 2049;
    v37 = __src[8];
    v38 = 2049;
    v39 = __src[10];
    v40 = 2049;
    v41 = __src[11];
    v42 = 2049;
    v43 = __src[12];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceMetrics, heartbeat,1,\", \"wifiScans\":%{private}lld, \"epnoCalc\":%{private}lld, \"epnoEntry\":%{private}lld, \"epnoExit\":%{private}lld, \"wakes\":%{private}lld, \"assertions\":%{private}lld, \"timers\":%{private}lld, \"gpsDenied\":%{private}lld, \"gpsSessions\":%{private}lld, \"gpsDuration\":\"%{private}.5f\", \"wdogArmed\":%{private}lld, \"wdogFired\":%{private}lld, \"wdogLong\":%{private}lld}", (uint8_t *)&buf, 0x94u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102190E48);
  }
  v11 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68291587;
    v20 = 2082;
    v21 = "";
    v22 = 1026;
    *(_DWORD *)v23 = LOBYTE(__src[13]);
    *(_WORD *)&v23[4] = 1026;
    *(_DWORD *)&v23[6] = BYTE1(__src[13]);
    LOWORD(v24) = 1026;
    *(_DWORD *)((char *)&v24 + 2) = BYTE2(__src[13]);
    HIWORD(v24) = 1026;
    *(_DWORD *)v25 = BYTE3(__src[13]);
    *(_WORD *)&v25[4] = 1026;
    *(_DWORD *)&v25[6] = BYTE4(__src[13]);
    v26 = 1026;
    *(_DWORD *)v27 = BYTE5(__src[13]);
    *(_WORD *)&v27[4] = 1026;
    *(_DWORD *)&v27[6] = BYTE6(__src[13]);
    LOWORD(v28) = 1025;
    *(_DWORD *)((char *)&v28 + 2) = HIBYTE(__src[13]);
    HIWORD(v28) = 1025;
    *(_DWORD *)v29 = LOBYTE(__src[14]);
    *(_WORD *)&v29[4] = 1025;
    *(_DWORD *)&v29[6] = BYTE1(__src[14]);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceMetrics, heartbeat,2,\", \"locEnabled\":%{public}hhd, \"locToggled\":%{public}hhd, \"wifiEnabled\":%{public}hhd, \"wifiToggled\":%{public}hhd, \"airplaneEnabled\":%{public}hhd, \"airplaneToggled\":%{public}hhd, \"anyFences\":%{public}hhd, \"anyFineFences\":%{private}hhd, \"anyLargeFences\":%{private}hhd, \"anyEmergencyFences\":%{private}hhd}", (uint8_t *)&buf, 0x4Eu);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102190E48);
  }
  v12 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68292355;
    v20 = 2082;
    v21 = "";
    v22 = 2049;
    *(_QWORD *)v23 = __src[15];
    *(_WORD *)&v23[8] = 2049;
    v24 = __src[16];
    *(_WORD *)v25 = 2049;
    *(_QWORD *)&v25[2] = __src[17];
    v26 = 2049;
    *(_QWORD *)v27 = __src[18];
    *(_WORD *)&v27[8] = 2049;
    v28 = __src[19];
    *(_WORD *)v29 = 2049;
    *(_QWORD *)&v29[2] = __src[20];
    v30 = 2049;
    v31 = __src[21];
    v32 = 2049;
    v33 = __src[22];
    v34 = 2049;
    v35 = __src[23];
    v36 = 2049;
    v37 = __src[24];
    v38 = 2049;
    v39 = __src[25];
    v40 = 2049;
    v41 = __src[26];
    v42 = 2049;
    v43 = __src[27];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceMetrics, heartbeat,3,\", \"fences\":%{private}lld, \"fenceAdditions\":%{private}lld, \"fenceRemovals\":%{private}lld, \"fenceEntries\":%{private}lld, \"fenceExits\":%{private}lld, \"handoffFenceEntries\":%{private}lld, \"handoffFenceExits\":%{private}lld, \"locClient\":%{private}lld, \"locGps\":%{private}lld, \"locIndoor\":%{private}lld, \"locWifi2\":%{private}lld, \"locWifi\":%{private}lld, \"locCell\":%{private}lld}", (uint8_t *)&buf, 0x94u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102190E48);
  }
  v13 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68291075;
    v20 = 2082;
    v21 = "";
    v22 = 2049;
    *(_QWORD *)v23 = __src[28];
    *(_WORD *)&v23[8] = 2049;
    v24 = __src[29];
    *(_WORD *)v25 = 2049;
    *(_QWORD *)&v25[2] = __src[30];
    v26 = 2049;
    *(_QWORD *)v27 = __src[31];
    *(_WORD *)&v27[8] = 2049;
    v28 = __src[32];
    *(_WORD *)v29 = 2049;
    *(_QWORD *)&v29[2] = __src[33];
    v30 = 2049;
    v31 = __src[34];
    v32 = 2049;
    v33 = __src[35];
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceMetrics, heartbeat,4,\", \"loiMatchAttempts\":%{private}lld, \"loiMatchErrors\":%{private}lld, \"loiMatchNoMatches\":%{private}lld, \"loiMatchMatches\":%{private}lld, \"loiRadiusMin\":%{private}lld, \"loiRadiusMax\":%{private}lld, \"loiCenterRefinementMin\":%{private}lld, \"loiCenterRefinementMax\":%{private}lld}", (uint8_t *)&buf, 0x62u);
  }
  if (*a1)
  {
    if (!a1[1])
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100ED24FC;
      v16[3] = &unk_102190E28;
      memcpy(v17, __src, sizeof(v17));
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.geofence.heartbeat"), v16);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100ED2960;
      v14[3] = &unk_102190E28;
      memcpy(v15, __src, sizeof(v15));
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.geofence.loiMatching"), v14);
    }
  }
}

__n128 sub_100ED2320(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 48) = v2;
  *(_QWORD *)(a2 + 56) = v3;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 112);
  *(_WORD *)(a2 + 112) = *(_WORD *)(a1 + 120);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a2 + 216) = *(_QWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 304);
  result = *(__n128 *)(a1 + 320);
  *(__n128 *)(a2 + 272) = result;
  return result;
}

__n128 sub_100ED23CC(uint64_t a1, char a2, char a3, char a4, _QWORD *a5)
{
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;
  double v9;
  double *v10;
  double *v11;
  BOOL v12;
  __n128 result;

  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_BYTE *)(a1 + 112) = a2;
  *(_BYTE *)(a1 + 113) = 0;
  *(_BYTE *)(a1 + 114) = a3;
  *(_BYTE *)(a1 + 115) = 0;
  *(_BYTE *)(a1 + 116) = a4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 117) = 0;
  *(_BYTE *)(a1 + 121) = 0;
  v7 = (double *)*a5;
  v5 = (double *)(a5 + 1);
  v6 = v7;
  if (v7 != v5)
  {
    v8 = 0;
    do
    {
      v9 = v6[16];
      if (v9 > 400.0
        || *((_BYTE *)v6 + 220)
        || *((_DWORD *)v6 + 53) == 2
        || *((_QWORD *)v6 + 33) != *((_QWORD *)v6 + 32)
        || ((_BYTE)v6[24] & 0x20) != 0)
      {
        if (v9 >= 7000.0)
          *(_BYTE *)(a1 + 120) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 119) = 1;
      }
      if (((_BYTE)v6[24] & 0x10) != 0)
        *(_BYTE *)(a1 + 121) = 1;
      v10 = (double *)*((_QWORD *)v6 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(double **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (double *)*((_QWORD *)v6 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      ++v8;
      v6 = v11;
    }
    while (v11 != v5);
    *(_QWORD *)(a1 + 128) = v8;
    *(_BYTE *)(a1 + 118) = 1;
  }
  *(_OWORD *)(a1 + 216) = 0uLL;
  *(_OWORD *)(a1 + 200) = 0uLL;
  *(_OWORD *)(a1 + 184) = 0uLL;
  *(_OWORD *)(a1 + 168) = 0uLL;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = 0uLL;
  *(_OWORD *)(a1 + 272) = 0uLL;
  *(_OWORD *)(a1 + 288) = 0uLL;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(a1 + 304) = result;
  *(__n128 *)(a1 + 320) = result;
  return result;
}

NSDictionary *sub_100ED24FC(uint64_t a1)
{
  _QWORD v3[36];
  _QWORD v4[36];

  v3[0] = CFSTR("wifiScans");
  v4[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 32));
  v3[1] = CFSTR("epnoCalculations");
  v4[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 40));
  v3[2] = CFSTR("epnoEntryEvents");
  v4[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 48));
  v3[3] = CFSTR("epnoExitEvents");
  v4[3] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 56));
  v3[4] = CFSTR("wakes");
  v4[4] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 64));
  v3[5] = CFSTR("assertions");
  v4[5] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 72));
  v3[6] = CFSTR("setTimers");
  v4[6] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 80));
  v3[7] = CFSTR("gpsDenied");
  v4[7] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 104));
  v3[8] = CFSTR("gpsSessions");
  v4[8] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 88));
  v3[9] = CFSTR("gpsDuration");
  v4[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 96));
  v3[10] = CFSTR("watchdogsArmed");
  v4[10] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 112));
  v3[11] = CFSTR("watchdogsFired");
  v4[11] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 120));
  v3[12] = CFSTR("watchdogsLong");
  v4[12] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 128));
  v3[13] = CFSTR("locationEnabled");
  v4[13] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 136));
  v3[14] = CFSTR("locationToggled");
  v4[14] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 137));
  v3[15] = CFSTR("wifiEnabled");
  v4[15] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 138));
  v3[16] = CFSTR("wifiToggled");
  v4[16] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 139));
  v3[17] = CFSTR("airplaneEnabled");
  v4[17] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 140));
  v3[18] = CFSTR("airplaneToggled");
  v4[18] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 141));
  v3[19] = CFSTR("anyFences");
  v4[19] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 142));
  v3[20] = CFSTR("anyFineFences");
  v4[20] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 143));
  v3[21] = CFSTR("anyLargeFences");
  v4[21] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 144));
  v3[22] = CFSTR("anyEmergencyFences");
  v4[22] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 145));
  v3[23] = CFSTR("fences");
  v4[23] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 152));
  v3[24] = CFSTR("fenceAdditions");
  v4[24] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 160));
  v3[25] = CFSTR("fenceRemovals");
  v4[25] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 168));
  v3[26] = CFSTR("fenceEntries");
  v4[26] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 176));
  v3[27] = CFSTR("fenceExits");
  v4[27] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 184));
  v3[28] = CFSTR("fenceHandoffEntries");
  v4[28] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 192));
  v3[29] = CFSTR("fenceHandoffExits");
  v4[29] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 200));
  v3[30] = CFSTR("locationsClient");
  v4[30] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 208));
  v3[31] = CFSTR("locationsGps");
  v4[31] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 216));
  v3[32] = CFSTR("locationsIndoor");
  v4[32] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 224));
  v3[33] = CFSTR("locationsWifi2");
  v4[33] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 232));
  v3[34] = CFSTR("locationsWifi");
  v4[34] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 240));
  v3[35] = CFSTR("locationsCell");
  v4[35] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 248));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 36);
}

NSDictionary *sub_100ED2960(_QWORD *a1)
{
  _QWORD v3[8];
  _QWORD v4[8];

  v3[0] = CFSTR("loiMatchAttempts");
  v4[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[32]);
  v3[1] = CFSTR("loiMatchErrors");
  v4[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[33]);
  v3[2] = CFSTR("loiMatchNoMatches");
  v4[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[34]);
  v3[3] = CFSTR("loiMatchMatches");
  v4[3] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[35]);
  v3[4] = CFSTR("loiRadiusMin");
  v4[4] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[36]);
  v3[5] = CFSTR("loiRadiusMax");
  v4[5] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[37]);
  v3[6] = CFSTR("loiCenterRefinementMin");
  v4[6] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[38]);
  v3[7] = CFSTR("loiCenterRefinementMax");
  v4[7] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[39]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 8);
}

uint64_t sub_100ED2AAC(uint64_t result)
{
  ++*(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_100ED2ABC(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t sub_100ED2ACC(uint64_t result)
{
  ++*(_QWORD *)(result + 32);
  return result;
}

uint64_t sub_100ED2ADC(uint64_t result)
{
  ++*(_QWORD *)(result + 40);
  return result;
}

uint64_t sub_100ED2AEC(uint64_t result)
{
  ++*(_QWORD *)(result + 48);
  return result;
}

uint64_t sub_100ED2AFC(uint64_t result)
{
  ++*(_QWORD *)(result + 56);
  return result;
}

uint64_t sub_100ED2B0C(uint64_t result)
{
  ++*(_QWORD *)(result + 64);
  return result;
}

double sub_100ED2B1C(uint64_t a1, double a2)
{
  double result;

  ++*(_QWORD *)(a1 + 72);
  result = *(double *)(a1 + 80) + a2;
  *(double *)(a1 + 80) = result;
  return result;
}

uint64_t sub_100ED2B38(uint64_t result)
{
  ++*(_QWORD *)(result + 88);
  return result;
}

uint64_t sub_100ED2B48(uint64_t result, double a2)
{
  ++*(_QWORD *)(result + 96);
  if (a2 > 960.0)
    ++*(_QWORD *)(result + 104);
  return result;
}

uint64_t sub_100ED2B74(uint64_t result, char a2)
{
  *(_BYTE *)(result + 114) = a2;
  *(_BYTE *)(result + 115) = 1;
  return result;
}

uint64_t sub_100ED2B84(uint64_t result, char a2)
{
  *(_BYTE *)(result + 116) = a2;
  *(_BYTE *)(result + 117) = 1;
  return result;
}

int64x2_t *sub_100ED2B94(int64x2_t *result, uint64_t a2)
{
  double v2;
  BOOL v4;

  result[8] = vaddq_s64(result[8], vdupq_n_s64(1uLL));
  result[7].i8[6] = 1;
  v2 = *(double *)(a2 + 96);
  v4 = v2 > 400.0 || *(_BYTE *)(a2 + 188) != 0 || *(_DWORD *)(a2 + 180) == 2;
  if (v4 || *(_QWORD *)(a2 + 232) != *(_QWORD *)(a2 + 224) || (*(_BYTE *)(a2 + 160) & 0x20) != 0)
  {
    if (v2 >= 7000.0)
      result[7].i8[8] = 1;
  }
  else
  {
    result[7].i8[7] = 1;
  }
  if ((*(_BYTE *)(a2 + 160) & 0x10) != 0)
    result[7].i8[9] = 1;
  return result;
}

void sub_100ED2C24(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  ++*(_QWORD *)(a1 + 144);
  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
  {
    *(_QWORD *)(a1 + 128) = v1 - 1;
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102190E48);
    v2 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Something went wrong with num fences", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102190E48);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "Something went wrong with num fences", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceAnalytics::countFenceRemovals(const CLFenceManager_Type::Fence &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

uint64_t sub_100ED2DC8(uint64_t result)
{
  ++*(_QWORD *)(result + 152);
  return result;
}

uint64_t sub_100ED2DD8(uint64_t result)
{
  ++*(_QWORD *)(result + 160);
  return result;
}

uint64_t sub_100ED2DE8(uint64_t result)
{
  ++*(_QWORD *)(result + 168);
  return result;
}

uint64_t sub_100ED2DF8(uint64_t result)
{
  ++*(_QWORD *)(result + 176);
  return result;
}

uint64_t sub_100ED2E08(uint64_t result)
{
  ++*(_QWORD *)(result + 232);
  return result;
}

uint64_t sub_100ED2E18(uint64_t result)
{
  ++*(_QWORD *)(result + 240);
  return result;
}

uint64_t sub_100ED2E28(uint64_t result)
{
  ++*(_QWORD *)(result + 248);
  return result;
}

uint64_t sub_100ED2E38(uint64_t result)
{
  ++*(_QWORD *)(result + 264);
  return result;
}

uint64_t sub_100ED2E48(uint64_t result)
{
  ++*(_QWORD *)(result + 256);
  return result;
}

__n128 sub_100ED2E58(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 232);
  result = *(__n128 *)(a1 + 248);
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 264);
  return result;
}

double sub_100ED2E74(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 264) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  return result;
}

uint64_t sub_100ED2E88(_DWORD *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  void **v17;
  uint64_t v18;
  NSDictionary *(*v19)(uint64_t);
  void *v20;
  _DWORD *v21;
  _DWORD v22[2];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;

  if (qword_1022A02C0 != -1)
    dispatch_once(&qword_1022A02C0, &stru_102190E68);
  v2 = qword_1022A02C8;
  if (os_log_type_enabled((os_log_t)qword_1022A02C8, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[10];
    v4 = a1[11];
    v5 = a1[12];
    v6 = a1[13];
    v7 = a1[14];
    *(_DWORD *)buf = 67110144;
    v32 = v3;
    v33 = 1024;
    v34 = v4;
    v35 = 1024;
    v36 = v5;
    v37 = 1024;
    v38 = v6;
    v39 = 1024;
    v40 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, submitMetrics, miloVsGpsStatus, %d, homeLoiProbabilityPercentage, %u, distanceToFenceBoundary, %d, fenceRadius, %u, gpsHorizontalAccuracy, %d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02C0 != -1)
      dispatch_once(&qword_1022A02C0, &stru_102190E68);
    v9 = a1[10];
    v10 = a1[11];
    v11 = a1[12];
    v12 = a1[13];
    v13 = a1[14];
    v22[0] = 67110144;
    v22[1] = v9;
    v23 = 1024;
    v24 = v10;
    v25 = 1024;
    v26 = v11;
    v27 = 1024;
    v28 = v12;
    v29 = 1024;
    v30 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02C8, 2, "Fence: MiLo, submitMetrics, miloVsGpsStatus, %d, homeLoiProbabilityPercentage, %u, distanceToFenceBoundary, %d, fenceRadius, %u, gpsHorizontalAccuracy, %d", v22, 32, v16, (_DWORD)v17, v18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "static void CLFenceAnalytics::submitMetrics(CLFenceAnalytics::HomeLoiExitMetrics &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v17 = _NSConcreteStackBlock;
  v18 = 3221225472;
  v19 = sub_100ED30D0;
  v20 = &unk_102131FE8;
  v21 = a1;
  return AnalyticsSendEventLazy(CFSTR("com.apple.clx.geofence.FenceMiLoHomeLoiExitMismatch"), &v17);
}

NSDictionary *sub_100ED30D0(uint64_t a1)
{
  _QWORD v3[5];
  _QWORD v4[5];

  v3[0] = CFSTR("miLoVsGpsHomeLoiExitStatus");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v3[1] = CFSTR("miLoHomeLoiProbabilityPercentage");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v3[2] = CFSTR("distanceToFenceBoundary");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v3[3] = CFSTR("fenceRadius");
  v4[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  v3[4] = CFSTR("gpsHorizontalAccuracy");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 5);
}

uint64_t sub_100ED31DC(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 272);
  if (v1 <= 0x62)
    *(_QWORD *)(result + 272) = v1 + 1;
  return result;
}

uint64_t sub_100ED31F4(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 280);
  if (v1 <= 0x62)
    *(_QWORD *)(result + 280) = v1 + 1;
  return result;
}

uint64_t sub_100ED320C(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 288);
  if (v1 <= 0x62)
    *(_QWORD *)(result + 288) = v1 + 1;
  return result;
}

_QWORD *sub_100ED3224(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  v3 = result[37];
  if (v3 <= 0x62)
    result[37] = v3 + 1;
  v4 = result[39];
  if (v4 < a2 || v4 == -1)
    result[39] = a2;
  v6 = result[38];
  if (v6 > a2 || v6 == -1)
    result[38] = a2;
  v8 = result[41];
  if (v8 < a3 || v8 == -1)
    result[41] = a3;
  v10 = result[40];
  if (v10 > a3 || v10 == -1)
    result[40] = a3;
  return result;
}

uint64_t sub_100ED3294(uint64_t a1, uint64_t a2, double *a3, __int128 *a4, CLMotionActivity *a5, uint64_t a6, uint64_t a7, char a8, double a9, char a10, char a11)
{
  __int128 v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  double v25;
  BOOL v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  float v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  __int128 v45;

  *(double *)a1 = a9;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v20 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 8) = v20;
  }
  *(_DWORD *)(a1 + 32) = sub_100ED35F0(*(unsigned int *)a3);
  v21 = sub_100ED379C(a2);
  v22 = *(_DWORD *)(a2 + 168);
  v23 = *(_DWORD *)(a2 + 172) - 1;
  if (v23 >= 4)
    v23 = -1;
  *(_DWORD *)(a1 + 36) = v21;
  *(_DWORD *)(a1 + 40) = v23;
  if (v22 == 1)
    v24 = 0;
  else
    v24 = -1;
  if (v22 == 2)
    v24 = 1;
  *(_DWORD *)(a1 + 44) = v24;
  v25 = *(double *)(a2 + 88);
  v26 = v25 <= 0.0 && v21 == 4;
  v27 = (int)vcvtpd_s64_f64(v25 * 0.1);
  if (v26)
    v27 = 0;
  *(_QWORD *)(a1 + 48) = v27;
  *(_QWORD *)(a1 + 56) = sub_100ED3850(a2);
  *(_DWORD *)(a1 + 64) = sub_100ED38A8(a5);
  v28 = *a4;
  v29 = a4[1];
  v30 = a4[2];
  *(_OWORD *)(a1 + 120) = a4[3];
  *(_OWORD *)(a1 + 104) = v30;
  *(_OWORD *)(a1 + 88) = v29;
  *(_OWORD *)(a1 + 72) = v28;
  v31 = a4[4];
  v32 = a4[5];
  v33 = a4[6];
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a4 + 14);
  *(_OWORD *)(a1 + 168) = v33;
  *(_OWORD *)(a1 + 152) = v32;
  *(_OWORD *)(a1 + 136) = v31;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)a4;
  *(_BYTE *)(a1 + 193) = a8;
  *(_BYTE *)(a1 + 194) = a10;
  *(_BYTE *)(a1 + 195) = a11;
  v34 = -1.0;
  v35 = -1.0;
  if (a9 > 0.0)
  {
    v36 = a3[7];
    if (v36 > 0.0)
      v35 = a9 - v36;
  }
  *(double *)(a1 + 200) = v35;
  *(_DWORD *)(a1 + 208) = sub_100ED3910(*((_DWORD *)a3 + 16));
  if (a9 > 0.0)
  {
    v37 = a3[5];
    if (v37 > 0.0)
      v34 = a9 - v37;
  }
  *(double *)(a1 + 216) = v34;
  *(_DWORD *)(a1 + 224) = sub_100ED3910(*((_DWORD *)a3 + 12));
  *(_DWORD *)(a1 + 228) = sub_100ED3910(*(_DWORD *)(a6 + 96));
  v38 = *(double *)(a6 + 20);
  if (v38 >= 0.0)
  {
    if (v38 <= 200.0)
    {
      v40 = v38 * 0.1;
      v39 = (int)vcvtps_s32_f32(v40);
    }
    else if (v38 <= 400.0)
    {
      v39 = 21;
    }
    else if (v38 <= 2000.0)
    {
      v39 = 22;
    }
    else
    {
      v39 = 23;
      if (v38 > 7000.0)
        v39 = 24;
    }
  }
  else
  {
    v39 = -1;
  }
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = v39;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  sub_10055B604((_QWORD *)(a1 + 240), *(const void **)a7, *(_QWORD *)(a7 + 8), 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2));
  *(_BYTE *)(a1 + 264) = 0;
  v41 = sub_100ED4364(a1, *(_DWORD *)(a1 + 32), a2);
  if (v41 == -1.0)
  {
    v42 = *(double *)(a1 + 216);
  }
  else
  {
    *(_BYTE *)(a1 + 264) = 1;
    v42 = a9 - v41;
    if (*(double *)(a1 + 216) < v42)
      v42 = *(double *)(a1 + 216);
  }
  *(double *)(a1 + 272) = v42;
  *(double *)(a1 + 280) = sub_10016F4A8((double *)(a6 + 4), a2, (double *)(a1 + 320));
  v43 = sub_10016F4A8((double *)(a6 + 4), a2, (double *)(a1 + 320));
  *(double *)(a1 + 288) = v43 - sub_10016F694(a2);
  *(_QWORD *)(a1 + 296) = -1;
  v44 = *(_QWORD *)(a2 + 140);
  *(_QWORD *)&v45 = (int)v44;
  *((_QWORD *)&v45 + 1) = SHIDWORD(v44);
  *(_OWORD *)(a1 + 304) = v45;
  sub_1002433B8(a1 + 320);
  return a1;
}

void sub_100ED35BC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED35F0(uint64_t result)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if ((result - 2) < 2)
    goto LABEL_4;
  if ((_DWORD)result == 1)
    return result;
  if ((_DWORD)result != -1)
    return 0;
LABEL_4:
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102190E48);
  v1 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "Event type not valid", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102190E48);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Event type not valid", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "static GeofenceMetric::GeofenceMetricEventType GeofenceMetric::eventTypeFromStatus(const CLFenceManager_Type::FenceStatus)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100ED379C(uint64_t a1)
{
  uint64_t v2;
  double v3;

  if (*(_QWORD *)(a1 + 232) != *(_QWORD *)(a1 + 224))
    return 4;
  v2 = *(_QWORD *)(a1 + 160);
  if ((v2 & 0x20) != 0)
    return 7;
  if ((v2 & 0x80) != 0)
    return 3;
  if (*(_BYTE *)(a1 + 176))
    return 5;
  if ((~(_BYTE)v2 & 5) == 0)
    return 6;
  v3 = *(double *)(a1 + 96);
  if (v3 <= 400.0 && *(_BYTE *)(a1 + 188) == 0 && *(_DWORD *)(a1 + 180) != 2)
    return 0;
  if (v3 >= 7000.0)
    return 2;
  if (*(_BYTE *)(a1 + 188))
    return 8;
  return 1;
}

uint64_t sub_100ED3850(uint64_t a1)
{
  double v2;
  BOOL v3;
  signed int v4;

  v2 = sub_10016F694(a1);
  v3 = sub_100ED379C(a1) == 4 && v2 <= 0.0;
  v4 = vcvtpd_s64_f64(v2 * 0.1);
  if (v3)
    return 0;
  else
    return v4;
}

uint64_t sub_100ED38A8(CLMotionActivity *a1)
{
  if ((CLMotionActivity::isStatic(a1) & 1) != 0)
    return 0;
  if ((CLMotionActivity::isWalking(a1) & 1) != 0)
    return 1;
  if ((CLMotionActivity::isDriving(a1) & 1) != 0)
    return 3;
  if (CLMotionActivity::isInVehicle(a1))
    return 2;
  return 0xFFFFFFFFLL;
}

uint64_t sub_100ED3910(int a1)
{
  if ((a1 - 1) > 0xC)
    return 0xFFFFFFFFLL;
  else
    return dword_101C2D7EC[a1 - 1];
}

uint64_t sub_100ED3934(uint64_t a1, uint64_t a2, double *a3, __int128 *a4, CLMotionActivity *a5, uint64_t a6, uint64_t a7, char a8, double a9, char a10, char a11)
{
  return sub_100ED3294(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_100ED3948(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  NSObject *v5;
  _QWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  double v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  double v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  double v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  double v36;
  double v37;
  _BOOL4 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  float64x2_t v44;
  int8x8_t v50;
  unsigned int v51;
  float64x2_t v52;
  int v53;
  double v55;
  double v56;
  _QWORD v57[7];
  int v58;
  uint8_t buf[4];
  int v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  double v64;
  __int16 v65;
  int v66;
  __int16 v67;
  _BYTE v68[10];
  _BYTE v69[32];
  _BYTE v70[20];
  _BYTE v71[10];
  __int16 v72;
  _BOOL4 v73;
  __int16 v74;
  _BOOL4 v75;
  __int16 v76;
  _BOOL4 v77;
  __int16 v78;
  _BOOL4 v79;

  v2 = a1 + 72;
  v55 = sub_100D63A24(a1 + 72, (double *)a1, (double *)(a1 + 168));
  v56 = sub_100D63A24(v2, (double *)a1, (double *)(a1 + 80));
  v3 = -1.0;
  if (v56 != -1.0)
  {
    v4 = sub_100D63A24(v2, (double *)a1, (double *)(a1 + 88));
    if (v4 == -1.0)
      v3 = -1.0;
    else
      v3 = v4 - v56;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102190E48);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v6 = *(_QWORD **)v6;
    v7 = *(_DWORD *)(a1 + 32);
    v8 = *(_DWORD *)(a1 + 36);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = 10 * *(_QWORD *)(a1 + 48);
    v12 = 10 * *(_QWORD *)(a1 + 56);
    v13 = *(unsigned __int8 *)(a1 + 264);
    v14 = *(_QWORD *)(a1 + 272);
    v16 = *(_QWORD *)(a1 + 304);
    v15 = *(_QWORD *)(a1 + 312);
    *(_DWORD *)buf = 68291843;
    v60 = 0;
    v61 = 2082;
    v62 = "";
    v63 = 2081;
    v64 = *(double *)&v6;
    v65 = 1025;
    v66 = v7;
    v67 = 1025;
    *(_DWORD *)v68 = v8;
    *(_WORD *)&v68[4] = 1025;
    *(_DWORD *)&v68[6] = v9;
    *(_WORD *)v69 = 1025;
    *(_DWORD *)&v69[2] = v10;
    *(_WORD *)&v69[6] = 2049;
    *(_QWORD *)&v69[8] = v11;
    *(_WORD *)&v69[16] = 2049;
    *(_QWORD *)&v69[18] = v12;
    *(_WORD *)&v69[26] = 1025;
    *(_DWORD *)&v69[28] = v13;
    *(_WORD *)v70 = 2049;
    *(_QWORD *)&v70[2] = v14;
    *(_WORD *)&v70[10] = 2049;
    *(_QWORD *)&v70[12] = v16;
    *(_WORD *)v71 = 2049;
    *(_QWORD *)&v71[2] = v15;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"FenceMetric, geofencemetric,1\", \"bundleId\":%{private, location:escape_only}s, \"eventType\":%{private}d, \"fenceType\":%{private}d, \"loiType\":%{private}d, \"envType\":%{private}d, \"radiusMeters\":%{private}lld, \"effectiveRadiusMeters\":%{private}lld, \"didUseWsb\":%{private}hhd, \"timeLatency\":\"%{private}f\", \"totalAPs\":%{private}lld, \"fenceAPs\":%{private}lld}", buf, 0x6Cu);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102190E48);
  }
  v17 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(double *)(a1 + 200);
    v19 = *(_DWORD *)(a1 + 208);
    v20 = *(_QWORD *)(a1 + 216);
    v21 = *(_DWORD *)(a1 + 224);
    v22 = *(_DWORD *)(a1 + 228);
    v23 = *(_QWORD *)(a1 + 232);
    v24 = *(_QWORD *)(a1 + 280);
    v25 = *(_QWORD *)(a1 + 288);
    v26 = 10 * *(_QWORD *)(a1 + 296);
    *(_DWORD *)buf = 68291331;
    v60 = 0;
    v61 = 2082;
    v62 = "";
    v63 = 2049;
    v64 = v18;
    v65 = 1025;
    v66 = v19;
    v67 = 2049;
    *(_QWORD *)v68 = v20;
    *(_WORD *)&v68[8] = 1025;
    *(_DWORD *)v69 = v21;
    *(_WORD *)&v69[4] = 1025;
    *(_DWORD *)&v69[6] = v22;
    *(_WORD *)&v69[10] = 2049;
    *(_QWORD *)&v69[12] = v23;
    *(_WORD *)&v69[20] = 2049;
    *(_QWORD *)&v69[22] = v24;
    *(_WORD *)&v69[30] = 2049;
    *(_QWORD *)v70 = v25;
    *(_WORD *)&v70[8] = 2049;
    *(_QWORD *)&v70[10] = v26;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"FenceMetric, geofencemetric,2\", \"lastEventAge\":\"%{private}f\", \"lastEventProvider\":%{private}d, \"prevLocationAge\":\"%{private}f\", \"prevLocationProvider\":%{private}d, \"locationType\":%{private}d, \"locationAccuracy\":%{private}lld, \"distanceToCenter\":\"%{private}f\", \"signedDistanceLatency\":\"%{private}f\", \"priorSignedDistance\":%{private}lld}", buf, 0x60u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102190E48);
  }
  v27 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v28 = *(double *)(a1 + 80);
    v29 = *(double *)(a1 + 112) > v28;
    v30 = *(double *)(a1 + 120) > v28;
    v31 = *(double *)(a1 + 144) > v28;
    v32 = *(double *)(a1 + 160);
    v33 = *(double *)(a1 + 152) > v28;
    *(_DWORD *)buf = 68293379;
    v34 = v32 > v28;
    v35 = *(double *)(a1 + 128) > v28;
    v36 = *(double *)(a1 + 96);
    v37 = *(double *)(a1 + 104);
    v38 = *(double *)(a1 + 136) > v28;
    v39 = *(_DWORD *)(a1 + 64);
    v40 = *(unsigned __int8 *)(a1 + 194);
    v41 = *(unsigned __int8 *)(a1 + 195);
    v42 = *(unsigned __int8 *)(a1 + 192);
    v43 = *(unsigned __int8 *)(a1 + 193);
    v60 = 0;
    v61 = 2082;
    v62 = "";
    v63 = 2049;
    v64 = v55;
    v65 = 1025;
    v66 = v39;
    v67 = 2049;
    *(double *)v68 = v3;
    *(_WORD *)&v68[8] = 2049;
    *(double *)v69 = v56;
    *(_WORD *)&v69[8] = 1025;
    *(_DWORD *)&v69[10] = v40;
    *(_WORD *)&v69[14] = 1025;
    *(_DWORD *)&v69[16] = v41;
    *(_WORD *)&v69[20] = 1025;
    *(_DWORD *)&v69[22] = v42;
    *(_WORD *)&v69[26] = 1025;
    *(_DWORD *)&v69[28] = v43;
    *(_WORD *)v70 = 1025;
    *(_DWORD *)&v70[2] = v29;
    *(_WORD *)&v70[6] = 1025;
    *(_DWORD *)&v70[8] = v30;
    *(_WORD *)&v70[12] = 1025;
    *(_DWORD *)&v70[14] = v31;
    *(_WORD *)&v70[18] = 1025;
    *(_DWORD *)v71 = v33;
    *(_WORD *)&v71[4] = 1025;
    *(_DWORD *)&v71[6] = v34;
    v72 = 1025;
    v73 = v35;
    v74 = 1025;
    v75 = v38;
    v76 = 1025;
    v77 = v36 > v28;
    v78 = 1025;
    v79 = v37 > v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"FenceMetric, geofencemetric,3\", \"lastTriggerAge\":\"%{private}f\", \"motionActivity\":%{private}d, \"sleepDuration\":\"%{private}f\", \"awakeDuration\":\"%{private}f\", \"isAfterFirstUnlock\":%{private}hhd, \"isAirplaneModeActive\":%{private}hhd, \"isFreeWake\":%{private}hhd, \"isWifiEnabled\":%{private}hhd, \"rcvdBtConnect\":%{private}hhd, \"rcvdBtDisconnect\":%{private}hhd, \"rcvdEpnoEntryTrigger\":%{private}hhd, \"rcvdEpnoExitTrigger\":%{private}hhd, \"rcvdMotionAlarm\":%{private}hhd, \"rcvdTether\":%{private}hhd, \"rcvdUntether\":%{private}hhd, \"rcvdWifiConnect\":%{private}hhd, \"rcvdWifiDisconnect\":%{private}hhd}", buf, 0x84u);
  }
  v44.f64[0] = v56;
  v44.f64[1] = v55;
  __asm { FMOV            V0.2D, #-1.0 }
  v50 = (int8x8_t)vmovn_s64(vceqq_f64(v44, _Q0));
  v51 = vcvtpd_s64_f64(v3 * 0.1);
  v52 = vmulq_f64(v44, (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL));
  if (v3 == -1.0)
    v53 = -1;
  else
    v53 = v51;
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_100ED3E48;
  v57[3] = &unk_102150CF0;
  v57[4] = a1;
  v58 = v53;
  *(double *)&v57[5] = v55;
  v57[6] = vorr_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v52))), v50);
  return AnalyticsSendEventLazy(CFSTR("com.apple.clx.geofence.event"), v57);
}

NSDictionary *sub_100ED3E48(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD v5[38];
  _QWORD v6[38];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = CFSTR("apsUsedForEpno");
  v6[0] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(v2 + 304));
  v5[1] = CFSTR("apsUsedForEpnoForThisFence");
  v6[1] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(v2 + 312));
  v5[2] = CFSTR("awakeDurationBin");
  v6[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v5[3] = CFSTR("bundleId");
  v3 = (_QWORD *)(v2 + 8);
  if (*(char *)(v2 + 31) < 0)
    v3 = (_QWORD *)*v3;
  v6[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v5[4] = CFSTR("didUseWsb");
  v6[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 264));
  v5[5] = CFSTR("distanceToCenter");
  v6[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 280));
  v5[6] = CFSTR("effectiveRadiusBin");
  v6[6] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(v2 + 56));
  v5[7] = CFSTR("envType");
  v6[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 44));
  v5[8] = CFSTR("eventType");
  v6[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 32));
  v5[9] = CFSTR("fenceType");
  v6[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 36));
  v5[10] = CFSTR("isAfterFirstUnlock");
  v6[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 194));
  v5[11] = CFSTR("isAirplaneModeActive");
  v6[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 195));
  v5[12] = CFSTR("isFreeWake");
  v6[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 192));
  v5[13] = CFSTR("isWifiEnabled");
  v6[13] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 193));
  v5[14] = CFSTR("lastEventAge");
  v6[14] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 200));
  v5[15] = CFSTR("lastEventProvider");
  v6[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 208));
  v5[16] = CFSTR("lastTriggerAgeBin");
  v6[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v5[17] = CFSTR("locationAccuracy");
  v6[17] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(v2 + 232));
  v5[18] = CFSTR("locationProvider");
  v6[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 228));
  v5[19] = CFSTR("loiType");
  v6[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 40));
  v5[20] = CFSTR("motionActivity");
  v6[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 64));
  v5[21] = CFSTR("prevLocationAge");
  v6[21] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 216));
  v5[22] = CFSTR("prevLocationProvider");
  v6[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 224));
  v5[23] = CFSTR("priorSignedDistanceBin");
  v6[23] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(v2 + 296));
  v5[24] = CFSTR("radiusBin");
  v6[24] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(v2 + 48));
  v5[25] = CFSTR("rcvdBtConnect");
  v6[25] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 112) > *(double *)(v2 + 80));
  v5[26] = CFSTR("rcvdBtDisconnect");
  v6[26] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 120) > *(double *)(v2 + 80));
  v5[27] = CFSTR("rcvdEpnoEntryTrigger");
  v6[27] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 144) > *(double *)(v2 + 80));
  v5[28] = CFSTR("rcvdEpnoExitTrigger");
  v6[28] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 152) > *(double *)(v2 + 80));
  v5[29] = CFSTR("rcvdMotionAlarm");
  v6[29] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 160) > *(double *)(v2 + 80));
  v5[30] = CFSTR("rcvdTether");
  v6[30] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 128) > *(double *)(v2 + 80));
  v5[31] = CFSTR("rcvdUntether");
  v6[31] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 136) > *(double *)(v2 + 80));
  v5[32] = CFSTR("rcvdWifiConnect");
  v6[32] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 96) > *(double *)(v2 + 80));
  v5[33] = CFSTR("rcvdWifiDisconnect");
  v6[33] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(v2 + 104) > *(double *)(v2 + 80));
  v5[34] = CFSTR("signedDistanceLatency");
  v6[34] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 288));
  v5[35] = CFSTR("sleepDurationBin");
  v6[35] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v5[36] = CFSTR("timeLatency");
  v6[36] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 272));
  v5[37] = CFSTR("triggerAge");
  v6[37] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 38);
}

double sub_100ED4364(uint64_t a1, int a2, uint64_t a3)
{
  double v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  double v28;
  __int128 v29;
  int v30;
  int v31[22];
  int v32;
  const char *v33;
  int v34;
  double v35;
  __int16 v36;
  _BYTE v37[18];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint8_t buf[4];
  const char *v97;
  __int16 v98;
  uint64_t v99;
  std::__shared_weak_count *v100;

  v3 = -1.0;
  if (*(_DWORD *)(a1 + 36) != 4)
  {
    v30 = a2 == 0;
    sub_100B6D7B8((uint64_t)v31);
    v31[0] = v30;
    v6 = *(_QWORD *)(a1 + 240);
    v7 = *(_QWORD *)(a1 + 248);
    if (v6 != v7)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      v29 = _Q0;
      do
      {
        if (*(double *)(v6 + 20) <= 180.0)
        {
          if (*(double *)(v6 + 76) <= v3)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102190E48);
            v13 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
            {
              v14 = *(_QWORD *)(v6 + 76);
              *(_DWORD *)buf = 134218240;
              v97 = *(const char **)&v3;
              v98 = 2048;
              v99 = v14;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Wsb time went backwards. truePriorTime: %.3lf. location.timestamp: %.3lf", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102190E48);
              v22 = *(_QWORD *)(v6 + 76);
              v34 = 134218240;
              v35 = v3;
              v36 = 2048;
              *(_QWORD *)v37 = v22;
              LODWORD(v28) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Wsb time went backwards. truePriorTime: %.3lf. location.timestamp: %.3lf", COERCE_DOUBLE(&v34), v28);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 0, "CFAbsoluteTime GeofenceMetric::estimateTrueEventTime(const GeofenceMetricEventType, const CLFenceManager_Type::Fence &)", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
          }
          v15 = sub_10016F4A8((double *)(v6 + 4), a3, (double *)(a1 + 320));
          bzero(&v34, 0x3B0uLL);
          BYTE4(v35) = 1;
          *(_OWORD *)&v37[2] = v29;
          v38 = v29;
          v39 = v29;
          v40 = v29;
          v41 = v29;
          v42 = v29;
          v43 = v29;
          v44 = 0xFFFF;
          v45 = 0;
          v46 = 0;
          v47 = 0xBFF0000000000000;
          v48 = v29;
          v49 = v29;
          v50 = v29;
          v51 = 0xBFF0000000000000;
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0xBFF0000000000000;
          v56 = 0x7FFFFFFF;
          v58 = 0;
          v59 = 0;
          v57 = 0;
          v60 = 0;
          v61 = 0xFFFF;
          v62 = 0;
          v63 = 0;
          v64 = 0xBFF0000000000000;
          v65 = 0xBFF0000000000000;
          v66 = v29;
          v67 = v29;
          v69 = 0xBFF0000000000000;
          v72 = 0;
          v70 = 0;
          v71 = 0;
          v68 = 0xBFF0000000000000;
          v73 = 0xBFF0000000000000;
          v74 = 0x7FFFFFFF;
          v78 = 0;
          v76 = 0;
          v77 = 0;
          v75 = 0;
          v79 = 0xFFFF;
          v80 = 0;
          v81 = 0;
          v82 = 0xBFF0000000000000;
          v83 = v29;
          v84 = v29;
          v85 = v29;
          v86 = 0xBFF0000000000000;
          v89 = 0;
          v87 = 0;
          v88 = 0;
          v90 = 0xBFF0000000000000;
          v91 = 0x7FFFFFFF;
          v92 = 0;
          v93 = 0;
          v95 = 0;
          v94 = 0;
          sub_10012A33C(buf);
          v16 = a3;
          v17 = sub_100B6F304(v6, v15, (uint64_t)buf, a3, v31, 1, (uint64_t)&v34);
          v18 = v100;
          if (v100)
          {
            p_shared_owners = (unint64_t *)&v100->__shared_owners_;
            do
              v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          a3 = v16;
          if ((v17 & 1) == 0)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102190E48);
            v21 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              v97 = "estimateTrueEventTime";
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s, Failure getting status from location", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102190E48);
              v32 = 136315138;
              v33 = "estimateTrueEventTime";
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "%s, Failure getting status from location", (const char *)&v32);
              v26 = (uint8_t *)v25;
              sub_100512490("Generic", 1, 0, 0, "CFAbsoluteTime GeofenceMetric::estimateTrueEventTime(const GeofenceMetricEventType, const CLFenceManager_Type::Fence &)", "%s\n", v25);
              if (v26 != buf)
                free(v26);
            }
          }
          if (v34 != v30)
            return v3;
          v3 = *(double *)(v6 + 76);
        }
        v6 += 156;
      }
      while (v6 != v7);
    }
  }
  return v3;
}

void sub_100ED4910(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x6A8]);
  _Unwind_Resume(a1);
}

void sub_100ED4930(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100ED495C(id a1)
{
  qword_1022A02C8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "LocationMetrics");
}

uint64_t sub_100ED4988(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  sub_100197040();
  result = sub_100195F08();
  if ((result & 1) == 0)
  {
    if (!*(_QWORD *)(a1 + 16))
      sub_100D790A4();
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102190FA0);
    v3 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registering for geomagnetic model updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102190FA0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 1, "Registering for geomagnetic model updates", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLInertialOdometryNotifier::GeomagneticModelClient::registerForGeomagneticModelNotification()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0, 0);
  }
  return result;
}

void sub_100ED4B94(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  double v6;
  double v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  double v11;
  uint8_t buf[4];
  double v13;

  if (!*a2)
  {
    *(double *)(a4 + 8) = *(double *)(a3 + 40) * 0.0174532924;
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102190FA0);
    v5 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_INFO))
    {
      v6 = *(double *)(a4 + 8) * 57.2957802;
      *(_DWORD *)buf = 134217984;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received geomagnetic model, declination [deg],%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102190FA0);
      v7 = *(double *)(a4 + 8) * 57.2957802;
      v10 = 134217984;
      v11 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 1, "Received geomagnetic model, declination [deg],%f", COERCE_DOUBLE(&v10));
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "static void CLInertialOdometryNotifier::GeomagneticModelClient::onGeomagneticModelNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &, void *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

uint64_t sub_100ED4D78(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  sub_100197040();
  result = sub_100195F08();
  if ((result & 1) == 0)
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)(a1 + 16))
    {
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102190FA0);
      v3 = qword_10229FF88;
      if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Unregistering for geomagnetic model updates", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF80 != -1)
          dispatch_once(&qword_10229FF80, &stru_102190FA0);
        v6[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 1, "Unregistering for geomagnetic model updates", v6, 2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 2, "void CLInertialOdometryNotifier::GeomagneticModelClient::unregisterForGeomagneticModelNotification()", "%s\n", v4);
        if (v5 != buf)
          free(v5);
      }
      return (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0);
    }
  }
  return result;
}

uint64_t sub_100ED4F30()
{
  if (qword_102308EE0 != -1)
    dispatch_once(&qword_102308EE0, &stru_102190E88);
  return qword_1023118B8;
}

void sub_100ED4F70(id a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (sub_101057EFC())
  {
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102190FA0);
    v1 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Creating InertialOdometry notifier", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102190FA0);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 0, "Creating InertialOdometry notifier", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "static CLInertialOdometryNotifier *CLInertialOdometryNotifier::instance()_block_invoke", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
    operator new();
  }
}

void sub_100ED5124()
{
  operator delete();
}

void sub_100ED5150(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLInertialOdometryNotifier", 1);
}

void sub_100ED5294(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100ED5310(id a1, shared_ptr<CLConnectionMessage> a2)
{
  CLConnectionMessage **var0;
  NSObject *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t *v12;
  uint8_t buf[4];
  uint64_t *v14;

  var0 = (CLConnectionMessage **)a2.var0;
  if (qword_10229FF80 != -1)
    dispatch_once(&qword_10229FF80, &stru_102190FA0);
  v3 = qword_10229FF88;
  if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_DEBUG))
  {
    v4 = (uint64_t *)CLConnectionMessage::name(*var0);
    if (*((char *)v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = (uint64_t *)*v4;
    *(_DWORD *)buf = 136446210;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102190FA0);
    v6 = qword_10229FF88;
    v7 = (uint64_t *)CLConnectionMessage::name(*var0);
    if (*((char *)v7 + 23) >= 0)
      v8 = v7;
    else
      v8 = (uint64_t *)*v7;
    v11 = 136446210;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "Default handler received message %{public}s", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "CLInertialOdometryNotifier::CLInertialOdometryNotifier()_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

_QWORD *sub_100ED54EC(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_102190EB8;
  *(_QWORD *)(a1 + 32) = &off_102190F08;
  v2 = (_QWORD *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
  sub_10083D7F0((CLConnectionClient **)(a1 + 80), 0);
  sub_10065E278((uint64_t *)(a1 + 72), 0);
  sub_101057E5C(v2);
  return sub_1009BAD18((_QWORD *)a1);
}

_QWORD *sub_100ED5554(uint64_t a1)
{
  return sub_100ED54EC(a1 - 32);
}

void sub_100ED555C(uint64_t a1)
{
  sub_100ED54EC(a1);
  operator delete();
}

void sub_100ED5580(uint64_t a1)
{
  sub_100ED54EC(a1 - 32);
  operator delete();
}

double sub_100ED55A8(uint64_t *a1, int a2, double *a3)
{
  NSObject *v3;
  double v4;
  const char *v5;
  char *v6;
  NSObject *v9;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v15;
  const char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  __int128 buf;
  void (*v21)(uint64_t);
  void *v22;
  uint64_t *v23;
  double v24;

  if (a2)
  {
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102190FA0);
    v3 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", (uint8_t *)&buf, 2u);
    }
    v4 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102190FA0);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF88, 17, "Unrecognized notification", &v18, 2);
      v6 = (char *)v5;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLInertialOdometryNotifier::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v5);
      if (v6 != (char *)&buf)
        free(v6);
    }
  }
  else
  {
    v4 = 0.0;
    if (sub_101057C28((uint64_t)(a1 + 4)))
    {
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102190FA0);
      v9 = qword_10229FF88;
      if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *a3;
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Minimum inertial odometry update interval changed to %{public}f", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FF80 != -1)
          dispatch_once(&qword_10229FF80, &stru_102190FA0);
        v15 = *(_QWORD *)a3;
        v18 = 134349056;
        v19 = v15;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF88, 0, "Minimum inertial odometry update interval changed to %{public}f", &v18, 12);
        v17 = (char *)v16;
        sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLInertialOdometryNotifier::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v16);
        if (v17 != (char *)&buf)
          free(v17);
      }
      sub_10006B4E0(a1[5], *a3);
      v11 = *a3;
      v12 = a1[11];
      *(_QWORD *)&buf = _NSConcreteStackBlock;
      *((_QWORD *)&buf + 1) = 3221225472;
      v21 = sub_100ED5ED0;
      v22 = &unk_102143528;
      v23 = a1;
      v24 = v11;
      dispatch_async(v12, &buf);
      v13 = a1[9];
      if (*a3 <= 0.0)
        sub_100ED4D78(v13);
      else
        sub_100ED4988(v13);
      return *a3;
    }
  }
  return v4;
}

void sub_100ED5920(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FF80 != -1)
    dispatch_once(&qword_10229FF80, &stru_102190FA0);
  v3 = qword_10229FF88;
  if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "pong,%{public}u", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102190FA0);
    v5 = *(_DWORD *)(a2 + 1);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 0, "pong,%{public}u", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLInertialOdometryNotifier::visitPong(const CMInertialOdometryReport::Pong *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

uint64_t sub_100ED5AD4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  const char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  _BYTE buf[32];
  _BYTE v75[40];
  _BYTE v76[32];
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  int v87;

  if (qword_10229FF80 != -1)
    dispatch_once(&qword_10229FF80, &stru_102190FA0);
  v4 = qword_10229FF88;
  if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 1);
    v6 = *(_QWORD *)(a1 + 56);
    v7 = sub_100078B88();
    v8 = *(float *)(a2 + 9);
    v9 = *(float *)(a2 + 13);
    v10 = *(float *)(a2 + 17);
    v11 = *(float *)(a2 + 21);
    v12 = *(float *)(a2 + 25);
    v13 = *(float *)(a2 + 29);
    v14 = *(_QWORD *)(a2 + 33);
    v15 = *(_QWORD *)(a2 + 41);
    v16 = *(_QWORD *)(a2 + 49);
    v17 = *(_QWORD *)(a2 + 57);
    v18 = *(_QWORD *)(a2 + 65);
    v19 = *(_QWORD *)(a2 + 73);
    v20 = *(unsigned __int8 *)(a2 + 101);
    *(_DWORD *)buf = 134352896;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = v7;
    *(_WORD *)v75 = 2050;
    *(double *)&v75[2] = v8;
    *(_WORD *)&v75[10] = 2050;
    *(double *)&v75[12] = v9;
    *(_WORD *)&v75[20] = 2050;
    *(double *)&v75[22] = v10;
    *(_WORD *)&v75[30] = 2050;
    *(double *)&v75[32] = v11;
    *(_WORD *)v76 = 2050;
    *(double *)&v76[2] = v12;
    *(_WORD *)&v76[10] = 2050;
    *(double *)&v76[12] = v13;
    *(_WORD *)&v76[20] = 2050;
    *(_QWORD *)&v76[22] = v14;
    *(_WORD *)&v76[30] = 2050;
    v77 = v15;
    v78 = 2050;
    v79 = v16;
    v80 = 2050;
    v81 = v17;
    v82 = 2050;
    v83 = v18;
    v84 = 2050;
    v85 = v19;
    v86 = 1026;
    v87 = v20;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Report,aopTimestamp,%{public}llu,reportTimestamp,%{public}f,machTimeNow,%{public}f,posX,%{public}f,posY,%{public}f,posZ,%{public}f,dvCumsumX,%{public}f,dvCumsumY,%{public}f,dvCumsumZ,%{public}f,tsPosRollover,%{public}llu,tsVelRollover,%{public}llu,tsDeltaPosXUnavailable,%{public}llu,tsDeltaPosYUnavailable,%{public}llu,tsDeltaPosZUnavailable,%{public}llu,tsDMReinit,%{public}llu,displacingState,%{public}u", buf, 0x9Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102190FA0);
    v23 = qword_10229FF88;
    v24 = *(_QWORD *)(a2 + 1);
    v25 = *(_QWORD *)(a1 + 56);
    v26 = sub_100078B88();
    v27 = *(float *)(a2 + 9);
    v28 = *(float *)(a2 + 13);
    v29 = *(float *)(a2 + 17);
    v30 = *(float *)(a2 + 21);
    v31 = *(float *)(a2 + 25);
    v32 = *(float *)(a2 + 29);
    v33 = *(_QWORD *)(a2 + 33);
    v34 = *(_QWORD *)(a2 + 41);
    v35 = *(_QWORD *)(a2 + 49);
    v36 = *(_QWORD *)(a2 + 57);
    v37 = *(_QWORD *)(a2 + 65);
    v38 = *(_QWORD *)(a2 + 73);
    v39 = *(unsigned __int8 *)(a2 + 101);
    v42 = 134352896;
    v43 = v24;
    v44 = 2050;
    v45 = v25;
    v46 = 2050;
    v47 = v26;
    v48 = 2050;
    v49 = v27;
    v50 = 2050;
    v51 = v28;
    v52 = 2050;
    v53 = v29;
    v54 = 2050;
    v55 = v30;
    v56 = 2050;
    v57 = v31;
    v58 = 2050;
    v59 = v32;
    v60 = 2050;
    v61 = v33;
    v62 = 2050;
    v63 = v34;
    v64 = 2050;
    v65 = v35;
    v66 = 2050;
    v67 = v36;
    v68 = 2050;
    v69 = v37;
    v70 = 2050;
    v71 = v38;
    v72 = 1026;
    v73 = v39;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "Report,aopTimestamp,%{public}llu,reportTimestamp,%{public}f,machTimeNow,%{public}f,posX,%{public}f,posY,%{public}f,posZ,%{public}f,dvCumsumX,%{public}f,dvCumsumY,%{public}f,dvCumsumZ,%{public}f,tsPosRollover,%{public}llu,tsVelRollover,%{public}llu,tsDeltaPosXUnavailable,%{public}llu,tsDeltaPosYUnavailable,%{public}llu,tsDeltaPosZUnavailable,%{public}llu,tsDMReinit,%{public}llu,displacingState,%{public}u", &v42, 158);
    v41 = (char *)v40;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLInertialOdometryNotifier::visitInertialOdometry(const CMInertialOdometryReport::InertialOdometry *)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
  *(_QWORD *)buf = *(_QWORD *)(a1 + 56);
  *(_QWORD *)&buf[8] = *(_QWORD *)(a2 + 1);
  *(_OWORD *)&buf[16] = *(_OWORD *)(a2 + 9);
  *(_QWORD *)v75 = *(_QWORD *)(a2 + 25);
  *(_OWORD *)&v75[8] = *(_OWORD *)(a2 + 33);
  *(_OWORD *)&v75[24] = *(_OWORD *)(a2 + 49);
  *(_OWORD *)v76 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)&v76[16] = *(_OWORD *)(a2 + 81);
  v21 = *(float *)(a2 + 97) - *(double *)(*(_QWORD *)(a1 + 72) + 8);
  *(float *)&v77 = v21;
  BYTE4(v77) = *(_BYTE *)(a2 + 101);
  return sub_10012AC18(a1, 0, (uint64_t)buf, 112);
}

uint64_t sub_100ED5EC8(uint64_t a1, uint64_t a2)
{
  return sub_100ED5AD4(a1 - 32, a2);
}

void sub_100ED5ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  NSDictionary *v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v1 = *(_QWORD *)(a1 + 32);
  v16[0] = CMInertialOdometryUpdateInterval;
  v17[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v16[1] = CMPedestrianFenceClientIdentifier;
  v17[1] = -[NSProcessInfo processName](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "processName");
  v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  sub_1009D4CE8("PedestrianFence/kCLConnectionMessageInertialOdometry", &v15, &v13);
  v2 = *(_QWORD *)(v1 + 80);
  v11 = v13;
  v12 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage(v2, &v11, 0);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_100ED6040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100ED6064(id a1)
{
  qword_10229FF88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

void sub_100ED6090(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_102190FD0;
  v5[6] = 0;
  sub_100A36140();
}

void sub_100ED6120(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_100ED614C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallSubscription::onFallNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021910A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallSubscription::onFallNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021910A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallSubscription::onFallNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100ED9124(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100ED6304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED6328(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102190FD0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[6];
    a1[6] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return sub_10002FA68((uint64_t)a1);
}

void sub_100ED6388(_QWORD *a1)
{
  sub_100ED6328(a1);
  operator delete();
}

_QWORD *sub_100ED63AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t (**v41)();
  _QWORD v42[2];
  uint64_t (***v43)();
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;

  v44[0] = off_1021910F8;
  v44[1] = sub_100ED6B3C;
  v44[2] = 0;
  v45 = v44;
  sub_1015A2E04(v46, "kCLConnectionMessageFallStatsAvailable");
  sub_100BB8288((uint64_t)&v47, (uint64_t)v44);
  v41 = off_1021910F8;
  v42[0] = sub_100ED6C94;
  v42[1] = 0;
  v43 = &v41;
  sub_1015A2E04(v48, "kCLConnectionMessageFallStatsSetEnabled");
  sub_100BB8288((uint64_t)&v49, (uint64_t)&v41);
  v39[0] = off_1021910F8;
  v39[1] = sub_100ED6F78;
  v39[2] = 0;
  v40 = v39;
  sub_1015A2E04(v50, "kCLConnectionMessageFallStatsGetConfig");
  sub_100BB8288((uint64_t)&v51, (uint64_t)v39);
  v37[0] = off_1021910F8;
  v37[1] = sub_100ED7110;
  v37[2] = 0;
  v38 = v37;
  sub_1015A2E04(v52, "kCLConnectionMessageFallStatsSendStats");
  sub_100BB8288((uint64_t)&v53, (uint64_t)v37);
  v35[0] = off_1021910F8;
  v35[1] = sub_100ED72A8;
  v35[2] = 0;
  v36 = v35;
  sub_1015A2E04(v54, "kCLConnectionMessageAnomalyDetectionSimulateEvent");
  sub_100BB8288((uint64_t)&v55, (uint64_t)v35);
  v33[0] = off_1021910F8;
  v33[1] = sub_100ED73BC;
  v33[2] = 0;
  v34 = v33;
  sub_1015A2E04(v56, "kCLConnectionMessageSetHgalCaptureMode");
  sub_100BB8288((uint64_t)&v57, (uint64_t)v33);
  v31[0] = off_102191188;
  v31[1] = sub_100ED74D0;
  v31[2] = 0;
  v32 = v31;
  sub_1015A2E04(v58, "kCLConnectionMessageAnomalyEvent");
  sub_100BB8288((uint64_t)&v59, (uint64_t)v31);
  v29[0] = off_102191188;
  v29[1] = sub_100ED79C8;
  v29[2] = 0;
  v30 = v29;
  sub_1015A2E04(v60, "kCLConnectionMessageAnomalyEventCompleted");
  sub_100BB8288((uint64_t)&v61, (uint64_t)v29);
  v27[0] = off_1021910F8;
  v27[1] = sub_100ED7D74;
  v27[2] = 0;
  v28 = v27;
  sub_1015A2E04(v62, "kCLConnectionMessageAnomalyEventCompletedMostRecent");
  sub_100BB8288((uint64_t)&v63, (uint64_t)v27);
  v25[0] = off_1021910F8;
  v25[1] = sub_100ED81C4;
  v25[2] = 0;
  v26 = v25;
  sub_1015A2E04(v64, "kCLConnectionMessageAnomalyEventEnabled");
  sub_100BB8288((uint64_t)&v65, (uint64_t)v25);
  sub_100ED9AE8(a1, (unsigned __int8 *)v46, 10);
  v2 = 70;
  do
  {
    v3 = (_QWORD *)v46[v2 - 1];
    if (&v44[v2] == v3)
    {
      v3 = &v44[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v43)[v2]) < 0)
      operator delete((void *)v42[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v26;
  if (v26 == v25)
  {
    v6 = 4;
    v5 = v25;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v26)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v28;
  if (v28 == v27)
  {
    v8 = 4;
    v7 = v27;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v28)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v30;
  if (v30 == v29)
  {
    v10 = 4;
    v9 = v29;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v30)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v32;
  if (v32 == v31)
  {
    v12 = 4;
    v11 = v31;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v32)
  {
    v12 = 5;
    goto LABEL_29;
  }
  v13 = v34;
  if (v34 == v33)
  {
    v14 = 4;
    v13 = v33;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  else if (v34)
  {
    v14 = 5;
    goto LABEL_34;
  }
  v15 = v36;
  if (v36 == v35)
  {
    v16 = 4;
    v15 = v35;
LABEL_39:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  else if (v36)
  {
    v16 = 5;
    goto LABEL_39;
  }
  v17 = v38;
  if (v38 == v37)
  {
    v18 = 4;
    v17 = v37;
LABEL_44:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  else if (v38)
  {
    v18 = 5;
    goto LABEL_44;
  }
  v19 = v40;
  if (v40 == v39)
  {
    v20 = 4;
    v19 = v39;
LABEL_49:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  else if (v40)
  {
    v20 = 5;
    goto LABEL_49;
  }
  v21 = v43;
  if (v43 == &v41)
  {
    v22 = 4;
    v21 = &v41;
LABEL_54:
    (*v21)[v22]();
  }
  else if (v43)
  {
    v22 = 5;
    goto LABEL_54;
  }
  result = v45;
  if (v45 == v44)
  {
    v24 = 4;
    result = v44;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
  }
  else if (v45)
  {
    v24 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
  }
  return result;
}

void sub_100ED6890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,char *a29,char a30,uint64_t a31,uint64_t a32,char *a33,char a34,uint64_t a35,uint64_t a36,char *a37,char a38,uint64_t a39,uint64_t a40,char *a41,char a42,uint64_t a43,uint64_t a44,char *a45,char a46,uint64_t a47,uint64_t a48,char *a49)
{
  uint64_t v49;
  uint64_t i;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;

  for (i = 504; i != -56; i -= 56)
    sub_1004E21A4(v49 + i);
  v52 = a13;
  if (a13 == &a10)
  {
    v53 = 4;
    v52 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_8:
  v54 = a17;
  if (a17 == &a14)
  {
    v55 = 4;
    v54 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_13:
  v56 = a21;
  if (a21 == &a18)
  {
    v57 = 4;
    v56 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_18;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_18:
  v58 = a25;
  if (a25 == &a22)
  {
    v59 = 4;
    v58 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_23;
    v59 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v58 + 8 * v59))();
LABEL_23:
  v60 = a29;
  if (a29 == &a26)
  {
    v61 = 4;
    v60 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_28;
    v61 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_28:
  v62 = a33;
  if (a33 == &a30)
  {
    v63 = 4;
    v62 = &a30;
  }
  else
  {
    if (!a33)
      goto LABEL_33;
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
LABEL_33:
  v64 = a37;
  if (a37 == &a34)
  {
    v65 = 4;
    v64 = &a34;
  }
  else
  {
    if (!a37)
      goto LABEL_38;
    v65 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v64 + 8 * v65))();
LABEL_38:
  v66 = a41;
  if (a41 == &a38)
  {
    v67 = 4;
    v66 = &a38;
  }
  else
  {
    if (!a41)
      goto LABEL_43;
    v67 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
LABEL_43:
  v68 = a45;
  if (a45 == &a42)
  {
    v69 = 4;
    v68 = &a42;
  }
  else
  {
    if (!a45)
      goto LABEL_48;
    v69 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v68 + 8 * v69))();
LABEL_48:
  v70 = a49;
  if (a49 == &a46)
  {
    v71 = 4;
    v70 = &a46;
  }
  else
  {
    if (!a49)
      goto LABEL_53;
    v71 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v70 + 8 * v71))();
LABEL_53:
  _Unwind_Resume(a1);
}

void sub_100ED6AFC()
{
  JUMPOUT(0x100ED69DCLL);
}

void sub_100ED6B08()
{
  JUMPOUT(0x100ED6A0CLL);
}

void sub_100ED6B14()
{
  JUMPOUT(0x100ED6A3CLL);
}

void sub_100ED6B20()
{
  JUMPOUT(0x100ED6A6CLL);
}

void sub_100ED6B2C()
{
  JUMPOUT(0x100ED6A9CLL);
}

void sub_100ED6B3C(uint64_t a1, _QWORD *a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[2];
  uint64_t v13;
  void *v14;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_100ED8618(a1, v12);
  v9 = v8;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v9)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (v8)
  {
LABEL_9:
    v13 = CMAvailable;
    v14 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
    CLConnectionMessage::sendReply(*a2);
  }
LABEL_10:

}

void sub_100ED6C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100ED6C94(uint64_t a1, uint64_t a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  void *Dictionary;
  id v13;
  id v14;
  id v15;
  void *v16;
  void **v17;
  NSString *v18;
  id v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[7];
  std::__shared_weak_count *v27;
  void *v28[2];
  void *v29[2];
  __int128 v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  void *v34[2];
  __int128 v35;
  void *v36[2];
  void *__p[2];
  __int128 v38;
  uint64_t v39;
  uint64_t v40[2];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v40[0] = *(_QWORD *)a2;
  v40[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_100ED8618(a1, v40);
  v9 = v8;
  if (!v5)
    goto LABEL_8;
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((v9 & 1) == 0)
      goto LABEL_41;
  }
  else
  {
LABEL_8:
    if ((v8 & 1) == 0)
      goto LABEL_41;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  v13 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMFallDataCollectionConfigurationKey);
  v14 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMFallSetStatsEnabled);
  if (v13)
    v14 = v13;
  v15 = objc_msgSend(v14, "unsignedIntegerValue");
  v16 = *(void **)(a1 + 24);
  if (v16)
  {
    objc_msgSend(v16, "clientName");
  }
  else
  {
    v39 = 0;
    *(_OWORD *)__p = 0u;
    v38 = 0u;
    v35 = 0u;
    *(_OWORD *)v36 = 0u;
    v33 = 0u;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)v29 = 0u;
    v30 = 0u;
    *(_OWORD *)v28 = 0u;
  }
  sub_1001A8D50((uint64_t)v28);
  if (v35 >= 0)
    v17 = &v34[1];
  else
    v17 = (void **)v34[1];
  v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  if (SHIBYTE(v32[0]) < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[1]);
  if (SHIBYTE(v29[0]) < 0)
    operator delete(v28[0]);
  v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLFallNotifier"));
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3321888768;
  v26[2] = sub_100ED88C0;
  v26[3] = &unk_102190FF8;
  v26[4] = v18;
  v26[5] = v15;
  v20 = *(std::__shared_weak_count **)(a2 + 8);
  v26[6] = *(_QWORD *)a2;
  v27 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  objc_msgSend(v19, "doAsync:", v26);
  v23 = v27;
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_41:

}

void sub_100ED6F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100ED6F78(uint64_t a1, uint64_t *a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[5];
  std::__shared_weak_count *v20;
  uint64_t v21[2];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = (std::__shared_weak_count *)a2[1];
  v21[0] = *a2;
  v21[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_100ED8618(a1, v21);
  v9 = v8;
  if (!v5)
    goto LABEL_8;
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((v9 & 1) == 0)
      goto LABEL_18;
  }
  else
  {
LABEL_8:
    if ((v8 & 1) == 0)
      goto LABEL_18;
  }
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLFallNotifier"));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3321888768;
  v19[2] = sub_100ED89A4;
  v19[3] = &unk_102191028;
  v13 = a2[1];
  v19[4] = *a2;
  v20 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  objc_msgSend(v12, "doAsync:", v19);
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_18:

}

void sub_100ED70DC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

void sub_100ED7110(uint64_t a1, uint64_t *a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[5];
  std::__shared_weak_count *v20;
  uint64_t v21[2];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = (std::__shared_weak_count *)a2[1];
  v21[0] = *a2;
  v21[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_100ED8618(a1, v21);
  v9 = v8;
  if (!v5)
    goto LABEL_8;
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((v9 & 1) == 0)
      goto LABEL_18;
  }
  else
  {
LABEL_8:
    if ((v8 & 1) == 0)
      goto LABEL_18;
  }
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLFallNotifier"));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3321888768;
  v19[2] = sub_100ED8F24;
  v19[3] = &unk_102191028;
  v13 = a2[1];
  v19[4] = *a2;
  v20 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  objc_msgSend(v12, "doAsync:", v19);
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_18:

}

void sub_100ED7274(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

void sub_100ED72A8(uint64_t a1, uint64_t a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *Dictionary;
  CLConnectionMessage *v14;
  std::__shared_weak_count *v15;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v14 = *(CLConnectionMessage **)a2;
  v15 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_100ED8618(a1, (uint64_t *)&v14);
  v9 = v8;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((v9 & 1) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if ((v8 & 1) != 0)
  {
LABEL_9:
    v12 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    objc_msgSend(v12, "simulateEvent:", objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMAnomalyEventType, v14, v15), "unsignedIntValue"));
  }
LABEL_10:

}

void sub_100ED7398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100261F44((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100ED73BC(uint64_t a1, uint64_t a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *Dictionary;
  CLConnectionMessage *v14;
  std::__shared_weak_count *v15;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v14 = *(CLConnectionMessage **)a2;
  v15 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_100ED8618(a1, (uint64_t *)&v14);
  v9 = v8;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((v9 & 1) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if ((v8 & 1) != 0)
  {
LABEL_9:
    v12 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    objc_msgSend(v12, "setHgalCaptureMode:", objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMHgalCaptureMode, v14, v15), "unsignedIntValue"));
  }
LABEL_10:

}

void sub_100ED74AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100261F44((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100ED74D0(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  char v7;
  char v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  unsigned int v26;
  _BOOL4 v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  _BYTE __p[28];
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  id v51;
  __int16 v52;
  id v53;
  __int16 v54;
  id v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  _BOOL4 v59;

  v6 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(__p, "com.apple.locationd.activity");
  v7 = sub_1002255E0(a1);
  v8 = v7;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v8 & 1) == 0)
      goto LABEL_25;
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_25;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021910C8);
  v9 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)__p = 138543875;
    *(_QWORD *)&__p[4] = v10;
    *(_WORD *)&__p[12] = 2049;
    *(_QWORD *)&__p[14] = a1;
    *(_WORD *)&__p[22] = 1026;
    *(_DWORD *)&__p[24] = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Anomaly Detection subscription changed, %{public}@, %{private}p, %{public}d", __p, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v32 = *(_QWORD *)(a1 + 24);
    v35 = 138543875;
    v36 = v32;
    v37 = 2049;
    v38 = a1;
    v39 = 1026;
    v40 = a2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FD98, 0, "Anomaly Detection subscription changed, %{public}@, %{private}p, %{public}d", &v35, 28);
    v34 = (char *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CLFallSubscription::handleRequestAnomalyEvent(BOOL, const CLNameValuePair &)", "%s\n", v33);
    if (v34 != __p)
      free(v34);
  }
  sub_1001A638C(a1);
  v11 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(v11 + 8);
  v12 = *(void **)(v11 + 16);
  if (!a2)
  {
    objc_msgSend(v12, "unregister:forNotification:", v13, 1);
    goto LABEL_25;
  }
  objc_msgSend(v12, "register:forNotification:registrationInfo:", v13, 1, 0);
  v14 = objc_msgSend((id)sub_10011A5AC(a3), "objectForKeyedSubscript:", CMAnomalyDetectorEvent);
  v15 = v14;
  if (v14)
  {
    if (objc_msgSend(v14, "identifier"))
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021910C8);
      v16 = qword_10229FD98;
      if (!os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      v17 = objc_msgSend(v15, "identifier");
      v18 = objc_msgSend(v15, "operatingMode");
      objc_msgSend(v15, "absoluteTimestamp");
      v20 = v19;
      objc_msgSend(v15, "updateTimestamp");
      v22 = v21;
      v23 = objc_msgSend(v15, "state");
      v24 = objc_msgSend(v15, "response");
      v25 = objc_msgSend(v15, "resolution");
      v26 = objc_msgSend(v15, "isAcknowledgement");
      v27 = objc_msgSend(v15, "sosState") != 0;
      *(_QWORD *)__p = 68291587;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = "upstream";
      v42 = 2050;
      v43 = v17;
      v44 = 2049;
      v45 = v18;
      v46 = 2049;
      v47 = v20;
      v48 = 2049;
      v49 = v22;
      v50 = 2049;
      v51 = v23;
      v52 = 2049;
      v53 = v24;
      v54 = 2049;
      v55 = v25;
      v56 = 1026;
      v57 = v26;
      v58 = 1026;
      v59 = v27;
      v28 = "{\"msg%{public}.0s\":\"Subscription - Received anomaly detection subscription request with event\", \"direct"
            "ion\":%{public, location:escape_only}s, \"identifier\":%{public}llu, \"operatingMode\":%{private}ld, \"anoma"
            "ly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}ld, \"response\":%"
            "{private}ld, \"resolution\":%{private}ld, \"isAcknowledgement\":%{public}hhd, \"sosState\":%{public}hhd}";
      v29 = v16;
      v30 = 110;
    }
    else
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021910C8);
      v31 = qword_10229FD98;
      if (!os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      *(_QWORD *)__p = 68289026;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      v28 = "{\"msg%{public}.0s\":\"Subscription - Received anomaly detection subscription request with no event\"}";
      v29 = v31;
      v30 = 18;
    }
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, __p, v30);
LABEL_23:
    if ((objc_msgSend(v15, "isAcknowledgement") & 1) == 0)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "onClientAnomalyEventSubscriptionRequest:", v15);
  }
LABEL_25:

}

void sub_100ED796C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100ED79C8(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  int v26;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021910C8);
  v5 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412546;
    v24 = v6;
    v25 = 1024;
    v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received AnomalyEventCompletedUpdate request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v15 = *(_QWORD *)(a1 + 24);
    v19 = 138412546;
    v20 = v15;
    v21 = 1024;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "Received AnomalyEventCompletedUpdate request,client,%@,subscribe,%d", &v19, 18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLFallSubscription::handleRequestAnomalyEventCompletedUpdate(BOOL, const CLNameValuePair &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if ((sub_100FFB2FC(a1) & 1) != 0)
  {
    sub_1001A638C(a1);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(void **)(v7 + 16);
    if (a2)
      objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 1, 0);
    else
      objc_msgSend(v8, "unregister:forNotification:", v9, 1);
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v10 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ is not authorized for Fall Detection updates", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021910C8);
      v12 = *(_QWORD *)(a1 + 24);
      v19 = 138412290;
      v20 = v12;
      LODWORD(v18) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "%@ is not authorized for Fall Detection updates", &v19, v18);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLFallSubscription::handleRequestAnomalyEventCompletedUpdate(BOOL, const CLNameValuePair &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }

}

void sub_100ED7D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100ED7D74(uint64_t a1, _QWORD *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD v24[5];
  std::__shared_weak_count *v25;
  uint64_t v26;
  _UNKNOWN **v27;
  int v28;
  uint64_t v29;
  uint8_t buf[4];
  uint64_t v31;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021910C8);
  v5 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412290;
    v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MessageAnomalyEventCompletedMostRecent message,client,%@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v17 = *(_QWORD *)(a1 + 24);
    v28 = 138412290;
    v29 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "Received MessageAnomalyEventCompletedMostRecent message,client,%@", &v28, 12);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLFallSubscription::handleMessageAnomalyEventCompletedMostRecent(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if ((sub_100FFB2FC(a1) & 1) != 0)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLFallNotifier"));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3321888768;
    v24[2] = sub_100ED8F8C;
    v24[3] = &unk_102191028;
    v8 = (std::__shared_weak_count *)a2[1];
    v24[4] = *a2;
    v25 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    objc_msgSend(v7, "doAsync:", v24);
    v11 = v25;
    if (v25)
    {
      v12 = (unint64_t *)&v25->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v14 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      v31 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@ is not authorized for Fall Detection updates", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021910C8);
      v20 = *(_QWORD *)(a1 + 24);
      v28 = 138412290;
      v29 = v20;
      LODWORD(v23) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "%@ is not authorized for Fall Detection updates", &v28, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLFallSubscription::handleMessageAnomalyEventCompletedMostRecent(std::shared_ptr<CLConnectionMessage>)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v16 = *a2;
    v26 = CMErrorMessage;
    v27 = &off_10221C320;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    CLConnectionMessage::sendReply(v16);
  }

}

void sub_100ED8184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100ED81C4(uint64_t a1, _QWORD *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD v24[5];
  std::__shared_weak_count *v25;
  uint64_t v26;
  _UNKNOWN **v27;
  int v28;
  uint64_t v29;
  uint8_t buf[4];
  uint64_t v31;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021910C8);
  v5 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412290;
    v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MessageAnomalyEventEnabled message,client,%@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v17 = *(_QWORD *)(a1 + 24);
    v28 = 138412290;
    v29 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "Received MessageAnomalyEventEnabled message,client,%@", &v28, 12);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLFallSubscription::handleMessageAnomalyEventEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if ((sub_100FFB30C(a1) & 1) != 0)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLFallNotifier"));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3321888768;
    v24[2] = sub_100ED9084;
    v24[3] = &unk_102191028;
    v8 = (std::__shared_weak_count *)a2[1];
    v24[4] = *a2;
    v25 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    objc_msgSend(v7, "doAsync:", v24);
    v11 = v25;
    if (v25)
    {
      v12 = (unint64_t *)&v25->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v14 = *a2;
    v26 = CMErrorMessage;
    v27 = &off_10221C320;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    CLConnectionMessage::sendReply(v14);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v15 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      v31 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@ is not authorized for Fall Detection updates", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021910C8);
      v20 = *(_QWORD *)(a1 + 24);
      v28 = 138412290;
      v29 = v20;
      LODWORD(v23) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "%@ is not authorized for Fall Detection updates", &v28, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLFallSubscription::handleMessageAnomalyEventEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }

}

void sub_100ED85D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100ED8618(uint64_t a1, uint64_t *a2)
{
  char v4;
  char v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v16;
  _UNKNOWN **v17;
  int v18;
  uint64_t v19;
  _BYTE __p[12];
  char v21;

  sub_1015A2E04(__p, "com.apple.locationd.activity");
  v4 = sub_1002255E0(a1);
  v5 = v4;
  if (v21 < 0)
  {
    operator delete(*(void **)__p);
    if ((v5 & 1) != 0)
      goto LABEL_3;
LABEL_6:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v7 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)__p = 138543362;
      *(_QWORD *)&__p[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Client %{public}@ does not have appropriate motion entitlement.", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021910C8);
      v11 = *(_QWORD *)(a1 + 24);
      v18 = 138543362;
      v19 = v11;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FD98, 0, "#Warning Client %{public}@ does not have appropriate motion entitlement.", &v18, 12);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFallSubscription::sanityCheckForFall(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
      if (v13 != __p)
        free(v13);
    }
    v9 = *a2;
    v16 = CMErrorMessage;
    v17 = &off_10221C2F0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    CLConnectionMessage::sendReply(v9);
    return 0;
  }
  if ((v4 & 1) == 0)
    goto LABEL_6;
LABEL_3:
  if ((sub_100A10F50() & 1) != 0)
    return 1;
  v10 = *a2;
  v14 = CMErrorMessage;
  v15 = &off_10221C308;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
  CLConnectionMessage::sendReply(v10);
  return 0;
}

void sub_100ED889C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED88C0(uint64_t *a1, uint64_t a2)
{
  int v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];

  sub_100A1D1EC(a2, a1[4], a1[5]);
  v4 = v3 != 0;
  if ((v3 & 0xFF000000) != 0)
    v5 = v4 | 2;
  else
    v5 = v3 != 0;
  v6 = a1[6];
  v8[0] = CMReturnCode;
  v9[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4);
  v8[1] = CMFallDataCollectionConfigurationKey;
  v9[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  return CLConnectionMessage::sendReply(v6);
}

uint64_t sub_100ED89A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  NSDictionary *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  NSDictionary *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSDictionary *v34;
  id v35;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  NSDictionary *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD v46[15];
  _QWORD v47[15];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];

  v3 = *(unsigned __int8 *)(a2 + 7828);
  v4 = *(_QWORD *)(a2 + 7816);
  v5 = *(_DWORD *)(a2 + 7824);
  v6 = *(_DWORD *)(a2 + 404);
  v7 = *(_DWORD *)(a2 + 10468);
  v8 = *(_DWORD *)(a2 + 10472);
  v9 = *(_DWORD *)(a2 + 10476);
  v10 = *(_DWORD *)(a2 + 10480);
  v11 = *(_DWORD *)(a2 + 10520);
  v12 = *(_DWORD *)(a2 + 10524);
  v13 = *(_DWORD *)(a2 + 10528);
  v37 = *(_DWORD *)(a2 + 10532);
  v14 = *(unsigned int *)(a2 + 10536);
  v15 = *(unsigned int *)(a2 + 10540);
  v16 = *(unsigned int *)(a2 + 10544);
  v17 = *(unsigned int *)(a2 + 10548);
  v18 = *(unsigned __int8 *)(a2 + 10552);
  v38 = *(unsigned __int8 *)(a2 + 10553);
  v39 = *(unsigned __int8 *)(a2 + 10554);
  v43 = *(unsigned __int8 *)(a2 + 10555);
  v44 = *(unsigned __int8 *)(a2 + 10556);
  v42 = *(unsigned __int8 *)(a2 + 10557);
  v40 = *(unsigned __int8 *)(a2 + 10558);
  v50[0] = CMFallStatsMode;
  v51[0] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v5);
  v50[1] = CMFallStatsSensorRecordingActive;
  v51[1] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(v5));
  v50[2] = CMFallStatsSimulateFall;
  v51[2] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE2(v5));
  v50[3] = CMFallStatsUserStudyPressureDataCollection;
  v51[3] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v5));
  v50[4] = CMAnomalyDetectorEnabled;
  v51[4] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v3);
  v50[5] = CMFallLastReplyAopTimestamp;
  v51[5] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v4);
  v41 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 6);
  v48[0] = CMFallConfigUserAge;
  LODWORD(v19) = v6;
  v49[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v19);
  v48[1] = CMFallConfigUserMets;
  v49[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 10560));
  v48[2] = CMFallImpactAlertThreshold;
  LODWORD(v20) = v7;
  v49[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20);
  v48[3] = CMFallImpactLoggingStatsThreshold;
  LODWORD(v21) = v8;
  v49[3] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v21);
  v48[4] = CMFallImpactLoggingHeartRateThreshold;
  LODWORD(v22) = v9;
  v49[4] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v22);
  v48[5] = CMFallImpactLoggingHighResolutionSensorDataThreshold;
  LODWORD(v23) = v10;
  v49[5] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v23);
  v24 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v49, v48, 6);
  v46[0] = CMFallCyclingImpactGravityVarianceThreshold;
  LODWORD(v25) = v11;
  v47[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v25);
  v46[1] = CMFallCyclingImpactCrownVarianceThreshold;
  LODWORD(v26) = v12;
  v47[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v26);
  v46[2] = CMFallCyclingImpactMaxAbsYThreshold;
  LODWORD(v27) = v13;
  v47[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v27);
  v46[3] = CMFallCyclingDistanceTraveledPostImpactThreshold;
  LODWORD(v28) = v37;
  v47[3] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v28);
  v46[4] = CMFallCyclingEpochsDetectedPostImpactThreshold;
  v47[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v14);
  v46[5] = CMFallOtherWorkoutQuiescenceThresholdLow;
  v47[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v15);
  v46[6] = CMFallOtherWorkoutQuiescenceThresholdHigh;
  v47[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16);
  v46[7] = CMFallOtherWorkoutConsecutiveLongLieThreshold;
  v47[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v17);
  v46[8] = CMFallOtherWorkoutShouldCancelAlertOnStepsThreshold;
  v47[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v18 != 0);
  v46[9] = CMFallOtherWorkoutShouldCancelAlertOnStandThreshold;
  v47[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v38 != 0);
  v46[10] = CMFallOtherWorkoutShouldCancelAlertOnActiveThreshold;
  v47[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v39 != 0);
  v46[11] = CMFallAllDayStateMachineEnabledOverride;
  v47[11] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v40);
  v46[12] = CMFallCyclingStateMachineEnabledOverride;
  v47[12] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v42);
  v46[13] = CMFallRefereeOperatingModeOverride;
  v47[13] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v43);
  v46[14] = CMFallAllDayStateMachineOperatingModeOverride;
  v47[14] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v44);
  v29 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v47, v46, 15);
  v30 = objc_alloc((Class)NSDictionary);
  v31 = CMReturnCode;
  v32 = CMFallConfig;
  v33 = CMFallInternalNotifierState;
  v34 = sub_100A300C4(a2);
  v35 = objc_msgSend(v30, "initWithObjectsAndKeys:", v31, &__kCFBooleanTrue, v32, v41, v33, v34, CMFallInternalMetricState, sub_100A30A14(), CMFallBehavioralConfig, v24, CMFallWorkoutOverrides, v29, 0);
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100ED8F24(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_msgSend(objc_alloc((Class)NSFileHandle), "initWithFileDescriptor:", CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)(a1 + 32), 0));
  sub_100A1D568(a2, v4);
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100ED8F8C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  _BYTE v6[19];
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  double v11;
  double v12;
  unsigned __int8 v13;
  uint64_t v14;
  id v15;

  sub_100A309D0(a2, (uint64_t)v6);
  if (v7)
  {
    v3 = objc_alloc((Class)CMAnomalyEvent);
    v4 = objc_msgSend(v3, "initWithIdentifier:absoluteTimestamp:updateTimestamp:state:response:resolution:sosState:operatingMode:", v7, v6[13], v9, v10, v13, v8, v12, v11);
    v5 = *(_QWORD *)(a1 + 32);
    v14 = CMAnomalyDetectorEvent;
    v15 = v4;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
    CLConnectionMessage::sendReply(v5);

  }
  else
  {
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
  }
}

uint64_t sub_100ED9084(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSNumber *v6;

  v2 = sub_100A10B10();
  v3 = *(_QWORD *)(a1 + 32);
  v5 = CMAnomalyDetectorEnabled;
  v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v2);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1);
  return CLConnectionMessage::sendReply(v3);
}

void sub_100ED9124(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint8_t buf[8];
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  if (*a3 != 1)
    return;
  if (*(_QWORD *)(a4 + 19))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v6 = qword_10229FD98;
    if (!os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v7 = *(_QWORD *)(a4 + 19);
    v8 = *(unsigned __int8 *)(a4 + 149);
    v9 = *(_QWORD *)(a4 + 166);
    v10 = *(_QWORD *)(a4 + 158);
    v11 = *(unsigned __int8 *)(a4 + 13);
    v12 = *(unsigned __int8 *)(a4 + 156);
    v13 = *(unsigned __int8 *)(a4 + 157);
    v14 = *(unsigned __int8 *)(a4 + 190);
    *(_DWORD *)buf = 68291331;
    *(_DWORD *)&buf[4] = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2082;
    v26 = "downstream";
    v27 = 2050;
    v28 = v7;
    v29 = 1026;
    v30 = v8;
    v31 = 2049;
    v32 = v9;
    v33 = 2049;
    v34 = v10;
    v35 = 1025;
    v36 = v11;
    v37 = 1025;
    v38 = v12;
    v39 = 1025;
    v40 = v13;
    v41 = 1025;
    v42 = v14;
    v15 = "{\"msg%{public}.0s\":\"Subscription - Received anomaly event notification\", \"direction\":%{public, location:"
          "escape_only}s, \"identifier\":%{public}llu, \"operatingMode\":%{public}u, \"anomaly timestamp\":\"%{private}f\""
          ", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"response\":%{private}d, \"resolution\":%{priv"
          "ate}d, \"sosState\":%{private}d}";
    v16 = v6;
    v17 = 88;
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021910C8);
    v18 = qword_10229FD98;
    if (!os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v23 = 2082;
    v24 = "";
    v15 = "{\"msg%{public}.0s\":\"Subscription - Received anomaly event notification with no event (reconnection)\"}";
    v16 = v18;
    v17 = 18;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
LABEL_12:
  v19 = objc_msgSend(objc_alloc((Class)CMAnomalyEvent), "initWithIdentifier:absoluteTimestamp:updateTimestamp:state:response:resolution:sosState:operatingMode:", *(_QWORD *)(a4 + 19), *(unsigned __int8 *)(a4 + 13), *(unsigned __int8 *)(a4 + 156), *(unsigned __int8 *)(a4 + 157), *(unsigned __int8 *)(a4 + 190), *(unsigned __int8 *)(a4 + 149), *(double *)(a4 + 166), *(double *)(a4 + 158));
  v20 = CMAnomalyDetectorEvent;
  v21 = v19;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
  sub_100ED93A8(a1, buf);
  if (objc_msgSend(v19, "resolution"))
    sub_100ED9450(a1, buf);

}

void sub_100ED93A8(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102191218, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100ED943C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100ED9450(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102191220, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100ED94E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100ED94F8()
{
  if (qword_102308F08 != -1)
    dispatch_once(&qword_102308F08, &stru_102191058);
  return qword_102308F00;
}

void sub_100ED9538(id a1)
{
  id v1;
  uint64_t v2;

  v1 = objc_alloc((Class)NSSet);
  qword_102308F00 = (uint64_t)objc_msgSend(v1, "initWithObjects:", objc_opt_class(CMAnomalyEvent, v2), 0);
}

void sub_100ED958C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100ED95B8(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

__n128 sub_100ED95E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021910F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100ED9620(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021910F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100ED9644(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100ED9694(a1 + 8, a2, a3);
}

uint64_t sub_100ED964C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ED9688()
{
}

void sub_100ED9694(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100ED9768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_100ED9784(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102191188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100ED97C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102191188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100ED97E4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100ED9834(a1 + 8, a2, a3);
}

uint64_t sub_100ED97EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ED9828()
{
}

void sub_100ED9834(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100ED98B8(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100ED98A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED98B8(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021911E8);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021911E8);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100ED9AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100ED9ABC(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100ED9AE8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100ED9B60(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100ED9B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100ED9B60(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100ED9DE0(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100ED9DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100ED9DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100ED9E54(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100ED9E3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100ED9E54(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100ED9EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED9EC8()
{
  sub_1015A2E04(qword_102308EE8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308EE8, (void *)&_mh_execute_header);
}

double sub_100ED9F0C(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 56);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(_OWORD *)((char *)a3 + 140);
  v9 = a3[7];
  v8 = a3[8];
  *(_OWORD *)(a1 + 104) = a3[6];
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 148) = v7;
  v11 = a3[4];
  v10 = a3[5];
  v12 = a3[3];
  *(_OWORD *)(a1 + 40) = a3[2];
  *(_OWORD *)(a1 + 56) = v12;
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  v13 = a3[1];
  *(_OWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 164) = v4;
  *(_DWORD *)(a1 + 168) = v5;
  *(double *)(a1 + 176) = result;
  *(_QWORD *)(a1 + 184) = a4;
  return result;
}

double sub_100ED9F70(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 84));
}

uint64_t sub_100ED9F98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double Current;
  double v5;
  _QWORD *v6;
  std::string *p_p;
  std::string::size_type size;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  std::string *v31;
  std::string::size_type v32;
  uint64_t v33;
  std::string __p;
  _QWORD v36[2];
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 84);
  sub_100263E50((uint64_t)v36);
  v6 = sub_100263F7C(&v37, (uint64_t)"mac, ", 5);
  sub_1000C2254((_QWORD *)a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_100263F7C(v6, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = sub_100263F7C(&v37, (uint64_t)", lat, ", 7);
  v10 = *v9;
  *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 16) = 8;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v9, *(double *)(a1 + 12));
  v11 = sub_100263F7C(&v37, (uint64_t)", lon, ", 7);
  v12 = *v11;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 16) = 8;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v11, *(double *)(a1 + 20));
  v13 = sub_100263F7C(&v37, (uint64_t)", alt, ", 7);
  v14 = *v13;
  *(uint64_t *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 16) = 1;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v13, *(double *)(a1 + 36));
  v15 = sub_100263F7C(&v37, (uint64_t)", acc, ", 7);
  v16 = *v15;
  *(uint64_t *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 16) = 1;
  *(_DWORD *)((char *)v15 + *(_QWORD *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v15, *(double *)(a1 + 28));
  v17 = sub_100263F7C(&v37, (uint64_t)", vacc, ", 8);
  v18 = *v17;
  *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 16) = 1;
  *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v17, *(double *)(a1 + 44));
  v19 = sub_100263F7C(&v37, (uint64_t)", channel, ", 11);
  v20 = *v19;
  *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 16) = 0;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(v20 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v19, *(unsigned int *)(a1 + 164));
  v21 = sub_100263F7C(&v37, (uint64_t)", rssi, ", 8);
  v22 = *v21;
  *(uint64_t *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 16) = 0;
  *(_DWORD *)((char *)v21 + *(_QWORD *)(v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(v22 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v21, *(unsigned int *)(a1 + 168));
  v23 = sub_100263F7C(&v37, (uint64_t)", locationTime, ", 16);
  v24 = *v23;
  *(uint64_t *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 16) = 1;
  *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v24 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v23, *(double *)(a1 + 84));
  v25 = sub_100263F7C(&v37, (uint64_t)", age, ", 7);
  v26 = *v25;
  *(uint64_t *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 16) = 4;
  *(_DWORD *)((char *)v25 + *(_QWORD *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  v27 = (_QWORD *)std::ostream::operator<<(v25, vabdd_f64(Current, v5) / 3600.0);
  sub_100263F7C(v27, (uint64_t)"h", 1);
  v28 = sub_100263F7C(&v37, (uint64_t)", scanTime, ", 12);
  v29 = *v28;
  *(uint64_t *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 16) = 1;
  *(_DWORD *)((char *)v28 + *(_QWORD *)(v29 - 24) + 8) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(v29 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v28, *(double *)(a1 + 176));
  v30 = sub_100263F7C(&v37, (uint64_t)", LOI, ", 7);
  sub_100217B20(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &__p;
  else
    v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v32 = __p.__r_.__value_.__l.__size_;
  sub_100263F7C(v30, (uint64_t)v31, v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str(a2, v38);
  *(_QWORD *)((char *)v36
  v37 = v33;
  if (v39 < 0)
    operator delete((void *)v38[8]);
  std::streambuf::~streambuf(v38);
  return std::ios::~ios(&v40);
}

void sub_100EDA3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_100EDA458(double a1)
{
  double v1;
  uint64_t v2;

  if (a1 > 7.5 || (v1 = 5.0, a1 <= 0.0))
  {
    v1 = 10.0;
    if (a1 > 20.0)
    {
      v1 = 30.0;
      if (a1 > 40.0)
      {
        if (a1 <= 75.0)
        {
          v2 = 0x4049000000000000;
        }
        else
        {
          v1 = 100.0;
          if (a1 <= 100.0)
            return v1;
          v1 = 150.0;
          if (a1 <= 150.0)
            return v1;
          if (a1 > 250.0)
          {
            v1 = 600.0;
            if (a1 <= 400.0)
              return 400.0;
            return v1;
          }
          v2 = 0x4069000000000000;
        }
        return *(double *)&v2;
      }
    }
  }
  return v1;
}

uint64_t sub_100EDA50C(const char *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  int v10;
  double Current;
  double v12;
  double v13;
  size_t v14;
  int v15;
  int v16;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unsigned __int8 v29;
  NSObject *v30;
  uint64_t result;
  NSObject *v32;
  double *v33;
  double v34;
  double *v35;
  NSObject *v36;
  NSObject *v37;
  double v38;
  double v39;
  NSDateComponents *v40;
  float v41;
  NSInteger v42;
  double v43;
  double v44;
  NSObject *v45;
  double v46;
  int v47;
  double v48;
  double v49;
  NSObject *v50;
  NSObject *v51;
  uint64_t v52;
  double v53;
  NSObject *v54;
  uint64_t v55;
  double v56;
  double v57;
  double *v58;
  uint64_t v59;
  const char *v60;
  char *v61;
  uint64_t v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 __str;
  uint64_t v68;
  _BYTE v69[12];
  _DWORD v70[7];
  _DWORD v71[398];
  double __src[65];
  __int128 v73[7];
  char v74;

  *a4 = 0;
  v10 = strlen(a1);
  if (!sub_100656D54((uint64_t)a1, v10))
  {
    v28 = strlen(a1);
    v29 = sub_100656D1C((uint64_t)a1, v28);
    snprintf((char *)&__str, 5uLL, "%X%X", v29 >> 4, v29 & 0xF);
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_102191250);
    v30 = qword_1022A0118;
    if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__src[0]) = 136380931;
      *(_QWORD *)((char *)__src + 4) = a1;
      WORD2(__src[1]) = 2082;
      *(_QWORD *)((char *)&__src[1] + 6) = &__str;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Accessory,bad checksum for NMEA sentence '%{private}s' - expected %{public}s", (uint8_t *)__src, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(__src, 0x65CuLL);
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_102191250);
    *(_DWORD *)v69 = 136380931;
    *(_QWORD *)&v69[4] = a1;
    LOWORD(v70[0]) = 2082;
    *(_QWORD *)((char *)v70 + 2) = &__str;
    LODWORD(v66) = 22;
    v57 = _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0118, 16, "Accessory,bad checksum for NMEA sentence '%{private}s' - expected %{public}s", v69, v66);
    v35 = v58;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &, CLNmeaScreener *)", "%s\n", v57);
    goto LABEL_108;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v12 = sub_100078B88();
  v13 = sub_1001FCBB4();
  v14 = strlen(a1);
  v15 = sub_100657484((uint64_t)v69, a1, v14);
  v16 = v15;
  if (v15 && v15 != 3)
  {
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_102191250);
    v32 = qword_1022A0118;
    if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Accessory,only GPGGA GPRMC supported", (uint8_t *)__src, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(__src, 0x65CuLL);
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_102191250);
      LOWORD(__str) = 0;
      v34 = _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0118, 0, "Accessory,only GPGGA GPRMC supported", &__str, 2, __str, v68);
      goto LABEL_27;
    }
    return result;
  }
  if (Current - *(double *)(a2 + 76) > 3.0)
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    *(_DWORD *)a2 = 0xFFFF;
    *(_QWORD *)(a2 + 12) = 0;
    *(_QWORD *)(a2 + 4) = 0;
    *(_OWORD *)(a2 + 20) = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a2 + 36) = _Q0;
    *(_OWORD *)(a2 + 52) = _Q0;
    *(_OWORD *)(a2 + 68) = _Q0;
    *(_DWORD *)(a2 + 84) = 0;
    *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 116) = 0xBFF0000000000000;
    *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
    sub_10012A33C(__src);
    memcpy((void *)a3, __src, 0x201uLL);
    sub_1002B7674(a3 + 520, v73);
    v22 = v73[6];
    *(_OWORD *)(a3 + 600) = v73[5];
    *(_OWORD *)(a3 + 616) = v22;
    *(_BYTE *)(a3 + 632) = v74;
    v23 = v73[2];
    *(_OWORD *)(a3 + 536) = v73[1];
    *(_OWORD *)(a3 + 552) = v23;
    v24 = v73[4];
    *(_OWORD *)(a3 + 568) = v73[3];
    *(_OWORD *)(a3 + 584) = v24;
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v73[0] + 1);
    if (*((_QWORD *)&v73[0] + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v73[0] + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  if (v16 != 3)
  {
    if (!v16)
      sub_100EDB370((uint64_t)v69, a2, a3, (uint64_t)&unk_102308F10, a4);
    return 0;
  }
  result = sub_100657478((uint64_t)v69, 1u);
  if (!(_DWORD)result)
    return result;
  result = sub_100657478((uint64_t)v69, 0x40u);
  if (!(_DWORD)result)
    return result;
  result = sub_100657478((uint64_t)v69, 4u);
  if (!(_DWORD)result)
    return result;
  result = sub_100657478((uint64_t)v69, 8u);
  if (!(_DWORD)result)
    return result;
  result = sub_100657478((uint64_t)v69, 2u);
  if (!(_DWORD)result)
    return result;
  if (v70[0] != 88 && v70[0] != 65)
    return 0;
  if (sub_100657478((uint64_t)v69, 0x200u) && v71[13] == 78)
  {
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_102191250);
    v36 = qword_1022A0118;
    if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Accessory,GPRMC, invalid mode indicator", (uint8_t *)__src, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(__src, 0x65CuLL);
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_102191250);
      LOWORD(__str) = 0;
      v34 = _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0118, 0, "Accessory,GPRMC, invalid mode indicator", &__str, 2, __str, v68);
LABEL_27:
      v35 = v33;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &, CLNmeaScreener *)", "%s\n", v34);
LABEL_108:
      if (v35 != __src)
        free(v35);
      return 0;
    }
    return result;
  }
  if (qword_102308F1C != *(_QWORD *)v69 || vabds_f32(*(float *)&dword_102308F24, *(float *)&v69[8]) > 0.001)
  {
    qword_102308F1C = *(_QWORD *)v69;
    dword_102308F24 = *(_DWORD *)&v69[8];
    v38 = sub_10065739C((uint64_t)&v70[1]);
    v39 = sub_10065739C((uint64_t)v71);
    v40 = -[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 252, +[NSDate date](NSDate, "date"));
    -[NSDateComponents setYear:](v40, "setYear:", v71[10] + 2000);
    -[NSDateComponents setMonth:](v40, "setMonth:", v71[9]);
    -[NSDateComponents setDay:](v40, "setDay:", v71[8]);
    -[NSDateComponents setHour:](v40, "setHour:", *(int *)v69);
    -[NSDateComponents setMinute:](v40, "setMinute:", *(int *)&v69[4]);
    -[NSDateComponents setSecond:](v40, "setSecond:", (uint64_t)*(float *)&v69[8]);
    v41 = *(float *)&v69[8];
    v42 = -[NSDateComponents second](v40, "second");
    -[NSDateComponents setTimeZone:](v40, "setTimeZone:", +[NSTimeZone timeZoneForSecondsFromGMT:](NSTimeZone, "timeZoneForSecondsFromGMT:", 0));
    -[NSDate timeIntervalSinceReferenceDate](-[NSCalendar dateFromComponents:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "dateFromComponents:", v40), "timeIntervalSinceReferenceDate");
    v44 = v43;
    if (sub_10011CE64(v38, v39))
    {
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_102191250);
      v45 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__src[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#Warning Accessory,null island,not allowed", (uint8_t *)__src, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(__src, 0x65CuLL);
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_102191250);
        LOWORD(__str) = 0;
        v34 = _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0118, 0, "#Warning Accessory,null island,not allowed", &__str, 2, __str, v68);
        goto LABEL_27;
      }
      return result;
    }
    v46 = v44 + (float)(v41 - (float)v42);
    if (v70[0] == 88)
      v47 = 2;
    else
      v47 = 1;
    *(_DWORD *)(a2 + 132) = v47;
    if (a5 && !sub_100753F2C(a5, 3, v47, 1, v38, v39, v46))
    {
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_102191250);
      v50 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__src[0]) = 134349056;
        *(double *)((char *)__src + 4) = v46;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "GPRMC NMEA Screening failed,dataAbsTimeStamp, %{public}.1lf", (uint8_t *)__src, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(__src, 0x65CuLL);
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_102191250);
        LODWORD(__str) = 134349056;
        *(double *)((char *)&__str + 4) = v46;
        v34 = _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0118, 0, "GPRMC NMEA Screening failed,dataAbsTimeStamp, %{public}.1lf", &__str, 12, __str, v68);
        goto LABEL_27;
      }
      return result;
    }
    *(double *)(a2 + 76) = Current;
    *(double *)(a2 + 4) = v38;
    *(double *)(a2 + 12) = v39;
    if (sub_100657478((uint64_t)v69, 0x10u))
    {
      v48 = 0.277777778 * (1.852 * ((double)v71[6] / 10.0));
      *(double *)(a2 + 44) = v48;
      if (v48 < 0.0 || v48 > 600.0)
      {
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_102191250);
        v51 = qword_1022A0118;
        if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
        {
          v52 = *(_QWORD *)(a2 + 44);
          LODWORD(__src[0]) = 134283521;
          *(_QWORD *)((char *)__src + 4) = v52;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Invalid speed,%{private}.3lf", (uint8_t *)__src, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1022A0110 != -1)
            dispatch_once(&qword_1022A0110, &stru_102191250);
          v59 = *(_QWORD *)(a2 + 44);
          LODWORD(__str) = 134283521;
          *(_QWORD *)((char *)&__str + 4) = v59;
          _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0118, 0, "Invalid speed,%{private}.3lf", &__str, 12);
          v61 = (char *)v60;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &, CLNmeaScreener *)", "%s\n", v60);
          if (v61 != (char *)__src)
            free(v61);
        }
        *(_QWORD *)(a2 + 44) = 0xBFF0000000000000;
        v49 = -1.0;
      }
      else
      {
        v49 = 0.2;
      }
      *(double *)(a2 + 52) = v49;
    }
    if (sub_100657478((uint64_t)v69, 0x20u))
    {
      v53 = (double)v71[7] / 10.0;
      *(double *)(a2 + 60) = v53;
      if (v53 < 0.0 || v53 >= 360.0)
      {
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_102191250);
        v54 = qword_1022A0118;
        if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
        {
          v55 = *(_QWORD *)(a2 + 60);
          LODWORD(__src[0]) = 134283521;
          *(_QWORD *)((char *)__src + 4) = v55;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Invalid course,%{private}.3lf", (uint8_t *)__src, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1022A0110 != -1)
            dispatch_once(&qword_1022A0110, &stru_102191250);
          v62 = *(_QWORD *)(a2 + 60);
          LODWORD(__str) = 134283521;
          *(_QWORD *)((char *)&__str + 4) = v62;
          LODWORD(v65) = 12;
          _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0118, 0, "Invalid course,%{private}.3lf", &__str, v65);
          v64 = (char *)v63;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &, CLNmeaScreener *)", "%s\n", v63);
          if (v64 != (char *)__src)
            free(v64);
        }
        *(_QWORD *)(a2 + 60) = 0xBFF0000000000000;
LABEL_101:
        *(double *)(a3 + 24) = v46;
        *(double *)(a3 + 32) = v12;
        *(double *)(a3 + 344) = v13;
        *(_DWORD *)(a2 + 84) = 99;
        if (*(double *)(a2 + 20) <= 0.0)
          *(_QWORD *)(a2 + 20) = 0x4024000000000000;
        return 1;
      }
    }
    else
    {
      v53 = *(double *)(a2 + 60);
    }
    v56 = *(double *)(a2 + 44);
    if (v56 >= 0.0 && v53 >= 0.0)
      *(double *)(a2 + 68) = sub_1005170B4(v56);
    goto LABEL_101;
  }
  if (qword_1022A0110 != -1)
    dispatch_once(&qword_1022A0110, &stru_102191250);
  v37 = qword_1022A0118;
  if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__src[0]) = 67109632;
    HIDWORD(__src[0]) = *(_DWORD *)v69;
    LOWORD(__src[1]) = 1024;
    *(_DWORD *)((char *)&__src[1] + 2) = *(_DWORD *)&v69[4];
    HIWORD(__src[1]) = 2048;
    __src[2] = *(float *)&v69[8];
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning Accessory,repeated GPRMC timestamp at,hhmmss,%02d%02d%02.1f", (uint8_t *)__src, 0x18u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(__src, 0x65CuLL);
    if (qword_1022A0110 != -1)
      dispatch_once(&qword_1022A0110, &stru_102191250);
    v34 = _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0118, 0, "#Warning Accessory,repeated GPRMC timestamp at,hhmmss,%02d%02d%02.1f", &__str);
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_100EDB370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  NSObject *v11;
  int v12;
  int v13;
  double v14;
  const char *v15;
  CFAbsoluteTime Current;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  NSObject *v22;
  char *v23;
  double v24;
  double v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  int v31;
  uint64_t v32;
  _BYTE buf[14];
  __int16 v34;
  double v35;

  *a5 = 0;
  result = sub_100657478(a1, 1u);
  if ((_DWORD)result)
  {
    result = sub_100657478(a1, 8u);
    if ((_DWORD)result)
    {
      if (*(int *)(a1 + 64) < 1)
        return 0;
      result = sub_100657478(a1, 2u);
      if ((_DWORD)result)
      {
        result = sub_100657478(a1, 4u);
        if ((_DWORD)result)
        {
          if (*(_DWORD *)a4 == *(_DWORD *)a1
            && *(_DWORD *)(a4 + 4) == *(_DWORD *)(a1 + 4)
            && vabds_f32(*(float *)(a4 + 8), *(float *)(a1 + 8)) <= 0.001)
          {
            if (qword_1022A0110 != -1)
              dispatch_once(&qword_1022A0110, &stru_102191250);
            v11 = qword_1022A0118;
            if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
            {
              v12 = *(_DWORD *)a1;
              v13 = *(_DWORD *)(a1 + 4);
              v14 = *(float *)(a1 + 8);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = v12;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v13;
              v34 = 2048;
              v35 = v14;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Accessory,repeated GPGGA timestamp at,hhmmss,%02d%02d%02.1f", buf, 0x18u);
            }
            result = sub_1001BFF7C(115, 2);
            if ((_DWORD)result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0110 != -1)
                dispatch_once(&qword_1022A0110, &stru_102191250);
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 0, "#Warning Accessory,repeated GPGGA timestamp at,hhmmss,%02d%02d%02.1f", &v31);
LABEL_26:
              v23 = (char *)v15;
              sub_100512490("Generic", 1, 0, 2, "BOOL extractLocationInfoFromGga(const CLNmeaGGA &, CLDaemonLocation &, CLDaemonLocationPrivate &, BOOL, CLNmeaTimestamp &, CLNmeaGpsFixQuality &)", "%s\n", v15);
              if (v23 != buf)
                free(v23);
              return 0;
            }
          }
          else
          {
            Current = CFAbsoluteTimeGetCurrent();
            v17 = sub_100078B88();
            v18 = sub_1001FCBB4();
            v19 = sub_10065739C(a1 + 16);
            v20 = sub_10065739C(a1 + 40);
            *a5 = *(_DWORD *)(a1 + 64);
            v21 = *(_QWORD *)a1;
            *(_DWORD *)(a4 + 8) = *(_DWORD *)(a1 + 8);
            *(_QWORD *)a4 = v21;
            *(CFAbsoluteTime *)(a2 + 76) = Current;
            *(double *)(a3 + 32) = v17;
            *(double *)(a3 + 344) = v18;
            *(double *)(a2 + 4) = v19;
            *(double *)(a2 + 12) = v20;
            *(_DWORD *)(a2 + 132) = 1;
            if (sub_10011CE64(v19, v20))
            {
              if (qword_1022A0110 != -1)
                dispatch_once(&qword_1022A0110, &stru_102191250);
              v22 = qword_1022A0118;
              if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Accessory,null island,not allowed", buf, 2u);
              }
              result = sub_1001BFF7C(115, 2);
              if ((_DWORD)result)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0110 != -1)
                  dispatch_once(&qword_1022A0110, &stru_102191250);
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 0, "#Warning Accessory,null island,not allowed");
                goto LABEL_26;
              }
            }
            else
            {
              *(_DWORD *)(a2 + 84) = 99;
              if (sub_100657478(a1, 0x40u))
              {
                v24 = (double)*(int *)(a1 + 76) / 10.0;
                *(double *)(a2 + 28) = v24;
              }
              else
              {
                v24 = *(double *)(a2 + 28);
              }
              if (sub_10011E234(v24))
              {
                if (sub_100657478(a1, 0x20u))
                {
                  *(double *)buf = (double)*(int *)(a1 + 72) / 10.0;
                  v25 = sub_100EDBCE4((double *)buf);
                }
                else
                {
                  v25 = 10.0;
                }
                *(double *)(a2 + 20) = v25;
                *(double *)(a2 + 36) = v25 * 1.9;
                return 1;
              }
              else
              {
                if (qword_1022A0110 != -1)
                  dispatch_once(&qword_1022A0110, &stru_102191250);
                v26 = qword_1022A0118;
                if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
                {
                  v27 = *(_QWORD *)(a2 + 28);
                  *(_DWORD *)buf = 134283521;
                  *(_QWORD *)&buf[4] = v27;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Accessory,invalid altitude,%{private}.3lf", buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0110 != -1)
                    dispatch_once(&qword_1022A0110, &stru_102191250);
                  v28 = *(_QWORD *)(a2 + 28);
                  v31 = 134283521;
                  v32 = v28;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 0, "Accessory,invalid altitude,%{private}.3lf", &v31, 12);
                  v30 = (char *)v29;
                  sub_100512490("Generic", 1, 0, 2, "BOOL extractLocationInfoFromGga(const CLNmeaGGA &, CLDaemonLocation &, CLDaemonLocationPrivate &, BOOL, CLNmeaTimestamp &, CLNmeaGpsFixQuality &)", "%s\n", v29);
                  if (v30 != buf)
                    free(v30);
                }
                result = 0;
                *(_QWORD *)(a2 + 28) = 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100EDB934(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  const char *v7;
  int v8;
  size_t v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  int v14;
  unsigned __int8 v15;
  NSObject *v16;
  double v17;
  uint8_t *v18;
  uint64_t v19;
  char __str[16];
  int v21;
  const char *v22;
  __int16 v23;
  char *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;

  *a4 = 0;
  if (result)
  {
    v7 = (const char *)result;
    v8 = strlen((const char *)result);
    if (!sub_100656D54((uint64_t)v7, v8))
    {
      v14 = strlen(v7);
      v15 = sub_100656D1C((uint64_t)v7, v14);
      snprintf(__str, 5uLL, "%X%X", v15 >> 4, v15 & 0xF);
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_102191250);
      v16 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136380931;
        v26 = v7;
        v27 = 2082;
        v28 = __str;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Accessory,bad checksum for NMEA sentence '%{private}s' - expected %{public}s", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_102191250);
      v21 = 136380931;
      v22 = v7;
      v23 = 2082;
      v24 = __str;
      LODWORD(v19) = 22;
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 16, "Accessory,bad checksum for NMEA sentence '%{private}s' - expected %{public}s", &v21, v19);
      v13 = v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLNmeaLocationGga(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &)", "%s\n", v17);
LABEL_23:
      if (v13 != buf)
        free(v13);
      return 0;
    }
    v9 = strlen(v7);
    if (sub_100657484((uint64_t)&v21, v7, v9))
    {
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_102191250);
      v10 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Accessory,only GPGGA supported", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_102191250);
        *(_WORD *)__str = 0;
        v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 0, "Accessory,only GPGGA supported", __str, 2);
        v13 = v12;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaLocationGga(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &)", "%s\n", v11);
        goto LABEL_23;
      }
    }
    else
    {
      return sub_100EDB370((uint64_t)&v21, a2, a3, (uint64_t)&unk_102308F28, a4);
    }
  }
  return result;
}

void sub_100EDBCB8(id a1)
{
  qword_1022A0118 = (uint64_t)os_log_create("com.apple.locationd.Position", "NMEA");
}

double sub_100EDBCE4(double *a1)
{
  unsigned __int8 v1;
  double v2;
  uint64_t v3;
  double *v4;
  double *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v1 = atomic_load((unsigned __int8 *)&qword_102308F90);
  if ((v1 & 1) == 0)
  {
    v6 = a1;
    v7 = __cxa_guard_acquire(&qword_102308F90);
    a1 = v6;
    if (v7)
    {
      qword_102308F38 = (uint64_t)off_10213D2B0;
      xmmword_102308F48 = 0u;
      unk_102308F58 = 0u;
      xmmword_102308F68 = 0u;
      qword_102308F88 = 0;
      qword_102308F80 = 0;
      qword_102308F78 = (uint64_t)&qword_102308F80;
      dword_102308F40 = 0;
      __cxa_atexit((void (*)(void *))sub_100479F9C, &qword_102308F38, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102308F90);
      a1 = v6;
    }
  }
  v9 = 0x4024000000000000;
  if (*a1 > 0.0)
  {
    v2 = *a1 * 7.0;
    v9 = *(_QWORD *)&v2;
    if (v2 >= 5.0)
    {
      v3 = 0x4049000000000000;
      if (v2 <= 50.0)
        goto LABEL_7;
    }
    else
    {
      v3 = 0x4014000000000000;
    }
    v9 = v3;
  }
LABEL_7:
  v8 = 0;
  sub_10009E858((uint64_t)&qword_102308F38, (double *)&v9);
  if (sub_10009E784(&qword_102308F38, 2, &v8))
    v4 = (double *)&v8;
  else
    v4 = (double *)&v9;
  return sub_100EDA458(*v4);
}

uint64_t sub_100EDC410(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  ALSLocation *v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  _QWORD v48[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 8u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_80;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_82;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_80:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_82:
        v47 = 32;
        goto LABEL_111;
      case 3u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 0x40u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_86:
        v47 = 44;
        goto LABEL_111;
      case 4u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 0x10u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_90:
        v47 = 36;
        goto LABEL_111;
      case 5u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_94:
        v47 = 12;
        goto LABEL_111;
      case 6u:
        v30 = objc_alloc_init(ALSLocation);

        *(_QWORD *)(a1 + 24) = v30;
        v48[0] = 0;
        v48[1] = 0;
        if (PBReaderPlaceMark(a2, v48) && (sub_100F02DFC((uint64_t)v30, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v48);
LABEL_112:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      case 7u:
        v31 = 0;
        v32 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 0x80u;
        while (2)
        {
          v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v14 |= (unint64_t)(v34 & 0x7F) << v31;
            if (v34 < 0)
            {
              v31 += 7;
              v9 = v32++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_98:
        v47 = 48;
        goto LABEL_111;
      case 8u:
        v35 = 0;
        v36 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (2)
        {
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v14 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_102:
        v47 = 8;
        goto LABEL_111;
      case 9u:
        v39 = 0;
        v40 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v14 |= (unint64_t)(v42 & 0x7F) << v39;
            if (v42 < 0)
            {
              v39 += 7;
              v9 = v40++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_106:
        v47 = 16;
        goto LABEL_111;
      case 0xAu:
        v43 = 0;
        v44 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 0x20u;
        while (2)
        {
          v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 == -1 || v45 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
            v14 |= (unint64_t)(v46 & 0x7F) << v43;
            if (v46 < 0)
            {
              v43 += 7;
              v9 = v44++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_110:
        v47 = 40;
LABEL_111:
        *(_DWORD *)(a1 + v47) = v14;
        goto LABEL_112;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_112;
    }
  }
}

uint64_t sub_100EDE230(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v5 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v6 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v8 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v15 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0)
          goto LABEL_12;
        v16 += 7;
        v22 = v17++ >= 9;
        if (v22)
        {
          v18 = 0;
          v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_14:
      if (v23 || (v18 & 7) == 4)
        break;
      switch((v18 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + v4[571]) |= 0x8000u;
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v5[572];
          goto LABEL_151;
        case 2u:
          v34 = 0;
          v35 = 0;
          v36 = 0;
          *(_DWORD *)(a1 + v4[571]) |= 0x100000u;
          while (2)
          {
            v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                v22 = v35++ >= 9;
                if (v22)
                {
                  LODWORD(v36) = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v36) = 0;
LABEL_103:
          v72 = v6[573];
          goto LABEL_116;
        case 3u:
          *(_DWORD *)(a1 + v4[571]) |= 2u;
          v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v7[574];
          goto LABEL_151;
        case 4u:
          v41 = 0;
          v42 = 0;
          v43 = 0;
          *(_DWORD *)(a1 + v4[571]) |= 0x1000u;
          while (2)
          {
            v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
              v43 |= (unint64_t)(v46 & 0x7F) << v41;
              if (v46 < 0)
              {
                v41 += 7;
                v22 = v42++ >= 9;
                if (v22)
                {
                  v43 = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v43 = 0;
LABEL_107:
          *(_QWORD *)(a1 + v8[575]) = v43;
          continue;
        case 5u:
          *(_DWORD *)(a1 + v4[571]) |= 0x400u;
          v47 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v9[576];
          goto LABEL_151;
        case 6u:
          *(_DWORD *)(a1 + v4[571]) |= 0x100u;
          v48 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v10[577];
          goto LABEL_151;
        case 7u:
          *(_DWORD *)(a1 + v4[571]) |= 0x200u;
          v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v11[578];
          goto LABEL_151;
        case 8u:
          *(_DWORD *)(a1 + v4[571]) |= 0x40u;
          v50 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v12[579];
          goto LABEL_151;
        case 9u:
          *(_DWORD *)(a1 + v4[571]) |= 0x10u;
          v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v13[580];
          goto LABEL_151;
        case 0xAu:
          *(_DWORD *)(a1 + v4[571]) |= 0x10000u;
          v52 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v14[581];
          goto LABEL_151;
        case 0xBu:
          *(_DWORD *)(a1 + v4[571]) |= 0x2000u;
          v53 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = v15[582];
          goto LABEL_151;
        case 0xCu:
          *(_DWORD *)(a1 + v4[571]) |= 4u;
          v54 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = 24;
          goto LABEL_151;
        case 0xDu:
          *(_DWORD *)(a1 + v4[571]) |= 1u;
          v55 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = 8;
          goto LABEL_151;
        case 0xEu:
          *(_DWORD *)(a1 + v4[571]) |= 0x800u;
          v56 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = 96;
          goto LABEL_151;
        case 0xFu:
          *(_DWORD *)(a1 + v4[571]) |= 0x80u;
          v57 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = 64;
          goto LABEL_151;
        case 0x10u:
          *(_DWORD *)(a1 + v4[571]) |= 0x20u;
          v58 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v58 <= 0xFFFFFFFFFFFFFFF7 && v58 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = 48;
          goto LABEL_151;
        case 0x11u:
          *(_DWORD *)(a1 + v4[571]) |= 0x20000u;
          v59 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v59 <= 0xFFFFFFFFFFFFFFF7 && v59 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v59 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = 144;
          goto LABEL_151;
        case 0x12u:
          *(_DWORD *)(a1 + v4[571]) |= 0x4000u;
          v60 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v60 <= 0xFFFFFFFFFFFFFFF7 && v60 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = 120;
          goto LABEL_151;
        case 0x13u:
          *(_DWORD *)(a1 + v4[571]) |= 8u;
          v61 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v73 = 32;
LABEL_151:
          *(_QWORD *)(a1 + v73) = v26;
          continue;
        case 0x14u:
          v62 = 0;
          v63 = 0;
          v36 = 0;
          *(_DWORD *)(a1 + v4[571]) |= 0x80000u;
          while (2)
          {
            v64 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v65 = v64 + 1;
            if (v64 == -1 || v65 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v66 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65;
              v36 |= (unint64_t)(v66 & 0x7F) << v62;
              if (v66 < 0)
              {
                v62 += 7;
                v22 = v63++ >= 9;
                if (v22)
                {
                  LODWORD(v36) = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v36) = 0;
LABEL_111:
          v72 = 156;
          goto LABEL_116;
        case 0x15u:
          v67 = 0;
          v68 = 0;
          v36 = 0;
          *(_DWORD *)(a1 + v4[571]) |= 0x40000u;
          break;
        default:
          v27 = v5;
          v28 = v6;
          v29 = v4;
          v30 = v7;
          v31 = v8;
          v32 = a1;
          result = PBReaderSkipValueWithTag(a2);
          v15 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          a1 = v32;
          v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v8 = v31;
          v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v7 = v30;
          v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v4 = v29;
          v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v6 = v28;
          v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v5 = v27;
          v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v69 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v70 = v69 + 1;
        if (v69 == -1 || v70 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v71 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v70;
        v36 |= (unint64_t)(v71 & 0x7F) << v67;
        if ((v71 & 0x80) == 0)
          goto LABEL_113;
        v67 += 7;
        v22 = v68++ >= 9;
        if (v22)
        {
          LODWORD(v36) = 0;
          goto LABEL_115;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_113:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v36) = 0;
LABEL_115:
      v72 = 152;
LABEL_116:
      *(_DWORD *)(a1 + v72) = v36;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100EE0850(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char v31;

  *(_QWORD *)a1 = off_102191280;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_WORD *)(a1 + 24) = sub_100E3C608();
  *(_WORD *)(a1 + 26) = sub_100E3C6A0();
  v19 = sub_100E3C738();
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = *a2;
  *(float *)(a1 + 28) = v19;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xBFF0000000000000;
  v20 = a2[1];
  *(_QWORD *)(a1 + 80) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = a3[1];
  *(_QWORD *)(a1 + 88) = *a3;
  *(_QWORD *)(a1 + 96) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = a4[1];
  *(_QWORD *)(a1 + 104) = *a4;
  *(_QWORD *)(a1 + 112) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  sub_100270E34(a1 + 120, a5);
  sub_100270E34(a1 + 152, a6);
  sub_100270E34(a1 + 184, a7);
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 237) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_101C2DC38;
  *(_OWORD *)(a1 + 264) = unk_101C2DC48;
  *(_OWORD *)(a1 + 280) = xmmword_101C2DC58;
  *(_OWORD *)(a1 + 292) = *(__int128 *)((char *)&xmmword_101C2DC58 + 12);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  sub_100197040();
  if (sub_100241620() && sub_1001FD8B8(*(_QWORD *)(a1 + 104)) > 0.0)
  {
    v29 = *(_QWORD *)(a1 + 208);
    if (v29)
    {
      v31 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v29 + 48))(v29, &v31);
    }
  }
  return a1;
}

void sub_100EE0A0C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (_QWORD *)v1[22];
  if (v8 == v6)
  {
    v9 = 4;
    v8 = v6;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = (_QWORD *)v1[18];
  if (v10 == v5)
  {
    v11 = 4;
    v10 = v5;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  sub_100261F44(v4);
  sub_100261F44(v3);
  sub_100261F44(v2);
  v12 = v1[5];
  v1[5] = 0;
  if (v12)
    operator delete();
  _Unwind_Resume(a1);
}

uint64_t sub_100EE0B08(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return sub_100B04B18(result, &v3);
  return result;
}

void sub_100EE0B34(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (sub_100EE0EDC(a1, a2))
  {
    if (!*(_QWORD *)(a1 + 40))
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v6 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Background escalation manager starting to track escalation", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Background escalation manager starting to track escalation", v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::onEscalationAndLabelUpdate(CFAbsoluteTime, CMWorkoutType)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      *(CFAbsoluteTime *)(a1 + 48) = CFAbsoluteTimeGetCurrent();
      operator new();
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Background escalation manager already tracking escalation", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background escalation manager already tracking escalation", v9, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::onEscalationAndLabelUpdate(CFAbsoluteTime, CMWorkoutType)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    sub_100EE0F98(a1);
  }
}

void sub_100EE0EB0()
{
  operator delete();
}

BOOL sub_100EE0EDC(uint64_t a1, uint64_t a2)
{
  return (sub_1001FD8B8(*(_QWORD *)(a1 + 72)) > 0.0 || sub_1001FD8B8(*(_QWORD *)(a1 + 88)) > 0.0)
      && *(_BYTE *)(a1 + 32)
      && (a2 == 15 || a2 == 1)
      && (*(_DWORD *)(a1 + 216) - 3) < 0xFFFFFFFE;
}

uint64_t sub_100EE0F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;

  v10 = a5;
  v8 = a3;
  v9 = a2;
  v7 = a4;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, double *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t sub_100EE0F98(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  double Current;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  _BYTE buf[12];
  __int16 v17;
  uint64_t v18;

  if (*(_DWORD *)(result + 216) == 3)
  {
    v1 = result;
    *(CFAbsoluteTime *)(result + 16) = CFAbsoluteTimeGetCurrent();
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(v1 + 8);
      v4 = *(_QWORD *)(v1 + 16);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v3;
      v17 = 2050;
      v18 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Background escalation manager stopped tracking escalation,fRecoveryStartTime,%{public}f,fRecoveryEndTime,%{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v8 = *(_QWORD *)(v1 + 8);
      v9 = *(_QWORD *)(v1 + 16);
      v12 = 134349312;
      v13 = v8;
      v14 = 2050;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Background escalation manager stopped tracking escalation,fRecoveryStartTime,%{public}f,fRecoveryEndTime,%{public}f", &v12, 22);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::stopTrackingVO2MaxEscalation()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    if (*(_QWORD *)(v1 + 144) && !*(_BYTE *)(v1 + 34))
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_100EE0F4C(v1 + 120, 1, 0, *(_QWORD *)(v1 + 64), Current);
    }
    *(_QWORD *)buf = 3;
    v6 = *(_QWORD *)(v1 + 40);
    if (v6)
    {
      sub_100B04B18(v6, buf);
      v7 = *(_QWORD *)(v1 + 40);
      *(_QWORD *)(v1 + 40) = 0;
      if (v7)
        operator delete();
    }
    else
    {
      *(_QWORD *)(v1 + 40) = 0;
    }
    *(_QWORD *)(v1 + 48) = 0xBFF0000000000000;
    *(_QWORD *)(v1 + 64) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 24))(*(_QWORD *)(v1 + 72));
    sub_1009FCEA4(*(_QWORD *)(v1 + 72));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 88) + 24))(*(_QWORD *)(v1 + 88));
    result = sub_1009FCEA4(*(_QWORD *)(v1 + 88));
    *(_QWORD *)(v1 + 56) = 0;
    *(_BYTE *)(v1 + 34) = 0;
    *(_DWORD *)(v1 + 216) = 0;
  }
  return result;
}

uint64_t sub_100EE1228(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  _OWORD *v5;
  NSObject *v11;
  _BOOL4 v12;
  double v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  double Current;
  NSObject *v21;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  _BOOL4 v26;
  BOOL v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _BYTE v38[10];
  __int16 v39;
  int v40;
  uint8_t buf[4];
  _BYTE v42[10];
  __int16 v43;
  int v44;

  v36 = 0;
  if ((sub_1001FD8B8(*(_QWORD *)(a1 + 72)) > 0.0 || sub_1001FD8B8(*(_QWORD *)(a1 + 88)) > 0.0) && *(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      v3 = sub_100B05664(v2, &v36);
      v4 = v3;
      v5 = *(_OWORD **)(a1 + 40);
      if (!v5 || !v3)
        goto LABEL_22;
      *(_OWORD *)(a1 + 8) = *v5;
      __asm { FMOV            V0.2D, #-1.0 }
      *v5 = _Q0;
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v12 = sub_1001FD8B8(*(_QWORD *)(a1 + 72)) > 0.0;
      v13 = sub_1001FD8B8(*(_QWORD *)(a1 + 88));
      v14 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v42 = v12;
      *(_WORD *)&v42[4] = 1026;
      *(_DWORD *)&v42[6] = v13 > 0.0;
      v43 = 1026;
      v44 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Background escalation manager should deescalate,hasVO2MaxBudget,%{public}d,hasExtendedBudget,%{public}d,hasPermission,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v25 = qword_10229FE68;
      v26 = sub_1001FD8B8(*(_QWORD *)(a1 + 72)) > 0.0;
      v27 = sub_1001FD8B8(*(_QWORD *)(a1 + 88)) <= 0.0;
      v28 = *(unsigned __int8 *)(a1 + 32);
      v29 = !v27;
      v37 = 67240704;
      *(_DWORD *)v38 = v26;
      *(_WORD *)&v38[4] = 1026;
      *(_DWORD *)&v38[6] = v29;
      v39 = 1026;
      v40 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 0, "Background escalation manager should deescalate,hasVO2MaxBudget,%{public}d,hasExtendedBudget,%{public}d,hasPermission,%{public}d", &v37, 20);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    v15 = 6;
    if (*(_BYTE *)(a1 + 32))
      v15 = 7;
    v36 = v15;
    v16 = *(_QWORD **)(a1 + 40);
    if (v16)
    {
      *(_QWORD *)(a1 + 8) = *v16;
      *v16 = 0xBFF0000000000000;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v17 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)v42 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Background Escalation Manager, HRRecovery startTime set to %{public}.1f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v32 = *(_QWORD *)(a1 + 8);
        v37 = 134349056;
        *(_QWORD *)v38 = v32;
        LODWORD(v35) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Background Escalation Manager, HRRecovery startTime set to %{public}.1f", &v37, v35);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
    }
  }
  v4 = 1;
LABEL_22:
  if (*(_DWORD *)(a1 + 216) == 3)
  {
    v19 = *(_QWORD *)(a1 + 144) ? v4 : 0;
    if (v19 == 1 && !*(_BYTE *)(a1 + 34))
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_100EE0F4C(a1 + 120, 1, v36, *(_QWORD *)(a1 + 64), Current);
      *(_BYTE *)(a1 + 34) = 1;
    }
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021912C0);
  v21 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v42 = v4;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Background Escalation Manager,shouldDeescalate,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v37 = 67240192;
    *(_DWORD *)v38 = v4;
    LODWORD(v35) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Background Escalation Manager,shouldDeescalate,%{public}d", &v37, v35);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  return v4;
}

uint64_t sub_100EE17B4(uint64_t a1, double a2)
{
  sub_1009FCC98(*(_QWORD *)(a1 + 72), a2);
  return sub_1009FCEA4(*(_QWORD *)(a1 + 72));
}

uint64_t sub_100EE17DC(uint64_t a1, double a2)
{
  sub_1009FCC98(*(_QWORD *)(a1 + 88), a2);
  return sub_1009FCEA4(*(_QWORD *)(a1 + 88));
}

uint64_t sub_100EE1804(uint64_t a1, double a2)
{
  uint64_t v4;
  char v6;

  if (a2 > 0.0)
  {
    v4 = *(_QWORD *)(a1 + 208);
    if (v4)
    {
      v6 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, &v6);
    }
  }
  sub_1009FCC98(*(_QWORD *)(a1 + 104), a2);
  return sub_1009FCEA4(*(_QWORD *)(a1 + 104));
}

void sub_100EE1870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    sub_100B05864(v2, a2);
}

double sub_100EE1880(uint64_t a1, double a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 56);
  if (!v2)
    return 0.0;
  LODWORD(a2) = *(_DWORD *)(a1 + 60);
  return fmin((double)*(unint64_t *)&a2 / (double)v2, 1.0);
}

uint64_t sub_100EE18AC(uint64_t a1, double a2)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  double v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  double v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  double v18;

  if (*(_DWORD *)(a1 + 336) != 3 || a2 - *(double *)(a1 + 48) <= 30.0)
    return 0;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021912C0);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v5 = *(double *)(a1 + 48);
    *(_DWORD *)buf = 134349312;
    v16 = v5;
    v17 = 2050;
    v18 = a2 - v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Background Stairs Escalation Manager, time of escalation : %{public}.1f, escalation duration: %{public}.1f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v8 = *(double *)(a1 + 48);
    v11 = 134349312;
    v12 = v8;
    v13 = 2050;
    v14 = a2 - v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Background Stairs Escalation Manager, time of escalation : %{public}.1f, escalation duration: %{public}.1f", &v11, 22);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationManager::checkForCoreAnalyticsEscalationTimeLimit(CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232))
    ++*(_DWORD *)(a1 + 240);
  v6 = 1;
  sub_1001FE080(a1, 1);
  return v6;
}

void sub_100EE1ADC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  NSObject *v11;
  int v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  _QWORD v32[5];
  float v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[28];
  BOOL v37;
  BOOL v38;
  BOOL v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[28];
  _DWORD v43[2];
  __int16 v44;
  int v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  unint64_t v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  _BOOL4 v87;
  __int16 v88;
  _BOOL4 v89;
  __int128 buf;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  unint64_t v95;
  __int16 v96;
  double v97;
  __int16 v98;
  double v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  _BOOL4 v131;
  __int16 v132;
  _BOOL4 v133;

  if (objc_opt_class(MCProfileConnection, a2)
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_102308FE8);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_102308FE8))
    {
      buf = xmmword_101C2DC74;
      v91 = 2.1990238e12;
      sub_10041C4B4(&qword_102308FD0, &buf, 6uLL);
      __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102308FD0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102308FE8);
    }
    v4 = atomic_load((unsigned __int8 *)&qword_102309008);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102309008))
    {
      buf = xmmword_101C2DC8C;
      v91 = 3.39302524e10;
      sub_10041C4B4(&qword_102308FF0, &buf, 6uLL);
      __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102308FF0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102309008);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_102309028);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_102309028))
    {
      *(_QWORD *)&buf = &_mh_execute_header;
      DWORD2(buf) = 2;
      sub_100EC0C5C(&qword_102309010, &buf, 3uLL);
      __cxa_atexit((void (*)(void *))sub_100EC0CDC, &qword_102309010, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102309028);
    }
    sub_100EE2BD4((double **)(a1 + 312), (uint64_t)&v40, *(double *)(a1 + 48), *(float *)(a1 + 268));
    v6 = *(float *)(a1 + 260);
    v7 = *(float *)(a1 + 256);
    v8 = *(_DWORD *)(a1 + 240);
    v9 = *(float *)(a1 + 348);
    v10 = *(float *)(a1 + 352);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a1 + 240);
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 3);
      v14 = *(float *)(a1 + 344);
      v15 = *(float *)(a1 + 340);
      v16 = *(float *)(a1 + 352);
      v17 = *(float *)(a1 + 348);
      LODWORD(buf) = 67115009;
      DWORD1(buf) = v8 != 0;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v12;
      HIWORD(buf) = 2049;
      v91 = *(float *)v42;
      v92 = 2049;
      v93 = *(float *)&v42[4];
      v94 = 2048;
      v95 = v13;
      v96 = 2049;
      v97 = *(float *)&v40;
      v98 = 2049;
      v99 = *((float *)&v40 + 1);
      v100 = 2049;
      v101 = *((float *)&v40 + 2);
      v102 = 2049;
      v103 = *((float *)&v40 + 3);
      v104 = 2049;
      v105 = *((float *)&v41 + 1);
      v106 = 2049;
      v107 = *((float *)&v41 + 2);
      v108 = 2049;
      v109 = *(float *)&v42[8];
      v110 = 2049;
      v111 = *(float *)&v42[12];
      v112 = 2049;
      v113 = *(float *)&v42[16];
      v114 = 2049;
      v115 = *((float *)&v41 + 3);
      v116 = 2049;
      v117 = *(float *)&v41;
      v118 = 1025;
      v119 = *(_DWORD *)&v42[20];
      v120 = 1025;
      v121 = *(_DWORD *)&v42[24];
      v122 = 2048;
      v123 = v14;
      v124 = 2048;
      v125 = v15;
      v126 = 2048;
      v127 = v16;
      v128 = 2048;
      v129 = v17;
      v130 = 1024;
      v131 = v10 > 40.0;
      v132 = 1024;
      v133 = v9 > 0.25;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation, hasFlightReported,%d,numFlights,%d,confHrMedian,%{private}f, confHrStd,%{private}f,countHRSamples,%zu,latencyHr,%{private}f,latencyHrwConfFlag,%{private}f,maxHr,%{private}f,maxHrConfidence,%{private}f,maxHrOneMinusFhr,%{private}f,meanHr,%{private}f,prcHrwConfFlag,%{private}f,rangeBeforeMaxHr,%{private}f,rangeAfterMaxHr,%{private}f,stdHr,%{private}f,time2MaxHr,%{private}f,numSampleBeforeMaxHr,%{private}d,numSampleAfterMaxHr,%{private}d,vspeedMetricBeginning,%f,stairMetricBeginning,%f,vspeedMetricEnd,%f,stairMetricEnd,%f,isVspeedMetric,%d,isStairMetric,%d", (uint8_t *)&buf, 0xDAu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v23 = *(_DWORD *)(a1 + 240);
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 3);
      v25 = *(float *)(a1 + 344);
      v26 = *(float *)(a1 + 340);
      v27 = *(float *)(a1 + 352);
      v28 = *(float *)(a1 + 348);
      v43[0] = 67115009;
      v43[1] = v8 != 0;
      v44 = 1024;
      v45 = v23;
      v46 = 2049;
      v47 = *(float *)v42;
      v48 = 2049;
      v49 = *(float *)&v42[4];
      v50 = 2048;
      v51 = v24;
      v52 = 2049;
      v53 = *(float *)&v40;
      v54 = 2049;
      v55 = *((float *)&v40 + 1);
      v56 = 2049;
      v57 = *((float *)&v40 + 2);
      v58 = 2049;
      v59 = *((float *)&v40 + 3);
      v60 = 2049;
      v61 = *((float *)&v41 + 1);
      v62 = 2049;
      v63 = *((float *)&v41 + 2);
      v64 = 2049;
      v65 = *(float *)&v42[8];
      v66 = 2049;
      v67 = *(float *)&v42[12];
      v68 = 2049;
      v69 = *(float *)&v42[16];
      v70 = 2049;
      v71 = *((float *)&v41 + 3);
      v72 = 2049;
      v73 = *(float *)&v41;
      v74 = 1025;
      v75 = *(_DWORD *)&v42[20];
      v76 = 1025;
      v77 = *(_DWORD *)&v42[24];
      v78 = 2048;
      v79 = v25;
      v80 = 2048;
      v81 = v26;
      v82 = 2048;
      v83 = v27;
      v84 = 2048;
      v85 = v28;
      v86 = 1024;
      v87 = v10 > 40.0;
      v88 = 1024;
      v89 = v9 > 0.25;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation, hasFlightReported,%d,numFlights,%d,confHrMedian,%{private}f, confHrStd,%{private}f,countHRSamples,%zu,latencyHr,%{private}f,latencyHrwConfFlag,%{private}f,maxHr,%{private}f,maxHrConfidence,%{private}f,maxHrOneMinusFhr,%{private}f,meanHr,%{private}f,prcHrwConfFlag,%{private}f,rangeBeforeMaxHr,%{private}f,rangeAfterMaxHr,%{private}f,stdHr,%{private}f,time2MaxHr,%{private}f,numSampleBeforeMaxHr,%{private}d,numSampleAfterMaxHr,%{private}d,vspeedMetricBeginning,%f,stairMetricBeginning,%f,vspeedMetricEnd,%f,stairMetricEnd,%f,isVspeedMetric,%d,isStairMetric,%d", v43, 218);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()", "%s\n", v29);
      if (v30 != (char *)&buf)
        free(v30);
    }
    v32[1] = 3221225472;
    v32[0] = _NSConcreteStackBlock;
    v32[2] = sub_100EE3040;
    v32[3] = &unk_102191290;
    v32[4] = a1;
    v33 = v6 / (float)(v7 * v7);
    v37 = v8 != 0;
    v34 = v40;
    v35 = v41;
    *(_OWORD *)v36 = *(_OWORD *)v42;
    *(_OWORD *)&v36[12] = *(_OWORD *)&v42[12];
    v38 = v10 > 40.0;
    v39 = v9 > 0.25;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.StairEscalation"), v32);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v18 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Background Stairs Escalation, sent Core Analytics event.", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      LOWORD(v43[0]) = 0;
      LODWORD(v31) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Background Stairs Escalation, sent Core Analytics event.", v43, v31);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()", "%s\n", v19);
LABEL_28:
      if (v20 != (char *)&buf)
        free(v20);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v21 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Not sending escalation event to CoreAnalytics, no IHA permission", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      LOWORD(v43[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Not sending escalation event to CoreAnalytics, no IHA permission", v43, 2);
      v20 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()", "%s\n", v22);
      goto LABEL_28;
    }
  }
}

void sub_100EE2438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102309028);
  _Unwind_Resume(a1);
}

double sub_100EE2478(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  double result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (a2 == 1)
  {
    if (!*(_QWORD *)(a1 + 208))
      return result;
    sub_100197040();
    if (!sub_100241620())
      return result;
    result = sub_1001FD8B8(*(_QWORD *)(a1 + 104));
    if (result <= 0.0 || !*(_QWORD *)(a1 + 208))
      return result;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v6 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, enabling stairs escalation on workout end event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager, enabling stairs escalation on workout end event", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::feedWorkoutEvent(CMWorkoutEvent)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    buf[0] = 1;
  }
  else
  {
    if (a2 || !*(_QWORD *)(a1 + 208))
      return result;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, disabling stairs escalation on workout start event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager, disabling stairs escalation on workout start event", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::feedWorkoutEvent(CMWorkoutEvent)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    if ((*(_DWORD *)(a1 + 216) - 1) <= 1)
      sub_1001FE080(a1, 0);
    buf[0] = 0;
  }
  v4 = *(_QWORD *)(a1 + 208);
  if (!v4)
    sub_10025FD1C();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
  return result;
}

void sub_100EE27C4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  int v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;
  double v13;
  int v14;
  int v15;
  double v16;
  int v17;
  int v18;
  double v19;
  int v20;
  double v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _DWORD v25[2];
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  double v49;
  __int16 v50;
  int v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 292) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 264) = v4;
  *(_OWORD *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 248) = v3;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021912C0);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 304);
    v8 = *(float *)(a1 + 268);
    v9 = *(_DWORD *)(a1 + 252);
    v10 = *(unsigned __int8 *)(a1 + 305);
    v11 = *(float *)(a1 + 256);
    v12 = *(unsigned __int8 *)(a1 + 306);
    v13 = *(float *)(a1 + 260);
    v14 = *(unsigned __int8 *)(a1 + 296);
    *(_DWORD *)buf = 67241985;
    v41 = v7;
    v42 = 2049;
    v43 = v8;
    v44 = 1025;
    v45 = v9;
    v46 = 1026;
    v47 = v10;
    v48 = 2049;
    v49 = v11;
    v50 = 1026;
    v51 = v12;
    v52 = 2049;
    v53 = v13;
    v54 = 1025;
    v55 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v15 = *(unsigned __int8 *)(a1 + 304);
    v16 = *(float *)(a1 + 268);
    v17 = *(_DWORD *)(a1 + 252);
    v18 = *(unsigned __int8 *)(a1 + 305);
    v19 = *(float *)(a1 + 256);
    v20 = *(unsigned __int8 *)(a1 + 306);
    v21 = *(float *)(a1 + 260);
    v22 = *(unsigned __int8 *)(a1 + 296);
    v25[0] = 67241985;
    v25[1] = v15;
    v26 = 2049;
    v27 = v16;
    v28 = 1025;
    v29 = v17;
    v30 = 1026;
    v31 = v18;
    v32 = 2049;
    v33 = v19;
    v34 = 1026;
    v35 = v20;
    v36 = 2049;
    v37 = v21;
    v38 = 1025;
    v39 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d", v25, 62);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
}

void sub_100EE2A68(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  void **v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  if ((*(_DWORD *)(a1 + 216) - 1) <= 1 && *(_DWORD *)(a1 + 336) == 3)
  {
    v3 = a2[5];
    v5 = a2[1];
    v4 = a2[2];
    v6 = *(char **)(a1 + 320);
    v7 = *(_QWORD *)(a1 + 328);
    if ((unint64_t)v6 >= v7)
    {
      v9 = (void **)(a1 + 312);
      v10 = *(char **)(a1 + 312);
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v10) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v10) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)sub_1002596A8(a1 + 328, v14);
        v10 = *(char **)(a1 + 312);
        v6 = *(char **)(a1 + 320);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[24 * v11];
      v17 = &v15[24 * v14];
      *(_QWORD *)v16 = v3;
      *((_QWORD *)v16 + 1) = v5;
      *((_QWORD *)v16 + 2) = v4;
      v8 = v16 + 24;
      if (v6 != v10)
      {
        do
        {
          v18 = *(_OWORD *)(v6 - 24);
          *((_QWORD *)v16 - 1) = *((_QWORD *)v6 - 1);
          *(_OWORD *)(v16 - 24) = v18;
          v16 -= 24;
          v6 -= 24;
        }
        while (v6 != v10);
        v10 = (char *)*v9;
      }
      *(_QWORD *)(a1 + 312) = v16;
      *(_QWORD *)(a1 + 320) = v8;
      *(_QWORD *)(a1 + 328) = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_QWORD *)v6 = v3;
      *((_QWORD *)v6 + 1) = v5;
      v8 = v6 + 24;
      *((_QWORD *)v6 + 2) = v4;
    }
    *(_QWORD *)(a1 + 320) = v8;
  }
}

float *sub_100EE2BB4(float *result, int a2, float a3, float a4)
{
  float *v4;

  if (a2)
  {
    result[85] = a3;
    v4 = result + 86;
  }
  else
  {
    result[87] = a3;
    v4 = result + 88;
  }
  *v4 = a4;
  return result;
}

void sub_100EE2BD4(double **a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, float a4@<S1>)
{
  double *v12;
  double *v13;
  char *v14;
  float v15;
  float v16;
  double v17;
  float v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  double *v30;
  uint64_t v31;
  double *v32;
  double *v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  double *v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  double v48;
  float v49;
  double *v50;
  double *v51;
  float v52;
  int v53;
  int v54;
  float v55;
  double v56;
  float v57;
  double v58;
  float v59;
  float *v60;
  void *__p;
  double *v63;
  double *v64;
  void *v65;
  double *v66;
  double *v67;

  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)a2 = _Q0;
  *(_OWORD *)(a2 + 16) = _Q0;
  *(_OWORD *)(a2 + 32) = _Q0;
  *(_DWORD *)(a2 + 48) = -1082130432;
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  v12 = *a1;
  v13 = a1[1];
  v14 = "unction6__funcIZN20CLWifiTileBlobsTable20saveWifiTileBlobDataERK20CLWifiTileBlobsEntryNS_8optionalIPN16CLWifiTileParser22MemoryMappedFileHandleEEEE3$_0NS_9allocatorISB_EEFvP12sqlite3_blobEEE";
  if (*a1 == v13)
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    __p = 0;
    v63 = 0;
    v18 = -1.0;
    v17 = 0.0;
    v64 = 0;
  }
  else
  {
    v15 = *v12 - a3;
    *(float *)a2 = v15;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    __p = 0;
    v63 = 0;
    v64 = 0;
    v16 = -1.0;
    v17 = 0.0;
    v18 = -1.0;
    do
    {
      v20 = *v12;
      v19 = v12[1];
      v21 = v12[2];
      v22 = v63;
      if (v63 >= v64)
      {
        v24 = (double *)__p;
        v25 = ((char *)v63 - (_BYTE *)__p) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          goto LABEL_62;
        v27 = (char *)v64 - (_BYTE *)__p;
        if (((char *)v64 - (_BYTE *)__p) >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)sub_10025E6A0((uint64_t)&v64, v28);
          v24 = (double *)__p;
          v22 = v63;
        }
        else
        {
          v29 = 0;
        }
        v30 = (double *)&v29[8 * v25];
        *v30 = v21;
        v23 = v30 + 1;
        while (v22 != v24)
        {
          v31 = *((_QWORD *)v22-- - 1);
          *((_QWORD *)v30-- - 1) = v31;
        }
        __p = v30;
        v63 = v23;
        v64 = (double *)&v29[8 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v63 = v21;
        v23 = v22 + 1;
      }
      v63 = v23;
      if (v21 > 0.389999986)
      {
        v32 = v66;
        if (v66 >= v67)
        {
          v34 = (double *)v65;
          v35 = ((char *)v66 - (_BYTE *)v65) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
LABEL_62:
            sub_100259694();
          v37 = (char *)v67 - (_BYTE *)v65;
          if (((char *)v67 - (_BYTE *)v65) >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_10025E6A0((uint64_t)&v67, v38);
            v34 = (double *)v65;
            v32 = v66;
          }
          else
          {
            v39 = 0;
          }
          v40 = (double *)&v39[8 * v35];
          *v40 = v19;
          v33 = v40 + 1;
          while (v32 != v34)
          {
            v41 = *((_QWORD *)v32-- - 1);
            *((_QWORD *)v40-- - 1) = v41;
          }
          v65 = v40;
          v66 = v33;
          v67 = (double *)&v39[8 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v66 = v19;
          v33 = v32 + 1;
        }
        v66 = v33;
        if (v16 < 0.0)
        {
          v16 = v20 - a3;
          *(float *)(a2 + 4) = v16;
        }
        if (v19 > v18)
        {
          v18 = v19;
          v42 = v21;
          *(float *)(a2 + 8) = v18;
          *(float *)(a2 + 12) = v42;
          v17 = v20;
        }
      }
      v12 += 3;
    }
    while (v12 != v13);
    if (v18 > -1.0)
    {
      v43 = (float)(v18 + -65.0) / (a4 * -0.7 + 208.0 + -65.0);
      v44 = v17 - a3;
      *(float *)(a2 + 16) = v44;
      *(float *)(a2 + 20) = v43;
      v14 = "NSt3__110__function6__funcIZN20CLWifiTileBlobsTable20saveWifiTileBlobDataERK20CLWifiTileBlobsEntryNS_8option"
            "alIPN16CLWifiTileParser22MemoryMappedFileHandleEEEE3$_0NS_9allocatorISB_EEFvP12sqlite3_blobEEE"
          + 12;
      v45 = sub_101081E0C((double **)&v65);
      *(float *)(a2 + 24) = v45;
      v46 = sub_101081D90((double **)&v65);
      *(float *)(a2 + 28) = v46;
      v47 = sub_101082068((uint64_t *)&__p);
      *(float *)(a2 + 32) = v47;
      v48 = sub_101081D90((double **)&__p);
      v49 = (double)(unint64_t)(((char *)v66 - (_BYTE *)v65) >> 3) * 100.0;
      v51 = *a1;
      v50 = a1[1];
      v52 = v49 / (float)(0xAAAAAAAAAAAAAAABLL * (v50 - *a1));
      *(float *)&v48 = v48;
      *(_DWORD *)(a2 + 36) = LODWORD(v48);
      *(float *)(a2 + 40) = v52;
      goto LABEL_46;
    }
    v14 = "unction6__funcIZN20CLWifiTileBlobsTable20saveWifiTileBlobDataERK20CLWifiTileBlobsEntryNS_8optionalIPN16CLWifiTileParser22MemoryMappedFileHandleEEEE3$_0NS_9allocatorISB_EEFvP12sqlite3_blobEEE";
  }
  v51 = *a1;
  v50 = a1[1];
LABEL_46:
  if (v51 != v50)
  {
    v53 = 0;
    v54 = 0;
    v55 = 3.4028e38;
    v56 = *((double *)v14 + 131);
    v57 = 3.4028e38;
    do
    {
      if (v51[2] > v56)
      {
        v58 = v51[1];
        if (*v51 >= v17)
        {
          if (*v51 <= v17)
            goto LABEL_56;
          *(_DWORD *)(a2 + 56) = ++v53;
          if (v58 >= v57)
            goto LABEL_56;
          v59 = v58;
          v60 = (float *)(a2 + 48);
          v57 = v59;
          goto LABEL_55;
        }
        *(_DWORD *)(a2 + 52) = ++v54;
        if (v58 < v55)
        {
          v59 = v58;
          v60 = (float *)(a2 + 44);
          v55 = v59;
LABEL_55:
          *v60 = v18 - v59;
        }
      }
LABEL_56:
      v51 += 3;
    }
    while (v51 != v50);
  }
  if (__p)
  {
    v63 = (double *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    v66 = (double *)v65;
    operator delete(v65);
  }
}

void sub_100EE300C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100EE3040(uint64_t a1)
{
  uint64_t v2;
  float v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  NSDictionary *v31;
  void *__p;
  _BYTE *v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  uint64_t v41;
  _QWORD v42[30];
  _QWORD v43[30];

  v2 = *(_QWORD *)(a1 + 32);
  v41 = 0;
  v42[0] = CFSTR("ageGroup");
  v3 = *(float *)(v2 + 268);
  v39 = 0;
  v40 = 0;
  sub_10027205C(&v39, (const void *)qword_102308FD0, unk_102308FD8, (unk_102308FD8 - qword_102308FD0) >> 2);
  if (v40 == v39)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = (v40 - (_BYTE *)v39) >> 2;
    if (v5 <= 1)
      v5 = 1;
    while (*((float *)v39 + v4) < v3)
    {
      if (v5 == ++v4)
      {
        v4 = v5;
        break;
      }
    }
  }
  v43[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4);
  v42[1] = CFSTR("gender");
  v43[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 252));
  v42[2] = CFSTR("useBetaBlocker");
  v43[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 296));
  v42[3] = CFSTR("userBMIBin");
  v6 = *(float *)(a1 + 40);
  v37 = 0;
  v38 = 0;
  v36 = 0;
  sub_10027205C(&v36, (const void *)qword_102308FF0, unk_102308FF8, (unk_102308FF8 - qword_102308FF0) >> 2);
  if (v37 == v36)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = (v37 - (_BYTE *)v36) >> 2;
    if (v8 <= 1)
      v8 = 1;
    while (*((float *)v36 + v7) < v6)
    {
      if (v8 == ++v7)
      {
        v7 = v8;
        break;
      }
    }
  }
  v43[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v7);
  v42[4] = CFSTR("hasFlightReported");
  v43[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 104));
  v42[5] = CFSTR("numFlights");
  v9 = *(_DWORD *)(v2 + 240);
  v34 = 0;
  v35 = 0;
  __p = 0;
  sub_10027205C(&__p, (const void *)qword_102309010, unk_102309018, (unk_102309018 - qword_102309010) >> 2);
  if (v34 == __p)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = (v34 - (_BYTE *)__p) >> 2;
    if (v11 <= 1)
      v11 = 1;
    while (*((_DWORD *)__p + v10) < v9)
    {
      if (v11 == ++v10)
      {
        v10 = v11;
        break;
      }
    }
  }
  v43[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10);
  v42[6] = CFSTR("confHrMedian");
  LODWORD(v12) = *(_DWORD *)(a1 + 76);
  v43[6] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12);
  v42[7] = CFSTR("confHrStd");
  LODWORD(v13) = *(_DWORD *)(a1 + 80);
  v43[7] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13);
  v42[8] = CFSTR("countHRSamples");
  v43[8] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 320) - *(_QWORD *)(v2 + 312)) >> 3));
  v42[9] = CFSTR("latencyHr");
  LODWORD(v14) = *(_DWORD *)(a1 + 44);
  v43[9] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v14);
  v42[10] = CFSTR("latencyHrwConfFlag");
  LODWORD(v15) = *(_DWORD *)(a1 + 48);
  v43[10] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v15);
  v42[11] = CFSTR("maxHr");
  LODWORD(v16) = *(_DWORD *)(a1 + 52);
  v43[11] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v16);
  v42[12] = CFSTR("maxHrConfidence");
  LODWORD(v17) = *(_DWORD *)(a1 + 56);
  v43[12] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v17);
  v42[13] = CFSTR("maxHrOneMinusFhr");
  LODWORD(v18) = *(_DWORD *)(a1 + 64);
  v43[13] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v18);
  v42[14] = CFSTR("meanHr");
  LODWORD(v19) = *(_DWORD *)(a1 + 68);
  v43[14] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v19);
  v42[15] = CFSTR("prcHrwConfFlag");
  LODWORD(v20) = *(_DWORD *)(a1 + 84);
  v43[15] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20);
  v42[16] = CFSTR("rangeBeforeMaxHr");
  LODWORD(v21) = *(_DWORD *)(a1 + 88);
  v43[16] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v21);
  v42[17] = CFSTR("rangeAfterMaxHr");
  LODWORD(v22) = *(_DWORD *)(a1 + 92);
  v43[17] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v22);
  v42[18] = CFSTR("stdHr");
  LODWORD(v23) = *(_DWORD *)(a1 + 72);
  v43[18] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v23);
  v42[19] = CFSTR("time2MaxHr");
  LODWORD(v24) = *(_DWORD *)(a1 + 60);
  v43[19] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v24);
  v42[20] = CFSTR("numSampleBeforeMaxHr");
  v43[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 96));
  v42[21] = CFSTR("numSampleAfterMaxHr");
  v43[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 100));
  v42[22] = CFSTR("vspeedMetricEnd");
  LODWORD(v25) = *(_DWORD *)(v2 + 352);
  v43[22] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v25);
  v42[23] = CFSTR("stairMetricEnd");
  LODWORD(v26) = *(_DWORD *)(v2 + 348);
  v43[23] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v26);
  v42[24] = CFSTR("isVspeedMetric");
  v43[24] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 105));
  v42[25] = CFSTR("isStairMetric");
  v43[25] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 106));
  v42[26] = CFSTR("sumStairMetricBeg");
  LODWORD(v27) = *(_DWORD *)(v2 + 340);
  v43[26] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v27);
  v42[27] = CFSTR("sumStairMetricEnd");
  LODWORD(v28) = *(_DWORD *)(v2 + 348);
  v43[27] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v28);
  v42[28] = CFSTR("sumVSpeedMetricBeg");
  LODWORD(v29) = *(_DWORD *)(v2 + 344);
  v43[28] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v29);
  v42[29] = CFSTR("sumVSpeedMetricEnd");
  LODWORD(v30) = *(_DWORD *)(v2 + 352);
  v43[29] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v30);
  v31 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v43, v42, 30);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  return v31;
}

void sub_100EE3590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

void sub_100EE35E8(_QWORD *a1)
{
  sub_100EE3638(a1);
  operator delete();
}

void sub_100EE360C(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

_QWORD *sub_100EE3638(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = off_102191280;
  v2 = (void *)a1[39];
  if (v2)
  {
    a1[40] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[26];
  if (v3 == a1 + 23)
  {
    v4 = 4;
    v3 = a1 + 23;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = (_QWORD *)a1[22];
  if (v5 == a1 + 19)
  {
    v6 = 4;
    v5 = a1 + 19;
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = (_QWORD *)a1[18];
  if (v7 == a1 + 15)
  {
    v8 = 4;
    v7 = a1 + 15;
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  sub_100261F44((uint64_t)(a1 + 13));
  sub_100261F44((uint64_t)(a1 + 11));
  sub_100261F44((uint64_t)(a1 + 9));
  v9 = a1[5];
  a1[5] = 0;
  if (v9)
    operator delete();
  return a1;
}

uint64_t sub_100EE3740()
{
  sub_1015A2E04(&qword_102308F98, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102308F98, (void *)&_mh_execute_header);
}

uint64_t sub_100EE3AD0(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v38 = 8;
        goto LABEL_64;
      case 2u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if (v22 < 0)
            {
              v17 += 7;
              v10 = v18++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_50:
        *(_DWORD *)(a1 + 24) = v19;
        continue;
      case 3u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v10 = v24++ >= 9;
              if (v10)
              {
                v25 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v25 = 0;
LABEL_54:
        v36 = v25 != 0;
        v37 = 28;
        goto LABEL_59;
      case 4u:
        *(_BYTE *)(a1 + 32) |= 1u;
        v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v38 = 16;
LABEL_64:
        *(_QWORD *)(a1 + v38) = v15;
        continue;
      case 5u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v34 = v33 + 1;
      if (v33 == -1 || v34 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
      v32 |= (unint64_t)(v35 & 0x7F) << v30;
      if ((v35 & 0x80) == 0)
        goto LABEL_56;
      v30 += 7;
      v10 = v31++ >= 9;
      if (v10)
      {
        v32 = 0;
        goto LABEL_58;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v32 = 0;
LABEL_58:
    v36 = v32 != 0;
    v37 = 29;
LABEL_59:
    *(_BYTE *)(a1 + v37) = v36;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

_QWORD *sub_100EE43B4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v7 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_100D8FB60(a1, a2, a3, &v22, a5);
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *a1 = off_102191330;
  a1[11] = 0x7FEFFFFFFFFFFFFFLL;
  v13 = (std::__shared_weak_count *)a4[1];
  v20 = *a4;
  v21 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_1006DE784((uint64_t)(a1 + 12), &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  a1[10] = 0;
  return a1;
}

void sub_100EE44C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100261F44((uint64_t)&a9);
  sub_100D8FC14(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100EE44F8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_102191330;
  *(_QWORD *)(a1 + 96) = off_10214F110;
  sub_100261F44(a1 + 152);
  v3 = (void **)(a1 + 104);
  sub_1006DFAF4(&v3);
  return sub_100D8FC14(a1);
}

void sub_100EE455C(uint64_t a1)
{
  sub_100EE44F8(a1);
  operator delete();
}

id sub_100EE4580(uint64_t a1)
{
  int v2;
  id v3;
  NSSortDescriptor *v4;
  void *v5;
  id v6;
  id v7;
  id result;
  void *v9;
  NSSortDescriptor *v10;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v3 = objc_msgSend(*(id *)(a1 + 8), "count");
  v4 = +[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("score"), 1);
  v5 = *(void **)(a1 + 8);
  v10 = v4;
  v6 = objc_msgSend(v5, "sortedArrayUsingDescriptors:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7 = objc_msgSend(v6, "firstObject");
  result = objc_msgSend(v6, "count");
  if ((unint64_t)result >= 2 && v7 == *(id *)(a1 + 80))
  {
    result = objc_msgSend(v6, "objectAtIndex:", 1);
    v7 = result;
  }
  if ((unint64_t)v3 <= v2)
  {
    *(_QWORD *)(a1 + 24) = 0;
    if (v3 == (id)v2)
      *(_QWORD *)(a1 + 80) = v7;
  }
  else
  {
    if (rand() <= 0x3FFFFFFF)
    {
      v9 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v7;
      v7 = v9;
    }
    *(_QWORD *)(a1 + 24) = v7;
    return (id)sub_10110A1F4(*(_QWORD *)(a1 + 64), 1, 2, 2, (int)objc_msgSend(objc_msgSend(v7, "archive"), "secondaryDataSize"));
  }
  return result;
}

uint64_t sub_100EE46DC(uint64_t a1, id a2)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2 && objc_msgSend(v2, "archive") == a2)
    return 1;
  else
    return 2;
}

uint64_t sub_100EE4718(uint64_t a1)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 104))(*(_QWORD *)(a1 + 40)) + 1;
}

void sub_100EE473C(uint64_t a1)
{
  double v2;
  int v3;
  int v4;
  int v5;
  int v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t buf;
  _BYTE v27[10];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 96))(*(_QWORD *)(a1 + 40)))
  {
    v2 = *(double *)(a1 + 16);
    *(double *)(a1 + 88) = v2 + (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 104))(*(_QWORD *)(a1 + 40));
    if (v3)
    {
      v4 = v3;
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 48) + 128))(&buf);
      v5 = *(_DWORD *)v27;
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 48) + 128))(&v21);
      if (v5 * v4 + 1 >= v22)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 48) + 128))(&v15);
        v6 = v17;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 48) + 128))(&v15);
        v6 = v16 * v4 + 1;
      }
      sub_100067AC4((uint64_t)&v20);
      sub_100067AC4((uint64_t)&v19);
      sub_100067AC4((uint64_t)&v18);
      sub_100067AC4((uint64_t)&v25);
      sub_100067AC4((uint64_t)&v24);
      sub_100067AC4((uint64_t)&v23);
      sub_100067AC4((uint64_t)&v34);
      sub_100067AC4((uint64_t)&v33);
      sub_100067AC4((uint64_t)&v32);
      v9 = 24.0 / (double)v6;
      v7 = v9 * 0.5 * 3600.0;
      v8 = v9 * 1.5 * 3600.0;
    }
    else
    {
      v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
      v8 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
    }
    v10 = rand();
    v11 = *(double *)(a1 + 16);
    *(double *)(a1 + 88) = v7
                         + (double)v10 / 2147483650.0 * (v8 - v7)
                         + v11
                         + (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021913F8);
    v12 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_QWORD *)(a1 + 88);
      buf = 68289539;
      *(_WORD *)v27 = 2082;
      *(_QWORD *)&v27[2] = "";
      v28 = 2049;
      v29 = v13;
      v30 = 2049;
      v31 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update next trace eligibility\", \"current\":\"%{private}f\", \"next\":\"%{private}f\"}", (uint8_t *)&buf, 0x26u);
    }
  }
}

void sub_100EE4A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  sub_1006DEE20((uint64_t)&a39);
  sub_1006DEE20((uint64_t)&a69);
  _Unwind_Resume(a1);
}

id sub_100EE4A3C(uint64_t a1)
{
  id result;

  result = sub_100D8FFC0(a1);
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_100EE4A60(uint64_t result)
{
  *(_QWORD *)(result + 88) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

NSString *sub_100EE4A6C(uint64_t a1, uint64_t a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2);
}

uint64_t sub_100EE4A9C(uint64_t a1)
{
  return a1 + 96;
}

const __CFString *sub_100EE4AA4()
{
  return CFSTR("Non Vision");
}

void sub_100EE4AB0(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100EE4ADC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE *v8;

  sub_100270E34((uint64_t)v7, a2);
  *(_QWORD *)a1 = &off_1021503E0;
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  *(_QWORD *)a1 = off_102191428;
  sub_100270E34(a1 + 8, a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_100EE4BD4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  double v5;
  double v6;
  _QWORD *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  double v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  char *v80;
  __int128 v81;
  double v82;
  double v83;
  _BYTE v84[12];
  __int16 v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  double v98;
  __int16 v99;
  int v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  double v104;
  __int16 v105;
  int v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  double v110;
  __int16 v111;
  int v112;
  _BYTE buf[18];
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  double v125;
  __int16 v126;
  int v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  double v131;
  __int16 v132;
  int v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  double v137;
  __int16 v138;
  int v139;

  if (*(double *)(a2 + 112) <= *(double *)(a1 + 40))
  {
    sub_100EE56D8(a1);
    v5 = 0.0;
    v11 = -1;
    v12 = 0.0;
    v6 = 0.0;
    goto LABEL_34;
  }
  v4 = *(_DWORD *)(a2 + 520);
  v5 = 0.0;
  v6 = 0.0;
  if (!*(_BYTE *)(a1 + 48))
  {
    v7 = (_QWORD *)(a1 + 56);
    v8 = *(double *)(a2 + 128) - *(double *)(a2 + 120);
    v9 = *(double *)(a1 + 56) + v8;
    if (v9 < 10.24
      || (v8 == 0.0 ? (v10 = 0.0) : (v10 = (v8 - (v9 + -10.24)) / v8 * (double)v4),
          v6 = v10 + *(double *)(a1 + 64),
          v6 < 14.0))
    {
LABEL_17:
      *(double *)buf = *(double *)(a2 + 128) - *(double *)(a2 + 120);
      *(double *)&buf[8] = (double)v4;
      v18 = sub_100EE545C((_QWORD *)(a1 + 104), buf);
      v19 = sub_100EE5518(v18, (_QWORD *)(a1 + 104));
      *(double *)(a1 + 56) = v19;
      *(double *)(a1 + 64) = sub_100EE557C(v20, (_QWORD *)(a1 + 104));
      if (v19 >= 10.24)
      {
        v81 = xmmword_101B9DFC0;
        do
        {
          *(int64x2_t *)(a1 + 136) = vaddq_s64(*(int64x2_t *)(a1 + 136), (int64x2_t)xmmword_101B9DFC0);
          v21 = sub_1004A57E8(a1 + 104, 1);
          v22 = sub_100EE5518(v21, (_QWORD *)(a1 + 104));
          *(double *)(a1 + 56) = v22;
          *(double *)(a1 + 64) = sub_100EE557C(v23, (_QWORD *)(a1 + 104));
        }
        while (v22 >= 10.24);
      }
      goto LABEL_20;
    }
    *(_BYTE *)(a1 + 48) = 1;
    v13 = *(void ***)(a1 + 112);
    v14 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 144) = 0;
    v15 = v14 - (_QWORD)v13;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v13);
        v16 = *(_QWORD *)(a1 + 120);
        v13 = (void **)(*(_QWORD *)(a1 + 112) + 8);
        *(_QWORD *)(a1 + 112) = v13;
        v15 = v16 - (_QWORD)v13;
      }
      while (v15 > 0x10);
    }
    if (v15 >> 3 == 1)
    {
      v17 = 128;
    }
    else
    {
      if (v15 >> 3 != 2)
        goto LABEL_16;
      v17 = 256;
    }
    *(_QWORD *)(a1 + 136) = v17;
LABEL_16:
    *v7 = 0;
    *(_QWORD *)(a1 + 64) = 0;
    if (*(_BYTE *)(a1 + 48))
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_20:
  v24 = *(double *)(a1 + 72);
  v25 = *(double *)(a2 + 128);
  v26 = v25 - *(double *)(a2 + 120);
  if (v24 + v26 >= 60.0)
  {
    v33 = v24 + v26 + -60.0;
    if (v26 == 0.0)
    {
      v34 = 0.0;
      v35 = 0.0;
    }
    else
    {
      v34 = v33 / v26 * (double)v4;
      v35 = (double)v4 - v34;
    }
    if (*(_BYTE *)(a1 + 48))
    {
      *(double *)buf = v25 - v24;
      *(double *)v84 = v25;
      HIDWORD(v83) = 1;
      sub_100EE55FC(a1, (double *)buf, v84, (int *)&v83 + 1, *(_BYTE *)(a2 + 352));
      v11 = 1;
      v12 = 0.0;
    }
    else
    {
      v12 = v35 + *(double *)(a1 + 80);
      if (v12 <= 42.0)
      {
        v51 = *(_QWORD *)(a1 + 184);
        v52 = *(_QWORD *)(a1 + 160);
        v53 = *(_QWORD *)(a1 + 168);
        v54 = (_QWORD *)(v52 + 8 * (v51 >> 8));
        if (v53 == v52)
          v55 = 0;
        else
          v55 = *v54 + 16 * v51;
        v56 = *(_QWORD *)(a1 + 192) + v51;
        v57 = v56 >> 8;
        v58 = 0.0;
        v59 = 0.0;
LABEL_49:
        v60 = (double *)v55;
        while (1)
        {
          v61 = v53 == v52 ? 0 : *(_QWORD *)(v52 + 8 * v57) + 16 * v56;
          if (v60 == (double *)v61)
            break;
          v62 = v55 - *v54;
          v63 = v62 >> 4;
          if (v62 < -15)
            v64 = v54[-((unint64_t)(254 - v63) >> 8)] + 16 * ~(-2 - v63);
          else
            v64 = *(_QWORD *)((char *)v54 + (((unint64_t)(v63 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                + 16 * (v63 + 1);
          if (v53 == v52)
            v65 = 0;
          else
            v65 = *(_QWORD *)(v52 + 8 * v57) + 16 * v56;
          v66 = -0.0;
          if (v64 == v65)
            v67 = v26 - v33;
          else
            v67 = -0.0;
          v68 = v58 + v67;
          if (v64 == v65)
            v66 = v35;
          v69 = v59 + v66;
          v70 = *v60;
          v58 = *v60 + v68;
          if (v58 >= 20.0)
          {
            v58 = v58 + -20.0;
            if (v70 == 0.0)
            {
              v59 = 0.0;
              v72 = 0.0;
            }
            else
            {
              v71 = v60[1];
              v59 = v58 / v70 * v71;
              v72 = v71 - v59;
            }
            if (v69 + v72 < 8.0)
              goto LABEL_74;
          }
          else
          {
            v59 = v69 + v60[1];
          }
          v60 += 2;
          v55 += 16;
          if (v55 - *v54 == 4096)
          {
            v73 = v54[1];
            ++v54;
            v55 = v73;
            goto LABEL_49;
          }
        }
        if (v12 < 32.0)
        {
LABEL_74:
          v5 = v35 + *(double *)(a1 + 80);
          goto LABEL_21;
        }
        *(double *)buf = v25 - v24;
        *(double *)v84 = v25;
        HIDWORD(v83) = 2;
        sub_100EE55FC(a1, (double *)buf, v84, (int *)&v83 + 1, *(_BYTE *)(a2 + 352));
        v11 = 2;
        v5 = v12;
        goto LABEL_33;
      }
      *(double *)buf = v25 - v24;
      *(double *)v84 = v25;
      HIDWORD(v83) = 0;
      sub_100EE55FC(a1, (double *)buf, v84, (int *)&v83 + 1, *(_BYTE *)(a2 + 352));
      v11 = 0;
    }
    v5 = 0.0;
LABEL_33:
    *(double *)buf = v33;
    *(double *)&buf[8] = v34;
    v36 = sub_100EE545C((_QWORD *)(a1 + 104), buf);
    *(double *)(a1 + 56) = sub_100EE5518(v36, (_QWORD *)(a1 + 104));
    *(double *)(a1 + 64) = sub_100EE557C(v37, (_QWORD *)(a1 + 104));
    *(double *)buf = v33;
    *(double *)&buf[8] = v34;
    v38 = sub_100EE545C((_QWORD *)(a1 + 152), buf);
    *(double *)(a1 + 72) = sub_100EE5518(v38, (_QWORD *)(a1 + 152));
    *(double *)(a1 + 80) = sub_100EE557C(v39, (_QWORD *)(a1 + 152));
    goto LABEL_34;
  }
LABEL_21:
  *(double *)buf = v25 - *(double *)(a2 + 120);
  *(double *)&buf[8] = (double)v4;
  v27 = sub_100EE545C((_QWORD *)(a1 + 152), buf);
  v28 = sub_100EE5518(v27, (_QWORD *)(a1 + 152));
  *(double *)(a1 + 72) = v28;
  *(double *)(a1 + 80) = sub_100EE557C(v29, (_QWORD *)(a1 + 152));
  if (v28 >= 60.0)
  {
    v81 = xmmword_101B9DFC0;
    do
    {
      *(int64x2_t *)(a1 + 184) = vaddq_s64(*(int64x2_t *)(a1 + 184), (int64x2_t)xmmword_101B9DFC0);
      v30 = sub_1004A57E8(a1 + 152, 1);
      v31 = sub_100EE5518(v30, (_QWORD *)(a1 + 152));
      *(double *)(a1 + 72) = v31;
      *(double *)(a1 + 80) = sub_100EE557C(v32, (_QWORD *)(a1 + 152));
    }
    while (v31 >= 60.0);
  }
  v11 = -1;
  v12 = v5;
LABEL_34:
  v40 = *(double *)(a2 + 112);
  *(double *)(a1 + 40) = v40;
  v41 = *(double *)(a1 + 88);
  if (v41 > 0.0)
  {
    v42 = v40 - *(double *)(a1 + 96);
    v43 = 0.0;
    if (v42 <= 900.0)
    {
      v44 = v41 - (*(double *)(a2 + 128) - *(double *)(a2 + 120));
      v43 = 0.0;
      if (v44 >= 0.0)
        v43 = v44;
    }
    *(double *)(a1 + 88) = v43;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102191460);
  v45 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v46 = *(_QWORD *)(a2 + 112);
    v48 = *(_QWORD *)(a1 + 56);
    v47 = *(_QWORD *)(a1 + 64);
    v50 = *(_QWORD *)(a1 + 72);
    v49 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)buf = 134221568;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v11;
    v114 = 2048;
    v115 = v47;
    v116 = 2048;
    v117 = v48;
    v118 = 2048;
    v119 = v49;
    v120 = 2048;
    v121 = v50;
    v122 = 2048;
    v123 = 0x40247AE147AE147BLL;
    v124 = 2048;
    v125 = v6;
    v126 = 1024;
    v127 = 14;
    v128 = 2048;
    v129 = 0x404E000000000000;
    v130 = 2048;
    v131 = v12;
    v132 = 1024;
    v133 = 42;
    v134 = 2048;
    v135 = 0x404E000000000000;
    v136 = 2048;
    v137 = v5;
    v138 = 1024;
    v139 = 32;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "ExerciseMinute,ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPushBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,ThresholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageModelCount,%.3f,CoverageModelThreshold,%d", buf, 0x88u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102191460);
    v74 = *(_QWORD *)(a2 + 112);
    v76 = *(_QWORD *)(a1 + 56);
    v75 = *(_QWORD *)(a1 + 64);
    v78 = *(_QWORD *)(a1 + 72);
    v77 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)v84 = 134221568;
    *(_QWORD *)&v84[4] = v74;
    v85 = 1024;
    v86 = v11;
    v87 = 2048;
    v88 = v75;
    v89 = 2048;
    v90 = v76;
    v91 = 2048;
    v92 = v77;
    v93 = 2048;
    v94 = v78;
    v95 = 2048;
    v96 = 0x40247AE147AE147BLL;
    v97 = 2048;
    v98 = v6;
    v99 = 1024;
    v100 = 14;
    v101 = 2048;
    v102 = 0x404E000000000000;
    v103 = 2048;
    v104 = v12;
    v105 = 1024;
    v106 = 42;
    v107 = 2048;
    v108 = 0x404E000000000000;
    v109 = 2048;
    v110 = v5;
    v111 = 1024;
    v112 = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "ExerciseMinute,ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPushBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,ThresholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageModelCount,%.3f,CoverageModelThreshold,%d", COERCE_DOUBLE(v84), 136, *(double *)&v81, *((double *)&v81 + 1), v82, v83);
    v80 = (char *)v79;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLExerciseMinuteWheelChairEstimator::feedNatalie(double, const CLNatalieModelInput &)", "%s\n", v79);
    if (v80 != buf)
      free(v80);
  }
}

uint64_t sub_100EE545C(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100EE58BC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  v8 = a1[4];
  v9 = a1[5] + 1;
  a1[5] = v9;
  v10 = v8 + v9;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 8));
  v13 = *v12 + 16 * v10;
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 16;
}

double sub_100EE5518(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double result;
  unint64_t v4;
  double **v5;
  double *v6;
  double *v7;
  uint64_t v8;
  double v9;
  double v10;
  double *v11;

  v2 = a2[1];
  result = 0.0;
  if (a2[2] != v2)
  {
    v4 = a2[4];
    v5 = (double **)(v2 + 8 * (v4 >> 8));
    v6 = *v5;
    v7 = &(*v5)[2 * v4];
    v8 = *(_QWORD *)(v2 + (((a2[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a2 + 40) + v4);
    while (v7 != (double *)v8)
    {
      v9 = *v7;
      v7 += 2;
      v10 = v9;
      if ((char *)v7 - (char *)v6 == 4096)
      {
        v11 = v5[1];
        ++v5;
        v6 = v11;
        v7 = v11;
      }
      result = result + v10;
    }
  }
  return result;
}

double sub_100EE557C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2[1];
  result = 0.0;
  if (a2[2] != v2)
  {
    v4 = a2[4];
    v5 = (uint64_t *)(v2 + 8 * (v4 >> 8));
    v6 = *v5;
    v7 = *v5 + 16 * v4;
    v8 = *(_QWORD *)(v2 + (((a2[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a2 + 40) + v4);
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        v10 = v7 + 16;
        if (v7 + 16 - v6 == 4096)
        {
          v11 = v5[1];
          ++v5;
          v6 = v11;
          v10 = v11;
        }
        v9 = (*(double *)(v7 + 8) + (double)v9);
        v7 = v10;
      }
      while (v10 != v8);
      return (double)v9;
    }
  }
  return result;
}

uint64_t sub_100EE55FC(uint64_t a1, double *a2, _QWORD *a3, int *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;

  *(double *)(a1 + 88) = *(double *)(a1 + 88) + 60.0;
  *(_QWORD *)(a1 + 96) = *a3;
  sub_100EE56D8(a1);
  v10 = sub_100BFA9D4();
  sub_100BFAA18(v10, *a4, *(double *)a3 - *a2);
  v11 = *a4;
  if (v11 >= 3)
    v12 = 0;
  else
    v12 = 0x4000200010uLL >> (16 * v11);
  v13 = *a3;
  *(double *)v16 = *a2;
  v16[1] = v13;
  v16[2] = 0x4011CCCCC0000000;
  v17 = v12;
  BYTE2(v17) = a5;
  v14 = *(_QWORD *)(a1 + 32);
  if (!v14)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v16);
}

void sub_100EE56D8(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 48) = 0;
  v2 = *(void ***)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 144) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 120);
      v2 = (void **)(*(_QWORD *)(a1 + 112) + 8);
      *(_QWORD *)(a1 + 112) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 256;
  }
  *(_QWORD *)(a1 + 136) = v6;
LABEL_8:
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(void ***)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 192) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 168);
      v7 = (void **)(*(_QWORD *)(a1 + 160) + 8);
      *(_QWORD *)(a1 + 160) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 128;
    goto LABEL_14;
  }
  if (v9 >> 3 == 2)
  {
    v11 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 184) = v11;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
}

_QWORD *sub_100EE57B0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102191428;
  sub_1004A4854(a1 + 19);
  sub_1004A4854(a1 + 13);
  v2 = (_QWORD *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_100EE5818(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102191428;
  sub_1004A4854(a1 + 19);
  sub_1004A4854(a1 + 13);
  v2 = (_QWORD *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

void sub_100EE5890(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100EE58BC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100EE5B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100EE5BD0(uint64_t a1)
{
  _QWORD v3[15];
  _QWORD v4[15];

  v3[0] = CFSTR("logSequenceID");
  v4[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0));
  v3[1] = CFSTR("timestamp");
  v4[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1));
  v3[2] = CFSTR("temperature");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 9));
  v3[3] = CFSTR("biasX");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 13));
  v3[4] = CFSTR("biasY");
  v4[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 17));
  v3[5] = CFSTR("biasZ");
  v4[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 21));
  v3[6] = CFSTR("biasUncertaintyX");
  v4[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 25));
  v3[7] = CFSTR("biasUncertaintyY");
  v4[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 29));
  v3[8] = CFSTR("biasUncertaintyZ");
  v4[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 33));
  v3[9] = CFSTR("dynamicBiasX");
  v4[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 37));
  v3[10] = CFSTR("dynamicBiasY");
  v4[10] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 41));
  v3[11] = CFSTR("dynamicBiasZ");
  v4[11] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 45));
  v3[12] = CFSTR("temperatureFitUncertaintyX");
  v4[12] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 49));
  v3[13] = CFSTR("temperatureFitUncertaintyY");
  v4[13] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 53));
  v3[14] = CFSTR("temperatureFitUncertaintyZ");
  v4[14] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(*(_QWORD *)(a1 + 32) + 57));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 15);
}

uint64_t sub_100EE6198(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  void *String;
  uint64_t result;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  ALSLocation *v27;
  uint64_t v28;
  _QWORD v29[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString(a2);

        *(_QWORD *)(a1 + 32) = String;
        goto LABEL_58;
      case 2u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              v9 = v15++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_48:
        v28 = 8;
        goto LABEL_57;
      case 3u:
        v19 = 0;
        v20 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v16 |= (unint64_t)(v22 & 0x7F) << v19;
            if (v22 < 0)
            {
              v19 += 7;
              v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_52:
        v28 = 12;
        goto LABEL_57;
      case 4u:
        v23 = 0;
        v24 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v16 |= (unint64_t)(v26 & 0x7F) << v23;
            if (v26 < 0)
            {
              v23 += 7;
              v9 = v24++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_56:
        v28 = 24;
LABEL_57:
        *(_DWORD *)(a1 + v28) = v16;
        goto LABEL_58;
      case 5u:
        v27 = objc_alloc_init(ALSLocation);

        *(_QWORD *)(a1 + 16) = v27;
        v29[0] = 0;
        v29[1] = 0;
        if (PBReaderPlaceMark(a2, v29) && (sub_100F02DFC((uint64_t)v27, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v29);
LABEL_58:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

BOOL sub_100EE6B84(double *a1, uint64_t a2)
{
  int v4;
  double v5;
  double v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  float v15;
  int v16;
  BOOL v17;
  float v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  const char *v37;
  char *v38;
  double v39;
  uint64_t v40;
  void *__p;
  __int128 v42;
  int v43;
  uint64_t v44;
  __int16 v45;
  _BYTE v46[10];
  _BYTE v47[6];
  _BYTE v48[6];
  _BYTE v49[6];
  _BYTE v50[6];
  __int128 v51;
  _BYTE v52[6];
  _BYTE v53[6];
  _BOOL4 v54;
  __int16 v55;
  _BOOL4 v56;
  __int16 v57;
  int v58;
  _BYTE buf[24];
  _BYTE v60[6];
  _BYTE v61[6];
  _BYTE v62[6];
  _BYTE v63[6];
  __int128 v64;
  _BYTE v65[6];
  _BYTE v66[6];
  _BOOL4 v67;
  __int16 v68;
  _BOOL4 v69;
  __int16 v70;
  int v71;

  v4 = *(unsigned __int8 *)a1;
  v5 = *(double *)(a2 + 128) - a1[1];
  v6 = *((float *)a1 + 6);
  v7 = sub_100EE72B8((uint64_t)a1, a2);
  v8 = v7;
  v9 = *(unsigned __int8 *)(a2 + 352);
  if (*(_BYTE *)(a2 + 352))
    v10 = v5 <= v6;
  else
    v10 = 0;
  if (!v10 || v7)
  {
    *(_BYTE *)a1 = 0;
    __p = 0;
    v42 = 0uLL;
    HIDWORD(v40) = *(double *)(a2 + 128) - a1[2] > 120.0;
    if (!v9)
    {
      v11 = 0;
      v12 = 0;
      HIDWORD(v39) = 0;
      LODWORD(v40) = 0;
      v14 = 0;
      v13 = 0;
      v15 = 0.0;
      goto LABEL_27;
    }
  }
  else
  {
    __p = 0;
    v42 = 0uLL;
    HIDWORD(v40) = *(double *)(a2 + 128) - a1[2] > 120.0;
  }
  sub_100EE7380(a2, (void **)buf);
  v11 = *(_QWORD *)buf;
  __p = *(void **)buf;
  v42 = *(_OWORD *)&buf[8];
  v12 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[8] - *(_QWORD *)buf == 560)
  {
    sub_100EE76B8((uint64_t *)&__p, (float *)a2, (uint64_t)buf);
    v13 = *(_DWORD *)buf;
    v14 = *(_DWORD *)&buf[12];
    HIDWORD(v39) = *(_DWORD *)&buf[4];
    LODWORD(v40) = *(_DWORD *)&buf[8];
    v15 = *(float *)&buf[16];
    v16 = HIDWORD(v40);
    if (*(float *)&buf[16] >= 10.0)
      v16 = 0;
    v17 = v16 == 1 && *(_DWORD *)&buf[12] <= 6;
    if (v17 && (*(_DWORD *)buf == 14 || *(_DWORD *)&buf[8] == 14 || *(_DWORD *)&buf[4] == 14))
    {
      *(_BYTE *)a1 = 1;
      a1[1] = *(double *)(a2 + 128);
      v18 = *((float *)a1 + 6) + 30.0;
      if (v18 > 600.0)
        v18 = 600.0;
      *((float *)a1 + 6) = v18;
    }
  }
  else
  {
    HIDWORD(v39) = 0;
    LODWORD(v40) = 0;
    v14 = 0;
    v13 = 0;
    v15 = 0.0;
  }
  if (*((_BYTE *)a1 + 2))
    *(_BYTE *)a1 = 1;
LABEL_27:
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102191480);
  v19 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(_QWORD *)(a2 + 120);
    v21 = *(_QWORD *)(a2 + 128);
    v22 = *(unsigned __int8 *)a1;
    v23 = *(unsigned __int8 *)(a2 + 352);
    *(_DWORD *)buf = 134221056;
    *(_QWORD *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v21;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)v60 = -858993459 * ((unint64_t)(v12 - v11) >> 3);
    *(_WORD *)&v60[4] = 1024;
    *(_DWORD *)v61 = v13;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)v62 = HIDWORD(v39);
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)v63 = v40;
    *(_WORD *)&v63[4] = 1024;
    LODWORD(v64) = v14;
    WORD2(v64) = 2048;
    *(double *)((char *)&v64 + 6) = v15;
    HIWORD(v64) = 1024;
    *(_DWORD *)v65 = v22;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)v66 = v23;
    *(_WORD *)&v66[4] = 1024;
    v67 = v5 > v6;
    v68 = 1024;
    v69 = v8;
    v70 = 1024;
    v71 = HIDWORD(v40);
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "AssistedCyclingDetector,beginTime,%f,endTime,%f,bufferSize,%d,totalSamplesAboveVO2MaxThreshold,%d,totalSamplesAboveVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAccelVectorMagnitude,%f,assistedCyclingOverridden,%d,isMotionOverrideSet,%d,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSessionDurationOk,%d", buf, 0x5Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102191480);
    v29 = *(_QWORD *)(a2 + 120);
    v30 = *(_QWORD *)(a2 + 128);
    v31 = *(unsigned __int8 *)a1;
    v32 = *(unsigned __int8 *)(a2 + 352);
    v43 = 134221056;
    v44 = v29;
    v45 = 2048;
    *(_QWORD *)v46 = v30;
    *(_WORD *)&v46[8] = 1024;
    *(_DWORD *)v47 = -858993459 * (((_QWORD)v42 - (_QWORD)__p) >> 3);
    *(_WORD *)&v47[4] = 1024;
    *(_DWORD *)v48 = v13;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)v49 = HIDWORD(v39);
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)v50 = v40;
    *(_WORD *)&v50[4] = 1024;
    LODWORD(v51) = v14;
    WORD2(v51) = 2048;
    *(double *)((char *)&v51 + 6) = v15;
    HIWORD(v51) = 1024;
    *(_DWORD *)v52 = v31;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)v53 = v32;
    *(_WORD *)&v53[4] = 1024;
    v54 = v5 > v6;
    v55 = 1024;
    v56 = v8;
    v57 = 1024;
    v58 = HIDWORD(v40);
    LODWORD(v39) = 92;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "AssistedCyclingDetector,beginTime,%f,endTime,%f,bufferSize,%d,totalSamplesAboveVO2MaxThreshold,%d,totalSamplesAboveVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAccelVectorMagnitude,%f,assistedCyclingOverridden,%d,isMotionOverrideSet,%d,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSessionDurationOk,%d", COERCE_DOUBLE(&v43), v39, v40, (_DWORD)__p, (_DWORD)v42, DWORD2(v42));
    v34 = (char *)v33;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAssistedCyclingDetector::detect(const CLNatalieModelInput &)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  if (v4 != *(unsigned __int8 *)a1)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102191480);
    v24 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_QWORD *)(a2 + 128);
      v26 = *(unsigned __int8 *)a1;
      *(_DWORD *)buf = 134220544;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v26;
      *(_WORD *)v60 = 1024;
      *(_DWORD *)&v60[2] = v13;
      *(_WORD *)v61 = 1024;
      *(_DWORD *)&v61[2] = HIDWORD(v39);
      *(_WORD *)v62 = 1024;
      *(_DWORD *)&v62[2] = v40;
      *(_WORD *)v63 = 1024;
      *(_DWORD *)&v63[2] = v14;
      LOWORD(v64) = 2048;
      *(double *)((char *)&v64 + 2) = v15;
      WORD5(v64) = 1024;
      HIDWORD(v64) = v5 > v6;
      *(_WORD *)v65 = 1024;
      *(_DWORD *)&v65[2] = v8;
      *(_WORD *)v66 = 1024;
      *(_DWORD *)&v66[2] = HIDWORD(v40);
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "AssistedCyclingOverrideState,endTime,%f,previousOverride,%d,currentOverride,%d,totalSamplesAboveVO2MaxThreshold,%d,totalSamplesAboveVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAccelVectorMagnitude,%f,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSessionDurationOk,%d", buf, 0x4Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102191480);
      v35 = *(_QWORD *)(a2 + 128);
      v36 = *(unsigned __int8 *)a1;
      v43 = 134220544;
      v44 = v35;
      v45 = 1024;
      *(_DWORD *)v46 = v4;
      *(_WORD *)&v46[4] = 1024;
      *(_DWORD *)&v46[6] = v36;
      *(_WORD *)v47 = 1024;
      *(_DWORD *)&v47[2] = v13;
      *(_WORD *)v48 = 1024;
      *(_DWORD *)&v48[2] = HIDWORD(v39);
      *(_WORD *)v49 = 1024;
      *(_DWORD *)&v49[2] = v40;
      *(_WORD *)v50 = 1024;
      *(_DWORD *)&v50[2] = v14;
      LOWORD(v51) = 2048;
      *(double *)((char *)&v51 + 2) = v15;
      WORD5(v51) = 1024;
      HIDWORD(v51) = v5 > v6;
      *(_WORD *)v52 = 1024;
      *(_DWORD *)&v52[2] = v8;
      *(_WORD *)v53 = 1024;
      *(_DWORD *)&v53[2] = HIDWORD(v40);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "AssistedCyclingOverrideState,endTime,%f,previousOverride,%d,currentOverride,%d,totalSamplesAboveVO2MaxThreshold,%d,totalSamplesAboveVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAccelVectorMagnitude,%f,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSessionDurationOk,%d", COERCE_DOUBLE(&v43), 76, v40, (_DWORD)__p, (_DWORD)v42, DWORD2(v42));
      v38 = (char *)v37;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLAssistedCyclingDetector::detect(const CLNatalieModelInput &)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
  }
  v27 = *(unsigned __int8 *)a1;
  if (__p)
    operator delete(__p);
  return v27 != 0;
}

void sub_100EE7290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100EE72B8(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v5;
  uuid_t dst;

  memset(dst, 0, sizeof(dst));
  uuid_copy(dst, (const unsigned __int8 *)(a2 + 354));
  if (uuid_is_null(dst))
    return 0;
  v5 = uuid_compare((const unsigned __int8 *)(a1 + 28), dst);
  result = v5 != 0;
  if (*(_BYTE *)(a2 + 352))
  {
    if (v5)
    {
      uuid_copy((unsigned __int8 *)(a1 + 28), dst);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 128);
      *(_DWORD *)(a1 + 24) = 1106247680;
      return 1;
    }
  }
  return result;
}

void sub_100EE7380(uint64_t a1@<X1>, void **a2@<X8>)
{
  int v4;
  uint64_t v5;
  double v6;
  char isTypeCycling;
  char v8;
  int v9;
  int v10;
  int v11;
  float v12;
  float v13;
  uint64_t v14;
  int v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  float *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char v30[24];
  int v31;
  double v32;
  double v33[24];
  char v34[8];
  uint64_t v35;
  double v36;
  char v37[8];
  unsigned int v38;
  int v39;
  char v40;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    v6 = *(double *)(a1 + 128) + (double)v4 * -2.56;
    if (!(*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48), v6)
      || !(*(unsigned int (**)(_QWORD, char *, double))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v37, v6))
    {
      break;
    }
    isTypeCycling = CLMotionActivity::isTypeCycling(v38);
    v8 = v40 ? isTypeCycling : 0;
    if ((v8 & 1) == 0)
      break;
    if ((*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v6)
      && (*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v6)
      && (*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24), v6)
      && (*(unsigned int (**)(_QWORD, char *, double))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v34, v6)&& (*(unsigned int (**)(_QWORD, double *, double))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v33, v6))
    {
      v9 = (*(uint64_t (**)(_QWORD, char *, double))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), v30, v6);
      v10 = v36 >= 0.6 ? v9 : 0;
      if (v10 == 1 && v33[0] > 0.0)
      {
        v11 = v31;
        if (v31)
        {
          v12 = v33[4];
          v13 = v32;
          v14 = v35;
          v15 = v39;
          v17 = (double *)a2[1];
          v16 = (double *)a2[2];
          if (v17 >= v16)
          {
            v19 = (double *)*a2;
            v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v17 - (_BYTE *)*a2) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0x666666666666666)
              sub_100259694();
            v22 = 0xCCCCCCCCCCCCCCCDLL * (v16 - v19);
            if (2 * v22 > v21)
              v21 = 2 * v22;
            if (v22 >= 0x333333333333333)
              v23 = 0x666666666666666;
            else
              v23 = v21;
            if (v23)
            {
              v24 = (char *)sub_100357184(v5, v23);
              v19 = (double *)*a2;
              v17 = (double *)a2[1];
            }
            else
            {
              v24 = 0;
            }
            v25 = (float *)&v24[40 * v20];
            *(double *)v25 = v6;
            v25[2] = v12;
            v25[3] = v13;
            *((_DWORD *)v25 + 4) = v11;
            *((_QWORD *)v25 + 3) = v14;
            *((_DWORD *)v25 + 8) = v15;
            if (v17 == v19)
            {
              v29 = &v24[40 * v20];
            }
            else
            {
              v26 = &v24[40 * v20];
              do
              {
                v27 = *(_OWORD *)(v17 - 5);
                v28 = *(_OWORD *)(v17 - 3);
                v29 = v26 - 40;
                *((_DWORD *)v26 - 2) = *((_DWORD *)v17 - 2);
                *(_OWORD *)(v26 - 24) = v28;
                *(_OWORD *)(v26 - 40) = v27;
                v17 -= 5;
                v26 -= 40;
              }
              while (v17 != v19);
            }
            v18 = (double *)(v25 + 10);
            *a2 = v29;
            a2[1] = v25 + 10;
            a2[2] = &v24[40 * v23];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v17 = v6;
            *((float *)v17 + 2) = v12;
            *((float *)v17 + 3) = v13;
            *((_DWORD *)v17 + 4) = v11;
            *((_QWORD *)v17 + 3) = v14;
            v18 = v17 + 5;
            *((_DWORD *)v17 + 8) = v15;
          }
          a2[1] = v18;
        }
      }
    }
    ++v4;
  }
  while (v4 != 14);
}

void sub_100EE7690(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EE76B8(uint64_t *a1@<X1>, float *a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  float v13;
  uint64_t v14;
  float v15;
  int v16;
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v26;
  float *v27;
  float *v28;
  float *v29;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v6 = sub_100EE7AD4(&v28, 0xAuLL);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = a2[342] * 1.2;
    do
    {
      v14 = v7 + v8;
      v15 = *(float *)(v14 + 12);
      v16 = *(_DWORD *)(v14 + 16);
      v17 = *(double *)(v14 + 24);
      v18 = *(float *)(v14 + 32);
      sub_100FC55D0(*(float *)(v14 + 8), v15, a2[341]);
      v20 = v19;
      v21 = v17;
      v22 = sub_100FC4370((uint64_t)a2, v21);
      if ((v16 - 1) <= 1)
      {
        v23 = 1.0 - (a2[345] - v17) / (a2[345] - a2[346]);
        v24 = v23 > 0.05 && v23 < 0.5;
        if (v24 && v20 > 7.5)
        {
          if (v20 > v13)
            *(_DWORD *)a3 = ++v12;
          if (v15 > 0.56)
            *(_DWORD *)(a3 + 4) = ++v11;
          if (v22 > 0.0 && (float)(v20 / v22) > 1.9)
            *(_DWORD *)(a3 + 8) = ++v10;
        }
      }
      if (v9 <= 9)
        v28[v9] = v18;
      ++v9;
      v7 = *a1;
      v8 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) > v9);
  }
  *(_DWORD *)(a3 + 12) = sub_100EE78F0((uint64_t)v6, a1, (uint64_t)a2);
  v27 = v28;
  if ((char *)v29 - (char *)v28 == 40)
  {
    if (v28 + 5 != v29)
    {
      sub_10053EEC0(v28, v28 + 5, v29, v26);
      v27 = v28;
    }
    *(float *)(a3 + 16) = v27[5];
  }
  else if (!v28)
  {
    return;
  }
  v29 = v27;
  operator delete(v27);
}

void sub_100EE78C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EE78F0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  _BOOL4 v14;
  double v15;
  int v17;
  float v18;
  uint64_t v21;
  int v22;
  double v23;
  double v24[24];

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = (int)(-858993459 * ((a2[1] - *a2) >> 3));
  do
  {
    if (v6 >= v8)
    {
      v15 = *(double *)(a3 + 128) + (double)(int)v6 * -2.56;
      if ((*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(a3 + 24) + 48))(*(_QWORD *)(a3 + 24), v15))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), &v21, v15)&& v22 != 0)
        {
          v18 = v23;
          v14 = v18 < -0.0278 || v22 == 3;
          goto LABEL_30;
        }
      }
      if (!(*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(a3 + 16) + 48))(*(_QWORD *)(a3 + 16), v15))
      {
        v14 = 0;
        goto LABEL_30;
      }
      v17 = (*(uint64_t (**)(_QWORD, double *, double))(**(_QWORD **)(a3 + 16) + 24))(*(_QWORD *)(a3 + 16), v24, v15);
      v14 = 0;
      if (!v17 || v24[0] <= 0.0)
        goto LABEL_30;
      v10 = v24[4];
      v14 = v10 < 0.44;
    }
    else
    {
      v9 = *a2 + v5;
      v10 = *(float *)(v9 + 8);
      v11 = *(float *)(v9 + 12);
      v12 = *(_DWORD *)(v9 + 16);
      v14 = v11 < -0.0278 || v12 == 3;
      if (v10 < 0.44)
        v14 = 1;
    }
    if (v10 > 12.5)
      v14 = 1;
LABEL_30:
    if ((int)v7 > 6)
      break;
    v7 = v14 ? (v7 + 1) : 0;
    ++v6;
    v5 += 40;
  }
  while (v6 != 36);
  return v7;
}

void sub_100EE7AA8(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

_QWORD *sub_100EE7AD4(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1002720D4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_100EE7B2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EE7BEC(id a1)
{
  qword_102309030 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSensorCalibrationControllerSilo"));
}

uint64_t sub_100EE7CA0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100EE8350;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102309040 != -1)
    dispatch_once(&qword_102309040, block);
  return qword_1023118C0;
}

uint64_t sub_100EE7E24(uint64_t a1, char a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint8_t *v12;
  void *__p[2];
  char v14;
  _DWORD v15[4];
  uint8_t buf[8];

  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v4 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
  {
    v5 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "fState,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v10 = *(_DWORD *)(a1 + 272);
    v15[0] = 67240192;
    v15[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "fState,%{public}d", v15, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorCalibrationController::start(BOOL)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (!*(_DWORD *)(a1 + 272))
  {
    if (sub_1001DFAE8())
    {
      sub_100119F3C(buf);
      sub_1005285B4((uint64_t)buf, "Status", "start");
      sub_1001DFAF4((uint64_t)buf, (uint64_t)"MotionSensorCalibration");
      sub_10011A5A8(buf);
    }
    *(_BYTE *)(a1 + 276) = a2;
    LOBYTE(v15[0]) = a2;
    *(_DWORD *)buf = 0;
    v6 = (*(uint64_t (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v15, 1, 0xFFFFFFFFLL, 0);
    if (*(_BYTE *)(a1 + 300))
    {
      if (!*(_QWORD *)(a1 + 328))
        operator new();
      sub_101931268(v6);
LABEL_29:
      __break(1u);
    }
    if (*(int *)(a1 + 344) >= 1)
    {
      sub_101930E30(v6);
      goto LABEL_29;
    }
    sub_1015A2E04(__p, "start");
    sub_10002B684(a1 + 336, (uint64_t *)__p);
    if (v14 < 0)
      operator delete(__p[0]);
    dispatch_resume(*(dispatch_object_t *)(a1 + 320));
    v7 = *(_QWORD *)(a1 + 240);
    if (v7)
    {
      if (*(_BYTE *)(a1 + 171))
      {
        sub_101931100();
        goto LABEL_29;
      }
      *(_QWORD *)(a1 + 240) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    v8 = *(NSObject **)(a1 + 256);
    if (v8)
    {
      dispatch_source_cancel(v8);
      dispatch_release(*(dispatch_object_t *)(a1 + 256));
      *(_QWORD *)(a1 + 256) = 0;
    }
    sub_100D9C13C();
  }
  return 0;
}

void sub_100EE82C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  operator delete();
}

void sub_100EE8350()
{
  operator new();
}

void sub_100EE8398()
{
  operator delete();
}

void sub_100EE83BC(uint64_t a1, void *a2)
{
  *(_QWORD *)sub_100EE8F58(a1, "CLSensorCalibrationController", a2) = off_1021914D0;
  operator new();
}

void sub_100EE8E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, id **a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a8);
  sub_100261F44((uint64_t)va);
  v10 = v8[48];
  v8[48] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_100E3E6C8(a5);
  sub_100EE9D90(v8 + 38, 0);
  v11 = v8[33];
  v8[33] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v8[30];
  v8[30] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_1006D558C(a6, 0);
  sub_100EE9790((uint64_t)v8);
  _Unwind_Resume(a1);
}

uint64_t sub_100EE8F58(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021916C8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100EE8FD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100EE8FF4(uint64_t a1)
{
  sub_100EE8FFC(*(_QWORD *)(a1 + 32));
}

void sub_100EE8FFC(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  float v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  double v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  double v18;

  v2 = sub_100078B88();
  v3 = *(double *)(a1 + 288);
  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v4 = v2 - v3;
  v5 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
  {
    v6 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)buf = 67240448;
    v16 = v6;
    v17 = 2050;
    v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "state,%{public}d,elapsed,%{public}f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v9 = *(_DWORD *)(a1 + 272);
    v12[0] = 67240448;
    v12[1] = v9;
    v13 = 2050;
    v14 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "state,%{public}d,elapsed,%{public}f", v12, 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::onTimer()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v7 = *(_QWORD *)(a1 + 304);
  if (v7)
  {
    if ((*(_DWORD *)(a1 + 272) - 3) <= 0xFFFFFFFD)
      sub_1019313D0();
    v8 = ceil(v4 * 8.0 / *(double *)(a1 + 312)) * 0.800000012 * 0.125;
    sub_1008041A4(v7, v8);
  }
  if (v4 >= *(double *)(a1 + 312))
  {
    sub_100EEB518(a1, 1);
    sub_100EE9DCC(a1);
  }
}

void sub_100EE9248(uint64_t a1, int *a2, __int128 *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  int v9;
  void *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[8];
  _BYTE v14[32];
  __int128 v15;
  uint64_t v16;
  int v17;

  CLProfilingIdentify("CLSensorCalibrationController::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102191658);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorCalibrationController::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102191658);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v14 = 2082;
      *(_QWORD *)&v14[2] = "";
      *(_WORD *)&v14[10] = 2082;
      *(_QWORD *)&v14[12] = "activity";
      *(_WORD *)&v14[20] = 2050;
      *(_QWORD *)&v14[22] = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorCalibrationController::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  v9 = *a2;
  v15 = *a3;
  v16 = *((_QWORD *)a3 + 2);
  v10 = *(void **)(a4 + 40);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v14 = 3221225472;
  *(_QWORD *)&v14[8] = sub_100EEC27C;
  *(_QWORD *)&v14[16] = &unk_102146A10;
  *(_QWORD *)&v14[24] = a4;
  v17 = v9;
  objc_msgSend(v10, "async:", buf);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100EE9444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100EE9464(uint64_t a1, io_registry_entry_t entry, int a3)
{
  void *v4;
  unsigned int v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  unsigned int v14;

  if (a3 == -469794816)
  {
    v4 = (id)IORegistryEntryCreateCFProperty(entry, CFSTR("Cloaked"), kCFAllocatorDefault, 0);
    if (v4)
    {
      v5 = objc_msgSend(v4, "BOOLValue");
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v6 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Charger cloaking status %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102191678);
        v12[0] = 67240192;
        v12[1] = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "Charger cloaking status %{public}d", v12, 8);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "static void CLSensorCalibrationController::onCloakingStatusChangedBounce(void *, io_service_t, uint32_t, void *)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      sub_100EEBCA4(a1, v5);
    }
    else
    {
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v7 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to get cloaking status", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102191678);
        LOWORD(v12[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 17, "Failed to get cloaking status", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "static void CLSensorCalibrationController::onCloakingStatusChangedBounce(void *, io_service_t, uint32_t, void *)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

uint64_t sub_100EE9790(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021916C8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100EE9804(uint64_t a1)
{
  io_object_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1021914D0;
  if (sub_100761B14())
  {
    v2 = *(_DWORD *)(a1 + 192);
    if (v2)
    {
      IOObjectRelease(v2);
      *(_DWORD *)(a1 + 192) = 0;
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 184));
  }
  sub_100EE98D8(a1, 4);
  dispatch_resume(*(dispatch_object_t *)(a1 + 320));
  dispatch_release(*(dispatch_object_t *)(a1 + 320));
  v3 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100E3E6C8(a1 + 336);
  sub_100EE9D90((uint64_t *)(a1 + 304), 0);
  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1006D558C((id **)(a1 + 112), 0);
  return sub_100EE9790(a1);
}

void sub_100EE98D8(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;

  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v4 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v5 = (const char *)qword_1021915A0[a2];
    else
      v5 = "";
    *(_DWORD *)buf = 67240450;
    v19 = a2;
    v20 = 2082;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLSensorCalibrationController aborted,reason,%{public}d,%{public}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    if (a2)
      v11 = (const char *)qword_1021915A0[a2];
    else
      v11 = "";
    v15[0] = 67240450;
    v15[1] = a2;
    v16 = 2082;
    v17 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 0, "CLSensorCalibrationController aborted,reason,%{public}d,%{public}s", v15, 18);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::abort(CLSensorCalibrationController_Type::AbortReason)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (a2 != 1 || !*(_BYTE *)(a1 + 276))
  {
    v9 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *(_BYTE *)(a1 + 171) = 0;
    v10 = *(NSObject **)(a1 + 256);
    if (v10)
    {
      dispatch_source_cancel(v10);
      dispatch_release(*(dispatch_object_t *)(a1 + 256));
      *(_QWORD *)(a1 + 256) = 0;
    }
    if (*(_DWORD *)(a1 + 272))
    {
      sub_100EEB518(a1, 0);
LABEL_29:
      sub_100793B2C(*(_QWORD **)(a1 + 112), (uint64_t)CFSTR("RegularCal.Abort"), 1);
      sub_100EE9DCC(a1);
      return;
    }
    if (*(_QWORD *)(a1 + 328))
    {
      v10 = sub_1019317F0();
    }
    else if (!*(_QWORD *)(a1 + 304))
    {
      if (!*(_QWORD *)(a1 + 384))
        goto LABEL_29;
LABEL_40:
      sub_101931530(v10);
    }
    v10 = sub_101931690(v10);
    goto LABEL_40;
  }
  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v6 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ignoring abort for user initiated calibration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    LOWORD(v15[0]) = 0;
    LODWORD(v14) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 0, "Ignoring abort for user initiated calibration", v15, v14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::abort(CLSensorCalibrationController_Type::AbortReason)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100EE9CA4(uint64_t a1)
{
  sub_100EE9804(a1);
  operator delete();
}

id sub_100EE9CC8(__int128 *a1, uint64_t a2)
{
  void *v2;
  _QWORD v4[5];
  __int128 v5;

  v5 = *a1;
  v2 = *(void **)(a2 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100EEBECC;
  v4[3] = &unk_102143548;
  v4[4] = a2;
  return objc_msgSend(v2, "async:", v4);
}

uint64_t sub_100EE9D24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_10021C350();
  return sub_1000A4FD8(v2, 1, *(_QWORD *)(v1 + 328), 1.0);
}

void sub_100EE9D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 384);
  *(_QWORD *)(v1 + 384) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_BYTE *)(v1 + 171) = 0;
  sub_100EE98D8(v1, 2);
}

uint64_t sub_100EE9D90(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10080417C(result);
    operator delete();
  }
  return result;
}

void sub_100EE9DCC(uint64_t a1)
{
  int *p_buf;
  NSObject *v2;
  double Current;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  NSObject *v26;
  const char *v27;
  int *v28;
  uint64_t v29;
  double v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  unint64_t v39;
  NSObject *v40;
  dispatch_time_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  NSObject *v47;
  const char *v48;
  NSObject *v49;
  const char *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void **v60;
  void **v61;
  void **v62;
  int v63;
  int v64;
  char *v65;
  char *v66;
  uint64_t v67;
  const char *v68;
  int *v69;
  uint64_t v70;
  const char *v71;
  int *v72;
  const char *v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  int *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _QWORD handler[5];
  void *v83[2];
  char v84;
  void *__p[2];
  char v86;
  _QWORD v87[2];
  uint64_t v88;
  _QWORD v89[10];
  char v90;
  uint64_t v91;
  void *v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  void **v104;
  __int16 v105;
  void **v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  _BYTE v111[12];
  __int16 v112;
  _BYTE v113[10];
  _QWORD v114[10];
  char v115;
  uint64_t v116;
  int buf;
  _BYTE buf_4[10];
  uint64_t v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  void **v126;
  __int16 v127;
  void **v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;

  if (*(_DWORD *)(a1 + 272))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v2 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Calibration is already running", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(&buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    *(_WORD *)v111 = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Calibration is already running", v111, 2);
    v28 = (int *)v50;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v50);
LABEL_120:
    if (v28 != &buf)
      free(v28);
    return;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 232);
  v6 = Current - *(double *)(a1 + 224);
  v7 = *(double *)(a1 + 128) - v6;
  *(_BYTE *)(a1 + 172) = v7 <= 0.0;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102191698);
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG) || sub_1001BFF7C(115, 2))
  {
    sub_100263E50((uint64_t)v111);
    if (*(double *)(a1 + 224) == -1.79769313e308)
    {
      sub_100263F7C(&v113[2], (uint64_t)"never", 5);
    }
    else
    {
      *(_DWORD *)&v113[*(_QWORD *)(*(_QWORD *)&v113[2] - 24) + 10] = *(_DWORD *)&v113[*(_QWORD *)(*(_QWORD *)&v113[2]
                                                                                                  - 24)
                                                                                      + 10] & 0xFFFFFEFB | 4;
      std::ostream::operator<<(&v113[2], v6);
    }
    sub_100263E50((uint64_t)v87);
    if (*(double *)(a1 + 232) == -1.79769313e308)
    {
      sub_100263F7C(&v88, (uint64_t)"never", 5);
    }
    else
    {
      *(_DWORD *)((char *)v89 + *(_QWORD *)(v88 - 24)) = *(_DWORD *)((_BYTE *)v89 + *(_QWORD *)(v88 - 24)) & 0xFFFFFEFB | 4;
      std::ostream::operator<<(&v88, Current - v5);
    }
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v8 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int8 *)(a1 + 168);
      v10 = *(unsigned __int8 *)(a1 + 169);
      v11 = *(unsigned __int8 *)(a1 + 170);
      v12 = *(unsigned __int8 *)(a1 + 171);
      v80 = *(unsigned __int8 *)(a1 + 172);
      v13 = fmax(v7, 0.0);
      v14 = *(_QWORD *)&v7;
      if (v7 <= 0.0)
        v14 = 0;
      if (v13 <= 604800.0)
        v15 = v14;
      else
        v15 = 0x4122750000000000;
      std::stringbuf::str(&v92, v114);
      v16 = SBYTE1(v98);
      v17 = (void **)v92;
      std::stringbuf::str(__p, v89);
      v18 = &v92;
      if (v16 < 0)
        v18 = v17;
      if (v86 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      v20 = *(_DWORD *)(a1 + 212);
      v21 = *(unsigned __int8 *)(a1 + 208);
      buf = 67242498;
      *(_DWORD *)buf_4 = v9;
      *(_WORD *)&buf_4[4] = 1026;
      *(_DWORD *)&buf_4[6] = v10;
      LOWORD(v119) = 1026;
      *(_DWORD *)((char *)&v119 + 2) = v11;
      HIWORD(v119) = 1026;
      v120 = v12;
      v121 = 1026;
      v122 = v80;
      v123 = 2050;
      v124 = v15;
      v125 = 2082;
      v126 = v18;
      v127 = 2082;
      v128 = v19;
      v129 = 1026;
      v130 = v20;
      v131 = 1026;
      v132 = v21;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BatteryReady,%{public}d,ThermalReady,%{public}d,DisplayReady,%{public}d,StaticReady,%{public}d,MinimumIntervalReady,%{public}d,timeToIntervalReady,%{public}.0f,sinceLastCal,%{public}s,sinceLastUnpluggedCalAttempt,%{public}s,ChargerFamily,%{public}x,ChargerCloaked,%{public}u", (uint8_t *)&buf, 0x4Au);
      if (v86 < 0)
        operator delete(__p[0]);
      if (SBYTE1(v98) < 0)
        operator delete(v92);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v81 = qword_10229FD38;
      v51 = *(unsigned __int8 *)(a1 + 168);
      v52 = *(unsigned __int8 *)(a1 + 169);
      v53 = *(unsigned __int8 *)(a1 + 170);
      v54 = *(unsigned __int8 *)(a1 + 171);
      v55 = *(unsigned __int8 *)(a1 + 172);
      v56 = fmax(v7, 0.0);
      v57 = *(_QWORD *)&v7;
      if (v7 <= 0.0)
        v57 = 0;
      if (v56 <= 604800.0)
        v58 = v57;
      else
        v58 = 0x4122750000000000;
      std::stringbuf::str(__p, v114);
      v59 = v86;
      v60 = (void **)__p[0];
      std::stringbuf::str(v83, v89);
      v61 = __p;
      if (v59 < 0)
        v61 = v60;
      if (v84 >= 0)
        v62 = v83;
      else
        v62 = (void **)v83[0];
      v63 = *(_DWORD *)(a1 + 212);
      v64 = *(unsigned __int8 *)(a1 + 208);
      LODWORD(v92) = 67242498;
      HIDWORD(v92) = v51;
      v93 = 1026;
      v94 = v52;
      v95 = 1026;
      v96 = v53;
      v97 = 1026;
      v98 = v54;
      v99 = 1026;
      v100 = v55;
      v101 = 2050;
      v102 = v58;
      v103 = 2082;
      v104 = v61;
      v105 = 2082;
      v106 = v62;
      v107 = 1026;
      v108 = v63;
      v109 = 1026;
      v110 = v64;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v81, 0, "BatteryReady,%{public}d,ThermalReady,%{public}d,DisplayReady,%{public}d,StaticReady,%{public}d,MinimumIntervalReady,%{public}d,timeToIntervalReady,%{public}.0f,sinceLastCal,%{public}s,sinceLastUnpluggedCalAttempt,%{public}s,ChargerFamily,%{public}x,ChargerCloaked,%{public}u", &v92, 74);
      v66 = v65;
      if (v84 < 0)
        operator delete(v83[0]);
      if (v86 < 0)
        operator delete(__p[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v66);
      if (v66 != (char *)&buf)
        free(v66);
    }
    *(_QWORD *)((char *)v87
    v88 = v23;
    if (v90 < 0)
      operator delete((void *)v89[8]);
    std::streambuf::~streambuf(v89);
    std::ios::~ios(&v91);
    *(_QWORD *)v111 = v22;
    *(_QWORD *)&v111[*(_QWORD *)(v22 - 24)] = v24;
    p_buf = (int *)v114;
    *(_QWORD *)&v113[2] = v23;
    if (v115 < 0)
      operator delete((void *)v114[8]);
    std::streambuf::~streambuf(v114);
    std::ios::~ios(&v116);
  }
  if (!*(_BYTE *)(a1 + 168) || !*(_BYTE *)(a1 + 169) || !*(_BYTE *)(a1 + 170))
    return;
  if (!*(_BYTE *)(a1 + 172))
  {
    if (*(_QWORD *)(a1 + 256))
    {
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v26 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Still waiting for long wait timer", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102191678);
        *(_WORD *)v111 = 0;
        LODWORD(v79) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "Still waiting for long wait timer", v111, v79);
        v28 = (int *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v27);
        goto LABEL_120;
      }
      return;
    }
    p_buf = (int *)DefaultObserver;
    if (v7 > 0.0)
    {
      if (qword_10229FD30 == -1)
      {
LABEL_90:
        v38 = qword_10229FD38;
        if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
        {
          buf = 134349056;
          *(_QWORD *)buf_4 = (unint64_t)(v7 + 1.0);
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Starting long wait timer for %{public}llu seconds", (uint8_t *)&buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (*((_QWORD *)p_buf + 422) != -1)
            dispatch_once(&qword_10229FD30, &stru_102191678);
          v39 = (unint64_t)(v7 + 1.0);
          *(_DWORD *)v111 = 134349056;
          *(_QWORD *)&v111[4] = v39;
          LODWORD(v79) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Starting long wait timer for %{public}llu seconds", v111, v79);
          v74 = (int *)v73;
          sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v73);
          if (v74 != &buf)
            free(v74);
        }
        else
        {
          v39 = (unint64_t)(v7 + 1.0);
        }
        v40 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 40), "queue"));
        *(_QWORD *)(a1 + 256) = v40;
        v41 = dispatch_walltime(0, 1000000000 * v39);
        dispatch_source_set_timer(v40, v41, 0x2540BE400uLL, 0x2540BE400uLL);
        v42 = *(NSObject **)(a1 + 256);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100EEB1B4;
        handler[3] = &unk_10212ECA0;
        handler[4] = a1;
        dispatch_source_set_event_handler(v42, handler);
        dispatch_resume(*(dispatch_object_t *)(a1 + 256));
        return;
      }
LABEL_153:
      dispatch_once(&qword_10229FD30, &stru_102191678);
      goto LABEL_90;
    }
    sub_101931950(qword_10229FD30 == -1);
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  if (!*(_BYTE *)(a1 + 171))
  {
    v29 = *(_QWORD *)(a1 + 240);
    if (!v29)
      goto LABEL_73;
    v30 = *(double *)(a1 + 248);
    if (v30 == 0.0)
    {
      sub_101931AC4();
    }
    else
    {
      if (*(double *)(a1 + 120) == v30)
      {
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102191678);
        v43 = qword_10229FD38;
        if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
        {
          v44 = *(_QWORD *)(a1 + 248);
          buf = 134349056;
          *(_QWORD *)buf_4 = v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Still waiting for static timer of %{public}f", (uint8_t *)&buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_10229FD30 != -1)
            dispatch_once(&qword_10229FD30, &stru_102191678);
          v45 = *(_QWORD *)(a1 + 248);
          *(_DWORD *)v111 = 134349056;
          *(_QWORD *)&v111[4] = v45;
          LODWORD(v79) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Still waiting for static timer of %{public}f", v111, v79);
          v28 = (int *)v46;
          sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v46);
          goto LABEL_120;
        }
        return;
      }
      *(_QWORD *)(a1 + 240) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      p_buf = (int *)DefaultObserver;
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v31 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
      {
        v32 = *(_QWORD *)(a1 + 248);
        v33 = *(_QWORD *)(a1 + 120);
        buf = 134349312;
        *(_QWORD *)buf_4 = v32;
        *(_WORD *)&buf_4[8] = 2050;
        v119 = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Resetting static timer. Wait duration changed %{public}f -> %{public}f", (uint8_t *)&buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102191678);
        v75 = *(_QWORD *)(a1 + 248);
        v76 = *(_QWORD *)(a1 + 120);
        *(_DWORD *)v111 = 134349312;
        *(_QWORD *)&v111[4] = v75;
        v112 = 2050;
        *(_QWORD *)v113 = v76;
        LODWORD(v79) = 22;
        p_buf = &buf;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Resetting static timer. Wait duration changed %{public}f -> %{public}f", v111, v79);
        v78 = (int *)v77;
        sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v77);
        if (v78 != &buf)
          free(v78);
      }
      if (!*(_QWORD *)(a1 + 240))
      {
LABEL_73:
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102191678);
        v34 = qword_10229FD38;
        if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
        {
          v35 = *(_QWORD *)(a1 + 120);
          buf = 134349056;
          *(_QWORD *)buf_4 = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Starting static timer for %{public}f", (uint8_t *)&buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_10229FD30 != -1)
            dispatch_once(&qword_10229FD30, &stru_102191678);
          v70 = *(_QWORD *)(a1 + 120);
          *(_DWORD *)v111 = 134349056;
          *(_QWORD *)&v111[4] = v70;
          LODWORD(v79) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Starting static timer for %{public}f", v111, v79);
          v72 = (int *)v71;
          sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v71);
          if (v72 != &buf)
            free(v72);
        }
        sub_100D9C13C();
      }
      sub_101931C2C();
    }
    goto LABEL_152;
  }
  if (!sub_100647A50(*(_DWORD *)(a1 + 216)))
  {
    v25 = 480.0;
    if (!*(_BYTE *)(a1 + 300))
      v25 = 120.0;
    goto LABEL_81;
  }
  if (!sub_10016AE80())
  {
LABEL_52:
    if (!sub_100761B14())
    {
LABEL_82:
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v36 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
      {
        v37 = *(_QWORD *)(a1 + 312);
        buf = 134217984;
        *(_QWORD *)buf_4 = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "No coex; calibration runtime = %.0f sec",
          (uint8_t *)&buf,
          0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102191678);
        v67 = *(_QWORD *)(a1 + 312);
        *(_DWORD *)v111 = 134217984;
        *(_QWORD *)&v111[4] = v67;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "No coex; calibration runtime = %.0f sec",
          COERCE_DOUBLE(v111));
        v69 = (int *)v68;
        sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v68);
        if (v69 != &buf)
          free(v69);
      }
      sub_100EE7E24(a1, 0);
      return;
    }
    if (*(_BYTE *)(a1 + 208))
    {
      v25 = 50.0;
LABEL_81:
      *(double *)(a1 + 312) = v25;
      goto LABEL_82;
    }
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v49 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "Avoiding calibration during charging", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FD30 == -1)
        goto LABEL_109;
      goto LABEL_163;
    }
    return;
  }
  if (*(_BYTE *)(a1 + 181))
  {
    if (v6 >= *(double *)(a1 + 200))
      *(_QWORD *)(a1 + 312) = 0x4049000000000000;
    goto LABEL_52;
  }
  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v47 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Avoiding calibration during charging", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FD30 == -1)
    {
LABEL_109:
      *(_WORD *)v111 = 0;
      LODWORD(v79) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "Avoiding calibration during charging", v111, v79);
      v28 = (int *)v48;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v48);
      goto LABEL_120;
    }
LABEL_163:
    dispatch_once(&qword_10229FD30, &stru_102191678);
    goto LABEL_109;
  }
}

void sub_100EEB14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  sub_1018B38B4((uint64_t)&a28);
  sub_1018B38B4((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t sub_100EEB1B4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v2 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Long wait timer trigger.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Long wait timer trigger.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 256));
  dispatch_release(*(dispatch_object_t *)(v1 + 256));
  *(_QWORD *)(v1 + 256) = 0;
  return sub_100EE9DCC(v1);
}

uint64_t sub_100EEB360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 171) = 1;
  v2 = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v1 + 240) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v3 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Static timer fired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Static timer fired", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return sub_100EE9DCC(v1);
}

uint64_t sub_100EEB518(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  _QWORD *v7;
  const __CFString *v8;
  double v9;
  double Current;
  NSObject *v11;
  double v12;
  double v13;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  const char *v23;
  char *v24;
  double v25;
  double v26;
  const char *v27;
  char *v28;
  double v29;
  double v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  _BYTE v35[10];
  double v36;
  _BYTE buf[14];
  double v38;

  HIBYTE(v33) = a2;
  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v4 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v5;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopped sensor calibration, fState, %{public}d, successful, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v22 = *(_DWORD *)(a1 + 272);
    v34 = 67240448;
    *(_DWORD *)v35 = v22;
    *(_WORD *)&v35[4] = 1026;
    *(_DWORD *)&v35[6] = HIBYTE(v33);
    LODWORD(v33) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 0, "Stopped sensor calibration, fState, %{public}d, successful, %{public}d", &v34, v33);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    sub_1005285B4((uint64_t)buf, "Status", "stop");
    sub_10011B47C((uint64_t)buf, "FinishFlag", (_BYTE *)&v33 + 7);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"MotionSensorCalibration");
    sub_10011A5A8(buf);
  }
  if (!*(_DWORD *)(a1 + 272))
    goto LABEL_33;
  dispatch_suspend(*(dispatch_object_t *)(a1 + 320));
  v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 2)
  {
    buf[0] = *(_BYTE *)(a1 + 276);
    if (HIBYTE(v33))
      v34 = 4;
    else
      v34 = 3;
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v34, buf, 1, 0xFFFFFFFFLL, 0);
    v7 = *(_QWORD **)(a1 + 112);
    if (*(_BYTE *)(a1 + 180))
      v8 = CFSTR("VirusRunTime.PluggedIn");
    else
      v8 = CFSTR("VirusRunTime.OnBattery");
    v9 = sub_100078B88();
    sub_100793B2C(v7, (uint64_t)v8, (uint64_t)(v9 - *(double *)(a1 + 288)));
    v6 = *(_DWORD *)(a1 + 272);
  }
  if ((v6 - 1) > 1)
    goto LABEL_33;
  Current = CFAbsoluteTimeGetCurrent();
  if (!HIBYTE(v33))
  {
    *(double *)(a1 + 224) = Current - *(double *)(a1 + 128) + *(double *)(a1 + 160);
    if (qword_10229FD30 == -1)
      goto LABEL_22;
    goto LABEL_48;
  }
  if (Current - *(double *)(a1 + 224) >= *(double *)(a1 + 144))
  {
    *(double *)(a1 + 224) = Current - *(double *)(a1 + 128) + *(double *)(a1 + 136);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v15 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(double *)(a1 + 224);
      v17 = v16 + *(double *)(a1 + 128);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2050;
      v38 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Scheduling double calibration,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v29 = *(double *)(a1 + 224);
      v30 = v29 + *(double *)(a1 + 128);
      v34 = 134349312;
      *(double *)v35 = v29;
      *(_WORD *)&v35[8] = 2050;
      v36 = v30;
      LODWORD(v33) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 0, "Scheduling double calibration,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f", &v34, v33);
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
  }
  else
  {
    *(double *)(a1 + 224) = Current;
  }
  sub_100793B2C(*(_QWORD **)(a1 + 112), (uint64_t)CFSTR("RegularCal.Finish"), 1);
  while (1)
  {
    *(_QWORD *)buf = *(_QWORD *)(a1 + 224);
    v34 = 5;
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v34, buf, 1, 0xFFFFFFFFLL, 0);
    v18 = sub_1001FD94C();
    sub_10018A4CC(v18, "GyroCalibrationLastCalibration", (const void *)(a1 + 224));
LABEL_33:
    sub_100EE9D90((uint64_t *)(a1 + 304), 0);
    if (*(_QWORD *)(a1 + 328))
    {
      v19 = sub_10021C350();
      sub_1000A4A6C(v19, 1, *(_QWORD *)(a1 + 328));
      v20 = *(_QWORD *)(a1 + 328);
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      *(_QWORD *)(a1 + 328) = 0;
    }
    buf[0] = *(_BYTE *)(a1 + 276);
    v34 = 1;
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v34, buf, 1, 0xFFFFFFFFLL, 0);
    if (*(int *)(a1 + 344) >= 1)
      sub_100E3E6F0(a1 + 336);
    result = *(_QWORD *)(a1 + 384);
    *(_QWORD *)(a1 + 384) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_BYTE *)(a1 + 171) = 0;
    if (!*(_QWORD *)(a1 + 240))
      break;
    sub_101931D94(result);
    __break(1u);
LABEL_48:
    dispatch_once(&qword_10229FD30, &stru_102191678);
LABEL_22:
    v11 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(double *)(a1 + 224);
      v13 = v12 + *(double *)(a1 + 128);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2050;
      v38 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Scheduling retry calibration after previous aborted run,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v25 = *(double *)(a1 + 224);
      v26 = v25 + *(double *)(a1 + 128);
      v34 = 134349312;
      *(double *)v35 = v25;
      *(_WORD *)&v35[8] = 2050;
      v36 = v26;
      LODWORD(v33) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 0, "Scheduling retry calibration after previous aborted run,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f", &v34, v33);
      v28 = (char *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.CoreMotion.gyrocal.abort"), 0, 0, 0);
  }
  *(_BYTE *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  return result;
}

void sub_100EEBC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100EEBCA4(uint64_t a1, char a2)
{
  void *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  _QWORD v9[5];
  char v10;
  uint8_t buf[1640];

  if (sub_100761B14())
  {
    v4 = *(void **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100EEBE7C;
    v9[3] = &unk_1021468D0;
    v9[4] = a1;
    v10 = a2;
    objc_msgSend(v4, "async:", v9);
  }
  else
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v5 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Getting cloaking event for unexpected HW", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 17, "Getting cloaking event for unexpected HW", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLSensorCalibrationController::onCloakingStatusChanged(BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100EEBE7C(uint64_t a1)
{
  uint64_t v2;
  double v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 216) == 3)
  {
    *(_BYTE *)(v2 + 208) = *(_BYTE *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
    {
      v3 = 480.0;
      if (!*(_BYTE *)(v2 + 300))
        v3 = 120.0;
      *(double *)(v2 + 312) = v3;
      sub_100EE98D8(v2, 5);
    }
  }
}

void sub_100EEBECC(uint64_t a1)
{
  sub_100EEBEDC(*(_QWORD *)(a1 + 32), a1 + 40);
}

void sub_100EEBEDC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  double v6;
  float v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  double v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  double v26;

  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102191678);
  v4 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 272);
    v6 = *(float *)(a2 + 8);
    *(_DWORD *)buf = 67240448;
    v24 = v5;
    v25 = 2050;
    v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "state,%{public}d,temperature,%{public}f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v14 = *(_DWORD *)(a1 + 272);
    v15 = *(float *)(a2 + 8);
    v19 = 67240448;
    v20 = v14;
    v21 = 2050;
    v22 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "state,%{public}d,temperature,%{public}f", &v19, 18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::onGyroTemperature(const CLGyro::Temperature *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v7 = *(float *)(a1 + 280);
  if (v7 == 3.4028e38)
  {
    v7 = *(float *)(a2 + 8);
    *(float *)(a1 + 280) = v7;
  }
  v8 = *(_DWORD *)(a1 + 272);
  if (v8 == 1)
  {
    if (*(float *)(a2 + 8) >= (float)(v7 + *(float *)(a1 + 296)))
    {
      v19 = 2;
      (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v19, buf, 1, 0xFFFFFFFFLL, 0);
      *(_DWORD *)(a1 + 272) = 2;
    }
  }
  else if (v8 != 2)
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102191678);
    v9 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
    {
      v10 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)buf = 67240192;
      v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Warning: Bad state,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v11 = *(_DWORD *)(a1 + 272);
      v19 = 67240192;
      v20 = v11;
      LODWORD(v18) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Warning: Bad state,%{public}d", &v19, v18);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationController::onGyroTemperature(const CLGyro::Temperature *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_100EEC27C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  float v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 64);
  switch(v3)
  {
    case 13:
      *(_BYTE *)(v2 + 169) = *(_DWORD *)(a1 + 40) < 6;
      if (*(int *)(a1 + 40) >= 10)
        sub_100EE98D8(v2, 3);
      break;
    case 10:
      *(_BYTE *)(v2 + 170) = *(_BYTE *)(a1 + 40) ^ 1;
      break;
    case 7:
      *(_DWORD *)(v2 + 212) = *(_DWORD *)(a1 + 60);
      v4 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)(v2 + 216) = v4;
      *(_BYTE *)(v2 + 181) = *(_BYTE *)(a1 + 48);
      v5 = *(double *)(a1 + 40) > *(double *)(v2 + 152) && *(_BYTE *)(a1 + 49) != 0;
      *(_BYTE *)(v2 + 168) = v5;
      if (!*(_BYTE *)(a1 + 49))
      {
        sub_100EE98D8(v2, 1);
        v4 = *(_DWORD *)(v2 + 216);
      }
      if (sub_100647A50(v4) && !*(_BYTE *)(v2 + 181) && sub_10016AE80())
        sub_100EE98D8(v2, 5);
      v11 = *(double *)(a1 + 40);
      *(float *)(v2 + 176) = v11;
      *(_BYTE *)(v2 + 180) = *(_BYTE *)(a1 + 49);
      break;
    default:
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102191678);
      v6 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_ERROR))
      {
        v7 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)buf = 67240192;
        v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Warning: Unexpected notification %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102191678);
        v8 = *(_DWORD *)(a1 + 64);
        v12[0] = 67240192;
        v12[1] = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 16, "Warning: Unexpected notification %{public}d", v12, 8);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "void CLSensorCalibrationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)_block_invoke", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      break;
  }
  sub_100EE9DCC(v2);
}

uint64_t sub_100EEC520(_QWORD *a1)
{
  int v2;
  uint64_t v3;

  v3 = a1[28];
  v2 = 5;
  (*(void (**)(_QWORD *, int *, uint64_t *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, &v2, &v3, 1, 0xFFFFFFFFLL, 0);
  return 1;
}

uint64_t sub_100EEC56C()
{
  return 1;
}

_QWORD *sub_100EEC574@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100EEC5EC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_102191888;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100EEC6C0()
{
  operator new();
}

void sub_100EEC76C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100EEC7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102191658);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102191658);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::removeClient(int) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100EECA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FC2B0);
}

uint64_t sub_100EECA30(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100EEF5EC();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FC2B1;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102191658);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102191658);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100EECE8C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102191658);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102191658);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100EED10C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102191658);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102191658);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100EED494(uint64_t a1, int *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_1021917A8;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  v6[3] = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_100EED568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EED57C(uint64_t a1, signed __int32 *a2, _QWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102191658);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_1021917A8;
      v24[1] = 0;
      v24[3] = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100EEE2A0();
    os_activity_scope_leave(&state);
  }
}

void sub_100EEDBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100EEDC00(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102191658);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102191658);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102191658);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102191658);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102191658);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102191658);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100EEE1AC(uint64_t a1)
{
  sub_100EEF58C(a1);
  operator delete();
}

void sub_100EEE1D0(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  sub_100EEE850(a3, a2);
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD, int *, uint64_t, _QWORD))(a1 + 24))(0, &v6, v5, *(_QWORD *)(a1 + 32));
  }
}

void sub_100EEE21C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100EEE248(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100EEE274(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100EEE2A0()
{
  operator new();
}

void sub_100EEE330(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_100EEE850(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100EEE704(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102191658);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102191658);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100EEE704(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_100EEE850(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

void sub_100EEE7E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021917A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EEE7F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021917A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100EEE830(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_100EEE850(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_100EEE8C8(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_100EEEC50(a1);
  }
}

void sub_100EEE8C8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_100EEEFFC((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021917E8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C2E011 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021917E8);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorCalibrationController_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021917E8);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C2E011 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021917E8);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

id sub_100EEEC50(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021917E8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C2E011 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021917E8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021917E8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C2E011 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021917E8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorCalibrationController_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100EEEFFC(uint64_t a1, void *a2)
{
  void *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221C338))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)8)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (void *)sub_101931EFC();
  sub_100EEF070(v3);
}

void sub_100EEF070(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

_QWORD *sub_100EEF09C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102191818;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100EEF1D0;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100EEF1E4;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100EEF1A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100EEF1D0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100EEF1E4(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100EEF200(uint64_t a1)
{
  sub_100EEF4C4(a1);
  operator delete();
}

id sub_100EEF224(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  __int128 __dst;
  int v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  int v37;

  if (a4 >= 0x10)
    v8 = 16;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102191858);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v31 = 0x8000000101C2E089 & 0x7FFFFFFFFFFFFFFFLL;
      v32 = 2048;
      v33 = 16;
      v34 = 2048;
      v35 = a4;
      v36 = 1024;
      v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102191858);
      v22 = 136315906;
      v23 = 0x8000000101C2E089 & 0x7FFFFFFFFFFFFFFFLL;
      v24 = 2048;
      v25 = 16;
      v26 = 2048;
      v27 = a4;
      v28 = 1024;
      v29 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v22, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Temperature>::dispatchData(int, const void *, size_t) [T = CLGyro::Temperature]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100EEF51C;
  v18[3] = &unk_10217BDB0;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_100EEF4C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_102191818;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100EEF51C(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 64));
  return result;
}

void sub_100EEF560(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100EEF58C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_102191888;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100EEF5EC()
{
  operator new();
}

uint64_t sub_100EEF67C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100EEF6B0(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = sub_1015A2E04((_QWORD *)a1, "kBiomeAirplaneModeOff");
  sub_1015A2E04(v2 + 3, "kBiomeAirplaneModeOn");
  sub_1015A2E04((_QWORD *)(a1 + 48), "kBiomeRRCUnknown");
  sub_1015A2E04((_QWORD *)(a1 + 72), "kBiomeRRCIdle");
  sub_1015A2E04((_QWORD *)(a1 + 96), "kBiomeRRCConnected");
  *(_OWORD *)(a1 + 120) = xmmword_101C2E0A0;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021918A0);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome helper started", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, Biome helper started", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLCellularBiomePublisherHelper::CLCellularBiomePublisherHelper()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return a1;
}

void sub_100EEF8BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EEF940(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021918A0);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome helper ended", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, Biome helper ended", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLCellularBiomePublisherHelper::~CLCellularBiomePublisherHelper()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100EEFB24(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100EEFB48(uint64_t a1, const char *a2)
{
  CFStringRef v3;
  const char *v4;
  CFStringRef v5;
  const char *v6;
  CFStringRef v7;
  int v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  int v12;
  uint8_t *v13;
  int v14;
  uint8_t buf[4];
  int v16;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v4 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v4 = *(const char **)v4;
  v5 = CFStringCreateWithCString(kCFAllocatorDefault, v4, 0x8000100u);
  v6 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v6 = *(const char **)a1;
  v7 = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x8000100u);
  if (CFEqual(v3, kCTRegistrationStatusDenied)
    || CFEqual(v3, kCTRegistrationStatusSearching)
    || CFEqual(v3, kCTRegistrationStatusNotRegistered))
  {
    if (*(_DWORD *)(a1 + 124) == 4)
      v8 = 4;
    else
      v8 = 3;
  }
  else if (CFEqual(v3, kCTRegistrationStatusRegisteredHome) || CFEqual(v3, kCTRegistrationStatusRegisteredRoaming))
  {
    v8 = 1;
  }
  else if (CFEqual(v3, kCTRegistrationStatusEmergencyOnly))
  {
    v8 = 2;
  }
  else if (CFEqual(v3, v5))
  {
    v8 = 4;
  }
  else
  {
    CFEqual(v3, v7);
    v8 = 0;
  }
  if (v8 == *(_DWORD *)(a1 + 124))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, No Biome donation, state, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021918A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, No Biome donation, state, %d", &v14);
LABEL_45:
      v13 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onStateNotification(const std::string &)", "%s\n", v10);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 124) = v8;
    objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Device"), "Wireless"), "CellularQualityStatus"), "source"), "sendEvent:", objc_msgSend(objc_alloc((Class)BMDeviceCellularQualityStatus), "initWithStarting:rat:deviceRegistrationState:quality:rrcStatus:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1), *(unsigned int *)(a1 + 120), *(unsigned int *)(a1 + 124), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 128)), *(unsigned int *)(a1 + 132)));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a1 + 124);
      *(_DWORD *)buf = 67109120;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome donation, state, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021918A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, Biome donation, state, %d", &v14);
      goto LABEL_45;
    }
  }
  if (v3)
    CFRelease(v3);
  if (v5)
    CFRelease(v5);
  if (v7)
    CFRelease(v7);
}

void sub_100EEFFF0(unsigned int *a1, void *a2)
{
  id v3;
  unsigned int v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  unsigned int v8;
  uint8_t *v9;
  int v10;
  uint8_t buf[4];
  unsigned int v12;

  v3 = objc_msgSend(a2, "allValues");
  if (v3)
    v4 = objc_msgSend(objc_msgSend(v3, "objectAtIndexedSubscript:", 0), "integerValue");
  else
    v4 = -1;
  if (v4 == a1[32])
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, No Biome donation, LQM, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021918A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, No Biome donation, LQM, %d", &v10);
LABEL_22:
      v9 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onLinkQualityNotification(NSDictionary *)", "%s\n", v6);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    a1[32] = v4;
    objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Device"), "Wireless"), "CellularQualityStatus"), "source"), "sendEvent:", objc_msgSend(objc_alloc((Class)BMDeviceCellularQualityStatus), "initWithStarting:rat:deviceRegistrationState:quality:rrcStatus:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1), a1[30], a1[31], +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[32]), a1[33]));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v8 = a1[32];
      *(_DWORD *)buf = 67109120;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome donation, LQM, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021918A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, Biome donation, LQM, %d", &v10);
      goto LABEL_22;
    }
  }
}

void sub_100EF033C(uint64_t a1, uint64_t a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  int v19;
  uint8_t *v20;
  int v21;
  uint8_t buf[4];
  int v23;

  v2 = (const void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a1 + 95);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 80);
  if (v6 != v7)
    goto LABEL_17;
  if (v8 >= 0)
    v9 = (unsigned __int8 *)(a1 + 72);
  else
    v9 = *(unsigned __int8 **)(a1 + 72);
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v9, v5))
      goto LABEL_17;
LABEL_28:
    v15 = 1;
    goto LABEL_32;
  }
  if (!(_DWORD)v4)
    goto LABEL_28;
  v10 = v2;
  v11 = v4;
  while (*(unsigned __int8 *)v10 == *v9)
  {
    v10 = (const void **)((char *)v10 + 1);
    ++v9;
    if (!--v11)
      goto LABEL_28;
  }
LABEL_17:
  v12 = *(unsigned __int8 *)(a1 + 119);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a1 + 104);
  if (v6 != v12)
    goto LABEL_30;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)(a1 + 96);
  else
    v14 = *(unsigned __int8 **)(a1 + 96);
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v2, v14, v5))
      goto LABEL_31;
LABEL_30:
    v15 = 0;
    goto LABEL_32;
  }
  if ((_DWORD)v4)
  {
    while (*(unsigned __int8 *)v2 == *v14)
    {
      v2 = (const void **)((char *)v2 + 1);
      ++v14;
      if (!--v4)
        goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_31:
  v15 = 2;
LABEL_32:
  if (v15 == *(_DWORD *)(a1 + 132))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, No Biome donation, RRC, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021918A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, No Biome donation, RRC, %d", &v21);
LABEL_50:
      v20 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onRRCNotification(const std::string &)", "%s\n", v17);
      if (v20 != buf)
        free(v20);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 132) = v15;
    objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Device"), "Wireless"), "CellularQualityStatus"), "source"), "sendEvent:", objc_msgSend(objc_alloc((Class)BMDeviceCellularQualityStatus), "initWithStarting:rat:deviceRegistrationState:quality:rrcStatus:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1), *(unsigned int *)(a1 + 120), *(unsigned int *)(a1 + 124), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 128)), *(unsigned int *)(a1 + 132)));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)buf = 67109120;
      v23 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome donation, RRC, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021918A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, Biome donation, RRC, %d", &v21);
      goto LABEL_50;
    }
  }
}

void sub_100EF0768(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100EF0794(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, double a5)
{
  __int128 v9;
  void *__p[2];
  uint64_t v12;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v12 = *(_QWORD *)(a2 + 16);
  }
  sub_1009FCB04(a1, (__int128 *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021918D0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 72), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 72) = v9;
  }
  sub_10023CFD8(a1 + 96, a4, a1, a5);
  return a1;
}

void sub_100EF086C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_1009FCC0C(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF08B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021918D0;
  sub_1000CFE6C(a1);
  sub_100E3E6C8(a1 + 96);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return sub_1009FCC0C(a1);
}

void sub_100EF0904(uint64_t a1)
{
  sub_100EF08B4(a1);
  operator delete();
}

void sub_100EF0928(uint64_t a1)
{
  void *__p[2];
  uint64_t v3;

  if (*(_DWORD *)(a1 + 8) && *(int *)(a1 + 104) <= 0)
  {
    if (*(char *)(a1 + 95) < 0)
    {
      sub_100115CE4(__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 72);
      v3 = *(_QWORD *)(a1 + 88);
    }
    sub_10002B684(a1 + 96, (uint64_t *)__p);
    if (SHIBYTE(v3) < 0)
      operator delete(__p[0]);
  }
  sub_1009FD094(a1);
}

void sub_100EF09B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF0B1C(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, __int128 *a10, char a11)
{
  __int128 v13;
  void *__p[2];
  uint64_t v16;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  *(_BYTE *)(a1 + 56) = a8;
  *(_BYTE *)(a1 + 57) = a9;
  if (*((char *)a10 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 64), *(void **)a10, *((_QWORD *)a10 + 1));
  }
  else
  {
    v13 = *a10;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a10 + 2);
    *(_OWORD *)(a1 + 64) = v13;
  }
  *(_BYTE *)(a1 + 88) = a11;
  *(_OWORD *)__p = *(_OWORD *)a5;
  v16 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  sub_100EF0D48((_QWORD *)a1, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

