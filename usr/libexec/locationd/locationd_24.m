void sub_100EF0BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 24) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF0C24(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  void *__p[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;

  *(_OWORD *)v20 = *(_OWORD *)a5;
  v21 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (*(char *)(a10 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a10, *(_QWORD *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a10;
    v19 = *(_QWORD *)(a10 + 16);
  }
  sub_100EF0B1C(a1, a2, a3, a4, (uint64_t)v20, a6, a7, a8, a9, (__int128 *)__p, 11);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (v20[0])
    operator delete(v20[0]);
  return a1;
}

void sub_100EF0D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100EF0D48(_QWORD *a1, uint64_t a2)
{
  char *result;
  char *v4;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = *(char **)a2;
  v4 = *(char **)(a2 + 8);
  if (*(char **)a2 == v4)
    sub_101932070();
  if (*((_DWORD *)v4 - 1) != -1)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v4 >= v6)
    {
      v8 = (v4 - result) >> 2;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 62)
        sub_100259694();
      v10 = v6 - (_QWORD)result;
      if (v10 >> 1 > v9)
        v9 = v10 >> 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        v12 = (char *)sub_100260634(a2 + 16, v11);
        result = *(char **)a2;
        v4 = *(char **)(a2 + 8);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[4 * v8];
      v14 = &v12[4 * v11];
      *(_DWORD *)v13 = -1;
      v7 = v13 + 4;
      while (v4 != result)
      {
        v15 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v13 - 1) = v15;
        v13 -= 4;
      }
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v14;
      if (result)
      {
        operator delete(result);
        result = *(char **)a2;
      }
      else
      {
        result = v13;
      }
    }
    else
    {
      *(_DWORD *)v4 = -1;
      v7 = v4 + 4;
    }
    *(_QWORD *)(a2 + 8) = v7;
  }
  v16 = a1[2];
  a1[2] = result;
  *(_QWORD *)a2 = v16;
  v17 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v17;
  v18 = a1[4];
  a1[4] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v18;
  return result;
}

uint64_t sub_100EF0E78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_100EF0E80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_100EF0E88(uint64_t a1)
{
  return *(char *)(a1 + 88);
}

uint64_t sub_100EF0E90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

char *sub_100EF0E98@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[87] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 8), *((_QWORD *)result + 9));
  *(_OWORD *)a2 = *((_OWORD *)result + 4);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 10);
  return result;
}

uint64_t sub_100EF0EC4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

void sub_100EF0ECC(char a1@<W0>, const __CFDictionary *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char *v9;
  const __CFArray *Value;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  int v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void *__dst[2];
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *__p;
  _DWORD *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v8 = 0;
  v47 = off_102191948;
  v48 = *(_OWORD *)&off_102191958;
  v49 = off_102191968;
  v43 = off_102191908;
  v44 = *(_OWORD *)&off_102191918;
  v45 = off_102191928;
  v46 = *(_OWORD *)&off_102191938;
  do
  {
    v9 = (char *)&v43 + v8;
    *((_DWORD *)v9 + 2) = sub_100EF1210(a2, *(CFStringRef *)((char *)&v43 + v8));
    v9[12] = 1;
    v8 += 16;
  }
  while (v8 != 112);
  if (!CFDictionaryContainsKey(a2, CFSTR("SCAN_CHANNELS")))
    sub_1019321E4();
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    if (&__p != (void **)a4)
      sub_1002A3054((char *)&__p, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  }
  else
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("SCAN_CHANNELS"));
    Count = CFArrayGetCount(Value);
    sub_1002778C8(&__p, Count);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, i);
        v14 = sub_100EF1210(ValueAtIndex, CFSTR("CHANNEL"));
        v15 = v14;
        v16 = v41;
        if ((unint64_t)v41 >= v42)
        {
          v18 = __p;
          v19 = ((char *)v41 - (_BYTE *)__p) >> 2;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
            sub_100259694();
          v21 = v42 - (_QWORD)__p;
          if ((uint64_t)(v42 - (_QWORD)__p) >> 1 > v20)
            v20 = v21 >> 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)sub_100260634((uint64_t)&v42, v22);
            v18 = __p;
            v16 = v41;
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[4 * v19];
          *(_DWORD *)v24 = v15;
          v17 = v24 + 4;
          while (v16 != v18)
          {
            v25 = *--v16;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
          __p = v24;
          v41 = v17;
          v42 = (unint64_t)&v23[4 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v41 = v14;
          v17 = v16 + 1;
        }
        v41 = v17;
      }
    }
  }
  v26 = DWORD2(v43);
  v27 = DWORD2(v44);
  v28 = DWORD2(v45);
  v38 = 0;
  v39 = 0;
  v37 = 0;
  sub_10027205C(&v37, __p, (uint64_t)v41, ((char *)v41 - (_BYTE *)__p) >> 2);
  v29 = SDWORD2(v46);
  v30 = SDWORD2(v47);
  v31 = DWORD2(v48);
  v32 = DWORD2(v49);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    v36 = *(_QWORD *)(a3 + 16);
  }
  sub_100EF0B1C(a5, v26, v27, v28, (uint64_t)&v37, v29, v30, v31 != 0, v32 != 0, (__int128 *)__dst, a1);
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
}

void sub_100EF11B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF1210(const __CFDictionary *a1, CFStringRef theString)
{
  const __CFNumber *Value;
  unsigned int valuePtr;

  CFStringGetCStringPtr(theString, 0x8000100u);
  if (!CFDictionaryContainsKey(a1, theString))
    sub_10193239C();
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, theString);
  valuePtr = 0;
  if (!CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
    sub_10193252C();
  return valuePtr;
}

double sub_100EF1298(_QWORD *a1, float a2)
{
  double v3;

  if (a2 <= 0.0 || a2 > 1.0)
    sub_1019326BC(a2);
  v3 = (double)(a1[5] + 40)
     / 1000.0
     * (double)((((uint64_t)(a1[3] - a1[2]) >> 2) - 1) * (unint64_t)*(unsigned int *)a1);
  return (v3 - v3 * a2) / a2;
}

double sub_100EF1310(_QWORD *a1)
{
  return (double)(a1[5] + 40)
       / 1000.0
       * (double)((((uint64_t)(a1[3] - a1[2]) >> 2) - 1) * (unint64_t)*(unsigned int *)a1);
}

void sub_100EF134C(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

BOOL sub_100EF1418()
{
  return os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT);
}

const char *sub_100EF142C(const __CFString *a1)
{
  return CFStringGetCStringPtr(a1, 0x8000100u);
}

BOOL sub_100EF1438()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 88), OS_LOG_TYPE_INFO);
}

BOOL sub_100EF1448()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 88));
}

uint64_t sub_100EF1454(uint64_t a1, _QWORD *a2, __int128 *a3, _QWORD *a4, __int128 *a5, const std::string *a6)
{
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;

  *(_DWORD *)a1 = 0xFFFF;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 36) = _Q1;
  *(_OWORD *)(a1 + 52) = _Q1;
  *(_OWORD *)(a1 + 68) = _Q1;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0xFFFF;
  v17 = a1 + 156;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 176) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_OWORD *)(a1 + 224) = _Q1;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 244) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 252) = 0;
  *(_QWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 272) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 280) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 292) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 284) = 0;
  *(_BYTE *)(a1 + 308) = 0;
  sub_1002433B8(a1 + 312);
  *(_QWORD *)(v17 + 196) = *a2;
  v18 = *a3;
  v19 = a3[1];
  *(_OWORD *)(v17 + 236) = a3[2];
  *(_OWORD *)(v17 + 220) = v19;
  *(_OWORD *)(v17 + 204) = v18;
  v20 = a3[3];
  v21 = a3[4];
  v22 = a3[5];
  *(_QWORD *)(v17 + 300) = *((_QWORD *)a3 + 12);
  *(_OWORD *)(v17 + 268) = v21;
  *(_OWORD *)(v17 + 284) = v22;
  *(_OWORD *)(v17 + 252) = v20;
  v23 = a4[1];
  *(_QWORD *)(v17 + 308) = *a4;
  *(_QWORD *)(v17 + 316) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_QWORD *)(a1 + 480) = 0;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 488), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v26 = *a5;
    *(_QWORD *)(a1 + 504) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 488) = v26;
  }
  *(_QWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  sub_100033ACC(a1 + 536);
  sub_100033ACC(a1 + 632);
  sub_10021CCE0(a1 + 728);
  *(_BYTE *)(a1 + 1336) = 0;
  *(_BYTE *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1360) = 0;
  *(_DWORD *)(a1 + 1384) = 0;
  sub_10043E138(a1 + 728, a6);
  return a1;
}

void sub_100EF162C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 480);
  *(_QWORD *)(v1 + 480) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100261F44(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF16A4(uint64_t a1)
{
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  if (*(char *)(a1 + 583) < 0)
    operator delete(*(void **)(a1 + 560));
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  return a1;
}

double sub_100EF1708@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  void *v10;
  NSObject *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  NSObject *v21;
  std::string *v22;
  NSObject *v23;
  std::string *v24;
  uint64_t v25;
  _BYTE *v26;
  std::string *v27;
  uint64_t v28;
  std::string *v29;
  unint64_t v30;
  uint64_t *v31;
  std::string *v32;
  uint64_t v33;
  _BYTE *v34;
  std::string *v35;
  _BYTE __p[32];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  std::string v41;
  std::string buf;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  char v47;

  if (*a2)
  {
    if (sub_1000CC504(*a2))
    {
      sub_100094164(*a2, &buf);
      v10 = *(void **)(a1 + 512);
      if (v10)
      {
        *(_QWORD *)(a1 + 520) = v10;
        operator delete(v10);
        *(_QWORD *)(a1 + 512) = 0;
        *(_QWORD *)(a1 + 520) = 0;
        *(_QWORD *)(a1 + 528) = 0;
      }
      *(std::string *)(a1 + 512) = buf;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v11 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254((_QWORD *)(a1 + 352), (std::string *)__p);
        v12 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 6);
        v14 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
        v43 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiCalc, computing centroid for associated AP %{private}s from harvest database using %{public}zu %{public}s harvest samples", (uint8_t *)&buf, 0x20u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v28 = qword_1022A0048;
        sub_1000C2254((_QWORD *)(a1 + 352), &v41);
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v41;
        else
          v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 6);
        if (*((char *)a3 + 23) >= 0)
          v31 = a3;
        else
          v31 = (uint64_t *)*a3;
        *(_DWORD *)__p = 136381187;
        *(_QWORD *)&__p[4] = v29;
        *(_WORD *)&__p[12] = 2050;
        *(_QWORD *)&__p[14] = v30;
        *(_WORD *)&__p[22] = 2082;
        *(_QWORD *)&__p[24] = v31;
        v32 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v28, 0, "WifiCalc, computing centroid for associated AP %{private}s from harvest database using %{public}zu %{public}s harvest samples", __p, 32);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(std::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)", "%s\n", (const char *)v32);
        if (v32 != &buf)
          free(v32);
      }
      sub_10130DE94(&buf, a1 + 512, a4);
      sub_10022ACAC((uint64_t)&buf, __p);
      if (*(double *)__p >= -90.0
        && *(double *)__p <= 90.0
        && *(double *)&__p[8] <= 180.0
        && *(double *)&__p[8] >= -180.0)
      {
        *(double *)(a1 + 1376) = sub_1001CCCF8((uint64_t)&buf);
      }
      if (!*(_BYTE *)(a1 + 1344) || *(_QWORD *)(a1 + 1336) == -1)
      {
        *(_QWORD *)(a1 + 1336) = sub_100217B94((uint64_t)&buf);
        *(_BYTE *)(a1 + 1344) = v15;
        sub_100217B68((char *)&buf, (uint64_t)&v41);
        v16 = (void **)(a1 + 1352);
        if (*(char *)(a1 + 1375) < 0)
          operator delete(*v16);
        *(_OWORD *)v16 = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 1368) = *((_QWORD *)&v41.__r_.__value_.__l + 2);
      }
      v17 = v38;
      a5[2] = v37;
      a5[3] = v17;
      v18 = v40;
      a5[4] = v39;
      a5[5] = v18;
      result = *(double *)__p;
      v20 = *(_OWORD *)&__p[16];
      *a5 = *(_OWORD *)__p;
      a5[1] = v20;
      if (v47 < 0)
        operator delete(v46);
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v23 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254((_QWORD *)(a1 + 352), &buf);
        v24 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136380675;
        *(_QWORD *)&__p[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database", __p, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v33 = qword_1022A0048;
        sub_1000C2254((_QWORD *)(a1 + 352), (std::string *)__p);
        if (__p[23] >= 0)
          v34 = __p;
        else
          v34 = *(_BYTE **)__p;
        LODWORD(v41.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        v35 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v33, 0, "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database", &v41, 12);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(std::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)", "%s\n", (const char *)v35);
        if (v35 != &buf)
          free(v35);
      }
      return sub_100033ACC((uint64_t)a5);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v21 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), &buf);
      v22 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136380675;
      *(_QWORD *)&__p[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database handle", __p, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v25 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), (std::string *)__p);
      if (__p[23] >= 0)
        v26 = __p;
      else
        v26 = *(_BYTE **)__p;
      LODWORD(v41.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      v27 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v25, 0, "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database handle", &v41, 12);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(std::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)", "%s\n", (const char *)v27);
      if (v27 != &buf)
        free(v27);
    }
    return sub_100033ACC((uint64_t)a5);
  }
  return result;
}

void sub_100EF1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_100CDAD0C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_100EF1EA4(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  __n128 v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  char v16;
  uint64_t v17[2];
  uint64_t v18;
  uint64_t v19;

  v4 = *(unsigned __int8 *)(a1 + 511);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 496);
  if (v4)
    sub_10087E1DC((__int128 *)(a1 + 488), &v18);
  else
    sub_10087DC68(&v18);
  sub_10087EF14(v18, (_QWORD *)(a1 + 352));
  v5 = (std::__shared_weak_count *)v19;
  v17[0] = v18;
  v17[1] = v19;
  if (v19)
  {
    v6 = (unint64_t *)(v19 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_1015A2E04(__p, "GPS");
  v8 = sub_1000A3224();
  v9.n128_f64[0] = sub_100EF1708(a1, v17, (uint64_t *)__p, (uint64_t)(v8 + 8), a2);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v9);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v12 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v13 = (unint64_t *)(v19 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v9);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100EF1FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100261F44((uint64_t)&a16);
  sub_100261F44((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100EF2014(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  __n128 v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  char v16;
  uint64_t v17[2];
  uint64_t v18;
  uint64_t v19;

  v4 = *(unsigned __int8 *)(a1 + 511);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 496);
  if (v4)
    sub_10087E208((__int128 *)(a1 + 488), &v18);
  else
    sub_10087DD74(&v18);
  sub_10087EF14(v18, (_QWORD *)(a1 + 352));
  v5 = (std::__shared_weak_count *)v19;
  v17[0] = v18;
  v17[1] = v19;
  if (v19)
  {
    v6 = (unint64_t *)(v19 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_1015A2E04(__p, "Wifi");
  v8 = sub_1000A3224();
  v9.n128_f64[0] = sub_100EF1708(a1, v17, (uint64_t *)__p, (uint64_t)(v8 + 7), a2);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v9);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v12 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v13 = (unint64_t *)(v19 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v9);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100EF2148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100261F44((uint64_t)&a16);
  sub_100261F44((uint64_t)&a18);
  _Unwind_Resume(a1);
}

double sub_100EF21AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  double result;

  v4 = sub_1000A3224();
  if (sub_10132ED44((uint64_t)v4))
  {
    result = *(double *)a2;
    if (*(double *)a2 >= -90.0 && result <= 90.0)
    {
      result = *(double *)(a2 + 8);
      if (result <= 180.0 && result >= -180.0)
      {
        *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 16);
        result = *(double *)(a2 + 40);
        *(double *)(a1 + 576) = result;
      }
    }
  }
  return result;
}

void sub_100EF2230(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100EF225C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100EF22F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100EF2310()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100EF239C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100EF23CC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1021919B8;
  *(_QWORD *)(a1 + 8) = 8;
  *(_WORD *)(a1 + 16) = 512;
  *(_WORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 264) = 0xC00000046;
  *(_DWORD *)(a1 + 272) = 56;
  *(_QWORD *)(a1 + 276) = 0x3851B7173727C5ACLL;
  sub_100840CD4(a1 + 288);
}

void sub_100EF2488(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011A5A8(v2);
  sub_100840D24(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EF24B0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result[54] = a2;
  result[55] = a3;
  result[56] = a4;
  return result;
}

uint64_t sub_100EF24BC(uint64_t a1)
{
  return sub_100129380(a1 + 288);
}

void sub_100EF24C4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint8_t buf[16];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a1 + 56) = a2[2];
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  *(_OWORD *)(a1 + 120) = a2[6];
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[9];
  *(_OWORD *)(a1 + 184) = a2[10];
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  v11 = a2[11];
  v12 = a2[12];
  v13 = a2[13];
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  v14 = *((_QWORD *)a2 + 14);
  if (v14 == 14)
    v15 = *((_QWORD *)a2 + 7);
  else
    v15 = sub_100EF2774(v14);
  sub_100EF2798(v15, (uint64_t)buf);
  *(_OWORD *)(a1 + 260) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 276) = v31;
  sub_100EF282C(a1, v15);
  sub_10023195C(a1, 0, (uint64_t)&v24);
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102191A78);
  v16 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_INFO))
  {
    v17 = *(_QWORD *)(a1 + 136);
    v18 = *(_QWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v17;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v18;
    *(_WORD *)&buf[14] = 2048;
    v31 = v19;
    v32 = 2048;
    v33 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[CLNoMovement] controller workoutEvent,workoutType,%d,eventType,%d,genericWorkoutLabel,%lu,hkWorkoutType,%lu", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 80);
    v25 = __PAIR64__(*(_QWORD *)(a1 + 136), 67109888);
    LOWORD(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 2) = v20;
    HIWORD(v26) = 2048;
    v27 = v21;
    v28 = 2048;
    v29 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 1, "[CLNoMovement] controller workoutEvent,workoutType,%d,eventType,%d,genericWorkoutLabel,%lu,hkWorkoutType,%lu", &v25, 34, v25, v26);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLNoMovementController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
}

uint64_t sub_100EF2774(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x40)
    return 3000;
  else
    return qword_101C2E140[a1 - 1];
}

uint64_t sub_100EF2798@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 4) = 0xC00000046;
  *(_DWORD *)(a2 + 12) = 56;
  *(_QWORD *)(a2 + 16) = 0x3851B7173727C5ACLL;
  switch(result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 31:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 58:
    case 59:
    case 60:
    case 63:
    case 64:
    case 65:
    case 68:
    case 69:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 79:
    case 80:
    case 82:
    case 83:
    case 84:
      *(_WORD *)a2 = 257;
      break;
    case 19:
    case 26:
      *(_WORD *)a2 = 256;
      *(_DWORD *)(a2 + 4) = 117;
      *(_DWORD *)(a2 + 12) = 117;
      goto LABEL_5;
    case 21:
    case 40:
    case 61:
    case 67:
    case 70:
    case 71:
      *(_WORD *)a2 = 257;
      *(_QWORD *)(a2 + 8) = 0x460000000CLL;
LABEL_5:
      *(_DWORD *)(a2 + 20) = 944879383;
      break;
    default:
      *(_WORD *)a2 = 0;
      break;
  }
  return result;
}

void sub_100EF282C(uint64_t a1, unint64_t __val)
{
  std::string *v3;
  std::string *v4;
  char v5;
  int v6;
  char v7;
  char v8;
  int v9;
  char v10;
  float v11;
  int v12;
  float v13;
  float v14;
  int v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  float v25;
  NSObject *v26;
  std::string *v27;
  std::string *v28;
  const char *v29;
  uint8_t *v30;
  std::string v31;
  float v32;
  int v33;
  std::string *v34;
  uint8_t buf[4];
  std::string *v36;

  std::to_string(&v31, __val);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v31;
  else
    v3 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((sub_100525C10(a1 + 456, (uint64_t)v3) & 1) != 0)
  {
    sub_100119F3C(buf);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v31;
    else
      v4 = (std::string *)v31.__r_.__value_.__r.__words[0];
    sub_100006BB4(a1 + 456, (const char *)v4, buf);
    v5 = *(_BYTE *)(a1 + 260);
    LOBYTE(v33) = 0;
    v6 = sub_1001E4874((uint64_t)buf, "shouldServeDetectionToClients", (BOOL *)&v33);
    v7 = v33;
    if (!v6)
      v7 = v5;
    *(_BYTE *)(a1 + 260) = v7;
    v8 = *(_BYTE *)(a1 + 261);
    LOBYTE(v33) = 0;
    v9 = sub_1001E4874((uint64_t)buf, "shouldEnableForWorkout", (BOOL *)&v33);
    v10 = v33;
    if (!v9)
      v10 = v8;
    *(_BYTE *)(a1 + 261) = v10;
    if (sub_100525C10((uint64_t)buf, (uint64_t)"params"))
    {
      sub_100119F3C(&v33);
      sub_100006BB4((uint64_t)buf, "params", &v33);
      v11 = *(float *)(a1 + 264);
      v32 = 0.0;
      v12 = sub_1001E4B84((uint64_t)&v33, "epochsPerWindow", &v32);
      v13 = v32;
      if (!v12)
        v13 = v11;
      *(float *)(a1 + 264) = v13;
      v14 = *(float *)(a1 + 268);
      v32 = 0.0;
      v15 = sub_1001E4B84((uint64_t)&v33, "epochStepSize", &v32);
      v16 = v32;
      if (!v15)
        v16 = v14;
      *(float *)(a1 + 268) = v16;
      v17 = *(float *)(a1 + 272);
      v32 = 0.0;
      v18 = sub_1001E4B84((uint64_t)&v33, "detectionEpochThreshold", &v32);
      v19 = v32;
      if (!v18)
        v19 = v17;
      *(float *)(a1 + 272) = v19;
      v20 = *(float *)(a1 + 276);
      v32 = 0.0;
      v21 = sub_100526804((uint64_t)&v33, "userAccelVarSumThreshold", &v32);
      v22 = v32;
      if (!v21)
        v22 = v20;
      *(float *)(a1 + 276) = v22;
      v23 = *(float *)(a1 + 280);
      v32 = 0.0;
      v24 = sub_100526804((uint64_t)&v33, "rotationRateVarSumThreshold", &v32);
      v25 = v32;
      if (!v24)
        v25 = v23;
      *(float *)(a1 + 280) = v25;
      sub_10011A5A8(&v33);
    }
    sub_10011A5A8(buf);
  }
  else
  {
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v26 = qword_10229FFE8;
    if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEBUG))
    {
      v27 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v36 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: mobile-asset setting not available for hkWorkoutType,%s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFE0 != -1)
        dispatch_once(&qword_10229FFE0, &stru_102191A78);
      v28 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = (std::string *)v31.__r_.__value_.__r.__words[0];
      v33 = 136315138;
      v34 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 2, "[CLNoMovement] controller: mobile-asset setting not available for hkWorkoutType,%s", (const char *)&v33);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLNoMovementController::applyMobileAssetSettings(unsigned long)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_100EF2C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100EF2C50(uint64_t a1, int *a2)
{
  BOOL v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  char v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  v3 = *a2 == 1 && *((_BYTE *)a2 + 26) != 0;
  *(_BYTE *)(a1 + 256) = v3;
  sub_10023195C(a1, 0, (uint64_t)&v11);
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102191A78);
  v4 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_INFO))
  {
    v5 = *a2;
    v6 = *((unsigned __int8 *)a2 + 26);
    *(_DWORD *)buf = 67109376;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLNoMovement] controller wristState,onWrist,%d,isWristDetectionEnabled,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v7 = *a2;
    v8 = *((unsigned __int8 *)a2 + 26);
    v12[0] = 67109376;
    v12[1] = v7;
    v13 = 1024;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 1, "[CLNoMovement] controller wristState,onWrist,%d,isWristDetectionEnabled,%d", v12, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLNoMovementController::feedWristState(const CLWatchOrientationSettingsNotifier_Type::WristState)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

_BYTE *sub_100EF2E50(_BYTE *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;

  if (result[424])
  {
    v2 = (uint64_t)result;
    v3 = (uint64_t)(result + 288);
    result = (_BYTE *)sub_100840F5C((uint64_t)(result + 288), a2);
    if ((_DWORD)result)
    {
      if (objc_msgSend((id)sub_100129380(v3), "state") == (id)2)
      {
        v4 = &v8;
        v5 = v2;
        v6 = 2;
      }
      else
      {
        result = objc_msgSend((id)sub_100129380(v3), "state");
        if (result != (_BYTE *)1)
          return result;
        v4 = &v7;
        v5 = v2;
        v6 = 1;
      }
      return (_BYTE *)sub_10023195C(v5, v6, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_100EF2ED4(uint64_t a1, uint64_t a2)
{
  return sub_10052502C(a1 + 456, a2);
}

uint64_t sub_100EF2EDC(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int16 v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  _BOOL4 v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    v3 = v2 == 17;
  else
    v3 = 1;
  v4 = v3;
  v6 = *(_BYTE *)(a1 + 261) && (v2 != 17 ? (v5 = v2 == 0) : (v5 = 1), v5) && *(_BYTE *)(a1 + 256) != 0;
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102191A78);
  v7 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_INFO))
  {
    v8 = *(unsigned __int8 *)(a1 + 260);
    v9 = *(unsigned __int8 *)(a1 + 261);
    v10 = *(unsigned __int8 *)(a1 + 256);
    v11 = *(unsigned __int8 *)(a1 + 424);
    *(_DWORD *)buf = 67110400;
    v24 = v6;
    v25 = 1024;
    v26 = v8;
    v27 = 1024;
    v28 = v9;
    v29 = 1024;
    v30 = v4;
    v31 = 1024;
    v32 = v10;
    v33 = 1024;
    v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLNoMovement] controller: shouldEnable,%d,shouldServeDetectionToClients,%d,shouldEnableForWorkout,%d,isManualStartOrResumeEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v13 = *(unsigned __int8 *)(a1 + 260);
    v14 = *(unsigned __int8 *)(a1 + 261);
    v15 = *(unsigned __int8 *)(a1 + 424);
    LOWORD(v19) = 1024;
    HIWORD(v19) = v13;
    LOWORD(v20) = HIWORD(v4);
    HIWORD(v20) = 1024;
    v21 = 1024;
    v22 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 1, "[CLNoMovement] controller: shouldEnable,%d,shouldServeDetectionToClients,%d,shouldEnableForWorkout,%d,isManualStartOrResumeEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d", &v18, 38, 67110400, v19, v14, v20);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNoMovementController::shouldEnable(const EToggle *) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return *(_DWORD *)(a1 + 476) || v6;
}

BOOL sub_100EF3148(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v4;
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  int v9;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  int v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _BOOL4 v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = v2 == 1 || v2 == 16;
  if (*(_BYTE *)(a1 + 424))
    v6 = v2 == 1 || v2 == 16 || *(_BYTE *)(a1 + 256) == 0;
  else
    v6 = 0;
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102191A78);
  v7 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_INFO))
  {
    v8 = *(unsigned __int8 *)(a1 + 256);
    v9 = *(unsigned __int8 *)(a1 + 424);
    *(_DWORD *)buf = 67109888;
    v21 = v6;
    v22 = 1024;
    v23 = v4;
    v24 = 1024;
    v25 = v8;
    v26 = 1024;
    v27 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLNoMovement] controller: shouldDisable,%d,isManualStopOrPauseEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v11 = *(unsigned __int8 *)(a1 + 256);
    v12 = *(unsigned __int8 *)(a1 + 424);
    LOWORD(v16) = 1024;
    HIWORD(v16) = v4;
    v17 = v11;
    v18 = 1024;
    v19 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 1, "[CLNoMovement] controller: shouldDisable,%d,isManualStopOrPauseEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d", &v15, 26, 67109888, v16);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNoMovementController::shouldDisable(const EToggle *) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return !*(_DWORD *)(a1 + 476) && v6;
}

void sub_100EF3384(uint64_t a1)
{
  void (*v2)(void);
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  __int128 v7;
  int v8;
  unsigned __int8 v9[4];
  int v10;
  unsigned __int8 v11[4];
  int v12;
  _BYTE v13[20];
  uint8_t buf[1640];

  *(_BYTE *)(a1 + 424) = 1;
  if (*(_QWORD *)(a1 + 432))
  {
    v2 = *(void (**)(void))(a1 + 448);
    if (v2)
      v2();
  }
  *(_DWORD *)&v13[16] = *(_DWORD *)(a1 + 280);
  *(_OWORD *)v13 = *(_OWORD *)(a1 + 264);
  sub_1004AD1D8(v11, "NoMovementEpochsPerWindow", v13, 0);
  sub_1004AD1D8(v9, "NoMovementDetectionEpochThreshold", &v13[8], 0);
  *(_DWORD *)v13 = v12;
  *(_DWORD *)&v13[4] = 12;
  *(_DWORD *)&v13[8] = v10;
  *(_QWORD *)&v13[12] = 0x3851B7173727C5ACLL;
  v8 = 944879383;
  v7 = *(_OWORD *)v13;
  sub_100840D28(a1 + 288, &v7);
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102191A78);
  v3 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: fsm action enable", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 2, "[CLNoMovement] controller: fsm action enable", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLNoMovementController::enable(const EToggle *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_100EF35B0(uint64_t a1)
{
  void (*v2)(void);
  void (*v3)(void);
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *(_BYTE *)(a1 + 424) = 0;
  if (*(_QWORD *)(a1 + 432))
  {
    v2 = *(void (**)(void))(a1 + 448);
    if (v2)
      v2();
  }
  sub_100840C64(a1 + 288);
  if (*(_QWORD *)(a1 + 432))
  {
    v3 = *(void (**)(void))(a1 + 440);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 260))
        v3();
    }
  }
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102191A78);
  v4 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: fsm action disable", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 2, "[CLNoMovement] controller: fsm action disable", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNoMovementController::disable(const EToggle *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_100EF3778(uint64_t a1)
{
  void (*v1)(void);
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 432))
  {
    v1 = *(void (**)(void))(a1 + 440);
    if (v1)
    {
      if (*(_BYTE *)(a1 + 260))
        v1();
    }
  }
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102191A78);
  v2 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: fsm action signal movement transition", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 2, "[CLNoMovement] controller: fsm action signal movement transition", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLNoMovementController::signalTransition(const EDetectMove *)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_100EF391C(uint64_t a1)
{
  void (*v1)(void);
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 432))
  {
    v1 = *(void (**)(void))(a1 + 440);
    if (v1)
    {
      if (*(_BYTE *)(a1 + 260))
        v1();
    }
  }
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102191A78);
  v2 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: fsm action signal no-movement transition", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102191A78);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 2, "[CLNoMovement] controller: fsm action signal no-movement transition", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLNoMovementController::signalTransition(const EDetectNoMove *)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_100EF3AC0(id a1)
{
  qword_10229FFE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

_QWORD *sub_100EF3AEC(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char **v19;
  char *v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v32;
  char **v33;
  char *v34;
  __n128 v35;
  char *v36;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 2) + ((a4 - a2) << 7) - ((a3 - *(_QWORD *)a2) >> 2);
  v7 = a1[1];
  v8 = (char *)(v7 + 8 * (a1[4] >> 10));
  if (a1[2] == v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 4 * (a1[4] & 0x3FFLL);
  v33 = (char **)(v7 + 8 * (a1[4] >> 10));
  v34 = (char *)v9;
  if (v9 == a3)
    v10 = 0;
  else
    v10 = ((a3 - *(_QWORD *)a2) >> 2) + ((a2 - v8) << 7) - ((v9 - *(_QWORD *)v8) >> 2);
  v11 = (char **)sub_100B4C8EC((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v19 = v11;
      v20 = v12;
      v21 = v33;
      v22 = v34;
      v23 = sub_100B4C8EC((uint64_t)&v32, v6);
      sub_100EF3DB8(v21, v22, v19, v20, v23, v24, &v35);
      v25 = v34;
      if (v34 != v36)
      {
        v26 = v33;
        do
        {
          v25 += 4;
          v34 = v25;
          if (v25 - *v26 == 4096)
          {
            v27 = v26[1];
            ++v26;
            v25 = v27;
            v33 = v26;
            v34 = v27;
          }
        }
        while (v25 != v36);
      }
      v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((sub_1004128C0((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v13 = (char **)sub_100B4C8EC((uint64_t)&v32, v6);
      v15 = a1[4] + a1[5];
      v16 = a1[1];
      v17 = (char **)(v16 + 8 * (v15 >> 10));
      if (a1[2] == v16)
        v18 = 0;
      else
        v18 = &(*v17)[4 * (v15 & 0x3FF)];
      v35 = v32;
      sub_100EF3F3C(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100EF3D4C(a1, 1) & 1) != 0)
        ;
    }
  }
  v29 = a1[1];
  if (a1[2] == v29)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 8 * (a1[4] >> 10)) + 4 * (a1[4] & 0x3FFLL);
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 10);
  v35.n128_u64[1] = v30;
  return sub_100B4C8EC((uint64_t)&v35, v10);
}

void sub_100EF3D20(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100EF3D4C(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100EF3DB8@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100EF3E84(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_100EF3E84(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100EF3E84@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 2 >= v12 >> 2)
        v13 = v12 >> 2;
      else
        v13 = (v11 - a1) >> 2;
      v11 -= 4 * v13;
      a4 -= 4 * v13;
      if (v13)
        result = memmove(a4, v11, 4 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100EF3F3C(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_100EF4008(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_100EF4008(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_100EF4008(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100EF4008@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 2 >= v11 >> 2 ? v11 >> 2 : (a3 - v9) >> 2;
      if (v12)
        __src = (char *)memmove(__dst, v9, 4 * v12);
      v9 += 4 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 4 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t sub_100EF40C4()
{
  unsigned __int8 v0;
  int v2;
  uint64_t v3[2];
  int v4;

  v0 = atomic_load((unsigned __int8 *)&qword_102309050);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309050))
  {
    sub_1001E4804(v3);
    v4 = 0;
    if (sub_1001E4B84(v3[0], "maxNumApsToLog", &v4))
      v2 = v4;
    else
      v2 = 50;
    sub_100261F44((uint64_t)v3);
    dword_102309048 = v2;
    __cxa_guard_release(&qword_102309050);
  }
  return dword_102309048;
}

void sub_100EF415C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  __cxa_guard_abort(&qword_102309050);
  _Unwind_Resume(a1);
}

void sub_100EF4184()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;

  if (byte_1023118C8)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102191AD8);
    v0 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CLMM, memory cache and tile count limit already set", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102191AD8);
      LOWORD(v6[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM, memory cache and tile count limit already set", v6, 2);
      v2 = (uint8_t *)v1;
      sub_100512490("Generic", 1, 0, 2, "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()", "%s\n", v1);
      if (v2 != buf)
        free(v2);
    }
  }
  else
  {
    +[GEOTileLoader setMemoryCacheCountLimit:](GEOTileLoader, "setMemoryCacheCountLimit:", 9);
    +[GEOTileLoader setMemoryCacheTotalCostLimit:](GEOTileLoader, "setMemoryCacheTotalCostLimit:", 153600);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102191AD8);
    v3 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      v10 = 153600;
      v11 = 1024;
      v12 = 9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,GEOTileLoader memory cache,%d,tile count limit,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102191AD8);
      v6[0] = 67109376;
      v6[1] = 153600;
      v7 = 1024;
      v8 = 9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,GEOTileLoader memory cache,%d,tile count limit,%d", v6, 14);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    byte_1023118C8 = 1;
  }
}

void sub_100EF44BC(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_100EF44E8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD v54[5];
  __int128 v55;
  __int128 v56[3];
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint8_t buf[8];
  __int16 v64;
  const char *v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;

  v15 = (std::__shared_weak_count *)a4[1];
  v61 = *a4;
  v62 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = (std::__shared_weak_count *)a5[1];
  v59 = *a5;
  v60 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)a6[1];
  v57 = *a6;
  v58 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v56[0] = xmmword_102309058;
  v56[1] = unk_102309068;
  v56[2] = xmmword_102309078;
  sub_100D04860(a1, a2, 4, &v61, &v59, &v57, a11, a10, v56);
  v24 = v58;
  if (v58)
  {
    v25 = (unint64_t *)&v58->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v60;
  if (v60)
  {
    v28 = (unint64_t *)&v60->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v62;
  if (v62)
  {
    v31 = (unint64_t *)&v62->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_QWORD *)a1 = off_102191B08;
  *(_QWORD *)(a1 + 352) = *a3;
  v33 = a3[1];
  *(_QWORD *)(a1 + 360) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_QWORD *)(a1 + 368) = *a7;
  v36 = a7[1];
  *(_QWORD *)(a1 + 376) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_QWORD *)(a1 + 384) = *a8;
  v39 = a8[1];
  *(_QWORD *)(a1 + 392) = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  *(_QWORD *)(a1 + 400) = *a9;
  v42 = a9[1];
  *(_QWORD *)(a1 + 408) = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  *(_BYTE *)(a1 + 416) = 1;
  *(_DWORD *)(a1 + 420) = 30;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 488) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 496) = 0;
  sub_100EF7728(a1 + 504, 0);
  *(_BYTE *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 648) = 1065353216;
  sub_1002433B8(a1 + 656);
  *(_QWORD *)(a1 + 696) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_DWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 796) = 0u;
  *(_DWORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_DWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_QWORD *)(a1 + 1080) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_DWORD *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  sub_100EF4ABC(a1);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  v45 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v46 = *(unsigned __int8 *)(a1 + 416);
    v47 = *(_DWORD *)(a1 + 424);
    v48 = *(_DWORD *)(a1 + 428);
    *(_QWORD *)buf = 68290051;
    v64 = 2082;
    v65 = "";
    v66 = 2050;
    v67 = 4;
    v68 = 1025;
    v69 = v46;
    v70 = 1025;
    v71 = v47;
    v72 = 1025;
    v73 = v48;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtime\":%{private}d, \"byteBudget\":%{private}d, \"interval\":%{private}d}", buf, 0x2Eu);
  }
  v49 = *(_QWORD *)(a1 + 352);
  sub_1015A2E04(buf, "TrafficServiceTimer");
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_100EF4E14;
  v54[3] = &unk_10212ECA0;
  v54[4] = a1;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint8_t *, _QWORD *, double, double))(*(_QWORD *)v49 + 64))(&v55, v49, buf, v54, 1.79769313e308, 1.79769313e308);
  sub_1002B7674(a1 + 568, &v55);
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (SBYTE3(v67) < 0)
    operator delete(*(void **)buf);
  return a1;
}

void sub_100EF49E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(char *)(v7 - 105) < 0)
    operator delete(*(void **)(v7 - 128));
  sub_100EF4E44(v6);
  sub_1002A1C94(v5);
  if (*(char *)(v1 + 607) < 0)
    operator delete(*(void **)(v1 + 584));
  sub_100261F44(v4);
  *(_QWORD *)(v7 - 128) = v3;
  sub_100EF7778((void ***)(v7 - 128));
  if (*(char *)(v1 + 479) < 0)
    operator delete(*(void **)(v1 + 456));
  sub_100261F44(v1 + 400);
  sub_100261F44(v1 + 384);
  sub_100261F44(v1 + 368);
  sub_100261F44(v2);
  sub_100429668(v1);
  _Unwind_Resume(a1);
}

void sub_100EF4A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  sub_100261F44((uint64_t)&a23);
  sub_100261F44((uint64_t)&a25);
  sub_100261F44((uint64_t)&a27);
  JUMPOUT(0x100EF4A94);
}

void sub_100EF4ABC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  int *v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352), a1 + 420))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_DWORD *)(a1 + 420);
      v11 = 68289539;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2050;
      v16 = 4;
      v17 = 1025;
      v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest duration overwritten by local default\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"minRealtimeHarvestDuration\":%{private}d}", (uint8_t *)&v11, 0x22u);
    }
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 32))(*(_QWORD *)(a1 + 352), a1 + 428))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_DWORD *)(a1 + 428);
      v11 = 68289539;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2050;
      v16 = 4;
      v17 = 1025;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"budget interval overwritten by local default\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtimeBudgetInterval\":%{private}d}", (uint8_t *)&v11, 0x22u);
    }
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 40))(*(_QWORD *)(a1 + 352), a1 + 416))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a1 + 416);
      v11 = 68289539;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2050;
      v16 = 4;
      v17 = 1025;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"realtime enabled overwritten by local default\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtime\":%{private}d}", (uint8_t *)&v11, 0x22u);
    }
  }
  v8 = (int *)(a1 + 432);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 48))(*(_QWORD *)(a1 + 352), a1 + 432))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v10 = *v8;
      v11 = 68289539;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2050;
      v16 = 4;
      v17 = 1025;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"real-time submission timeout overwritten by local default\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtimeSubmissionTimeout\":%{private}d}", (uint8_t *)&v11, 0x22u);
    }
  }
}

uint64_t sub_100EF4E14(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_100EF63E0(v1);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 384) + 96))(*(_QWORD *)(v1 + 384));
}

uint64_t sub_100EF4E44(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 488);
  if (v2)
  {
    *(_QWORD *)(a1 + 496) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 368);
  if (v3)
  {
    *(_QWORD *)(a1 + 376) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 288);
  if (v4)
  {
    *(_QWORD *)(a1 + 296) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 208);
  if (v5)
  {
    *(_QWORD *)(a1 + 216) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

uint64_t sub_100EF4EB4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, uint64_t a10, uint64_t a11)
{
  return sub_100EF44E8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_100EF4EC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 568);
  if (v2)
  {
    v3 = a1 + 568;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    v7 = 0uLL;
    sub_1002B7674(v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

uint64_t sub_100EF4F4C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;

  sub_100119F3C(v14);
  v4 = unk_102309068;
  *(_OWORD *)(a1 + 280) = xmmword_102309058;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = unk_102309071;
  if (sub_100006BB4(a2, "Realtime", v14))
    sub_1011E7A6C(a1 + 280, (uint64_t)v14);
  if (*(_BYTE *)(a1 + 416) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) == 0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2050;
      v20 = 4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Device platform not eligible for real-time harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    *(_BYTE *)(a1 + 416) = 0;
  }
  v6 = sub_100EF5294(a1);
  if (v6 >= 0x1F4)
    v7 = 500;
  else
    v7 = v6;
  if (*(_QWORD *)(a1 + 544) != v7)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2050;
      v20 = 4;
      v21 = 2049;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting real-time capacity\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtimeCapacity\":%{private}lu}", buf, 0x26u);
    }
    *(_QWORD *)(a1 + 536) = 0;
    *(_QWORD *)(a1 + 528) = 0;
    *(_QWORD *)(a1 + 544) = v7;
    sub_100EF7860((uint64_t *)(a1 + 504), v7);
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  v9 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_1011E7898((double *)(a1 + 280), __p);
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2050;
    v20 = 4;
    v21 = 2081;
    v22 = (unint64_t)v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  sub_100D05194(a1);
  return sub_10011A5A8(v14);
}

void sub_100EF5270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

unint64_t sub_100EF5294(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  __int128 v8;
  uint64_t v9;

  v1 = a1 + 280;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(v2 + 16);
  v8 = *(_OWORD *)v2;
  v9 = v3;
  sub_1011E7824(v1, (uint64_t)&v8);
  v5 = v4;
  sub_100204BE4(v1);
  return (unint64_t)(v5 / v6);
}

BOOL sub_100EF5300(uint64_t a1)
{
  unint64_t v2;
  double v3;
  double v4;
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 416))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 16))(*(_QWORD *)(a1 + 400)) & 1) != 0)
    {
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
      v3 = (double)*(int *)(a1 + 420);
      sub_100204BE4(a1 + 280);
      if (v2 >= (unint64_t)(v3 / v4))
      {
        return 1;
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102191BE8);
        v5 = qword_1022A0208;
        result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          v8 = 68289282;
          v9 = 0;
          v10 = 2082;
          v11 = "";
          v12 = 2050;
          v13 = 4;
          v7 = "{\"msg%{public}.0s\":\"not ready to upload: not enough locations\", \"subHarvester\":%{public, location:C"
               "LSubHarvesterIdentifier}lld}";
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v8, 0x1Cu);
          return 0;
        }
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102191BE8);
      v5 = qword_1022A0208;
      result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        v8 = 68289282;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        v12 = 2050;
        v13 = 4;
        v7 = "{\"msg%{public}.0s\":\"not ready to upload: motion requirements not met\", \"subHarvester\":%{public, locat"
             "ion:CLSubHarvesterIdentifier}lld}";
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v5 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2050;
      v13 = 4;
      v7 = "{\"msg%{public}.0s\":\"not ready to upload: turned off\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
      goto LABEL_16;
    }
  }
  return result;
}

double sub_100EF555C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  __int128 v9;
  uint64_t v10;

  v2 = a1 + 280;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  v4 = *(_QWORD *)(v3 + 16);
  v9 = *(_OWORD *)v3;
  v10 = v4;
  sub_1011E7824(v2, (uint64_t)&v9);
  v6 = v5 + v5;
  if (v6 >= 900.0)
    v7 = v6;
  else
    v7 = 900.0;
  if (v7 >= (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)))
    sub_1019329C0();
  return v7;
}

uint64_t sub_100EF55EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 24))(v1, v2, 2);
  return 1;
}

uint64_t sub_100EF5628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = sub_100201404(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 32))(v1, v2, 2);
}

void sub_100EF565C(_DWORD *a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289282;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    v6 = 2050;
    v7 = 4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"starting new batch\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v3, 0x1Cu);
  }
  a1[125] += (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 160))(a1);
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1);
  sub_100D05194((uint64_t)a1);
}

uint64_t sub_100EF5778(uint64_t a1)
{
  return *(int *)(a1 + 536);
}

void sub_100EF5780(uint64_t a1)
{
  uint64_t v1;
  double v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 536);
  if (v1)
  {
    v3 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    v4 = v3 - (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    v5 = *(_QWORD *)(a1 + 528);
    v6 = *(_QWORD *)(a1 + 544);
    v7 = *(_QWORD *)(a1 + 504);
    if (*(double *)(v7 + 696 * ((v1 + v5 - 1) % v6) + 76) >= v4)
    {
      v8 = *(_QWORD *)(a1 + 536);
      if (v8)
      {
        v9 = v8 - 1;
        do
        {
          if (*(double *)(v7 + 696 * v5 + 76) >= v4)
            break;
          v5 = (v5 + 1) % v6;
          *(_QWORD *)(a1 + 528) = v5;
          *(_QWORD *)(a1 + 536) = v9--;
        }
        while (v9 != -1);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 528) = 0;
      *(_QWORD *)(a1 + 536) = 0;
    }
  }
}

void sub_100EF5850(uint64_t a1)
{
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  sub_1002A21DC(a1 + 616);
}

uint64_t sub_100EF5860(uint64_t a1)
{
  uint64_t result;

  sub_100197040();
  result = sub_1000C4240();
  if ((_DWORD)result)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0)
      return 1;
    else
      return ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) >> 3) & 1;
  }
  return result;
}

void sub_100EF58B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  NSObject *v19;
  void *v20;
  int v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  char v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  NSMutableArray *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  void *i;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  char *v42;
  void *v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  NSObject *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *v71[2];
  char *v72;
  void *v73[2];
  char v74;
  __int128 *v75;
  _BYTE __p[80];
  _BYTE v77[76];
  int v78;
  uint64_t v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86[2];
  char *v87;
  _BYTE v88[128];

  ++*(_DWORD *)(a1 + 204);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 56))(*(_QWORD *)(a1 + 400));
  sub_1015A2E04(v73, "com.apple.harvester.realtime");
  sub_100787308(a1 + 656, (char *)v73, (CLMotionActivity *)(v6 + 376));
  v7 = *(_QWORD *)(a1 + 568);
  v8 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  (*(void (**)(uint64_t, double))(*(_QWORD *)v7 + 24))(v7, v8 + 30.0 + 1.0);
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 400) + 32))(*(_QWORD *)(a1 + 400), a4) & 1) != 0)
  {
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 400) + 40))(__p);
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 120))(*(_QWORD *)(a1 + 400));
    sub_10078588C(a1 + 656, v73, (std::string *)__p, v9, a4, (CLMotionActivity *)(v6 + 376));
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 400) + 40))(__p);
    v10 = (void **)(a1 + 584);
    if (__p[23] >= 0)
      v11 = __p[23];
    else
      v11 = *(_QWORD *)&__p[8];
    v12 = *(unsigned __int8 *)(a1 + 607);
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a1 + 592);
    if (v11 == v12)
    {
      if (v13 >= 0)
        v14 = (unsigned __int8 *)(a1 + 584);
      else
        v14 = (unsigned __int8 *)*v10;
      if ((__p[23] & 0x80) != 0)
      {
        v20 = *(void **)__p;
        v21 = memcmp(*(const void **)__p, v14, *(size_t *)&__p[8]);
        operator delete(v20);
        if (!v21)
        {
LABEL_33:
          v22 = 0;
          goto LABEL_34;
        }
      }
      else
      {
        if (!__p[23])
          goto LABEL_33;
        v15 = 0;
        do
        {
          v16 = __p[v15];
          v17 = v14[v15];
        }
        while (v16 == v17 && __p[23] - 1 != v15++);
        if (v16 == v17)
          goto LABEL_33;
      }
    }
    else if ((__p[23] & 0x80) != 0)
    {
      operator delete(*(void **)__p);
    }
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 400) + 40))(__p);
    if (*(char *)(a1 + 607) < 0)
      operator delete(*v10);
    *(_OWORD *)v10 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 600) = *(_QWORD *)&__p[16];
    v22 = 1;
LABEL_34:
    v23 = *(double *)(a4 + 76);
    v24 = *(double *)(a1 + 560);
    sub_100204BE4(a1 + 280);
    v25 = v23 - v24;
    v27 = v26 + -0.1;
    if (v25 < v26 + -0.1)
    {
      if (!v22)
      {
LABEL_46:
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102191BE8);
        v32 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_QWORD *)__p = 68289283;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1025;
          *(_DWORD *)&__p[20] = v25 >= v27;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"should we harvest\", \"timeToharvest\":%{private}hhd}", __p, 0x18u);
        }
        if (v25 >= v27)
        {
          if (*(char *)(v6 + 95) >= 0)
            v33 = v6 + 72;
          else
            v33 = *(_QWORD *)(v6 + 72);
          v34 = +[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", sub_1012598F8(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33)));
          v66 = a1;
          v71[0] = 0;
          v71[1] = 0;
          v72 = 0;
          v67 = 0u;
          v68 = 0u;
          v69 = 0u;
          v70 = 0u;
          v35 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v34, "countByEnumeratingWithState:objects:count:", &v67, v88, 16);
          if (v35)
          {
            v36 = *(_QWORD *)v68;
            v37 = (_QWORD *)(v66 + 616);
            do
            {
              for (i = 0; i != v35; i = (char *)i + 1)
              {
                if (*(_QWORD *)v68 != v36)
                  objc_enumerationMutation(v34);
                sub_1015A2E04(__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)i), "UTF8String"));
                if (!sub_1001986C8(v37, __p))
                {
                  v39 = *(_QWORD *)(v66 + 640);
                  v75 = (__int128 *)__p;
                  *((_DWORD *)sub_100EF7E20((uint64_t)v37, __p, (uint64_t)&unk_101B9EB60, &v75) + 10) = v39;
                }
                v75 = (__int128 *)__p;
                v40 = sub_100EF7E20((uint64_t)v37, __p, (uint64_t)&unk_101B9EB60, &v75);
                v41 = v40;
                v42 = (char *)v71[1];
                if (v71[1] >= v72)
                {
                  v44 = (char *)v71[0];
                  v45 = ((char *)v71[1] - (char *)v71[0]) >> 2;
                  v46 = v45 + 1;
                  if ((unint64_t)(v45 + 1) >> 62)
                    sub_100259694();
                  v47 = v72 - (char *)v71[0];
                  if ((v72 - (char *)v71[0]) >> 1 > v46)
                    v46 = v47 >> 1;
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                    v48 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v48 = v46;
                  if (v48)
                  {
                    v49 = (char *)sub_100260634((uint64_t)&v72, v48);
                    v44 = (char *)v71[0];
                    v42 = (char *)v71[1];
                  }
                  else
                  {
                    v49 = 0;
                  }
                  v50 = &v49[4 * v45];
                  *(_DWORD *)v50 = *((_DWORD *)v41 + 10);
                  v43 = v50 + 4;
                  while (v42 != v44)
                  {
                    v51 = *((_DWORD *)v42 - 1);
                    v42 -= 4;
                    *((_DWORD *)v50 - 1) = v51;
                    v50 -= 4;
                  }
                  v71[0] = v50;
                  v71[1] = v43;
                  v72 = &v49[4 * v48];
                  if (v44)
                    operator delete(v44);
                }
                else
                {
                  *(_DWORD *)v71[1] = *((_DWORD *)v40 + 10);
                  v43 = v42 + 4;
                }
                v71[1] = v43;
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              v35 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v34, "countByEnumeratingWithState:objects:count:", &v67, v88, 16);
            }
            while (v35);
          }
          v52 = *(_DWORD *)(a4 + 1176);
          v53 = *(_OWORD *)(a4 + 112);
          *(_OWORD *)&v77[16] = *(_OWORD *)(a4 + 96);
          *(_OWORD *)&v77[32] = v53;
          *(_OWORD *)&v77[48] = *(_OWORD *)(a4 + 128);
          *(_OWORD *)&v77[60] = *(_OWORD *)(a4 + 140);
          v54 = *(_OWORD *)(a4 + 48);
          *(_OWORD *)&__p[32] = *(_OWORD *)(a4 + 32);
          *(_OWORD *)&__p[48] = v54;
          v55 = *(_OWORD *)(a4 + 80);
          *(_OWORD *)&__p[64] = *(_OWORD *)(a4 + 64);
          *(_OWORD *)v77 = v55;
          v56 = *(_OWORD *)a4;
          v57 = *(_OWORD *)(a4 + 16);
          v78 = v52;
          *(_OWORD *)__p = v56;
          *(_OWORD *)&__p[16] = v57;
          sub_100EF7534((uint64_t)&v79, v6);
          *(_OWORD *)v86 = *(_OWORD *)v71;
          v87 = v72;
          v71[1] = 0;
          v72 = 0;
          v71[0] = 0;
          sub_100EF625C((uint64_t *)(v66 + 504), (uint64_t)__p);
          if (v86[0])
          {
            v86[1] = v86[0];
            operator delete(v86[0]);
          }
          if (v85 < 0)
            operator delete(v84);
          if (v83 < 0)
            operator delete(v82);
          if (v81 < 0)
            operator delete(v80);
          *(_QWORD *)(v66 + 560) = *(_QWORD *)(a4 + 76);
          (*(void (**)(_QWORD))(**(_QWORD **)(v66 + 400) + 104))(*(_QWORD *)(v66 + 400));
          ++*(_DWORD *)(v66 + 208);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102191BE8);
          v58 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            v59 = *(_QWORD *)(v6 + 8);
            if (*(char *)(v6 + 31) >= 0)
              v59 = v6 + 8;
            v60 = *(_DWORD *)(v6 + 32);
            v61 = *(_DWORD *)(v6 + 36);
            v62 = *(_DWORD *)(v6 + 40);
            v63 = *(unsigned __int8 *)(v6 + 101);
            v64 = *(unsigned __int8 *)(v6 + 102);
            v65 = *(unsigned __int8 *)(v6 + 100);
            *(_QWORD *)__p = 68293123;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2050;
            *(_QWORD *)&__p[20] = 4;
            *(_WORD *)&__p[28] = 1040;
            *(_DWORD *)&__p[30] = 156;
            *(_WORD *)&__p[34] = 2097;
            *(_QWORD *)&__p[36] = a4;
            *(_WORD *)&__p[44] = 2081;
            *(_QWORD *)&__p[46] = v59;
            *(_WORD *)&__p[54] = 1025;
            *(_DWORD *)&__p[56] = v60;
            *(_WORD *)&__p[60] = 1025;
            *(_DWORD *)&__p[62] = v61;
            *(_WORD *)&__p[66] = 1025;
            *(_DWORD *)&__p[68] = v62;
            *(_WORD *)&__p[72] = 1025;
            *(_DWORD *)&__p[74] = v63;
            *(_WORD *)&__p[78] = 1025;
            *(_DWORD *)v77 = v64;
            *(_WORD *)&v77[4] = 1040;
            *(_DWORD *)&v77[6] = 136;
            *(_WORD *)&v77[10] = 2097;
            *(_QWORD *)&v77[12] = v6 + 104;
            *(_WORD *)&v77[20] = 1040;
            *(_DWORD *)&v77[22] = 136;
            *(_WORD *)&v77[26] = 2097;
            *(_QWORD *)&v77[28] = v6 + 240;
            *(_WORD *)&v77[36] = 1040;
            *(_DWORD *)&v77[38] = 136;
            *(_WORD *)&v77[42] = 2097;
            *(_QWORD *)&v77[44] = v6 + 376;
            *(_WORD *)&v77[52] = 1025;
            *(_DWORD *)&v77[54] = v65;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P, \"tripId\":%{private, location:escape_only}s, \"rat\":%{private}d, \"mcc\":%{private}d, \"mnc\":%{private}d, \"motionVehicleConnectedStateChanged\":%{private}d, \"motionVehicleConnected\":%{private}d, \"rawMotionActivity\":%{private, location:CLMotionActivity}.*P, \"motionActivity\":%{private, location:CLMotionActivity}.*P, \"dominantMotionActivity\":%{private, location:CLMotionActivity}.*P, \"isProactiveLocationSession\":%{private}d}", __p, 0x8Au);
          }
          sub_100D05194(v66);
          if (v71[0])
          {
            v71[1] = v71[0];
            operator delete(v71[0]);
          }
        }
        goto LABEL_97;
      }
    }
    else
    {
      v28 = *(double *)(a4 + 76);
      v29 = *(double *)(a1 + 560);
      if (v28 - v29 > (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)))
        v30 = 1;
      else
        v30 = v22;
      if ((v30 & 1) == 0)
        goto LABEL_46;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v31 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)__p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2050;
      *(_QWORD *)&__p[20] = 4;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"need to start a new batch\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", __p, 0x1Cu);
    }
    sub_100EF565C((_DWORD *)a1);
    goto LABEL_46;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  v19 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)__p = 68289026;
    *(_WORD *)&__p[8] = 2082;
    *(_QWORD *)&__p[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Dropping location, not candidate for realtime harvest\"}", __p, 0x12u);
  }
LABEL_97:
  if (v74 < 0)
    operator delete(v73[0]);
}

void sub_100EF61B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_100EF6380((uint64_t)&a32);
  if (__p)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF625C(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t result;

  v2 = a1[5];
  if (!v2)
    return 0;
  v5 = (a1[3] + a1[4]) % v2;
  v6 = *a1;
  v7 = *a1 + 696 * v5;
  v8 = *(_OWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v7 + 80) = v8;
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  v11 = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v7 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v7 + 144) = v11;
  *(_OWORD *)(v7 + 96) = v13;
  *(_OWORD *)(v7 + 112) = v12;
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v14;
  *(_QWORD *)(v7 + 160) = *(_QWORD *)(a2 + 160);
  std::string::operator=((std::string *)(v7 + 168), (const std::string *)(a2 + 168));
  *(_OWORD *)(v7 + 192) = *(_OWORD *)(a2 + 192);
  std::string::operator=((std::string *)(v7 + 208), (const std::string *)(a2 + 208));
  std::string::operator=((std::string *)(v7 + 232), (const std::string *)(a2 + 232));
  memcpy((void *)(v7 + 256), (const void *)(a2 + 256), 0x1A0uLL);
  if (v7 != a2)
    sub_1002A3054((char *)(v6 + 696 * v5 + 672), *(char **)(a2 + 672), *(_QWORD *)(a2 + 680), (uint64_t)(*(_QWORD *)(a2 + 680) - *(_QWORD *)(a2 + 672)) >> 2);
  v15 = a1[4];
  if (v15 == a1[5])
  {
    result = 0;
    a1[3] = (a1[3] + 1) % v15;
  }
  else
  {
    a1[4] = v15 + 1;
    return 1;
  }
  return result;
}

uint64_t sub_100EF6380(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(_QWORD *)(a1 + 680) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  return a1;
}

void sub_100EF63E0(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 56))(*(_QWORD *)(a1 + 368));
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v4 = *(double *)(v2 + 76);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  v5 = vabdd_f64(v3, v4);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v8 = 68289539;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = 4;
    v14 = 2049;
    v15 = *(_QWORD *)&v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Traffic service timer fired has elapsed since last GPS location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"timeElapsedSinceLast_s\":\"%{private}.09f\"}", (uint8_t *)&v8, 0x26u);
  }
  if (v5 > 30.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102191BE8);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v8 = 68289539;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2050;
      v13 = 4;
      v14 = 2049;
      v15 = 0x403E000000000000;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Time elapsed exceeds maximum time; disabling traffic service\", \"subHarvester\":%{public"
        ", location:CLSubHarvesterIdentifier}lld, \"trafficServiceDisableGap_s\":\"%{private}.09f\"}",
        (uint8_t *)&v8,
        0x26u);
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 368) + 112))(*(_QWORD *)(a1 + 368), 0);
  }
}

void sub_100EF65D4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSMutableArray *v7;
  int v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  id v48;
  id v49;
  int v50;
  int v51;
  double v52;
  double v53;
  NSObject *v54;
  int v55;
  _OWORD v56[8];
  uint64_t v57;
  CLMotionActivity v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[8];
  uint64_t v64;
  _OWORD v65[8];
  uint64_t v66;
  _OWORD v67[8];
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  _QWORD v78[2];
  char v79[8];
  void *v80;
  char v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  uint8_t v89[4];
  int v90;
  __int16 v91;
  const char *v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  _BYTE v96[18];
  _BYTE buf[48];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[32];
  uint64_t v104;
  void *v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  CLMotionActivity v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  void *__p;
  unsigned int *v138;
  uint64_t v139;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"derivedUploadArchivedHarvest\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v3 = objc_alloc_init((Class)CLPLocationCollectionRequest);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 56))(*(_QWORD *)(a1 + 400));
  sub_100EF7534((uint64_t)v79, v4);
  if (v86 >= 0)
    v5 = &v85;
  else
    v5 = v85;
  objc_msgSend(v3, "setAppBundleId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  if (v81 >= 0)
    v6 = &v80;
  else
    v6 = v80;
  objc_msgSend(v3, "setTripId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  objc_msgSend(v3, "setRat:", v82);
  objc_msgSend(v3, "setMcc:", v83);
  objc_msgSend(v3, "setMnc:", v84);
  objc_msgSend(v3, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
  if (*(_QWORD *)(a1 + 640))
  {
    v7 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:");
    if (*(int *)(a1 + 640) >= 1)
    {
      v8 = 0;
      do
      {
        -[NSMutableArray addObject:](v7, "addObject:", &stru_1021D8FB8);
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 640));
    }
    for (i = a1 + 632;
          ;
          -[NSMutableArray setObject:atIndexedSubscript:](v7, "setObject:atIndexedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10), *(int *)(i + 40)))
    {
      i = *(_QWORD *)i;
      if (!i)
        break;
      v10 = (_QWORD *)(i + 16);
      if (*(char *)(i + 39) < 0)
        v10 = (_QWORD *)*v10;
    }
    objc_msgSend(v3, "setAppBundleIds:", v7);
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 120))(*(_QWORD *)(a1 + 368));
  if (v11)
  {
    v12 = objc_msgSend(objc_alloc((Class)CLPAccessoryMeta), "initWithAccessory:", v11);
    objc_msgSend(v3, "setAccessoryMeta:", v12);

  }
  v78[1] = 0;
  v78[0] = 0;
  if (*(_QWORD *)(a1 + 536))
  {
    v55 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 528);
      v14 = *(_QWORD *)(a1 + 504);
      v15 = (_OWORD *)(v14 + 696 * v13);
      v16 = v15[1];
      *(_OWORD *)buf = *v15;
      *(_OWORD *)&buf[16] = v16;
      v17 = v15[4];
      v19 = v15[2];
      v18 = v15[3];
      v100 = v15[5];
      v99 = v17;
      *(_OWORD *)&buf[32] = v19;
      v98 = v18;
      v20 = v15[8];
      v22 = v15[6];
      v21 = v15[7];
      *(_OWORD *)&v103[16] = v15[9];
      *(_OWORD *)v103 = v20;
      v101 = v22;
      v102 = v21;
      sub_100EF7534((uint64_t)&v104, (uint64_t)(v15 + 10));
      __p = 0;
      v138 = 0;
      v139 = 0;
      sub_10027205C(&__p, *(const void **)(v14 + 696 * v13 + 672), *(_QWORD *)(v14 + 696 * v13 + 680), (uint64_t)(*(_QWORD *)(v14 + 696 * v13 + 680) - *(_QWORD *)(v14 + 696 * v13 + 672)) >> 2);
      v23 = *(_QWORD *)(a1 + 536);
      if (v23)
      {
        *(_QWORD *)(a1 + 528) = (unint64_t)(*(_QWORD *)(a1 + 528) + 1) % *(_QWORD *)(a1 + 544);
        *(_QWORD *)(a1 + 536) = v23 - 1;
      }
      v75 = v101;
      v76 = v102;
      v77[0] = *(_OWORD *)v103;
      *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)&v103[12];
      v71 = *(_OWORD *)&buf[32];
      v72 = v98;
      v73 = v99;
      v74 = v100;
      v69 = *(_OWORD *)buf;
      v70 = *(_OWORD *)&buf[16];
      if (sub_100D0563C(a1, (uint64_t)&v69))
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102191BE8);
        v24 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v89 = 68289795;
          v90 = 0;
          v91 = 2082;
          v92 = "";
          v93 = 2050;
          v94 = 4;
          v95 = 1040;
          *(_DWORD *)v96 = 156;
          *(_WORD *)&v96[4] = 2097;
          *(_QWORD *)&v96[6] = &v69;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Database-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", v89, 0x2Cu);
        }
        v25 = objc_alloc((Class)CLPLocation);
        v67[6] = v75;
        v67[7] = v76;
        v68[0] = v77[0];
        *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)((char *)v77 + 12);
        v67[2] = v71;
        v67[3] = v72;
        v67[4] = v73;
        v67[5] = v74;
        v67[0] = v69;
        v67[1] = v70;
        v26 = objc_msgSend(v25, "initWithDaemonLocation:", v67);
        if (v26)
        {
          v27 = objc_alloc((Class)CLPMotionActivity);
          v65[6] = v120;
          v65[7] = v121;
          v66 = v122;
          v65[2] = v116;
          v65[3] = v117;
          v65[4] = v118;
          v65[5] = v119;
          v65[0] = v114;
          v65[1] = v115;
          v28 = objc_msgSend(v27, "initWithCLMotionActivity:", v65);
          objc_msgSend(v26, "setRawMotionActivity:", v28);

          v29 = objc_alloc((Class)CLPMotionActivity);
          v63[6] = v129;
          v63[7] = v130;
          v64 = v131;
          v63[2] = v125;
          v63[3] = v126;
          v63[4] = v127;
          v63[5] = v128;
          v63[0] = v123;
          v63[1] = v124;
          v30 = objc_msgSend(v29, "initWithCLMotionActivity:", v63);
          objc_msgSend(v26, "setMotionActivity:", v30);

          v31 = objc_alloc((Class)CLPMotionActivity);
          v60 = v134;
          v61 = v135;
          v62 = v136;
          v58 = v132;
          v59 = v133;
          v32 = objc_msgSend(v31, "initWithCLMotionActivity:", &v58);
          objc_msgSend(v26, "setDominantMotionActivity:", v32);

          objc_msgSend(v26, "setMotionVehicleConnectedStateChanged:", v112);
          objc_msgSend(v26, "setMotionVehicleConnected:", v113);
          v33 = objc_alloc((Class)CLPVehicleType);
          v56[6] = v129;
          v56[7] = v130;
          v57 = v131;
          v56[2] = v125;
          v56[3] = v126;
          v56[4] = v127;
          v56[5] = v128;
          v56[0] = v123;
          v56[1] = v124;
          v34 = objc_msgSend(v33, "initWithCLMotionActivity:", v56);
          objc_msgSend(v26, "setVehicleType:", v34);

          v35 = objc_alloc_init((Class)NSMutableArray);
          v36 = (unsigned int *)__p;
          v37 = v138;
          while (v36 != v37)
            objc_msgSend(v35, "addObject:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), *v36++));
          objc_msgSend(v26, "setAppBundleIdIndices:", v35);
          if ((v75 & 0xFFFFFFF7) == 1)
          {
            objc_msgSend(v26, "setIsProactiveLocation:", v111);
            objc_msgSend(v3, "addLocation:", v26);
            v41 = v111;
            sub_100785810(v78, &v132);
            v55 += v41;
LABEL_64:
            v46 = qword_1022A0200;
            ++*(_DWORD *)(a1 + 272);
            if (v46 != -1)
              dispatch_once(&qword_1022A0200, &stru_102191BE8);
            goto LABEL_66;
          }
          if ((_DWORD)v75 != 3)
          {
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102191BE8);
            v44 = qword_1022A0208;
            if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v89 = 68289795;
              v90 = 0;
              v91 = 2082;
              v92 = "";
              v93 = 2050;
              v94 = 4;
              v95 = 1040;
              *(_DWORD *)v96 = 156;
              *(_WORD *)&v96[4] = 2097;
              *(_QWORD *)&v96[6] = &v69;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"throwing out non-gps, non-accessory location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", v89, 0x2Cu);
              if (qword_1022A0200 != -1)
                dispatch_once(&qword_1022A0200, &stru_102191BE8);
            }
            v45 = qword_1022A0208;
            if (os_signpost_enabled((os_log_t)qword_1022A0208))
            {
              *(_DWORD *)v89 = 68289795;
              v90 = 0;
              v91 = 2082;
              v92 = "";
              v93 = 2050;
              v94 = 4;
              v95 = 1040;
              *(_DWORD *)v96 = 156;
              *(_WORD *)&v96[4] = 2097;
              *(_QWORD *)&v96[6] = &v69;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "throwing out non-gps, non-accessory location", "{\"msg%{public}.0s\":\"throwing out non-gps, non-accessory location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", v89, 0x2Cu);
              goto LABEL_64;
            }
            ++*(_DWORD *)(a1 + 272);
LABEL_66:
            v47 = qword_1022A0208;
            if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
            {
              v48 = objc_msgSend(v3, "accessoryMeta");
              v49 = objc_msgSend(v26, "modeIndicatorAsString:", objc_msgSend(v26, "modeIndicator"));
              *(_DWORD *)v89 = 68289795;
              v90 = 0;
              v91 = 2082;
              v92 = "";
              v93 = 2050;
              v94 = 4;
              v95 = 2114;
              *(_QWORD *)v96 = v48;
              *(_WORD *)&v96[8] = 2113;
              *(_QWORD *)&v96[10] = v49;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"accessory-meta\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"accessory\":%{public, location:escape_only}@, \"modeIndicator\":%{private, location:escape_only}@}", v89, 0x30u);
            }

            goto LABEL_69;
          }
          objc_msgSend(v26, "setIsProactiveLocation:", 0);
          switch(*(_DWORD *)&v103[28])
          {
            case 'A':
              v43 = 2;
              break;
            case 'E':
              v43 = 4;
              break;
            case 'D':
              v43 = 3;
              break;
            default:
LABEL_63:
              objc_msgSend(v3, "addAccessoryLocation:", v26);
              sub_100785810(v78, &v132);
              goto LABEL_64;
          }
          objc_msgSend(v26, "setModeIndicator:", v43);
          goto LABEL_63;
        }
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102191BE8);
        v42 = qword_1022A0208;
        if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          goto LABEL_69;
        *(_DWORD *)v89 = 68289282;
        v90 = 0;
        v91 = 2082;
        v92 = "";
        v93 = 2050;
        v94 = 4;
        v39 = v42;
        v40 = "{\"msg%{public}.0s\":\"skipping invalid location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102191BE8);
        v38 = qword_1022A0208;
        if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          goto LABEL_69;
        *(_DWORD *)v89 = 68289282;
        v90 = 0;
        v91 = 2082;
        v92 = "";
        v93 = 2050;
        v94 = 4;
        v39 = v38;
        v40 = "{\"msg%{public}.0s\":\"validateLocationForUpload failed\", \"subHarvester\":%{public, location:CLSubHarves"
              "terIdentifier}lld}";
      }
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, v40, v89, 0x1Cu);
LABEL_69:
      if (__p)
      {
        v138 = (unsigned int *)__p;
        operator delete(__p);
      }
      if (v110 < 0)
        operator delete(v109);
      if (v108 < 0)
        operator delete(v107);
      if (v106 < 0)
        operator delete(v105);
      if (!*(_QWORD *)(a1 + 536))
        goto LABEL_80;
    }
  }
  v55 = 0;
LABEL_80:
  v50 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40))
                           + 9);
  v51 = *(_DWORD *)(a1 + 420);
  sub_100204BE4(a1 + 280);
  sub_100787240((int32x2_t *)(a1 + 656), v55, (uint64_t)v78, v50 != 0, (unint64_t)((double)v51 / v52));
  +[GEOLocationCollectionReporter reportRealtimeLocationCollection:](GEOLocationCollectionReporter, "reportRealtimeLocationCollection:", v3);

  sub_100EF565C((_DWORD *)a1);
  v53 = sub_1001FCBB4();
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLLocationController")), "setRealTimeHarvestTriggered:", v53);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  v54 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 4;
    *(_WORD *)&buf[28] = 2050;
    *(double *)&buf[30] = v53;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"sent traffic harvest\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"time_s\":\"%{public}.09f\"}", buf, 0x26u);
  }
  if (v88 < 0)
    operator delete(v87);
  if (v86 < 0)
    operator delete(v85);
  if (v81 < 0)
    operator delete(v80);
}

void sub_100EF7294(_Unwind_Exception *a1)
{
  sub_100EF7338((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF7338(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100EF7388(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void **v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;

  *(_BYTE *)(a1 + 440) = 1;
  *(CFAbsoluteTime *)(a1 + 448) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 496) = 0;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 480);
    v4 = *(_QWORD *)(a1 + 488);
    v5 = *(_DWORD *)(a1 + 496);
    v7[0] = 68290051;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = 4;
    v12 = 2049;
    v13 = v3;
    v14 = 2049;
    v15 = v4;
    v16 = 1025;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationRealtimeHarvest\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"remainingBudget\":%{private}lld, \"remainingInterval\":\"%{private}f\", \"pointsLostByBudget\":%{private}d}", (uint8_t *)v7, 0x36u);
  }
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  v6 = (void **)(a1 + 456);
  if (*(char *)(a1 + 479) < 0)
    operator delete(*v6);
  *v6 = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 488) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 496) = 0;
}

void sub_100EF74E4(uint64_t a1)
{
  sub_100EF7640(a1);
  operator delete();
}

void sub_100EF7508(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100EF7534(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  v6 = (_BYTE *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_100115CE4(v6, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)v6 = v7;
  }
  memcpy((void *)(a1 + 96), (const void *)(a2 + 96), 0x1A0uLL);
  return a1;
}

void sub_100EF760C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF7640(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = off_102191B08;
  v2 = *(void **)(a1 + 1144);
  if (v2)
  {
    *(_QWORD *)(a1 + 1152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1024);
  if (v3)
  {
    *(_QWORD *)(a1 + 1032) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 944);
  if (v4)
  {
    *(_QWORD *)(a1 + 952) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 864);
  if (v5)
  {
    *(_QWORD *)(a1 + 872) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 727) < 0)
    operator delete(*(void **)(a1 + 704));
  sub_1002A1C94(a1 + 616);
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  sub_100261F44(a1 + 568);
  v7 = (void **)(a1 + 504);
  sub_100EF7778(&v7);
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  sub_100261F44(a1 + 400);
  sub_100261F44(a1 + 384);
  sub_100261F44(a1 + 368);
  sub_100261F44(a1 + 352);
  return sub_100429668(a1);
}

uint64_t sub_100EF7728(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  sub_100EF7860((uint64_t *)a1, a2);
  return a1;
}

void sub_100EF7760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100EF7778((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100EF7778(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 696;
        sub_100EF77FC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100EF77FC(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 672);
  if (v3)
  {
    *(_QWORD *)(a2 + 680) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 255) < 0)
    operator delete(*(void **)(a2 + 232));
  if (*(char *)(a2 + 231) < 0)
    operator delete(*(void **)(a2 + 208));
  if (*(char *)(a2 + 191) < 0)
    operator delete(*(void **)(a2 + 168));
}

void sub_100EF7860(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x66FD0EB66FD0EB67 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_100EF78F8(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 696 * a2;
    while (v3 != v7)
    {
      v3 -= 696;
      sub_100EF77FC((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void **sub_100EF78F8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x66FD0EB66FD0EB67 * ((v6 - v7) >> 3) >= a2)
    return (void **)sub_100EF7A30((uint64_t)a1, a2);
  v8 = 0x66FD0EB66FD0EB67 * ((v7 - *a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x5E293205E29320)
    sub_100259694();
  v10 = 0x66FD0EB66FD0EB67 * ((v5 - *a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x2F149902F14990)
    v11 = 0x5E293205E29320;
  else
    v11 = v9;
  v18 = v4;
  if (v11)
    v12 = (char *)sub_1005A9B68(v4, v11);
  else
    v12 = 0;
  v14 = v12;
  v15 = &v12[696 * v8];
  v16 = v15;
  v17 = &v12[696 * v11];
  sub_100EF7AC8((uint64_t)&v14, a2);
  sub_100EF7B60(a1, &v14);
  return sub_100EF7DAC(&v14);
}

void sub_100EF7A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100EF7DAC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF7A30(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = v2 + 696 * a2;
    __asm { FMOV            V2.2D, #-1.0 }
    do
    {
      *(_DWORD *)v2 = 0xFFFF;
      *(_OWORD *)(v2 + 4) = 0uLL;
      *(_OWORD *)(v2 + 20) = xmmword_101BAFC90;
      *(_OWORD *)(v2 + 36) = _Q2;
      *(_OWORD *)(v2 + 52) = _Q2;
      *(_OWORD *)(v2 + 68) = _Q2;
      *(_DWORD *)(v2 + 84) = 0;
      *(_QWORD *)(v2 + 88) = 0xBFF0000000000000;
      *(_OWORD *)(v2 + 96) = 0uLL;
      *(_DWORD *)(v2 + 112) = 0;
      *(_QWORD *)(v2 + 116) = 0xBFF0000000000000;
      *(_DWORD *)(v2 + 124) = 0x7FFFFFFF;
      *(_QWORD *)(v2 + 128) = 0;
      *(_OWORD *)(v2 + 136) = 0uLL;
      *(_BYTE *)(v2 + 152) = 0;
      *(_OWORD *)(v2 + 168) = 0uLL;
      *(_QWORD *)(v2 + 184) = 0;
      *(_OWORD *)(v2 + 224) = 0uLL;
      *(_OWORD *)(v2 + 240) = 0uLL;
      *(_OWORD *)(v2 + 208) = 0uLL;
      *(_QWORD *)(v2 + 688) = 0;
      *(_OWORD *)(v2 + 672) = 0uLL;
      v2 += 696;
    }
    while (v2 != v3);
    v2 = v3;
  }
  *(_QWORD *)(result + 8) = v2;
  return result;
}

uint64_t sub_100EF7AC8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  if (a2)
  {
    v3 = v2 + 696 * a2;
    __asm { FMOV            V2.2D, #-1.0 }
    do
    {
      *(_DWORD *)v2 = 0xFFFF;
      *(_OWORD *)(v2 + 4) = 0uLL;
      *(_OWORD *)(v2 + 20) = xmmword_101BAFC90;
      *(_OWORD *)(v2 + 36) = _Q2;
      *(_OWORD *)(v2 + 52) = _Q2;
      *(_OWORD *)(v2 + 68) = _Q2;
      *(_DWORD *)(v2 + 84) = 0;
      *(_QWORD *)(v2 + 88) = 0xBFF0000000000000;
      *(_OWORD *)(v2 + 96) = 0uLL;
      *(_DWORD *)(v2 + 112) = 0;
      *(_QWORD *)(v2 + 116) = 0xBFF0000000000000;
      *(_DWORD *)(v2 + 124) = 0x7FFFFFFF;
      *(_QWORD *)(v2 + 128) = 0;
      *(_OWORD *)(v2 + 136) = 0uLL;
      *(_BYTE *)(v2 + 152) = 0;
      *(_OWORD *)(v2 + 168) = 0uLL;
      *(_QWORD *)(v2 + 184) = 0;
      *(_OWORD *)(v2 + 224) = 0uLL;
      *(_OWORD *)(v2 + 240) = 0uLL;
      *(_OWORD *)(v2 + 208) = 0uLL;
      *(_QWORD *)(v2 + 688) = 0;
      *(_OWORD *)(v2 + 672) = 0uLL;
      v2 += 696;
    }
    while (v2 != v3);
    v2 = v3;
  }
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t sub_100EF7B60(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100EF7BD4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100EF7BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v24[3];
  char v25;
  __int128 v26;
  __int128 v27;

  v7 = a7;
  *(_QWORD *)&v27 = a6;
  *((_QWORD *)&v27 + 1) = a7;
  v26 = v27;
  v24[0] = a1;
  v24[1] = &v26;
  v24[2] = &v27;
  if (a3 == a5)
  {
    v22 = a6;
  }
  else
  {
    v9 = a3 - 696;
    do
    {
      v10 = v7 - 696;
      v11 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v9;
      *(_OWORD *)(v10 + 16) = v11;
      v12 = *(_OWORD *)(v9 + 32);
      v13 = *(_OWORD *)(v9 + 48);
      v14 = *(_OWORD *)(v9 + 80);
      *(_OWORD *)(v10 + 64) = *(_OWORD *)(v9 + 64);
      *(_OWORD *)(v10 + 80) = v14;
      *(_OWORD *)(v10 + 32) = v12;
      *(_OWORD *)(v10 + 48) = v13;
      v15 = *(_OWORD *)(v9 + 96);
      v16 = *(_OWORD *)(v9 + 112);
      v17 = *(_OWORD *)(v9 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v9 + 128);
      *(_OWORD *)(v10 + 144) = v17;
      *(_OWORD *)(v10 + 96) = v15;
      *(_OWORD *)(v10 + 112) = v16;
      *(_QWORD *)(v10 + 160) = *(_QWORD *)(v9 + 160);
      v18 = *(_OWORD *)(v9 + 168);
      *(_QWORD *)(v10 + 184) = *(_QWORD *)(v9 + 184);
      *(_OWORD *)(v10 + 168) = v18;
      *(_OWORD *)(v9 + 176) = 0u;
      *(_QWORD *)(v9 + 168) = 0;
      *(_OWORD *)(v10 + 192) = *(_OWORD *)(v9 + 192);
      v19 = *(_OWORD *)(v9 + 208);
      *(_QWORD *)(v10 + 224) = *(_QWORD *)(v9 + 224);
      *(_OWORD *)(v10 + 208) = v19;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_QWORD *)(v9 + 208) = 0;
      v20 = *(_OWORD *)(v9 + 232);
      *(_QWORD *)(v10 + 248) = *(_QWORD *)(v9 + 248);
      *(_OWORD *)(v10 + 232) = v20;
      *(_OWORD *)(v9 + 240) = 0u;
      *(_QWORD *)(v9 + 232) = 0;
      memcpy((void *)(v7 - 440), (const void *)(v9 + 256), 0x1A0uLL);
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 16) = 0u;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 + 672);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 + 688);
      *(_OWORD *)(v9 + 672) = 0u;
      *(_QWORD *)(v9 + 688) = 0;
      v7 = *((_QWORD *)&v27 + 1) - 696;
      *((_QWORD *)&v27 + 1) -= 696;
      v21 = v9 == a5;
      v9 -= 696;
    }
    while (!v21);
    v22 = v27;
  }
  v25 = 1;
  sub_100EF7D28((uint64_t)v24);
  return v22;
}

uint64_t sub_100EF7D28(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100EF7D5C((uint64_t *)a1);
  return a1;
}

void sub_100EF7D5C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100EF77FC(v3, v1);
      v1 += 696;
    }
    while (v1 != v2);
  }
}

void **sub_100EF7DAC(void **a1)
{
  sub_100EF7DDC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100EF7DDC(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 696;
    sub_100EF77FC(v4, i - 696);
  }
}

unsigned __int8 *sub_100EF7E20(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_100EF80B4(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_100EF8090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_1002A20A8((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100EF80B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = v8 + 16;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100EF8140(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A20A8(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100EF8198()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C2E390;
      v1[3] = unk_101C2E3A0;
      v1[4] = xmmword_101C2E3B0;
      v1[0] = xmmword_101C2E370;
      v1[1] = unk_101C2E380;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100EF826C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF8284()
{
  return sub_1011E780C((uint64_t)&xmmword_102309058, 1, 1, 1, 1, 1.0, 120.0, 120.0);
}

void sub_100EF8618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF86C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF88B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF8F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF9008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF90EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100261F44((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100EF91A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF9248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EF92F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF9304()
{
  uint64_t result;

  if (qword_1023118D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023118D0 + 8))(qword_1023118D0);
  if (qword_1023118D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023118D8 + 8))(qword_1023118D8);
  result = qword_1023118E0;
  if (qword_1023118E0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1023118E0 + 8))(qword_1023118E0);
  return result;
}

void sub_100EF9360(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102309088 & 1) == 0)
  {
    byte_102309088 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPKnownAC.pb.cc", a4);
    operator new();
  }
}

uint64_t sub_100EF9494(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102191D08;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_100EF94B4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPKnownAC.pb.cc", 266);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      a1[6] |= 1u;
      a1[2] = v7;
      v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    a1[6] |= 2u;
    a1[3] = v8;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0)
      return;
LABEL_7:
    v6 = *(_DWORD *)(a2 + 16);
    a1[6] |= 4u;
    a1[4] = v6;
  }
}

void sub_100EF9584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100EF959C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102191C18;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100EF95AC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102191C18;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100EF95DC()
{
  operator new();
}

uint64_t sub_100EF9618(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100EF9630(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v18 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
            if (!(_DWORD)result)
              return result;
            v11 = v18;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v9 = *((_QWORD *)this + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          a1[2] = v11;
          a1[6] |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_26:
        v17 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
          if (!(_DWORD)result)
            return result;
          v15 = v17;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v13;
          v16 = v13 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        a1[3] = v15;
        a1[6] |= 2u;
        if ((unint64_t)v16 < v9 && *v16 == 29)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_34;
        }
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 5)
        goto LABEL_18;
LABEL_34:
      v19 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v19) & 1) == 0)
        return 0;
      a1[4] = v19;
      a1[6] |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_100EF9834(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 16), a3);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 16), a3);
  return result;
}

uint64_t sub_100EF98AC(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  LOBYTE(v3) = *(_BYTE *)(a1 + 24);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_22;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_19;
LABEL_13:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      v3 = *(_DWORD *)(a1 + 24);
    }
    else
    {
      v8 = 2;
    }
    v4 += v8;
    goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
  if ((v6 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v6 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = *(_DWORD *)(a1 + 24);
      if ((v3 & 2) == 0)
        goto LABEL_19;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
LABEL_19:
  if ((v3 & 4) != 0)
    result = v4 + 5;
  else
    result = v4;
LABEL_22:
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_100EF9960(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100EF94B4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EF99AC()
{
  return 1;
}

_QWORD *sub_100EF99B4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.ColdCoffee.Geodetic");
}

void sub_100EF99C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPKnownAC.pb.cc", 517);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v7 = *(_DWORD **)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_1023118D8 + 8);
      sub_100EF94B4(v7, v8);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 36) |= 2u;
    v9 = *(_DWORD **)(a1 + 16);
    if (!v9)
      operator new();
    v10 = *(_QWORD *)(a2 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_1023118D8 + 16);
    sub_100EF94B4(v9, v10);
    if ((*(_DWORD *)(a2 + 36) & 4) != 0)
    {
LABEL_7:
      v6 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_QWORD *)(a1 + 24) = v6;
    }
  }
}

void sub_100EF9B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EF9B3C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_1023118D8 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100EF9B98(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102191C90;
  sub_100EF9B3C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100EF9BC8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102191C90;
  sub_100EF9B3C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100EF9C0C()
{
  operator new();
}

uint64_t sub_100EF9C4C(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(result + 36);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 24))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
        v1 = *(_DWORD *)(result + 36);
      }
    }
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 24))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 24) = 0;
      }
    }
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100EF9CA4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _DWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  _DWORD *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  _BYTE *v27;
  uint64_t result;
  unsigned int v29[2];

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_20;
          *(_DWORD *)(a1 + 36) |= 1u;
          v9 = *(_DWORD **)(a1 + 8);
          if (!v9)
            operator new();
          v29[0] = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v29))return 0;
          }
          else
          {
            v29[0] = *v10;
            *((_QWORD *)this + 1) = v10 + 1;
          }
          v11 = *((_DWORD *)this + 14);
          v12 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v11 + 1;
          if (v11 >= v12)
            return 0;
          v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29[0]);
          if (!sub_100EF9630(v9, this, v14) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
          v15 = *((_DWORD *)this + 14);
          v16 = __OFSUB__(v15, 1);
          v17 = v15 - 1;
          if (v17 < 0 == v16)
            *((_DWORD *)this + 14) = v17;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v18 < *((_QWORD *)this + 2) && *v18 == 18)
          {
            *((_QWORD *)this + 1) = v18 + 1;
            goto LABEL_32;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
LABEL_32:
        *(_DWORD *)(a1 + 36) |= 2u;
        v19 = *(_DWORD **)(a1 + 16);
        if (!v19)
          operator new();
        v29[0] = 0;
        v20 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v29))return 0;
        }
        else
        {
          v29[0] = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)this + 14);
        v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29[0]);
        if (!sub_100EF9630(v19, this, v24) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        v25 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v25, 1);
        v26 = v25 - 1;
        if (v26 < 0 == v16)
          *((_DWORD *)this + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 < *((_QWORD *)this + 2) && *v27 == 25)
        {
          *((_QWORD *)this + 1) = v27 + 1;
          goto LABEL_46;
        }
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 1)
        goto LABEL_20;
LABEL_46:
      *(_QWORD *)v29 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v29) & 1) == 0)return 0;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)v29;
      *(_DWORD *)(a1 + 36) |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_20:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100EF9FD8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023118D8 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 24), a3);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023118D8 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 24), a3);
  return result;
}

uint64_t sub_100EFA070(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  unsigned int v12;
  int v13;
  int v14;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_1023118D8 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100EF98AC(v6, a2);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    else
      v9 = 1;
    v4 = v8 + v9 + 1;
    v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = 0;
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
LABEL_12:
    v10 = *(_QWORD *)(a1 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_1023118D8 + 16);
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100EF98AC(v10, a2);
    v13 = (int)v11;
    if (v11 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, v12);
    else
      v14 = 1;
    v4 += v13 + v14 + 1;
    v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_18:
  if ((v3 & 4) != 0)
    result = v4 + 9;
  else
    result = v4;
LABEL_21:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_100EFA14C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100EF99C4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EFA198()
{
  return 1;
}

_QWORD *sub_100EFA1A0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.ColdCoffee.LocationInfo");
}

void sub_100EFA1B0(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  _BYTE v12[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPKnownAC.pb.cc", 727);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_100EF99C4(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    v10 = *(_DWORD *)(a2 + 32);
    if (v10 >= 2)
      sub_101932B8C();
    a1[10] |= 2u;
    a1[8] = v10;
  }
}

void sub_100EFA328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100EFA340(uint64_t *a1)
{
  *a1 = (uint64_t)off_102191D08;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100EFA378(uint64_t *a1)
{
  sub_100EFA340(a1);
  operator delete();
}

void sub_100EFA39C()
{
  operator new();
}

uint64_t sub_100EFA3E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if ((*(_WORD *)(result + 40) & 0x1FE) != 0)
    *(_DWORD *)(result + 32) = 0;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_100EFA448(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
    while (1)
    {
LABEL_2:
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 != 2)
      {
        v8 = TagFallback & 7;
        goto LABEL_33;
      }
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_33;
      v10 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
LABEL_11:
      v27 = 0;
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
        if (!(_DWORD)result)
          return result;
        v11 = v27;
      }
      else
      {
        v11 = *v10;
        *((_QWORD *)this + 1) = v10 + 1;
      }
      if (v11 <= 1)
      {
        a1[10] |= 2u;
        a1[8] = v11;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
    if (v8 == 2)
    {
      while (1)
      {
        v12 = a1[5];
        v13 = a1[4];
        if ((int)v13 >= v12)
        {
          if (v12 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v12 + 1);
            v12 = a1[5];
          }
          a1[5] = v12 + 1;
          operator new();
        }
        v14 = *((_QWORD *)a1 + 1);
        a1[4] = v13 + 1;
        v15 = *(_QWORD *)(v14 + 8 * v13);
        v28 = 0;
        v16 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0;
        }
        else
        {
          v28 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)this + 14);
        v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 >= v18)
          return 0;
        v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
        if (!sub_100EF9CA4(v15, this, v20) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
        v21 = *((_DWORD *)this + 14);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
        if (v23 < 0 == v22)
          *((_DWORD *)this + 14) = v23;
        v24 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v24 >= v9)
          goto LABEL_2;
        v25 = *v24;
        if (v25 != 10)
        {
          if (v25 != 16)
            goto LABEL_2;
          v10 = (char *)(v24 + 1);
          *((_QWORD *)this + 1) = v10;
          goto LABEL_11;
        }
        *((_QWORD *)this + 1) = v24 + 1;
      }
    }
LABEL_33:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100EFA6F8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if ((*(_BYTE *)(v5 + 40) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 32), (int)a2, a4);
  return result;
}

uint64_t sub_100EFA778(uint64_t a1, unsigned int a2)
{
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;

  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = *(_DWORD *)(a1 + 16);
  v6 = (v5 + v3);
  if (v5 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100EFA070(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7), a2);
      v9 = (int)v8;
      if (v8 >= 0x80)
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
      else
        v10 = 1;
      v6 = (v9 + v6 + v10);
      ++v7;
    }
    while (v7 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 36) = v6;
  return v6;
}

void sub_100EFA830(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100EFA1B0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100EFA87C()
{
  return 1;
}

_QWORD *sub_100EFA884@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.ColdCoffee.CoffeeShops");
}

void sub_100EFA898()
{
  operator new();
}

void sub_100EFA904()
{
  operator delete();
}

void sub_100EFA928()
{
  operator new();
}

void sub_100EFA968()
{
  operator delete();
}

uint64_t sub_100EFA98C()
{
  if (qword_102309098 != -1)
    dispatch_once(&qword_102309098, &stru_102191DB8);
  return qword_1023118E8;
}

uint64_t sub_100EFA9D0(uint64_t a1, uint64_t a2, void **a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  const char *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  id v30;
  uint64_t v32;
  id v33;
  const char *v34;
  void *v35;
  const char *v36;
  char *v37;
  void *v38;
  _QWORD block[7];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  id v49;
  _BYTE buf[1628];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  v40 = 0;
  v41 = &v40;
  v42 = 0x3052000000;
  v43 = sub_1002071F4;
  v44 = sub_100207D80;
  v45 = 0;
  v6 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100EFB3C4;
  block[3] = &unk_10215A170;
  block[5] = &v40;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync(v6, block);
  if (!v41[5])
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v16 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[Dynamic Config] No valid configuration found, parameter %@ left unchanged.", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_56;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v46 = 138412290;
    v47 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] No valid configuration found, parameter %@ left unchanged.", &v46, 12);
    v15 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v17);
    goto LABEL_49;
  }
  v38 = 0;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  v8 = sub_1001FD9FC(*(uint64_t *)buf, a2, &v38);
  v9 = v8;
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_6;
  v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v9)
      goto LABEL_7;
  }
  else
  {
LABEL_6:
    if ((_DWORD)v8)
    {
LABEL_7:
      *a3 = v38;
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v13 = qword_10229FF28;
      if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Value for key %@ set on disk, returning.", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_56;
      bzero(buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v46 = 138412290;
      v47 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Value for key %@ set on disk, returning.", &v46, 12);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v14);
LABEL_49:
      if (v15 == buf)
      {
LABEL_56:
        v24 = 0;
        goto LABEL_57;
      }
LABEL_50:
      free(v15);
      goto LABEL_56;
    }
  }
  v18 = sub_100EFBAA8(v8, (void *)v41[5]);
  v19 = v18;
  if (!v18)
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v25 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Failed to convert parameter (%@) to dict", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_56;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v46 = 138412290;
    v47 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Failed to convert parameter (%@) to dict", &v46, 12);
    v15 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v26);
    goto LABEL_49;
  }
  if (!objc_msgSend(v18, "objectForKey:", a2))
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v27 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Configuration doesn't modify parameter %@.", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_56;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v46 = 138412290;
    v47 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Configuration doesn't modify parameter %@.", &v46, 12);
    v15 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v28);
    goto LABEL_49;
  }
  v20 = objc_msgSend(v19, "objectForKeyedSubscript:", a2);
  if ((sub_100EFBCB0((uint64_t)v20, a2, v20) & 1) == 0)
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v29 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
    {
      v30 = objc_msgSend(v19, "objectForKeyedSubscript:", a2);
      *(_DWORD *)buf = 138412547;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2113;
      *(_QWORD *)&buf[14] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Sanity check failed for key %@ with retrieved value %{private}@.", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_56;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v32 = qword_10229FF28;
    v33 = objc_msgSend(v19, "objectForKeyedSubscript:", a2);
    v46 = 138412547;
    v47 = a2;
    v48 = 2113;
    v49 = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "[Dynamic Config] Sanity check failed for key %@ with retrieved value %{private}@.", &v46, 22);
    v15 = (char *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v34);
    if (v15 == buf)
      goto LABEL_56;
    goto LABEL_50;
  }
  objc_msgSend(objc_msgSend(v19, "objectForKeyedSubscript:", a2), "doubleValue");
  *a3 = v21;
  if (qword_10229FF20 != -1)
    dispatch_once(&qword_10229FF20, &stru_102191E00);
  v22 = qword_10229FF28;
  if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *a3;
    *(_DWORD *)buf = 138412547;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Overriding %@ to %{private}f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v35 = *a3;
    v46 = 138412547;
    v47 = a2;
    v48 = 2049;
    v49 = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 0, "[Dynamic Config] Overriding %@ to %{private}f", &v46, 22);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v24 = 1;
LABEL_57:
  _Block_object_dispose(&v40, 8);
  return v24;
}

void sub_100EFB370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100EFB3C4(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  void **v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *__p[2];
  char v31;
  uint8_t buf[4];
  uint64_t v33;

  v2 = a1[6];
  if (*(_DWORD *)(v2 + 64) == 1)
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v3 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
    {
      v4 = a1[4];
      *(_DWORD *)buf = 138412290;
      v33 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Configuration state inactive (parameter=%@)", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v5 = a1[4];
      LODWORD(v22) = 138412290;
      *(_QWORD *)((char *)&v22 + 4) = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Configuration state inactive (parameter=%@)", &v22, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    v22 = 0uLL;
    v23 = 0;
    sub_1015A2E04(&v24, "");
    sub_1015A2E04(&v26, "");
    sub_1015A2E04(&v28, "");
    sub_1015A2E04(__p, "");
    if (sub_10051844C(*(_QWORD *)v2, (uint64_t)&v22) == 100)
    {
      if ((_QWORD)v22)
      {
        *(_DWORD *)(v2 + 64) = 2;
        if (v31 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102191E00);
        v9 = qword_10229FF28;
        if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v33 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Received parameter string %@.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF20 != -1)
            dispatch_once(&qword_10229FF20, &stru_102191E00);
          v11 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
          v20 = 138412290;
          v21 = v11;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Received parameter string %@.", &v20, 12);
          v13 = (uint8_t *)v12;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
      }
      else
      {
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102191E00);
        v15 = qword_10229FF28;
        if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[Dynamic Config] No records in DB.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF20 != -1)
            dispatch_once(&qword_10229FF20, &stru_102191E00);
          LOWORD(v20) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] No records in DB.", &v20, 2);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        *(_DWORD *)(v2 + 64) = 1;
      }
    }
    else
    {
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v14 = qword_10229FF28;
      if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Error querying DB.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102191E00);
        LOWORD(v20) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Error querying DB.", &v20, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      *(_DWORD *)(v2 + 64) = 0;
    }
    if (v31 < 0)
      operator delete(__p[0]);
    if (v29 < 0)
      operator delete(v28);
    if (v27 < 0)
      operator delete(v26);
    if (v25 < 0)
      operator delete(v24);
  }
}

void sub_100EFBA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_1005183EC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

id sub_100EFBAA8(uint64_t a1, void *a2)
{
  id v2;
  BOOL v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  int v9;
  id v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  uint64_t v16;

  v8 = 0;
  v2 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", objc_msgSend(a2, "dataUsingEncoding:", 4), 0, &v8);
  if (v2)
    v3 = v8 == 0;
  else
    v3 = 0;
  if (!v3)
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v4 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v14 = v2;
      v15 = 2112;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[Dynamic Config] Parse error: %@, error: %@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v9 = 138412546;
      v10 = v2;
      v11 = 2112;
      v12 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 16, "[Dynamic Config] Parse error: %@, error: %@", &v9, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLContextConfigurationManager::stringToDictionary(NSString *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    return 0;
  }
  return v2;
}

uint64_t sub_100EFBCB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  NSObject *v15;
  double v16;
  uint8_t *v17;
  uint8_t *v18;
  NSObject *v19;
  double v21;
  uint8_t *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  v3 = 0;
  if (a2 && a3)
  {
    v6 = objc_opt_class(NSNumber, a2);
    if ((objc_opt_isKindOfClass(a3, v6) & 1) == 0)
      return 0;
    v8 = objc_opt_class(NSString, v7);
    if ((objc_opt_isKindOfClass(a2, v8) & 1) == 0)
      return 0;
    objc_msgSend(a3, "doubleValue");
    v10 = v9;
    v11 = objc_msgSend((id)qword_102309090, "objectForKey:", a2);
    if (!v11)
    {
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v19 = qword_10229FF28;
      if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v28 = a2;
        v29 = 2112;
        v30 = qword_102309090;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[Dynamic Config] No bounds defined for parameter %@. Defined bounds are %@", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v23 = 138412546;
      v24 = a2;
      v25 = 2112;
      v26 = qword_102309090;
      v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] No bounds defined for parameter %@. Defined bounds are %@", &v23, 22);
      v18 = v22;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::isParameterSafe(NSString *, id)", "%s\n", v21);
      goto LABEL_26;
    }
    v12 = v11;
    objc_msgSend(objc_msgSend(v11, "objectAtIndexedSubscript:", 0), "doubleValue");
    if (v10 < v13
      || (v3 = 1, objc_msgSend(objc_msgSend(v12, "objectAtIndexedSubscript:", 1), "doubleValue"), v10 > v14))
    {
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v15 = qword_10229FF28;
      if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v28 = a2;
        v29 = 2112;
        v30 = (uint64_t)a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[Dynamic Config] Out of bounds: Parameter %@ cannot be set to %@", buf, 0x16u);
      }
      v3 = 0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102191E00);
        v23 = 138412546;
        v24 = a2;
        v25 = 2112;
        v26 = (uint64_t)a3;
        v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 16, "[Dynamic Config] Out of bounds: Parameter %@ cannot be set to %@", &v23, 22);
        v18 = v17;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLContextConfigurationManager::isParameterSafe(NSString *, id)", "%s\n", v16);
LABEL_26:
        if (v18 != buf)
          free(v18);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t sub_100EFC074(uint64_t a1, void *a2)
{
  NSObject *v4;
  unsigned int v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  const char *v15;
  char *v16;
  const char *v17;
  char *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  _QWORD block[10];
  unsigned int v23;
  int v24;
  void *v25;
  __int128 buf;
  uint64_t v27;
  int v28;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  if (!a2)
    return 112;
  if (sub_100EFC5FC(a1, a2))
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v4 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138477827;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Valid config received: %{private}@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v24 = 138477827;
      v25 = a2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF28, 0, "[Dynamic Config] Valid config received: %{private}@", &v24, 12);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)", "%s\n", v15);
      if (v16 != (char *)&buf)
        free(v16);
    }
    v5 = objc_msgSend(objc_msgSend(a2, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kPriority")), "intValue");
    v6 = objc_msgSend(a2, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kConfigId"));
    v7 = objc_msgSend(a2, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kAppBundleIdentifier"));
    v8 = objc_msgSend(a2, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kStudyId"));
    v9 = objc_msgSend(a2, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kParameterDictionary"));
    if (v6 && v7 && v8 && v9)
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v27 = 0x2020000000;
      v28 = 103;
      v10 = *(NSObject **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100EFC9CC;
      block[3] = &unk_102191DE0;
      block[8] = &buf;
      block[9] = a1;
      block[4] = v6;
      block[5] = v9;
      v23 = v5;
      block[6] = v7;
      block[7] = v8;
      dispatch_sync(v10, block);
      v11 = *(unsigned int *)(*((_QWORD *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v13 = qword_10229FF28;
      if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[Dynamic Config] Nil value received for one or more fields.", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102191E00);
        LOWORD(v24) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF28, 16, "[Dynamic Config] Nil value received for one or more fields.", &v24, v21);
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 0, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)", "%s\n", v19);
        if (v20 != (char *)&buf)
          free(v20);
      }
      return 107;
    }
  }
  else
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v12 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138477827;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Invalid config received: %{private}@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v24 = 138477827;
      v25 = a2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF28, 0, "[Dynamic Config] Invalid config received: %{private}@", &v24, 12);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)", "%s\n", v17);
      if (v18 != (char *)&buf)
        free(v18);
    }
    return 100;
  }
  return v11;
}

BOOL sub_100EFC5FC(uint64_t a1, void *a2)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  NSArray *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  _BYTE v20[128];
  _QWORD v21[5];
  uint8_t buf[4];
  uint64_t v23;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  if ((unint64_t)objc_msgSend(a2, "count") > 4)
  {
    v21[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kPriority");
    v21[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kConfigId");
    v21[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kAppBundleIdentifier");
    v21[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kStudyId");
    v21[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kParameterDictionary");
    v6 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v21, 5);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v7 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v15;
LABEL_12:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v10);
        if (!objc_msgSend(a2, "objectForKey:", v11))
          break;
        if (v8 == (id)++v10)
        {
          v8 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
          result = 1;
          if (v8)
            goto LABEL_12;
          return result;
        }
      }
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v12 = qword_10229FF28;
      if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Invalid configuration: key %@ not found.", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102191E00);
        v18 = 138412290;
        v19 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 0, "[Dynamic Config] Invalid configuration: key %@ not found.", &v18, 12);
        goto LABEL_27;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v3 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Invalid configuration: too few keys.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Invalid configuration: too few keys.", &v18, 2);
LABEL_27:
      v13 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::isConfigValid(const NSDictionary<NSString *,id> *)", "%s\n", v5);
      if (v13 != buf)
        free(v13);
      return 0;
    }
  }
  return result;
}

void sub_100EFC9CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  id v12;
  NSData *v13;
  NSObject *v14;
  unint64_t v15;
  int v16;
  NSObject *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  const char *v24;
  __n128 *v25;
  const char *v26;
  __n128 *v27;
  const char *v28;
  __n128 *v29;
  unint64_t v30;
  const char *v31;
  __n128 *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  unint64_t v39;
  __int128 v40;
  int v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string __p;
  _BYTE v46[128];
  __n128 buf;
  char v48;

  v2 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(v2 + 56))
  {
    v3 = 0;
    while (1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * ((v3 + *(_QWORD *)(v2 + 48)) / 0xAAuLL))
         + 24 * ((v3 + *(_QWORD *)(v2 + 48)) % 0xAAuLL);
      if (*(char *)(v4 + 23) < 0)
        v4 = *(_QWORD *)v4;
      if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)))break;
      if ((unint64_t)++v3 >= *(_QWORD *)(v2 + 56))
        goto LABEL_7;
    }
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v17 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a1 + 32);
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Ignoring duplicate config %@.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v23 = *(_QWORD *)(a1 + 32);
      LODWORD(v40) = 138412290;
      *(_QWORD *)((char *)&v40 + 4) = v23;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Ignoring duplicate config %@.", &v40, 12);
      v25 = (__n128 *)v24;
      sub_100512490("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke", "%s\n", v24);
      if (v25 != &buf)
        free(v25);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v20 = 100;
    goto LABEL_42;
  }
LABEL_7:
  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v6 = sub_100EFBAA8((uint64_t)v5, *(void **)(a1 + 40));
  if (!v6)
  {
LABEL_41:
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v20 = 107;
LABEL_42:
    *(_DWORD *)(v19 + 24) = v20;
    return;
  }
  v7 = v6;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v35 != v9)
          objc_enumerationMutation(v7);
        v11 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
        v12 = objc_msgSend(v7, "objectForKeyedSubscript:", v11);
        if (sub_100EFBCB0((uint64_t)v12, v11, v12))
          objc_msgSend(v5, "setObject:forKey:", objc_msgSend(v7, "objectForKeyedSubscript:", v11), v11);
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    }
    while (v8);
  }
  if (!objc_msgSend(v5, "count"))
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v21 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Parameter dictionary is empty, returning.", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      LOWORD(v40) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "[Dynamic Config] Parameter dictionary is empty, returning.", &v40, 2);
      v27 = (__n128 *)v26;
      sub_100512490("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke", "%s\n", v26);
      if (v27 != &buf)
        free(v27);
    }
    goto LABEL_41;
  }
  v40 = 0uLL;
  v41 = 0;
  sub_1015A2E04(&v42, "");
  sub_1015A2E04(&v43, "");
  sub_1015A2E04(&v44, "");
  sub_1015A2E04(&__p, "");
  *((_QWORD *)&v40 + 1) = CFAbsoluteTimeGetCurrent();
  v41 = *(_DWORD *)(a1 + 80);
  std::string::assign(&v42, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 32), "UTF8String"));
  std::string::assign(&v43, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 48), "UTF8String"));
  std::string::assign(&v44, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 56), "UTF8String"));
  v33 = 0;
  v13 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v5, 0, &v33);
  if (!v13 || v33)
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v22 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v33;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[Dynamic Config] Error serializing parameter dictionary, error: %@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v38 = 138412290;
      v39 = v33;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF28, 16, "[Dynamic Config] Error serializing parameter dictionary, error: %@", &v38, 12);
      v29 = (__n128 *)v28;
      sub_100512490("Generic", 1, 0, 0, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke", "%s\n", v28);
      if (v29 != &buf)
        free(v29);
    }
    v16 = 107;
  }
  else
  {
    std::string::assign(&__p, (const std::string::value_type *)objc_msgSend(objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v13, 4), "UTF8String"));
    sub_100423B04(*(_QWORD *)v2, (uint64_t)&v40);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102191E00);
    v14 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 32);
      buf.n128_u32[0] = 138543362;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Inserted config with ID %{public}@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102191E00);
      v30 = *(_QWORD *)(a1 + 32);
      v38 = 138543362;
      v39 = v30;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF28, 0, "[Dynamic Config] Inserted config with ID %{public}@", &v38, 12);
      v32 = (__n128 *)v31;
      sub_100512490("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke", "%s\n", v31);
      if (v32 != &buf)
        free(v32);
    }
    if (*(_QWORD *)(v2 + 56) >= 3uLL)
      sub_100066778((_QWORD *)(v2 + 16));
    sub_1015A2E04(&buf, (char *)objc_msgSend(*(id *)(a1 + 32), "UTF8String"));
    sub_100EFD324((_QWORD *)(v2 + 16), &buf);
    if (v48 < 0)
      operator delete((void *)buf.n128_u64[0]);
    *(_DWORD *)(v2 + 64) = 2;
    v16 = 100;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

void sub_100EFD294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_1005183EC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100EFD324(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100167BBC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  ++a1[5];
  return result;
}

void sub_100EFD3D8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = *(NSObject **)(a1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EFD444;
  v5[3] = &unk_102131360;
  v5[4] = a2;
  v5[5] = a1;
  dispatch_sync(v4, v5);
}

void sub_100EFD444(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v2 = *(_QWORD **)(a1 + 40);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(_QWORD, uint64_t **))(*(_QWORD *)*v2 + 40))(*v2, &v7);
  v3 = v8;
  if (v7 != v8)
  {
    v4 = v7 + 6;
    do
    {
      v5 = v4;
      if (*((char *)v4 + 23) < 0)
        v5 = (uint64_t *)*v4;
      objc_msgSend(*(id *)(a1 + 32), "addObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
      v6 = v4 + 9;
      v4 += 15;
    }
    while (v6 != v3);
  }
  v10 = (void **)&v7;
  sub_100EFD728(&v10);
}

void sub_100EFD4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100EFD728(&a12);
  _Unwind_Resume(a1);
}

void sub_100EFD514(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = *(NSObject **)(a1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EFD580;
  v5[3] = &unk_102131360;
  v5[4] = a2;
  v5[5] = a1;
  dispatch_async(v4, v5);
}

void sub_100EFD580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char v16;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)v1;
  sub_1015A2E04(&__p, (char *)objc_msgSend(*(id *)(a1 + 32), "UTF8String"));
  sub_100517F08(v2);
  if (v16 < 0)
    operator delete(__p);
  v3 = *(void ***)(v1 + 24);
  v4 = *(void ***)(v1 + 32);
  if (v4 == v3)
  {
    v5 = (_QWORD *)(v1 + 56);
    v4 = *(void ***)(v1 + 24);
  }
  else
  {
    v5 = (_QWORD *)(v1 + 56);
    v6 = *(_QWORD *)(v1 + 48);
    v7 = &v3[v6 / 0xAA];
    v8 = (unint64_t)*v7;
    v9 = (unint64_t)*v7 + 24 * (v6 % 0xAA);
    v10 = (unint64_t)v3[(*(_QWORD *)(v1 + 56) + v6) / 0xAA] + 24 * ((*(_QWORD *)(v1 + 56) + v6) % 0xAA);
    if (v9 != v10)
    {
      do
      {
        if (*(char *)(v9 + 23) < 0)
        {
          operator delete(*(void **)v9);
          v8 = (unint64_t)*v7;
        }
        v9 += 24;
        if (v9 - v8 == 4080)
        {
          v11 = (unint64_t)v7[1];
          ++v7;
          v8 = v11;
          v9 = v11;
        }
      }
      while (v9 != v10);
      v3 = *(void ***)(v1 + 24);
      v4 = *(void ***)(v1 + 32);
    }
  }
  *v5 = 0;
  v12 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v13 = *(_QWORD *)(v1 + 32);
      v3 = (void **)(*(_QWORD *)(v1 + 24) + 8);
      *(_QWORD *)(v1 + 24) = v3;
      v12 = v13 - (_QWORD)v3;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 85;
    goto LABEL_18;
  }
  if (v12 >> 3 == 2)
  {
    v14 = 170;
LABEL_18:
    *(_QWORD *)(v1 + 48) = v14;
  }
  *(_DWORD *)(v1 + 64) = 0;
}

void sub_100EFD6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100EFD6FC(id a1)
{
  qword_10229FF28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_100EFD728(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        sub_10051C2A4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

NSDictionary *sub_100EFD7AC()
{
  NSDictionary *result;
  _QWORD v1[7];
  _QWORD v2[7];

  v1[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_102220810;
  v1[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_102220828;
  v1[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_102220840;
  v1[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_102220858;
  v1[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_102220870;
  v1[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_102220888;
  v1[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1022208A0;
  result = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 7);
  qword_102309090 = (uint64_t)result;
  return result;
}

void sub_100EFD8FC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_102191E30;
  v5[6] = 0;
  sub_1006CB5B4();
}

void sub_100EFD98C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_100EFD9B8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLIndoorOutdoorSubscription::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102191EB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLIndoorOutdoorSubscription::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102191EB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLIndoorOutdoorSubscription::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100EFE458(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100EFDB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EFDB94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102191E30;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[6];
    a1[6] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return sub_10002FA68((uint64_t)a1);
}

void sub_100EFDBF4(_QWORD *a1)
{
  sub_100EFDB94(a1);
  operator delete();
}

_QWORD *sub_100EFDC18@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_102191F00;
  v11[1] = sub_100EFDE8C;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageIndoorOutdoorUpdate");
  sub_100BBD474((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_102191FB0;
  v9[1] = sub_100EFE0F8;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageIndoorOutdoorLastKnownState");
  sub_100BBD474((uint64_t)v16, (uint64_t)v9);
  sub_100EFECE8(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_100EFDDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_100EFDE8C(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_102191ED0);
  v5 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    v20 = v6;
    v21 = 2048;
    v22 = a1;
    v23 = 1024;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor, Subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102191ED0);
    v10 = *(_QWORD *)(a1 + 24);
    v13 = 138412802;
    v14 = v10;
    v15 = 2048;
    v16 = a1;
    v17 = 1024;
    v18 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "IndoorOutdoor, Subscription changed, %@, %p, %d", &v13, 28);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorOutdoorSubscription::handleRequestIndoorOutdoorUpdate(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_1001A638C(a1);
  v7 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v7 + 8);
  v8 = *(void **)(v7 + 16);
  if (a2)
    objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 3, 0);
  else
    objc_msgSend(v8, "unregister:forNotification:", v9, 3);

}

void sub_100EFE0C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100EFE0F8(uint64_t a1, _QWORD *a2)
{
  id v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[5];
  std::__shared_weak_count *v13;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_100EFE1F8;
  v12[3] = &unk_102191E50;
  v6 = (std::__shared_weak_count *)a2[1];
  v12[4] = *a2;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "lastKnownIndoorOutdoorStateWithReply:", v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

}

void sub_100EFE1DC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_100EFE1F8(uint64_t a1, double *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  double v7;
  uint64_t v8;
  double v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  int v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  id v27;

  v4 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", *a2);
  v5 = objc_msgSend(objc_alloc((Class)CMIndoorOutdoorState), "initWithStartDate:type:confidence:", v4, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_102191ED0);
  v6 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 1);
    *(_DWORD *)buf = 134218498;
    v23 = v7;
    v24 = 2048;
    v25 = v8;
    v26 = 2112;
    v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor, most recent update at %f, type %ld, sending %@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102191ED0);
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 1);
    v16 = 134218498;
    v17 = v10;
    v18 = 2048;
    v19 = v11;
    v20 = 2112;
    v21 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "IndoorOutdoor, most recent update at %f, type %ld, sending %@", &v16, 32);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorOutdoorSubscription::handleMessageIndoorOutdoorLastKnownState(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v14 = CMIndoorOutdoorStateKey;
  v15 = v5;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);

  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100EFE458(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  id v15;
  int v16;
  id v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  _BYTE buf[12];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  if (*a3 == 3)
  {
    v5 = *(_QWORD *)(a4 + 8);
    v6 = *(_QWORD *)(a4 + 16);
    v7 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", *(double *)a4);
    v8 = objc_msgSend(objc_alloc((Class)CMIndoorOutdoorState), "initWithStartDate:type:confidence:", v7, v5, v6);
    sub_100197040();
    if (sub_10075D288())
    {
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_102191ED0);
      v9 = qword_10229FF48;
      if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v8;
        v23 = 2112;
        v24 = v10;
        v25 = 2048;
        v26 = a1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF40 != -1)
          dispatch_once(&qword_10229FF40, &stru_102191ED0);
        v11 = *(_QWORD *)(a1 + 24);
        v16 = 138412802;
        v17 = v8;
        v18 = 2112;
        v19 = v11;
        v20 = 2048;
        v21 = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "%@, %@, %p", &v16, 32);
        v13 = (char *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorOutdoorSubscription::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
    v14 = CMIndoorOutdoorStateKey;
    v15 = v8;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);

    sub_100EFE6E4(a1, buf);
  }
}

void sub_100EFE6E4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102192020, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100EFE778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EFE78C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100EFE7B8(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

__n128 sub_100EFE7E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102191F00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100EFE820(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102191F00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100EFE844(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100EFE894(a1 + 8, a2, a3);
}

uint64_t sub_100EFE84C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100EFE888()
{
}

void sub_100EFE894(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100EFE918(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100EFE900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EFE918(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102191F70);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102191F70);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100EFEB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100EFEB1C(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100EFEB48(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102191FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100EFEB84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102191FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100EFEBA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100EFEBF8(a1 + 8, a2, a3);
}

uint64_t sub_100EFEBB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100EFEBEC()
{
}

void sub_100EFEBF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100EFECCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100EFECE8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100EFED60(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100EFED4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100EFED60(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100EFEFE0(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100EFEFC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EFEFE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100EFF054(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100EFF03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100EFF054(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100EFF0AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EFF0C8()
{
  sub_1015A2E04(qword_1023090A0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023090A0, (void *)&_mh_execute_header);
}

uint64_t sub_100EFF10C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v3 = sub_10031F08C((_BYTE *)a1, a2);
  *((_WORD *)v3 + 48) = 0;
  if (v3[88] && *(int *)(a1 + 40) <= 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102192028);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)buf = 67109120;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Initializing with invalid channel, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102192028);
      v7 = *(_DWORD *)(a1 + 40);
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "Initializing with invalid channel, %d", v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CL::Wifi1::Types::AssociatedAp::AssociatedAp(const std::optional<CLWifiService_Type::AccessPoint> &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    if (*(_BYTE *)(a1 + 88))
    {
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)(a1 + 8));
      *(_BYTE *)(a1 + 88) = 0;
    }
  }
  return a1;
}

void sub_100EFF2F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 88))
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EFF324(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    sub_101932BB4();
  return *(unsigned __int8 *)(a1 + 97);
}

void sub_100EFF344(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  uint64_t **v11;
  uint64_t *v12;
  void *v13;
  uint64_t *v14;
  int v15;
  __int128 *v16;
  __int16 v17;
  int v18;
  uint8_t buf[16];
  uint64_t v20;

  v6 = 0;
  v7 = 0;
  v8 = 11;
  while (dword_101C2E9F0[v6] < a3)
  {
    --v7;
    if (++v6 == 11)
      goto LABEL_15;
  }
  v8 = -v7;
  if (-(int)v7 < 0xC)
  {
LABEL_15:
    v11 = (uint64_t **)(a1 + 152);
    if (a1 + 160 == sub_10019C4C0(a1 + 152, (const void **)a2))
    {
      v15 = 0;
      sub_100CB0348(buf, 0xCuLL, &v15);
      v16 = a2;
      v12 = sub_100EFF64C((uint64_t **)(a1 + 152), (const void **)a2, (uint64_t)&unk_101B9EB60, &v16);
      v13 = (void *)v12[7];
      if (v13)
      {
        v12[8] = (uint64_t)v13;
        operator delete(v13);
        v12[7] = 0;
        v12[8] = 0;
        v12[9] = 0;
      }
      *(_OWORD *)(v12 + 7) = *(_OWORD *)buf;
      v12[9] = v20;
    }
    *(_QWORD *)buf = a2;
    v14 = sub_100EFF64C(v11, (const void **)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
    ++*(_DWORD *)(v14[7] + 4 * v8);
    return;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_102192028);
  v9 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v8;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "WifiAps, fix ap count per scan type, invalid bucket index, %{public}d, # of fix APs, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102192028);
    LODWORD(v16) = 67240448;
    HIDWORD(v16) = v8;
    v17 = 1026;
    v18 = a3;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "WifiAps, fix ap count per scan type, invalid bucket index, %{public}d, # of fix APs, %{public}d", &v16, 14);
    sub_100512490("Generic", 1, 0, 0, "void CL::Wifi1::Types::HeartbeatMetrics::recordBucketedFixApsCountPerScanRequestTypes(std::string, int)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
}

void sub_100EFF5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100EFF620(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t *sub_100EFF64C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100EFF6F4((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100EFF788((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_100EFF6F4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100EFF770(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100EFF788(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100EFF788(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10055CB64((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_100EFF7CC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100EFF868(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100EFF880()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100EFF90C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100EFF924(double **a1@<X0>, double **a2@<X1>, uint64_t *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  double v9;
  double *v10;
  double *v11;
  double v12;
  int v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  BOOL v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  NSObject *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  int v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint8_t buf[4];
  double v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;

  v9 = a6 + -2592000.0;
  v10 = *a1;
  v11 = a1[1];
  v12 = 0.0;
  if (*a1 == v11)
  {
    v14 = 0;
    v13 = 0;
    v18 = 0.0;
    v17 = 0.0;
    v16 = 0.0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = v9 + -0.0001;
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
    do
    {
      v19 = v10[2];
      if (v19 > 0.0)
      {
        v20 = *v10;
        if (*v10 < a6)
        {
          v21 = fmax(v19, v18);
          if (v20 >= v15)
            v18 = v21;
          v22 = -0.0;
          if (v20 >= v15)
            v22 = v10[2];
          v17 = v17 + v22;
          if (v20 >= v15)
            ++v14;
          if (v20 >= a6 + -604800.0 + -0.0001)
          {
            ++v13;
            v16 = v16 + v19;
          }
        }
      }
      v10 += 3;
    }
    while (v10 != v11);
  }
  v23 = *a2;
  v24 = a2[1];
  if (*a2 != v24)
  {
    v25 = v9 + -0.0001;
    v12 = 0.0;
    do
    {
      v26 = *v23 >= a6 || *v23 < v25;
      v27 = fmax(v23[2], v12);
      if (!v26)
        v12 = v27;
      v23 += 3;
    }
    while (v23 != v24);
  }
  *(_QWORD *)(a5 + 32) = 0xFFF0000000000000;
  v28 = *a3;
  *(double *)a5 = a7;
  *(_QWORD *)(a5 + 8) = v28;
  v29 = a3[4];
  *(_QWORD *)(a5 + 40) = v29;
  *(double *)(a5 + 16) = v12;
  *(double *)(a5 + 24) = v18;
  if (v13)
  {
    v30 = v16 / (double)v13;
    *(double *)(a5 + 32) = v30;
  }
  else
  {
    v30 = -INFINITY;
  }
  *a4 = v13;
  a4[1] = v14;
  *((double *)a4 + 1) = v16;
  *((double *)a4 + 2) = v17;
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_102192068);
  v31 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *a4;
    v33 = a4[1];
    v34 = *((_QWORD *)a4 + 1);
    v35 = *((_QWORD *)a4 + 2);
    *(_DWORD *)buf = 134285825;
    v63 = a7;
    v64 = 2049;
    v65 = v28;
    v66 = 2049;
    v67 = v29;
    v68 = 2049;
    v69 = v18;
    v70 = 2049;
    v71 = v12;
    v72 = 2049;
    v73 = v30;
    v74 = 1025;
    v75 = v32;
    v76 = 1025;
    v77 = v33;
    v78 = 2049;
    v79 = v34;
    v80 = 2049;
    v81 = v35;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessSuppression::Features,walkingSteadiness,%{private}.2f,allBoutsBoutDurationSecCv,%{private}.2f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,dailySteps30daysMax,%{private}.2f,dailyFlights30daysMax,%{private}.2f,dailySteps7daysMean,%{private}.2f,daysWithSteps7Days,%{private}d,daysWithSteps30Days,%{private}d,totalSteps7Days,%{private}.2f,totalSteps30Days,%{private}.2f,", buf, 0x5Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102192068);
    v36 = *a4;
    v37 = a4[1];
    v38 = *((_QWORD *)a4 + 1);
    v39 = *((_QWORD *)a4 + 2);
    v42 = 134285825;
    v43 = a7;
    v44 = 2049;
    v45 = v28;
    v46 = 2049;
    v47 = v29;
    v48 = 2049;
    v49 = v18;
    v50 = 2049;
    v51 = v12;
    v52 = 2049;
    v53 = v30;
    v54 = 1025;
    v55 = v36;
    v56 = 1025;
    v57 = v37;
    v58 = 2049;
    v59 = v38;
    v60 = 2049;
    v61 = v39;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessSuppression::Features,walkingSteadiness,%{private}.2f,allBoutsBoutDurationSecCv,%{private}.2f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,dailySteps30daysMax,%{private}.2f,dailyFlights30daysMax,%{private}.2f,dailySteps7daysMean,%{private}.2f,daysWithSteps7Days,%{private}d,daysWithSteps30Days,%{private}d,totalSteps7Days,%{private}.2f,totalSteps30Days,%{private}.2f,", &v42, 94);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "Features CLMobility::SteadinessSuppression::extractFeatures(CFAbsoluteTime, double, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const SteadinessModelContinuousWalking_Generated::Features &, DailyHealthKitStats &)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
}

void sub_100EFFCCC(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

uint64_t sub_100EFFFE8(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  int *v30;
  ALSLocation *v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD v42[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  v4 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v8 == -1 || v8 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8 + 1;
      v7 |= (unint64_t)(v9 & 0x7F) << v5;
      if ((v9 & 0x80) == 0)
        goto LABEL_12;
      v5 += 7;
      v10 = v6++ >= 9;
      if (v10)
      {
        v7 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v7 = 0;
LABEL_14:
    if (v11 || (v7 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v7 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_67;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_69;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_67:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_69:
        v41 = 32;
        goto LABEL_90;
      case 2u:
        v18 = 0;
        v19 = 0;
        v15 = 0;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v15 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v10 = v19++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_73:
        v41 = 36;
        goto LABEL_90;
      case 3u:
        v22 = 0;
        v23 = 0;
        v15 = 0;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v15 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v10 = v23++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_77:
        v41 = 12;
        goto LABEL_90;
      case 4u:
        v26 = 0;
        v27 = 0;
        v15 = 0;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v15 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v10 = v27++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_81:
        v41 = 16;
        goto LABEL_90;
      case 5u:
        v30 = v4;
        v31 = objc_alloc_init(ALSLocation);

        *(_QWORD *)(a1 + 24) = v31;
        v42[0] = 0;
        v42[1] = 0;
        if (PBReaderPlaceMark(a2, v42) && (sub_100F02DFC((uint64_t)v31, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v42);
          v4 = v30;
LABEL_91:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      case 0xBu:
        v33 = 0;
        v34 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + v4[606]) |= 1u;
        while (2)
        {
          v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
            v15 |= (unint64_t)(v36 & 0x7F) << v33;
            if (v36 < 0)
            {
              v33 += 7;
              v10 = v34++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_85:
        v41 = 8;
        goto LABEL_90;
      case 0xCu:
        v37 = 0;
        v38 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + v4[606]) |= 2u;
        while (2)
        {
          v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 == -1 || v39 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
            v15 |= (unint64_t)(v40 & 0x7F) << v37;
            if (v40 < 0)
            {
              v37 += 7;
              v10 = v38++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_89:
        v41 = 40;
LABEL_90:
        *(_DWORD *)(a1 + v41) = v15;
        goto LABEL_91;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_91;
    }
  }
}

uint64_t sub_100F00BB8(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  char *v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v6 = *a3;
  *(_WORD *)(a1 + 8) = *((_WORD *)a3 + 4);
  *(_QWORD *)a1 = v6;
  if (*((char *)a3 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), (void *)a3[2], a3[3]);
  }
  else
  {
    v7 = *((_OWORD *)a3 + 1);
    *(_QWORD *)(a1 + 32) = a3[4];
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(_QWORD *)(a1 + 40) = a3[5];
  v8 = (_OWORD *)(a1 + 48);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
    *v8 = v9;
  }
  sub_100631F84(a1 + 72, a3);
  if (sub_1000CC4F4(a1 + 72))
  {
    v10 = (char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v10 = *(char **)v8;
    sub_100634364(a1 + 72, v10, (const char **)&off_102192088, 0, 0);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102192148);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning CLCloudKitMetadataDatabase is not valid, not initializing. Please re-initialize if needed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102192148);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning CLCloudKitMetadataDatabase is not valid, not initializing. Please re-initialize if needed", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "CLCloudKitMetadataDatabase::CLCloudKitMetadataDatabase(const std::string &, const CLSqliteDatabase::SqliteProperties &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return a1;
}

void sub_100F00E18(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;

  sub_1006322C0(v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100F00E60(uint64_t a1, char *a2)
{
  uint64_t v4[4];
  char v5;

  sub_100D45A54(a2, (uint64_t)v4);
  sub_100F00BB8(a1, &xmmword_1023090D0, v4);
  if (v5 < 0)
    operator delete((void *)v4[2]);
  return a1;
}

void sub_100F00EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F00ED4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  NSObject *v19;
  const char *v21;
  uint8_t *v22;
  void *__p[2];
  char v24;
  _WORD v25[8];
  uint64_t v26;
  uint64_t v27[8];
  uint8_t buf[1640];

  v2 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    sub_100263E50((uint64_t)v25);
    v3 = sub_100263F7C(&v26, (uint64_t)"INSERT OR REPLACE INTO ", 23);
    v6 = *(_QWORD *)(a1 + 48);
    v5 = a1 + 48;
    v4 = v6;
    v7 = *(char *)(v5 + 23);
    if (v7 >= 0)
      v8 = v5;
    else
      v8 = v4;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = *(_QWORD *)(v5 + 8);
    v10 = sub_100263F7C(v3, v8, v9);
    v11 = sub_100263F7C(v10, (uint64_t)" (", 2);
    v12 = sub_100263F7C(v11, (uint64_t)"Key", 3);
    v13 = sub_100263F7C(v12, (uint64_t)",", 1);
    v14 = sub_100263F7C(v13, (uint64_t)"SyncEngineMetadata", 18);
    v15 = sub_100263F7C(v14, (uint64_t)",", 1);
    v16 = sub_100263F7C(v15, (uint64_t)"LastUpdateTimestamp", 19);
    v17 = sub_100263F7C(v16, (uint64_t)") VALUES ", 9);
    sub_100263F7C(v17, (uint64_t)"(?,?,?);", 8);
    std::stringbuf::str(__p, v27);
    if (v24 >= 0)
      v18 = (char *)__p;
    else
      v18 = (char *)__p[0];
    sub_1000CDA68(v2, v18);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102192148);
  v19 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call insertOrReplace() without a backing database in CLCloudKitMetadataDatabase", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102192148);
    v25[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call insertOrReplace() without a backing database in CLCloudKitMetadataDatabase", v25, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCloudKitMetadataDatabase::updateMetadata(const CloudKitMetadata &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  return 0;
}

void sub_100F014CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100F0152C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  void *__p[2];
  char v19;
  uint8_t buf[16];
  uint64_t v21;
  uint64_t v22[8];

  v2 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    sub_100263E50((uint64_t)buf);
    v3 = sub_100263F7C(&v21, (uint64_t)"SELECT * FROM ", 14);
    v6 = *(_QWORD *)(a1 + 48);
    v5 = a1 + 48;
    v4 = v6;
    v7 = *(char *)(v5 + 23);
    if (v7 >= 0)
      v8 = v5;
    else
      v8 = v4;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = *(_QWORD *)(v5 + 8);
    v10 = sub_100263F7C(v3, v8, v9);
    v11 = sub_100263F7C(v10, (uint64_t)" WHERE ", 7);
    v12 = sub_100263F7C(v11, (uint64_t)"Key", 3);
    sub_100263F7C(v12, (uint64_t)" = ?;", 5);
    std::stringbuf::str(__p, v22);
    if (v19 >= 0)
      v13 = (char *)__p;
    else
      v13 = (char *)__p[0];
    sub_1000CDA68(v2, v13);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102192148);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getMetadata() without a backing database in CLCloudKitMetadataDatabase", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102192148);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call getMetadata() without a backing database in CLCloudKitMetadataDatabase", __p, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "CloudKitMetadata CLCloudKitMetadataDatabase::getMetadata() const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return 0x7FEFFFFFFFFFFFFFLL;
}

void sub_100F018C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100F01920(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  void *__p[2];
  char v16;
  uint8_t buf[16];
  uint64_t v18;
  _QWORD v19[8];

  v2 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    sub_100263E50((uint64_t)buf);
    v3 = sub_100263F7C(&v18, (uint64_t)"DELETE FROM ", 12);
    v4 = *(char *)(a1 + 71);
    if (v4 >= 0)
      v5 = a1 + 48;
    else
      v5 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a1 + 71);
    else
      v6 = *(_QWORD *)(a1 + 56);
    v7 = sub_100263F7C(v3, v5, v6);
    v8 = sub_100263F7C(v7, (uint64_t)" WHERE ", 7);
    v9 = sub_100263F7C(v8, (uint64_t)"Key", 3);
    sub_100263F7C(v9, (uint64_t)" = ?;", 5);
    std::stringbuf::str(__p, v19);
    if (v16 >= 0)
      v10 = (char *)__p;
    else
      v10 = (char *)__p[0];
    sub_1000CDA68(v2, v10);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102192148);
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteMetadata() without a backing database in CLCloudKitMetadataDatabase", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102192148);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call deleteMetadata() without a backing database in CLCloudKitMetadataDatabase", __p, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCloudKitMetadataDatabase::deleteMetadata()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return 0;
}

void sub_100F01C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_100F01CB4(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100F01CE0()
{
  sub_1015A2E04(&qword_1023090B8, "CloudKitMetadata");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023090B8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023090D0, "CloudKitMetadataTable");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023090D0, (void *)&_mh_execute_header);
}

void sub_100F01E18()
{
  operator delete();
}

id sub_100F01E3C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onSubmersionState:", a1);
}

void sub_100F02354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F023B4(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

_QWORD *sub_100F023E0(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102192198;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100F02514;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100F02528;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100F024EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F02514(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100F02528(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100F02544(uint64_t a1)
{
  sub_100F02808(a1);
  operator delete();
}

id sub_100F02568(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  __int128 __dst;
  int v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  int v37;

  if (a4 >= 0x10)
    v8 = 16;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021921D8);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v31 = 0x8000000101C2EA89 & 0x7FFFFFFFFFFFFFFFLL;
      v32 = 2048;
      v33 = 16;
      v34 = 2048;
      v35 = a4;
      v36 = 1024;
      v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021921D8);
      v22 = 136315906;
      v23 = 0x8000000101C2EA89 & 0x7FFFFFFFFFFFFFFFLL;
      v24 = 2048;
      v25 = 16;
      v26 = 2048;
      v27 = a4;
      v28 = 1024;
      v29 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v22, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLWaterSubmersion_Types::CMSubmersionState>::dispatchData(int, const void *, size_t) [T = CLWaterSubmersion_Types::CMSubmersionState]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100F02860;
  v18[3] = &unk_10217BDB0;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_100F02808(uint64_t a1)
{
  *(_QWORD *)a1 = off_102192198;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100F02860(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 64));
  return result;
}

void sub_100F028A4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100F02DFC(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  int v21;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  int *v53;
  int *v54;
  int *v55;
  int *v56;
  int *v57;
  uint64_t v58;
  uint64_t result;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v5 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v6 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v8 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 == -1 || v18 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          goto LABEL_12;
        v15 += 7;
        v20 = v16++ >= 9;
        if (v20)
        {
          v17 = 0;
          v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v17 = 0;
LABEL_14:
      if (v21 || (v17 & 7) == 4)
        break;
      switch((v17 >> 3))
      {
        case 1u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              goto LABEL_92;
            v23 += 7;
            v20 = v24++ >= 9;
            if (v20)
            {
              v25 = 0;
              goto LABEL_94;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_92:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v25 = 0;
LABEL_94:
          v72 = v4[622];
          goto LABEL_99;
        case 2u:
          v28 = 0;
          v29 = 0;
          v25 = 0;
          while (2)
          {
            v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if (v31 < 0)
              {
                v28 += 7;
                v20 = v29++ >= 9;
                if (v20)
                {
                  v25 = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v25 = 0;
LABEL_98:
          v72 = v5[623];
LABEL_99:
          *(_QWORD *)(a1 + v72) = v25;
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                v20 = v33++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v34) = 0;
LABEL_103:
          v73 = v6[624];
          goto LABEL_132;
        case 4u:
          v37 = 0;
          v38 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + v7[614]) |= 8u;
          while (2)
          {
            v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v39 == -1 || v39 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
              v34 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                v20 = v38++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v34) = 0;
LABEL_107:
          v73 = v8[615];
          goto LABEL_132;
        case 5u:
          v41 = 0;
          v42 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + v7[614]) |= 1u;
          while (2)
          {
            v43 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 1;
              v34 |= (unint64_t)(v44 & 0x7F) << v41;
              if (v44 < 0)
              {
                v41 += 7;
                v20 = v42++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v34) = 0;
LABEL_111:
          v73 = v9[616];
          goto LABEL_132;
        case 6u:
          v45 = 0;
          v46 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + v7[614]) |= 0x40u;
          while (2)
          {
            v47 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 1;
              v34 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                v20 = v46++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v34) = 0;
LABEL_115:
          v73 = v10[617];
          goto LABEL_132;
        case 7u:
          v49 = 0;
          v50 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + v7[614]) |= 2u;
          while (2)
          {
            v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 1;
              v34 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v20 = v50++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v34) = 0;
LABEL_119:
          v73 = v11[618];
          goto LABEL_132;
        case 0xBu:
          v60 = 0;
          v61 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + v7[614]) |= 0x20u;
          while (2)
          {
            v62 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v62 == -1 || v62 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v63 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62 + 1;
              v34 |= (unint64_t)(v63 & 0x7F) << v60;
              if (v63 < 0)
              {
                v60 += 7;
                v20 = v61++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_123;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v34) = 0;
LABEL_123:
          v73 = v12[619];
          goto LABEL_132;
        case 0xCu:
          v64 = 0;
          v65 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + v7[614]) |= 0x10u;
          while (2)
          {
            v66 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v66 == -1 || v66 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66 + 1;
              v34 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                v20 = v65++ >= 9;
                if (v20)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_127;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v34) = 0;
LABEL_127:
          v73 = v13[620];
          goto LABEL_132;
        case 0xDu:
          v68 = 0;
          v69 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + v7[614]) |= 4u;
          break;
        default:
          v53 = v4;
          v54 = v5;
          v55 = v6;
          v56 = v7;
          v57 = v8;
          v58 = a1;
          result = PBReaderSkipValueWithTag(a2);
          v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          a1 = v58;
          v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v8 = v57;
          v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v7 = v56;
          v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v6 = v55;
          v5 = v54;
          v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v4 = v53;
          v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v70 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v70 == -1 || v70 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v71 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v70 + 1;
        v34 |= (unint64_t)(v71 & 0x7F) << v68;
        if ((v71 & 0x80) == 0)
          goto LABEL_129;
        v68 += 7;
        v20 = v69++ >= 9;
        if (v20)
        {
          LODWORD(v34) = 0;
          goto LABEL_131;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_129:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v34) = 0;
LABEL_131:
      v73 = v14[621];
LABEL_132:
      *(_DWORD *)(a1 + v73) = v34;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

_QWORD *sub_100F03F50(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  double *v11;
  _QWORD *v12;
  uint64_t v13;
  double *v14;
  double *v15;
  _QWORD *v16;
  double *v17;
  double *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v23;

  v4 = 0;
  if (*(double *)(a2 + 16) >= 0.35)
    v4 = *(_QWORD *)(a2 + 8);
  v5 = a1 + 2;
  v23.n128_u64[0] = *(_QWORD *)(a2 + 40);
  v23.n128_u64[1] = v4;
  sub_100F040E4(a1 + 2, &v23);
  v6 = a1[6];
  v7 = a1[3];
  v8 = a1[4];
  v9 = (_QWORD *)(v7 + 8 * (v6 >> 8));
  if (v8 == v7)
  {
    v11 = 0;
    v12 = a1 + 7;
  }
  else
  {
    v10 = *(double *)(a2 + 40);
    v11 = (double *)(*v9 + 16 * v6);
    v12 = a1 + 7;
    v13 = *(_QWORD *)(v7 + (((a1[7] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 56) + v6);
    if (v11 != (double *)v13)
    {
      while (vabdd_f64(v10, *v11) <= 720.0)
      {
        v11 += 2;
        if ((double *)((char *)v11 - *v9) == (double *)4096)
        {
          v14 = (double *)v9[1];
          ++v9;
          v11 = v14;
        }
        if (v11 == (double *)v13)
          goto LABEL_19;
      }
    }
    if (v11 == (double *)v13)
    {
LABEL_19:
      v11 = (double *)(*(_QWORD *)(v7 + (((a1[7] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*((_BYTE *)a1 + 56) + v6));
    }
    else
    {
      v15 = v11;
      v16 = v9;
      while (1)
      {
        v15 += 2;
        if ((double *)((char *)v15 - *v16) == (double *)4096)
        {
          v17 = (double *)v16[1];
          ++v16;
          v15 = v17;
        }
        if (v15 == (double *)v13)
          break;
        if (vabdd_f64(v10, *v15) <= 720.0)
        {
          *(_OWORD *)v11 = *(_OWORD *)v15;
          v11 += 2;
          if ((double *)((char *)v11 - *v9) == (double *)4096)
          {
            v18 = (double *)v9[1];
            ++v9;
            v11 = v18;
          }
        }
      }
      v6 = a1[6];
      v7 = a1[3];
      v8 = a1[4];
    }
  }
  v19 = v6 + *v12;
  v20 = (char *)(v7 + 8 * (v19 >> 8));
  if (v8 == v7)
    v21 = 0;
  else
    v21 = *(_QWORD *)v20 + 16 * v19;
  return sub_1000D8D4C(v5, (char *)v9, (uint64_t)v11, v20, v21);
}

__n128 sub_100F040E4(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F04178(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

double sub_100F0416C(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)(a2 + 24);
  *(double *)(a1 + 8) = result;
  return result;
}

void sub_100F04178(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F04440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F05858(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  int v11;
  ALSCellTower *v13;
  ALSWirelessAP *v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  void *String;
  ALSCdmaCellTower *v25;
  ALSCdmaEvdoTower *v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;
  ALSLteCellTower *v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  ALSScdmaCellTower *v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  ALSNr5GCellTower *v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  uint64_t result;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  ALSMeta *v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
        while (1)
        {
          v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0)
            goto LABEL_11;
          v4 += 7;
          v9 = v5++ >= 9;
          if (v9)
          {
            v6 = 0;
            v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v6 = 0;
LABEL_13:
        v11 = v6 & 7;
        if (!v10 && v11 != 4)
        {
          switch((v6 >> 3))
          {
            case 1u:
              v13 = objc_alloc_init(ALSCellTower);
              objc_msgSend((id)a1, "addCellTower:", v13);

              v69 = 0;
              v70 = 0;
              if (PBReaderPlaceMark(a2, &v69) && (sub_100EFFFE8((uint64_t)v13, a2) & 1) != 0)
                goto LABEL_116;
              return 0;
            case 2u:
              v14 = objc_alloc_init(ALSWirelessAP);
              objc_msgSend((id)a1, "addWirelessAP:", v14);

              v69 = 0;
              v70 = 0;
              if (!PBReaderPlaceMark(a2, &v69) || (sub_100F52C68((uint64_t)v14, a2) & 1) == 0)
                return 0;
              goto LABEL_116;
            case 3u:
              v15 = 0;
              v16 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 144) |= 4u;
              while (2)
              {
                v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v18 == -1 || v18 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
                  v17 |= (unint64_t)(v19 & 0x7F) << v15;
                  if (v19 < 0)
                  {
                    v15 += 7;
                    v9 = v16++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_120;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v17) = 0;
LABEL_120:
              v62 = 96;
              goto LABEL_149;
            case 4u:
              v20 = 0;
              v21 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 144) |= 0x40u;
              while (2)
              {
                v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v22 == -1 || v22 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v23 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
                  v17 |= (unint64_t)(v23 & 0x7F) << v20;
                  if (v23 < 0)
                  {
                    v20 += 7;
                    v9 = v21++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_124;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v17) = 0;
LABEL_124:
              v62 = 112;
              goto LABEL_149;
            case 5u:
              String = (void *)PBReaderReadString(a2);

              *(_QWORD *)(a1 + 32) = String;
              goto LABEL_150;
            case 0x15u:
              v25 = objc_alloc_init(ALSCdmaCellTower);
              objc_msgSend((id)a1, "addCdmaCellTower:", v25);

              v69 = 0;
              v70 = 0;
              if (!PBReaderPlaceMark(a2, &v69) || (sub_100EDC410((uint64_t)v25, a2) & 1) == 0)
                return 0;
              goto LABEL_116;
            case 0x16u:
              v26 = objc_alloc_init(ALSCdmaEvdoTower);
              objc_msgSend((id)a1, "addCdmaEvdoTower:", v26);

              v69 = 0;
              v70 = 0;
              if (!PBReaderPlaceMark(a2, &v69) || (sub_100EE6198((uint64_t)v26, a2) & 1) == 0)
                return 0;
              goto LABEL_116;
            case 0x17u:
              v27 = 0;
              v28 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 144) |= 1u;
              while (2)
              {
                v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v29 == -1 || v29 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
                  v17 |= (unint64_t)(v30 & 0x7F) << v27;
                  if (v30 < 0)
                  {
                    v27 += 7;
                    v9 = v28++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_128;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v17) = 0;
LABEL_128:
              v62 = 88;
              goto LABEL_149;
            case 0x18u:
              v31 = 0;
              v32 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 144) |= 2u;
              while (2)
              {
                v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v33 == -1 || v33 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
                  v17 |= (unint64_t)(v34 & 0x7F) << v31;
                  if (v34 < 0)
                  {
                    v31 += 7;
                    v9 = v32++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_132;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v17) = 0;
LABEL_132:
              v62 = 92;
              goto LABEL_149;
            case 0x19u:
              v35 = objc_alloc_init(ALSLteCellTower);
              objc_msgSend((id)a1, "addLteCellTower:", v35);

              v69 = 0;
              v70 = 0;
              if (!PBReaderPlaceMark(a2, &v69) || (sub_100F0B28C((uint64_t)v35, a2) & 1) == 0)
                return 0;
              goto LABEL_116;
            case 0x1Au:
              v36 = 0;
              v37 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 144) |= 8u;
              while (2)
              {
                v38 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v38 == -1 || v38 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v39 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
                  v17 |= (unint64_t)(v39 & 0x7F) << v36;
                  if (v39 < 0)
                  {
                    v36 += 7;
                    v9 = v37++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_136;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v17) = 0;
LABEL_136:
              v62 = 100;
              goto LABEL_149;
            case 0x1Bu:
              v40 = objc_alloc_init(ALSScdmaCellTower);
              objc_msgSend((id)a1, "addScdmaCellTower:", v40);

              v69 = 0;
              v70 = 0;
              if (!PBReaderPlaceMark(a2, &v69) || (sub_1012FBA18((uint64_t)v40, a2) & 1) == 0)
                return 0;
              goto LABEL_116;
            case 0x1Cu:
              v41 = 0;
              v42 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 144) |= 0x20u;
              while (2)
              {
                v43 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v43 == -1 || v43 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v44 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 1;
                  v17 |= (unint64_t)(v44 & 0x7F) << v41;
                  if (v44 < 0)
                  {
                    v41 += 7;
                    v9 = v42++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_140;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v17) = 0;
LABEL_140:
              v62 = 108;
              goto LABEL_149;
            case 0x1Du:
              v45 = objc_alloc_init(ALSNr5GCellTower);
              objc_msgSend((id)a1, "addNr5GCellTower:", v45);

              v69 = 0;
              v70 = 0;
              if (!PBReaderPlaceMark(a2, &v69) || (sub_1014626D4((uint64_t)v45, a2) & 1) == 0)
                return 0;
              goto LABEL_116;
            case 0x1Eu:
              v46 = 0;
              v47 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 144) |= 0x10u;
              while (2)
              {
                v48 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v48 == -1 || v48 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v49 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 1;
                  v17 |= (unint64_t)(v49 & 0x7F) << v46;
                  if (v49 < 0)
                  {
                    v46 += 7;
                    v9 = v47++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_144;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v17) = 0;
LABEL_144:
              v62 = 104;
              goto LABEL_149;
            case 0x1Fu:
              if (v11 == 2)
              {
                v69 = 0;
                v70 = 0;
                result = PBReaderPlaceMark(a2, &v69);
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2
                                                                                    + OBJC_IVAR___PBDataReader__length)
                     && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                {
                  v51 = 0;
                  v52 = 0;
                  v53 = 0;
                  while (1)
                  {
                    v54 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                    if (v54 == -1 || v54 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                      break;
                    v55 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
                    *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 1;
                    v53 |= (unint64_t)(v55 & 0x7F) << v51;
                    if ((v55 & 0x80) == 0)
                      goto LABEL_103;
                    v51 += 7;
                    v9 = v52++ >= 9;
                    if (v9)
                    {
                      v56 = 0;
                      goto LABEL_106;
                    }
                  }
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_103:
                  if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                    v56 = 0;
                  else
                    v56 = v53;
LABEL_106:
                  PBRepeatedInt32Add(a1 + 8, v56);
                }
LABEL_116:
                PBReaderRecallMark(a2, &v69);
              }
              else
              {
                v63 = 0;
                v64 = 0;
                v65 = 0;
                while (1)
                {
                  v66 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  if (v66 == -1 || v66 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                    break;
                  v67 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66 + 1;
                  v65 |= (unint64_t)(v67 & 0x7F) << v63;
                  if ((v67 & 0x80) == 0)
                    goto LABEL_160;
                  v63 += 7;
                  v9 = v64++ >= 9;
                  if (v9)
                  {
                    v68 = 0;
                    goto LABEL_163;
                  }
                }
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_160:
                if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                  v68 = 0;
                else
                  v68 = v65;
LABEL_163:
                PBRepeatedInt32Add(a1 + 8, v68);
              }
LABEL_150:
              if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              continue;
            case 0x20u:
              v57 = 0;
              v58 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 144) |= 0x80u;
              while (2)
              {
                v59 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v59 == -1 || v59 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v60 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v59 + 1;
                  v17 |= (unint64_t)(v60 & 0x7F) << v57;
                  if (v60 < 0)
                  {
                    v57 += 7;
                    v9 = v58++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_148;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v17) = 0;
LABEL_148:
              v62 = 128;
LABEL_149:
              *(_DWORD *)(a1 + v62) = v17;
              goto LABEL_150;
            case 0x21u:
              v61 = objc_alloc_init(ALSMeta);

              *(_QWORD *)(a1 + 72) = v61;
              v69 = 0;
              v70 = 0;
              if (PBReaderPlaceMark(a2, &v69) && sub_10117DA78((uint64_t)v61, a2))
                goto LABEL_116;
              return 0;
            default:
              if ((PBReaderSkipValueWithTag(a2) & 1) != 0)
                goto LABEL_150;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100F08A7C(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  unint64_t v12;
  ALSCdmaCellTower *v13;
  ALSCellTower *v14;
  ALSLteCellTower *v15;
  ALSScdmaCellTower *v16;
  ALSNr5GCellTower *v17;
  ALSWirelessAP *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    switch((v6 >> 3))
    {
      case 0x15u:
        v13 = objc_alloc_init(ALSCdmaCellTower);
        objc_msgSend(a1, "addCdmaCellTower:", v13);

        v20 = 0;
        v21 = 0;
        if (PBReaderPlaceMark(a2, &v20) && (sub_100EDC410((uint64_t)v13, a2) & 1) != 0)
          goto LABEL_37;
        return 0;
      case 0x16u:
        v15 = objc_alloc_init(ALSLteCellTower);
        objc_msgSend(a1, "addLteCellTower:", v15);

        v20 = 0;
        v21 = 0;
        if (!PBReaderPlaceMark(a2, &v20) || (sub_100F0B28C((uint64_t)v15, a2) & 1) == 0)
          return 0;
        goto LABEL_37;
      case 0x17u:
        v16 = objc_alloc_init(ALSScdmaCellTower);
        objc_msgSend(a1, "addScdmaCellTower:", v16);

        v20 = 0;
        v21 = 0;
        if (!PBReaderPlaceMark(a2, &v20) || (sub_1012FBA18((uint64_t)v16, a2) & 1) == 0)
          return 0;
        goto LABEL_37;
      case 0x18u:
        v17 = objc_alloc_init(ALSNr5GCellTower);
        objc_msgSend(a1, "addNr5GCellTower:", v17);

        v20 = 0;
        v21 = 0;
        if (!PBReaderPlaceMark(a2, &v20) || (sub_1014626D4((uint64_t)v17, a2) & 1) == 0)
          return 0;
        goto LABEL_37;
      default:
        if ((_DWORD)v12 != 2)
        {
          if ((_DWORD)v12 == 1)
          {
            v14 = objc_alloc_init(ALSCellTower);
            objc_msgSend(a1, "addCellTower:", v14);

            v20 = 0;
            v21 = 0;
            if (!PBReaderPlaceMark(a2, &v20) || (sub_100EFFFE8((uint64_t)v14, a2) & 1) == 0)
              return 0;
            goto LABEL_37;
          }
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
LABEL_38:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        v18 = objc_alloc_init(ALSWirelessAP);
        objc_msgSend(a1, "addWirelessAP:", v18);

        v20 = 0;
        v21 = 0;
        if (PBReaderPlaceMark(a2, &v20) && (sub_100F52C68((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_37:
          PBReaderRecallMark(a2, &v20);
          goto LABEL_38;
        }
        return 0;
    }
  }
}

void sub_100F0A044(uint64_t a1, uint64_t a2)
{
  NSDictionary *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = CMVO2MaxRetrocomputeRecord;
  v5 = a2;
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_100F0A5D4(a1, &v3);
}

uint64_t sub_100F0A108(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v6;

  *(_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5) = off_102192208;
  *(_QWORD *)(a1 + 48) = -[CLVO2MaxSubscriptionAdapter initWithSubscription:]([CLVO2MaxSubscriptionAdapter alloc], "initWithSubscription:", a1);
  *(_QWORD *)(a1 + 56) = 0;
  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLVO2MaxService"));
  *(_QWORD *)(a1 + 56) = v6;
  objc_msgSend(v6, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 8), "silo"));
  return a1;
}

void sub_100F0A194(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F0A1AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_102192208;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return sub_10002FA68(a1);
}

void sub_100F0A200(uint64_t a1)
{
  sub_100F0A1AC(a1);
  operator delete();
}

_QWORD *sub_100F0A224@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  void *__p[2];
  char v9;
  _BYTE v10[24];
  _BYTE *v11;

  v6[0] = off_102192288;
  v6[1] = sub_100F0A380;
  v6[2] = 0;
  v7 = v6;
  sub_1015A2E04(__p, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
  sub_100BBDBC0((uint64_t)v10, (uint64_t)v6);
  sub_100F0AA0C(a1, (unsigned __int8 *)__p, 1);
  v2 = v11;
  if (v11 == v10)
  {
    v3 = 4;
    v2 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100F0A334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;

  sub_1004E21A4((uint64_t)&a13);
  v14 = a12;
  if (a12 == &a9)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100F0A380(_QWORD *a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  _QWORD *v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  int v23;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102192258);
  v5 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[3];
    *(_DWORD *)buf = 138412802;
    v19 = v6;
    v20 = 2048;
    v21 = a1;
    v22 = 1024;
    v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "VO2Max Retrocompute Status, Subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102192258);
    v9 = a1[3];
    v12 = 138412802;
    v13 = v9;
    v14 = 2048;
    v15 = a1;
    v16 = 1024;
    v17 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "VO2Max Retrocompute Status, Subscription changed, %@, %p, %d", &v12, 28);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxSubscription::handleRequestVO2MaxRetrocomputeStatusUpdate(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1001A638C((uint64_t)a1);
  v8 = a1[6];
  v7 = (void *)a1[7];
  if (a2)
    objc_msgSend(v7, "registerForRetrocomputeStatusUpdates:", v8);
  else
    objc_msgSend(v7, "unregisterForRetrocomputeStatusUpdates:", v8);

}

void sub_100F0A5A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100F0A5D4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102192328, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100F0A668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F0A67C(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

__n128 sub_100F0A6A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102192288;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F0A6E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102192288;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F0A708(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100F0A758(a1 + 8, a2, a3);
}

uint64_t sub_100F0A710(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F0A74C()
{
}

void sub_100F0A758(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100F0A7DC(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100F0A7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0A7DC(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021922F8);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021922F8);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100F0A9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100F0A9E0(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100F0AA0C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100F0AA84(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100F0AA70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F0AA84(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100F0AD04(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100F0ACEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F0AD04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100F0AD78(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100F0AD60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F0AD78(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F0ADD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0B28C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  ALSLocation *v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _QWORD v40[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_66;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_68;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_68:
        v39 = 24;
        goto LABEL_89;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_72:
        v39 = 28;
        goto LABEL_89;
      case 3u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_76:
        v39 = 8;
        goto LABEL_89;
      case 4u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 0x10u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_80:
        v39 = 36;
        goto LABEL_89;
      case 5u:
        v30 = objc_alloc_init(ALSLocation);

        *(_QWORD *)(a1 + 16) = v30;
        v40[0] = 0;
        v40[1] = 0;
        if (PBReaderPlaceMark(a2, v40) && (sub_100F02DFC((uint64_t)v30, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v40);
LABEL_90:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      case 6u:
        v31 = 0;
        v32 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 0x20u;
        while (2)
        {
          v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v14 |= (unint64_t)(v34 & 0x7F) << v31;
            if (v34 < 0)
            {
              v31 += 7;
              v9 = v32++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_84:
        v39 = 40;
        goto LABEL_89;
      case 7u:
        v35 = 0;
        v36 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 8u;
        while (2)
        {
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v14 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_88:
        v39 = 32;
LABEL_89:
        *(_DWORD *)(a1 + v39) = v14;
        goto LABEL_90;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
    }
  }
}

void sub_100F0C048(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  _WORD v13[8];
  uint8_t buf[8];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 852;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0xFFFF;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v12 = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_OWORD *)(a1 + 84) = _Q0;
  *(_OWORD *)(a1 + 100) = _Q0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 148) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 156) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  sub_10012A33C(a1 + 192);
  *(_DWORD *)(a1 + 832) = 0xFFFF;
  *(_QWORD *)(a1 + 844) = 0;
  *(_QWORD *)(a1 + 836) = 0;
  *(_OWORD *)v3 = xmmword_101BAFC90;
  *(_OWORD *)(v3 + 16) = v12;
  *(_OWORD *)(v3 + 32) = v12;
  *(_OWORD *)(v3 + 48) = v12;
  *(_DWORD *)(a1 + 916) = 0;
  *(_QWORD *)(a1 + 920) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 0;
  *(_QWORD *)(v3 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 956) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  sub_1002433B8(a1 + 1000);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#GnssRefLocationCache,initializing CLGnssRefLocationCache", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssRefLocationCache,initializing CLGnssRefLocationCache", v13, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CLGnssRefLocationCache::CLGnssRefLocationCache(id<CLIntersiloUniverse>)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1006AA544();
}

void sub_100F0C530(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  sub_100261F44(v1 + 712);
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void sub_100F0C590(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssRefLocationCache::onStreamedLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192350);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefLocationCache::onStreamedLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192350);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefLocationCache::onStreamedLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100F0C9B8((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100F0C748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0C76C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#GnssRefLocationCache,CLGnssRefLocationCache destructor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefLocationCache,CLGnssRefLocationCache destructor", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CLGnssRefLocationCache::~CLGnssRefLocationCache()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 5);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), 33);
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 5);
  sub_100261F44(a1 + 712);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_100F0C970(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100F0C9B8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  int v28;
  _BYTE v29[96];
  __int128 v30;
  __int128 v31;
  _BYTE v32[28];
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_DWORD *)(a4 + 96);
    *(_QWORD *)v29 = 68289282;
    *(_WORD *)&v29[8] = 2082;
    *(_QWORD *)&v29[10] = "";
    *(_WORD *)&v29[18] = 1026;
    *(_DWORD *)&v29[20] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Streamed location notification received\", \"type\":%{public}d}", v29, 0x18u);
  }
  if (*a3 == 5)
  {
    *(_DWORD *)v29 = 0xFFFF;
    *(_OWORD *)&v29[4] = 0uLL;
    *(_OWORD *)&v29[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v29[36] = _Q0;
    *(_OWORD *)&v29[52] = _Q0;
    *(_OWORD *)&v29[68] = _Q0;
    *(_DWORD *)&v29[84] = 0;
    v30 = 0uLL;
    *(_QWORD *)&v29[88] = 0xBFF0000000000000;
    LODWORD(v31) = 0;
    *(_QWORD *)((char *)&v31 + 4) = 0xBFF0000000000000;
    HIDWORD(v31) = 0x7FFFFFFF;
    memset(v32, 0, 25);
    sub_10012A33C(&v33);
    v14 = *(_OWORD *)(a4 + 112);
    v30 = *(_OWORD *)(a4 + 96);
    v31 = v14;
    *(_OWORD *)v32 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v32[12] = *(_OWORD *)(a4 + 140);
    v15 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&v29[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v29[48] = v15;
    v16 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&v29[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v29[80] = v16;
    v17 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v29 = *(_OWORD *)a4;
    *(_OWORD *)&v29[16] = v17;
    memcpy(v18, (const void *)(a4 + 160), 0x201uLL);
    sub_100349198(&v34, (uint64_t *)(a4 + 680));
    v19 = *(_OWORD *)(a4 + 776);
    v40 = *(_OWORD *)(a4 + 760);
    v41 = v19;
    v20 = *(_OWORD *)(a4 + 712);
    v36 = *(_OWORD *)(a4 + 696);
    v37 = v20;
    v21 = *(_OWORD *)(a4 + 744);
    v38 = *(_OWORD *)(a4 + 728);
    v39 = v21;
    v42 = *(_BYTE *)(a4 + 792);
    sub_10014048C(a1, (uint64_t)v29);
    v22 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v25 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v26 = *a3;
      *(_DWORD *)v29 = 68289282;
      *(_DWORD *)&v29[4] = 0;
      *(_WORD *)&v29[8] = 2082;
      *(_QWORD *)&v29[10] = "";
      *(_WORD *)&v29[18] = 1026;
      *(_DWORD *)&v29[20] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssRefLocationCache, Unhandled notification\", \"notification\":%{public}d}", v29, 0x18u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102192330);
    }
    v27 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v28 = *a3;
      *(_DWORD *)v29 = 68289282;
      *(_DWORD *)&v29[4] = 0;
      *(_WORD *)&v29[8] = 2082;
      *(_QWORD *)&v29[10] = "";
      *(_WORD *)&v29[18] = 1026;
      *(_DWORD *)&v29[20] = v28;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssRefLocationCache, Unhandled notification", "{\"msg%{public}.0s\":\"#GnssRefLocationCache, Unhandled notification\", \"notification\":%{public}d}", v29, 0x18u);
    }
  }
}

void sub_100F0CD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100F0CD30(uint64_t a1, char a2)
{
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  *(_BYTE *)(a1 + 24) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 24);
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#GnssRefLocationCache,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v5 = *(unsigned __int8 *)(a1 + 24);
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssRefLocationCache,fIsAirborne,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssRefLocationCache::feedAirborneActivity(const BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_100F0CEE4(uint64_t a1, uint64_t a2)
{
  double v2;
  double v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  double v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  double v15;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;

  v2 = *(double *)(a1 + 68);
  if (v2 > 0.0 && *(double *)(a2 + 36) <= 0.0)
  {
    v4 = *(double *)(a2 + 76) - *(double *)(a1 + 108);
    if (v4 >= 0.0)
    {
      *(_QWORD *)(a2 + 28) = *(_QWORD *)(a1 + 60);
      *(double *)(a2 + 36) = sqrt(v4 * v4 + v2 * v2);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102192330);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(_QWORD *)(a2 + 36);
        *(_DWORD *)buf = 134349568;
        v17 = v2;
        v18 = 2050;
        v19 = v6;
        v20 = 2050;
        v21 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,populateAltitudeFromCache,Vunc,%{public}.1lf,PropVUnc,%{public}.1lf,PropDur,%{public}.1lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v7 = *(_QWORD *)(a2 + 36);
        v10 = 134349568;
        v11 = v2;
        v12 = 2050;
        v13 = v7;
        v14 = 2050;
        v15 = v4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,populateAltitudeFromCache,Vunc,%{public}.1lf,PropVUnc,%{public}.1lf,PropDur,%{public}.1lf", &v10, 32);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefLocationCache::populateAltitudeFromCache(CLDaemonLocation &)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
  }
}

void sub_100F0D108(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _BYTE v18[48];
  __int128 v19;
  _BYTE v20[32];
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  _BYTE v24[513];
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  uint64_t buf;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v4 = *(_OWORD *)(a2 + 112);
  v21 = *(_OWORD *)(a2 + 96);
  v22 = v4;
  v23[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)(a2 + 140);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v18[32] = *(_OWORD *)(a2 + 32);
  v19 = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v20[16] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v18 = *(_OWORD *)a2;
  *(_OWORD *)&v18[16] = v7;
  memcpy(v24, (const void *)(a2 + 160), sizeof(v24));
  v25 = *(_QWORD *)(a2 + 680);
  v8 = *(std::__shared_weak_count **)(a2 + 688);
  v26 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(_OWORD *)(a2 + 776);
  v31 = *(_OWORD *)(a2 + 760);
  v32 = v11;
  v12 = *(_OWORD *)(a2 + 712);
  v27 = *(_OWORD *)(a2 + 696);
  v28 = v12;
  v13 = *(_OWORD *)(a2 + 744);
  v29 = *(_OWORD *)(a2 + 728);
  v30 = v13;
  v33 = *(_BYTE *)(a2 + 792);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(a1 + 108);
    buf = 68291075;
    v35 = 2082;
    v36 = "";
    v37 = 1026;
    v38 = v21;
    v39 = 2050;
    v40 = *(_QWORD *)&v20[12];
    v41 = 2050;
    v42 = v15;
    v43 = 2049;
    v44 = *(_QWORD *)&v18[4];
    v45 = 2049;
    v46 = *(_QWORD *)&v18[12];
    v47 = 2050;
    v48 = *(_QWORD *)&v18[20];
    v49 = 2049;
    v50 = *(_QWORD *)&v18[28];
    v51 = 2050;
    v52 = *(_QWORD *)&v18[36];
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,feedRefLocationFromRefPosMaintenance\", \"type\":%{public}d, \"timestamp\":\"%{public}.1f\", \"cacheTimestamp\":\"%{public}.1f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{private}.2f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)&buf, 0x5Eu);
  }
  if (*(double *)&v20[12] > *(double *)(a1 + 108))
  {
    sub_10014048C(a1, (uint64_t)v18);
    v8 = v26;
  }
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_100F0D354(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

double sub_100F0D368(uint64_t a1)
{
  NSObject *v2;
  double result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGnssRefLocationCache, Clearing all cached location information\"}", (uint8_t *)v9, 0x12u);
  }
  sub_10021CBD4(a1 + 32);
  *(_DWORD *)(a1 + 832) = 0xFFFF;
  *(_QWORD *)(a1 + 844) = 0;
  *(_QWORD *)(a1 + 836) = 0;
  result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 852) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 868) = _Q1;
  *(_OWORD *)(a1 + 884) = _Q1;
  *(_OWORD *)(a1 + 900) = _Q1;
  *(_DWORD *)(a1 + 916) = 0;
  *(_QWORD *)(a1 + 920) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 948) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 956) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  return result;
}

void sub_100F0D4B4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100F0D4E0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F0D50C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C2EDD8;
      v1[3] = unk_101C2EDE8;
      v1[4] = xmmword_101C2EDF8;
      v1[0] = xmmword_101C2EDB8;
      v1[1] = unk_101C2EDC8;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100F0D5E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

id sub_100F0D5F8(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionNotification:data:", *a2, *a3);
}

void sub_100F0D964(id a1, HKQuantityDatum *a2, NSError *a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102192450);
    v3 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to get pressure measurement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102192450);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "HKDataCollector, failed to get pressure measurement", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "-[CLSubmersionDataCollector startUnlocked]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100F0DAEC(id a1, HKQuantityDatum *a2, NSError *a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102192450);
    v3 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to get temperature measurement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102192450);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "HKDataCollector, failed to get temperature measurement", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "-[CLSubmersionDataCollector startUnlocked]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100F0E858(id a1, BOOL a2, NSError *a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSError *v8;
  uint8_t buf[4];
  NSError *v10;

  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102192450);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to insertDatums for depth, error: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102192450);
      v7 = 138412290;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "HKDataCollector, failed to insertDatums for depth, error: %@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLSubmersionDataCollector collectWithSubmersionQuantities:shouldLog:]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100F0EA04(id a1, BOOL a2, NSError *a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSError *v8;
  uint8_t buf[4];
  NSError *v10;

  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102192450);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to insertDatums for temperature, error: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102192450);
      v7 = 138412290;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "HKDataCollector, failed to insertDatums for temperature, error: %@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLSubmersionDataCollector collectWithSubmersionQuantities:shouldLog:]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100F0EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F0EED8(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100F100E0(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_100F0F340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F0F524(id a1, BOOL a2, NSError *a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSError *v8;
  uint8_t buf[4];
  NSError *v10;

  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102192450);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to finish with completion, error, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102192450);
      v7 = 138543362;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "failed to finish with completion, error, %{public}@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLSubmersionDataCollector finishUnlocked]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100F0F6D0(id a1, BOOL a2, NSError *a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSError *v8;
  uint8_t buf[4];
  NSError *v10;

  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102192450);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to finish with completion for temp, error, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102192450);
      v7 = 138543362;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "failed to finish with completion for temp, error, %{public}@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLSubmersionDataCollector finishUnlocked]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100F0FF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_1006F0FB8(&a11);
  _Unwind_Resume(a1);
}

void sub_100F10050(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100F1007C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102192480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F10090(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102192480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

int64x2_t sub_100F100C4(int64x2_t *a1)
{
  int64x2_t result;

  a1[4].i64[0] = 0x7FEFFFFFFFFFFFFFLL;
  a1[1].i8[8] = 0;
  result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[2] = result;
  a1[3] = result;
  return result;
}

void sub_100F100E0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F103A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F103F4(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    v8 = (_QWORD *)(*(_QWORD *)v7 + 16 * v4);
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 8));
    v11 = (_QWORD *)(*(_QWORD *)v10 + 16 * v9);
  }
  sub_100F10494((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100F10480(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F10494(_QWORD *a1, char *a2, _QWORD *a3, char *a4, _QWORD *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(_QWORD *)a2) >> 4);
  return sub_100F104C8(a1, a2, a3, v5);
}

_QWORD *sub_100F104C8(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 32 * (v9 - v8) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F10618(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 16 * v11;
  v24[0] = v8 + 8 * (v11 >> 8);
  v24[1] = v14;
  result = sub_1004CE854((uint64_t)v24, a4);
  while (v14 != v16)
  {
    v17 = (_QWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_QWORD *)v14 == v17)
    {
      v17 = (_QWORD *)v14;
    }
    else
    {
      v18 = (_QWORD *)v14;
      do
      {
        *v18 = *a3;
        v19 = a3[1];
        v18[1] = v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        a3 += 2;
        if ((_QWORD *)((char *)a3 - *a2) == (_QWORD *)4096)
        {
          v22 = (_QWORD *)a2[1];
          ++a2;
          a3 = v22;
        }
        v18 += 2;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result)
      break;
    v23 = v13[1];
    ++v13;
    v14 = v23;
  }
  return result;
}

void sub_100F10618(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = a1[4];
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 255;
          else
            v64 = 256;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F10B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F10BA0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int *v36;
  char v37;
  char v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  uint64_t v43;
  __int128 v45[3];
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint8_t buf[8];
  _BYTE v53[10];
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v12 = (std::__shared_weak_count *)a4[1];
  v50 = *a4;
  v51 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a5[1];
  v48 = *a5;
  v49 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (std::__shared_weak_count *)a6[1];
  v46 = *a6;
  v47 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v45[0] = xmmword_1023090E8;
  v45[1] = unk_1023090F8;
  v45[2] = xmmword_102309108;
  sub_100D04860(a1, a2, 1, &v50, &v48, &v46, a9, a8, v45);
  v21 = v47;
  if (v47)
  {
    v22 = (unint64_t *)&v47->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v49;
  if (v49)
  {
    v25 = (unint64_t *)&v49->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v51;
  if (v51)
  {
    v28 = (unint64_t *)&v51->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)a1 = off_1021924D0;
  *(_QWORD *)(a1 + 352) = *a3;
  v30 = a3[1];
  *(_QWORD *)(a1 + 360) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *(_QWORD *)(a1 + 368) = *a7;
  v33 = a7[1];
  *(_QWORD *)(a1 + 376) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_DWORD *)(a1 + 392) = 500;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 432) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 440) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 448) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 456) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 464) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 472) = objc_opt_new(NSDictionary);
  *(_QWORD *)(a1 + 480) = objc_opt_new(NSDictionary);
  *(_BYTE *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = objc_opt_new(NSDictionary);
  *(_QWORD *)(a1 + 504) = objc_opt_new(NSDictionary);
  *(_BYTE *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 536) = 0;
  *(_WORD *)(a1 + 544) = 0;
  sub_1001E4804(buf);
  v36 = (int *)(a1 + 392);
  v37 = sub_1001E4B84(*(uint64_t *)buf, "MaxHarvestCells", (_DWORD *)(a1 + 392));
  v38 = v37;
  v39 = *(std::__shared_weak_count **)v53;
  if (!*(_QWORD *)v53)
    goto LABEL_35;
  v40 = (unint64_t *)(*(_QWORD *)v53 + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_35:
    if ((v37 & 1) != 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if ((v38 & 1) == 0)
LABEL_36:
    *v36 = 500;
LABEL_37:
  *(_QWORD *)(a1 + 384) = objc_msgSend(*(id *)(a1 + 72), "classifyingStoreForHarvester:", 1);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v42 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v43 = *v36;
    *(_QWORD *)buf = 68289539;
    *(_WORD *)v53 = 2082;
    *(_QWORD *)&v53[2] = "";
    v54 = 2050;
    v55 = 1;
    v56 = 2049;
    v57 = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxHarvestPointCount\":%{private}lu}", buf, 0x26u);
  }
  *(_QWORD *)(a1 + 520) = 0;
  return a1;
}

void sub_100F10F78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2 - 80);
  sub_100261F44(v1 + 368);
  sub_100261F44(v1 + 352);
  sub_100429668(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F10FD4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  return sub_100F10BA0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100F10FE0(id *a1)
{

  a1[59] = 0;
  a1[62] = 0;

  a1[60] = 0;
  a1[63] = 0;
}

id sub_100F1105C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 384), "count");
}

uint64_t sub_100F11064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  sub_100119F3C(v11);
  v4 = a1 + 280;
  v5 = unk_1023090F8;
  *(_OWORD *)v4 = xmmword_1023090E8;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 25) = unk_102309101;
  if (sub_100006BB4(a2, "Cell", v11))
    sub_1011E7A6C(v4, (uint64_t)v11);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_1011E7898((double *)v4, __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = 1;
    v18 = 2081;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return sub_10011A5A8(v11);
}

void sub_100F111E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F11208()
{
  unsigned __int8 v0;
  unsigned int v2;

  v0 = atomic_load((unsigned __int8 *)&qword_102309120);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309120))
  {
    sub_100197040();
    if ((sub_1001B796C() & 1) != 0)
    {
      sub_100197040();
      v2 = (sub_1001B796C() >> 3) & 1;
    }
    else
    {
      LOBYTE(v2) = 0;
    }
    byte_102309118 = v2;
    __cxa_guard_release(&qword_102309120);
  }
  return byte_102309118;
}

void sub_100F1127C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102309120);
  _Unwind_Resume(a1);
}

void sub_100F11294(uint64_t a1)
{
  id v2;
  CLHUploadRequest *v3;
  id v4;
  CLHUploadRequest *v5;
  id v6;
  id v7;
  void *v8;
  CLHUploadRequest *v9;
  id v10;

  v10 = objc_alloc_init((Class)CLPCellWifiCollectionRequest);
  objc_msgSend(v10, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
  v2 = objc_msgSend(*(id *)(a1 + 384), "homeArchive");
  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(v2, "overwritePrimaryObject:", v10);
    v3 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", v2);
    -[CLHUploadRequest setEndpoint:](v3, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint"));
    objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v3);

  }
  v4 = objc_msgSend(*(id *)(a1 + 384), "workArchive");
  if (objc_msgSend(v4, "count"))
  {
    objc_msgSend(v4, "overwritePrimaryObject:", v10);
    v5 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", v4);
    -[CLHUploadRequest setEndpoint:](v5, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint"));
    objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v5);

  }
  v6 = objc_msgSend(*(id *)(a1 + 384), "mainArchive");
  v7 = objc_msgSend(v6, "count");
  v8 = v10;
  if (v7)
  {
    objc_msgSend(v6, "overwritePrimaryObject:", v10);
    v9 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", v6);
    -[CLHUploadRequest setEndpoint:](v9, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint"));
    objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v9);

    v8 = v10;
  }

}

uint64_t sub_100F11408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 4);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 2);
  return 1;
}

uint64_t sub_100F1146C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3, 4);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5, 2);
}

void sub_100F114C8(uint64_t a1, int *a2, id *a3)
{
  const void *v5;
  id v6;
  id v7;
  NSObject *v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;

  v5 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(v5, CFSTR("kSimInfoChangedNotification")))
  {
    v6 = objc_msgSend(*a3, "objectForKey:", CFSTR("kSlotOne"));
    v7 = objc_msgSend(*a3, "objectForKey:", CFSTR("kSlotTwo"));
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v9[0] = 68289795;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2050;
      v13 = 1;
      v14 = 2113;
      v15 = v6;
      v16 = 2113;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim update sim info\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"SimOneInfo\":%{private, location:escape_only}@, \"SimTwoInfo\":%{private, location:escape_only}@}", (uint8_t *)v9, 0x30u);
    }
    if (v6)
    {

      *(_QWORD *)(a1 + 480) = v6;
    }
    if (v7)
    {

      *(_QWORD *)(a1 + 504) = v7;
    }
  }
}

void sub_100F11644(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  NSObject *v81;
  void **v82;
  NSObject *v83;
  void **v84;
  void *v87[2];
  char v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  CFArrayRef theArray;
  uint8_t v99[4];
  int v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  void **v106;
  uint8_t buf[80];
  int v108;
  void *v109;
  void *v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _OWORD v123[2];
  __int128 __p;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  int v148;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290051;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 1;
    *(_WORD *)&buf[28] = 1026;
    *(_DWORD *)&buf[30] = a3;
    *(_WORD *)&buf[34] = 1040;
    *(_DWORD *)&buf[36] = 156;
    *(_WORD *)&buf[40] = 2097;
    *(_QWORD *)&buf[42] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim performCellHarvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"SimInstance\":%{public}u, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x32u);
  }
  if ((sub_100F122F8(a1) & 1) == 0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skip from performCellHarvesting, isCellHarvesting not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    return;
  }
  theArray = 0;
  if ((_DWORD)a3 == 1)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 496);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim performCellHarvesting\", \"CellInfoSimTwo\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1001DC4C0(buf, *(_QWORD *)(a1 + 496));
    sub_1001DC284((id *)&theArray, (id *)buf);
    goto LABEL_22;
  }
  if (!(_DWORD)a3)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a1 + 472);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim performCellHarvesting\", \"CellInfoSimOne\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1001DC4C0(buf, *(_QWORD *)(a1 + 472));
    sub_1001DC284((id *)&theArray, (id *)buf);
LABEL_22:
    sub_1001DC534(buf);
  }
  v95 = 0;
  v96 = 0;
  v97 = 0;
  sub_1001C2218(&v95, theArray, 1);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v10 = v95;
  for (i = v96; v10 != i; v10 += 696)
  {
    *(_OWORD *)buf = *(_OWORD *)v10;
    v12 = *(_OWORD *)(v10 + 16);
    v13 = *(_OWORD *)(v10 + 32);
    v14 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)&buf[60] = *(_OWORD *)(v10 + 60);
    *(_OWORD *)&buf[32] = v13;
    *(_OWORD *)&buf[48] = v14;
    *(_OWORD *)&buf[16] = v12;
    v108 = *(_DWORD *)(v10 + 80);
    v110 = 0;
    v111 = 0;
    v109 = 0;
    sub_10027205C(&v109, *(const void **)(v10 + 88), *(_QWORD *)(v10 + 96), (uint64_t)(*(_QWORD *)(v10 + 96) - *(_QWORD *)(v10 + 88)) >> 2);
    v112 = *(_OWORD *)(v10 + 112);
    v15 = *(_OWORD *)(v10 + 128);
    v16 = *(_OWORD *)(v10 + 144);
    v17 = *(_OWORD *)(v10 + 176);
    v115 = *(_OWORD *)(v10 + 160);
    v116 = v17;
    v113 = v15;
    v114 = v16;
    v18 = *(_OWORD *)(v10 + 192);
    v19 = *(_OWORD *)(v10 + 208);
    v20 = *(_OWORD *)(v10 + 240);
    v119 = *(_OWORD *)(v10 + 224);
    v120 = v20;
    v117 = v18;
    v118 = v19;
    v21 = *(_OWORD *)(v10 + 256);
    v22 = *(_OWORD *)(v10 + 272);
    v23 = *(_OWORD *)(v10 + 288);
    *(_OWORD *)((char *)v123 + 12) = *(_OWORD *)(v10 + 300);
    v122 = v22;
    v123[0] = v23;
    v121 = v21;
    if (*(char *)(v10 + 343) < 0)
    {
      sub_100115CE4(&__p, *(void **)(v10 + 320), *(_QWORD *)(v10 + 328));
    }
    else
    {
      v24 = *(_OWORD *)(v10 + 320);
      v125 = *(_QWORD *)(v10 + 336);
      __p = v24;
    }
    v25 = *(_OWORD *)(v10 + 344);
    v26 = *(_OWORD *)(v10 + 376);
    v127 = *(_OWORD *)(v10 + 360);
    v128 = v26;
    v126 = v25;
    v27 = *(_OWORD *)(v10 + 392);
    v28 = *(_OWORD *)(v10 + 408);
    v29 = *(_OWORD *)(v10 + 440);
    v131 = *(_OWORD *)(v10 + 424);
    v132 = v29;
    v129 = v27;
    v130 = v28;
    v30 = *(_OWORD *)(v10 + 456);
    v31 = *(_OWORD *)(v10 + 472);
    v32 = *(_OWORD *)(v10 + 488);
    v136 = *(_DWORD *)(v10 + 504);
    v134 = v31;
    v135 = v32;
    v133 = v30;
    v33 = *(_OWORD *)(v10 + 512);
    v34 = *(_OWORD *)(v10 + 528);
    v35 = *(_OWORD *)(v10 + 560);
    v139 = *(_OWORD *)(v10 + 544);
    v140 = v35;
    v137 = v33;
    v138 = v34;
    v36 = *(_OWORD *)(v10 + 576);
    v37 = *(_OWORD *)(v10 + 592);
    v38 = *(_OWORD *)(v10 + 624);
    v143 = *(_OWORD *)(v10 + 608);
    v144 = v38;
    v141 = v36;
    v142 = v37;
    v39 = *(_OWORD *)(v10 + 640);
    v40 = *(_OWORD *)(v10 + 656);
    v41 = *(_OWORD *)(v10 + 672);
    v148 = *(_DWORD *)(v10 + 688);
    v146 = v40;
    v147 = v41;
    v145 = v39;
    if (*(_DWORD *)&buf[4])
    {
      if (*(_DWORD *)&buf[4] == 1)
      {
        v42 = v90;
        if (v90 >= v91)
        {
          v43 = sub_1005A9E3C(&v89, (uint64_t)buf);
        }
        else
        {
          sub_1005A9F60((uint64_t)&v91, v90, (uint64_t)buf);
          v43 = v42 + 696;
        }
        v90 = v43;
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102192628);
        v46 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)v99 = 68289539;
          v100 = 0;
          v101 = 2082;
          v102 = "";
          v103 = 2050;
          v104 = 1;
          v105 = 1025;
          LODWORD(v106) = *(_DWORD *)&buf[4];
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected cell type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cellType\":%{private}d}", v99, 0x22u);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
        }
        v47 = qword_1022A0208;
        if (os_signpost_enabled((os_log_t)qword_1022A0208))
        {
          *(_DWORD *)v99 = 68289539;
          v100 = 0;
          v101 = 2082;
          v102 = "";
          v103 = 2050;
          v104 = 1;
          v105 = 1025;
          LODWORD(v106) = *(_DWORD *)&buf[4];
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected cell type", "{\"msg%{public}.0s\":\"Unexpected cell type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cellType\":%{private}d}", v99, 0x22u);
        }
      }
    }
    else
    {
      v44 = v93;
      if (v93 >= v94)
      {
        v45 = sub_1005A9E3C(&v92, (uint64_t)buf);
      }
      else
      {
        sub_1005A9F60((uint64_t)&v94, v93, (uint64_t)buf);
        v45 = v44 + 696;
      }
      v93 = v45;
    }
    if (SHIBYTE(v125) < 0)
      operator delete((void *)__p);
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v48 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = 1875962727 * ((v93 - v92) >> 3);
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = 1875962727 * ((v90 - v89) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim performCellHarvesting\", \"ServingCellsCount\":%{public}u, \"NeighborCellsCount\":%{public}u}", buf, 0x1Eu);
  }
  v50 = v92;
  v49 = v93;
  while (v50 != v49)
  {
    *(_OWORD *)buf = *(_OWORD *)v50;
    v51 = *(_OWORD *)(v50 + 16);
    v52 = *(_OWORD *)(v50 + 32);
    v53 = *(_OWORD *)(v50 + 48);
    *(_OWORD *)&buf[60] = *(_OWORD *)(v50 + 60);
    *(_OWORD *)&buf[32] = v52;
    *(_OWORD *)&buf[48] = v53;
    *(_OWORD *)&buf[16] = v51;
    v108 = *(_DWORD *)(v50 + 80);
    v110 = 0;
    v111 = 0;
    v109 = 0;
    sub_10027205C(&v109, *(const void **)(v50 + 88), *(_QWORD *)(v50 + 96), (uint64_t)(*(_QWORD *)(v50 + 96) - *(_QWORD *)(v50 + 88)) >> 2);
    v112 = *(_OWORD *)(v50 + 112);
    v54 = *(_OWORD *)(v50 + 128);
    v55 = *(_OWORD *)(v50 + 144);
    v56 = *(_OWORD *)(v50 + 176);
    v115 = *(_OWORD *)(v50 + 160);
    v116 = v56;
    v113 = v54;
    v114 = v55;
    v57 = *(_OWORD *)(v50 + 192);
    v58 = *(_OWORD *)(v50 + 208);
    v59 = *(_OWORD *)(v50 + 240);
    v119 = *(_OWORD *)(v50 + 224);
    v120 = v59;
    v117 = v57;
    v118 = v58;
    v60 = *(_OWORD *)(v50 + 256);
    v61 = *(_OWORD *)(v50 + 272);
    v62 = *(_OWORD *)(v50 + 288);
    *(_OWORD *)((char *)v123 + 12) = *(_OWORD *)(v50 + 300);
    v122 = v61;
    v123[0] = v62;
    v121 = v60;
    if (*(char *)(v50 + 343) < 0)
    {
      sub_100115CE4(&__p, *(void **)(v50 + 320), *(_QWORD *)(v50 + 328));
    }
    else
    {
      v63 = *(_OWORD *)(v50 + 320);
      v125 = *(_QWORD *)(v50 + 336);
      __p = v63;
    }
    v64 = *(_OWORD *)(v50 + 344);
    v65 = *(_OWORD *)(v50 + 376);
    v127 = *(_OWORD *)(v50 + 360);
    v128 = v65;
    v126 = v64;
    v66 = *(_OWORD *)(v50 + 392);
    v67 = *(_OWORD *)(v50 + 408);
    v68 = *(_OWORD *)(v50 + 440);
    v131 = *(_OWORD *)(v50 + 424);
    v132 = v68;
    v129 = v66;
    v130 = v67;
    v69 = *(_OWORD *)(v50 + 456);
    v70 = *(_OWORD *)(v50 + 472);
    v71 = *(_OWORD *)(v50 + 488);
    v136 = *(_DWORD *)(v50 + 504);
    v134 = v70;
    v135 = v71;
    v133 = v69;
    v72 = *(_OWORD *)(v50 + 512);
    v73 = *(_OWORD *)(v50 + 528);
    v74 = *(_OWORD *)(v50 + 560);
    v139 = *(_OWORD *)(v50 + 544);
    v140 = v74;
    v137 = v72;
    v138 = v73;
    v75 = *(_OWORD *)(v50 + 576);
    v76 = *(_OWORD *)(v50 + 592);
    v77 = *(_OWORD *)(v50 + 624);
    v143 = *(_OWORD *)(v50 + 608);
    v144 = v77;
    v141 = v75;
    v142 = v76;
    v78 = *(_OWORD *)(v50 + 640);
    v79 = *(_OWORD *)(v50 + 656);
    v80 = *(_OWORD *)(v50 + 672);
    v148 = *(_DWORD *)(v50 + 688);
    v146 = v79;
    v147 = v80;
    v145 = v78;
    if (*(_DWORD *)&buf[8] >= 3u)
    {
      if (*(_DWORD *)&buf[8] == 9)
      {
        sub_100F12CD0(a1, a2, (uint64_t)buf, &v89, a3);
        goto LABEL_61;
      }
      if (*(_DWORD *)&buf[8] != 7)
      {
        if ((*(_DWORD *)&buf[8] - 3) > 2)
        {
          if (*(_DWORD *)&buf[8] == 10)
          {
            sub_100F14764(a1, (uint64_t)a2, (uint64_t)buf, &v89, a3);
          }
          else if (*(_DWORD *)&buf[8] == 6)
          {
            sub_100F13BF8(a1, (uint64_t)a2, (uint64_t)buf, &v89, a3);
          }
          else
          {
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
            v81 = qword_1022A0208;
            if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
            {
              sub_101347C78((unsigned int *)buf, v87);
              v82 = v87;
              if (v88 < 0)
                v82 = (void **)v87[0];
              *(_DWORD *)v99 = 68289539;
              v100 = 0;
              v101 = 2082;
              v102 = "";
              v103 = 2050;
              v104 = 1;
              v105 = 2081;
              v106 = v82;
              _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", v99, 0x26u);
              if (v88 < 0)
                operator delete(v87[0]);
              if (qword_1022A0200 != -1)
                dispatch_once(&qword_1022A0200, &stru_102192628);
            }
            v83 = qword_1022A0208;
            if (os_signpost_enabled((os_log_t)qword_1022A0208))
            {
              sub_101347C78((unsigned int *)buf, v87);
              v84 = v87;
              if (v88 < 0)
                v84 = (void **)v87[0];
              *(_DWORD *)v99 = 68289539;
              v100 = 0;
              v101 = 2082;
              v102 = "";
              v103 = 2050;
              v104 = 1;
              v105 = 2081;
              v106 = v84;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to harvest cell", "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", v99, 0x26u);
              if (v88 < 0)
                operator delete(v87[0]);
            }
          }
        }
        else
        {
          sub_100F133F8(a1, a2, (uint64_t)buf, &v89, a3);
        }
        goto LABEL_61;
      }
    }
    sub_100F12458(a1, a2, (uint64_t)buf, &v89, a3);
LABEL_61:
    if (SHIBYTE(v125) < 0)
      operator delete((void *)__p);
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
    v50 += 696;
  }
  *(_QWORD *)buf = &v89;
  sub_10087B4F8((void ***)buf);
  *(_QWORD *)buf = &v92;
  sub_10087B4F8((void ***)buf);
  *(_QWORD *)buf = &v95;
  sub_10087B4F8((void ***)buf);
  sub_1001DC534(&theArray);
}

void sub_100F12230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  sub_1005A1100((uint64_t)&a35);
  a35 = &a19;
  sub_10087B4F8((void ***)&a35);
  a35 = &a22;
  sub_10087B4F8((void ***)&a35);
  a35 = &a25;
  sub_10087B4F8((void ***)&a35);
  sub_1001DC534(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100F122F8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  int v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int *v20;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 224))(*(_QWORD *)(a1 + 56));
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v3 = (v6 != 1) & ~v2;
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290307;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2050;
    v12 = 1;
    v13 = 1025;
    v14 = (v6 != 1) & ~v2;
    v15 = 1025;
    v16 = v2;
    v17 = 1040;
    v18 = 4;
    v19 = 2097;
    v20 = &v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cellHarvestingAllowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"isOkToHarvestCells\":%{private}hhd, \"hasActiveOrHeldCalls\":%{private}hhd, \"transmitStatus\":%{private, location:CLTelephonyService_Type::CellTransmitStatus}.*P}", buf, 0x38u);
  }
  return v3;
}

void sub_100F12458(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  double v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  id v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  void *i;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  id v56;
  uint64_t v57;
  NSObject *v58;
  char *v59;
  _QWORD v61[6];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[8];
  uint64_t v67;
  _OWORD v68[8];
  uint64_t v69;
  _OWORD v70[8];
  uint64_t v71;
  _OWORD v72[8];
  _OWORD v73[2];
  _WORD v74[8];
  uint8_t v75[128];
  uint8_t buf[4];
  int v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  const char *v83;

  v8 = (unsigned int *)sub_1007057DC(a3);
  v9 = *(_QWORD *)(a1 + 368);
  if (v9 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9))
  {
    (*(void (**)(_QWORD, unsigned int *, _OWORD *))(**(_QWORD **)(a1 + 352) + 168))(*(_QWORD *)(a1 + 352), v8, a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v10 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "GSM local harvesting not done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v74[0] = 0;
      v59 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "GSM local harvesting not done", v74, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellGSM(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v59);
      if (v59 != (char *)buf)
        free(v59);
    }
  }
  v11 = objc_alloc_init((Class)CLPCellTowerLocation);
  v12 = objc_alloc((Class)CLPLocation);
  v13 = a2[5];
  v72[4] = a2[4];
  v72[5] = v13;
  v14 = a2[3];
  v72[2] = a2[2];
  v72[3] = v14;
  *(_OWORD *)((char *)v73 + 12) = *(_OWORD *)((char *)a2 + 140);
  v15 = a2[8];
  v16 = a2[6];
  v72[7] = a2[7];
  v73[0] = v15;
  v72[6] = v16;
  v17 = a2[1];
  v72[0] = *a2;
  v72[1] = v17;
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
  v70[0] = *(_OWORD *)v18;
  v20 = *(_OWORD *)(v18 + 16);
  v19 = *(_OWORD *)(v18 + 32);
  v21 = *(_OWORD *)(v18 + 64);
  v70[3] = *(_OWORD *)(v18 + 48);
  v70[4] = v21;
  v70[1] = v20;
  v22 = *(_OWORD *)(v18 + 80);
  v23 = *(_OWORD *)(v18 + 96);
  v24 = *(_OWORD *)(v18 + 112);
  v71 = *(_QWORD *)(v18 + 128);
  v70[6] = v23;
  v70[7] = v24;
  v70[5] = v22;
  v70[2] = v19;
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
  v68[0] = *(_OWORD *)v25;
  v26 = *(_OWORD *)(v25 + 16);
  v27 = *(_OWORD *)(v25 + 32);
  v28 = *(_OWORD *)(v25 + 64);
  v68[3] = *(_OWORD *)(v25 + 48);
  v68[4] = v28;
  v68[1] = v26;
  v68[2] = v27;
  v29 = *(_OWORD *)(v25 + 80);
  v30 = *(_OWORD *)(v25 + 96);
  v31 = *(_OWORD *)(v25 + 112);
  v69 = *(_QWORD *)(v25 + 128);
  v68[6] = v30;
  v68[7] = v31;
  v68[5] = v29;
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
  v66[0] = *(_OWORD *)v32;
  v33 = *(_OWORD *)(v32 + 64);
  v35 = *(_OWORD *)(v32 + 16);
  v34 = *(_OWORD *)(v32 + 32);
  v66[3] = *(_OWORD *)(v32 + 48);
  v66[4] = v33;
  v66[1] = v35;
  v66[2] = v34;
  v37 = *(_OWORD *)(v32 + 96);
  v36 = *(_OWORD *)(v32 + 112);
  v38 = *(_OWORD *)(v32 + 80);
  v67 = *(_QWORD *)(v32 + 128);
  v66[6] = v37;
  v66[7] = v36;
  v66[5] = v38;
  v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 216))(*(_QWORD *)(a1 + 56));
  v40 = objc_msgSend(v12, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v72, v70, v68, v66, v39, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56)));
  objc_msgSend(v11, "setLocation:", v40);

  objc_msgSend(v11, "setMcc:", *v8);
  objc_msgSend(v11, "setMnc:", v8[1]);
  objc_msgSend(v11, "setLac:", v8[2]);
  objc_msgSend(v11, "setCi:", v8[3]);
  objc_msgSend(v11, "setArfcn:", v8[4]);
  objc_msgSend(v11, "setPsc:", v8[5]);
  objc_msgSend(v11, "setRat:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 56))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v11, "setTransmit:", (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352)));
  objc_msgSend(v11, "setRssi:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 120))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v11, "setOperatorName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 88))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v11, "setServiceProviderName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 104))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v11, "setIsLimitedService:", (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 32))(*(_QWORD *)(a1 + 352), a5) == 6);
  v41 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  if (v41 - *(double *)(a1 + 520) > 3600.0)
  {
    *(double *)(a1 + 520) = v41;
    objc_msgSend(v11, "setUniqueCount:", 1);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v42 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v77 = 0;
      v78 = 2082;
      v79 = "";
      v80 = 2050;
      v81 = 1;
      v82 = 2050;
      v83 = *(const char **)&v41;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Marked Unique - GSM\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"at\":\"%{public}f\"}", buf, 0x26u);
    }
  }
  v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 208))(*(_QWORD *)(a1 + 352));
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v44 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289538;
    v77 = 0;
    v78 = 2082;
    v79 = "";
    v80 = 2050;
    v81 = 1;
    v82 = 1026;
    LODWORD(v83) = v43;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WiFi Fallback for GSM\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"hasWiFiFallback\":%{public}hhd}", buf, 0x22u);
  }
  objc_msgSend(v11, "setHasWifiFallback:", v43);
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v45 = *(void **)(a1 + 464);
  v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v62, v75, 16);
  if (v46)
  {
    v47 = v46;
    v48 = 0;
    v49 = *(_QWORD *)v63;
    do
    {
      for (i = 0; i != v47; i = (char *)i + 1)
      {
        if (*(_QWORD *)v63 != v49)
          objc_enumerationMutation(v45);
        v51 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)i);
        v52 = objc_msgSend(v11, "mcc");
        if (v52 == objc_msgSend(v51, "mcc"))
        {
          v53 = objc_msgSend(v11, "mnc");
          if (v53 == objc_msgSend(v51, "mnc"))
          {
            v54 = objc_msgSend(v11, "lac");
            if (v54 == objc_msgSend(v51, "lac"))
            {
              v55 = objc_msgSend(v11, "ci");
              v48 += v55 == objc_msgSend(v51, "ci");
            }
          }
        }
      }
      v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v62, v75, 16);
    }
    while (v47);
  }
  else
  {
    v48 = 0;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
    || v48 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
  {
    v56 = sub_100F15C0C(a4, 0);
    objc_msgSend(v11, "setNeighborGroup:", v56);

    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    sub_100D05194(a1);
    v57 = *(_QWORD *)(a1 + 352);
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472;
    v61[2] = sub_100F16440;
    v61[3] = &unk_1021925A0;
    v61[4] = v11;
    v61[5] = a1;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v57 + 128))(v57, a5, v61);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v58 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v77 = 0;
      v78 = 2082;
      v79 = "";
      v80 = 2050;
      v81 = 1;
      v82 = 2081;
      v83 = "SCDMA";
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }

  }
}

void sub_100F12CD0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  void *i;
  void *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  id v53;
  uint64_t v54;
  const char *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint32_t v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[8];
  uint64_t v66;
  _OWORD v67[8];
  uint64_t v68;
  _OWORD v69[8];
  uint64_t v70;
  _OWORD v71[8];
  _OWORD v72[2];
  _WORD v73[8];
  uint8_t v74[128];
  uint8_t buf[4];
  int v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  id v84;

  v9 = (unsigned int *)sub_100706590(a3);
  v10 = *(_QWORD *)(a1 + 368);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10))
  {
    (*(void (**)(_QWORD, unsigned int *, _OWORD *))(**(_QWORD **)(a1 + 352) + 176))(*(_QWORD *)(a1 + 352), v9, a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v11 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "SCDMA local harvesting not done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v73[0] = 0;
      v60 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "SCDMA local harvesting not done", v73, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellScdma(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v60);
      if (v60 != (char *)buf)
        free(v60);
    }
  }
  v12 = objc_alloc_init((Class)CLPSCdmaCellTowerLocation);
  v13 = objc_alloc((Class)CLPLocation);
  v14 = a2[5];
  v71[4] = a2[4];
  v71[5] = v14;
  v15 = a2[3];
  v71[2] = a2[2];
  v71[3] = v15;
  *(_OWORD *)((char *)v72 + 12) = *(_OWORD *)((char *)a2 + 140);
  v16 = a2[8];
  v17 = a2[6];
  v71[7] = a2[7];
  v72[0] = v16;
  v71[6] = v17;
  v18 = a2[1];
  v71[0] = *a2;
  v71[1] = v18;
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
  v69[0] = *(_OWORD *)v19;
  v21 = *(_OWORD *)(v19 + 16);
  v20 = *(_OWORD *)(v19 + 32);
  v22 = *(_OWORD *)(v19 + 64);
  v69[3] = *(_OWORD *)(v19 + 48);
  v69[4] = v22;
  v69[1] = v21;
  v23 = *(_OWORD *)(v19 + 80);
  v24 = *(_OWORD *)(v19 + 96);
  v25 = *(_OWORD *)(v19 + 112);
  v70 = *(_QWORD *)(v19 + 128);
  v69[6] = v24;
  v69[7] = v25;
  v69[5] = v23;
  v69[2] = v20;
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
  v67[0] = *(_OWORD *)v26;
  v27 = *(_OWORD *)(v26 + 16);
  v28 = *(_OWORD *)(v26 + 32);
  v29 = *(_OWORD *)(v26 + 64);
  v67[3] = *(_OWORD *)(v26 + 48);
  v67[4] = v29;
  v67[1] = v27;
  v67[2] = v28;
  v30 = *(_OWORD *)(v26 + 80);
  v31 = *(_OWORD *)(v26 + 96);
  v32 = *(_OWORD *)(v26 + 112);
  v68 = *(_QWORD *)(v26 + 128);
  v67[6] = v31;
  v67[7] = v32;
  v67[5] = v30;
  v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
  v65[0] = *(_OWORD *)v33;
  v34 = *(_OWORD *)(v33 + 64);
  v36 = *(_OWORD *)(v33 + 16);
  v35 = *(_OWORD *)(v33 + 32);
  v65[3] = *(_OWORD *)(v33 + 48);
  v65[4] = v34;
  v65[1] = v36;
  v65[2] = v35;
  v38 = *(_OWORD *)(v33 + 96);
  v37 = *(_OWORD *)(v33 + 112);
  v39 = *(_OWORD *)(v33 + 80);
  v66 = *(_QWORD *)(v33 + 128);
  v65[6] = v38;
  v65[7] = v37;
  v65[5] = v39;
  v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 216))(*(_QWORD *)(a1 + 56));
  v41 = objc_msgSend(v13, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v71, v69, v67, v65, v40, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56)));
  objc_msgSend(v12, "setLocation:", v41);

  objc_msgSend(v12, "setMcc:", *v9);
  objc_msgSend(v12, "setMnc:", v9[1]);
  objc_msgSend(v12, "setLac:", v9[2]);
  objc_msgSend(v12, "setCi:", v9[3]);
  objc_msgSend(v12, "setEcn0:", v9[7]);
  objc_msgSend(v12, "setRscp:", v9[6]);
  objc_msgSend(v12, "setRssi:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 120))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v12, "setOperatorName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 88))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v12, "setServiceProviderName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 104))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v12, "setIsLimitedService:", (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 32))(*(_QWORD *)(a1 + 352), a5) == 6);
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v42 = *(void **)(a1 + 456);
  v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
  if (v43)
  {
    v44 = v43;
    v45 = 0;
    v46 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v44; i = (char *)i + 1)
      {
        if (*(_QWORD *)v62 != v46)
          objc_enumerationMutation(v42);
        v48 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
        v49 = objc_msgSend(v12, "mcc");
        if (v49 == objc_msgSend(v48, "mcc"))
        {
          v50 = objc_msgSend(v12, "mnc");
          if (v50 == objc_msgSend(v48, "mnc"))
          {
            v51 = objc_msgSend(v12, "lac");
            if (v51 == objc_msgSend(v48, "lac"))
            {
              v52 = objc_msgSend(v12, "ci");
              v45 += v52 == objc_msgSend(v48, "ci");
            }
          }
        }
      }
      v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
    }
    while (v44);
  }
  else
  {
    v45 = 0;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
    || v45 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
  {
    v53 = sub_100F15C0C(a4, 0);
    objc_msgSend(v12, "setNeighborGroup:", v53);

    objc_msgSend(*(id *)(a1 + 384), "writeSecondaryObject:collectedAt:toField:", v12, objc_msgSend(v12, "location"), 6);
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    sub_100D05194(a1);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v54 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289795;
      v76 = 0;
      v77 = 2082;
      v78 = "";
      v79 = 2050;
      v80 = 1;
      v81 = 2081;
      v82 = "SCDMA";
      v83 = 2113;
      v84 = v12;
      v55 = "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, "
            "\"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}";
      v56 = v54;
      v57 = OS_LOG_TYPE_DEBUG;
      v58 = 48;
LABEL_32:
      _os_log_impl((void *)&_mh_execute_header, v56, v57, v55, buf, v58);
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v59 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v76 = 0;
      v77 = 2082;
      v78 = "";
      v79 = 2050;
      v80 = 1;
      v81 = 2081;
      v82 = "SCDMA";
      v55 = "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, locati"
            "on:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}";
      v56 = v59;
      v57 = OS_LOG_TYPE_DEFAULT;
      v58 = 38;
      goto LABEL_32;
    }
  }

}

void sub_100F133F8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  double *v10;
  double *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  id v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  void *v48;
  id v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  void *i;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  id v60;
  uint64_t v61;
  const char *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint32_t v65;
  uint64_t v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[8];
  uint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  _OWORD v76[8];
  uint64_t v77;
  _OWORD v78[8];
  _OWORD v79[2];
  __int16 v80[8];
  uint8_t v81[128];
  uint8_t buf[4];
  int v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  id v91;

  v10 = (double *)sub_100704A28(a3);
  v11 = (double *)((char *)v10 + 268);
  if (*(_DWORD *)(a3 + 8) == 3)
  {
    v12 = *(_QWORD *)(a1 + 368);
    if (v12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 64))(v12))
    {
      (*(void (**)(_QWORD, double *, _OWORD *))(**(_QWORD **)(a1 + 352) + 192))(*(_QWORD *)(a1 + 352), v10, a2);
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v13 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CDMA local harvesting not done", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102192628);
        v80[0] = 0;
        v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "CDMA local harvesting not done", v80, 2);
        sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellCdma(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v67);
        if (v67 != (char *)buf)
          free(v67);
      }
    }
  }
  v14 = objc_alloc_init((Class)CLPCdmaCellTowerLocation);
  v15 = objc_alloc((Class)CLPLocation);
  v16 = a2[5];
  v78[4] = a2[4];
  v78[5] = v16;
  v17 = a2[3];
  v78[2] = a2[2];
  v78[3] = v17;
  *(_OWORD *)((char *)v79 + 12) = *(_OWORD *)((char *)a2 + 140);
  v18 = a2[8];
  v19 = a2[6];
  v78[7] = a2[7];
  v79[0] = v18;
  v78[6] = v19;
  v20 = a2[1];
  v78[0] = *a2;
  v78[1] = v20;
  v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
  v76[0] = *(_OWORD *)v21;
  v23 = *(_OWORD *)(v21 + 16);
  v22 = *(_OWORD *)(v21 + 32);
  v24 = *(_OWORD *)(v21 + 64);
  v76[3] = *(_OWORD *)(v21 + 48);
  v76[4] = v24;
  v76[1] = v23;
  v25 = *(_OWORD *)(v21 + 80);
  v26 = *(_OWORD *)(v21 + 96);
  v27 = *(_OWORD *)(v21 + 112);
  v77 = *(_QWORD *)(v21 + 128);
  v76[6] = v26;
  v76[7] = v27;
  v76[5] = v25;
  v76[2] = v22;
  v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
  v74[0] = *(_OWORD *)v28;
  v29 = *(_OWORD *)(v28 + 16);
  v30 = *(_OWORD *)(v28 + 32);
  v31 = *(_OWORD *)(v28 + 64);
  v74[3] = *(_OWORD *)(v28 + 48);
  v74[4] = v31;
  v74[1] = v29;
  v74[2] = v30;
  v32 = *(_OWORD *)(v28 + 80);
  v33 = *(_OWORD *)(v28 + 96);
  v34 = *(_OWORD *)(v28 + 112);
  v75 = *(_QWORD *)(v28 + 128);
  v74[6] = v33;
  v74[7] = v34;
  v74[5] = v32;
  v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
  v72[0] = *(_OWORD *)v35;
  v36 = *(_OWORD *)(v35 + 64);
  v38 = *(_OWORD *)(v35 + 16);
  v37 = *(_OWORD *)(v35 + 32);
  v72[3] = *(_OWORD *)(v35 + 48);
  v72[4] = v36;
  v72[1] = v38;
  v72[2] = v37;
  v40 = *(_OWORD *)(v35 + 96);
  v39 = *(_OWORD *)(v35 + 112);
  v41 = *(_OWORD *)(v35 + 80);
  v73 = *(_QWORD *)(v35 + 128);
  v72[6] = v40;
  v72[7] = v39;
  v72[5] = v41;
  v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 216))(*(_QWORD *)(a1 + 56));
  v43 = objc_msgSend(v15, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v78, v76, v74, v72, v42, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56)));
  objc_msgSend(v14, "setLocation:", v43);

  objc_msgSend(v14, "setMcc:", *(unsigned int *)v10);
  objc_msgSend(v14, "setMnc:", *((unsigned int *)v10 + 58));
  objc_msgSend(v14, "setSid:", *((unsigned int *)v10 + 8));
  objc_msgSend(v14, "setNid:", *((unsigned int *)v10 + 9));
  objc_msgSend(v14, "setBsid:", *((unsigned int *)v10 + 11));
  objc_msgSend(v14, "setBsLatitude:", v10[9]);
  objc_msgSend(v14, "setBsLongitude:", v10[10]);
  objc_msgSend(v14, "setZoneid:", *((unsigned int *)v10 + 10));
  v46 = (unsigned int *)*((_QWORD *)v10 + 30);
  v45 = (unsigned int *)(v10 + 30);
  v44 = v46;
  if (*((char *)v45 + 23) >= 0)
    v47 = v45;
  else
    v47 = v44;
  objc_msgSend(v14, "setSectorid:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v47));
  objc_msgSend(v14, "setSectorLatitude:", *v11);
  objc_msgSend(v14, "setSectorLongitude:", v11[1]);
  objc_msgSend(v14, "setBandclass:", *(v45 - 48));
  objc_msgSend(v14, "setRat:", *(v45 - 4));
  objc_msgSend(v14, "setCelltype:", *(v45 - 3));
  objc_msgSend(v14, "setPnoffset:", *(v45 - 46));
  objc_msgSend(v14, "setRscp:", *(v45 - 45));
  objc_msgSend(v14, "setEcn0:", *(v45 - 44));
  objc_msgSend(v14, "setChannel:", *(v45 - 47));
  objc_msgSend(v14, "setLtmOffset:", v45[45]);
  objc_msgSend(v14, "setDayLightSavings:", v45[46]);
  objc_msgSend(v14, "setOperatorName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 88))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v14, "setServiceProviderName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 104))(*(_QWORD *)(a1 + 352), a5));
  objc_msgSend(v14, "setIsLimitedService:", (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 32))(*(_QWORD *)(a1 + 352), a5) == 6);
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v48 = *(void **)(a1 + 448);
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v68, v81, 16);
  if (v49)
  {
    v50 = v49;
    v51 = 0;
    v52 = *(_QWORD *)v69;
    do
    {
      for (i = 0; i != v50; i = (char *)i + 1)
      {
        if (*(_QWORD *)v69 != v52)
          objc_enumerationMutation(v48);
        v54 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)i);
        v55 = objc_msgSend(v14, "mcc");
        if (v55 == objc_msgSend(v54, "mcc"))
        {
          v56 = objc_msgSend(v14, "mnc");
          if (v56 == objc_msgSend(v54, "mnc"))
          {
            v57 = objc_msgSend(v14, "sid");
            if (v57 == objc_msgSend(v54, "sid"))
            {
              v58 = objc_msgSend(v14, "nid");
              if (v58 == objc_msgSend(v54, "nid"))
              {
                v59 = objc_msgSend(v14, "bsid");
                v51 += v59 == objc_msgSend(v54, "bsid");
              }
            }
          }
        }
      }
      v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v68, v81, 16);
    }
    while (v50);
  }
  else
  {
    v51 = 0;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
    || v51 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
  {
    v60 = sub_100F15C0C(a4, 0);
    objc_msgSend(v14, "setNeighborGroup:", v60);

    objc_msgSend(*(id *)(a1 + 384), "writeSecondaryObject:collectedAt:toField:", v14, objc_msgSend(v14, "location"), 4);
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    sub_100D05194(a1);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v61 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289795;
      v83 = 0;
      v84 = 2082;
      v85 = "";
      v86 = 2050;
      v87 = 1;
      v88 = 2081;
      v89 = "CDMA";
      v90 = 2113;
      v91 = v14;
      v62 = "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, "
            "\"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}";
      v63 = v61;
      v64 = OS_LOG_TYPE_DEBUG;
      v65 = 48;
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v63, v64, v62, buf, v65);
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v66 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v83 = 0;
      v84 = 2082;
      v85 = "";
      v86 = 2050;
      v87 = 1;
      v88 = 2081;
      v89 = "CDMA";
      v62 = "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, locati"
            "on:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}";
      v63 = v66;
      v64 = OS_LOG_TYPE_DEFAULT;
      v65 = 38;
      goto LABEL_37;
    }
  }

}

void sub_100F13BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  id v41;
  id *v42;
  NSObject *v43;
  id v44;
  id v45;
  double v46;
  double v47;
  double v48;
  NSObject *v49;
  double v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  void *v54;
  id v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  void *i;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  id v66;
  uint64_t v67;
  NSObject *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  _QWORD v74[6];
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[8];
  uint64_t v81;
  _OWORD v82[8];
  uint64_t v83;
  _OWORD v84[8];
  uint64_t v85;
  _OWORD v86[8];
  _OWORD v87[2];
  _BYTE v88[128];
  int v89;
  double v90;
  uint8_t buf[4];
  _BYTE v92[14];
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  const char *v96;

  v9 = (unsigned int *)sub_1001E3CA4(a3);
  v10 = *(_QWORD *)(a1 + 368);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10))
  {
    (*(void (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(a1 + 352) + 184))(*(_QWORD *)(a1 + 352), v9, a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v11 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "LTE local harvesting not done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      LOWORD(v89) = 0;
      v69 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "LTE local harvesting not done", &v89, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellLTE(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v69);
      if (v69 != (char *)buf)
        free(v69);
    }
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v72 = a4;
    v12 = objc_alloc_init((Class)CLPLteCellTowerLocation);
    v13 = objc_alloc((Class)CLPLocation);
    v14 = *(_OWORD *)(a2 + 80);
    v86[4] = *(_OWORD *)(a2 + 64);
    v86[5] = v14;
    v15 = *(_OWORD *)(a2 + 48);
    v86[2] = *(_OWORD *)(a2 + 32);
    v86[3] = v15;
    *(_OWORD *)((char *)v87 + 12) = *(_OWORD *)(a2 + 140);
    v16 = *(_OWORD *)(a2 + 128);
    v17 = *(_OWORD *)(a2 + 96);
    v86[7] = *(_OWORD *)(a2 + 112);
    v87[0] = v16;
    v86[6] = v17;
    v18 = *(_OWORD *)(a2 + 16);
    v86[0] = *(_OWORD *)a2;
    v86[1] = v18;
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
    v84[0] = *(_OWORD *)v19;
    v21 = *(_OWORD *)(v19 + 16);
    v20 = *(_OWORD *)(v19 + 32);
    v22 = *(_OWORD *)(v19 + 64);
    v84[3] = *(_OWORD *)(v19 + 48);
    v84[4] = v22;
    v84[1] = v21;
    v23 = *(_OWORD *)(v19 + 80);
    v24 = *(_OWORD *)(v19 + 96);
    v25 = *(_OWORD *)(v19 + 112);
    v85 = *(_QWORD *)(v19 + 128);
    v84[6] = v24;
    v84[7] = v25;
    v84[5] = v23;
    v84[2] = v20;
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
    v82[0] = *(_OWORD *)v26;
    v27 = *(_OWORD *)(v26 + 16);
    v28 = *(_OWORD *)(v26 + 32);
    v29 = *(_OWORD *)(v26 + 64);
    v82[3] = *(_OWORD *)(v26 + 48);
    v82[4] = v29;
    v82[1] = v27;
    v82[2] = v28;
    v30 = *(_OWORD *)(v26 + 80);
    v31 = *(_OWORD *)(v26 + 96);
    v32 = *(_OWORD *)(v26 + 112);
    v83 = *(_QWORD *)(v26 + 128);
    v82[6] = v31;
    v82[7] = v32;
    v82[5] = v30;
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
    v80[0] = *(_OWORD *)v33;
    v34 = *(_OWORD *)(v33 + 64);
    v36 = *(_OWORD *)(v33 + 16);
    v35 = *(_OWORD *)(v33 + 32);
    v80[3] = *(_OWORD *)(v33 + 48);
    v80[4] = v34;
    v80[1] = v36;
    v80[2] = v35;
    v38 = *(_OWORD *)(v33 + 96);
    v37 = *(_OWORD *)(v33 + 112);
    v39 = *(_OWORD *)(v33 + 80);
    v81 = *(_QWORD *)(v33 + 128);
    v80[6] = v38;
    v80[7] = v37;
    v80[5] = v39;
    v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 216))(*(_QWORD *)(a1 + 56));
    v41 = objc_msgSend(v13, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v86, v84, v82, v80, v40, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56)));
    objc_msgSend(v12, "setLocation:", v41);

    if ((_DWORD)a5 == 1)
    {
      v42 = (id *)(a1 + 504);
    }
    else
    {
      if ((_DWORD)a5)
      {
LABEL_22:
        objc_msgSend(v12, "setMcc:", *v9);
        objc_msgSend(v12, "setMnc:", v9[1]);
        objc_msgSend(v12, "setTac:", v9[2]);
        objc_msgSend(v12, "setCi:", v9[3]);
        objc_msgSend(v12, "setUarfcn:", v9[4]);
        objc_msgSend(v12, "setPid:", v9[5]);
        objc_msgSend(v12, "setBandwidth:", v9[15]);
        if (*(_BYTE *)(a1 + 544))
        {
          v46 = *(double *)(a2 + 76);
          v47 = *(double *)(a1 + 536);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v48 = vabdd_f64(v46, v47);
          v49 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)v92 = v48;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#timingadvance,harvestCellLTE,timeBetweenTAandGps,%{public}.1f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
            v89 = 134349056;
            v90 = v48;
            LODWORD(v71) = 12;
            v70 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "#timingadvance,harvestCellLTE,timeBetweenTAandGps,%{public}.1f", &v89, v71);
            sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellLTE(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v70);
            if (v70 != (char *)buf)
              free(v70);
          }
          if (v48 <= 5.0)
            objc_msgSend(v12, "setTimingAdvance:", *(unsigned int *)(a1 + 528));
        }
        if ((v9[14] & 0x80000000) == 0)
          objc_msgSend(v12, "setDeploymentType:");
        objc_msgSend(v12, "setCsgIndication:", v9[18]);
        objc_msgSend(v12, "setCsgId:", v9[19]);
        objc_msgSend(v12, "setBandInfo:", v9[6]);
        objc_msgSend(v12, "setCellLatitude:", *((double *)v9 + 4));
        objc_msgSend(v12, "setCellLongitude:", *((double *)v9 + 5));
        objc_msgSend(v12, "setRssi:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 120))(*(_QWORD *)(a1 + 352), a5));
        objc_msgSend(v12, "setOperatorName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 88))(*(_QWORD *)(a1 + 352), a5));
        objc_msgSend(v12, "setServiceProviderName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 104))(*(_QWORD *)(a1 + 352), a5));
        objc_msgSend(v12, "setIsLimitedService:", (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 32))(*(_QWORD *)(a1 + 352), a5) == 6);
        v50 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
        if (v50 - *(double *)(a1 + 520) > 3600.0)
        {
          *(double *)(a1 + 520) = v50;
          objc_msgSend(v12, "setUniqueCount:", 1);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v51 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)v92 = 0;
            *(_WORD *)&v92[4] = 2082;
            *(_QWORD *)&v92[6] = "";
            v93 = 2050;
            v94 = 1;
            v95 = 2050;
            v96 = *(const char **)&v50;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Marked Unique - LTE\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"at\":\"%{public}f\"}", buf, 0x26u);
          }
        }
        v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 208))(*(_QWORD *)(a1 + 352));
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102192628);
        v53 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)v92 = 0;
          *(_WORD *)&v92[4] = 2082;
          *(_QWORD *)&v92[6] = "";
          v93 = 2050;
          v94 = 1;
          v95 = 1026;
          LODWORD(v96) = v52;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WiFi Fallback for LTE\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"hasWiFiFallback\":%{public}hhd}", buf, 0x22u);
        }
        v73 = a5;
        objc_msgSend(v12, "setHasWifiFallback:", v52);
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v54 = *(void **)(a1 + 432);
        v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
        if (v55)
        {
          v56 = v55;
          v57 = 0;
          v58 = *(_QWORD *)v77;
          do
          {
            for (i = 0; i != v56; i = (char *)i + 1)
            {
              if (*(_QWORD *)v77 != v58)
                objc_enumerationMutation(v54);
              v60 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)i);
              v61 = objc_msgSend(v12, "mcc");
              if (v61 == objc_msgSend(v60, "mcc"))
              {
                v62 = objc_msgSend(v12, "mnc");
                if (v62 == objc_msgSend(v60, "mnc"))
                {
                  v63 = objc_msgSend(v12, "tac");
                  if (v63 == objc_msgSend(v60, "tac"))
                  {
                    v64 = objc_msgSend(v12, "ci");
                    v57 += v64 == objc_msgSend(v60, "ci");
                  }
                }
              }
            }
            v56 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
          }
          while (v56);
        }
        else
        {
          v57 = 0;
        }
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
          || v57 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
        {
          v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 152))(*(_QWORD *)(a1 + 56));
          if (v65)
          {
            objc_msgSend(v12, "setPmax:", v9[16]);
            objc_msgSend(v12, "setMaxThroughput:", v9[17]);
          }
          v66 = sub_100F15C0C(v72, v65);
          objc_msgSend(v12, "setNeighborGroup:", v66);

          ++*(_DWORD *)(a1 + 208);
          *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
          sub_100D05194(a1);
          v67 = *(_QWORD *)(a1 + 352);
          v74[0] = _NSConcreteStackBlock;
          v74[1] = 3221225472;
          v74[2] = sub_100F165C4;
          v74[3] = &unk_1021925F0;
          v74[4] = v12;
          v74[5] = a1;
          v75 = v65;
          (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v67 + 128))(v67, v73, v74);
        }
        else
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v68 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)v92 = 0;
            *(_WORD *)&v92[4] = 2082;
            *(_QWORD *)&v92[6] = "";
            v93 = 2050;
            v94 = 1;
            v95 = 2081;
            v96 = "LTE";
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
          }

        }
        return;
      }
      v42 = (id *)(a1 + 480);
    }
    v44 = objc_msgSend(*v42, "objectForKey:", CFSTR("kSimNidKey"));
    v45 = objc_msgSend(*v42, "objectForKey:", CFSTR("kSimCsgIdKey"));
    if (v44)
      objc_msgSend(v12, "setNpnNwIdEf:", v44);
    if (v45)
      objc_msgSend(v12, "setNpnCsgIdEf:", v45);
    goto LABEL_22;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v43 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)v92 = 0;
    *(_WORD *)&v92[4] = 2082;
    *(_QWORD *)&v92[6] = "";
    v93 = 2050;
    v94 = 1;
    v95 = 2081;
    v96 = "LTE";
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
  }
}

void sub_100F14764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  id v41;
  id *v42;
  NSObject *v43;
  id v44;
  id v45;
  double v46;
  double v47;
  double v48;
  NSObject *v49;
  double v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  void *v54;
  id v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  void *i;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  id v64;
  int v65;
  id v66;
  uint64_t v67;
  NSObject *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  _QWORD v74[6];
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[8];
  uint64_t v81;
  _OWORD v82[8];
  uint64_t v83;
  _OWORD v84[8];
  uint64_t v85;
  _OWORD v86[8];
  _OWORD v87[2];
  _BYTE v88[128];
  int v89;
  double v90;
  uint8_t buf[4];
  _BYTE v92[14];
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  const char *v96;

  v9 = (unsigned int *)sub_1007073B4(a3);
  v10 = *(_QWORD *)(a1 + 368);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10))
  {
    (*(void (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(a1 + 352) + 200))(*(_QWORD *)(a1 + 352), v9, a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v11 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NR local harvesting not done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      LOWORD(v89) = 0;
      v69 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "NR local harvesting not done", &v89, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellNR(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v69);
      if (v69 != (char *)buf)
        free(v69);
    }
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v72 = a4;
    v12 = objc_alloc_init((Class)CLPNRCellTowerLocation);
    v13 = objc_alloc((Class)CLPLocation);
    v14 = *(_OWORD *)(a2 + 80);
    v86[4] = *(_OWORD *)(a2 + 64);
    v86[5] = v14;
    v15 = *(_OWORD *)(a2 + 48);
    v86[2] = *(_OWORD *)(a2 + 32);
    v86[3] = v15;
    *(_OWORD *)((char *)v87 + 12) = *(_OWORD *)(a2 + 140);
    v16 = *(_OWORD *)(a2 + 128);
    v17 = *(_OWORD *)(a2 + 96);
    v86[7] = *(_OWORD *)(a2 + 112);
    v87[0] = v16;
    v86[6] = v17;
    v18 = *(_OWORD *)(a2 + 16);
    v86[0] = *(_OWORD *)a2;
    v86[1] = v18;
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
    v84[0] = *(_OWORD *)v19;
    v21 = *(_OWORD *)(v19 + 16);
    v20 = *(_OWORD *)(v19 + 32);
    v22 = *(_OWORD *)(v19 + 64);
    v84[3] = *(_OWORD *)(v19 + 48);
    v84[4] = v22;
    v84[1] = v21;
    v23 = *(_OWORD *)(v19 + 80);
    v24 = *(_OWORD *)(v19 + 96);
    v25 = *(_OWORD *)(v19 + 112);
    v85 = *(_QWORD *)(v19 + 128);
    v84[6] = v24;
    v84[7] = v25;
    v84[5] = v23;
    v84[2] = v20;
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
    v82[0] = *(_OWORD *)v26;
    v27 = *(_OWORD *)(v26 + 16);
    v28 = *(_OWORD *)(v26 + 32);
    v29 = *(_OWORD *)(v26 + 64);
    v82[3] = *(_OWORD *)(v26 + 48);
    v82[4] = v29;
    v82[1] = v27;
    v82[2] = v28;
    v30 = *(_OWORD *)(v26 + 80);
    v31 = *(_OWORD *)(v26 + 96);
    v32 = *(_OWORD *)(v26 + 112);
    v83 = *(_QWORD *)(v26 + 128);
    v82[6] = v31;
    v82[7] = v32;
    v82[5] = v30;
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
    v80[0] = *(_OWORD *)v33;
    v34 = *(_OWORD *)(v33 + 64);
    v36 = *(_OWORD *)(v33 + 16);
    v35 = *(_OWORD *)(v33 + 32);
    v80[3] = *(_OWORD *)(v33 + 48);
    v80[4] = v34;
    v80[1] = v36;
    v80[2] = v35;
    v38 = *(_OWORD *)(v33 + 96);
    v37 = *(_OWORD *)(v33 + 112);
    v39 = *(_OWORD *)(v33 + 80);
    v81 = *(_QWORD *)(v33 + 128);
    v80[6] = v38;
    v80[7] = v37;
    v80[5] = v39;
    v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 216))(*(_QWORD *)(a1 + 56));
    v41 = objc_msgSend(v13, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v86, v84, v82, v80, v40, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56)));
    objc_msgSend(v12, "setLocation:", v41);

    if ((_DWORD)a5 == 1)
    {
      v42 = (id *)(a1 + 504);
    }
    else
    {
      if ((_DWORD)a5)
      {
LABEL_22:
        objc_msgSend(v12, "setMcc:", *v9);
        objc_msgSend(v12, "setMnc:", v9[1]);
        objc_msgSend(v12, "setTac:", v9[2]);
        objc_msgSend(v12, "setCi:", *((_QWORD *)v9 + 2));
        objc_msgSend(v12, "setNrarfcn:", v9[6]);
        objc_msgSend(v12, "setPid:", v9[7]);
        objc_msgSend(v12, "setScs:", v9[16]);
        objc_msgSend(v12, "setGscn:", v9[17]);
        objc_msgSend(v12, "setBandInfo:", v9[8]);
        objc_msgSend(v12, "setCellLatitude:", *((double *)v9 + 5));
        objc_msgSend(v12, "setCellLongitude:", *((double *)v9 + 6));
        objc_msgSend(v12, "setBandwidth:", v9[18]);
        if (*(_BYTE *)(a1 + 545))
        {
          v46 = *(double *)(a2 + 76);
          v47 = *(double *)(a1 + 536);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v48 = vabdd_f64(v46, v47);
          v49 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)v92 = v48;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#timingadvance,harvestCellNR,timeBetweenTAandGps,%{public}.1f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
            v89 = 134349056;
            v90 = v48;
            LODWORD(v71) = 12;
            v70 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "#timingadvance,harvestCellNR,timeBetweenTAandGps,%{public}.1f", &v89, v71);
            sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellNR(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v70);
            if (v70 != (char *)buf)
              free(v70);
          }
          if (v48 <= 5.0)
            objc_msgSend(v12, "setTimingAdvance:", *(unsigned int *)(a1 + 532));
        }
        objc_msgSend(v12, "setRssi:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 120))(*(_QWORD *)(a1 + 352), a5));
        objc_msgSend(v12, "setOperatorName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 88))(*(_QWORD *)(a1 + 352), a5));
        objc_msgSend(v12, "setServiceProviderName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 104))(*(_QWORD *)(a1 + 352), a5));
        objc_msgSend(v12, "setIsLimitedService:", (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 32))(*(_QWORD *)(a1 + 352), a5) == 6);
        v50 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
        if (v50 - *(double *)(a1 + 520) > 3600.0)
        {
          *(double *)(a1 + 520) = v50;
          objc_msgSend(v12, "setUniqueCount:", 1);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v51 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)v92 = 0;
            *(_WORD *)&v92[4] = 2082;
            *(_QWORD *)&v92[6] = "";
            v93 = 2050;
            v94 = 1;
            v95 = 2050;
            v96 = *(const char **)&v50;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Marked Unique - NR\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"at\":\"%{public}f\"}", buf, 0x26u);
          }
        }
        v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 208))(*(_QWORD *)(a1 + 352));
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102192628);
        v53 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)v92 = 0;
          *(_WORD *)&v92[4] = 2082;
          *(_QWORD *)&v92[6] = "";
          v93 = 2050;
          v94 = 1;
          v95 = 1026;
          LODWORD(v96) = v52;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WiFi Fallback for NR\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"hasWiFiFallback\":%{public}hhd}", buf, 0x22u);
        }
        v73 = a5;
        objc_msgSend(v12, "setHasWifiFallback:", v52);
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v54 = *(void **)(a1 + 440);
        v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
        if (v55)
        {
          v56 = v55;
          v57 = 0;
          v58 = *(_QWORD *)v77;
          do
          {
            for (i = 0; i != v56; i = (char *)i + 1)
            {
              if (*(_QWORD *)v77 != v58)
                objc_enumerationMutation(v54);
              v60 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)i);
              v61 = objc_msgSend(v12, "mcc");
              if (v61 == objc_msgSend(v60, "mcc"))
              {
                v62 = objc_msgSend(v12, "mnc");
                if (v62 == objc_msgSend(v60, "mnc"))
                {
                  v63 = objc_msgSend(v12, "tac");
                  if (v63 == objc_msgSend(v60, "tac"))
                  {
                    v64 = objc_msgSend(v12, "ci");
                    v57 += v64 == objc_msgSend(v60, "ci");
                  }
                }
              }
            }
            v56 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
          }
          while (v56);
        }
        else
        {
          v57 = 0;
        }
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
          || v57 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
        {
          v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 152))(*(_QWORD *)(a1 + 56));
          if (v65)
          {
            objc_msgSend(v12, "setPmax:", v9[19]);
            objc_msgSend(v12, "setMaxThroughput:", v9[20]);
          }
          v66 = sub_100F15C0C(v72, v65);
          objc_msgSend(v12, "setNeighborGroup:", v66);

          ++*(_DWORD *)(a1 + 208);
          *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
          sub_100D05194(a1);
          v67 = *(_QWORD *)(a1 + 352);
          v74[0] = _NSConcreteStackBlock;
          v74[1] = 3221225472;
          v74[2] = sub_100F16A64;
          v74[3] = &unk_1021925F0;
          v74[4] = v12;
          v74[5] = a1;
          v75 = v65;
          (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v67 + 128))(v67, v73, v74);
        }
        else
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v68 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)v92 = 0;
            *(_WORD *)&v92[4] = 2082;
            *(_QWORD *)&v92[6] = "";
            v93 = 2050;
            v94 = 1;
            v95 = 2081;
            v96 = "NR5G";
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
          }

        }
        return;
      }
      v42 = (id *)(a1 + 480);
    }
    v44 = objc_msgSend(*v42, "objectForKey:", CFSTR("kSimNidKey"));
    v45 = objc_msgSend(*v42, "objectForKey:", CFSTR("kSimCsgIdKey"));
    if (v44)
      objc_msgSend(v12, "setNpnNwIdEf:", v44);
    if (v45)
      objc_msgSend(v12, "setNpnCsgIdEf:", v45);
    goto LABEL_22;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v43 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)v92 = 0;
    *(_WORD *)&v92[4] = 2082;
    *(_QWORD *)&v92[6] = "";
    v93 = 2050;
    v94 = 1;
    v95 = 2081;
    v96 = "NR";
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
  }
}

void sub_100F152C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double v12;
  void *v13;
  id v14;
  __int128 v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  NSObject *v21;
  NSObject *v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t buf;
  __int16 v31;
  const char *v32;
  __int16 v33;
  _BYTE v34[18];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;

  v5 = *(double *)(a4 + 76);
  v6 = *(double *)(a1 + 400);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v7 = v5 - v6;
  v8 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_100204BE4(a1 + 280);
    v9 = *(_QWORD *)(a1 + 424);
    v10 = *(unsigned __int8 *)(a1 + 417);
    buf = 68290306;
    v31 = 2082;
    v32 = "";
    v33 = 2050;
    *(_QWORD *)v34 = 1;
    *(_WORD *)&v34[8] = 2050;
    *(double *)&v34[10] = v7;
    v35 = 2050;
    v36 = v11;
    v37 = 2114;
    v38 = v9;
    v39 = 1026;
    v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim onGpsNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"timeSinceLastHarvest_s\":\"%{public}.09f\", \"harvestInterval_s\":\"%{public}.09f\", \"inUseSubscriptions\":%{public, location:escape_only}@, \"harvestingDisabledDueToInvalidInUseSubsriptionsCount\":%{public}hhd}", (uint8_t *)&buf, 0x40u);
  }
  if (!*(_BYTE *)(a1 + 417))
  {
    sub_100204BE4(a1 + 280);
    if (v7 >= v12)
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v13 = *(void **)(a1 + 424);
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v14)
      {
        v16 = v14;
        v17 = *(_QWORD *)v26;
        *(_QWORD *)&v15 = 68289538;
        v23 = v15;
        do
        {
          v18 = 0;
          do
          {
            if (*(_QWORD *)v26 != v17)
              objc_enumerationMutation(v13);
            v19 = sub_100599A28(objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v18), "intValue", v23));
            v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 32))(*(_QWORD *)(a1 + 352), v19);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
            v21 = qword_1022A0208;
            if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
            {
              buf = v23;
              v31 = 2082;
              v32 = "";
              v33 = 1026;
              *(_DWORD *)v34 = v19;
              *(_WORD *)&v34[4] = 1026;
              *(_DWORD *)&v34[6] = v20;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim onGpsNotification harvesting\", \"SimInstamce\":%{public}u, \"RegistrationStatus\":%{public}u}", (uint8_t *)&buf, 0x1Eu);
            }
            if (v20 <= 7)
            {
              if (((1 << v20) & 0xF0) != 0)
              {
                sub_100F11644(a1, (_OWORD *)a4, v19);
              }
              else if (((1 << v20) & 5) != 0)
              {
                if (qword_1022A0200 != -1)
                  dispatch_once(&qword_1022A0200, &stru_102192628);
                v22 = qword_1022A0208;
                if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
                {
                  buf = v23;
                  v31 = 2082;
                  v32 = "";
                  v33 = 1026;
                  *(_DWORD *)v34 = v19;
                  *(_WORD *)&v34[4] = 2050;
                  *(_QWORD *)&v34[6] = 1;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim onGpsNotification not harvesting since the device is in a transient state.\", \"SimInstance\":%{public}u, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x22u);
                }
              }
              else
              {
                sub_100F1566C(a1, (_OWORD *)a4, v19);
              }
            }
            v18 = (char *)v18 + 1;
          }
          while (v16 != v18);
          v16 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        }
        while (v16);
      }
    }
  }
}

void sub_100F1566C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint32_t v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  double v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  _OWORD v46[8];
  uint64_t v47;
  _OWORD v48[8];
  uint64_t v49;
  _OWORD v50[8];
  uint64_t v51;
  _OWORD v52[8];
  _OWORD v53[2];
  uint64_t buf;
  __int16 v55;
  const char *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  id v62;

  if (sub_100F122F8(a1))
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 296))(*(_QWORD *)(a1 + 56)))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v6 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289282;
        v55 = 2082;
        v56 = "";
        v57 = 2050;
        v58 = 1;
        v7 = "{\"msg%{public}.0s\":\"OOS skip harvesting - airplane mode enabled\", \"subHarvester\":%{public, location:C"
             "LSubHarvesterIdentifier}lld}";
        v8 = v6;
        v9 = OS_LOG_TYPE_DEFAULT;
        v10 = 28;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&buf, v10);
      }
    }
    else
    {
      v11 = objc_alloc_init((Class)CLPCellOutOfServiceInfo);
      v12 = objc_alloc((Class)CLPLocation);
      v13 = a2[5];
      v52[4] = a2[4];
      v52[5] = v13;
      v14 = a2[3];
      v52[2] = a2[2];
      v52[3] = v14;
      *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)((char *)a2 + 140);
      v15 = a2[8];
      v16 = a2[6];
      v52[7] = a2[7];
      v53[0] = v15;
      v52[6] = v16;
      v17 = a2[1];
      v52[0] = *a2;
      v52[1] = v17;
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
      v50[0] = *(_OWORD *)v18;
      v20 = *(_OWORD *)(v18 + 16);
      v19 = *(_OWORD *)(v18 + 32);
      v21 = *(_OWORD *)(v18 + 64);
      v50[3] = *(_OWORD *)(v18 + 48);
      v50[4] = v21;
      v50[1] = v20;
      v22 = *(_OWORD *)(v18 + 80);
      v23 = *(_OWORD *)(v18 + 96);
      v24 = *(_OWORD *)(v18 + 112);
      v51 = *(_QWORD *)(v18 + 128);
      v50[6] = v23;
      v50[7] = v24;
      v50[5] = v22;
      v50[2] = v19;
      v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
      v48[0] = *(_OWORD *)v25;
      v26 = *(_OWORD *)(v25 + 16);
      v27 = *(_OWORD *)(v25 + 32);
      v28 = *(_OWORD *)(v25 + 64);
      v48[3] = *(_OWORD *)(v25 + 48);
      v48[4] = v28;
      v48[1] = v26;
      v48[2] = v27;
      v29 = *(_OWORD *)(v25 + 80);
      v30 = *(_OWORD *)(v25 + 96);
      v31 = *(_OWORD *)(v25 + 112);
      v49 = *(_QWORD *)(v25 + 128);
      v48[6] = v30;
      v48[7] = v31;
      v48[5] = v29;
      v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
      v46[0] = *(_OWORD *)v32;
      v33 = *(_OWORD *)(v32 + 64);
      v35 = *(_OWORD *)(v32 + 16);
      v34 = *(_OWORD *)(v32 + 32);
      v46[3] = *(_OWORD *)(v32 + 48);
      v46[4] = v33;
      v46[1] = v35;
      v46[2] = v34;
      v37 = *(_OWORD *)(v32 + 96);
      v36 = *(_OWORD *)(v32 + 112);
      v38 = *(_OWORD *)(v32 + 80);
      v47 = *(_QWORD *)(v32 + 128);
      v46[6] = v37;
      v46[7] = v36;
      v46[5] = v38;
      v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 216))(*(_QWORD *)(a1 + 56));
      v40 = objc_msgSend(v12, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v52, v50, v48, v46, v39, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56)));
      objc_msgSend(v11, "setLocation:", v40);

      objc_msgSend(v11, "setServiceProviderName:", (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 104))(*(_QWORD *)(a1 + 352), a3));
      v41 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
      if (v41 - *(double *)(a1 + 520) > 3600.0)
      {
        *(double *)(a1 + 520) = v41;
        objc_msgSend(v11, "setUniqueCount:", 1);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102192628);
        v42 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          buf = 68289538;
          v55 = 2082;
          v56 = "";
          v57 = 2050;
          v58 = 1;
          v59 = 2050;
          v60 = *(const char **)&v41;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Marked Unique OOS\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"at\":\"%{public}f\"}", (uint8_t *)&buf, 0x26u);
        }
      }
      v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 208))(*(_QWORD *)(a1 + 352));
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v44 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        buf = 68289538;
        v55 = 2082;
        v56 = "";
        v57 = 2050;
        v58 = 1;
        v59 = 1026;
        LODWORD(v60) = v43;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WiFi Fallback for OOS\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"hasWiFiFallback\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
      objc_msgSend(v11, "setHasWifiFallback:", v43);
      objc_msgSend(*(id *)(a1 + 384), "writeSecondaryObject:collectedAt:toField:", v11, objc_msgSend(v11, "location"), 7);
      ++*(_DWORD *)(a1 + 208);
      *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v45 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        buf = 68289795;
        v55 = 2082;
        v56 = "";
        v57 = 2050;
        v58 = 1;
        v59 = 2081;
        v60 = "OutOfService";
        v61 = 2113;
        v62 = v11;
        v7 = "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld,"
             " \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}";
        v8 = v45;
        v9 = OS_LOG_TYPE_DEBUG;
        v10 = 48;
        goto LABEL_20;
      }
    }
  }
}

id sub_100F15BAC(uint64_t a1)
{
  double v2;
  double v3;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v3 = v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  return _objc_msgSend(*(id *)(a1 + 72), "pruneSecondaryDataOlderThan:forHarvester:", 1, v3);
}

id sub_100F15C00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 1);
}

id sub_100F15C0C(uint64_t *a1, int a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  id v72;
  void *v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  NSObject *v80;
  void **v81;
  NSObject *v82;
  void **v83;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v89;
  id v90;
  void *v91[2];
  char v92;
  _OWORD v93[3];
  _BYTE v94[28];
  int v95;
  void *v96;
  void *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  __int128 __p;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  int v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  uint8_t buf[4];
  int v137;
  _BYTE v138[40];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _OWORD v149[2];
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  int v162;

  v3 = objc_alloc_init((Class)CLPCellNeighborsGroup);
  v4 = *a1;
  v89 = a1[1];
  v90 = v3;
  if (*a1 != v89)
  {
    do
    {
      v93[0] = *(_OWORD *)v4;
      v5 = *(_OWORD *)(v4 + 16);
      v6 = *(_OWORD *)(v4 + 32);
      v7 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)&v94[12] = *(_OWORD *)(v4 + 60);
      v93[2] = v6;
      *(_OWORD *)v94 = v7;
      v93[1] = v5;
      v95 = *(_DWORD *)(v4 + 80);
      v97 = 0;
      v98 = 0;
      v96 = 0;
      sub_10027205C(&v96, *(const void **)(v4 + 88), *(_QWORD *)(v4 + 96), (uint64_t)(*(_QWORD *)(v4 + 96) - *(_QWORD *)(v4 + 88)) >> 2);
      v99 = *(_OWORD *)(v4 + 112);
      v8 = *(_OWORD *)(v4 + 128);
      v9 = *(_OWORD *)(v4 + 144);
      v10 = *(_OWORD *)(v4 + 176);
      v102 = *(_OWORD *)(v4 + 160);
      v103 = v10;
      v100 = v8;
      v101 = v9;
      v11 = *(_OWORD *)(v4 + 192);
      v12 = *(_OWORD *)(v4 + 208);
      v13 = *(_OWORD *)(v4 + 240);
      v106 = *(_OWORD *)(v4 + 224);
      v107 = v13;
      v104 = v11;
      v105 = v12;
      v14 = *(_OWORD *)(v4 + 256);
      v15 = *(_OWORD *)(v4 + 272);
      v16 = *(_OWORD *)(v4 + 288);
      *(_OWORD *)((char *)v110 + 12) = *(_OWORD *)(v4 + 300);
      v109 = v15;
      v110[0] = v16;
      v108 = v14;
      if (*(char *)(v4 + 343) < 0)
      {
        sub_100115CE4(&__p, *(void **)(v4 + 320), *(_QWORD *)(v4 + 328));
      }
      else
      {
        v17 = *(_OWORD *)(v4 + 320);
        v112 = *(_QWORD *)(v4 + 336);
        __p = v17;
      }
      v18 = *(_OWORD *)(v4 + 344);
      v19 = *(_OWORD *)(v4 + 376);
      v114 = *(_OWORD *)(v4 + 360);
      v115 = v19;
      v113 = v18;
      v20 = *(_OWORD *)(v4 + 392);
      v21 = *(_OWORD *)(v4 + 408);
      v22 = *(_OWORD *)(v4 + 440);
      v118 = *(_OWORD *)(v4 + 424);
      v119 = v22;
      v116 = v20;
      v117 = v21;
      v23 = *(_OWORD *)(v4 + 456);
      v24 = *(_OWORD *)(v4 + 472);
      v25 = *(_OWORD *)(v4 + 488);
      v123 = *(_DWORD *)(v4 + 504);
      v121 = v24;
      v122 = v25;
      v120 = v23;
      v26 = *(_OWORD *)(v4 + 512);
      v27 = *(_OWORD *)(v4 + 528);
      v28 = *(_OWORD *)(v4 + 560);
      v126 = *(_OWORD *)(v4 + 544);
      v127 = v28;
      v124 = v26;
      v125 = v27;
      v29 = *(_OWORD *)(v4 + 576);
      v30 = *(_OWORD *)(v4 + 592);
      v31 = *(_OWORD *)(v4 + 624);
      v130 = *(_OWORD *)(v4 + 608);
      v131 = v31;
      v128 = v29;
      v129 = v30;
      v32 = *(_OWORD *)(v4 + 640);
      v33 = *(_OWORD *)(v4 + 656);
      v34 = *(_OWORD *)(v4 + 672);
      v135 = *(_DWORD *)(v4 + 688);
      v133 = v33;
      v134 = v34;
      v132 = v32;
      if (DWORD1(v93[0]) != 1)
      {
        sub_101932D80();
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Subharvesters/Cell/CLSubHarvesterCell.mm", 60, "CLCopyNeighborsGroupForCells");
        __break(1u);
      }
      if (DWORD2(v93[0]) < 3)
        goto LABEL_9;
      if (DWORD2(v93[0]) == 9)
      {
        v41 = (unsigned int *)sub_100706590((uint64_t)v93);
        v43 = v41[4];
        v42 = v41[5];
        v44 = v41[6];
        v45 = v41[7];
        v46 = objc_alloc_init((Class)CLPCellNeighbor);
        objc_msgSend(v46, "setEcn0:", v45);
        objc_msgSend(v46, "setPsc:", v42);
        objc_msgSend(v46, "setRscp:", v44);
        objc_msgSend(v46, "setRssi:", 0xFFFFFFFFLL);
        objc_msgSend(v46, "setUarfcn:", v43);
        objc_msgSend(v90, "addScdmaNeighbors:", v46);

        goto LABEL_10;
      }
      if (DWORD2(v93[0]) == 7)
      {
LABEL_9:
        v35 = (unsigned int *)sub_1007057DC((uint64_t)v93);
        v37 = v35[4];
        v36 = v35[5];
        v38 = v35[6];
        v39 = v35[7];
        v40 = objc_alloc_init((Class)CLPCellNeighbor);
        objc_msgSend(v40, "setEcn0:", v39);
        objc_msgSend(v40, "setPsc:", v36);
        objc_msgSend(v40, "setRscp:", v38);
        objc_msgSend(v40, "setRssi:", 0xFFFFFFFFLL);
        objc_msgSend(v40, "setUarfcn:", v37);
        objc_msgSend(v90, "addGsmNeighbors:", v40);

      }
      else
      {
        if ((DWORD2(v93[0]) - 3) <= 2)
        {
          v47 = sub_100704A28((uint64_t)v93);
          *(_DWORD *)buf = *(_DWORD *)v47;
          memset(v138, 0, 24);
          sub_10027205C(v138, *(const void **)(v47 + 8), *(_QWORD *)(v47 + 16), (uint64_t)(*(_QWORD *)(v47 + 16) - *(_QWORD *)(v47 + 8)) >> 2);
          *(_OWORD *)&v138[24] = *(_OWORD *)(v47 + 32);
          v48 = *(_OWORD *)(v47 + 48);
          v49 = *(_OWORD *)(v47 + 64);
          v50 = *(_OWORD *)(v47 + 96);
          v141 = *(_OWORD *)(v47 + 80);
          v142 = v50;
          v139 = v48;
          v140 = v49;
          v51 = *(_OWORD *)(v47 + 112);
          v52 = *(_OWORD *)(v47 + 128);
          v53 = *(_OWORD *)(v47 + 160);
          v145 = *(_OWORD *)(v47 + 144);
          v146 = v53;
          v143 = v51;
          v144 = v52;
          v54 = *(_OWORD *)(v47 + 176);
          v55 = *(_OWORD *)(v47 + 192);
          v56 = *(_OWORD *)(v47 + 208);
          *(_OWORD *)((char *)v149 + 12) = *(_OWORD *)(v47 + 220);
          v148 = v55;
          v149[0] = v56;
          v147 = v54;
          if (*(char *)(v47 + 263) < 0)
          {
            sub_100115CE4(&v150, *(void **)(v47 + 240), *(_QWORD *)(v47 + 248));
          }
          else
          {
            v57 = *(_OWORD *)(v47 + 240);
            v151 = *(_QWORD *)(v47 + 256);
            v150 = v57;
          }
          v64 = *(_OWORD *)(v47 + 264);
          v65 = *(_OWORD *)(v47 + 296);
          v153 = *(_OWORD *)(v47 + 280);
          v154 = v65;
          v152 = v64;
          v66 = *(_OWORD *)(v47 + 312);
          v67 = *(_OWORD *)(v47 + 328);
          v68 = *(_OWORD *)(v47 + 360);
          v157 = *(_OWORD *)(v47 + 344);
          v158 = v68;
          v155 = v66;
          v156 = v67;
          v69 = *(_OWORD *)(v47 + 376);
          v70 = *(_OWORD *)(v47 + 392);
          v71 = *(_OWORD *)(v47 + 408);
          v162 = *(_DWORD *)(v47 + 424);
          v160 = v70;
          v161 = v71;
          v159 = v69;
          v72 = objc_alloc_init((Class)CLPCdmaCellNeighbor);
          objc_msgSend(v72, "setEcn0:", v140);
          objc_msgSend(v72, "setPilotPhase:", 0xFFFFFFFFLL);
          objc_msgSend(v72, "setPnoffset:", DWORD2(v139));
          objc_msgSend(v72, "setRscp:", HIDWORD(v139));
          objc_msgSend(v72, "setChannel:", DWORD1(v139));
          objc_msgSend(v90, "addCdmaNeighbors:", v72);

          if (SHIBYTE(v151) < 0)
            operator delete((void *)v150);
          v73 = *(void **)v138;
          if (!*(_QWORD *)v138)
            goto LABEL_10;
          *(_QWORD *)&v138[8] = *(_QWORD *)v138;
          goto LABEL_28;
        }
        if (DWORD2(v93[0]) == 10)
        {
          v74 = (unsigned int *)sub_1007073B4((uint64_t)v93);
          v76 = v74[6];
          v75 = v74[7];
          v77 = v74[14];
          v78 = v74[15];
          v85 = v74[20];
          v87 = v74[18];
          v79 = objc_alloc_init((Class)CLPNRCellNeighbor);
          objc_msgSend(v79, "setEcn0:", v78);
          objc_msgSend(v79, "setPid:", v75);
          objc_msgSend(v79, "setRscp:", v77);
          objc_msgSend(v79, "setRssi:", 0xFFFFFFFFLL);
          objc_msgSend(v79, "setNrarfcn:", v76);
          objc_msgSend(v79, "setBandwidth:", v87);
          if (a2)
            objc_msgSend(v79, "setMaxThroughput:", v85);
          objc_msgSend(v90, "addNrNeighbors:", v79);

          goto LABEL_10;
        }
        if (DWORD2(v93[0]) != 6)
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v80 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
          {
            sub_101347C78((unsigned int *)v93, v91);
            v81 = v91;
            if (v92 < 0)
              v81 = (void **)v91[0];
            *(_DWORD *)buf = 68289539;
            v137 = 0;
            *(_WORD *)v138 = 2082;
            *(_QWORD *)&v138[2] = "";
            *(_WORD *)&v138[10] = 2050;
            *(_QWORD *)&v138[12] = 1;
            *(_WORD *)&v138[20] = 2081;
            *(_QWORD *)&v138[22] = v81;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", buf, 0x26u);
            if (v92 < 0)
              operator delete(v91[0]);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
          }
          v82 = qword_1022A0208;
          if (!os_signpost_enabled((os_log_t)qword_1022A0208))
            goto LABEL_10;
          sub_101347C78((unsigned int *)v93, v91);
          v83 = v91;
          if (v92 < 0)
            v83 = (void **)v91[0];
          *(_DWORD *)buf = 68289539;
          v137 = 0;
          *(_WORD *)v138 = 2082;
          *(_QWORD *)&v138[2] = "";
          *(_WORD *)&v138[10] = 2050;
          *(_QWORD *)&v138[12] = 1;
          *(_WORD *)&v138[20] = 2081;
          *(_QWORD *)&v138[22] = v83;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v82, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to harvest cell", "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", buf, 0x26u);
          if ((v92 & 0x80000000) == 0)
            goto LABEL_10;
          v73 = v91[0];
LABEL_28:
          operator delete(v73);
          goto LABEL_10;
        }
        v58 = (unsigned int *)sub_1001E3CA4((uint64_t)v93);
        v60 = v58[4];
        v59 = v58[5];
        v61 = v58[12];
        v62 = v58[13];
        v86 = v58[15];
        v63 = objc_alloc_init((Class)CLPLteCellNeighbor);
        objc_msgSend(v63, "setEcn0:", v62);
        objc_msgSend(v63, "setPid:", v59);
        objc_msgSend(v63, "setRscp:", v61);
        objc_msgSend(v63, "setRssi:", 0xFFFFFFFFLL);
        objc_msgSend(v63, "setUarfcn:", v60);
        objc_msgSend(v63, "setBandwidth:", v86);
        objc_msgSend(v90, "addLteNeighbors:", v63);

      }
LABEL_10:
      if (SHIBYTE(v112) < 0)
        operator delete((void *)__p);
      if (v96)
      {
        v97 = v96;
        operator delete(v96);
      }
      v4 += 696;
    }
    while (v4 != v89);
  }
  return v90;
}

void sub_100F163B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1005A1100((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_100F16440(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRscp:", objc_msgSend(objc_msgSend(a2, "rscp"), "intValue"));
    objc_msgSend(*(id *)(a1 + 32), "setEcn0:", objc_msgSend(objc_msgSend(a2, "ecn0"), "intValue"));
  }
  objc_msgSend(*(id *)(v3 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 2);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = 1;
    v12 = 2081;
    v13 = "GSM";
    v14 = 2113;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }

}

void sub_100F165C4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[6];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRscp:", objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue"));
    objc_msgSend(*(id *)(a1 + 32), "setEcn0:", objc_msgSend(objc_msgSend(a2, "snr"), "intValue"));
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v5 = *(_QWORD *)(v3 + 352);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100F16834;
    v9[3] = &unk_1021925C8;
    v9[4] = *(_QWORD *)(a1 + 32);
    v9[5] = v3;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 152))(v5, v9);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DiagnosticsSubmission is not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    objc_msgSend(*(id *)(v3 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 5);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289795;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = 1;
      v16 = 2081;
      v17 = "LTE";
      v18 = 2113;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }

  }
}

void sub_100F16834(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  _BYTE v19[10];
  const char *v20;
  _DWORD v21[4];

  v10 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v11 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v14 = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1026;
    *(_DWORD *)v19 = a2;
    *(_WORD *)&v19[4] = 1026;
    *(_DWORD *)&v19[6] = a3;
    LOWORD(v20) = 1026;
    *(_DWORD *)((char *)&v20 + 2) = a4;
    HIWORD(v20) = 1026;
    v21[0] = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat streamingInfo\", \"isValidMetrics\":%{public}hhd, \"downlinkBandwidth\":%{public}d, \"isStalled\":%{public}hhd, \"latency\":%{public}d}", (uint8_t *)&v14, 0x2Au);
  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDownlinkBandwidth:", a3);
    objc_msgSend(*(id *)(a1 + 32), "setIsStalled:", a4);
    objc_msgSend(*(id *)(a1 + 32), "setLatency:", a5);
  }
  objc_msgSend(*(id *)(v10 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 5);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v12 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = 68289795;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2050;
    *(_QWORD *)v19 = 1;
    *(_WORD *)&v19[8] = 2081;
    v20 = "LTE";
    LOWORD(v21[0]) = 2113;
    *(_QWORD *)((char *)v21 + 2) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x30u);
  }

}

void sub_100F16A64(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[6];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRscp:", objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue"));
    objc_msgSend(*(id *)(a1 + 32), "setEcn0:", objc_msgSend(objc_msgSend(a2, "snr"), "intValue"));
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v5 = *(_QWORD *)(v3 + 352);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100F16CD4;
    v9[3] = &unk_1021925C8;
    v9[4] = *(_QWORD *)(a1 + 32);
    v9[5] = v3;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 152))(v5, v9);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DiagnosticsSubmission is not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    objc_msgSend(*(id *)(v3 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 8);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289795;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = 1;
      v16 = 2081;
      v17 = "NR5G";
      v18 = 2113;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }

  }
}

void sub_100F16CD4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  _BYTE v19[10];
  const char *v20;
  _DWORD v21[4];

  v10 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v11 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v14 = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1026;
    *(_DWORD *)v19 = a2;
    *(_WORD *)&v19[4] = 1026;
    *(_DWORD *)&v19[6] = a3;
    LOWORD(v20) = 1026;
    *(_DWORD *)((char *)&v20 + 2) = a4;
    HIWORD(v20) = 1026;
    v21[0] = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat streamingInfo\", \"isValidMetrics\":%{public}hhd, \"downlinkBandwidth\":%{public}d, \"isStalled\":%{public}hhd, \"latency\":%{public}d}", (uint8_t *)&v14, 0x2Au);
  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDownlinkBandwidth:", a3);
    objc_msgSend(*(id *)(a1 + 32), "setIsStalled:", a4);
    objc_msgSend(*(id *)(a1 + 32), "setLatency:", a5);
  }
  objc_msgSend(*(id *)(v10 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 8);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v12 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = 68289795;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2050;
    *(_QWORD *)v19 = 1;
    *(_WORD *)&v19[8] = 2081;
    v20 = "NR5G";
    LOWORD(v21[0]) = 2113;
    *(_QWORD *)((char *)v21 + 2) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x30u);
  }

}

uint64_t sub_100F16F04(_QWORD *a1)
{
  *a1 = off_1021924D0;
  sub_100261F44((uint64_t)(a1 + 46));
  sub_100261F44((uint64_t)(a1 + 44));
  return sub_100429668((uint64_t)a1);
}

void sub_100F16F40(_QWORD *a1)
{
  *a1 = off_1021924D0;
  sub_100261F44((uint64_t)(a1 + 46));
  sub_100261F44((uint64_t)(a1 + 44));
  sub_100429668((uint64_t)a1);
  operator delete();
}

void sub_100F16F90(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100F16FBC()
{
  return sub_1011E780C((uint64_t)&xmmword_1023090E8, 1, 2, 2, 1, 60.0, 43200.0, 43200.0);
}

uint64_t sub_100F17CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  int *v47;
  int *v48;
  uint64_t v49;
  ALSMeta *v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v5 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v6 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v11 == -1 || v11 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v12 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v11);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v11 + 1;
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v13 = v9++ >= 9;
        if (v13)
        {
          v10 = 0;
          v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v10 = 0;
LABEL_14:
      v15 = v10 & 7;
      if (v14 || v15 == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      switch((v10 >> 3))
      {
        case 0x15u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + v7[678]) |= 4u;
          while (2)
          {
            v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
              v19 |= (unint64_t)(v21 & 0x7F) << v17;
              if (v21 < 0)
              {
                v17 += 7;
                v13 = v18++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_100;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v19) = 0;
LABEL_100:
          v64 = 64;
          goto LABEL_138;
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
LABEL_34:
          v27 = PBReaderSkipValueWithTag(a2);
          v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          if ((v27 & 1) == 0)
            return 0;
          goto LABEL_145;
        case 0x1Fu:
          v28 = 0;
          v29 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + v7[678]) |= 0x10u;
          while (2)
          {
            v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
              v19 |= (unint64_t)(v31 & 0x7F) << v28;
              if (v31 < 0)
              {
                v28 += 7;
                v13 = v29++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_104;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v19) = 0;
LABEL_104:
          v64 = 72;
          goto LABEL_138;
        case 0x20u:
          v32 = 0;
          v33 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + v7[678]) |= 2u;
          while (2)
          {
            v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
              v19 |= (unint64_t)(v35 & 0x7F) << v32;
              if (v35 < 0)
              {
                v32 += 7;
                v13 = v33++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_108;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v19) = 0;
LABEL_108:
          v64 = 60;
          goto LABEL_138;
        case 0x21u:
          if (v15 == 2)
          {
            v72 = 0;
            v73 = 0;
            result = PBReaderPlaceMark(a2, &v72);
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)
                 && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            {
              v37 = 0;
              v38 = 0;
              v39 = 0;
              while (1)
              {
                v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v40 == -1 || v40 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                  break;
                v41 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 1;
                v39 |= (unint64_t)(v41 & 0x7F) << v37;
                if ((v41 & 0x80) == 0)
                  goto LABEL_62;
                v37 += 7;
                v13 = v38++ >= 9;
                if (v13)
                {
                  v42 = 0;
                  goto LABEL_65;
                }
              }
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_62:
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v42 = 0;
              else
                v42 = v39;
LABEL_65:
              PBRepeatedInt32Add(a1 + 8, v42);
            }
            PBReaderRecallMark(a2, &v72);
          }
          else
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            while (1)
            {
              v68 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v68 == -1 || v68 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                break;
              v69 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 1;
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0)
                goto LABEL_140;
              v65 += 7;
              v13 = v66++ >= 9;
              if (v13)
              {
                v70 = 0;
                goto LABEL_143;
              }
            }
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_140:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v70 = 0;
            else
              v70 = v67;
LABEL_143:
            PBRepeatedInt32Add(a1 + 8, v70);
          }
          goto LABEL_144;
        case 0x22u:
          v43 = 0;
          v44 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + v7[678]) |= 8u;
          while (2)
          {
            v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
              v19 |= (unint64_t)(v46 & 0x7F) << v43;
              if (v46 < 0)
              {
                v43 += 7;
                v13 = v44++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_112;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v19) = 0;
LABEL_112:
          v64 = 68;
          goto LABEL_138;
        case 0x23u:
          v47 = v6;
          v48 = v5;
          v49 = v2;
          v50 = objc_alloc_init(ALSMeta);

          *(_QWORD *)(a1 + 48) = v50;
          v72 = 0;
          v73 = 0;
          if (!PBReaderPlaceMark(a2, &v72) || !sub_10117DA78((uint64_t)v50, a2))
            return 0;
          PBReaderRecallMark(a2, &v72);
          v2 = v49;
          v5 = v48;
          v6 = v47;
LABEL_144:
          v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
LABEL_145:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          break;
        default:
          switch((v10 >> 3))
          {
            case 1u:
              v22 = 0;
              v23 = 0;
              v24 = 0;
              while (2)
              {
                v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
                  v24 |= (unint64_t)(v26 & 0x7F) << v22;
                  if (v26 < 0)
                  {
                    v22 += 7;
                    v13 = v23++ >= 9;
                    if (v13)
                    {
                      v24 = 0;
                      goto LABEL_124;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v24 = 0;
LABEL_124:
              v71 = v5[686];
              goto LABEL_129;
            case 2u:
              v51 = 0;
              v52 = 0;
              v24 = 0;
              while (2)
              {
                v53 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v53 == -1 || v53 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v54 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 1;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if (v54 < 0)
                  {
                    v51 += 7;
                    v13 = v52++ >= 9;
                    if (v13)
                    {
                      v24 = 0;
                      goto LABEL_128;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v24 = 0;
LABEL_128:
              v71 = v6[687];
LABEL_129:
              *(_QWORD *)(a1 + v71) = v24;
              goto LABEL_145;
            case 3u:
              v55 = 0;
              v56 = 0;
              v57 = 0;
              *(_BYTE *)(a1 + v7[678]) |= 0x20u;
              while (2)
              {
                v58 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v58 == -1 || v58 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v59 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 1;
                  v57 |= (unint64_t)(v59 & 0x7F) << v55;
                  if (v59 < 0)
                  {
                    v55 += 7;
                    v13 = v56++ >= 9;
                    if (v13)
                    {
                      v57 = 0;
                      goto LABEL_133;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v57 = 0;
LABEL_133:
              *(_BYTE *)(a1 + 76) = v57 != 0;
              goto LABEL_145;
            case 4u:
              v60 = 0;
              v61 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + v7[678]) |= 1u;
              break;
            default:
              goto LABEL_34;
          }
          while (2)
          {
            v62 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v62 == -1 || v62 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v63 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62 + 1;
              v19 |= (unint64_t)(v63 & 0x7F) << v60;
              if (v63 < 0)
              {
                v60 += 7;
                v13 = v61++ >= 9;
                if (v13)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v19) = 0;
LABEL_137:
          v64 = 56;
LABEL_138:
          *(_DWORD *)(a1 + v64) = v19;
          goto LABEL_145;
      }
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100F19648()
{
  sub_1015A2E04(qword_102309128, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102309128, (void *)&_mh_execute_header);
}

void sub_100F19730(id a1)
{
  qword_102309188 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMicroLocationNotifierSilo"));
}

uint64_t sub_100F197E4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F21410;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102309198 != -1)
    dispatch_once(&qword_102309198, block);
  return qword_1023118F0;
}

void sub_100F19970(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;

  v6 = sub_100197040();
  if ((sub_10075FBEC(v6) & 1) != 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Notifier adding a client for Milo connection event updates\", \"connectionToken\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    if (objc_msgSend(*(id *)(a1 + 3544), "objectForKey:", a3))
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v8 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Adding a client for MiLo connection event updates failed, a client with same connection token exists\"}", buf, 0x12u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      }
      v9 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        *(_DWORD *)buf = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Adding a client for MiLo connection event updates failed, a client with same connection token exists", "{\"msg%{public}.0s\":\"Adding a client for MiLo connection event updates failed, a client with same connection token exists\"}", buf, 0x12u);
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 3544), "setObject:forKeyedSubscript:", a2, a3);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "registerForMiloServiceEventUpdates, MicroLocations not supported on this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "registerForMiloServiceEventUpdates, MicroLocations not supported on this platform", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::registerForMiloServiceEventUpdates(id<CLMicroLocationNotifierClientProtocol>, NSUUID *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_100F19D04(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;

  v5 = sub_100197040();
  if ((sub_10075FBEC(v5) & 1) != 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Notifier removed a client for Milo connection event updates\", \"connectionToken\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    objc_msgSend(*(id *)(a1 + 3544), "removeObjectForKey:", a3);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "unregisterForMiloServiceEventUpdates, MicroLocations not supported on this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "unregisterForMiloServiceEventUpdates, MicroLocations not supported on this platform", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::unregisterForMiloServiceEventUpdates(id<CLMicroLocationNotifierClientProtocol>, NSUUID *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_100F19F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  v4 = sub_100197040();
  if ((sub_10075FBEC(v4) & 1) != 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Added a client for Milo prediction event updates\"}", buf, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 3552), "addObject:", a2);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "registerForMiloPredictionEventUpdates, MicroLocations not supported on this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "registerForMiloPredictionEventUpdates, MicroLocations not supported on this platform", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::registerForMiloPredictionEventUpdates(id<CLMicroLocationNotifierClientProtocol>)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100F1A1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  v4 = sub_100197040();
  if ((sub_10075FBEC(v4) & 1) != 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"removed a client for Milo prediction event updates\"}", buf, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 3552), "removeObject:", a2);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "unregisterForMiloPredictionEventUpdates, MicroLocations not supported on this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "unregisterForMiloPredictionEventUpdates, MicroLocations not supported on this platform", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::unregisterForMiloPredictionEventUpdates(id<CLMicroLocationNotifierClientProtocol>)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100F1A478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100F1A4AC(uint64_t a1, const std::string *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v8;
  uint64_t v9;
  void *i;
  id v11;
  id v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double Current;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *__p;
  _QWORD *v54;
  unint64_t v55;
  uint8_t buf[4];
  __int128 v57[9];
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[2];
  char v76;
  uint64_t v77;
  _BYTE v78[128];

  __p = 0;
  v54 = 0;
  v55 = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v8 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v49, v78, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v50;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v50 != v9)
          objc_enumerationMutation(a4);
        v11 = objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i), "locationType");
        v12 = v11;
        v13 = v54;
        if ((unint64_t)v54 >= v55)
        {
          v15 = __p;
          v16 = ((char *)v54 - (_BYTE *)__p) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            sub_100259694();
          v18 = v55 - (_QWORD)__p;
          if ((uint64_t)(v55 - (_QWORD)__p) >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)sub_10025E6A0((uint64_t)&v55, v19);
            v15 = __p;
            v13 = v54;
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[8 * v16];
          *(_QWORD *)v21 = v12;
          v14 = v21 + 8;
          while (v13 != v15)
          {
            v22 = *--v13;
            *((_QWORD *)v21 - 1) = v22;
            v21 -= 8;
          }
          __p = v21;
          v54 = v14;
          v55 = (unint64_t)&v20[8 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v54 = v11;
          v14 = v13 + 1;
        }
        v54 = v14;
      }
      v8 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v49, v78, 16);
    }
    while (v8);
  }
  sub_1002BBD74((uint64_t)&v44);
  LODWORD(v48) = v48 | 2;
  if (v45 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v45, a2);
  LODWORD(v48) = v48 | 4;
  v46 = a3;
  *(_DWORD *)buf = 0;
  sub_1000B0C3C((int *)buf);
  *(_QWORD *)&v75[0] = sub_1000B0D38((ssize_t)buf);
  *((_QWORD *)&v75[0] + 1) = v23;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_100F27F7C(v75, (uint64_t)&v44, (uint64_t)v57, Current);
  sub_1000B0F04((uint64_t *)(a1 + 552), v57);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v57[2]);
  sub_1000B0D18((unsigned int *)buf);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  sub_10025EA00(&v41, __p, (uint64_t)v54, ((char *)v54 - (_BYTE *)__p) >> 3);
  sub_10038459C(a1 + 584, (uint64_t)a2, a3, (uint64_t)&v41, a6, (uint64_t)v75);
  v32 = v41;
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  memset((char *)&v57[1] + 8, 0, 48);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  memset(&v57[6], 0, 48);
  v58 = 0;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v62 = -1;
  v70 = -1;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  if (v77 == -1)
  {
    if (!v76)
    {
      sub_1019330B4((uint64_t)v32, v25, v26, v27, v28, v29, v30, v31, v33, v34, v35, v36, a5, a6, (uint64_t)a2, a3, (uint64_t)v41, (uint64_t)v42, v43,
        v44,
        (uint64_t)v45,
        v46,
        v47,
        v48);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNotifier.mm", 1894, "createServiceForClient");
      __break(1u);
    }
    *((_QWORD *)&v57[0] + 1) = 1;
    v71 = v75[0];
  }
  else
  {
    *((_QWORD *)&v57[0] + 1) = 2;
    v70 = v77;
  }
  sub_100F275F0();
}

void sub_100F1A950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  sub_100F2770C(&a42);
  sub_1002D3480((wireless_diagnostics::google::protobuf::MessageLite *)&a20);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100F1AA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100F1AAC0(uint64_t a1, std::string *a2, void *a3, uint64_t a4, unsigned __int8 *a5)
{
  id v8;
  std::string::size_type v9;
  double Current;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t buf;
  uint64_t v28;
  uint64_t v29[2];
  __int128 v30;
  _UNKNOWN **v31;
  _QWORD v32[15];
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  __int128 __p;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::string __str;
  char v51;
  uint64_t v52;
  __int128 v53;
  char v54;

  v8 = sub_1003577C0(a3, (uint64_t)&v53);
  if (v54)
  {
    sub_1002BBDA0((uint64_t)&v22);
    LODWORD(v26) = v26 | 2;
    if (v23 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v23, a2);
    if (!v54)
      sub_10028DF3C();
    memset(&__str, 0, sizeof(__str));
    if ((sub_10026A098((uint64_t)&v53, &__str) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v30);
      *(_QWORD *)&v30 = &off_10212A508;
      sub_10026A9C8((uint64_t)&v30);
    }
    LODWORD(v26) = v26 | 4;
    if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v24, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    LODWORD(buf) = 0;
    sub_1000B0C3C((int *)&buf);
    __str.__r_.__value_.__r.__words[0] = sub_1000B0D38((ssize_t)&buf);
    __str.__r_.__value_.__l.__size_ = v9;
    Current = j__CFAbsoluteTimeGetCurrent();
    sub_100F28004(&__str, (uint64_t)&v22, (uint64_t)&v30, Current);
    sub_1000B0F04((uint64_t *)(a1 + 552), &v30);
    sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v32[1]);
    sub_1000B0D18((unsigned int *)&buf);
    if (!v54)
      sub_10028DF3C();
    sub_100384644(a1 + 584, (unsigned __int8 *)a2, v53, *((uint64_t *)&v53 + 1), a5, (__n128 *)&__str);
    memset(v32, 0, 48);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    memset(&v32[9], 0, 48);
    v33 = 0;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    __p = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v37 = -1;
    v45 = -1;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    if (v52 != -1)
    {
      *((_QWORD *)&v30 + 1) = 4;
      if (!v54)
        sub_10028DF3C();
      v46 = v53;
      v45 = v52;
LABEL_16:
      sub_100F275F0();
    }
    if (v51)
    {
      *((_QWORD *)&v30 + 1) = 3;
      v46 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      goto LABEL_16;
    }
    sub_101933364(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, (uint64_t)v23, (uint64_t)v24, v25, v26, buf, v28, v29[0],
      v29[1],
      v30,
      *((uint64_t *)&v30 + 1),
      (uint64_t)v31,
      v32[0]);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNotifier.mm", 1925, "deleteServiceForClient");
  }
  else
  {
    sub_1019331FC(v8);
  }
  __break(1u);
}

void sub_100F1AEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::bad_cast a21)
{
  sub_100F2770C(&a21);
  sub_1002D3C54((wireless_diagnostics::google::protobuf::MessageLite *)&a12);
  _Unwind_Resume(a1);
}

void sub_100F1AFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100F1AFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 *v5;
  void *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  __int128 __p;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[8];
  __int128 buf;
  uint64_t v30;
  _QWORD v31[6];

  sub_1003847E0(a1 + 584, a2, a4, &v6);
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  __p = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v19 = -1;
  v27 = -1;
  memset(v28, 0, 48);
  v8 = 5;
  v4 = (__int128 *)v6;
  v5 = v7;
  if (v6 != v7)
  {
    do
    {
      memset(v31, 0, sizeof(v31));
      buf = *v4;
      v30 = *((_QWORD *)v4 + 2);
      sub_100F2EE20(v28, &buf);
      sub_10047F25C(v31);
      v4 += 2;
    }
    while (v4 != v5);
  }
  sub_100F275F0();
}

void sub_100F1B23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_100F2770C(&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F1B318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100F1B34C(uint64_t a1, std::string *a2, void *a3, void *a4, const void **a5)
{
  id v9;
  std::string::size_type v10;
  double Current;
  uint64_t v12;
  int v13;
  _BYTE v14[8];
  std::string *v15;
  std::string *v16;
  int v17;
  std::bad_cast v18[3];
  _OWORD v19[4];
  _QWORD v20[6];
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[12];
  uint64_t v28;
  __int128 v29;
  _QWORD v30[8];
  std::string __str;
  uint64_t v32[2];
  char v33;
  __int128 v34;
  char v35;

  sub_1003577C0(a3, (uint64_t)&v34);
  v9 = sub_1003577C0(a4, (uint64_t)v32);
  if (!v35)
  {
    sub_1019334AC(v9);
LABEL_25:
    __break(1u);
    return;
  }
  if (!v33)
  {
    sub_101933614(v9);
    goto LABEL_25;
  }
  sub_1002BBDCC((uint64_t)v14);
  v17 |= 2u;
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v15, a2);
  if (!v35)
    sub_10028DF3C();
  memset(&__str, 0, sizeof(__str));
  if ((sub_10026A098((uint64_t)&v34, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v18);
    v18[0].__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    sub_10026A9C8((uint64_t)v18);
  }
  v17 |= 4u;
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v16, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v13 = 0;
  sub_1000B0C3C(&v13);
  __str.__r_.__value_.__r.__words[0] = sub_1000B0D38((ssize_t)&v13);
  __str.__r_.__value_.__l.__size_ = v10;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_100F2808C(&__str, (uint64_t)v14, (uint64_t)v18, Current);
  sub_1000B0F04((uint64_t *)(a1 + 552), (__int128 *)v18);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)((char *)v19 + 8));
  sub_1000B0D18((unsigned int *)&v13);
  if (!v35 || !v33)
    sub_10028DF3C();
  v12 = sub_1003847E8(a1 + 584, (size_t *)a2, v34, *((uint64_t *)&v34 + 1), v32[0], v32[1], a5);
  memset(v19, 0, 48);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  v25 = -1;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v28 = -1;
  memset(v30, 0, 48);
  if (v12 != -1)
  {
    v18[1].__vftable = (std::bad_cast_vtbl *)8;
    v28 = v12;
    if (v35)
    {
      v29 = v34;
      sub_100F275F0();
    }
    sub_10028DF3C();
  }
  sub_100F2C0D8(v30);
  sub_1004A4854(&v27[1]);
  if ((_QWORD)v26)
  {
    *((_QWORD *)&v26 + 1) = v26;
    operator delete((void *)v26);
  }
  sub_10047F25C(v20);
  sub_10047F25C(v19);
  sub_1002D43F8((wireless_diagnostics::google::protobuf::MessageLite *)v14);
}

void sub_100F1B66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::bad_cast a18)
{
  sub_100F2770C(&a18);
  sub_1002D43F8((wireless_diagnostics::google::protobuf::MessageLite *)&a12);
  _Unwind_Resume(a1);
}

void sub_100F1B790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100F1B7C4(uint64_t a1, std::string *a2, void *a3, void *a4, unsigned __int8 *a5)
{
  id v9;
  id v10;
  std::string::size_type v11;
  double Current;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  std::string *v16;
  std::string *v17;
  int v18;
  std::bad_cast v19[18];
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::string __str;
  uint64_t v38[2];
  char v39;
  __int128 v40;
  char v41;

  v9 = sub_1003577C0(a3, (uint64_t)&v40);
  if (!v41)
  {
    sub_10193377C(v9);
LABEL_23:
    __break(1u);
    return;
  }
  v10 = sub_1003577C0(a4, (uint64_t)v38);
  if (!v39)
  {
    sub_1019338E4(v10);
    goto LABEL_23;
  }
  sub_1002BBDF8((uint64_t)v15);
  v18 |= 2u;
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v16, a2);
  if (!v41)
    sub_10028DF3C();
  memset(&__str, 0, sizeof(__str));
  if ((sub_10026A098((uint64_t)&v40, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v19);
    v19[0].__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    sub_10026A9C8((uint64_t)v19);
  }
  v18 |= 4u;
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v17, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v14 = 0;
  sub_1000B0C3C(&v14);
  __str.__r_.__value_.__r.__words[0] = sub_1000B0D38((ssize_t)&v14);
  __str.__r_.__value_.__l.__size_ = v11;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_100F28114(&__str, (uint64_t)v15, (uint64_t)v19, Current);
  sub_1000B0F04((uint64_t *)(a1 + 552), (__int128 *)v19);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v19[4]);
  sub_1000B0D18((unsigned int *)&v14);
  if (!v41 || !v39)
    sub_10028DF3C();
  v13 = sub_1003847F0(a1 + 584, (unsigned __int8 *)a2, v40, *((uint64_t *)&v40 + 1), v38[0], v38[1], a5);
  sub_10029A064((uint64_t *)(a1 + 552));
  if (v13 != -1)
  {
    memset(&v19[3], 0, 48);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    memset(&v19[12], 0, 48);
    v20 = 0;
    v24 = -1;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v19[1].__vftable = (std::bad_cast_vtbl *)9;
    v32 = v13;
    if (v41)
    {
      v33 = v40;
      sub_100F275F0();
    }
    sub_10028DF3C();
  }
  sub_1002D4B9C((wireless_diagnostics::google::protobuf::MessageLite *)v15);
}

void sub_100F1BAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::bad_cast a18)
{
  sub_100F2770C(&a18);
  sub_1002D4B9C((wireless_diagnostics::google::protobuf::MessageLite *)&a12);
  _Unwind_Resume(a1);
}

void sub_100F1BBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1BC10(uint64_t a1, const std::string *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  double Current;
  std::string::size_type v10;
  int v11;
  _BYTE v12[8];
  std::string *v13;
  std::string *v14;
  std::string *v15;
  int v16;
  double v17;
  __int128 v18;
  _UNKNOWN **v19;
  _QWORD v20[15];
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::string __str;
  __int128 v39;
  char v40;
  uint64_t v41[2];
  char v42;

  v7 = sub_1003577C0(a3, (uint64_t)v41);
  if (!v42)
  {
    sub_101933A4C(v7);
LABEL_31:
    __break(1u);
    return;
  }
  v8 = sub_1003577C0(a4, (uint64_t)&v39);
  if (!v40)
  {
    sub_101933BB4(v8);
    goto LABEL_31;
  }
  Current = j__CFAbsoluteTimeGetCurrent();
  v17 = Current;
  sub_1002BBEA8((uint64_t)v12);
  v16 |= 2u;
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v13, a2);
  if (!v42)
    sub_10028DF3C();
  memset(&__str, 0, sizeof(__str));
  if ((sub_10026A098((uint64_t)v41, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v18);
    *(_QWORD *)&v18 = &off_10212A508;
    sub_10026A9C8((uint64_t)&v18);
  }
  v16 |= 4u;
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v14, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (!v40)
    sub_10028DF3C();
  memset(&__str, 0, sizeof(__str));
  if ((sub_10026A098((uint64_t)&v39, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v18);
    *(_QWORD *)&v18 = &off_10212A508;
    sub_10026A9C8((uint64_t)&v18);
  }
  v16 |= 8u;
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v15, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v11 = 0;
  sub_1000B0C3C(&v11);
  __str.__r_.__value_.__r.__words[0] = sub_1000B0D38((ssize_t)&v11);
  __str.__r_.__value_.__l.__size_ = v10;
  sub_100F2819C(&__str, (uint64_t)v12, (uint64_t)&v18, Current);
  sub_1000B0F04((uint64_t *)(a1 + 552), &v18);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v20[1]);
  sub_1000B0D18((unsigned int *)&v11);
  if (!v42 || !v40)
    sub_10028DF3C();
  if ((sub_1003847FC(a1 + 584, v41[0], v41[1], &v39, (uint64_t)&v17, 1) & 1) == 0)
  {
    memset(v20, 0, 48);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    memset(&v20[9], 0, 48);
    v21 = 0;
    v25 = -1;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v33 = -1;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    *((_QWORD *)&v18 + 1) = 10;
    if (v40)
    {
      v37 = v39;
      v33 = 29;
      sub_100F275F0();
    }
    sub_10028DF3C();
  }
  sub_1002D7058((wireless_diagnostics::google::protobuf::MessageLite *)v12);
}

void sub_100F1BFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::bad_cast a20)
{
  sub_100F2770C(&a20);
  sub_1002D7058((wireless_diagnostics::google::protobuf::MessageLite *)&a12);
  _Unwind_Resume(a1);
}

void sub_100F1C11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1C138(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  double Current;
  std::string::size_type v12;
  int v13;
  _BYTE v14[8];
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  int v19;
  double v20;
  __int128 v21;
  char v22;
  std::bad_cast v23[2];
  _UNKNOWN **v24;
  uint64_t v25;
  std::string __str;
  __int128 v27;
  char v28;
  uint64_t v29[2];
  char v30;
  uint64_t v31[2];
  char v32;

  v9 = sub_1003577C0(a3, (uint64_t)v31);
  if (!v32)
  {
    sub_101933D1C(v9);
LABEL_39:
    __break(1u);
    return;
  }
  v10 = sub_1003577C0(a4, (uint64_t)v29);
  if (!v30)
  {
    sub_101933E84(v10);
    goto LABEL_39;
  }
  Current = j__CFAbsoluteTimeGetCurrent();
  v20 = Current;
  LOBYTE(v27) = 0;
  v28 = 0;
  if (a5)
  {
    sub_1003577C0(a5, (uint64_t)v23);
    v27 = *(_OWORD *)&v23[0].__vftable;
    v28 = (char)v24;
  }
  sub_1002BBE78((uint64_t)v14);
  v19 |= 2u;
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v15, a2);
  if (!v32)
    sub_10028DF3C();
  memset(&__str, 0, sizeof(__str));
  if ((sub_10026A098((uint64_t)v31, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v23);
    v23[0].__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    sub_10026A9C8((uint64_t)v23);
  }
  v19 |= 4u;
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v16, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (!v30)
    sub_10028DF3C();
  memset(&__str, 0, sizeof(__str));
  if ((sub_10026A098((uint64_t)v29, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v23);
    v23[0].__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    sub_10026A9C8((uint64_t)v23);
  }
  v19 |= 8u;
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v17, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v28)
  {
    memset(&__str, 0, sizeof(__str));
    if ((sub_10026A098((uint64_t)&v27, &__str) & 1) == 0)
    {
      std::bad_cast::bad_cast(v23);
      v23[0].__vftable = (std::bad_cast_vtbl *)&off_10212A508;
      sub_10026A9C8((uint64_t)v23);
    }
    v19 |= 0x10u;
    if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v18, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v13 = 0;
  sub_1000B0C3C(&v13);
  __str.__r_.__value_.__r.__words[0] = sub_1000B0D38((ssize_t)&v13);
  __str.__r_.__value_.__l.__size_ = v12;
  sub_100F28224(&__str, (uint64_t)v14, (uint64_t)v23, Current);
  sub_1000B0F04((uint64_t *)(a1 + 552), (__int128 *)v23);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v25);
  sub_1000B0D18((unsigned int *)&v13);
  if (!v32 || !v30)
LABEL_33:
    sub_10028DF3C();
  v21 = v27;
  v22 = v28;
  if ((sub_100384804(a1 + 584, v31[0], v31[1], v29[0], v29[1], &v21, (uint64_t)&v20) & 1) == 0)
  {
    if (v30)
      sub_100F277EC();
    goto LABEL_33;
  }
  sub_1002D65EC((wireless_diagnostics::google::protobuf::MessageLite *)v14);
}

void sub_100F1C53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::bad_cast a25)
{
  void **v25;
  uint64_t v26;

  std::bad_cast::~bad_cast(&a25);
  if (*(char *)(v26 - 145) < 0)
    operator delete(*v25);
  sub_1002D65EC((wireless_diagnostics::google::protobuf::MessageLite *)&a13);
  _Unwind_Resume(a1);
}

void sub_100F1C658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100F1C674(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  _BOOL8 result;
  uint64_t v15[2];
  char v16;
  uint64_t v17[2];
  char v18;
  _BYTE v19[16];
  char v20;
  uint64_t v21[2];
  char v22;

  v10 = sub_1003577C0(a3, (uint64_t)v21);
  if (!v22)
  {
    v11 = (id)sub_101933FEC(v10);
    goto LABEL_12;
  }
  v11 = sub_1003577C0(a4, (uint64_t)v19);
  if (!v20)
  {
LABEL_12:
    v12 = (id)sub_10193414C(v11);
    goto LABEL_13;
  }
  v12 = sub_1003577C0(a5, (uint64_t)v17);
  if (!v18)
  {
LABEL_13:
    v13 = (id)sub_1019342AC(v12);
    goto LABEL_14;
  }
  v13 = sub_1003577C0(a6, (uint64_t)v15);
  if (!v18)
  {
LABEL_14:
    sub_10193440C(v13);
    goto LABEL_15;
  }
  if (!v22 || !v16)
LABEL_15:
    sub_10028DF3C();
  result = sub_100385294(a1 + 584, v21[0], v21[1], v15[0], v15[1], v17[0], v17[1]);
  if (!result)
  {
    if (v20)
      sub_100F277EC();
    goto LABEL_15;
  }
  return result;
}

void sub_100F1C81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1C838(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v12;
  id v13;
  id v14;
  _BYTE v15[17];
  _BYTE v16[16];
  char v17;
  uint64_t v18[2];
  char v19;

  v12 = sub_1003577C0(a3, (uint64_t)v18);
  if (v19)
  {
    v13 = sub_1003577C0(a4, (uint64_t)v16);
    if (v17)
    {
      v14 = sub_1003577C0(a5, (uint64_t)v15);
      if (v15[16])
      {
        if (v19 && v17)
        {
          if (sub_10038529C(a1 + 584, v18[0], v18[1], (uint64_t)v16, (uint64_t)v15, a6, a7))
          {
            if (v17)
LABEL_10:
              sub_100F277EC();
          }
          else if (v17)
          {
            goto LABEL_10;
          }
        }
LABEL_14:
        sub_10028DF3C();
      }
LABEL_13:
      sub_10193482C(v14);
      goto LABEL_14;
    }
  }
  else
  {
    v13 = (id)sub_10193456C(v12);
  }
  v14 = (id)sub_1019346CC(v13);
  goto LABEL_13;
}

void sub_100F1C9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1C9F4(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t *v18;
  uint8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t buf;
  _BYTE v24[32];
  uint64_t v25;
  __int128 v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  __int128 __p;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  __p = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v40 = -1;
  v48 = -1;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v29 = 10;
  v9 = sub_1003577C0(a4, (uint64_t)&v27[7]);
  if (v27[23])
  {
    v48 = 15;
    v52 = *(_OWORD *)&v27[7];
    if (qword_1022A00F0 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10193498C((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v19, v20, v21, v22, buf, *(uint64_t *)v24, *(uint64_t *)&v24[8], *(uint64_t *)&v24[16], *(uint64_t *)&v24[24], v25, v26,
      *((uint64_t *)&v26 + 1),
      *(uint64_t *)v27,
      *(uint64_t *)&v27[8],
      *(uint64_t *)&v27[16],
      v28);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNotifier.mm", 2159, "requestRemoveLabelsForClient");
    __break(1u);
  }
  dispatch_once(&qword_1022A00F0, &stru_102192BD0);
LABEL_3:
  v17 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v18 = a2;
    else
      v18 = (uint64_t *)*a2;
    buf = 68290050;
    *(_WORD *)v24 = 2082;
    *(_QWORD *)&v24[2] = "";
    *(_WORD *)&v24[10] = 2082;
    *(_QWORD *)&v24[12] = v18;
    *(_WORD *)&v24[20] = 2114;
    *(_QWORD *)&v24[22] = a3;
    *(_WORD *)&v24[30] = 2114;
    v25 = (uint64_t)a4;
    LOWORD(v26) = 2114;
    *(_QWORD *)((char *)&v26 + 2) = a5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fake processing requestRemoveLabelsForClient\", \"clientId\":%{public, location:escape_only}s, \"serviceIdentifier\":%{public, location:escape_only}@, \"requestIdentifier\":%{public, location:escape_only}@, \"labels\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x3Au);
  }
  sub_100F275F0();
}

void sub_100F1CC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_100F2770C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100F1CCB0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *__p[2];
  char v10;
  _BYTE v11[16];
  char v12;
  __int128 v13;
  char v14;

  v7 = sub_1003577C0(a2, (uint64_t)&v13);
  if (v14)
  {
    v8 = sub_1003577C0(a3, (uint64_t)v11);
    if (v12)
    {
      if (v14)
      {
        sub_1015A2E04(__p, (char *)objc_msgSend(a4, "UTF8String"));
        sub_1003853D4(a1 + 584, &v13, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
        if (v12)
          sub_100F277EC();
        sub_10028DF3C();
      }
      sub_10028DF3C();
    }
    sub_101934C3C(v8);
  }
  else
  {
    sub_101934AD4(v7);
  }
  __break(1u);
}

void sub_100F1CDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1CE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1CE80(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  std::string::size_type v11;
  double Current;
  int v13;
  _BYTE v14[8];
  std::string *v15;
  char v16;
  std::string *v17;
  int v18;
  std::bad_cast v19[4];
  uint64_t v20;
  std::string __str;
  _BYTE v22[16];
  char v23;
  uint64_t v24[2];
  char v25;

  v9 = sub_1003577C0(a3, (uint64_t)v24);
  if (v25)
  {
    v10 = sub_1003577C0(a4, (uint64_t)v22);
    if (v23)
    {
      if (a5)
        LODWORD(a5) = objc_msgSend(a5, "isLowLatency");
      sub_1002BBE24((uint64_t)v14);
      v18 |= 2u;
      if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v15, a2);
      if (v25)
      {
        memset(&__str, 0, sizeof(__str));
        if ((sub_10026A098((uint64_t)v24, &__str) & 1) != 0)
        {
          v18 |= 4u;
          if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          std::string::operator=(v17, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v18 |= 8u;
          v16 = (char)a5;
          v13 = 0;
          sub_1000B0C3C(&v13);
          __str.__r_.__value_.__r.__words[0] = sub_1000B0D38((ssize_t)&v13);
          __str.__r_.__value_.__l.__size_ = v11;
          Current = j__CFAbsoluteTimeGetCurrent();
          sub_100F282AC(&__str, (uint64_t)v14, (uint64_t)v19, Current);
          sub_1000B0F04((uint64_t *)(a1 + 552), (__int128 *)v19);
          sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v20);
          sub_1000B0D18((unsigned int *)&v13);
          if (v25)
          {
            sub_10038538C(a1 + 584, v24, (int)a5);
            if (v23)
              sub_100F277EC();
            sub_10028DF3C();
          }
          sub_10028DF3C();
        }
        std::bad_cast::bad_cast(v19);
        v19[0].__vftable = (std::bad_cast_vtbl *)&off_10212A508;
        sub_10026A9C8((uint64_t)v19);
      }
      sub_10028DF3C();
    }
    sub_101934F0C(v10);
  }
  else
  {
    sub_101934DA4(v9);
  }
  __break(1u);
}

void sub_100F1D0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, unsigned int a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::bad_cast a18)
{
  uint64_t v18;

  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(v18 + 32));
  sub_1000B0D18(&a11);
  sub_1002D5410((wireless_diagnostics::google::protobuf::MessageLite *)&a12);
  _Unwind_Resume(a1);
}

void sub_100F1D1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1D200(uint64_t a1, const std::string *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  double Current;
  uint8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32[38];
  std::string __str;
  __int128 v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60[2];
  char v61;

  v7 = sub_1003577C0(a3, (uint64_t)v60);
  if (v61)
  {
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v47 = -1;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v55 = -1;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v36 = 10;
    v8 = sub_1003577C0(a4, (uint64_t)&v34);
    if (v35)
    {
      if (v61)
      {
        v16 = sub_100385394(a1 + 584, v60) ? -1 : 17;
        v55 = v16;
        if (v35)
        {
          v59 = v34;
          sub_1002BBE4C((uint64_t)&v24);
          LODWORD(v28) = v28 | 2;
          if (v25 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          std::string::operator=(v25, a2);
          if (v61)
          {
            memset(&__str, 0, sizeof(__str));
            if ((sub_10026A098((uint64_t)v60, &__str) & 1) != 0)
            {
              LODWORD(v28) = v28 | 4;
              if (v26 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
                operator new();
              std::string::operator=(v26, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              HIDWORD(v23) = 0;
              sub_1000B0C3C((int *)&v23 + 1);
              __str.__r_.__value_.__r.__words[0] = sub_1000B0D38((ssize_t)&v23 + 4);
              __str.__r_.__value_.__l.__size_ = v17;
              Current = j__CFAbsoluteTimeGetCurrent();
              sub_100F28334(&__str, (uint64_t)&v24, (uint64_t)&v29, Current);
              sub_1000B0F04((uint64_t *)(a1 + 552), &v29);
              sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v32);
              sub_1000B0D18((unsigned int *)&v23 + 1);
              if (v35)
                sub_100F277EC();
              sub_10028DF3C();
            }
            std::bad_cast::bad_cast((std::bad_cast *)&v29);
            *(_QWORD *)&v29 = &off_10212A508;
            sub_10026A9C8((uint64_t)&v29);
          }
          sub_10028DF3C();
        }
      }
      sub_10028DF3C();
    }
    sub_1019351DC((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v19, v20, v21, v22, v23, v24, (uint64_t)v25, (uint64_t)v26, v27, v28, v29,
      *((uint64_t *)&v29 + 1),
      (uint64_t)v30,
      v31,
      v32[0],
      v32[1]);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNotifier.mm", 2226, "requestStopUpdatingMicroLocationForClient");
  }
  else
  {
    sub_101935074(v7);
  }
  __break(1u);
}

void sub_100F1D548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::bad_cast a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t v68;

  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(v68 + 32));
  sub_1000B0D18(&a14);
  sub_1002D5C70((wireless_diagnostics::google::protobuf::MessageLite *)&a15);
  sub_100F2770C(&a68);
  _Unwind_Resume(a1);
}

void sub_100F1D708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F1D72C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  __int128 v10;
  char v11;
  uint64_t v12[2];
  char v13;

  v7 = sub_1003577C0(a3, (uint64_t)v12);
  if (!v13)
  {
    v8 = (id)sub_101935324(v7);
    goto LABEL_6;
  }
  v8 = sub_1003577C0(a4, (uint64_t)&v10);
  if (!v11)
  {
LABEL_6:
    sub_101935484(v8);
LABEL_7:
    sub_10028DF3C();
  }
  if (!v13)
    goto LABEL_7;
  return sub_100385364(a1 + 584, a2, v12[0], v12[1], &v10);
}

void sub_100F1D900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1D924(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  _BYTE v5[17];

  v4 = sub_1003577C0(a3, (uint64_t)v5);
  if (!v5[16])
    sub_1019355E4(v4);
  sub_100382100(a1 + 584);
  sub_100F27EC0(a1);
}

void sub_100F1DAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1DAF4(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  _QWORD *v5;
  void *__p;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  _QWORD *v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];
  char v19;
  char v20;

  LOBYTE(v18[0]) = 0;
  v20 = 0;
  v16 = xmmword_101C2EEC0;
  sub_1003577C0(a3, (uint64_t)&v14);
  if (v15)
    v17 = v14;
  sub_1015A2E04(&__p, "");
  sub_100F1EC9C(a1, 0, (char *)buf);
  sub_100F2BF54((uint64_t)v18, (__int128 *)buf);
  sub_100F2BD90((uint64_t)buf);
  if (v7 < 0)
    operator delete(__p);
  if (v20)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v4 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      if (v19 >= 0)
        v5 = v18;
      else
        v5 = (_QWORD *)v18[0];
      *(_DWORD *)buf = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MicroLocation DB Tables exported\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  else
  {
    *((_QWORD *)&v16 + 1) = 0;
  }
  sub_100F27210();
}

void sub_100F1DCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100F1DD64(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  std::string::size_type v8;
  double Current;
  int v10;
  _BYTE v11[8];
  std::string *v12;
  int v13;
  std::bad_cast v14[4];
  uint64_t v15;
  std::string __str;
  __int128 v17;
  char v18;
  _BYTE v19[16];
  char v20;
  uint64_t v21[2];
  char v22;

  sub_1003577C0(a2, (uint64_t)v21);
  sub_1003577C0(a4, (uint64_t)v19);
  v7 = sub_1003577C0(a3, (uint64_t)&v17);
  if (!v22)
  {
    sub_101935744(v7);
    goto LABEL_23;
  }
  if (!v20)
  {
    sub_1019358AC(v7);
    goto LABEL_23;
  }
  if (!v18)
  {
    sub_101935A14(v7);
LABEL_23:
    __break(1u);
  }
  sub_1002BBF84((uint64_t)v11);
  if (!v22)
    sub_10028DF3C();
  memset(&__str, 0, sizeof(__str));
  if ((sub_10026A098((uint64_t)v21, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast(v14);
    v14[0].__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    sub_10026A9C8((uint64_t)v14);
  }
  v13 |= 2u;
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = 0;
  sub_1000B0C3C(&v10);
  __str.__r_.__value_.__r.__words[0] = sub_1000B0D38((ssize_t)&v10);
  __str.__r_.__value_.__l.__size_ = v8;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_100F27764(&__str, (uint64_t)v11, (uint64_t)v14, Current);
  sub_1000B0F04((uint64_t *)(a1 + 552), (__int128 *)v14);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v15);
  sub_1000B0D18((unsigned int *)&v10);
  if (!v22 || !v18 || !v20)
LABEL_20:
    sub_10028DF3C();
  if (sub_1003852A4(a1 + 584, v21[0], v21[1], &v17) != -1)
  {
    if (v18)
      sub_100F277EC();
    goto LABEL_20;
  }
  sub_1002D9B9C((wireless_diagnostics::google::protobuf::MessageLite *)v11);
}

void sub_100F1DF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::bad_cast a16)
{
  uint64_t v16;

  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(v16 + 32));
  sub_1000B0D18(&a10);
  sub_1002D9B9C((wireless_diagnostics::google::protobuf::MessageLite *)&a11);
  _Unwind_Resume(a1);
}

void sub_100F1E07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F1E098(_QWORD *a1, const std::string *a2, void *a3, void (**a4)(_QWORD, _QWORD))
{
  NSObject *v8;
  const std::string *v9;
  id v10;
  uint64_t v11;
  id v12;
  void (**v13)(_QWORD, _QWORD);
  void (**v14)(_QWORD, _QWORD);
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  id v18;
  NSDictionary *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  NSString *v33;
  uint8_t buf[8];
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const std::string *v42;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v8 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = a2;
    else
      v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2082;
    v38 = "Client request";
    v39 = 2082;
    v40 = "Current microlocation";
    v41 = 2081;
    v42 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s, \"clientIdentifier\":%{private, location:escape_only}s}", buf, 0x30u);
  }
  if (sub_10031A2A0((uint64_t)(a1 + 401), a3))
  {
    sub_100197040();
    if (!sub_10075FD94())
    {
      if (!a4)
        return 0;
LABEL_17:
      v18 = objc_alloc((Class)NSError);
      v33 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("requestCurrentMicroLocation failed internally, MiLo is not at right state"), NSLocalizedDescriptionKey);
      v19 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
      ((void (**)(_QWORD, id))a4)[2](a4, objc_msgSend(v18, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, v19));
      return 0;
    }
    v10 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:copyItems:", a3, 1);
    objc_msgSend(v10, "setObject:forKeyedSubscript:", &off_10221C380, CFSTR("shouldTriggerLocalizationScan"));
    *(_QWORD *)buf = j__CFAbsoluteTimeGetCurrent();
    v11 = sub_10031951C((uint64_t)(a1 + 401), v10, (double *)buf);
    v12 = v10;
    if (!a4)
      return v11;
  }
  else
  {
    *(_QWORD *)buf = j__CFAbsoluteTimeGetCurrent();
    v11 = sub_100319B88((uint64_t)(a1 + 401), a2, (double *)buf);
    if (!a4)
      return v11;
  }
  if (!(_DWORD)v11)
    goto LABEL_17;
  v13 = a4;
  v14 = v13;
  v15 = (_QWORD *)a1[440];
  v16 = a1[441];
  if ((unint64_t)v15 >= v16)
  {
    v20 = a1[439];
    v21 = ((uint64_t)v15 - v20) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
      sub_100259694();
    v22 = v16 - v20;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)sub_10025E6A0((uint64_t)(a1 + 441), v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = v14;
    v17 = v26 + 8;
    v28 = (char *)a1[440];
    v29 = (char *)a1[439];
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = (char *)a1[439];
    }
    a1[439] = v26;
    a1[440] = v17;
    a1[441] = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v15 = v13;
    v17 = v15 + 1;
  }
  a1[440] = v17;
  return 1;
}

void sub_100F1E43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F1E458(_QWORD *a1, char *a2, void *a3, void (**a4)(_QWORD, _QWORD))
{
  NSObject *v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  void (**v14)(_QWORD, _QWORD);
  void (**v15)(_QWORD, _QWORD);
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  id v19;
  NSDictionary *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  NSString *v34;
  uint8_t buf[8];
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  char *v43;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v8 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0)
      v9 = a2;
    else
      v9 = *(char **)a2;
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    v36 = 2082;
    v37 = "";
    v38 = 2082;
    v39 = "Client request";
    v40 = 2082;
    v41 = "Recording scan request";
    v42 = 2081;
    v43 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s, \"clientIdentifier\":%{private, location:escape_only}s}", buf, 0x30u);
  }
  if (!sub_10031A2A0((uint64_t)(a1 + 401), a3))
  {
    *(_QWORD *)buf = j__CFAbsoluteTimeGetCurrent();
    v11 = sub_1003199B4((uint64_t)(a1 + 401), (void **)a2, a3, (double *)buf);
LABEL_12:
    if (!a4)
      return v11;
    goto LABEL_19;
  }
  sub_100197040();
  if (sub_10075FD94())
  {
    v10 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:copyItems:", a3, 1);
    objc_msgSend(v10, "setObject:forKeyedSubscript:", &off_10221C380, CFSTR("shouldTriggerRecordingScan"));
    *(_QWORD *)buf = j__CFAbsoluteTimeGetCurrent();
    v11 = sub_10031951C((uint64_t)(a1 + 401), v10, (double *)buf);
    v12 = v10;
    goto LABEL_12;
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v13 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v36 = 2082;
    v37 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"device doesn't support suggestions so suppressing request\"}", buf, 0x12u);
  }
  v11 = 0;
  if (a4)
  {
LABEL_19:
    if ((_DWORD)v11)
    {
      v14 = a4;
      v15 = v14;
      v16 = (_QWORD *)a1[437];
      v17 = a1[438];
      if ((unint64_t)v16 >= v17)
      {
        v21 = a1[436];
        v22 = ((uint64_t)v16 - v21) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          sub_100259694();
        v23 = v17 - v21;
        v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)sub_10025E6A0((uint64_t)(a1 + 438), v25);
        else
          v26 = 0;
        v27 = &v26[8 * v22];
        v28 = &v26[8 * v25];
        *(_QWORD *)v27 = v15;
        v18 = v27 + 8;
        v29 = (char *)a1[437];
        v30 = (char *)a1[436];
        if (v29 != v30)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *((_QWORD *)v27 - 1) = v31;
            v27 -= 8;
          }
          while (v29 != v30);
          v29 = (char *)a1[436];
        }
        a1[436] = v27;
        a1[437] = v18;
        a1[438] = v28;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v16 = v14;
        v18 = v16 + 1;
      }
      a1[437] = v18;
    }
    else
    {
      v19 = objc_alloc((Class)NSError);
      v34 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("requestMicroLocationRecordingScan failed internally, MiLo is not at right state"), NSLocalizedDescriptionKey);
      v20 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
      ((void (**)(_QWORD, id))a4)[2](a4, objc_msgSend(v19, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, v20));
    }
  }
  return v11;
}

void sub_100F1E94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F1EC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(exception_object);
}

void sub_100F1EC9C(uint64_t a1@<X0>, int a2@<W2>, char *a3@<X8>)
{
  const char *v6;
  NSString *v7;
  const char *v8;
  NSString *v9;
  NSDictionary *v10;
  CLOSTransaction *v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  uint32_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  char *v35;
  NSObject *v36;
  void **v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  char *__s;
  void *__p[2];
  uint64_t v44;
  uint64_t v45;
  void *v46[2];
  char v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE buf[38];
  char v51;
  __int128 v52;
  uint64_t v53;
  NSFileAttributeKey v54;
  _UNKNOWN **v55;
  NSFileAttributeKey v56;
  _UNKNOWN **v57;

  if ((a2 & 1) == 0)
  {
    sub_100197040();
    if ((sub_10075D288() & 1) == 0)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v18 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Export DB requests are served in internal builds only!\"}", buf, 0x12u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      }
      v15 = qword_1022A00F8;
      if (!os_signpost_enabled((os_log_t)qword_1022A00F8))
        goto LABEL_40;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v16 = "Export DB requests are served in internal builds only!";
      v17 = "{\"msg%{public}.0s\":\"Export DB requests are served in internal builds only!\"}";
LABEL_30:
      v19 = v15;
      v20 = 18;
LABEL_39:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v16, v17, buf, v20);
LABEL_40:
      *a3 = 0;
      a3[72] = 0;
      return;
    }
  }
  sub_100014604(a1 + 248);
  if (!sub_1000A1914(a1 + 248))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Error: Unable to export MicroLocation DB - local DB is not ready!\"}", buf, 0x12u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    }
    v15 = qword_1022A00F8;
    if (!os_signpost_enabled((os_log_t)qword_1022A00F8))
      goto LABEL_40;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v16 = "Error: Unable to export MicroLocation DB - local DB is not ready!";
    v17 = "{\"msg%{public}.0s\":\"Error: Unable to export MicroLocation DB - local DB is not ready!\"}";
    goto LABEL_30;
  }
  sub_10029A064((uint64_t *)(a1 + 552));
  v6 = "ExportedMicroLocationDB.db";
  if (a2)
    v6 = "ExportedMiloDB.db";
  __s = (char *)v6;
  v7 = NSTemporaryDirectory();
  v56 = NSFilePosixPermissions;
  v57 = &off_10221C398;
  v49 = 0;
  if (!-[NSFileManager setAttributes:ofItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "setAttributes:ofItemAtPath:error:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1), v7, &v49))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v21 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v22 = -[NSString UTF8String](v7, "UTF8String");
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v22;
      *(_WORD *)&buf[28] = 2113;
      *(_QWORD *)&buf[30] = v49;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to set attributes for file\", \"filename\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    }
    v23 = qword_1022A00F8;
    if (!os_signpost_enabled((os_log_t)qword_1022A00F8))
      goto LABEL_40;
    v24 = -[NSString UTF8String](v7, "UTF8String");
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v24;
    *(_WORD *)&buf[28] = 2113;
    *(_QWORD *)&buf[30] = v49;
    v16 = "failed to set attributes for file";
    v17 = "{\"msg%{public}.0s\":\"failed to set attributes for file\", \"filename\":%{private, location:escape_only}s, \""
          "error\":%{private, location:escape_only}@}";
    v19 = v23;
LABEL_38:
    v20 = 38;
    goto LABEL_39;
  }
  if (a2)
    v8 = "microLocationDB";
  else
    v8 = "microLocationDiagnosticDB";
  v9 = -[NSString stringByAppendingPathComponent:](v7, "stringByAppendingPathComponent:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  if (-[NSFileManager fileExistsAtPath:isDirectory:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:isDirectory:", v9, 0))
  {
    v46[0] = 0;
    if (!-[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", v9, v46))
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v29 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        v30 = -[NSString UTF8String](v9, "UTF8String");
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v30;
        *(_WORD *)&buf[28] = 2113;
        *(void **)&buf[30] = v46[0];
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to remove existing destination directory\", \"directory\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      }
      v31 = qword_1022A00F8;
      if (!os_signpost_enabled((os_log_t)qword_1022A00F8))
        goto LABEL_40;
      v32 = -[NSString UTF8String](v9, "UTF8String");
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v32;
      *(_WORD *)&buf[28] = 2113;
      *(void **)&buf[30] = v46[0];
      v16 = "failed to remove existing destination directory";
      v17 = "{\"msg%{public}.0s\":\"failed to remove existing destination directory\", \"directory\":%{private, location:"
            "escape_only}s, \"error\":%{private, location:escape_only}@}";
      v19 = v31;
      goto LABEL_38;
    }
  }
  v48 = 0;
  v54 = NSFilePosixPermissions;
  v55 = &off_10221C3B0;
  v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1);
  v11 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "com.apple.locationd.microlocation.export-db");
  if (!-[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v9, 0, v10, &v48))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v25 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v26 = -[NSString UTF8String](v9, "UTF8String");
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v26;
      *(_WORD *)&buf[28] = 2113;
      *(_QWORD *)&buf[30] = v48;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to create destination directory\", \"directory\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    }
    v27 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v28 = -[NSString UTF8String](v9, "UTF8String");
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v28;
      *(_WORD *)&buf[28] = 2113;
      *(_QWORD *)&buf[30] = v48;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to create destination directory", "{\"msg%{public}.0s\":\"failed to create destination directory\", \"directory\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
    }

    goto LABEL_40;
  }
  sub_1015A2E04(v46, (char *)-[NSString UTF8String](-[NSString stringByAppendingPathComponent:](v9, "stringByAppendingPathComponent:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s)), "UTF8String"));
  sub_100F279D4(a1, (uint64_t)v46);
  v45 = 0;
  if (!a2)
    operator new();
  sub_100308BCC(__p, a1 + 248);
  if (!sub_100308BD4((uint64_t *)__p))
    operator new();
  v12 = sub_1003090A8(__p, v46);
  v13 = 0;
  if ((v12 & 1) != 0)
  {
    v33 = -[NSString cStringUsingEncoding:](v9, "cStringUsingEncoding:", 4);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v34 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v33;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"trying to issue sandbox extension\", \"path\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    v35 = (char *)sandbox_extension_issue_file("com.apple.app-sandbox.read", v33, 0);
    __p[0] = 0;
    __p[1] = 0;
    v44 = 0;
    if (v35)
    {
      sub_1015A2E04(buf, v35);
      if (SHIBYTE(v44) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = *(_OWORD *)buf;
      v44 = *(_QWORD *)&buf[16];
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v36 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        v37 = __p;
        if (v44 < 0)
          v37 = (void **)__p[0];
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v33;
        *(_WORD *)&buf[28] = 2081;
        *(_QWORD *)&buf[30] = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"issued a sandbox extension\", \"path\":%{private, location:escape_only}s, \"data\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      free(v35);
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v38 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v33;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to issue sandbox extension for file\", \"filename\":%{private, location:escape_only}s}", buf, 0x1Cu);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      }
      v39 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = v33;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to issue sandbox extension for file", "{\"msg%{public}.0s\":\"failed to issue sandbox extension for file\", \"filename\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
    }
    sub_1015A2E04(buf, v33);
    sub_1015A2E04(&buf[24], __s);
    if (SHIBYTE(v44) < 0)
    {
      sub_100115CE4(&v52, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      v52 = *(_OWORD *)__p;
      v53 = v44;
    }

    sub_100F2C218(a3, (__int128 *)buf);
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    if (v51 < 0)
      operator delete(*(void **)&buf[24]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v40 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to copy MiLo database tables!\"}", buf, 0x12u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    }
    v41 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to copy MiLo database tables!", "{\"msg%{public}.0s\":\"failed to copy MiLo database tables!\"}", buf, 0x12u);
    }
    v45 = 0;
    sub_100F279D4(a1, (uint64_t)v46);

    *a3 = 0;
    a3[72] = 0;
    v13 = v45;
  }
  v45 = 0;
  if (v13)
  {
    sub_10027AD24(v13);
    operator delete();
  }
  if (v47 < 0)
    operator delete(v46[0]);
}

void sub_100F1FB0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  operator delete();
}

void sub_100F1FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(exception_object);
}

void sub_100F20040(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  CFStringRef v4;
  int v5;
  _BOOL4 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  __int16 v19;
  uint8_t v20[40];
  uint8_t buf[8];
  _BYTE v22[10];
  char v23;
  BOOL v24[88];
  uint64_t v25;
  char v26;

  sub_1001E4804(buf);
  v24[0] = 0;
  v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsClusterAnchorValueStatisticsEnabled", 0x8000100u, kCFAllocatorNull);
  v5 = sub_1001E48E4(*(uint64_t *)buf, (uint64_t)v4, v24);
  CFRelease(v4);
  v6 = v24[0];
  v7 = *(std::__shared_weak_count **)v22;
  if (*(_QWORD *)v22)
  {
    v8 = (unint64_t *)(*(_QWORD *)v22 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v6)
    v10 = 0;
  else
    v10 = v5;
  if (v10 == 1)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v22 = 2082;
      *(_QWORD *)&v22[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"ClusterAnchorValueStatistics feature is not enabled in setting, won't fetch data from DB\"}", buf, 0x12u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    }
    v12 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v22 = 2082;
      *(_QWORD *)&v22[2] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ClusterAnchorValueStatistics feature is not enabled in setting, won't fetch data from DB", "{\"msg%{public}.0s\":\"ClusterAnchorValueStatistics feature is not enabled in setting, won't fetch data from DB\"}", buf, 0x12u);
    }
    *a2 = 0;
    a2[40] = 0;
  }
  else
  {
    sub_1015A2E04(buf, "home");
    sub_100282A34(a1 + 248, (uint64_t)buf, v24);
    if (v23 < 0)
      operator delete(*(void **)buf);
    if (v26)
    {
      v13 = v25;
      if (!v25)
        v13 = *(_QWORD *)(qword_102310460 + 32);
      v14 = *(_QWORD *)(v13 + 8);
      if (!v14)
        v14 = *(_QWORD *)(qword_102310458 + 8);
      sub_1003A4440(v20, v14);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v15 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "recovered anchor value map", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
        v19 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "recovered anchor value map", &v19, 2);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "std::optional<CLMicroLocationAnchorValueStatisticsMap> CLMicroLocationNotifier::getMicroLocationAnchorStatisticsMap()", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      sub_100342790((uint64_t)a2, (uint64_t)v20);
      a2[40] = 1;
      sub_100300B8C((uint64_t)v20);
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v16 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v22 = 2082;
        *(_QWORD *)&v22[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"couldn't get most recent cluster anchor value statistics. either database is inaccessible or no model anchor cluster value statistics has been learnt yet\"}", buf, 0x12u);
      }
      *a2 = 0;
      a2[40] = 0;
    }
    sub_1002FFD68((uint64_t)v24);
  }
}

void sub_100F204C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  sub_100300B8C((uint64_t)&a12);
  sub_1002FFD68(v22 - 176);
  _Unwind_Resume(a1);
}

void sub_100F2057C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F20598(const void **a1, uint64_t *a2, const void *a3)
{
  NSObject *v6;
  uint64_t *v7;
  uint64_t v8;
  const void **v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  void **v16[2];
  uint64_t v17;
  void **v18;
  uint64_t buf;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t *v27;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v6 = qword_1022A00F8;
  if (!os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a1 + 442;
    if (!a1[442])
      goto LABEL_16;
    goto LABEL_11;
  }
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  buf = 68289795;
  v20 = 2082;
  v21 = "";
  v22 = 2082;
  v23 = "Client request";
  v24 = 2082;
  v25 = "learning";
  v26 = 2081;
  v27 = v7;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s, \"clientIdentifier\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
  v8 = qword_1022A00F0;
  v9 = a1 + 442;
  if (a1[442])
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
LABEL_11:
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      buf = 68289026;
      v20 = 2082;
      v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"learning callback, already exists, release it first\"}", (uint8_t *)&buf, 0x12u);
    }
    _Block_release(*v9);
    v8 = qword_1022A00F0;
  }
  if (v8 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
LABEL_16:
  v11 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    buf = 68289026;
    v20 = 2082;
    v21 = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"learning callback, block copy it\"}", (uint8_t *)&buf, 0x12u);
  }
  _Block_copy(a3);
  a1[442] = a3;
  v12 = (*((uint64_t (**)(const void **))*a1 + 50))(a1);
  if ((v12 & 1) != 0)
  {
    sub_1002F5A5C(&buf, (uint64_t)(a1 + 14), (uint64_t)(a1 + 31));
    sub_10030AFAC(v16, (uint64_t)(a1 + 15), (uint64_t)(a1 + 31));
    sub_1002FFAA4(&buf);
    sub_10030AFB0(v16);
    v18 = (void **)&v17;
    sub_1002AE76C(&v18);
    v16[0] = (void **)((char *)&v21 + 6);
    sub_1002AE76C(v16);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v13 = qword_1022A00F8;
    v14 = os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO);
    if (v14)
    {
      buf = 68289026;
      v20 = 2082;
      v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"client request learning but Microlocation is not enabled\"}", (uint8_t *)&buf, 0x12u);
    }
    sub_100F25190(v14, v9, (uint64_t)CFSTR("Microlocation is not enabled at this moment"));
  }
  return v12;
}

void sub_100F208FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a9 = (void **)&a17;
  sub_1002AE76C(&a9);
  _Unwind_Resume(a1);
}

void sub_100F20A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F20A88(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  char v12;
  uint64_t buf;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v8 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    buf = 68290307;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "Client request";
    v18 = 2082;
    v19 = "truth label donation request";
    v20 = 2081;
    v21 = v9;
    v22 = 2082;
    v23 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
    v24 = 2082;
    v25 = objc_msgSend(objc_msgSend(a4, "UUIDString"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s, \"clientIdentifier\":%{private, location:escape_only}s, \"truthLabelUUID\":%{public, location:escape_only}s, \"triggerUUID\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x44u);
  }
  sub_1003577C0(a3, (uint64_t)&buf);
  sub_1003577C0(a4, (uint64_t)v11);
  result = 0;
  if (BYTE6(v15))
  {
    if (v12)
      return sub_100319D5C(a1 + 3208, (uint64_t *)a2, &buf, v11);
  }
  return result;
}

void sub_100F20D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F20D84(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v10;
  id v11;
  NSObject *v12;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;

  v10 = objc_msgSend(*(id *)(a1 + 3480), "stringFromDate:", a4);
  v11 = objc_msgSend(*(id *)(a1 + 3480), "stringFromDate:", a5);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v12 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 68290306;
    v14[1] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = "Client request";
    v19 = 2082;
    v20 = "MicroLocation donate truth label for recording events between dates";
    v21 = 2082;
    v22 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
    v23 = 2082;
    v24 = objc_msgSend(v10, "UTF8String");
    v25 = 2082;
    v26 = objc_msgSend(v11, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s, \"truthLabelUUID\":%{public, location:escape_only}s, \"startDate\":%{public, location:escape_only}s, \"endDate\":%{public, location:escape_only}s}", (uint8_t *)v14, 0x44u);
  }
  sub_1003577C0(a3, (uint64_t)v14);
  if (BYTE6(v16))
    return sub_100319FDC(a1 + 3208, a2, (uint64_t)v14, a4, a5);
  else
    return 0;
}

void sub_100F20F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F2104C(uint64_t a1, void *a2)
{
  NSObject *v4;
  _QWORD v5[6];
  unsigned __int8 **p_buf;
  unsigned __int8 *buf;
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  id v13;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    buf = (unsigned __int8 *)68289539;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = objc_msgSend(objc_msgSend(a2, "bundleId"), "UTF8String");
    v12 = 2081;
    v13 = objc_msgSend(objc_msgSend(a2, "launchReason"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onForegroundAppLaunched\", \"id\":%{private, location:escape_only}s, \"reason\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
  }
  sub_100F25FE8(&buf);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100F260E8;
  v5[3] = &unk_102192A28;
  v5[4] = a2;
  v5[5] = a1;
  sub_10035A854(objc_msgSend(a2, "bundleId"), &buf, (uint64_t)v5);
  p_buf = &buf;
  sub_100259608((void ***)&p_buf);
}

void sub_100F211BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_100F211EC(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[6];
  void **v8[2];
  uint8_t buf[1640];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received onNowPlaying Duet Callback", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    LOWORD(v8[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Received onNowPlaying Duet Callback", v8, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onNowPlaying(CLDuetNowPlaying *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100F25FE8(buf);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100F261FC;
  v7[3] = &unk_102192A28;
  v7[4] = a2;
  v7[5] = a1;
  sub_10035A854(objc_msgSend(a2, "bundleId"), (unsigned __int8 **)buf, (uint64_t)v7);
  v8[0] = (void **)buf;
  sub_100259608(v8);
}

void sub_100F213DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

void sub_100F21410()
{
  NSObject *v0;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  std::string *v8;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v0 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    sub_100F21580(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289283;
    v4 = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2081;
    v8 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Microlocation: createInUniverse\", \"Microlocation Version\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_100F21554()
{
  operator delete();
}

void sub_100F21580(std::string *a1@<X8>)
{
  CFStringRef v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::string __p;
  std::string v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  sub_1001E4804(&v9);
  memset(&v8, 0, sizeof(v8));
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsVersion", 0x8000100u, kCFAllocatorNull);
  v3 = sub_1000BD5F0(v9, (uint64_t)v2, &v8);
  CFRelease(v2);
  if (v3)
  {
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
    else
      __p = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100115CE4(a1, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *a1 = __p;
    }
  }
  else
  {
    sub_1015A2E04(a1, "2.0.9");
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100F216C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  sub_100261F44((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_100F21704(uint64_t a1, void *a2)
{
  void *__p[2];

  sub_1015A2E04(__p, "");
  sub_100F222E8(a1, a2, (uint64_t)__p);
}

void sub_100F21788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100F24968(&a9, 0);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F217B0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport, unregister rapport session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Rapport, unregister rapport session", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::stopRapportSession()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  objc_msgSend(*(id *)(a1 + 224), "invalidate");

  *(_QWORD *)(a1 + 224) = 0;
}

void sub_100F21954(uint64_t a1)
{
  sub_100F217B0(a1 - 136);
}

id sub_100F2195C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport, register rapport session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Rapport, register rapport session", v9, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::startRapportSession()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_QWORD *)(a1 + 224) = objc_alloc_init((Class)RPCompanionLinkClient);
  objc_msgSend(*(id *)(a1 + 224), "setDispatchQueue:", objc_msgSend(*(id *)(a1 + 40), "queue"));
  objc_msgSend(*(id *)(a1 + 224), "setControlFlags:", 4);
  objc_msgSend(*(id *)(a1 + 224), "setTargetUserSession:", 1);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100F21B98;
  v8[3] = &unk_102192668;
  v8[4] = a1;
  objc_msgSend(*(id *)(a1 + 224), "setDeviceFoundHandler:", v8);
  v3 = *(void **)(a1 + 224);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100F221AC;
  v7[3] = &unk_102130FC8;
  v7[4] = a1;
  return objc_msgSend(v3, "activateWithCompletion:", v7);
}

void sub_100F21B98(uint64_t a1, void *a2)
{
  sub_100F21BA0(*(_QWORD *)(a1 + 32), a2);
}

void sub_100F21BA0(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  __int128 *v7;
  void **v8;
  void **v9;
  NSObject *v10;
  void *v11[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE buf[28];
  __int16 v24;
  void **v25;
  __int16 v26;
  void **v27;

  if (a2)
  {
    sub_1015A2E04(&v21, "");
    sub_1015A2E04(__p, "");
    sub_1015A2E04(v17, "");
    if (objc_msgSend(a2, "name"))
    {
      sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(a2, "name"), "UTF8String"));
      if (SHIBYTE(v22) < 0)
        operator delete((void *)v21);
      v21 = *(_OWORD *)buf;
      v22 = *(_QWORD *)&buf[16];
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v5 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)buf = 68289282;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "device name unavailable";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Rapport, onRapportDeviceFound\", \"note\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
    }
    if (objc_msgSend(a2, "idsDeviceIdentifier"))
    {
      sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(a2, "idsDeviceIdentifier"), "UTF8String"));
      if (SHIBYTE(v20) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = *(_OWORD *)buf;
      v20 = *(_QWORD *)&buf[16];
      if (objc_msgSend(a2, "model"))
      {
        sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(a2, "model"), "UTF8String"));
        if (SHIBYTE(v18) < 0)
          operator delete(v17[0]);
        *(_OWORD *)v17 = *(_OWORD *)buf;
        v18 = *(_QWORD *)&buf[16];
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
        v6 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
        {
          v7 = &v21;
          if (v22 < 0)
            v7 = (__int128 *)v21;
          v8 = __p;
          if (v20 < 0)
            v8 = (void **)__p[0];
          v9 = v17;
          if (v18 < 0)
            v9 = (void **)v17[0];
          *(_QWORD *)buf = 68289795;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2081;
          *(_QWORD *)&buf[20] = v7;
          v24 = 2081;
          v25 = v8;
          v26 = 2081;
          v27 = v9;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Rapport, onRapportDeviceFound\", \"name\":%{private, location:escape_only}s, \"idsDeviceIdentifier\":%{private, location:escape_only}s, \"model\":%{private, location:escape_only}s}", buf, 0x30u);
        }
        if (SHIBYTE(v20) < 0)
        {
          sub_100115CE4(__dst, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)__p;
          v16 = v20;
        }
        if (SHIBYTE(v18) < 0)
        {
          sub_100115CE4(v13, v17[0], (unint64_t)v17[1]);
        }
        else
        {
          *(_OWORD *)v13 = *(_OWORD *)v17;
          v14 = v18;
        }
        if (SHIBYTE(v22) < 0)
        {
          sub_100115CE4(v11, (void *)v21, *((unint64_t *)&v21 + 1));
        }
        else
        {
          *(_OWORD *)v11 = v21;
          v12 = v22;
        }
        sub_100381CE0(a1 + 584, (uint64_t)__dst, (uint64_t)v13, (__int128 *)v11);
        if (SHIBYTE(v12) < 0)
          operator delete(v11[0]);
        if (SHIBYTE(v14) < 0)
          operator delete(v13[0]);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_54;
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v10 = qword_1022A00F8;
      if (!os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
        goto LABEL_54;
      *(_QWORD *)buf = 68289282;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Model type unavailable  - device not buffered to monitor";
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v10 = qword_1022A00F8;
      if (!os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
        goto LABEL_54;
      *(_QWORD *)buf = 68289282;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "IDS Identifier unavailable - device not buffered to monitor";
    }
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Rapport, onRapportDeviceFound\", \"error\":%{public, location:escape_only}s}", buf, 0x1Cu);
LABEL_54:
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)v21);
    return;
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Rapport, onRapportDeviceFound - rapport session device found is nil\"}", buf, 0x12u);
  }
}

void sub_100F22104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  if (a42 < 0)
    operator delete(a37);
  if (*(char *)(v42 - 121) < 0)
    operator delete(*(void **)(v42 - 144));
  _Unwind_Resume(exception_object);
}

void sub_100F221AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t buf[4];
  int v5;
  __int16 v6;
  const char *v7;

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 32);
    sub_10038ADA4((uint64_t)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@"), CFSTR("Rapport, rapport session activation error:"), a2));
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 248))(v2);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Rapport, rapport session ready to listen for incoming devices\"}", buf, 0x12u);
    }
  }
}

id sub_100F222E0(uint64_t a1)
{
  return sub_100F2195C(a1 - 136);
}

void sub_100F222E8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;

  v6 = sub_100F22C8C(a1, "CLMicroLocationNotifier", a2);
  *(_QWORD *)(v6 + 136) = off_102192918;
  v7 = v6 + 136;
  *(_QWORD *)(v6 + 144) = off_1021929C0;
  *(_QWORD *)v6 = off_102192698;
  *(_QWORD *)(v6 + 112) = off_102192868;
  *(_QWORD *)(v6 + 120) = off_1021928C0;
  *(_QWORD *)(v6 + 128) = off_1021928F0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_QWORD *)(v6 + 232) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v9 = *(_QWORD *)(a3 + 16);
  }
  sub_10027AB58(a1 + 248, (__int128 *)__p, 2);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  sub_10029A058((_QWORD *)(a1 + 552), a1 + 248);
  objc_msgSend(objc_msgSend(a2, "silo"), "queue");
  sub_10037AC80(a1 + 584, v7, a1 + 3208, a1 + 248);
}

void sub_100F22ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD **v36;
  void **v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_100008848(v32 + 3576, *v36);
  v38 = (void **)(v32 + 3488);
  v39 = *(void **)(v32 + 3512);
  if (v39)
  {
    *(_QWORD *)(v32 + 3520) = v39;
    operator delete(v39);
  }
  v40 = *v38;
  if (*v38)
  {
    *(_QWORD *)(v32 + 3496) = v40;
    operator delete(v40);
  }
  sub_100F24968((uint64_t *)(v32 + 3416), 0);
  *(_QWORD *)(v32 + 3208) = off_10212F118;
  if (*(_BYTE *)(v32 + 3288))
    sub_1002D1518(v32 + 3216);
  sub_10037AF58(v35);
  sub_10029A3BC(v34);
  sub_10027AD24(v33);
  v41 = *(_QWORD *)(v32 + 216);
  *(_QWORD *)(v32 + 216) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(v32 + 208);
  *(_QWORD *)(v32 + 208) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *(_QWORD *)(v32 + 200);
  *(_QWORD *)(v32 + 200) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD *)(v32 + 192);
  *(_QWORD *)(v32 + 192) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *(_QWORD *)(v32 + 184);
  *(_QWORD *)(v32 + 184) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  sub_100F235C4(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_100F22C8C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102192F60;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100F22D0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100F22D28(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100359480((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 16), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F22D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F22DB0(_QWORD *a1)
{
  NSObject *v2;
  id v3;
  uint8_t *v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[4];
  uint8_t buf[8];
  _QWORD *v20;
  uint8_t *v21;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MicroLocations startClients", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    LOWORD(v18[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "MicroLocations startClients", v18, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::startClients()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v3 = -[CLMicroLocationLoiBridge initInUniverse:]([CLMicroLocationLoiBridge alloc], "initInUniverse:", a1[4]);
  a1[399] = v3;
  sub_10037B0B8((uint64_t)(a1 + 73), v3);
  *(_QWORD *)buf = off_102193040;
  v20 = a1;
  v21 = buf;
  sub_10037B090((uint64_t)(a1 + 73), (uint64_t)buf);
  v4 = v21;
  if (v21 == buf)
  {
    v5 = 4;
    v4 = buf;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  *(_QWORD *)buf = off_1021930D0;
  v20 = a1;
  v21 = buf;
  sub_10037B098((uint64_t)(a1 + 73), (uint64_t)buf);
  v6 = v21;
  if (v21 == buf)
  {
    v7 = 4;
    v6 = buf;
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_16:
  *(_QWORD *)buf = off_102193160;
  v20 = a1;
  v21 = buf;
  sub_10037B0A0((uint64_t)(a1 + 73), (uint64_t)buf);
  v8 = v21;
  if (v21 == buf)
  {
    v9 = 4;
    v8 = buf;
  }
  else
  {
    if (!v21)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_21:
  *(_QWORD *)buf = off_1021931F0;
  v20 = a1;
  v21 = buf;
  sub_10037B0A8((uint64_t)(a1 + 73), (uint64_t)buf);
  v10 = v21;
  if (v21 == buf)
  {
    v11 = 4;
    v10 = buf;
  }
  else
  {
    if (!v21)
      goto LABEL_26;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_26:
  *(_QWORD *)buf = off_102193280;
  v20 = a1;
  v21 = buf;
  sub_10037B0B0((uint64_t)(a1 + 73), (uint64_t)buf);
  v14 = v21;
  if (v21 == buf)
  {
    v15 = 4;
    v14 = buf;
  }
  else
  {
    if (!v21)
      goto LABEL_31;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_31:
  sub_1002ACA18(a1 + 400, v12, v13);
  a1[30] = -[CLMicroLocationIntersiloDelegate initWithMicroLocationNotifier:]([CLMicroLocationIntersiloDelegate alloc], "initWithMicroLocationNotifier:", a1);
  sub_1012B2C64();
}

void sub_100F2351C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  operator delete();
}

uint64_t sub_100F235C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_102192F60;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1007F8C14(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100F23638(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_102192698;
  *(_QWORD *)(a1 + 112) = off_102192868;
  *(_QWORD *)(a1 + 120) = off_1021928C0;
  *(_QWORD *)(a1 + 128) = off_1021928F0;
  *(_QWORD *)(a1 + 136) = off_102192918;
  *(_QWORD *)(a1 + 144) = off_1021929C0;
  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 152) = 0;
  }
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 168) = 0;
  }
  v4 = *(void **)(a1 + 3568);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");

    *(_QWORD *)(a1 + 3568) = 0;
  }
  v5 = *(void **)(a1 + 3560);
  if (v5)
  {
    objc_msgSend(v5, "invalidate");

    *(_QWORD *)(a1 + 3560) = 0;
  }

  *(_QWORD *)(a1 + 3480) = 0;
  *(_QWORD *)(a1 + 3544) = 0;

  *(_QWORD *)(a1 + 3552) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_100008848(a1 + 3576, *(_QWORD **)(a1 + 3584));
  v6 = *(void **)(a1 + 3512);
  if (v6)
  {
    *(_QWORD *)(a1 + 3520) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 3488);
  if (v7)
  {
    *(_QWORD *)(a1 + 3496) = v7;
    operator delete(v7);
  }
  sub_100F24968((uint64_t *)(a1 + 3416), 0);
  *(_QWORD *)(a1 + 3208) = off_10212F118;
  if (*(_BYTE *)(a1 + 3288))
    sub_1002D1518(a1 + 3216);
  sub_10037AF58(a1 + 584);
  sub_10029A3BC((uint64_t *)(a1 + 552));
  sub_10027AD24(a1 + 248);
  v8 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return sub_100F235C4(a1);
}

uint64_t sub_100F23808(uint64_t a1)
{
  return sub_100F23638(a1 - 112);
}

uint64_t sub_100F23810(uint64_t a1)
{
  return sub_100F23638(a1 - 120);
}

uint64_t sub_100F23818(uint64_t a1)
{
  return sub_100F23638(a1 - 128);
}

uint64_t sub_100F23820(uint64_t a1)
{
  return sub_100F23638(a1 - 136);
}

uint64_t sub_100F23828(uint64_t a1)
{
  return sub_100F23638(a1 - 144);
}

void sub_100F23830(uint64_t a1)
{
  sub_100F23638(a1);
  operator delete();
}

void sub_100F23854(uint64_t a1)
{
  sub_100F23638(a1 - 112);
  operator delete();
}

void sub_100F2387C(uint64_t a1)
{
  sub_100F23638(a1 - 120);
  operator delete();
}

void sub_100F238A4(uint64_t a1)
{
  sub_100F23638(a1 - 128);
  operator delete();
}

void sub_100F238CC(uint64_t a1)
{
  sub_100F23638(a1 - 136);
  operator delete();
}

void sub_100F238F4(uint64_t a1)
{
  sub_100F23638(a1 - 144);
  operator delete();
}

void sub_100F2391C(id *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MicroLocation: shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "MicroLocation: shutdown", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::shutdown()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100F23AB4(a1);
}

void sub_100F23AB4(id *a1)
{
  id *v2;
  id v3;
  id *v4;
  id v5;
  id *v6;
  id v7;
  __CFNotificationCenter *DarwinNotifyCenter;

  sub_100F24968((uint64_t *)a1 + 427, 0);
  v2 = (id *)a1[26];
  if (v2)
  {
    objc_msgSend(v2[2], "unregister:forNotification:", v2[1], 0);
    objc_msgSend(*((id *)a1[26] + 2), "unregister:forNotification:", *((_QWORD *)a1[26] + 1), 9);
    v3 = a1[26];
    a1[26] = 0;
    if (v3)
      (*(void (**)(id))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = (id *)a1[24];
  if (v4)
  {
    objc_msgSend(v4[2], "unregister:forNotification:", v4[1], 0);
    objc_msgSend(*((id *)a1[24] + 2), "unregister:forNotification:", *((_QWORD *)a1[24] + 1), 4);
    objc_msgSend(*((id *)a1[24] + 2), "unregister:forNotification:", *((_QWORD *)a1[24] + 1), 2);
    v5 = a1[24];
    a1[24] = 0;
    if (v5)
      (*(void (**)(id))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = (id *)a1[23];
  if (v6)
  {
    objc_msgSend(v6[2], "unregister:forNotification:", v6[1], 15);
    objc_msgSend(*((id *)a1[23] + 2), "unregister:forNotification:", *((_QWORD *)a1[23] + 1), 14);
    v7 = a1[23];
    a1[23] = 0;
    if (v7)
      (*(void (**)(id))(*(_QWORD *)v7 + 8))(v7);
  }
  (*((void (**)(id *))*a1 + 27))(a1);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);
  objc_msgSend(a1[29], "stopMonitoringForClient:", a1[30]);

  a1[29] = 0;
  sub_1002ACA50(a1 + 400);

  a1[28] = 0;
  a1[30] = 0;
  objc_msgSend(a1[434], "invalidate");

  a1[434] = 0;
}

void sub_100F23C04(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMicroLocationNotifier::onDarwinNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192BB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMicroLocationNotifier::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100F25384(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100F23DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100F23DD4(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMicroLocationNotifier::onDataProtectionManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192BB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMicroLocationNotifier::onDataProtectionManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onDataProtectionManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100F26D74(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100F23F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100F23FAC(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMicroLocationNotifier::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192BB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMicroLocationNotifier::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100F2560C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100F24164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F24184(uint64_t a1)
{
  return nullsub_34(*(_QWORD *)(a1 + 32) + 584);
}

void sub_100F24194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLMicroLocationNotifier::onNotificationCenterNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192BB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMicroLocationNotifier::onNotificationCenterNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onNotificationCenterNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100F2BDE8;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100F24394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100F243B4(uint64_t a1)
{
  CFStringRef v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  unsigned __int8 v16[16];
  uint8_t buf[8];
  std::__shared_weak_count *v18;

  sub_1001E4804(buf);
  v16[0] = 0;
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEnabled", 0x8000100u, kCFAllocatorNull);
  v3 = sub_1001E48E4(*(uint64_t *)buf, (uint64_t)v2, (BOOL *)v16);
  CFRelease(v2);
  v4 = v16[0];
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v4)
    v8 = v3;
  else
    v8 = 0;
  if (v8 == 1)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Registering for leeched location updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      *(_WORD *)v16 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Registering for leeched location updates", v16, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::registerForLeechedLocationUpdates()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v10 = *(_QWORD *)(a1 + 216);
    if (!v10)
      sub_1006AA544();
    objc_msgSend(*(id *)(v10 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v10 + 8), 5, 0);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Disabled - not registering for leeched location updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      *(_WORD *)v16 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Disabled - not registering for leeched location updates", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::registerForLeechedLocationUpdates()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_100F2477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F2479C(uint64_t a1)
{
  sub_100F243B4(a1 - 136);
}

void sub_100F247A4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Deregistering from leeched location updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Deregistering from leeched location updates", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::deregisterForLeechedLocationUpdates()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(_QWORD *)(a1 + 216);
  if (v3)
  {
    objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 5);
    v4 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

void sub_100F24960(uint64_t a1)
{
  sub_100F247A4(a1 - 136);
}

uint64_t sub_100F24968(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1010AABA8(result);
    operator delete();
  }
  return result;
}

void sub_100F249A4(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  double Current;
  NSObject *v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[14];
  int v13;
  __int128 v14;
  uint8_t buf[32];
  uint64_t v16;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMicroLocationNotifier: startSpectating", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "CLMicroLocationNotifier: startSpectating", v12, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::startSpectating()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v13 = 0;
  sub_1000B0C3C(&v13);
  *(_QWORD *)&v14 = sub_1000B0D38((ssize_t)&v13);
  *((_QWORD *)&v14 + 1) = v3;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_1002BBD34((uint64_t)v12);
  sub_100F24D6C(&v14, (uint64_t)v12, (uint64_t)buf, Current);
  sub_1000B0F04(a1 + 69, (__int128 *)buf);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v16);
  sub_1002D2C38((wireless_diagnostics::google::protobuf::MessageLite *)v12);
  sub_1000B0D18((unsigned int *)&v13);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v5 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLMicroLocationNotifier: register Biome", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v12[0] = 0;
    LODWORD(v11) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "CLMicroLocationNotifier: register Biome", v12, v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::startSpectating()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_100378700(a1 + 428);
  objc_msgSend(*(id *)(a1[23] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(a1[23] + 8), 7, 0);
  objc_msgSend(*(id *)(a1[23] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(a1[23] + 8), 10, 0);
  sub_100197040();
  if (sub_10075D288())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_100F24194, CFSTR("com.apple.locationd.MicroLocationAction-record"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
}

void sub_100F24D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, unsigned int a15)
{
  uint64_t v15;

  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(v15 + 32));
  sub_1002D2C38((wireless_diagnostics::google::protobuf::MessageLite *)&a11);
  sub_1000B0D18(&a15);
  _Unwind_Resume(a1);
}

void sub_100F24D6C(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100358F08((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 8), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F24DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F24DF4(uint64_t a1)
{
  sub_100F249A4((uint64_t *)(a1 - 136));
}

id sub_100F24DFC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double Current;
  __CFNotificationCenter *DarwinNotifyCenter;
  id result;
  const char *v7;
  uint8_t *v8;
  _WORD v9[14];
  int v10;
  __int128 v11;
  uint8_t buf[32];
  uint64_t v13;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMicroLocationNotifier: stopSpectating", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "CLMicroLocationNotifier: stopSpectating", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationNotifier::stopSpectating()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v10 = 0;
  sub_1000B0C3C(&v10);
  *(_QWORD *)&v11 = sub_1000B0D38((ssize_t)&v10);
  *((_QWORD *)&v11 + 1) = v3;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_1002BBD54((uint64_t)v9);
  sub_100F250E0(&v11, (uint64_t)v9, (uint64_t)buf, Current);
  sub_1000B0F04((uint64_t *)(a1 + 552), (__int128 *)buf);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v13);
  sub_1002D301C((wireless_diagnostics::google::protobuf::MessageLite *)v9);
  sub_1000B0D18((unsigned int *)&v10);
  sub_10029A064((uint64_t *)(a1 + 552));
  objc_msgSend(*(id *)(a1 + 232), "stopMonitoringNowPlayingForClient:", *(_QWORD *)(a1 + 240));
  sub_100197040();
  if (sub_10075FD94())
  {
    objc_msgSend(*(id *)(a1 + 232), "stopMonitoringHomeKitAccessoryForClient:", *(_QWORD *)(a1 + 240));
    objc_msgSend(*(id *)(a1 + 232), "stopMonitoringHomeKitSceneForClient:", *(_QWORD *)(a1 + 240));
  }
  sub_100378F38((id *)(a1 + 3424));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 184) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8), 7);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 184) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8), 10);
  sub_100197040();
  if (sub_10075D288())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, CFSTR("com.apple.locationd.MicroLocationAction-record"), 0);
  }
  sub_10031A290(a1 + 3208);
  result = objc_msgSend(*(id *)(a1 + 168), "invalidate");
  *(_QWORD *)(a1 + 176) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

void sub_100F250A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, unsigned int a15)
{
  uint64_t v15;

  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(v15 + 32));
  sub_1002D301C((wireless_diagnostics::google::protobuf::MessageLite *)&a11);
  sub_1000B0D18(&a15);
  _Unwind_Resume(a1);
}

void sub_100F250E0(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100358F94((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 8), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F25154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

id sub_100F25168(uint64_t a1)
{
  return sub_100F24DFC(a1 - 136);
}

uint64_t sub_100F25170()
{
  return 1;
}

uint64_t sub_100F25178()
{
  return 1;
}

_QWORD *sub_100F25180@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "NotificationMicroLocation");
}

void sub_100F25190(uint64_t a1, const void **a2, uint64_t a3)
{
  NSObject *v5;
  id v6;
  NSObject *v7;
  NSErrorUserInfoKey v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  if (*a2)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learning callback, calling SPI response block for learning request\"}", buf, 0x12u);
    }
    if (a3)
    {
      v6 = objc_alloc((Class)NSError);
      v8 = NSLocalizedDescriptionKey;
      v9 = a3;
      objc_msgSend(v6, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    }
    (*((void (**)(void))*a2 + 2))();
    _Block_release(*a2);
    *a2 = 0;
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"No SPI responses cached for learning completion\"}", buf, 0x12u);
    }
  }
}

void sub_100F25384(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  v4 = *a3;
  if (*a3 == 12)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "Darwin";
      v14 = 2082;
      v15 = "LocationOfInterestDidClear";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", (uint8_t *)&v8, 0x26u);
    }
    sub_100382100(a1 + 584);
    sub_100F27EC0(a1);
  }
  else if (v4 == 9)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "Darwin";
      v14 = 2082;
      v15 = "Sysdiagnose Notification";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", (uint8_t *)&v8, 0x26u);
    }
    sub_10037B268(a1 + 584);
  }
  else if (!v4)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "Darwin";
      v14 = 2082;
      v15 = "Daemon settings";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", (uint8_t *)&v8, 0x26u);
    }
    sub_10037B0C0(a1 + 584);
  }
}

void sub_100F2560C(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  int v18;
  const char *v19;
  int v20;
  _BYTE buf[28];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  CFAbsoluteTime Current;

  switch(*a3)
  {
    case 7:
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v7 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Daemon status";
        v22 = 2082;
        v23 = "Battery";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      *(_OWORD *)buf = *(_OWORD *)a4;
      *(_QWORD *)&buf[16] = *((_QWORD *)a4 + 2);
      Current = j__CFAbsoluteTimeGetCurrent();
      sub_100319194(a1 + 3208, (uint64_t *)buf, &Current);
      break;
    case 10:
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v13 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *a4;
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Daemon status";
        v22 = 2082;
        v23 = "Display";
        v24 = 1025;
        v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s, \"is on\":%{private}hhd}", buf, 0x2Cu);
      }
      v15 = *a4;
      *(_QWORD *)buf = j__CFAbsoluteTimeGetCurrent();
      sub_1003823C8(a1 + 584, v15, buf);
      v16 = *a4;
      *(_QWORD *)buf = j__CFAbsoluteTimeGetCurrent();
      sub_100319358(a1 + 3208, v16, (double *)buf);
      break;
    case 14:
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v17 = qword_1022A00F8;
      if (!os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_30;
      v18 = *a4;
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Daemon status";
      v22 = 2082;
      v23 = "Restricted power mode";
      v24 = 1025;
      v25 = v18;
      v19 = "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{p"
            "ublic, location:escape_only}s, \"is restricted\":%{private}hhd}";
      goto LABEL_29;
    case 15:
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v17 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *a4;
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Daemon status";
        v22 = 2082;
        v23 = "Battery saver mode";
        v24 = 1025;
        v25 = v20;
        v19 = "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%"
              "{public, location:escape_only}s, \"is enabled\":%{private}hhd}";
LABEL_29:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v19, buf, 0x2Cu);
      }
LABEL_30:
      sub_10031A298(a1 + 3208, *a4);
      sub_100382698(a1 + 584, *a4);
      break;
    default:
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v8 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *a3;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Received unhandled daemon status notification %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
        v10 = *a3;
        LODWORD(Current) = 67109120;
        HIDWORD(Current) = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Received unhandled daemon status notification %d", &Current);
        v12 = (char *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      break;
  }
}

void sub_100F25B5C(uint64_t a1, int a2, CFStringRef theString1)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  _BYTE v12[12];
  _BYTE buf[18];
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  if (CFStringCompare(theString1, CFSTR("com.apple.locationd.MicroLocationAction-localize"), 0))
  {
    if (CFStringCompare(theString1, CFSTR("com.apple.locationd.MicroLocationAction-record"), 0))
    {
      if (CFStringCompare(theString1, CFSTR("com.apple.locationd.MicroLocationAction-purge"), 0))
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
        v5 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = CFStringGetCStringPtr(theString1, 0x8000100u);
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Got a notification center notification that we weren't expecting: %s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_102192BD0);
          v6 = qword_1022A00F8;
          *(_DWORD *)v12 = 136315138;
          *(_QWORD *)&v12[4] = CFStringGetCStringPtr(theString1, 0x8000100u);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#Warning Got a notification center notification that we weren't expecting: %s", v12);
          v8 = (char *)v7;
          sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onNotificationCenterNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v7);
          if (v8 != buf)
            free(v8);
        }
      }
      else
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
        v11 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v14 = 2082;
          v15 = "Notification center";
          v16 = 2082;
          v17 = "Purge";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
        }
        sub_100382100(a1 + 584);
        sub_100F27EC0(a1);
      }
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v10 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v14 = 2082;
        v15 = "Notification center";
        v16 = 2082;
        v17 = "Force record";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      *(_QWORD *)buf = j__CFAbsoluteTimeGetCurrent();
      sub_1003197F0(a1 + 3208, (double *)buf);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v14 = 2082;
      v15 = "Notification center";
      v16 = 2082;
      v17 = "Force localization";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    sub_1015A2E04(buf, "NotificationCenter");
    *(_QWORD *)v12 = j__CFAbsoluteTimeGetCurrent();
    sub_100319B88(a1 + 3208, (const std::string *)buf, (double *)v12);
    if (SBYTE3(v15) < 0)
      operator delete(*(void **)buf);
  }
}

void sub_100F25FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F25FE8(_QWORD *a1@<X8>)
{
  const __CFString *v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const __CFArray *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAppLaunchLocalizationAllowedList", 0x8000100u, kCFAllocatorNull);
  v3 = sub_100527258(v8, v2, (CFTypeRef *)&v7);
  CFRelease(v2);
  if (v3)
  {
    sub_100F2BDF8(v7, (uint64_t)a1);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100F260D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F260E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  _QWORD v6[6];
  _BYTE v7[24];

  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(*(id *)(v4 + 32), "silo");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_100F26198;
  v6[3] = &unk_1021929F0;
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = v4;
  sub_1002C9EEC(v7, a2);
  objc_msgSend(v5, "async:", v6);
  sub_1002C9EF0((wireless_diagnostics::google::protobuf::MessageLite *)v7);
}

void sub_100F26184(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  sub_1002C9EF0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F26198(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _BYTE *v3;
  CFAbsoluteTime Current;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40) + 3208;
  v3 = (_BYTE *)(a1 + 48);
  Current = j__CFAbsoluteTimeGetCurrent();
  return sub_100318FD0(v2, v1, v3, &Current);
}

uint64_t sub_100F261E8(uint64_t a1, uint64_t a2)
{
  return sub_1002C9EEC(a1 + 48, a2 + 48);
}

void sub_100F261F4(uint64_t a1)
{
  sub_1002C9EF0((wireless_diagnostics::google::protobuf::MessageLite *)(a1 + 48));
}

void sub_100F261FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  _QWORD v6[6];
  _BYTE v7[24];

  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(*(id *)(v4 + 32), "silo");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_100F262AC;
  v6[3] = &unk_1021929F0;
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = v4;
  sub_1002C9EEC(v7, a2);
  objc_msgSend(v5, "async:", v6);
  sub_1002C9EF0((wireless_diagnostics::google::protobuf::MessageLite *)v7);
}

void sub_100F26298(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  sub_1002C9EF0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F262AC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _BYTE *v3;
  CFAbsoluteTime Current;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40) + 3208;
  v3 = (_BYTE *)(a1 + 48);
  Current = j__CFAbsoluteTimeGetCurrent();
  return sub_100318B24(v2, v1, v3, &Current);
}

uint64_t sub_100F262FC()
{
  uint64_t v0;

  v0 = sub_100197040();
  return sub_10075FBEC(v0);
}

id sub_100F26310(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100F26368;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  return objc_msgSend(v1, "async:", v3);
}

uint64_t sub_100F26368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double Current;
  _BYTE v5[28];
  int v6;
  __int128 v7;
  __int128 v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 32);
  v6 = 0;
  sub_1000B0C3C(&v6);
  *(_QWORD *)&v7 = sub_1000B0D38((ssize_t)&v6);
  *((_QWORD *)&v7 + 1) = v2;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_1002BBCD4((uint64_t)v5);
  sub_100F26468(&v7, (uint64_t)v5, (uint64_t)v8, Current);
  sub_1000B0F04((uint64_t *)(v1 + 552), v8);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v9);
  sub_1002D208C((wireless_diagnostics::google::protobuf::MessageLite *)v5);
  return sub_1000B0D18((unsigned int *)&v6);
}

void sub_100F26424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a21);
  sub_1002D208C((wireless_diagnostics::google::protobuf::MessageLite *)&a10);
  sub_1000B0D18(&a14);
  _Unwind_Resume(a1);
}

void sub_100F26468(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100358D64((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 8), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F264DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

id sub_100F264F0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = a1 - 112;
  v2 = *(void **)(a1 - 72);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100F26368;
  v4[3] = &unk_10212ECA0;
  v4[4] = v1;
  return objc_msgSend(v2, "async:", v4);
}

uint64_t *sub_100F26548(uint64_t *result, int a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  int v9;
  unsigned int *v10;

  v9 = a2;
  if (*(_BYTE *)(a3 + 280))
  {
    v3 = (uint64_t **)(result + 447);
    v4 = result[448];
    if (!v4)
      goto LABEL_12;
    v5 = result + 448;
    do
    {
      v6 = *(_DWORD *)(v4 + 28);
      v7 = v6 < a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v4;
      else
        v8 = (uint64_t *)(v4 + 8);
      if (!v7)
        v5 = (uint64_t *)v4;
      v4 = *v8;
    }
    while (*v8);
    if (v5 == result + 448 || *((_DWORD *)v5 + 7) > a2)
    {
LABEL_12:
      v10 = (unsigned int *)&v9;
      *((_DWORD *)sub_100136FD4((uint64_t **)result + 447, &v9, (uint64_t)&unk_101B9EB60, &v10) + 8) = 0;
    }
    v10 = (unsigned int *)&v9;
    result = sub_100136FD4(v3, &v9, (uint64_t)&unk_101B9EB60, &v10);
    ++*((_DWORD *)result + 8);
  }
  return result;
}

uint64_t *sub_100F26610(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100F26548((uint64_t *)(a1 - 112), a2, a3);
}

_QWORD *sub_100F26618(_QWORD *result, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  void *v8;
  _QWORD v9[5];
  int v10;
  int v11;
  unsigned int *v12;

  v11 = a2;
  v2 = result[448];
  if (v2)
  {
    v3 = result;
    result += 447;
    v4 = v3 + 448;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < a2;
      if (v5 >= a2)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = (_QWORD *)v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != v3 + 448 && *((_DWORD *)v4 + 7) <= a2)
    {
      if (*((_DWORD *)v4 + 8))
      {
        v12 = (unsigned int *)&v11;
        *((_DWORD *)sub_100136FD4((uint64_t **)result, &v11, (uint64_t)&unk_101B9EB60, &v12) + 8) = 0;
        v8 = (void *)v3[5];
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_100F266F4;
        v9[3] = &unk_10213D6C0;
        v9[4] = v3;
        v10 = v11;
        return objc_msgSend(v8, "async:", v9);
      }
    }
  }
  return result;
}

void sub_100F266F4()
{
  sub_1003826A0();
}

_QWORD *sub_100F26708(uint64_t a1, int a2)
{
  return sub_100F26618((_QWORD *)(a1 - 112), a2);
}

id sub_100F26710(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100F26768;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  return objc_msgSend(v1, "async:", v3);
}

void sub_100F26768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double Current;
  uint64_t v4;
  _BYTE v5[28];
  int v6;
  __int128 v7;
  __int128 v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 32);
  v6 = 0;
  sub_1000B0C3C(&v6);
  *(_QWORD *)&v7 = sub_1000B0D38((ssize_t)&v6);
  *((_QWORD *)&v7 + 1) = v2;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_1002BBCF4((uint64_t)v5);
  sub_100F26880(&v7, (uint64_t)v5, (uint64_t)v8, Current);
  sub_1000B0F04((uint64_t *)(v1 + 552), v8);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v9);
  sub_1002D2470((wireless_diagnostics::google::protobuf::MessageLite *)v5);
  v4 = sub_1000B0D18((unsigned int *)&v6);
  sub_100F25190(v4, (const void **)(v1 + 3536), 0);
  sub_100382824(v1 + 584);
}

void sub_100F26840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  uint64_t v14;

  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(v14 + 32));
  sub_1002D2470((wireless_diagnostics::google::protobuf::MessageLite *)&a10);
  sub_1000B0D18(&a14);
  _Unwind_Resume(a1);
}

void sub_100F26880(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100358DF0((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 8), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F268F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

id sub_100F26908(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = a1 - 112;
  v2 = *(void **)(a1 - 72);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100F26768;
  v4[3] = &unk_10212ECA0;
  v4[4] = v1;
  return objc_msgSend(v2, "async:", v4);
}

uint64_t sub_100F26960@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  return sub_100383808(a1 + 584, a2, a3, a4, a5);
}

uint64_t sub_100F26968@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  return sub_100383808(a1 + 472, a2, a3, a4, a5);
}

void sub_100F26970(uint64_t a1, _QWORD *a2, id a3)
{
  NSObject *v5;
  id v6;
  NSDictionary *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  NSObject *v11;
  NSErrorUserInfoKey v12;
  id v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  if (*a2 == a2[1])
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"No SPI responses cached for recording/localization completion\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"calling SPI responses after recording/localization completion\"}", buf, 0x12u);
    }
    if (a3)
    {
      v6 = objc_alloc((Class)NSError);
      v12 = NSLocalizedDescriptionKey;
      v13 = a3;
      v7 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
      a3 = objc_msgSend(v6, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, v7);
    }
    v8 = (_QWORD *)*a2;
    v9 = (_QWORD *)a2[1];
    if ((_QWORD *)*a2 != v9)
    {
      do
      {
        v10 = (void *)*v8;
        (*(void (**)(_QWORD, id))(*v8 + 16))(*v8, a3);

        ++v8;
      }
      while (v8 != v9);
      v8 = (_QWORD *)*a2;
    }
    a2[1] = v8;
    sub_100F26B90((uint64_t)a2);
  }
}

void sub_100F26B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_100F26C48(uint64_t a1, void *a2)
{
  uint64_t v4;

  v4 = sub_10029A064((uint64_t *)(a1 + 552));
  sub_100F26970(v4, (_QWORD *)(a1 + 3488), a2);
}

void sub_100F26C78(uint64_t a1, void *a2)
{
  uint64_t v4;

  v4 = sub_10029A064((uint64_t *)(a1 + 416));
  sub_100F26970(v4, (_QWORD *)(a1 + 3352), a2);
}

id sub_100F26CA8(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100F26D00;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  return objc_msgSend(v1, "async:", v3);
}

uint64_t sub_100F26D00(uint64_t a1)
{
  return sub_1003829CC(*(_QWORD *)(a1 + 32) + 584);
}

id sub_100F26D0C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = a1 - 120;
  v2 = *(void **)(a1 - 80);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100F26D00;
  v4[3] = &unk_10212ECA0;
  v4[4] = v1;
  return objc_msgSend(v2, "async:", v4);
}

uint64_t sub_100F26D64(uint64_t a1)
{
  return sub_10029A064((uint64_t *)(a1 + 552));
}

uint64_t sub_100F26D6C(uint64_t a1)
{
  return sub_10029A064((uint64_t *)(a1 + 432));
}

void sub_100F26D74(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  if (*a3)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67240192;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Got a data protection notification we weren't registered for: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v7 = *a3;
      v12[0] = 67240192;
      v12[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Got a data protection notification we weren't registered for: %{public}d", v12, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else if (*a4 == 1)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "DataProtection";
      v19 = 2082;
      v20 = "Data available";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    sub_1000A1914(a1 + 248);
    sub_1003837C8(a1 + 584);
    sub_100F27034(a1, 1);
  }
}

void sub_100F27034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  sub_100F27944();
}

void sub_100F27210()
{
  operator new();
}

void sub_100F272AC()
{
  operator delete();
}

void sub_100F272D0(int a1, int a2, std::string *__str)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&__p, __str);
  sub_100F2738C();
}

void sub_100F27368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F2738C()
{
  operator new();
}

void sub_100F27448()
{
  operator delete();
}

void sub_100F2746C(int a1, int a2, std::string *a3)
{
  sub_100F272D0(a1 - 136, a2, a3);
}

void sub_100F27474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4;

  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a4);
  sub_100F275F0();
}

void sub_100F275DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100F2770C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100F275F0()
{
  operator new();
}

void sub_100F276B8()
{
  _QWORD *v0;
  void *v1;

  sub_1004A4854(v0 + 28);
  v1 = (void *)v0[25];
  if (v1)
  {
    v0[26] = v1;
    operator delete(v1);
  }
  sub_10047F25C(v0 + 12);
  sub_10047F25C(v0 + 3);
  operator delete();
}

_QWORD *sub_100F2770C(_QWORD *a1)
{
  void *v2;

  sub_100F2C0D8(a1 + 42);
  sub_1004A4854(a1 + 28);
  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  sub_10047F25C(a1 + 12);
  sub_10047F25C(a1 + 3);
  return a1;
}

void sub_100F2775C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100F27474(a1 - 136, a2, a3, a4);
}

void sub_100F27764(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_1003598E0((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 16), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F277D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F277EC()
{
  sub_100F275F0();
}

void sub_100F27930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100F2770C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100F27944()
{
  operator new();
}

void sub_100F279D4(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  size_t v5;
  const void *v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  _QWORD v16[2];
  char v17;
  __int128 __dst;
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  _QWORD v22[2];
  char v23;
  __int128 v24;

  v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    sub_100115CE4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    LOBYTE(v3) = *(_BYTE *)(a2 + 23);
  }
  else
  {
    __dst = *(_OWORD *)a2;
    v19 = *(_QWORD *)(a2 + 16);
  }
  v4 = v20;
  if ((v3 & 0x80u) == 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)(a2 + 8);
  sub_100259584((uint64_t)v20, v5 + 4);
  if (v21 < 0)
    v4 = (_QWORD *)v20[0];
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v4, v6, v5);
  }
  strcpy((char *)v4 + v5, "-wal");
  v7 = v22;
  if (*(char *)(a2 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  sub_100259584((uint64_t)v22, v8 + 4);
  if (v23 < 0)
    v7 = (_QWORD *)v22[0];
  if (v8)
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = (const void *)a2;
    else
      v9 = *(const void **)a2;
    memmove(v7, v9, v8);
  }
  strcpy((char *)v7 + v8, "-shm");
  v14 = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = &v14;
  v17 = 0;
  v14 = (char *)operator new(0x48uLL);
  v15 = v14;
  v16[0] = v14 + 72;
  v10 = sub_10028E070((uint64_t)v16, &__dst, &v24, v14);
  v11 = 0;
  v15 = v10;
  do
  {
    if (*(&v23 + v11 * 8) < 0)
      operator delete((void *)v22[v11]);
    v11 -= 3;
  }
  while (v11 != -9);
  v12 = (uint64_t *)v14;
  v13 = (uint64_t *)v15;
  while (v12 != v13)
  {
    sub_100F27C94((uint64_t)v10, v12);
    v12 += 3;
  }
  *(_QWORD *)&__dst = &v14;
  sub_100259608((void ***)&__dst);
}

void sub_100F27BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F27C58(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10027AD24(result);
    operator delete();
  }
  return result;
}

void sub_100F27C94(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  NSString *v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t *v15;
  __int16 v16;
  uint64_t v17;

  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  if (-[NSFileManager fileExistsAtPath:isDirectory:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:isDirectory:", v4, 0))
  {
    v9 = 0;
    if (!-[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", v4, &v9))
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v5 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        v6 = *((char *)a2 + 23) >= 0 ? a2 : (uint64_t *)*a2;
        *(_DWORD *)buf = 68289539;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        v14 = 2081;
        v15 = v6;
        v16 = 2113;
        v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to remove file\", \"filepath\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      }
      v7 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        if (*((char *)a2 + 23) >= 0)
          v8 = a2;
        else
          v8 = (uint64_t *)*a2;
        *(_DWORD *)buf = 68289539;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        v14 = 2081;
        v15 = v8;
        v16 = 2113;
        v17 = v9;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to remove file", "{\"msg%{public}.0s\":\"failed to remove file\", \"filepath\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
      }
    }
  }
}

uint64_t sub_100F27EB0(uint64_t a1)
{
  return sub_100383038(a1 + 584);
}

uint64_t sub_100F27EB8(uint64_t a1)
{
  return sub_100383038(a1 + 472);
}

void sub_100F27EC0(uint64_t a1)
{
  char *v2;
  void *__p[2];
  char v4;

  v2 = -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](-[NSString stringByAppendingPathComponent:](NSTemporaryDirectory(), "stringByAppendingPathComponent:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "microLocationDB")), "stringByAppendingPathComponent:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "ExportedMiloDB.db")), "UTF8String");
  sub_1015A2E04(__p, v2);
  sub_100F279D4(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_100F27F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F27F7C(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100359020((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 24), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F27FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F28004(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_1003590AC((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 24), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F28078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F2808C(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100359138((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 24), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F28100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F28114(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_1003591C4((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 24), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F28188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F2819C(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_1003593F4((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 32), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F28210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F28224(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100359368((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 40), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F28298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F282AC(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_100359250((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 16), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F28320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F28334(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_1003592DC((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 24), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100F283A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100F283BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  __n128 *i;
  __n128 *v8;
  __int128 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[4];
  uint64_t v14;
  _QWORD v15[6];
  __int128 v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[17];
  __int128 v23;
  __int128 v24;
  __int128 v25;

  memset(v13, 0, 48);
  v17 = 0;
  LOBYTE(v18) = 0;
  v19 = 0;
  memset(v15, 0, sizeof(v15));
  LOBYTE(v16) = 0;
  memset(__p, 0, 112);
  v20 = -1;
  __p[14] = (void *)-1;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v3 = *a2;
  v4 = (_QWORD *)a2[1];
  v11 = 7;
  v12 = v3;
  v5 = (_QWORD *)a2[2];
  while (v4 != v5)
    sub_100F2F228(v13, v4++);
  v6 = 0;
  v13[3] = *((_OWORD *)a2 + 2);
  v14 = a2[6];
  while (1)
  {
    if ((((unint64_t)a2[7] >> v6) & 1) != 0)
    {
      v10.n128_u64[0] = v6;
      sub_100F28648(v15, &v10);
    }
    if (++v6 == 32)
    {
      v8 = (__n128 *)a2[13];
      for (i = (__n128 *)a2[14]; v8 != i; ++v8)
      {
        v10 = *v8;
        sub_100F286CC(&__p[3], &v10);
      }
      v21 = a2[9];
      if (__p != (void **)(a2 + 10))
        sub_10034F2B0((char *)__p, (char *)a2[10], a2[11], (a2[11] - a2[10]) >> 3);
      if (*((_BYTE *)a2 + 152))
      {
        v16 = *(_OWORD *)(a2 + 17);
        if (!v17)
          v17 = 1;
        v18 = a2[16];
        v19 = 1;
      }
      v9 = *((_OWORD *)a2 + 11);
      *(_OWORD *)&__p[9] = *((_OWORD *)a2 + 10);
      *(_OWORD *)&__p[11] = v9;
      __p[13] = (void *)a2[24];
      sub_100F275F0();
    }
  }
}

void sub_100F28620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100F2770C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100F28648(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100F2F5C0(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

__n128 sub_100F286CC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F2F8D4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100F28754(uint64_t a1, uint64_t *a2)
{
  sub_100F283BC(a1 - 136, a2);
}

void sub_100F2875C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;

  v5 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a5);
  sub_100F277EC();
}

void sub_100F287B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100F2875C(a1 - 136, a2, a3, a4, a5);
}

void sub_100F287BC(uint64_t a1, uint64_t a2, __int128 *a3, int64x2_t *a4, uint64_t a5)
{
  id v8;

  v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a5);
  sub_100F28814(a1, a3, a4);
}

void sub_100F28814(uint64_t a1, __int128 *a2, int64x2_t *a3)
{
  int64x2_t *v5;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t *v9;
  int64x2_t *v10;
  BOOL v11;
  int32x2_t v12;
  int v13;
  _OWORD v14[3];
  _OWORD v15[3];
  uint64_t v16;
  __int128 v17;
  int32x2_t v18;
  int v19;
  _QWORD v20[6];

  memset(v15, 0, sizeof(v15));
  v5 = (int64x2_t *)a3[1].i64[1];
  v6 = a3 + 2;
  if (v5 != &a3[2])
  {
    do
    {
      v7 = (v5[1].i32[3] - 1);
      if (v7 >= 3)
        v8 = 0;
      else
        v8 = v7 + 2;
      v16 = v8;
      sub_100F29A68(v15, &v16);
      v9 = (int64x2_t *)v5->i64[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (int64x2_t *)v9->i64[0];
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (int64x2_t *)v5[1].i64[0];
          v11 = v10->i64[0] == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v6);
  }
  v18 = 0;
  v19 = 0;
  memset(v20, 0, sizeof(v20));
  v16 = 13;
  v17 = *a2;
  memset(v14, 0, sizeof(v14));
  v12 = vmovn_s64(*a3);
  v13 = a3[1].i64[0];
  sub_100F29AEC(v14, v15);
  v18 = v12;
  v19 = v13;
  sub_100F29AEC(v20, v14);
  sub_100F29B7C();
}

void sub_100F289B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _QWORD *v9;
  _QWORD *v10;
  va_list va;

  va_start(va, a9);
  sub_10047F25C(v10);
  sub_10047F25C(v9);
  sub_10047F25C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100F289E4(uint64_t a1, uint64_t a2, __int128 *a3, int64x2_t *a4, uint64_t a5)
{
  sub_100F287BC(a1 - 136, a2, a3, a4, a5);
}

void sub_100F289EC(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint8_t buf[32];
  __int128 v36;
  uint64_t v37;
  _OWORD v38[3];
  _OWORD v39[3];
  int64x2_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[6];
  __int128 v46;
  int v47;
  _BYTE __dst[24];

  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  memset(v39, 0, sizeof(v39));
  memset(v38, 0, sizeof(v38));
  v43 = -1;
  memset(v45, 0, sizeof(v45));
  v46 = 0u;
  v47 = 0;
  if (*((_BYTE *)a3 + 16))
    v44 = *a3;
  v6 = (unsigned int *)a4[18];
  v7 = (unsigned int *)a4[19];
  while (v6 != v7)
  {
    *(_QWORD *)buf = *v6;
    sub_100F2FBE8(&v45[1], buf);
    ++v6;
  }
  v8 = *((int *)a4 + 34);
  if (v8 >= 4)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"unknown protobuf confidence level, deprecated?\"}", buf, 0x12u);
    }
    v9 = 0;
  }
  else
  {
    v9 = qword_101C2FAA0[v8];
  }
  v45[0] = v9;
  *((int32x2_t *)&v46 + 1) = vmovn_s64(*(int64x2_t *)(a4 + 3));
  v47 = a4[5];
  v11 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)(v11 - 1) >= 3)
  {
    if (v11 == 4)
    {
      v19 = *a4;
      v18 = a4[1];
      if (*a4 != v18)
      {
        do
        {
          *(_OWORD *)buf = *(_OWORD *)v19;
          *(_QWORD *)&buf[16] = *(_QWORD *)(v19 + 16);
          v20 = *(int *)(v19 + 24);
          if (v20 >= 4)
          {
            if (qword_1022A00F0 != -1)
              dispatch_once(&qword_1022A00F0, &stru_102192BD0);
            v22 = qword_1022A00F8;
            if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)__dst = 68289026;
              *(_WORD *)&__dst[8] = 2082;
              *(_QWORD *)&__dst[10] = "";
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"unknown protobuf confidence level, deprecated?\"}", __dst, 0x12u);
            }
            v21 = 0;
          }
          else
          {
            v21 = qword_101C2FAA0[v20];
          }
          *(_QWORD *)&buf[24] = v21;
          sub_100F2FF80(v39, (uint64_t)buf);
          v19 += 32;
        }
        while (v19 != v18);
      }
      if (*((_BYTE *)a4 + 128))
      {
        v28 = (uint64_t *)a4[13];
        v29 = (_QWORD *)(v40.i64[1] + 8 * ((unint64_t)v42 / 0x66));
        if ((_QWORD)v41 == v40.i64[1])
        {
          v30 = 0;
          if (!v28)
            goto LABEL_61;
        }
        else
        {
          v30 = *v29 + 40 * ((unint64_t)v42 % 0x66);
          if (!v28)
            goto LABEL_61;
        }
        do
        {
          if (*((char *)v28 + 39) < 0)
          {
            sub_100115CE4(__dst, (void *)v28[2], v28[3]);
          }
          else
          {
            *(_OWORD *)__dst = *((_OWORD *)v28 + 1);
            *(_QWORD *)&__dst[16] = v28[4];
          }
          v31 = v28[5];
          v32 = v28[6];
          if ((__dst[23] & 0x80000000) != 0)
          {
            sub_100115CE4(buf, *(void **)__dst, *(unint64_t *)&__dst[8]);
            *(_QWORD *)&buf[24] = v32;
            *(_QWORD *)&v36 = v31;
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
          }
          else
          {
            *(_OWORD *)buf = *(_OWORD *)__dst;
            *(_QWORD *)&buf[16] = *(_QWORD *)&__dst[16];
            *(_QWORD *)&buf[24] = v32;
            *(_QWORD *)&v36 = v31;
          }
          v33 = (_QWORD *)sub_100F30320(&v40, v29, v30, (__int128 *)buf);
          v29 = v33;
          v30 = v34 + 40;
          if (v34 + 40 - *v33 == 4080)
          {
            v29 = v33 + 1;
            v30 = v33[1];
          }
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v23 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        v24 = *(_QWORD *)(a2 + 16);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "MiLo send prediction unknown service type: %lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
        v25 = *(_QWORD *)(a2 + 16);
        *(_DWORD *)__dst = 134217984;
        *(_QWORD *)&__dst[4] = v25;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "MiLo send prediction unknown service type: %lu", __dst);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMicroLocationNotifier::onSendPredictionResultsToClient(const CLMiLoService::ServiceDescriptor &, const std::optional<boost::uuids::uuid> &, const CLMicroLocationResultToPublish &, const CLMiLoService::ConnectionUuid &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
    }
  }
  else
  {
    v37 = 0;
    v36 = 0u;
    memset(buf, 0, sizeof(buf));
    v12 = (_QWORD *)sub_100F29130((uint64_t)v38, buf);
    sub_10034111C(buf);
    v12[6] = *(_QWORD *)(a2 + 16);
    v13 = *a4;
    v14 = a4[1];
    if (*a4 != v14)
    {
      do
      {
        *(_OWORD *)buf = *(_OWORD *)v13;
        *(_QWORD *)&buf[16] = *(_QWORD *)(v13 + 16);
        v15 = *(int *)(v13 + 24);
        if (v15 >= 4)
        {
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_102192BD0);
          v17 = qword_1022A00F8;
          if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)__dst = 68289026;
            *(_WORD *)&__dst[8] = 2082;
            *(_QWORD *)&__dst[10] = "";
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"unknown protobuf confidence level, deprecated?\"}", __dst, 0x12u);
          }
          v16 = 0;
        }
        else
        {
          v16 = qword_101C2FAA0[v15];
        }
        *(_QWORD *)&buf[24] = v16;
        sub_100F2FF80(v12, (uint64_t)buf);
        v13 += 32;
      }
      while (v13 != v14);
    }
  }
LABEL_61:
  sub_100F2924C();
}

void sub_100F290C4(_Unwind_Exception *a1)
{
  sub_100F29380(&STACK[0x690]);
  _Unwind_Resume(a1);
}

unint64_t sub_100F29130(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int64x2_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_100F31334((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x49));
  v7 = *v6 + 56 * (v4 % 0x49);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4088;
  *(_QWORD *)(v7 - 56) = *a2;
  *(_QWORD *)(v7 - 48) = a2[1];
  *(_QWORD *)(v7 - 40) = a2[2];
  *(_QWORD *)(v7 - 32) = a2[3];
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *(_QWORD *)(v7 - 24) = a2[4];
  *(_QWORD *)(v7 - 16) = a2[5];
  a2[4] = 0;
  a2[5] = 0;
  *(_QWORD *)(v7 - 8) = a2[6];
  v8 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v9)
    return 0;
  else
    return *(_QWORD *)(v9 + 8 * (v8.i64[0] / 0x49uLL)) + 56 * (v8.i64[0] % 0x49uLL);
}

void sub_100F2924C()
{
  operator new();
}

void sub_100F2932C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  sub_100F2C304(v2);
  sub_10034111C(v1);
  sub_100F2C450(v0);
  operator delete();
}

uint64_t sub_100F29380(_QWORD *a1)
{
  sub_10047F25C(a1 + 22);
  sub_100F2C304(a1 + 12);
  sub_10034111C(a1 + 6);
  return sub_100F2C450(a1);
}

void sub_100F293B8(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4)
{
  sub_100F289EC(a1 - 136, a2, a3, a4);
}

void sub_100F293C0(uint64_t a1)
{
  uint64_t v2;
  void **v3[2];
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  void **v7;

  v2 = a1 + 248;
  sub_1002F5A5C(v5, a1 + 112, a1 + 248);
  sub_10030AFAC(v3, a1 + 120, v2);
  sub_1002FFAA4(v5);
  sub_10030AFB0(v3);
  v7 = (void **)&v4;
  sub_1002AE76C(&v7);
  v3[0] = (void **)&v6;
  sub_1002AE76C(v3);
}

void sub_100F29440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a10 = (void **)&a17;
  sub_1002AE76C(&a10);
  _Unwind_Resume(a1);
}

void sub_100F2947C(uint64_t a1)
{
  sub_100F293C0(a1 - 136);
}

id sub_100F29484(uint64_t a1, uint64_t a2)
{
  double Current;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[5];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  objc_msgSend(*(id *)(a1 + 32), "silo");
  if (*(double *)(a1 + 160) != 1.79769313e308)
  {
    objc_msgSend(*(id *)(a1 + 152), "invalidate");
    *(_QWORD *)(a1 + 160) = 0x7FEFFFFFFFFFFFFFLL;
  }
  Current = j__CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 160) = (Current * 1000.0 + (double)a2) / 1000.0;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v5 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 160);
    *(_DWORD *)buf = 68289794;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = Current;
    v15 = 2050;
    v16 = a2;
    v17 = 2050;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier, Starting periodic Trigger Event Timer\", \"now\":\"%{public}.3f\", \"durationInMs\":%{public}lld, \"expected end time\":\"%{public}.3f\"}", buf, 0x30u);
  }
  objc_msgSend(*(id *)(a1 + 152), "setNextFireTime:", *(double *)(a1 + 160));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100F29624;
  v8[3] = &unk_10212ECA0;
  v8[4] = a1;
  return objc_msgSend(*(id *)(a1 + 152), "setHandler:", v8);
}

void sub_100F29624(uint64_t a1)
{
  sub_100F2962C(*(_QWORD *)(a1 + 32));
}

void sub_100F2962C(uint64_t a1)
{
  CFAbsoluteTime Current;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  CFAbsoluteTime v8;

  objc_msgSend(*(id *)(a1 + 32), "silo");
  Current = j__CFAbsoluteTimeGetCurrent();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2050;
    v8 = Current;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier, periodic Trigger Event Timer stopped\", \"now\":\"%{public}.3f\"}", (uint8_t *)v4, 0x1Cu);
  }
  objc_msgSend(*(id *)(a1 + 152), "invalidate");
  *(_QWORD *)(a1 + 160) = 0x7FEFFFFFFFFFFFFFLL;
  sub_10037F228((unsigned __int8 *)(a1 + 584));
}

id sub_100F29740(uint64_t a1, uint64_t a2)
{
  return sub_100F29484(a1 - 136, a2);
}

BOOL sub_100F29748(uint64_t a1, uint64_t a2)
{
  double v4;
  double Current;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[5];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  double v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  objc_msgSend(*(id *)(a1 + 32), "silo");
  v4 = *(double *)(a1 + 176);
  if (v4 == 1.79769313e308)
  {
    Current = j__CFAbsoluteTimeGetCurrent();
    *(double *)(a1 + 176) = (Current * 1000.0 + (double)a2) / 1000.0;
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)buf = 68289794;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = Current;
      v16 = 2050;
      v17 = a2;
      v18 = 2050;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier, Starting Rescheduled Localization Timer\", \"now\":\"%{public}.3f\", \"durationInMs\":%{public}lld, \"expected end time\":\"%{public}.3f\"}", buf, 0x30u);
    }
    objc_msgSend(*(id *)(a1 + 168), "setNextFireTime:", *(double *)(a1 + 176));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100F298EC;
    v9[3] = &unk_10212ECA0;
    v9[4] = a1;
    objc_msgSend(*(id *)(a1 + 168), "setHandler:", v9);
  }
  return v4 == 1.79769313e308;
}

void sub_100F298EC(uint64_t a1)
{
  sub_100F298F4(*(_QWORD *)(a1 + 32));
}

void sub_100F298F4(uint64_t a1)
{
  CFAbsoluteTime Current;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  CFAbsoluteTime v8;

  objc_msgSend(*(id *)(a1 + 32), "silo");
  Current = j__CFAbsoluteTimeGetCurrent();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2050;
    v8 = Current;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier, Rescheduled Localization Timer stopped\", \"now\":\"%{public}.3f\"}", (uint8_t *)v4, 0x1Cu);
  }
  objc_msgSend(*(id *)(a1 + 168), "invalidate");
  *(_QWORD *)(a1 + 176) = 0x7FEFFFFFFFFFFFFFLL;
  sub_10037F420(a1 + 584);
}

BOOL sub_100F29A08(uint64_t a1, uint64_t a2)
{
  return sub_100F29748(a1 - 136, a2);
}

void sub_100F29A10(uint64_t a1, __int128 *a2)
{
  sub_1000B0F04((uint64_t *)(a1 + 552), a2);
}

void sub_100F29A18(uint64_t a1, __int128 *a2)
{
  sub_1000B0F04((uint64_t *)(a1 + 416), a2);
}

uint64_t sub_100F29A20(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_100F29A28(uint64_t a1)
{
  return *(_QWORD *)(a1 - 72);
}

uint64_t sub_100F29A30(uint64_t a1)
{
  sub_100382FA8(a1 + 584);
  return 1;
}

uint64_t sub_100F29A4C(uint64_t a1)
{
  sub_100382FA8(a1 + 456);
  return 1;
}

void sub_100F29A68(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100F33714(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

_QWORD *sub_100F29AEC(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  if (a1 != a2)
  {
    v4 = a2[4];
    v5 = a2[1];
    v6 = a2[2];
    v7 = (char **)(v5 + 8 * (v4 >> 9));
    if (v6 == v5)
    {
      v8 = 0;
      v11 = 0;
      v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
    }
    else
    {
      v8 = &(*v7)[8 * (v4 & 0x1FF)];
      v9 = a2[5] + v4;
      v10 = (char *)(v5 + 8 * (v9 >> 9));
      v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
    }
    sub_100F33A28(a1, v7, v8, v10, v11);
  }
  return a1;
}

void sub_100F29B7C()
{
  operator new();
}

void sub_100F29C2C()
{
  operator delete();
}

void sub_100F29C50()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v0 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onNowPlayingEvent\"}", (uint8_t *)v1, 0x12u);
  }
}

void sub_100F29D28()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v0 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onAppLaunchEvent\"}", (uint8_t *)v1, 0x12u);
  }
}

void sub_100F29E00(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onNowPlayingQueryResult\", \"Number of events\":%{public}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_100F29EE8()
{
  operator new();
}

void sub_100F29F94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100F29FD0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_102193310;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100F2A0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102192BB0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102192BB0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::removeClient(int) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100F2A318(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_100F34640(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100F2A398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = atomic_load((unsigned __int8 *)&qword_1022FC390);
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    v8 = a3;
    v7 = a2;
    v5 = __cxa_guard_acquire(&qword_1022FC390);
    a2 = v7;
    a3 = v8;
    v6 = v5;
    a1 = v9;
    if (v6)
    {
      qword_1022FC378 = 0;
      unk_1022FC380 = 0;
      qword_1022FC388 = 0;
      __cxa_atexit((void (*)(void *))sub_1005CB0EC, &qword_1022FC378, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022FC390);
      a1 = v9;
      a2 = v7;
      a3 = v8;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &qword_1022FC378);
}

BOOL sub_100F2A440(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t **v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[1632];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v40;
        v34 = sub_1000BC378((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v34 + 5), a4);
        *(_QWORD *)buf = 0;
        *(_OWORD *)&buf[16] = 0u;
        *(_QWORD *)&buf[8] = &buf[16];
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100F3488C();
        }
        sub_10031C044((uint64_t)&buf[8], *(_QWORD **)&buf[16]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FC398;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        v32 = sub_1000BC378(v31 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v32 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192BB0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100F2A8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  uint64_t v19;

  sub_10031C044(v19, a19);
  _Unwind_Resume(a1);
}

BOOL sub_100F2A8F0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102192BB0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100F2AB70(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009B8B8((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102192BB0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102192BB0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100F2AEF8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v11)
    return 0;
  *(_QWORD *)a3 = *(_QWORD *)v11;
  if (v11 != a3)
    sub_100F35058((uint64_t **)(a3 + 8), *(__int128 **)(v11 + 8), (__int128 *)(v11 + 16));
  return 1;
}

uint64_t sub_100F2AF7C(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100F356D0(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100F2B028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F2B03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;

  v4 = 0;
  v6 = 0u;
  v5 = &v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  sub_10031C044((uint64_t)&v5, (_QWORD *)v6);
}

void sub_100F2B09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  sub_10031C044(v11, a11);
  _Unwind_Resume(a1);
}

void sub_100F2B0B4(uint64_t a1, signed __int32 *a2, _QWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  char **v34;
  char *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_100F35C70((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1007A24CC((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_1007A28B0((uint64_t)v29, *(char **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_1007A28B0((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100F356D0(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100F357DC();
    os_activity_scope_leave(&state);
  }
}

void sub_100F2B6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100F2B71C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102192BB0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::listClients() [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102192BB0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::listClients() [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102192BB0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102192BB0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::listClients() [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100F2BCC8(uint64_t a1)
{
  sub_100F345E0(a1);
  operator delete();
}

id sub_100F2BCEC(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100F34E38(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100F2BD38(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F2BD64(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100F2BD90(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100F2BDE8(uint64_t a1, int a2)
{
  sub_100F25B5C(*(_QWORD *)(a1 + 32), a2, *(CFStringRef *)(a1 + 48));
}

void sub_100F2BDF8(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  void **v6;
  CFRange v7;

  v4 = 0uLL;
  v5 = 0;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100F2BE98, &v4);
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_100259608(&v6);
}

void sub_100F2BE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100259608(&a12);
  _Unwind_Resume(a1);
}

void sub_100F2BE98(void *a1, uint64_t *a2)
{
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;

  sub_100385788(a1, __p);
  v3 = a2[1];
  if (v3 >= a2[2])
  {
    v5 = sub_1015E796C(a2, (__int128 *)__p);
  }
  else
  {
    if (SHIBYTE(v7) < 0)
    {
      sub_100115CE4((_BYTE *)a2[1], __p[0], (unint64_t)__p[1]);
    }
    else
    {
      v4 = *(_OWORD *)__p;
      *(_QWORD *)(v3 + 16) = v7;
      *(_OWORD *)v3 = v4;
    }
    v5 = v3 + 24;
    a2[1] = v3 + 24;
  }
  a2[1] = v5;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_100F2BF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_100F2BF54(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  if (*(unsigned __int8 *)(a1 + 72) == *((unsigned __int8 *)a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      v5 = (void **)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        operator delete(*v5);
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      *((_BYTE *)a2 + 47) = 0;
      *((_BYTE *)a2 + 24) = 0;
      v7 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v7);
      result = (__n128)a2[3];
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(__n128 *)v7 = result;
      *((_BYTE *)a2 + 71) = 0;
      *((_BYTE *)a2 + 48) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    sub_100F2C080(a1);
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v9;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v10 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v10;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    result = (__n128)a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(__n128 *)(a1 + 48) = result;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

void sub_100F2C080(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 72) = 0;
  }
}

uint64_t sub_100F2C0D8(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x38];
    v7 = (unint64_t)*v6 + 72 * (v5 % 0x38);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x38] + 72 * ((a1[5] + v5) % 0x38);
    if (v7 != v8)
    {
      do
      {
        sub_10047F25C((_QWORD *)(v7 + 24));
        v7 += 72;
        if (v7 - (_QWORD)*v6 == 4032)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 28;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 56;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

char *sub_100F2C218(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(v6, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v6 = v7;
  }
  __dst[72] = 1;
  return __dst;
}

void sub_100F2C2D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F2C304(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 51;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 102;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_100F2C450(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x49];
    v7 = (char *)*v6 + 56 * (v5 % 0x49);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v7 != (char *)v8)
    {
      do
      {
        v7 = (char *)(sub_10034111C(v7) + 56);
        if (v7 - (_BYTE *)*v6 == 4088)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 36;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 73;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100F2C588()
{
  operator delete();
}

_QWORD *sub_100F2C59C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102193040;
  result[1] = v3;
  return result;
}

uint64_t sub_100F2C5D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102193040;
  a2[1] = v2;
  return result;
}

void sub_100F2C5EC()
{
  operator new();
}

void sub_100F2C644()
{
  operator delete();
}

uint64_t sub_100F2C668(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F2C6A4()
{
}

void sub_100F2C6B4()
{
  operator delete();
}

_QWORD *sub_100F2C6C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021930D0;
  result[1] = v3;
  return result;
}

uint64_t sub_100F2C6FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021930D0;
  a2[1] = v2;
  return result;
}

void sub_100F2C718()
{
  operator new();
}

void sub_100F2C770()
{
  operator delete();
}

uint64_t sub_100F2C794(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F2C7D0()
{
}

void sub_100F2C7E0()
{
  operator delete();
}

_QWORD *sub_100F2C7F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102193160;
  result[1] = v3;
  return result;
}

uint64_t sub_100F2C828(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102193160;
  a2[1] = v2;
  return result;
}

void sub_100F2C844()
{
  operator new();
}

void sub_100F2C89C()
{
  operator delete();
}

uint64_t sub_100F2C8C0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F2C8FC()
{
}

void sub_100F2C90C()
{
  operator delete();
}

_QWORD *sub_100F2C920(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021931F0;
  result[1] = v3;
  return result;
}

uint64_t sub_100F2C954(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021931F0;
  a2[1] = v2;
  return result;
}

void sub_100F2C970()
{
  operator new();
}

void sub_100F2C9C8()
{
  operator delete();
}

uint64_t sub_100F2C9EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F2CA28()
{
}

void sub_100F2CA38()
{
  operator delete();
}

_QWORD *sub_100F2CA4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102193280;
  result[1] = v3;
  return result;
}

uint64_t sub_100F2CA80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102193280;
  a2[1] = v2;
  return result;
}

void sub_100F2CA9C()
{
  operator new();
}

void sub_100F2CAF4()
{
  operator delete();
}

uint64_t sub_100F2CB18(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F2CB54()
{
}

uint64_t sub_100F2CB60(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    sub_100F2BD90(v1 + 32);
    operator delete();
  }
  return result;
}

char *sub_100F2CBA8(char *__dst, uint64_t a2)
{
  *__dst = 0;
  __dst[72] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    sub_100F2CBFC(__dst, (__int128 *)a2);
    __dst[72] = 1;
  }
  return __dst;
}

void sub_100F2CBE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100F2BD90(v1);
  _Unwind_Resume(a1);
}

char *sub_100F2CBFC(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(v6, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_100F2CCAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F2CCE0(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_100F2CD30(uint64_t result)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(result + 32);
  if (v1)
  {
    sub_100F2C0D8(v1 + 42);
    sub_1004A4854(v1 + 28);
    v2 = (void *)v1[25];
    if (v2)
    {
      v1[26] = v2;
      operator delete(v2);
    }
    sub_10047F25C(v1 + 12);
    sub_10047F25C(v1 + 3);
    operator delete();
  }
  return result;
}

uint64_t sub_100F2CDA0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_100F2CE9C(a1 + 8, (_QWORD *)(a2 + 8));
  v4 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  sub_100F2D634(a1 + 80, (_QWORD *)(a2 + 80));
  v5 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  sub_10025EA00((_QWORD *)(a1 + 184), *(const void **)(a2 + 184), *(_QWORD *)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 3);
  sub_100F2DDCC(a1 + 208, (_QWORD *)(a2 + 208));
  v9 = *(_OWORD *)(a2 + 256);
  v10 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v9;
  *(_OWORD *)(a1 + 272) = v10;
  return a1;
}

void sub_100F2CE60(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 192) = v6;
    operator delete(v6);
  }
  sub_10047F25C(v3);
  sub_10047F25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F2CE9C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = &(*v7)[8 * (v4 & 0x1FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_100F2CF44((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100F2CF30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F2CF44(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return sub_100F2CF78(a1, a2, a3, v5);
}

_QWORD *sub_100F2CF78(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F2D0AC(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v24[0] = v8 + 8 * (v11 >> 9);
  v24[1] = v14;
  result = sub_100B4C468((uint64_t)v24, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = *a2;
        v20 = (_QWORD *)v14;
        do
        {
          v21 = *(_QWORD *)a3;
          a3 += 8;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_100F2D0AC(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F2D5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F2D634(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = &(*v7)[8 * (v4 & 0x1FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_100F2D6DC((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100F2D6C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F2D6DC(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return sub_100F2D710(a1, a2, a3, v5);
}

_QWORD *sub_100F2D710(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F2D844(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v24[0] = v8 + 8 * (v11 >> 9);
  v24[1] = v14;
  result = sub_100B4C468((uint64_t)v24, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = *a2;
        v20 = (_QWORD *)v14;
        do
        {
          v21 = *(_QWORD *)a3;
          a3 += 8;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_100F2D844(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F2DD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F2DDCC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  unint64_t v9;
  char *v10;
  __int128 *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    v8 = (__int128 *)(*(_QWORD *)v7 + 16 * v4);
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 8));
    v11 = (__int128 *)(*(_QWORD *)v10 + 16 * v9);
  }
  sub_100F2DE6C((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100F2DE58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F2DE6C(_QWORD *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(_QWORD *)a2) >> 4);
  return sub_100F2DEA0(a1, a2, a3, v5);
}

_QWORD *sub_100F2DEA0(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD v22[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 32 * (v9 - v8) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F2DFCC(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 16 * v11;
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  result = sub_1004CE854((uint64_t)v22, a4);
  while (v14 != v16)
  {
    v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_OWORD *)v14 == v17)
    {
      v17 = (_OWORD *)v14;
    }
    else
    {
      v18 = (_OWORD *)v14;
      do
      {
        v19 = *a3++;
        *v18 = v19;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          v20 = (__int128 *)a2[1];
          ++a2;
          a3 = v20;
        }
        ++v18;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result)
      break;
    v21 = v13[1];
    ++v13;
    v14 = v21;
  }
  return result;
}

void sub_100F2DFCC(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = a1[4];
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 255;
          else
            v64 = 256;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F2E4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F2E554(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  _QWORD *v7;
  __int128 *v8;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  if (a2[2] == v4)
  {
    v5 = 0;
    v8 = 0;
    v7 = (_QWORD *)(v4 + 8 * ((a2[5] + v3) / 0x38));
  }
  else
  {
    v5 = (__int128 *)(*(_QWORD *)(v4 + 8 * (v3 / 0x38)) + 72 * (v3 % 0x38));
    v6 = a2[5] + v3;
    v7 = (_QWORD *)(v4 + 8 * (v6 / 0x38));
    v8 = (__int128 *)(*v7 + 72 * (v6 % 0x38));
  }
  sub_100F2E620((_QWORD *)a1, (_QWORD *)(v4 + 8 * (v3 / 0x38)), v5, v7, v8);
  return a1;
}

void sub_100F2E60C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F2E620(_QWORD *a1, _QWORD *a2, __int128 *a3, _QWORD *a4, __int128 *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 56 * (a4 - a2)
       - 0x71C71C71C71C71C7 * (((uint64_t)a5 - *a4) >> 3)
       + 0x71C71C71C71C71C7 * (((uint64_t)a3 - *a2) >> 3);
  return sub_100F2E684(a1, a2, a3, v5);
}

uint64_t sub_100F2E684(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 56 * ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F2E84C(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x38));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 72 * (v11 % 0x38);
  v24 = (_QWORD *)(v8 + 8 * (v11 / 0x38));
  v25 = v14;
  result = (uint64_t)sub_1005E5C2C(&v24, a4);
  v16 = v25;
  if (v14 != v25)
  {
    v17 = v24;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4032;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = v14 + v19;
          v21 = *a3;
          *(_QWORD *)(v20 + 16) = *((_QWORD *)a3 + 2);
          *(_OWORD *)v20 = v21;
          result = sub_100F2D634(v14 + v19 + 24, (_QWORD *)a3 + 3);
          a3 = (__int128 *)((char *)a3 + 72);
          if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4032)
          {
            v22 = (__int128 *)a2[1];
            ++a2;
            a3 = v22;
          }
          v19 += 72;
        }
        while (v14 + v19 != v18);
      }
      a1[5] -= 0x71C71C71C71C71C7 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
  }
  return result;
}

void sub_100F2E828(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) -= 0x71C71C71C71C71C7 * (v2 >> 3);
  _Unwind_Resume(a1);
}

void sub_100F2E84C(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x38)
    v6 = v5 / 0x38 + 1;
  else
    v6 = v5 / 0x38;
  v7 = a1[4];
  if (v6 >= v7 / 0x38)
    v8 = v7 / 0x38;
  else
    v8 = v6;
  if (v6 <= v7 / 0x38)
  {
    for (a1[4] = v7 - 56 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFC0uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFC0uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 55;
          else
            v64 = 56;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 56 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -56 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFC0uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F2ED8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F2EE00(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

double sub_100F2EE20(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  double result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F2EF14(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  *(_QWORD *)(v8 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v8 + 48) = *((_QWORD *)a2 + 6);
  result = 0.0;
  *(__int128 *)((char *)a2 + 40) = 0u;
  *(__int128 *)((char *)a2 + 24) = 0u;
  *(_QWORD *)(v8 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(v8 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  ++a1[5];
  return result;
}

void sub_100F2EF14(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x38;
  v4 = v2 - 56;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F2F1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F2F228(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100F2F2AC(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100F2F2AC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F2F574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F2F5C0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F2F888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F2F8D4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F2FB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F2FBE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100F2FC6C(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100F2FC6C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F2FF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_100F2FF80(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F3000C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_100F3000C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F302D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t sub_100F30320(int64x2_t *a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 **v43;
  __int128 *v44;
  unint64_t v45;
  __int128 v46;
  void **v47;
  __int128 v48;
  unint64_t v49;
  __n128 v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  __n128 v57;
  uint64_t *v58;
  uint64_t v59;

  v6 = a1[2].u64[0];
  v7 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = (_QWORD *)(v7 + 8 * (v6 / 0x66));
  if (v8 == v7)
    v10 = 0;
  else
    v10 = *v9 + 40 * (v6 % 0x66);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 102 * (a2 - v9)
        - 0x3333333333333333 * ((a3 - *a2) >> 3)
        + 0x3333333333333333 * ((uint64_t)(v10 - *v9) >> 3);
  v12 = a1[2].i64[1];
  v13 = v12 - v11;
  if (v11 >= v12 - v11)
  {
    if (v8 == v7)
      v24 = 0;
    else
      v24 = 102 * ((v8 - v7) >> 3) - 1;
    if (v24 == v12 + v6)
    {
      sub_100F30BF4(a1);
      v12 = a1[2].i64[1];
      v13 = v12 - v11;
    }
    if (v12 == v11)
    {
      v25 = *(_QWORD *)(a1->i64[1] + 8 * ((a1[2].i64[0] + v11) / 0x66)) + 40 * ((a1[2].i64[0] + v11) % 0x66);
      v26 = *a4;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)a4 + 2);
      *(_OWORD *)v25 = v26;
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      *(_OWORD *)(v25 + 24) = *(__int128 *)((char *)a4 + 24);
      ++a1[2].i64[1];
    }
    else
    {
      v27 = a1[2].i64[0] + v12;
      v28 = a1->i64[1];
      v29 = (uint64_t *)(v28 + 8 * (v27 / 0x66));
      v30 = *v29;
      v31 = *v29 + 40 * (v27 % 0x66);
      if (a1[1].i64[0] == v28)
        v32 = 0;
      else
        v32 = v31;
      v33 = 0xCCCCCCCCCCCCCCCDLL * ((v32 - v30) >> 3);
      if (v32 - v30 < 41)
      {
        v45 = 102 - v33;
        v35 = &v29[-(v45 / 0x66)];
        v36 = *v35 + 40 * (102 * (v45 / 0x66) - v45) + 4040;
      }
      else
      {
        v34 = v33 - 1;
        v35 = &v29[v34 / 0x66];
        v36 = *v35 + 40 * (v34 % 0x66);
      }
      v46 = *(_OWORD *)v36;
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(v36 + 16);
      *(_OWORD *)v32 = v46;
      *(_QWORD *)(v36 + 8) = 0;
      *(_QWORD *)(v36 + 16) = 0;
      *(_QWORD *)v36 = 0;
      *(_OWORD *)(v32 + 24) = *(_OWORD *)(v36 + 24);
      ++a1[2].i64[1];
      if (v13 >= 2)
      {
        v57.n128_u64[0] = (unint64_t)v29;
        v57.n128_u64[1] = v32;
        sub_1004CE08C(&v57, -(uint64_t)v13);
        sub_100F310F4((uint64_t *)v57.n128_u64[0], v57.n128_i64[1], v35, v36, v29, v32, &v57);
        v29 = v58;
        v32 = v59;
      }
      if (v32 == *v29)
        v32 = *(v29 - 1) + 4080;
      v47 = (void **)(v32 - 40);
      if (*(char *)(v32 - 17) < 0)
        operator delete(*v47);
      v48 = *a4;
      *(_QWORD *)(v32 - 24) = *((_QWORD *)a4 + 2);
      *(_OWORD *)v47 = v48;
      *((_BYTE *)a4 + 23) = 0;
      *(_BYTE *)a4 = 0;
      *(_OWORD *)(v32 - 16) = *(__int128 *)((char *)a4 + 24);
    }
  }
  else
  {
    if (!v6)
      sub_100F308DC((void **)a1);
    v14 = a1[2].u64[0];
    v15 = a1->i64[1];
    v16 = a1[1].i64[0];
    v17 = (uint64_t *)(v15 + 8 * (v14 / 0x66));
    v18 = *v17;
    if (v11)
    {
      v19 = v18 + 40 * (v14 % 0x66);
      if (v16 == v15)
        v20 = 0;
      else
        v20 = v19;
      v21 = v20 - v18;
      v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v18) >> 3);
      if (v21 < 41)
        v23 = v17[-((102 - v22) / 0x66)] + 40 * (102 * ((102 - v22) / 0x66) - (102 - v22)) + 4040;
      else
        v23 = v17[(v22 - 1) / 0x66] + 40 * ((v22 - 1) % 0x66);
      v39 = *(_OWORD *)v20;
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v20 + 16);
      *(_OWORD *)v23 = v39;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)v20 = 0;
      *(_OWORD *)(v23 + 24) = *(_OWORD *)(v20 + 24);
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101BB2F70);
      if (v11 != 1)
      {
        v40 = v20 - *v17;
        v41 = 0xCCCCCCCCCCCCCCCDLL * (v40 >> 3);
        if (v40 < -39)
        {
          v49 = 100 - v41;
          v43 = (__int128 **)&v17[-(v49 / 0x66)];
          v44 = (__int128 *)((char *)*v43 + 40 * (102 * (v49 / 0x66) - v49) + 4040);
        }
        else
        {
          v42 = v41 + 1;
          v43 = (__int128 **)&v17[v42 / 0x66];
          v44 = (__int128 *)((char *)*v43 + 40 * (v42 % 0x66));
        }
        v57.n128_u64[0] = (unint64_t)v17;
        v57.n128_u64[1] = v20;
        sub_1004CE08C(&v57, v11);
        v50 = v57;
        v57.n128_u64[0] = (unint64_t)v17;
        v57.n128_u64[1] = v20;
        sub_100F30F08(v43, v44, (__int128 **)v50.n128_u64[0], (__int128 *)v50.n128_u64[1], (uint64_t)&v57);
        v20 = v57.n128_u64[1];
      }
      if (*(char *)(v20 + 23) < 0)
        operator delete(*(void **)v20);
      v51 = *a4;
      *(_QWORD *)(v20 + 16) = *((_QWORD *)a4 + 2);
      *(_OWORD *)v20 = v51;
      *((_BYTE *)a4 + 23) = 0;
      *(_BYTE *)a4 = 0;
      *(_OWORD *)(v20 + 24) = *(__int128 *)((char *)a4 + 24);
    }
    else
    {
      v37 = v18 + 40 * (v14 % 0x66);
      if (v16 == v15)
        v37 = 0;
      if (v37 == v18)
        v37 = *(v17 - 1) + 4080;
      v38 = *a4;
      *(_QWORD *)(v37 - 24) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(v37 - 40) = v38;
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      *(_OWORD *)(v37 - 16) = *(__int128 *)((char *)a4 + 24);
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101BB2F70);
    }
  }
  v52 = a1[2].u64[0];
  v53 = a1->i64[1];
  v54 = (_QWORD *)(v53 + 8 * (v52 / 0x66));
  if (a1[1].i64[0] == v53)
    v55 = 0;
  else
    v55 = *v54 + 40 * (v52 % 0x66);
  v57.n128_u64[0] = (unint64_t)v54;
  v57.n128_u64[1] = v55;
  sub_1004CE08C(&v57, v11);
  return v57.n128_u64[0];
}

void sub_100F308DC(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 102 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x66)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 51;
      else
        v40 = (uint64_t)a1[4] + 102;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 51;
      else
        v35 = (uint64_t)a1[4] + 102;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 102;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_100F30BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F30BF4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F30EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_100F30F08(__int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  __int128 **v10;
  __int128 *i;
  __int128 *v12;
  double result;
  __int128 *v14;
  __int128 v15;

  v7 = *(uint64_t **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 255; ; i = v12 + 255)
    {
      sub_100F30F98(a2, i, v7, v8, &v14);
      v8 = *((_QWORD *)&v15 + 1);
      v7 = (uint64_t *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100F30F98(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_100F30F98(__int128 *a1@<X1>, __int128 *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, __int128 **a5@<X8>)
{
  uint64_t *v5;
  __int128 *v6;
  __int128 *v8;
  uint64_t v9;
  int64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v5 = a3;
  v6 = a1;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v5 = a3 + 1;
    v9 = *a3;
    while (1)
    {
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - a4 + 4080) >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v6) >> 3)) < v10)
        v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v6) >> 3);
      v11 = sub_100F31074((uint64_t)&v14, v6, (__int128 *)((char *)v6 + 40 * v10), a4);
      if (v11 == v8)
        break;
      v6 = v11;
      v13 = *v5++;
      v9 = v13;
      a4 = v13;
    }
    a4 = v12;
    if (*(v5 - 1) + 4080 == v12)
      a4 = *v5;
    else
      --v5;
  }
  *a5 = v8;
  a5[1] = (__int128 *)v5;
  a5[2] = (__int128 *)a4;
}

__int128 *sub_100F31074(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      *(_OWORD *)(a4 + 24) = *(__int128 *)((char *)v5 + 24);
      a4 += 40;
      v5 = (__int128 *)((char *)v5 + 40);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

__n128 sub_100F310F4@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100F311C0(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  sub_100F311C0(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_100F311C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v5 = a3;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v9 = *a3;
    while (1)
    {
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((a4 - v9) >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3)) < v10)
        v10 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
      v11 = a2 - 40 * v10;
      result = sub_100F31298((uint64_t)&v16, v11, a2, a4);
      if (v11 == a1)
        break;
      v14 = *--v5;
      v9 = v14;
      a4 = v14 + 4080;
      a2 = v11;
    }
    a4 = v13;
    if (*v5 + 4080 == v13)
    {
      v15 = v5[1];
      ++v5;
      a4 = v15;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100F31298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void **v8;
  __int128 *v9;
  __int128 v10;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = (void **)(a4 + v7 - 40);
      if (*(char *)(a4 + v7 - 17) < 0)
        operator delete(*v8);
      v9 = (__int128 *)(a3 + v7 - 40);
      v10 = *v9;
      *(_QWORD *)(a4 + v7 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_OWORD *)v8 = v10;
      *(_BYTE *)(a3 + v7 - 17) = 0;
      *(_BYTE *)v9 = 0;
      *(_OWORD *)(a4 + v7 - 16) = *(_OWORD *)(a3 + v7 - 16);
      v7 -= 40;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void sub_100F31334(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 73 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x49)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF8uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 36;
      else
        v40 = (uint64_t)a1[4] + 73;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF8uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF8uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 36;
      else
        v35 = (uint64_t)a1[4] + 73;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 73;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_100F31600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F3164C(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 32);
  if (v1)
  {
    sub_10047F25C(v1 + 22);
    sub_100F2C304(v1 + 12);
    sub_10034111C(v1 + 6);
    sub_100F2C450(v1);
    operator delete();
  }
  return result;
}

uint64_t sub_100F316A8(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  if (a2[2] == v4)
  {
    v5 = 0;
    v8 = 0;
    v7 = (_QWORD *)(v4
                  + (((unint64_t)(((a2[5] + v3) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 8 * (v3 / 0x49)) + 56 * (v3 % 0x49));
    v6 = a2[5] + v3;
    v7 = (_QWORD *)(v4 + 8 * (v6 / 0x49));
    v8 = (_QWORD *)(*v7 + 56 * (v6 % 0x49));
  }
  sub_100F31778((_QWORD *)a1, (_QWORD *)(v4 + 8 * (v3 / 0x49)), v5, v7, v8);
  return a1;
}

void sub_100F31764(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F31778(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 73 * (a4 - a2)
       + 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a5 - *a4) >> 3)
       - 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a3 - *a2) >> 3);
  return sub_100F317DC(a1, a2, a3, v5);
}

uint64_t sub_100F317DC(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 73 * ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F31998(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x49));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 56 * (v11 % 0x49);
  v22 = (_QWORD *)(v8 + 8 * (v11 / 0x49));
  v23 = v14;
  result = (uint64_t)sub_10081FEC4(&v22, a4);
  v16 = v23;
  if (v14 != v23)
  {
    v17 = v22;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4088;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = 0;
        do
        {
          result = sub_100F31F4C(v14 + v19, a3);
          *(_QWORD *)(result + 48) = a3[6];
          a3 += 7;
          if ((_QWORD *)((char *)a3 - *a2) == (_QWORD *)4088)
          {
            v20 = (_QWORD *)a2[1];
            ++a2;
            a3 = v20;
          }
          v19 += 56;
        }
        while (v14 + v19 != v18);
      }
      a1[5] += 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17)
        break;
      v21 = v13[1];
      ++v13;
      v14 = v21;
    }
    while (v21 != v16);
  }
  return result;
}

void sub_100F31974(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) += 0x6DB6DB6DB6DB6DB7 * (v2 >> 3);
  _Unwind_Resume(a1);
}

void sub_100F31998(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x49)
    v6 = v5 / 0x49 + 1;
  else
    v6 = v5 / 0x49;
  v7 = a1[4];
  if (v6 >= v7 / 0x49)
    v8 = v7 / 0x49;
  else
    v8 = v6;
  if (v6 <= v7 / 0x49)
  {
    for (a1[4] = v7 - 73 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF8uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF8uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 72;
          else
            v64 = 73;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 73 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -73 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFF8uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F31ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F31F4C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  unint64_t v9;
  char *v10;
  __int128 *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 7));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 7));
  }
  else
  {
    v8 = (__int128 *)(*(_QWORD *)v7 + 32 * (v4 & 0x7F));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 7));
    v11 = (__int128 *)(*(_QWORD *)v10 + 32 * (v9 & 0x7F));
  }
  sub_100F31FF4((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100F31FE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F31FF4(_QWORD *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 5) + 16 * (a4 - a2) - (((uint64_t)a3 - *(_QWORD *)a2) >> 5);
  return sub_100F32028(a1, a2, a3, v5);
}

_QWORD *sub_100F32028(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 16 * (v9 - v8) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F32158(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 7));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 32 * (v11 & 0x7F);
  v23[0] = v8 + 8 * (v11 >> 7);
  v23[1] = v14;
  result = sub_100AAE988((uint64_t)v23, a4);
  while (v14 != v16)
  {
    v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_OWORD *)v14 == v17)
    {
      v17 = (_OWORD *)v14;
    }
    else
    {
      v18 = (_OWORD *)v14;
      do
      {
        v19 = *a3;
        v20 = a3[1];
        a3 += 2;
        *v18 = v19;
        v18[1] = v20;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          v21 = (__int128 *)a2[1];
          ++a2;
          a3 = v21;
        }
        v18 += 2;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 5;
    if (v13 == result)
      break;
    v22 = v13[1];
    ++v13;
    v14 = v22;
  }
  return result;
}

void sub_100F32158(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x7F) != 0)
    v6 = (v5 >> 7) + 1;
  else
    v6 = v5 >> 7;
  v7 = a1[4];
  if (v6 >= v7 >> 7)
    v8 = v7 >> 7;
  else
    v8 = v6;
  if (v6 <= v7 >> 7)
  {
    for (a1[4] = v7 - (v8 << 7); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 127;
          else
            v64 = 128;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 7);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 7;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F3266C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F326E0(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  _QWORD *v7;
  __int128 *v8;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  if (a2[2] == v4)
  {
    v5 = 0;
    v8 = 0;
    v7 = (_QWORD *)(v4 + 8 * ((a2[5] + v3) / 0x66));
  }
  else
  {
    v5 = (__int128 *)(*(_QWORD *)(v4 + 8 * (v3 / 0x66)) + 40 * (v3 % 0x66));
    v6 = a2[5] + v3;
    v7 = (_QWORD *)(v4 + 8 * (v6 / 0x66));
    v8 = (__int128 *)(*v7 + 40 * (v6 % 0x66));
  }
  sub_100F327AC((_QWORD *)a1, (_QWORD *)(v4 + 8 * (v3 / 0x66)), v5, v7, v8);
  return a1;
}

void sub_100F32798(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F327AC(_QWORD *a1, _QWORD *a2, __int128 *a3, _QWORD *a4, __int128 *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 102 * (a4 - a2)
       - 0x3333333333333333 * (((uint64_t)a5 - *a4) >> 3)
       + 0x3333333333333333 * (((uint64_t)a3 - *a2) >> 3);
  return sub_100F327FC(a1, a2, a3, v5);
}

_QWORD *sub_100F327FC(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 102 * ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F329C8(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x66));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 40 * (v11 % 0x66);
  v23 = (_QWORD *)(v8 + 8 * (v11 / 0x66));
  v24 = v14;
  result = sub_1004CE08C(&v23, a4);
  v16 = v24;
  if (v14 != v24)
  {
    v17 = v23;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4080;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = 0;
        do
        {
          result = (_QWORD *)(v14 + v19);
          if (*((char *)a3 + 23) < 0)
          {
            result = sub_100115CE4(result, *(void **)a3, *((_QWORD *)a3 + 1));
          }
          else
          {
            v20 = *a3;
            result[2] = *((_QWORD *)a3 + 2);
            *(_OWORD *)result = v20;
          }
          *(_OWORD *)(v14 + v19 + 24) = *(__int128 *)((char *)a3 + 24);
          a3 = (__int128 *)((char *)a3 + 40);
          if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4080)
          {
            v21 = (__int128 *)a2[1];
            ++a2;
            a3 = v21;
          }
          v19 += 40;
        }
        while (v14 + v19 != v18);
      }
      a1[5] -= 0x3333333333333333 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17)
        break;
      v22 = v13[1];
      ++v13;
      v14 = v22;
    }
    while (v22 != v16);
  }
  return result;
}

void sub_100F329AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) -= 0x3333333333333333 * (v2 >> 3);
  _Unwind_Resume(a1);
}

void sub_100F329C8(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x66)
    v6 = v5 / 0x66 + 1;
  else
    v6 = v5 / 0x66;
  v7 = a1[4];
  if (v6 >= v7 / 0x66)
    v8 = v7 / 0x66;
  else
    v8 = v6;
  if (v6 <= v7 / 0x66)
  {
    for (a1[4] = v7 - 102 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 101;
          else
            v64 = 102;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 102 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -102 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFF0uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F32F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F32F7C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = &(*v7)[8 * (v4 & 0x1FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_100F33024((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100F33010(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F33024(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return sub_100F33058(a1, a2, a3, v5);
}

_QWORD *sub_100F33058(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F3318C(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v24[0] = v8 + 8 * (v11 >> 9);
  v24[1] = v14;
  result = sub_100B4C468((uint64_t)v24, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = *a2;
        v20 = (_QWORD *)v14;
        do
        {
          v21 = *(_QWORD *)a3;
          a3 += 8;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_100F3318C(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F336A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F33714(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F339DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F33A28(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return sub_100F33A5C(a1, a2, a3, v5);
}

_QWORD *sub_100F33A5C(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char **v18;
  char *v19;
  char **v20;
  char *v21;
  _QWORD v22[2];
  char *v23;
  uint64_t v24;

  v20 = a2;
  v21 = a3;
  v7 = a1[5];
  if (v7 >= a4)
  {
    v14 = a1[1];
    v15 = (char *)(v14 + 8 * (a1[4] >> 9));
    if (a1[2] == v14)
      v16 = 0;
    else
      v16 = *(_QWORD *)v15 + 8 * (a1[4] & 0x1FFLL);
    v22[0] = a2;
    v22[1] = a3;
    v18 = (char **)sub_100B4C468((uint64_t)v22, a4);
    v23 = v15;
    v24 = v16;
    sub_100F33DAC(a2, a3, v18, v19, (uint64_t)&v23);
    return (_QWORD *)sub_100F33CB4((uint64_t)a1, v23, v24);
  }
  else
  {
    v9 = (char **)sub_100B4C468((uint64_t)&v20, v7);
    v10 = v8;
    v11 = a1[1];
    if (a1[2] == v11)
      v12 = 0;
    else
      v12 = *(_QWORD *)(v11 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
    v23 = (char *)(v11 + 8 * (a1[4] >> 9));
    v24 = v12;
    sub_100F33DAC(v20, v21, v9, v8, (uint64_t)&v23);
    return sub_100F33B80(a1, v9, v10, a4 - a1[5]);
  }
}

_QWORD *sub_100F33B80(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100F33F34(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v24[0] = v8 + 8 * (v11 >> 9);
  v24[1] = v14;
  result = sub_100B4C468((uint64_t)v24, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = *a2;
        v20 = (_QWORD *)v14;
        do
        {
          v21 = *(_QWORD *)a3;
          a3 += 8;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

uint64_t sub_100F33CB4(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 >> 9));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 8 * (v5 & 0x1FF);
  if (v9 != a3)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 3) + ((v8 - a2) << 6);
    v11 = a3 - *(_QWORD *)a2;
    v12 = v10 - (v11 >> 3);
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 >> 9));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 8 * (*(_QWORD *)(result + 32) & 0x1FFLL);
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3)
        v15 = 0;
      else
        v15 = (v11 >> 3) + ((a2 - v13) << 6) - ((v14 - *(_QWORD *)v13) >> 3);
      sub_100B4C468((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        result = sub_100B4D3C0(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

double sub_100F33DAC(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_100F33E78(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_100F33E78(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_100F33E78(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100F33E78@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        __src = (char *)memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void sub_100F33F34(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100F34448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F344BC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    sub_10047F25C((_QWORD *)(v1 + 48));
    operator delete();
  }
  return result;
}

uint64_t sub_100F34504(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = &(*v7)[8 * (v4 & 0x1FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_100F345AC((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100F34598(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F345AC(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return sub_100F33B80(a1, a2, a3, v5);
}

uint64_t sub_100F345E0(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_102193310;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

id sub_100F34640(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100F3468C(a1);
  else
    return 0;
}

id sub_100F3468C(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102193328);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C2F9D9 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102193328);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C2F9D9 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

void sub_100F34860(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100F3488C()
{
  operator new();
}

void sub_100F34928()
{
  operator delete();
}

_BYTE *sub_100F3494C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100F34E38(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1000BC378(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100F34A28(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    sub_10031C044(v1 + 8, *(_QWORD **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_100F34A74(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100F34AC8(a1, *(__int128 **)a2, (__int128 *)(a2 + 8));
  return a1;
}

void sub_100F34AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10031C044(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100F34AC8(uint64_t *result, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t **v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = sub_100F34B48(v5, v6, v4 + 2);
      v7 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(__int128 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (__int128 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100F34B48(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9[3];

  sub_100F34BD4((uint64_t)a1, a3, (uint64_t)v9);
  v5 = (uint64_t **)sub_100F34C3C(a1, a2, &v8, (const void **)v9[0] + 4);
  sub_1000145B0(a1, v8, v5, v9[0]);
  v6 = v9[0];
  v9[0] = 0;
  sub_10031C314((uint64_t)v9, 0);
  return v6;
}

void sub_100F34BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10031C314((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F34BD4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0xE0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100F34D48(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100F34C24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10031C314(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F34C3C(_QWORD *a1, uint64_t a2, _QWORD *a3, const void **a4)
{
  _QWORD *v6;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v6 = (_QWORD *)a2;
  if (a1 + 1 != (_QWORD *)a2 && sub_100279008((uint64_t)(a1 + 2), (const void **)(a2 + 32), a4))
    return sub_100F34DBC((uint64_t)a1, a3, a4);
  if ((_QWORD *)*a1 == v6)
  {
    v10 = v6;
  }
  else
  {
    v9 = (_QWORD *)*v6;
    if (*v6)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v11 = v6;
      do
      {
        v10 = (_QWORD *)v11[2];
        v12 = *v10 == (_QWORD)v11;
        v11 = v10;
      }
      while (v12);
    }
    if (sub_100279008((uint64_t)(a1 + 2), a4, (const void **)v10 + 4))
      return sub_10031C1B0((uint64_t)a1, a3, a4);
  }
  if (*v6)
  {
    *a3 = v10;
    return v10 + 1;
  }
  else
  {
    *a3 = v6;
  }
  return v6;
}

_QWORD *sub_100F34D48(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_10031BEF8((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F34DA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100F34DBC(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (sub_100279008(v7, (const void **)(v4 + 32), a3))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

id sub_100F34E38(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100F34E84(a1);
  else
    return 0;
}

id sub_100F34E84(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102193328);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C2FA02 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102193328);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C2FA02 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

uint64_t **sub_100F35058(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **v10;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_100F351E4((uint64_t)v18, (uint64_t)(v9 + 2));
          v10 = (uint64_t **)sub_10031C1B0((uint64_t)v5, v18, v17 + 4);
          sub_1000145B0(v5, v18[0], v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_10036C1BC((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_100F35614((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100F35668(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100F351D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100F35614((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F351E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2 + 24)
    sub_100F35288(*(char **)(a1 + 8), *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 33) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(v4 + 24) = v5;
  sub_1003AF708((std::string *)(v4 + 56), (const std::string *)(a2 + 80));
  sub_100F35398(v4 + 88, a2 + 112);
  *(_DWORD *)(v4 + 136) = *(_DWORD *)(a2 + 160);
  if (v4 != a2 + 24)
    sub_1002A3054((char *)(v4 + 144), *(char **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  return a1;
}

char *sub_100F35288(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      sub_100259694();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002A23D0(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 4;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9 - 4);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 4;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_100F35398(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 40))
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        sub_100F353F8((_QWORD *)a1, *(uint64_t **)(a2 + 16), 0);
      }
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(sub_1002A1C94(a1) + 40) = 0;
  }
  else
  {
    *(_BYTE *)(sub_1002A1D10(a1, a2) + 40) = 1;
  }
}

void sub_100F353F8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        *(_OWORD *)(v8 + 5) = *(_OWORD *)(v4 + 5);
        v10 = (void **)*v8;
        sub_100A92578(a1, v8);
        v4 = (uint64_t *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    sub_1002A1CCC((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_100F354F8(a1, (uint64_t)(v4 + 2));
    v4 = (uint64_t *)*v4;
  }
}

void sub_100F354C8(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  sub_1002A1CCC(v1, v2);
  __cxa_rethrow();
}

void sub_100F354E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_100F354F8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  sub_100F35554((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_100A92578(a1, v4);
}

void sub_100F35530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_1002A20A8((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_100F35554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x38uLL);
  v8 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  v9 = v7 + 16;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(v7 + 16, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v9 = *(_OWORD *)a2;
    *((_QWORD *)v7 + 4) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_10025A024(a1 + 24, (uint64_t)v9);
  *((_QWORD *)v8 + 1) = result;
  return result;
}

void sub_100F355F8(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  sub_1002A20A8(v3, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F35614(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10031C044(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_10031C044(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100F35668(uint64_t **a1, __int128 *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  sub_100F34BD4((uint64_t)a1, a2, (uint64_t)v7);
  v3 = (uint64_t **)sub_10031C1B0((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_1000145B0(a1, v6, v3, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  sub_10031C314((uint64_t)v7, 0);
  return v4;
}

_QWORD *sub_100F356D0@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = sub_100F35728(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100F35714(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F35728(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = off_102193358;
  a1[1] = 0;
  a1[3] = *a2;
  sub_100F34A74(a1 + 4, (uint64_t)(a2 + 1));
  return a1;
}

void sub_100F3576C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100F35780(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102193358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F35794(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102193358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100F357C8(uint64_t a1)
{
  sub_10031C044(a1 + 32, *(_QWORD **)(a1 + 40));
}

void sub_100F357DC()
{
  operator new();
}

void sub_100F35878()
{
  operator delete();
}

void sub_100F3589C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100F34E38(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100F3494C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102192BB0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102192BB0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_100F35C70(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_100F35CCC((uint64_t *)(a1 + 8), a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t *sub_100F35CCC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1007A26B8(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100F35D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007A28B0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100F35D20(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    sub_10031C044(v1 + 8, *(_QWORD **)(v1 + 16));
    operator delete();
  }
  return result;
}

void sub_100F35D6C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C2EEF0;
      v1[3] = unk_101C2EF00;
      v1[4] = xmmword_101C2EF10;
      v1[0] = xmmword_101C2EED0;
      v1[1] = unk_101C2EEE0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100F35E40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100F35E58()
{
  sub_1015A2E04(&qword_102309140, "MicroLocationNotifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102309140, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102309158, "MicroLocation");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102309158, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102309170, "/System/Library/LocationBundles/MicroLocation.bundle");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102309170, (void *)&_mh_execute_header);
}

uint64_t sub_100F35EFC()
{
  uint64_t result;

  if (qword_1023118F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023118F8 + 8))(qword_1023118F8);
  if (qword_102311900)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311900 + 8))(qword_102311900);
  if (qword_102311908)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311908 + 8))(qword_102311908);
  if (qword_102311910)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311910 + 8))(qword_102311910);
  if (qword_102311918)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311918 + 8))(qword_102311918);
  if (qword_102311920)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311920 + 8))(qword_102311920);
  if (qword_102311928)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311928 + 8))(qword_102311928);
  if (qword_102311930)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311930 + 8))(qword_102311930);
  if (qword_102311938)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311938 + 8))(qword_102311938);
  if (qword_102311940)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311940 + 8))(qword_102311940);
  if (qword_102311948)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311948 + 8))(qword_102311948);
  if (qword_102311950)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311950 + 8))(qword_102311950);
  if (qword_102311958)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311958 + 8))(qword_102311958);
  if (qword_102311960)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311960 + 8))(qword_102311960);
  if (qword_102311968)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311968 + 8))(qword_102311968);
  if (qword_102311970)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311970 + 8))(qword_102311970);
  if (qword_102311978)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311978 + 8))(qword_102311978);
  if (qword_102311980)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311980 + 8))(qword_102311980);
  if (qword_102311988)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311988 + 8))(qword_102311988);
  if (qword_102311990)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311990 + 8))(qword_102311990);
  if (qword_102311998)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311998 + 8))(qword_102311998);
  if (qword_1023119A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119A0 + 8))(qword_1023119A0);
  if (qword_1023119A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119A8 + 8))(qword_1023119A8);
  if (qword_1023119B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119B0 + 8))(qword_1023119B0);
  if (qword_1023119B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119B8 + 8))(qword_1023119B8);
  if (qword_1023119C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119C0 + 8))(qword_1023119C0);
  if (qword_1023119C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119C8 + 8))(qword_1023119C8);
  if (qword_1023119D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119D0 + 8))(qword_1023119D0);
  if (qword_1023119D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119D8 + 8))(qword_1023119D8);
  if (qword_1023119E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119E0 + 8))(qword_1023119E0);
  if (qword_1023119E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119E8 + 8))(qword_1023119E8);
  if (qword_1023119F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119F0 + 8))(qword_1023119F0);
  if (qword_1023119F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023119F8 + 8))(qword_1023119F8);
  if (qword_102311A00)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A00 + 8))(qword_102311A00);
  if (qword_102311A08)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A08 + 8))(qword_102311A08);
  if (qword_102311A10)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A10 + 8))(qword_102311A10);
  if (qword_102311A18)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A18 + 8))(qword_102311A18);
  if (qword_102311A20)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A20 + 8))(qword_102311A20);
  if (qword_102311A28)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A28 + 8))(qword_102311A28);
  if (qword_102311A30)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A30 + 8))(qword_102311A30);
  if (qword_102311A38)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A38 + 8))(qword_102311A38);
  if (qword_102311A40)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A40 + 8))(qword_102311A40);
  if (qword_102311A48)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311A48 + 8))(qword_102311A48);
  result = qword_102311A50;
  if (qword_102311A50)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102311A50 + 8))(qword_102311A50);
  return result;
}

void sub_100F36330(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;

  if ((byte_1023091A0 & 1) == 0)
  {
    byte_1023091A0 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", a4);
    sub_1007667C8(v4, v5, v6, v7);
    sub_1008C80A4(v8, v9, v10, v11);
    sub_100DA4728(v12, v13, v14, v15);
    operator new();
  }
}

uint64_t sub_100F36EA4(uint64_t result)
{
  *(_QWORD *)result = off_102193600;
  *(_QWORD *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

_QWORD *sub_100F36EC4(_QWORD *result)
{
  *result = off_102193678;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = 0;
  return result;
}

uint64_t sub_100F36EE0(uint64_t result)
{
  *(_QWORD *)result = &off_102193768;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

double sub_100F36EFC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021937E0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

_QWORD *sub_100F36F18(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = off_102193858;
  return result;
}

uint64_t sub_100F36F2C(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1021939C0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100F36F48(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102193A38;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

double sub_100F36F64(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102193AB0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100F36F80(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102193B28;
  *(_QWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 54) = 0u;
  return result;
}

double sub_100F36FA8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102193D08;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

double sub_100F36FC8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102193D80;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_100F36FE4(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102193DF8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100F36FFC(uint64_t result)
{
  *(_QWORD *)result = off_102193E70;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

_QWORD *sub_100F37018(_QWORD *result)
{
  *result = off_1021940C8;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = 0;
  return result;
}

double sub_100F37034(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102194500;
  *(_BYTE *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  return result;
}

double sub_100F37058(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_102194320;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

double sub_100F37078(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_102194398;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

_QWORD *sub_100F37094(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = off_102194410;
  return result;
}

uint64_t sub_100F370A8(uint64_t result)
{
  *(_QWORD *)result = off_102194488;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_QWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100F370CC(uint64_t result)
{
  *(_QWORD *)result = off_102194578;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_100F370E0(_QWORD *result)
{
  *result = off_102194758;
  result[1] = 0;
  result[5] = 0;
  result[6] = 0;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t sub_100F37104(uint64_t result)
{
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1021947D0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 15) = 0;
  return result;
}

uint64_t sub_100F3711C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t result;

  v4 = (_QWORD *)a1;
  v5 = qword_102311938;
  if (!qword_102311938)
  {
    a1 = sub_100F36330();
    v5 = qword_102311938;
  }
  v4[3] = v5;
  v6 = qword_102311940;
  if (!qword_102311940)
  {
    a1 = sub_100F36330();
    v6 = qword_102311940;
  }
  v4[4] = v6;
  v7 = qword_102311958;
  if (!qword_102311958)
  {
    a1 = sub_100F36330();
    v7 = qword_102311958;
  }
  v4[5] = v7;
  v8 = qword_102311960;
  if (!qword_102311960)
  {
    a1 = sub_100F36330();
    v8 = qword_102311960;
  }
  v4[6] = v8;
  v9 = qword_102311968;
  if (!qword_102311968)
  {
    a1 = sub_100F36330();
    v9 = qword_102311968;
  }
  v4[7] = v9;
  v10 = qword_102311970;
  if (!qword_102311970)
  {
    a1 = sub_100F36330();
    v10 = qword_102311970;
  }
  v4[8] = v10;
  v11 = qword_102311978;
  if (!qword_102311978)
  {
    a1 = sub_100F36330();
    v11 = qword_102311978;
  }
  v4[9] = v11;
  v12 = qword_102311980;
  if (!qword_102311980)
  {
    a1 = sub_100F36330();
    v12 = qword_102311980;
  }
  v4[10] = v12;
  v13 = qword_102311988;
  if (!qword_102311988)
  {
    a1 = sub_100F36330();
    v13 = qword_102311988;
  }
  v4[11] = v13;
  v14 = qword_102311990;
  if (!qword_102311990)
  {
    a1 = sub_100F36330();
    v14 = qword_102311990;
  }
  v4[12] = v14;
  v15 = qword_102311998;
  if (!qword_102311998)
  {
    a1 = sub_100F36330();
    v15 = qword_102311998;
  }
  v4[13] = v15;
  v16 = qword_1023119A0;
  if (!qword_1023119A0)
  {
    a1 = sub_100F36330();
    v16 = qword_1023119A0;
  }
  v4[14] = v16;
  v17 = qword_102311920;
  if (!qword_102311920)
  {
    a1 = sub_100F36330();
    v17 = qword_102311920;
  }
  v4[15] = v17;
  v18 = qword_102311928;
  if (!qword_102311928)
  {
    a1 = sub_100F36330();
    v18 = qword_102311928;
  }
  v4[16] = v18;
  v19 = qword_102311930;
  if (!qword_102311930)
  {
    a1 = sub_100F36330();
    v19 = qword_102311930;
  }
  v4[17] = v19;
  v20 = qword_102311948;
  if (!qword_102311948)
  {
    a1 = sub_100F36330();
    v20 = qword_102311948;
  }
  v4[18] = v20;
  v21 = qword_102311918;
  if (!qword_102311918)
  {
    a1 = sub_100F36330();
    v21 = qword_102311918;
  }
  v4[19] = v21;
  v22 = qword_102311950;
  if (!qword_102311950)
  {
    a1 = sub_100F36330();
    v22 = qword_102311950;
  }
  v4[20] = v22;
  v23 = qword_1023119B0;
  if (!qword_1023119B0)
  {
    a1 = sub_100F36330();
    v23 = qword_1023119B0;
  }
  v4[21] = v23;
  v24 = qword_1023119B8;
  if (!qword_1023119B8)
  {
    a1 = sub_100F36330();
    v24 = qword_1023119B8;
  }
  v4[22] = v24;
  v25 = qword_1023119C8;
  if (!qword_1023119C8)
  {
    a1 = sub_100F36330();
    v25 = qword_1023119C8;
  }
  v4[23] = v25;
  v26 = qword_1023119D0;
  if (!qword_1023119D0)
  {
    a1 = sub_100F36330();
    v26 = qword_1023119D0;
  }
  v4[24] = v26;
  v27 = qword_1023119D8;
  if (!qword_1023119D8)
  {
    a1 = sub_100F36330();
    v27 = qword_1023119D8;
  }
  v4[25] = v27;
  v28 = qword_102311A00;
  if (!qword_102311A00)
  {
    a1 = sub_100F36330();
    v28 = qword_102311A00;
  }
  v4[26] = v28;
  v29 = qword_102311A50;
  if (!qword_102311A50)
  {
    a1 = sub_100F36330();
    v29 = qword_102311A50;
  }
  v4[27] = v29;
  v30 = qword_102311A28;
  if (!qword_102311A28)
  {
    a1 = sub_100F36330();
    v30 = qword_102311A28;
  }
  v4[28] = v30;
  v31 = qword_1023119A8;
  if (!qword_1023119A8)
  {
    a1 = sub_100F36330();
    v31 = qword_1023119A8;
  }
  v4[29] = v31;
  v32 = qword_1023119C0;
  if (!qword_1023119C0)
  {
    a1 = sub_100F36330();
    v32 = qword_1023119C0;
  }
  v4[30] = v32;
  v33 = sub_1008F965C(a1, a2, a3, a4);
  v4[31] = v33;
  v37 = sub_1008D6784(v33, v34, v35, v36);
  v4[33] = v37;
  v41 = sub_1008F4078(v37, v38, v39, v40);
  v4[34] = v41;
  v45 = sub_1008F4DD4(v41, v42, v43, v44);
  v4[35] = v45;
  v49 = sub_1008F8050(v45, v46, v47, v48);
  v4[36] = v49;
  v53 = sub_1008FAF40(v49, v50, v51, v52);
  v4[37] = v53;
  v57 = sub_1008FBF08(v53, v54, v55, v56);
  v4[39] = v57;
  v61 = sub_1008F8D08(v57, v58, v59, v60);
  v4[40] = v61;
  v65 = sub_1008CE404(v61, v62, v63, v64);
  v4[43] = v65;
  v69 = sub_1008D2D38(v65, v66, v67, v68);
  v4[47] = v69;
  result = sub_1008CFBD4(v69, v70, v71, v72);
  v4[48] = result;
  return result;
}

uint64_t sub_100F37430(_QWORD *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t result;

  v5 = sub_1007678FC((uint64_t)a1, a2, a3, a4);
  a1[3] = v5;
  v9 = sub_100DBA024(v5, v6, v7, v8);
  a1[4] = v9;
  v13 = sub_10076A0B8(v9, v10, v11, v12);
  a1[5] = v13;
  v17 = qword_102311910;
  if (!qword_102311910)
  {
    v13 = sub_100F36330();
    v17 = qword_102311910;
  }
  a1[6] = v17;
  v18 = sub_10076887C(v13, v14, v15, v16);
  a1[7] = v18;
  v22 = qword_1023119E0;
  if (!qword_1023119E0)
  {
    v18 = sub_100F36330();
    v22 = qword_1023119E0;
  }
  a1[8] = v22;
  v23 = qword_1023119F8;
  if (!qword_1023119F8)
  {
    v18 = sub_100F36330();
    v23 = qword_1023119F8;
  }
  a1[9] = v23;
  v24 = sub_10076A85C(v18, v19, v20, v21);
  a1[10] = v24;
  v28 = sub_10076A3F0(v24, v25, v26, v27);
  a1[11] = v28;
  v32 = qword_102311A30;
  if (!qword_102311A30)
  {
    v28 = sub_100F36330();
    v32 = qword_102311A30;
  }
  a1[13] = v32;
  v33 = qword_102311A38;
  if (!qword_102311A38)
  {
    v28 = sub_100F36330();
    v33 = qword_102311A38;
  }
  a1[14] = v33;
  v34 = qword_102311A40;
  if (!qword_102311A40)
  {
    v28 = sub_100F36330();
    v34 = qword_102311A40;
  }
  a1[15] = v34;
  v35 = sub_1008CACB0(v28, v29, v30, v31);
  a1[16] = v35;
  v39 = sub_1008E58AC(v35, v36, v37, v38);
  a1[18] = v39;
  v43 = sub_1008EA9A8(v39, v40, v41, v42);
  a1[19] = v43;
  v47 = sub_1008F011C(v43, v44, v45, v46);
  a1[20] = v47;
  v51 = sub_1008FBAE0(v47, v48, v49, v50);
  a1[21] = v51;
  v55 = sub_1008FF0A4(v51, v52, v53, v54);
  a1[22] = v55;
  v59 = sub_1008D3C2C(v55, v56, v57, v58);
  a1[23] = v59;
  v63 = sub_1008D1F78(v59, v60, v61, v62);
  a1[24] = v63;
  result = sub_1008CEEA0(v63, v64, v65, v66);
  a1[26] = result;
  return result;
}

uint64_t sub_100F37554(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)result;
  v2 = qword_102311A20;
  if (!qword_102311A20)
  {
    result = sub_100F36330();
    v2 = qword_102311A20;
  }
  v1[2] = v2;
  v3 = qword_102311A08;
  if (!qword_102311A08)
  {
    result = sub_100F36330();
    v3 = qword_102311A08;
  }
  v1[3] = v3;
  v4 = qword_102311A10;
  if (!qword_102311A10)
  {
    result = sub_100F36330();
    v4 = qword_102311A10;
  }
  v1[4] = v4;
  v5 = qword_102311A18;
  if (!qword_102311A18)
  {
    result = sub_100F36330();
    v5 = qword_102311A18;
  }
  v1[5] = v5;
  return result;
}

void sub_100F375D0()
{
  operator new();
}

uint64_t sub_100F3768C(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100F376A4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100F376FC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100F37754(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100F377AC(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100F377C4(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 76);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(result + 49) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_BYTE *)(result + 69) = 0;
    *(_DWORD *)(result + 65) = 0;
  }
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_100F377FC(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 15;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100F37814(uint64_t result)
{
  if (*(_BYTE *)(result + 44))
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100F37830(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100F37848(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100F378A0(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F378B4(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
  {
    *(_BYTE *)(result + 8) = 1;
    *(_DWORD *)(result + 9) = 0;
    *(_BYTE *)(result + 13) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F378D4(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F378E8(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
  {
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F37900(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100F37914(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v1 = *(_QWORD *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(_BYTE **)v1 = 0;
        *(_QWORD *)(v1 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v1 = 0;
        *(_BYTE *)(v1 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F37958(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v1 = *(_QWORD *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(_BYTE **)v1 = 0;
        *(_QWORD *)(v1 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v1 = 0;
        *(_BYTE *)(v1 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F3799C(uint64_t result)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  LOBYTE(v1) = *(_BYTE *)(result + 56);
  if ((_BYTE)v1)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 48) = 0;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        v3 = *(_DWORD *)(v2 + 56);
        if ((_BYTE)v3)
        {
          *(_DWORD *)(v2 + 36) = 0;
          *(_QWORD *)(v2 + 16) = 0;
          *(_QWORD *)(v2 + 24) = 0;
          *(_QWORD *)(v2 + 8) = 0;
          *(_BYTE *)(v2 + 32) = 0;
        }
        if ((v3 & 0xFF00) != 0)
        {
          *(_QWORD *)(v2 + 40) = 0;
          *(_DWORD *)(v2 + 48) = 0;
        }
        *(_DWORD *)(v2 + 56) = 0;
        v1 = *(_DWORD *)(result + 56);
      }
    }
    if ((v1 & 0x10) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 52))
          *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        *(_DWORD *)(v4 + 40) = 0;
        *(_DWORD *)(v4 + 52) = 0;
        v1 = *(_DWORD *)(result + 56);
      }
    }
    if ((v1 & 0x20) != 0)
    {
      v5 = *(_QWORD *)(result + 32);
      if (v5)
      {
        if ((*(_WORD *)(v5 + 36) & 0x1FE) != 0)
          *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 36) = 0;
        v1 = *(_DWORD *)(result + 56);
      }
    }
    if ((v1 & 0x40) != 0)
    {
      v6 = *(_QWORD *)(result + 40);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 20))
          *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_100F37A64(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100F37A78(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100F37A90(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  char **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  char *v10;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t result;
  char *v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  _BYTE *v51;
  int *v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  _BYTE *v60;
  int *v61;
  char *v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  _BYTE *v69;
  int *v70;
  char *v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  char *v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  _BYTE *v87;
  uint64_t v88;
  char *v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  _BYTE *v96;
  _DWORD *v97;
  char *v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  _BYTE *v105;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  _BYTE *v114;
  uint64_t v115;
  char *v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  _BYTE *v123;
  uint64_t v124;
  char *v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  _BYTE *v132;
  uint64_t v133;
  char *v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  unsigned __int8 *v141;
  uint64_t v142;
  char *v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned __int8 *v150;
  uint64_t v151;
  char *v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  unsigned __int8 *v159;
  int *v160;
  char *v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  unsigned __int8 *v168;
  uint64_t v169;
  char *v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  unsigned __int8 *v177;
  uint64_t v178;
  char *v179;
  int v180;
  int v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  unsigned __int8 *v186;
  uint64_t v187;
  char *v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  int v194;
  unsigned __int8 *v195;
  uint64_t v196;
  char *v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned __int8 *v204;
  unsigned int *v205;
  char *v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned __int8 *v213;
  uint64_t v214;
  char *v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  int v221;
  unsigned __int8 *v222;
  uint64_t v223;
  char *v224;
  int v225;
  int v226;
  int v227;
  unsigned int v228;
  int v229;
  int v230;
  unsigned __int8 *v231;
  uint64_t v232;
  char *v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  int v238;
  int v239;
  unsigned __int8 *v240;
  uint64_t v241;
  char *v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  int v247;
  int v248;
  unsigned __int8 *v249;
  uint64_t v250;
  char *v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned __int8 *v258;
  uint64_t v259;
  char *v260;
  int v261;
  int v262;
  int v263;
  unsigned int v264;
  int v265;
  int v266;
  unsigned __int8 *v267;
  uint64_t v268;
  char *v269;
  int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  unsigned __int8 *v276;
  uint64_t v277;
  char *v278;
  int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  unsigned __int8 *v285;
  uint64_t v286;
  char *v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  int v293;
  unsigned __int8 *v294;
  void *v295;
  unsigned __int8 *v296;
  unsigned int *v297;
  char *v298;
  int v299;
  int v300;
  int v301;
  unsigned int v302;
  int v303;
  int v304;
  unsigned __int8 *v305;
  char *v306;
  _DWORD *v307;
  char *v308;
  int v309;
  int v310;
  int v311;
  unsigned int v312;
  int v313;
  int v314;
  unsigned __int8 *v315;
  unsigned int *v316;
  char *v317;
  int v318;
  int v319;
  int v320;
  unsigned int v321;
  int v322;
  int v323;
  unsigned __int8 *v324;
  _DWORD *v325;
  char *v326;
  int v327;
  int v328;
  int v329;
  unsigned int v330;
  int v331;
  int v332;
  unsigned __int8 *v333;
  uint64_t v334;
  char *v335;
  int v336;
  int v337;
  int v338;
  unsigned int v339;
  int v340;
  int v341;
  unsigned __int8 *v342;
  uint64_t v343;
  char *v344;
  int v345;
  int v346;
  int v347;
  unsigned int v348;
  int v349;
  int v350;
  unsigned __int8 *v351;
  uint64_t v352;
  char *v353;
  int v354;
  int v355;
  int v356;
  unsigned int v357;
  int v358;
  int v359;
  unsigned __int8 *v360;
  int v361;
  unsigned int v362;
  uint64_t v363;
  int v364;
  int v365;
  unsigned __int8 *v366;
  unint64_t v367;
  int v368;
  uint64_t v369;
  unsigned int v370;
  uint64_t v371;
  int v372;
  int *v373;
  char *v374;
  int v375;
  int v376;
  int v377;
  unsigned int v378;
  int v379;
  int v380;
  unsigned __int8 *v381;
  char *v382;
  int v383;
  unsigned int v384;
  uint64_t v385;
  int v386;
  int v387;
  unsigned __int8 *v388;
  unint64_t v389;
  int v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  int v394;
  unsigned int v395;
  char *v396;
  char *v397;
  uint64_t v398;
  char *v399;
  int v400;
  int v401;
  int v402;
  unsigned int v403;
  int v404;
  int v405;
  unsigned __int8 *v406;
  int *v407;
  char *v408;
  int v409;
  int v410;
  int v411;
  unsigned int v412;
  int v413;
  int v414;
  unint64_t *v415;
  unsigned int *v416;
  unsigned int *v417;
  unsigned int v418;
  char v419;
  unsigned int v420[12];

  v5 = (char **)((char *)this + 8);
  v6 = a1 + 352;
  v7 = a1 + 328;
  v8 = (unsigned int *)(a1 + 16);
  v417 = (unsigned int *)(a1 + 304);
  v9 = (unsigned int *)(a1 + 308);
  v415 = (unint64_t *)(a1 + 8);
  v416 = (unsigned int *)(a1 + 372);
LABEL_2:
  while (2)
  {
    v10 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v10;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v10 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_111;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v415);
          if (!(_DWORD)result)
            return result;
          v15 = (char *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v415 = *v14;
          v15 = v14 + 1;
          *v5 = v15;
        }
        *(_DWORD *)(a1 + 396) |= 1u;
        if ((unint64_t)v15 < v13 && *v15 == 16)
        {
          v16 = v15 + 1;
          *v5 = v16;
          goto LABEL_123;
        }
        continue;
      case 2u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_111;
        v16 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
LABEL_123:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v30 = (char *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v8 = *v16;
          v30 = v16 + 1;
          *v5 = v30;
        }
        *(_DWORD *)(a1 + 396) |= 2u;
        if ((unint64_t)v30 >= v13 || *v30 != 24)
          continue;
        v17 = v30 + 1;
        *v5 = v17;
LABEL_131:
        v420[0] = 0;
        if ((unint64_t)v17 >= v13 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420);
          if (!(_DWORD)result)
            return result;
          v31 = v420[0];
        }
        else
        {
          v31 = *v17;
          *v5 = v17 + 1;
        }
        if (sub_100103BB0(v31))
        {
          *(_DWORD *)(a1 + 396) |= 4u;
          *(_DWORD *)(a1 + 20) = v31;
        }
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 != 34)
          continue;
        *v5 = v32 + 1;
LABEL_141:
        *(_DWORD *)(a1 + 396) |= 8u;
        v33 = *(_QWORD *)(a1 + 24);
        if (!v33)
          operator new();
        v420[0] = 0;
        v34 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v34 >= *((_QWORD *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v34;
          *v5 = v34 + 1;
        }
        v35 = *((_DWORD *)this + 14);
        v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36)
          return 0;
        v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F402D4(v33, this, v38) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        v39 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v39, 1);
        v41 = v39 - 1;
        if (v41 < 0 == v40)
          *((_DWORD *)this + 14) = v41;
        v42 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v42 >= *((_QWORD *)this + 2) || *v42 != 42)
          continue;
        *v5 = v42 + 1;
LABEL_155:
        *(_DWORD *)(a1 + 396) |= 0x10u;
        v43 = *(_QWORD *)(a1 + 32);
        if (!v43)
          operator new();
        v420[0] = 0;
        v44 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v44 >= *((_QWORD *)this + 2) || *v44 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v44;
          *v5 = v44 + 1;
        }
        v45 = *((_DWORD *)this + 14);
        v46 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v45 + 1;
        if (v45 >= v46)
          return 0;
        v47 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F407B0(v43, this, v48) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v47);
        v49 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v49, 1);
        v50 = v49 - 1;
        if (v50 < 0 == v40)
          *((_DWORD *)this + 14) = v50;
        v51 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v51 >= *((_QWORD *)this + 2) || *v51 != 50)
          continue;
        *v5 = v51 + 1;
LABEL_169:
        *(_DWORD *)(a1 + 396) |= 0x20u;
        v52 = *(int **)(a1 + 40);
        if (!v52)
          operator new();
        v420[0] = 0;
        v53 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v53 >= *((_QWORD *)this + 2) || *v53 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v53;
          *v5 = v53 + 1;
        }
        v54 = *((_DWORD *)this + 14);
        v55 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v54 + 1;
        if (v54 >= v55)
          return 0;
        v56 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F40FD0(v52, this, v57) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v56);
        v58 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v58, 1);
        v59 = v58 - 1;
        if (v59 < 0 == v40)
          *((_DWORD *)this + 14) = v59;
        v60 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v60 >= *((_QWORD *)this + 2) || *v60 != 58)
          continue;
        *v5 = v60 + 1;
LABEL_183:
        *(_DWORD *)(a1 + 396) |= 0x40u;
        v61 = *(int **)(a1 + 48);
        if (!v61)
          operator new();
        v420[0] = 0;
        v62 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v62 >= *((_QWORD *)this + 2) || *v62 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v62;
          *v5 = v62 + 1;
        }
        v63 = *((_DWORD *)this + 14);
        v64 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v63 + 1;
        if (v63 >= v64)
          return 0;
        v65 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F41398(v61, this, v66) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v65);
        v67 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v67, 1);
        v68 = v67 - 1;
        if (v68 < 0 == v40)
          *((_DWORD *)this + 14) = v68;
        v69 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v69 >= *((_QWORD *)this + 2) || *v69 != 66)
          continue;
        *v5 = v69 + 1;
LABEL_197:
        *(_DWORD *)(a1 + 396) |= 0x80u;
        v70 = *(int **)(a1 + 56);
        if (!v70)
          operator new();
        v420[0] = 0;
        v71 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v71 >= *((_QWORD *)this + 2) || *v71 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v71;
          *v5 = v71 + 1;
        }
        v72 = *((_DWORD *)this + 14);
        v73 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v72 + 1;
        if (v72 >= v73)
          return 0;
        v74 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F41760(v70, this, v75) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v74);
        v76 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v76, 1);
        v77 = v76 - 1;
        if (v77 < 0 == v40)
          *((_DWORD *)this + 14) = v77;
        v78 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v78 >= *((_QWORD *)this + 2) || *v78 != 74)
          continue;
        *v5 = v78 + 1;
LABEL_211:
        *(_DWORD *)(a1 + 396) |= 0x100u;
        v79 = *(_QWORD *)(a1 + 64);
        if (!v79)
          operator new();
        v420[0] = 0;
        v80 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v80 >= *((_QWORD *)this + 2) || *v80 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v80;
          *v5 = v80 + 1;
        }
        v81 = *((_DWORD *)this + 14);
        v82 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v81 + 1;
        if (v81 >= v82)
          return 0;
        v83 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F41B0C(v79, this, v84) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v83);
        v85 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v85, 1);
        v86 = v85 - 1;
        if (v86 < 0 == v40)
          *((_DWORD *)this + 14) = v86;
        v87 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v87 >= *((_QWORD *)this + 2) || *v87 != 82)
          continue;
        *v5 = v87 + 1;
LABEL_225:
        *(_DWORD *)(a1 + 396) |= 0x200u;
        v88 = *(_QWORD *)(a1 + 72);
        if (!v88)
          operator new();
        v420[0] = 0;
        v89 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v89 >= *((_QWORD *)this + 2) || *v89 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v89;
          *v5 = v89 + 1;
        }
        v90 = *((_DWORD *)this + 14);
        v91 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v90 + 1;
        if (v90 >= v91)
          return 0;
        v92 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F41EC0(v88, this, v93) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v92);
        v94 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v94, 1);
        v95 = v94 - 1;
        if (v95 < 0 == v40)
          *((_DWORD *)this + 14) = v95;
        v96 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v96 >= *((_QWORD *)this + 2) || *v96 != 90)
          continue;
        *v5 = v96 + 1;
LABEL_239:
        *(_DWORD *)(a1 + 396) |= 0x400u;
        v97 = *(_DWORD **)(a1 + 80);
        if (!v97)
          operator new();
        v420[0] = 0;
        v98 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v98 >= *((_QWORD *)this + 2) || *v98 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v98;
          *v5 = v98 + 1;
        }
        v99 = *((_DWORD *)this + 14);
        v100 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v99 + 1;
        if (v99 >= v100)
          return 0;
        v101 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F42848(v97, this, v102) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v101);
        v103 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v103, 1);
        v104 = v103 - 1;
        if (v104 < 0 == v40)
          *((_DWORD *)this + 14) = v104;
        v105 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v105 >= *((_QWORD *)this + 2) || *v105 != 98)
          continue;
        *v5 = v105 + 1;
LABEL_253:
        *(_DWORD *)(a1 + 396) |= 0x800u;
        v106 = *(_QWORD *)(a1 + 88);
        if (!v106)
          operator new();
        v420[0] = 0;
        v107 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v107 >= *((_QWORD *)this + 2) || *v107 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v107;
          *v5 = v107 + 1;
        }
        v108 = *((_DWORD *)this + 14);
        v109 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v108 + 1;
        if (v108 >= v109)
          return 0;
        v110 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F42CA0(v106, this, v111) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v110);
        v112 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v112, 1);
        v113 = v112 - 1;
        if (v113 < 0 == v40)
          *((_DWORD *)this + 14) = v113;
        v114 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v114 >= *((_QWORD *)this + 2) || *v114 != 106)
          continue;
        *v5 = v114 + 1;
LABEL_267:
        *(_DWORD *)(a1 + 396) |= 0x1000u;
        v115 = *(_QWORD *)(a1 + 96);
        if (!v115)
          operator new();
        v420[0] = 0;
        v116 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v116 >= *((_QWORD *)this + 2) || *v116 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v116;
          *v5 = v116 + 1;
        }
        v117 = *((_DWORD *)this + 14);
        v118 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v117 + 1;
        if (v117 >= v118)
          return 0;
        v119 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F42F74(v115, this, v120) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v119);
        v121 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v121, 1);
        v122 = v121 - 1;
        if (v122 < 0 == v40)
          *((_DWORD *)this + 14) = v122;
        v123 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v123 >= *((_QWORD *)this + 2) || *v123 != 114)
          continue;
        *v5 = v123 + 1;
LABEL_281:
        *(_DWORD *)(a1 + 396) |= 0x2000u;
        v124 = *(_QWORD *)(a1 + 104);
        if (!v124)
          operator new();
        v420[0] = 0;
        v125 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v125 >= *((_QWORD *)this + 2) || *v125 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v125;
          *v5 = v125 + 1;
        }
        v126 = *((_DWORD *)this + 14);
        v127 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v126 + 1;
        if (v126 >= v127)
          return 0;
        v128 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F431B0(v124, this, v129) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v128);
        v130 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v130, 1);
        v131 = v130 - 1;
        if (v131 < 0 == v40)
          *((_DWORD *)this + 14) = v131;
        v132 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v132 >= *((_QWORD *)this + 2) || *v132 != 122)
          continue;
        *v5 = v132 + 1;
LABEL_295:
        *(_DWORD *)(a1 + 396) |= 0x4000u;
        v133 = *(_QWORD *)(a1 + 112);
        if (!v133)
          operator new();
        v420[0] = 0;
        v134 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v134 >= *((_QWORD *)this + 2) || *v134 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v134;
          *v5 = v134 + 1;
        }
        v135 = *((_DWORD *)this + 14);
        v136 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v135 + 1;
        if (v135 >= v136)
          return 0;
        v137 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F435E4(v133, this, v138) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v137);
        v139 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v139, 1);
        v140 = v139 - 1;
        if (v140 < 0 == v40)
          *((_DWORD *)this + 14) = v140;
        v141 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v141 <= 1 || *v141 != 130 || v141[1] != 1)
          continue;
        *v5 = (char *)(v141 + 2);
LABEL_310:
        *(_DWORD *)(a1 + 396) |= 0x8000u;
        v142 = *(_QWORD *)(a1 + 120);
        if (!v142)
          operator new();
        v420[0] = 0;
        v143 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v143 >= *((_QWORD *)this + 2) || *v143 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v143;
          *v5 = v143 + 1;
        }
        v144 = *((_DWORD *)this + 14);
        v145 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v144 + 1;
        if (v144 >= v145)
          return 0;
        v146 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F3FA40(v142, this, v147) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v146);
        v148 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v148, 1);
        v149 = v148 - 1;
        if (v149 < 0 == v40)
          *((_DWORD *)this + 14) = v149;
        v150 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v150 <= 1 || *v150 != 138 || v150[1] != 1)
          continue;
        *v5 = (char *)(v150 + 2);
LABEL_325:
        *(_DWORD *)(a1 + 396) |= 0x10000u;
        v151 = *(_QWORD *)(a1 + 128);
        if (!v151)
          operator new();
        v420[0] = 0;
        v152 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v152 >= *((_QWORD *)this + 2) || *v152 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v152;
          *v5 = v152 + 1;
        }
        v153 = *((_DWORD *)this + 14);
        v154 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v153 + 1;
        if (v153 >= v154)
          return 0;
        v155 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F3FD2C(v151, this, v156) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v155);
        v157 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v157, 1);
        v158 = v157 - 1;
        if (v158 < 0 == v40)
          *((_DWORD *)this + 14) = v158;
        v159 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v159 <= 1 || *v159 != 146 || v159[1] != 1)
          continue;
        *v5 = (char *)(v159 + 2);
LABEL_340:
        *(_DWORD *)(a1 + 396) |= 0x20000u;
        v160 = *(int **)(a1 + 136);
        if (!v160)
          operator new();
        v420[0] = 0;
        v161 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v161 >= *((_QWORD *)this + 2) || *v161 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v161;
          *v5 = v161 + 1;
        }
        v162 = *((_DWORD *)this + 14);
        v163 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v162 + 1;
        if (v162 >= v163)
          return 0;
        v164 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F3FF64(v160, this, v165) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v164);
        v166 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v166, 1);
        v167 = v166 - 1;
        if (v167 < 0 == v40)
          *((_DWORD *)this + 14) = v167;
        v168 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v168 <= 1 || *v168 != 154 || v168[1] != 1)
          continue;
        *v5 = (char *)(v168 + 2);
LABEL_355:
        *(_DWORD *)(a1 + 396) |= 0x40000u;
        v169 = *(_QWORD *)(a1 + 144);
        if (!v169)
          operator new();
        v420[0] = 0;
        v170 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v170 >= *((_QWORD *)this + 2) || *v170 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v170;
          *v5 = v170 + 1;
        }
        v171 = *((_DWORD *)this + 14);
        v172 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v171 + 1;
        if (v171 >= v172)
          return 0;
        v173 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F40B24(v169, this, v174) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v173);
        v175 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v175, 1);
        v176 = v175 - 1;
        if (v176 < 0 == v40)
          *((_DWORD *)this + 14) = v176;
        v177 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v177 <= 1 || *v177 != 162 || v177[1] != 1)
          continue;
        *v5 = (char *)(v177 + 2);
LABEL_370:
        *(_DWORD *)(a1 + 396) |= 0x80000u;
        v178 = *(_QWORD *)(a1 + 152);
        if (!v178)
          operator new();
        v420[0] = 0;
        v179 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v179 >= *((_QWORD *)this + 2) || *v179 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v179;
          *v5 = v179 + 1;
        }
        v180 = *((_DWORD *)this + 14);
        v181 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v180 + 1;
        if (v180 >= v181)
          return 0;
        v182 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F3F468(v178, this, v183) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v182);
        v184 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v184, 1);
        v185 = v184 - 1;
        if (v185 < 0 == v40)
          *((_DWORD *)this + 14) = v185;
        v186 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v186 <= 1 || *v186 != 170 || v186[1] != 1)
          continue;
        *v5 = (char *)(v186 + 2);
LABEL_385:
        *(_DWORD *)(a1 + 396) |= 0x100000u;
        v187 = *(_QWORD *)(a1 + 160);
        if (!v187)
          operator new();
        v420[0] = 0;
        v188 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v188 >= *((_QWORD *)this + 2) || *v188 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v188;
          *v5 = v188 + 1;
        }
        v189 = *((_DWORD *)this + 14);
        v190 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v189 + 1;
        if (v189 >= v190)
          return 0;
        v191 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F40D68(v187, this, v192) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v191);
        v193 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v193, 1);
        v194 = v193 - 1;
        if (v194 < 0 == v40)
          *((_DWORD *)this + 14) = v194;
        v195 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v195 <= 1 || *v195 != 178 || v195[1] != 1)
          continue;
        *v5 = (char *)(v195 + 2);
LABEL_400:
        *(_DWORD *)(a1 + 396) |= 0x200000u;
        v196 = *(_QWORD *)(a1 + 168);
        if (!v196)
          operator new();
        v420[0] = 0;
        v197 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v197 >= *((_QWORD *)this + 2) || *v197 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v197;
          *v5 = v197 + 1;
        }
        v198 = *((_DWORD *)this + 14);
        v199 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v198 + 1;
        if (v198 >= v199)
          return 0;
        v200 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F43CD8(v196, this, v201) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v200);
        v202 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v202, 1);
        v203 = v202 - 1;
        if (v203 < 0 == v40)
          *((_DWORD *)this + 14) = v203;
        v204 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v204 <= 1 || *v204 != 186 || v204[1] != 1)
          continue;
        *v5 = (char *)(v204 + 2);
LABEL_415:
        *(_DWORD *)(a1 + 396) |= 0x400000u;
        v205 = *(unsigned int **)(a1 + 176);
        if (!v205)
          operator new();
        v420[0] = 0;
        v206 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v206 >= *((_QWORD *)this + 2) || *v206 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v206;
          *v5 = v206 + 1;
        }
        v207 = *((_DWORD *)this + 14);
        v208 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v207 + 1;
        if (v207 >= v208)
          return 0;
        v209 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F43FF4(v205, this, v210) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v209);
        v211 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v211, 1);
        v212 = v211 - 1;
        if (v212 < 0 == v40)
          *((_DWORD *)this + 14) = v212;
        v213 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v213 <= 1 || *v213 != 194 || v213[1] != 1)
          continue;
        *v5 = (char *)(v213 + 2);
LABEL_430:
        *(_DWORD *)(a1 + 396) |= 0x800000u;
        v214 = *(_QWORD *)(a1 + 184);
        if (!v214)
          operator new();
        v420[0] = 0;
        v215 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v215 >= *((_QWORD *)this + 2) || *v215 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v215;
          *v5 = v215 + 1;
        }
        v216 = *((_DWORD *)this + 14);
        v217 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v216 + 1;
        if (v216 >= v217)
          return 0;
        v218 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F44554(v214, this, v219) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v218);
        v220 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v220, 1);
        v221 = v220 - 1;
        if (v221 < 0 == v40)
          *((_DWORD *)this + 14) = v221;
        v222 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v222 <= 1 || *v222 != 202 || v222[1] != 1)
          continue;
        *v5 = (char *)(v222 + 2);
LABEL_445:
        *(_DWORD *)(a1 + 396) |= 0x1000000u;
        v223 = *(_QWORD *)(a1 + 192);
        if (!v223)
          operator new();
        v420[0] = 0;
        v224 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v224 >= *((_QWORD *)this + 2) || *v224 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v224;
          *v5 = v224 + 1;
        }
        v225 = *((_DWORD *)this + 14);
        v226 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v225 + 1;
        if (v225 >= v226)
          return 0;
        v227 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F447A4(v223, this, v228) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v227);
        v229 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v229, 1);
        v230 = v229 - 1;
        if (v230 < 0 == v40)
          *((_DWORD *)this + 14) = v230;
        v231 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v231 <= 1 || *v231 != 210 || v231[1] != 1)
          continue;
        *v5 = (char *)(v231 + 2);
LABEL_460:
        *(_DWORD *)(a1 + 396) |= 0x2000000u;
        v232 = *(_QWORD *)(a1 + 200);
        if (!v232)
          operator new();
        v420[0] = 0;
        v233 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v233 >= *((_QWORD *)this + 2) || *v233 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v233;
          *v5 = v233 + 1;
        }
        v234 = *((_DWORD *)this + 14);
        v235 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v234 + 1;
        if (v234 >= v235)
          return 0;
        v236 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F44A70(v232, this, v237) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v236);
        v238 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v238, 1);
        v239 = v238 - 1;
        if (v239 < 0 == v40)
          *((_DWORD *)this + 14) = v239;
        v240 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v240 <= 1 || *v240 != 218 || v240[1] != 1)
          continue;
        *v5 = (char *)(v240 + 2);
LABEL_475:
        *(_DWORD *)(a1 + 396) |= 0x4000000u;
        v241 = *(_QWORD *)(a1 + 208);
        if (!v241)
          operator new();
        v420[0] = 0;
        v242 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v242 >= *((_QWORD *)this + 2) || *v242 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v242;
          *v5 = v242 + 1;
        }
        v243 = *((_DWORD *)this + 14);
        v244 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v243 + 1;
        if (v243 >= v244)
          return 0;
        v245 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F484E8(v241, this, v246) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v245);
        v247 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v247, 1);
        v248 = v247 - 1;
        if (v248 < 0 == v40)
          *((_DWORD *)this + 14) = v248;
        v249 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v249 <= 1 || *v249 != 226 || v249[1] != 1)
          continue;
        *v5 = (char *)(v249 + 2);
LABEL_490:
        *(_DWORD *)(a1 + 396) |= 0x8000000u;
        v250 = *(_QWORD *)(a1 + 216);
        if (!v250)
          operator new();
        v420[0] = 0;
        v251 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v251 >= *((_QWORD *)this + 2) || *v251 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v251;
          *v5 = v251 + 1;
        }
        v252 = *((_DWORD *)this + 14);
        v253 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v252 + 1;
        if (v252 >= v253)
          return 0;
        v254 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F4AAA8(v250, this, v255) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v254);
        v256 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v256, 1);
        v257 = v256 - 1;
        if (v257 < 0 == v40)
          *((_DWORD *)this + 14) = v257;
        v258 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v258 <= 1 || *v258 != 234 || v258[1] != 1)
          continue;
        *v5 = (char *)(v258 + 2);
LABEL_505:
        *(_DWORD *)(a1 + 396) |= 0x10000000u;
        v259 = *(_QWORD *)(a1 + 224);
        if (!v259)
          operator new();
        v420[0] = 0;
        v260 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v260 >= *((_QWORD *)this + 2) || *v260 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v260;
          *v5 = v260 + 1;
        }
        v261 = *((_DWORD *)this + 14);
        v262 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v261 + 1;
        if (v261 >= v262)
          return 0;
        v263 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F48F70(v259, this, v264) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v263);
        v265 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v265, 1);
        v266 = v265 - 1;
        if (v266 < 0 == v40)
          *((_DWORD *)this + 14) = v266;
        v267 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v267 <= 1 || *v267 != 242 || v267[1] != 1)
          continue;
        *v5 = (char *)(v267 + 2);
LABEL_520:
        *(_DWORD *)(a1 + 396) |= 0x20000000u;
        v268 = *(_QWORD *)(a1 + 232);
        if (!v268)
          operator new();
        v420[0] = 0;
        v269 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v269 >= *((_QWORD *)this + 2) || *v269 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v269;
          *v5 = v269 + 1;
        }
        v270 = *((_DWORD *)this + 14);
        v271 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v270 + 1;
        if (v270 >= v271)
          return 0;
        v272 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F43988(v268, this, v273) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v272);
        v274 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v274, 1);
        v275 = v274 - 1;
        if (v275 < 0 == v40)
          *((_DWORD *)this + 14) = v275;
        v276 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v276 <= 1 || *v276 != 250 || v276[1] != 1)
          continue;
        *v5 = (char *)(v276 + 2);
LABEL_535:
        *(_DWORD *)(a1 + 396) |= 0x40000000u;
        v277 = *(_QWORD *)(a1 + 240);
        if (!v277)
          operator new();
        v420[0] = 0;
        v278 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v278 >= *((_QWORD *)this + 2) || *v278 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v278;
          *v5 = v278 + 1;
        }
        v279 = *((_DWORD *)this + 14);
        v280 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v279 + 1;
        if (v279 >= v280)
          return 0;
        v281 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_100F44298(v277, this, v282) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v281);
        v283 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v283, 1);
        v284 = v283 - 1;
        if (v284 < 0 == v40)
          *((_DWORD *)this + 14) = v284;
        v285 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v285 <= 1 || *v285 != 146 || v285[1] != 3)
          continue;
        *v5 = (char *)(v285 + 2);
LABEL_550:
        *(_DWORD *)(a1 + 396) |= 0x80000000;
        v286 = *(_QWORD *)(a1 + 248);
        if (!v286)
          operator new();
        v420[0] = 0;
        v287 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v287 >= *((_QWORD *)this + 2) || *v287 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v287;
          *v5 = v287 + 1;
        }
        v288 = *((_DWORD *)this + 14);
        v289 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v288 + 1;
        if (v288 >= v289)
          return 0;
        v290 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_1008F9768(v286, this, v291) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v290);
        v292 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v292, 1);
        v293 = v292 - 1;
        if (v293 < 0 == v40)
          *((_DWORD *)this + 14) = v293;
        v294 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v294 <= 1 || *v294 != 154 || v294[1] != 3)
          continue;
        *v5 = (char *)(v294 + 2);
LABEL_565:
        *(_DWORD *)(a1 + 400) |= 1u;
        v295 = *(void **)(a1 + 256);
        if (v295 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v295);
        if (!(_DWORD)result)
          return result;
        v296 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v296 < 2 || *v296 != 226 || v296[1] != 3)
          continue;
        *v5 = (char *)(v296 + 2);
LABEL_572:
        *(_DWORD *)(a1 + 400) |= 2u;
        v297 = *(unsigned int **)(a1 + 264);
        if (!v297)
          operator new();
        v420[0] = 0;
        v298 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v298 >= *((_QWORD *)this + 2) || *v298 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v298;
          *v5 = v298 + 1;
        }
        v299 = *((_DWORD *)this + 14);
        v300 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v299 + 1;
        if (v299 >= v300)
          return 0;
        v301 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_1008D683C(v297, this, v302) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v301);
        v303 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v303, 1);
        v304 = v303 - 1;
        if (v304 < 0 == v40)
          *((_DWORD *)this + 14) = v304;
        v305 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        if ((int)v18 - (int)v305 <= 1 || *v305 != 232 || v305[1] != 3)
          continue;
        v19 = (char *)(v305 + 2);
        *v5 = v19;
LABEL_587:
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v417);
          if (!(_DWORD)result)
            return result;
          v306 = (char *)*((_QWORD *)this + 1);
          v18 = *((_QWORD *)this + 2);
        }
        else
        {
          *v417 = *v19;
          v306 = v19 + 1;
          *v5 = v306;
        }
        v27 = *(_DWORD *)(a1 + 400) | 4;
        *(_DWORD *)(a1 + 400) = v27;
        if ((int)v18 - (int)v306 < 2 || *v306 != 242 || v306[1] != 3)
          continue;
        *v5 = v306 + 2;
LABEL_596:
        *(_DWORD *)(a1 + 400) = v27 | 8;
        v307 = *(_DWORD **)(a1 + 272);
        if (!v307)
          operator new();
        v420[0] = 0;
        v308 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v308 >= *((_QWORD *)this + 2) || *v308 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v308;
          *v5 = v308 + 1;
        }
        v309 = *((_DWORD *)this + 14);
        v310 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v309 + 1;
        if (v309 >= v310)
          return 0;
        v311 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_1008F416C(v307, this, v312) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v311);
        v313 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v313, 1);
        v314 = v313 - 1;
        if (v314 < 0 == v40)
          *((_DWORD *)this + 14) = v314;
        v315 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v315 <= 1 || *v315 != 250 || v315[1] != 3)
          continue;
        *v5 = (char *)(v315 + 2);
LABEL_611:
        *(_DWORD *)(a1 + 400) |= 0x10u;
        v316 = *(unsigned int **)(a1 + 280);
        if (!v316)
          operator new();
        v420[0] = 0;
        v317 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v317 >= *((_QWORD *)this + 2) || *v317 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v317;
          *v5 = v317 + 1;
        }
        v318 = *((_DWORD *)this + 14);
        v319 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v318 + 1;
        if (v318 >= v319)
          return 0;
        v320 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_1008F4E78(v316, this, v321) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v320);
        v322 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v322, 1);
        v323 = v322 - 1;
        if (v323 < 0 == v40)
          *((_DWORD *)this + 14) = v323;
        v324 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v324 <= 1 || *v324 != 130 || v324[1] != 4)
          continue;
        *v5 = (char *)(v324 + 2);
LABEL_626:
        *(_DWORD *)(a1 + 400) |= 0x20u;
        v325 = *(_DWORD **)(a1 + 288);
        if (!v325)
          operator new();
        v420[0] = 0;
        v326 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v326 >= *((_QWORD *)this + 2) || *v326 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v326;
          *v5 = v326 + 1;
        }
        v327 = *((_DWORD *)this + 14);
        v328 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v327 + 1;
        if (v327 >= v328)
          return 0;
        v329 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_1008F8124(v325, this, v330) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v329);
        v331 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v331, 1);
        v332 = v331 - 1;
        if (v332 < 0 == v40)
          *((_DWORD *)this + 14) = v332;
        v333 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v333 <= 1 || *v333 != 138 || v333[1] != 4)
          continue;
        *v5 = (char *)(v333 + 2);
LABEL_641:
        *(_DWORD *)(a1 + 400) |= 0x40u;
        v334 = *(_QWORD *)(a1 + 296);
        if (!v334)
          operator new();
        v420[0] = 0;
        v335 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v335 >= *((_QWORD *)this + 2) || *v335 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v335;
          *v5 = v335 + 1;
        }
        v336 = *((_DWORD *)this + 14);
        v337 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v336 + 1;
        if (v336 >= v337)
          return 0;
        v338 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_1008FB030(v334, this, v339) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v338);
        v340 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v340, 1);
        v341 = v340 - 1;
        if (v341 < 0 == v40)
          *((_DWORD *)this + 14) = v341;
        v342 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v342 <= 1 || *v342 != 146 || v342[1] != 4)
          continue;
        *v5 = (char *)(v342 + 2);
LABEL_656:
        *(_DWORD *)(a1 + 400) |= 0x80u;
        v343 = *(_QWORD *)(a1 + 312);
        if (!v343)
          operator new();
        v420[0] = 0;
        v344 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v344 >= *((_QWORD *)this + 2) || *v344 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v344;
          *v5 = v344 + 1;
        }
        v345 = *((_DWORD *)this + 14);
        v346 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v345 + 1;
        if (v345 >= v346)
          return 0;
        v347 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_1008FBFA8(v343, this, v348) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v347);
        v349 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v349, 1);
        v350 = v349 - 1;
        if (v350 < 0 == v40)
          *((_DWORD *)this + 14) = v350;
        v351 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v351 <= 1 || *v351 != 154 || v351[1] != 4)
          continue;
        *v5 = (char *)(v351 + 2);
LABEL_671:
        *(_DWORD *)(a1 + 400) |= 0x100u;
        v352 = *(_QWORD *)(a1 + 320);
        if (!v352)
          operator new();
        v420[0] = 0;
        v353 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v353 >= *((_QWORD *)this + 2) || *v353 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
        }
        else
        {
          v420[0] = *v353;
          *v5 = v353 + 1;
        }
        v354 = *((_DWORD *)this + 14);
        v355 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v354 + 1;
        if (v354 >= v355)
          return 0;
        v356 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
        if (!sub_1008F8DD0(v352, this, v357) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v356);
        v358 = *((_DWORD *)this + 14);
        v40 = __OFSUB__(v358, 1);
        v359 = v358 - 1;
        if (v359 < 0 == v40)
          *((_DWORD *)this + 14) = v359;
        v360 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        if ((int)v20 - (int)v360 > 1 && *v360 == 176 && v360[1] == 4)
          goto LABEL_685;
        continue;
      case 3u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_111;
        v17 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_131;
      case 4u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_111;
        goto LABEL_141;
      case 5u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_155;
        goto LABEL_111;
      case 6u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_169;
        goto LABEL_111;
      case 7u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_183;
        goto LABEL_111;
      case 8u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_197;
        goto LABEL_111;
      case 9u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_211;
        goto LABEL_111;
      case 0xAu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_225;
        goto LABEL_111;
      case 0xBu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_239;
        goto LABEL_111;
      case 0xCu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_253;
        goto LABEL_111;
      case 0xDu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_267;
        goto LABEL_111;
      case 0xEu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_281;
        goto LABEL_111;
      case 0xFu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_295;
        goto LABEL_111;
      case 0x10u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_310;
        goto LABEL_111;
      case 0x11u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_325;
        goto LABEL_111;
      case 0x12u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_340;
        goto LABEL_111;
      case 0x13u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_355;
        goto LABEL_111;
      case 0x14u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_370;
        goto LABEL_111;
      case 0x15u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_385;
        goto LABEL_111;
      case 0x16u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_400;
        goto LABEL_111;
      case 0x17u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_415;
        goto LABEL_111;
      case 0x18u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_430;
        goto LABEL_111;
      case 0x19u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_445;
        goto LABEL_111;
      case 0x1Au:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_460;
        goto LABEL_111;
      case 0x1Bu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_475;
        goto LABEL_111;
      case 0x1Cu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_490;
        goto LABEL_111;
      case 0x1Du:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_505;
        goto LABEL_111;
      case 0x1Eu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_520;
        goto LABEL_111;
      case 0x1Fu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_535;
        goto LABEL_111;
      case 0x32u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_550;
        goto LABEL_111;
      case 0x33u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_565;
        goto LABEL_111;
      case 0x3Cu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_572;
        goto LABEL_111;
      case 0x3Du:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_111;
        v19 = (char *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        goto LABEL_587;
      case 0x3Eu:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_111;
        v27 = *(_DWORD *)(a1 + 400);
        goto LABEL_596;
      case 0x3Fu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_611;
        goto LABEL_111;
      case 0x40u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_626;
        goto LABEL_111;
      case 0x41u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_641;
        goto LABEL_111;
      case 0x42u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_656;
        goto LABEL_111;
      case 0x43u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_671;
        goto LABEL_111;
      case 0x46u:
        v12 = TagFallback & 7;
        if (v12 != 2)
        {
          if ((TagFallback & 7) == 0)
          {
            v21 = (char *)*((_QWORD *)this + 1);
            v20 = *((_QWORD *)this + 2);
            goto LABEL_686;
          }
          goto LABEL_111;
        }
        result = sub_1008D0E98(this, v7);
        if (!(_DWORD)result)
          return result;
        while (1)
        {
          v360 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v20 = *((_QWORD *)this + 2);
          if ((int)v20 - (int)v360 < 2)
            goto LABEL_2;
          v372 = *v360;
          if (v372 == 186)
          {
            if (v360[1] != 4)
              goto LABEL_2;
            *v5 = (char *)(v360 + 2);
LABEL_711:
            *(_DWORD *)(a1 + 400) |= 0x400u;
            v373 = *(int **)(a1 + 344);
            if (!v373)
              operator new();
            v420[0] = 0;
            v374 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v374 >= *((_QWORD *)this + 2) || *v374 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
            }
            else
            {
              v420[0] = *v374;
              *v5 = v374 + 1;
            }
            v375 = *((_DWORD *)this + 14);
            v376 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v375 + 1;
            if (v375 >= v376)
              return 0;
            v377 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
            if (!sub_1008CE558(v373, this, v378) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v377);
            v379 = *((_DWORD *)this + 14);
            v40 = __OFSUB__(v379, 1);
            v380 = v379 - 1;
            if (v380 < 0 == v40)
              *((_DWORD *)this + 14) = v380;
            v381 = (unsigned __int8 *)*((_QWORD *)this + 1);
            v22 = *((_QWORD *)this + 2);
            if ((int)v22 - (int)v381 <= 1 || *v381 != 192 || v381[1] != 4)
              goto LABEL_2;
            v23 = (char *)(v381 + 2);
            *v5 = v23;
LABEL_726:
            if ((unint64_t)v23 >= v22 || *v23 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
              if (!(_DWORD)result)
                return result;
              v382 = (char *)*((_QWORD *)this + 1);
              v22 = *((_QWORD *)this + 2);
            }
            else
            {
              *v9 = *v23;
              v382 = v23 + 1;
              *v5 = v382;
            }
            *(_DWORD *)(a1 + 400) |= 0x800u;
            if ((int)v22 - (int)v382 < 2 || *v382 != 200 || v382[1] != 4)
              goto LABEL_2;
            goto LABEL_734;
          }
          if (v372 != 176 || v360[1] != 4)
            goto LABEL_2;
LABEL_685:
          v21 = (char *)(v360 + 2);
          *v5 = v21;
LABEL_686:
          v418 = 0;
          if ((unint64_t)v21 >= v20 || *v21 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v418))return 0;
          }
          else
          {
            v418 = *v21;
            *v5 = v21 + 1;
          }
          v361 = *(_DWORD *)(a1 + 336);
          if (v361 == *(_DWORD *)(a1 + 340))
          {
            sub_1002A19E0(v7, v361 + 1);
            v361 = *(_DWORD *)(a1 + 336);
          }
          v362 = v418;
          v363 = *(_QWORD *)(a1 + 328);
          *(_DWORD *)(a1 + 336) = v361 + 1;
          *(_DWORD *)(v363 + 4 * v361) = v362;
          v364 = *(_DWORD *)(a1 + 340) - *(_DWORD *)(a1 + 336);
          if (v364 >= 1)
          {
            v365 = v364 + 1;
            do
            {
              v366 = (unsigned __int8 *)*((_QWORD *)this + 1);
              v367 = *((_QWORD *)this + 2);
              if ((int)v367 - (int)v366 < 2 || *v366 != 176 || v366[1] != 4)
                break;
              *v5 = (char *)(v366 + 2);
              if ((unint64_t)(v366 + 2) >= v367 || (char)v366[2] < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v418))return 0;
              }
              else
              {
                v418 = v366[2];
                *v5 = (char *)(v366 + 3);
              }
              v368 = *(_DWORD *)(a1 + 336);
              if (v368 >= *(_DWORD *)(a1 + 340))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v420, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                v369 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v420, "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v419, v369);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v420);
                v368 = *(_DWORD *)(a1 + 336);
              }
              v370 = v418;
              v371 = *(_QWORD *)(a1 + 328);
              *(_DWORD *)(a1 + 336) = v368 + 1;
              *(_DWORD *)(v371 + 4 * v368) = v370;
              --v365;
            }
            while (v365 > 1);
          }
        }
      case 0x47u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_711;
        goto LABEL_111;
      case 0x48u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_111;
        v23 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_726;
      case 0x49u:
        v12 = TagFallback & 7;
        if (v12 == 2)
        {
          result = sub_1008D0E98(this, v6);
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v382 = (char *)*((_QWORD *)this + 1);
            v22 = *((_QWORD *)this + 2);
            if ((int)v22 - (int)v382 < 2)
              goto LABEL_2;
            v394 = *v382;
            if (v394 == 208)
            {
              if (v382[1] == 4)
              {
                v25 = v382 + 2;
                *v5 = v25;
LABEL_760:
                v420[0] = 0;
                if ((unint64_t)v25 >= v22 || *v25 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420);
                  if (!(_DWORD)result)
                    return result;
                  v395 = v420[0];
                  v396 = (char *)*((_QWORD *)this + 1);
                  v22 = *((_QWORD *)this + 2);
                }
                else
                {
                  v395 = *v25;
                  v396 = v25 + 1;
                  *v5 = v396;
                }
                *(_BYTE *)(a1 + 368) = v395 != 0;
                *(_DWORD *)(a1 + 400) |= 0x2000u;
                if ((int)v22 - (int)v396 >= 2 && *v396 == 216 && v396[1] == 4)
                {
                  v26 = v396 + 2;
                  *v5 = v26;
LABEL_769:
                  if ((unint64_t)v26 >= v22 || *v26 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v416);
                    if (!(_DWORD)result)
                      return result;
                    v397 = (char *)*((_QWORD *)this + 1);
                    v22 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    *v416 = *v26;
                    v397 = v26 + 1;
                    *v5 = v397;
                  }
                  v28 = *(_DWORD *)(a1 + 400) | 0x4000;
                  *(_DWORD *)(a1 + 400) = v28;
                  if ((int)v22 - (int)v397 >= 2 && *v397 == 226 && v397[1] == 4)
                  {
                    *v5 = v397 + 2;
LABEL_778:
                    *(_DWORD *)(a1 + 400) = v28 | 0x8000;
                    v398 = *(_QWORD *)(a1 + 376);
                    if (!v398)
                      operator new();
                    v420[0] = 0;
                    v399 = (char *)*((_QWORD *)this + 1);
                    if ((unint64_t)v399 >= *((_QWORD *)this + 2) || *v399 < 0)
                    {
                      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
                    }
                    else
                    {
                      v420[0] = *v399;
                      *v5 = v399 + 1;
                    }
                    v400 = *((_DWORD *)this + 14);
                    v401 = *((_DWORD *)this + 15);
                    *((_DWORD *)this + 14) = v400 + 1;
                    if (v400 >= v401)
                      return 0;
                    v402 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
                    if (!sub_1008D2EA0(v398, this, v403) || !*((_BYTE *)this + 36))
                      return 0;
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v402);
                    v404 = *((_DWORD *)this + 14);
                    v40 = __OFSUB__(v404, 1);
                    v405 = v404 - 1;
                    if (v405 < 0 == v40)
                      *((_DWORD *)this + 14) = v405;
                    v406 = (unsigned __int8 *)*((_QWORD *)this + 1);
                    if (*((_DWORD *)this + 4) - (int)v406 > 1 && *v406 == 234 && v406[1] == 4)
                    {
                      *v5 = (char *)(v406 + 2);
LABEL_793:
                      *(_DWORD *)(a1 + 400) |= 0x10000u;
                      v407 = *(int **)(a1 + 384);
                      if (!v407)
                        operator new();
                      v420[0] = 0;
                      v408 = (char *)*((_QWORD *)this + 1);
                      if ((unint64_t)v408 >= *((_QWORD *)this + 2) || *v408 < 0)
                      {
                        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v420))return 0;
                      }
                      else
                      {
                        v420[0] = *v408;
                        *v5 = v408 + 1;
                      }
                      v409 = *((_DWORD *)this + 14);
                      v410 = *((_DWORD *)this + 15);
                      *((_DWORD *)this + 14) = v409 + 1;
                      if (v409 >= v410)
                        return 0;
                      v411 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v420[0]);
                      if (!sub_1008CFCA8(v407, this, v412) || !*((_BYTE *)this + 36))
                        return 0;
                      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v411);
                      v413 = *((_DWORD *)this + 14);
                      v40 = __OFSUB__(v413, 1);
                      v414 = v413 - 1;
                      if (v414 < 0 == v40)
                        *((_DWORD *)this + 14) = v414;
                      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                      {
                        *((_DWORD *)this + 8) = 0;
                        result = 1;
                        *((_BYTE *)this + 36) = 1;
                        return result;
                      }
                    }
                  }
                }
              }
              goto LABEL_2;
            }
            if (v394 != 200 || v382[1] != 4)
              goto LABEL_2;
LABEL_734:
            v24 = v382 + 2;
            *v5 = v24;
LABEL_735:
            v418 = 0;
            if ((unint64_t)v24 >= v22 || *v24 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v418))return 0;
            }
            else
            {
              v418 = *v24;
              *v5 = v24 + 1;
            }
            v383 = *(_DWORD *)(a1 + 360);
            if (v383 == *(_DWORD *)(a1 + 364))
            {
              sub_1002A19E0(v6, v383 + 1);
              v383 = *(_DWORD *)(a1 + 360);
            }
            v384 = v418;
            v385 = *(_QWORD *)(a1 + 352);
            *(_DWORD *)(a1 + 360) = v383 + 1;
            *(_DWORD *)(v385 + 4 * v383) = v384;
            v386 = *(_DWORD *)(a1 + 364) - *(_DWORD *)(a1 + 360);
            if (v386 >= 1)
            {
              v387 = v386 + 1;
              do
              {
                v388 = (unsigned __int8 *)*((_QWORD *)this + 1);
                v389 = *((_QWORD *)this + 2);
                if ((int)v389 - (int)v388 < 2 || *v388 != 200 || v388[1] != 4)
                  break;
                *v5 = (char *)(v388 + 2);
                if ((unint64_t)(v388 + 2) >= v389 || (char)v388[2] < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v418))return 0;
                }
                else
                {
                  v418 = v388[2];
                  *v5 = (char *)(v388 + 3);
                }
                v390 = *(_DWORD *)(a1 + 360);
                if (v390 >= *(_DWORD *)(a1 + 364))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v420, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v391 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v420, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v419, v391);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v420);
                  v390 = *(_DWORD *)(a1 + 360);
                }
                v392 = v418;
                v393 = *(_QWORD *)(a1 + 352);
                *(_DWORD *)(a1 + 360) = v390 + 1;
                *(_DWORD *)(v393 + 4 * v390) = v392;
                --v387;
              }
              while (v387 > 1);
            }
          }
        }
        if ((TagFallback & 7) == 0)
        {
          v24 = (char *)*((_QWORD *)this + 1);
          v22 = *((_QWORD *)this + 2);
          goto LABEL_735;
        }
LABEL_111:
        if (v12 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      case 0x4Au:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_111;
        v25 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_760;
      case 0x4Bu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_111;
        v26 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_769;
      case 0x4Cu:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_111;
        v28 = *(_DWORD *)(a1 + 400);
        goto LABEL_778;
      case 0x4Du:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_793;
        goto LABEL_111;
      default:
        v12 = TagFallback & 7;
        goto LABEL_111;
    }
  }
}

void sub_100F3AE00()
{
  operator delete();
}

uint64_t sub_100F3AF10(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v5 = result;
  v6 = *(_DWORD *)(result + 396);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), (unint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 396);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_37:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023118F8 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_40:
  v8 = *(_QWORD *)(v5 + 32);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023118F8 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_43:
  v9 = *(_QWORD *)(v5 + 40);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023118F8 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_49;
  }
LABEL_46:
  v10 = *(_QWORD *)(v5 + 48);
  if (!v10)
    v10 = *(_QWORD *)(qword_1023118F8 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_52;
  }
LABEL_49:
  v11 = *(_QWORD *)(v5 + 56);
  if (!v11)
    v11 = *(_QWORD *)(qword_1023118F8 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_55;
  }
LABEL_52:
  v12 = *(_QWORD *)(v5 + 64);
  if (!v12)
    v12 = *(_QWORD *)(qword_1023118F8 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_55:
  v13 = *(_QWORD *)(v5 + 72);
  if (!v13)
    v13 = *(_QWORD *)(qword_1023118F8 + 72);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_61;
  }
LABEL_58:
  v14 = *(_QWORD *)(v5 + 80);
  if (!v14)
    v14 = *(_QWORD *)(qword_1023118F8 + 80);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v14, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_61:
  v15 = *(_QWORD *)(v5 + 88);
  if (!v15)
    v15 = *(_QWORD *)(qword_1023118F8 + 88);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v15, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_67;
  }
LABEL_64:
  v16 = *(_QWORD *)(v5 + 96);
  if (!v16)
    v16 = *(_QWORD *)(qword_1023118F8 + 96);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v16, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_70;
  }
LABEL_67:
  v17 = *(_QWORD *)(v5 + 104);
  if (!v17)
    v17 = *(_QWORD *)(qword_1023118F8 + 104);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v17, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_73;
  }
LABEL_70:
  v18 = *(_QWORD *)(v5 + 112);
  if (!v18)
    v18 = *(_QWORD *)(qword_1023118F8 + 112);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v18, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_76;
  }
LABEL_73:
  v19 = *(_QWORD *)(v5 + 120);
  if (!v19)
    v19 = *(_QWORD *)(qword_1023118F8 + 120);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v19, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_79;
  }
LABEL_76:
  v20 = *(_QWORD *)(v5 + 128);
  if (!v20)
    v20 = *(_QWORD *)(qword_1023118F8 + 128);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v20, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_82;
  }
LABEL_79:
  v21 = *(_QWORD *)(v5 + 136);
  if (!v21)
    v21 = *(_QWORD *)(qword_1023118F8 + 136);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v21, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_85;
  }
LABEL_82:
  v22 = *(_QWORD *)(v5 + 144);
  if (!v22)
    v22 = *(_QWORD *)(qword_1023118F8 + 144);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v22, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_88;
  }
LABEL_85:
  v23 = *(_QWORD *)(v5 + 152);
  if (!v23)
    v23 = *(_QWORD *)(qword_1023118F8 + 152);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v23, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_91;
  }
LABEL_88:
  v24 = *(_QWORD *)(v5 + 160);
  if (!v24)
    v24 = *(_QWORD *)(qword_1023118F8 + 160);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v24, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_91:
  v25 = *(_QWORD *)(v5 + 168);
  if (!v25)
    v25 = *(_QWORD *)(qword_1023118F8 + 168);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v25, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_97;
  }
LABEL_94:
  v26 = *(_QWORD *)(v5 + 176);
  if (!v26)
    v26 = *(_QWORD *)(qword_1023118F8 + 176);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v26, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_100;
  }
LABEL_97:
  v27 = *(_QWORD *)(v5 + 184);
  if (!v27)
    v27 = *(_QWORD *)(qword_1023118F8 + 184);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v27, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_103;
  }
LABEL_100:
  v28 = *(_QWORD *)(v5 + 192);
  if (!v28)
    v28 = *(_QWORD *)(qword_1023118F8 + 192);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, v28, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_106;
  }
LABEL_103:
  v29 = *(_QWORD *)(v5 + 200);
  if (!v29)
    v29 = *(_QWORD *)(qword_1023118F8 + 200);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, v29, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_109;
  }
LABEL_106:
  v30 = *(_QWORD *)(v5 + 208);
  if (!v30)
    v30 = *(_QWORD *)(qword_1023118F8 + 208);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, v30, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_112;
  }
LABEL_109:
  v31 = *(_QWORD *)(v5 + 216);
  if (!v31)
    v31 = *(_QWORD *)(qword_1023118F8 + 216);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, v31, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_115;
  }
LABEL_112:
  v32 = *(_QWORD *)(v5 + 224);
  if (!v32)
    v32 = *(_QWORD *)(qword_1023118F8 + 224);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, v32, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_118;
  }
LABEL_115:
  v33 = *(_QWORD *)(v5 + 232);
  if (!v33)
    v33 = *(_QWORD *)(qword_1023118F8 + 232);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, v33, a2, a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_124;
    goto LABEL_121;
  }
LABEL_118:
  v34 = *(_QWORD *)(v5 + 240);
  if (!v34)
    v34 = *(_QWORD *)(qword_1023118F8 + 240);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, v34, a2, a4);
  if ((*(_DWORD *)(v5 + 396) & 0x80000000) != 0)
  {
LABEL_121:
    v35 = *(_QWORD *)(v5 + 248);
    if (!v35)
      v35 = *(_QWORD *)(qword_1023118F8 + 248);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x32, v35, a2, a4);
  }
LABEL_124:
  v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(51, *(_QWORD *)(v5 + 256), a2);
    v36 = *(_DWORD *)(v5 + 400);
    if ((v36 & 2) == 0)
    {
LABEL_126:
      if ((v36 & 4) == 0)
        goto LABEL_127;
      goto LABEL_138;
    }
  }
  else if ((v36 & 2) == 0)
  {
    goto LABEL_126;
  }
  v37 = *(_QWORD *)(v5 + 264);
  if (!v37)
    v37 = *(_QWORD *)(qword_1023118F8 + 264);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3C, v37, a2, a4);
  v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 4) == 0)
  {
LABEL_127:
    if ((v36 & 8) == 0)
      goto LABEL_128;
    goto LABEL_139;
  }
LABEL_138:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3D, *(_DWORD *)(v5 + 304), a2, a4);
  v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 8) == 0)
  {
LABEL_128:
    if ((v36 & 0x10) == 0)
      goto LABEL_129;
    goto LABEL_142;
  }
LABEL_139:
  v38 = *(_QWORD *)(v5 + 272);
  if (!v38)
    v38 = *(_QWORD *)(qword_1023118F8 + 272);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3E, v38, a2, a4);
  v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 0x10) == 0)
  {
LABEL_129:
    if ((v36 & 0x20) == 0)
      goto LABEL_130;
    goto LABEL_145;
  }
LABEL_142:
  v39 = *(_QWORD *)(v5 + 280);
  if (!v39)
    v39 = *(_QWORD *)(qword_1023118F8 + 280);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F, v39, a2, a4);
  v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 0x20) == 0)
  {
LABEL_130:
    if ((v36 & 0x40) == 0)
      goto LABEL_131;
    goto LABEL_148;
  }
LABEL_145:
  v40 = *(_QWORD *)(v5 + 288);
  if (!v40)
    v40 = *(_QWORD *)(qword_1023118F8 + 288);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x40, v40, a2, a4);
  v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 0x40) == 0)
  {
LABEL_131:
    if ((v36 & 0x80) == 0)
      goto LABEL_132;
    goto LABEL_151;
  }
LABEL_148:
  v41 = *(_QWORD *)(v5 + 296);
  if (!v41)
    v41 = *(_QWORD *)(qword_1023118F8 + 296);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x41, v41, a2, a4);
  v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 0x80) == 0)
  {
LABEL_132:
    if ((v36 & 0x100) == 0)
      goto LABEL_157;
    goto LABEL_154;
  }
LABEL_151:
  v42 = *(_QWORD *)(v5 + 312);
  if (!v42)
    v42 = *(_QWORD *)(qword_1023118F8 + 312);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x42, v42, a2, a4);
  if ((*(_DWORD *)(v5 + 400) & 0x100) != 0)
  {
LABEL_154:
    v43 = *(_QWORD *)(v5 + 320);
    if (!v43)
      v43 = *(_QWORD *)(qword_1023118F8 + 320);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x43, v43, a2, a4);
  }
LABEL_157:
  if (*(int *)(v5 + 336) >= 1)
  {
    v44 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x46, *(_DWORD *)(*(_QWORD *)(v5 + 328) + 4 * v44++), a2, a4);
    while (v44 < *(int *)(v5 + 336));
  }
  v45 = *(_DWORD *)(v5 + 400);
  if ((v45 & 0x400) != 0)
  {
    v46 = *(_QWORD *)(v5 + 344);
    if (!v46)
      v46 = *(_QWORD *)(qword_1023118F8 + 344);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x47, v46, a2, a4);
    v45 = *(_DWORD *)(v5 + 400);
  }
  if ((v45 & 0x800) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x48, *(_DWORD *)(v5 + 308), a2, a4);
  if (*(int *)(v5 + 360) >= 1)
  {
    v47 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x49, *(_DWORD *)(*(_QWORD *)(v5 + 352) + 4 * v47++), a2, a4);
    while (v47 < *(int *)(v5 + 360));
  }
  v48 = *(_DWORD *)(v5 + 400);
  if ((v48 & 0x2000) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4A, *(unsigned __int8 *)(v5 + 368), (BOOL)a2, a4);
    v48 = *(_DWORD *)(v5 + 400);
    if ((v48 & 0x4000) == 0)
    {
LABEL_171:
      if ((v48 & 0x8000) == 0)
        goto LABEL_172;
      goto LABEL_176;
    }
  }
  else if ((v48 & 0x4000) == 0)
  {
    goto LABEL_171;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4B, *(_DWORD *)(v5 + 372), a2, a4);
  v48 = *(_DWORD *)(v5 + 400);
  if ((v48 & 0x8000) == 0)
  {
LABEL_172:
    if ((v48 & 0x10000) == 0)
      return result;
    goto LABEL_179;
  }
LABEL_176:
  v49 = *(_QWORD *)(v5 + 376);
  if (!v49)
    v49 = *(_QWORD *)(qword_1023118F8 + 376);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4C, v49, a2, a4);
  if ((*(_DWORD *)(v5 + 400) & 0x10000) != 0)
  {
LABEL_179:
    v50 = *(_QWORD *)(v5 + 384);
    if (!v50)
      v50 = *(_QWORD *)(qword_1023118F8 + 384);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4D, v50, a2, a4);
  }
  return result;
}

void sub_100F3B734(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100102868(a1, (uint64_t)lpsrc);
}

void sub_100F3B780(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 6445);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        sub_100F4AED8();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_100768F0C(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_100F3B8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3B8BC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 6605);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        sub_100F4AF38();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_1007692FC(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_100F3B9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3B9F8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 6765);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        sub_100F4AF38();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_1007692FC(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_100F3BB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_100F3BB34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 6986);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100F3BC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3BC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  _BYTE v20[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v20, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 7513);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v19, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  v5 = *(_DWORD *)(a2 + 76);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 76) |= 1u;
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 76) |= 2u;
  *(_QWORD *)(a1 + 16) = v9;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(_QWORD *)(a1 + 24) = v10;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 76) |= 8u;
  *(_BYTE *)(a1 + 64) = v11;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_26:
    v13 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 76) |= 0x20u;
    *(_QWORD *)(a1 + 40) = v13;
    v5 = *(_DWORD *)(a2 + 76);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_25:
  v12 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 76) |= 0x10u;
  *(_QWORD *)(a1 + 32) = v12;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x20) != 0)
    goto LABEL_26;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_27:
  v14 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) |= 0x40u;
  *(_QWORD *)(a1 + 48) = v14;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 76) |= 0x80u;
    *(_QWORD *)(a1 + 56) = v6;
    v5 = *(_DWORD *)(a2 + 76);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    v15 = *(_BYTE *)(a2 + 65);
    *(_DWORD *)(a1 + 76) |= 0x100u;
    *(_BYTE *)(a1 + 65) = v15;
    v5 = *(_DWORD *)(a2 + 76);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  v16 = *(_BYTE *)(a2 + 66);
  *(_DWORD *)(a1 + 76) |= 0x200u;
  *(_BYTE *)(a1 + 66) = v16;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  v17 = *(_BYTE *)(a2 + 67);
  *(_DWORD *)(a1 + 76) |= 0x400u;
  *(_BYTE *)(a1 + 67) = v17;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0)
      return;
    goto LABEL_19;
  }
LABEL_32:
  v18 = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 76) |= 0x800u;
  *(_BYTE *)(a1 + 68) = v18;
  if ((*(_DWORD *)(a2 + 76) & 0x1000) == 0)
    return;
LABEL_19:
  v7 = *(_BYTE *)(a2 + 69);
  *(_DWORD *)(a1 + 76) |= 0x1000u;
  *(_BYTE *)(a1 + 69) = v7;
}

void sub_100F3BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_100F3BE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 8473);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 44);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 44);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_8;
    }
LABEL_12:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0)
      return result;
LABEL_8:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }
  return result;
}

void sub_100F3BF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_100F3BF58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 8710);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100F3C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C040(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 5433);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        sub_100F4AE78();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_10076984C(*(_DWORD **)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_100F3C164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C17C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 6114);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(_QWORD *)(a1 + 8) = v5;
  }
}

void sub_100F3C204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C21C(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  _BYTE v13[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 4865);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = a2[20];
  if ((_BYTE)v5)
  {
    if ((a2[20] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 5);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_14;
      }
    }
    else if ((a2[20] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 20) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
LABEL_14:
    v9 = a2[10];
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_15:
    v10 = a2[11];
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 11) = v10;
    v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        return;
      goto LABEL_10;
    }
LABEL_16:
    v11 = a2[12];
    *(_DWORD *)(a1 + 20) |= 0x10u;
    *(_BYTE *)(a1 + 12) = v11;
    if ((*((_DWORD *)a2 + 5) & 0x20) == 0)
      return;
LABEL_10:
    v6 = a2[13];
    *(_DWORD *)(a1 + 20) |= 0x20u;
    *(_BYTE *)(a1 + 13) = v6;
  }
}

void sub_100F3C34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 6281);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(_QWORD *)(a1 + 8) = v5;
  }
}

void sub_100F3C3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C404(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 9116);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_BYTE *)(a2 + 8);
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_BYTE *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
    }
  }
}

void sub_100F3C4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const std::string *v5;
  std::string *v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 9858);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v5 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    v6 = *(std::string **)(a1 + 8);
    if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v6, v5);
  }
}

void sub_100F3C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const std::string *v5;
  std::string *v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 10031);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v5 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    v6 = *(std::string **)(a1 + 8);
    if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v6, v5);
  }
}

void sub_100F3C664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  char v17;
  _BYTE v18[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v18, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 12565);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 56);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    v6 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 56) |= 1u;
    *(_BYTE *)(a1 + 8) = v6;
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) == 0)
  {
    goto LABEL_6;
  }
  v7 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 56) |= 2u;
  *(_DWORD *)(a1 + 12) = v7;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 48);
  if (v8 >= 5)
    sub_101935CCC();
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_DWORD *)(a1 + 48) = v8;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_21:
    *(_DWORD *)(a1 + 56) |= 0x10u;
    v11 = *(_QWORD *)(a1 + 24);
    if (!v11)
      operator new();
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12)
      v12 = *(_QWORD *)(qword_102311A00 + 24);
    sub_100F46184(v11, v12);
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0)
        return;
      goto LABEL_31;
    }
    goto LABEL_26;
  }
LABEL_16:
  *(_DWORD *)(a1 + 56) |= 8u;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    operator new();
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311A00 + 16);
  sub_100F476EC(v9, v10);
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_21;
LABEL_9:
  if ((v5 & 0x20) == 0)
    goto LABEL_10;
LABEL_26:
  *(_DWORD *)(a1 + 56) |= 0x20u;
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    operator new();
  v14 = *(_QWORD *)(a2 + 32);
  if (!v14)
    v14 = *(_QWORD *)(qword_102311A00 + 32);
  sub_100F46B58(v13, v14);
  if ((*(_DWORD *)(a2 + 56) & 0x40) != 0)
  {
LABEL_31:
    *(_DWORD *)(a1 + 56) |= 0x40u;
    v15 = *(_DWORD **)(a1 + 40);
    if (!v15)
      operator new();
    v16 = *(_QWORD *)(a2 + 40);
    if (!v16)
      v16 = *(_QWORD *)(qword_102311A00 + 40);
    sub_100F472A0(v15, v16);
  }
}

void sub_100F3C90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 12759);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 >= 7)
      sub_101935CF4();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_100F3C9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3C9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 8916);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
}

void sub_100F3CA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F3CA90()
{
  return 1;
}

_QWORD *sub_100F3CA98@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.Request");
}

void sub_100F3CAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 2794);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if ((sub_100103BB0(v6) & 1) == 0)
        sub_101935D44();
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if (!sub_10010285C(v8))
        sub_101935D1C();
      *(_DWORD *)(a1 + 28) |= 4u;
      *(_DWORD *)(a1 + 20) = v8;
    }
  }
}

void sub_100F3CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3CBAC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193420;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F3CBBC()
{
  operator new();
}

uint64_t sub_100F3CBF4(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 8), a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), a2, a4);
  return result;
}

uint64_t sub_100F3CC6C(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v5 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
    {
LABEL_13:
      v4 = v4
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 28);
    }
  }
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      v7 = 2;
    }
    v4 = (v7 + v4);
  }
LABEL_21:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F3CD2C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3CAA8(a1, (uint64_t)lpsrc);
}

_QWORD *sub_100F3CD78@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.Response");
}

void sub_100F3CD88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const std::string *v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE v60[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v60, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 4132);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v60, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v59, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v60);
  }
  v5 = *(_DWORD *)(a2 + 224);
  if ((_BYTE)v5)
  {
    if ((v5 & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 9 >= 0x13 && v6 >= 6)
        sub_101935E0C();
      *(_DWORD *)(a1 + 224) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 12);
      if ((sub_100103BB0(v8) & 1) == 0)
        sub_101935DE4();
      *(_DWORD *)(a1 + 224) |= 2u;
      *(_DWORD *)(a1 + 12) = v8;
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 224) |= 4u;
      *(_QWORD *)(a1 + 16) = v9;
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 8u;
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        operator new();
      v11 = *(_QWORD *)(a2 + 24);
      if (!v11)
        v11 = *(_QWORD *)(qword_102311908 + 24);
      sub_10076768C(v10, v11);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x10u;
      v12 = *(_QWORD *)(a1 + 32);
      if (!v12)
        operator new();
      v13 = *(_QWORD *)(a2 + 32);
      if (!v13)
        v13 = *(_QWORD *)(qword_102311908 + 32);
      sub_100DB9B00(v12, v13);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x20u;
      v14 = *(_QWORD *)(a1 + 40);
      if (!v14)
        operator new();
      v15 = *(_QWORD *)(a2 + 40);
      if (!v15)
        v15 = *(_QWORD *)(qword_102311908 + 40);
      sub_100769F74(v14, v15);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x40u;
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        operator new();
      v17 = *(_QWORD *)(a2 + 48);
      if (!v17)
        v17 = *(_QWORD *)(qword_102311908 + 48);
      sub_100F3E810(v16, v17);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x80) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x80u;
      v18 = *(_QWORD *)(a1 + 56);
      if (!v18)
        operator new();
      v19 = *(_QWORD *)(a2 + 56);
      if (!v19)
        v19 = *(_QWORD *)(qword_102311908 + 56);
      sub_10076868C(v18, v19);
      v5 = *(_DWORD *)(a2 + 224);
    }
  }
  if ((v5 & 0xFF00) == 0)
    goto LABEL_89;
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 224) |= 0x100u;
    v20 = *(_QWORD *)(a1 + 64);
    if (!v20)
      operator new();
    v21 = *(_QWORD *)(a2 + 64);
    if (!v21)
      v21 = *(_QWORD *)(qword_102311908 + 64);
    sub_100F3E938(v20, v21);
    v5 = *(_DWORD *)(a2 + 224);
    if ((v5 & 0x200) == 0)
    {
LABEL_48:
      if ((v5 & 0x400) == 0)
        goto LABEL_49;
      goto LABEL_65;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_48;
  }
  *(_DWORD *)(a1 + 224) |= 0x200u;
  v22 = *(_QWORD *)(a1 + 72);
  if (!v22)
    operator new();
  v23 = *(_QWORD *)(a2 + 72);
  if (!v23)
    v23 = *(_QWORD *)(qword_102311908 + 72);
  sub_100F3EB14(v22, v23);
  v5 = *(_DWORD *)(a2 + 224);
  if ((v5 & 0x400) == 0)
  {
LABEL_49:
    if ((v5 & 0x800) == 0)
      goto LABEL_50;
    goto LABEL_70;
  }
LABEL_65:
  *(_DWORD *)(a1 + 224) |= 0x400u;
  v24 = *(_QWORD *)(a1 + 80);
  if (!v24)
    operator new();
  v25 = *(_QWORD *)(a2 + 80);
  if (!v25)
    v25 = *(_QWORD *)(qword_102311908 + 80);
  sub_10076A734(v24, v25);
  v5 = *(_DWORD *)(a2 + 224);
  if ((v5 & 0x800) == 0)
  {
LABEL_50:
    if ((v5 & 0x1000) == 0)
      goto LABEL_51;
    goto LABEL_75;
  }
LABEL_70:
  *(_DWORD *)(a1 + 224) |= 0x800u;
  v26 = *(_QWORD *)(a1 + 88);
  if (!v26)
    operator new();
  v27 = *(_QWORD *)(a2 + 88);
  if (!v27)
    v27 = *(_QWORD *)(qword_102311908 + 88);
  sub_10076A2F0(v26, v27);
  v5 = *(_DWORD *)(a2 + 224);
  if ((v5 & 0x1000) == 0)
  {
LABEL_51:
    if ((v5 & 0x2000) == 0)
      goto LABEL_52;
LABEL_77:
    v29 = *(_DWORD *)(a2 + 100);
    if (!sub_10010285C(v29))
      sub_101935D94();
    *(_DWORD *)(a1 + 224) |= 0x2000u;
    *(_DWORD *)(a1 + 100) = v29;
    v5 = *(_DWORD *)(a2 + 224);
    if ((v5 & 0x4000) == 0)
    {
LABEL_53:
      if ((v5 & 0x8000) == 0)
        goto LABEL_89;
      goto LABEL_84;
    }
    goto LABEL_79;
  }
LABEL_75:
  v28 = *(_DWORD *)(a2 + 96);
  if (!sub_10010285C(v28))
    sub_101935DBC();
  *(_DWORD *)(a1 + 224) |= 0x1000u;
  *(_DWORD *)(a1 + 96) = v28;
  v5 = *(_DWORD *)(a2 + 224);
  if ((v5 & 0x2000) != 0)
    goto LABEL_77;
LABEL_52:
  if ((v5 & 0x4000) == 0)
    goto LABEL_53;
LABEL_79:
  *(_DWORD *)(a1 + 224) |= 0x4000u;
  v30 = *(_QWORD *)(a1 + 104);
  if (!v30)
    operator new();
  v31 = *(_QWORD *)(a2 + 104);
  if (!v31)
    v31 = *(_QWORD *)(qword_102311908 + 104);
  sub_100F3EBC0(v30, v31);
  v5 = *(_DWORD *)(a2 + 224);
  if ((v5 & 0x8000) != 0)
  {
LABEL_84:
    *(_DWORD *)(a1 + 224) |= 0x8000u;
    v32 = *(_DWORD **)(a1 + 112);
    if (!v32)
      operator new();
    v33 = *(_QWORD *)(a2 + 112);
    if (!v33)
      v33 = *(_QWORD *)(qword_102311908 + 112);
    sub_100F3EC60(v32, v33);
    v5 = *(_DWORD *)(a2 + 224);
  }
LABEL_89:
  if ((v5 & 0xFF0000) != 0)
  {
    if ((v5 & 0x10000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x10000u;
      v34 = *(_QWORD *)(a1 + 120);
      if (!v34)
        operator new();
      v35 = *(_QWORD *)(a2 + 120);
      if (!v35)
        v35 = *(_QWORD *)(qword_102311908 + 120);
      sub_100F3ED48(v34, v35);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x20000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x20000u;
      v36 = *(_QWORD *)(a1 + 128);
      if (!v36)
        operator new();
      v37 = *(_QWORD *)(a2 + 128);
      if (!v37)
        v37 = *(_QWORD *)(qword_102311908 + 128);
      sub_1008CA940(v36, v37);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x40000) != 0)
    {
      v38 = *(const std::string **)(a2 + 136);
      *(_DWORD *)(a1 + 224) |= 0x40000u;
      v39 = *(std::string **)(a1 + 136);
      if (v39 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v39, v38);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x80000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x80000u;
      v40 = *(_QWORD *)(a1 + 144);
      if (!v40)
        operator new();
      v41 = *(_QWORD *)(a2 + 144);
      if (!v41)
        v41 = *(_QWORD *)(qword_102311908 + 144);
      sub_1008E549C(v40, v41);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x100000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x100000u;
      v42 = *(_QWORD *)(a1 + 152);
      if (!v42)
        operator new();
      v43 = *(_QWORD *)(a2 + 152);
      if (!v43)
        v43 = *(_QWORD *)(qword_102311908 + 152);
      sub_1008EA668(v42, v43);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x200000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x200000u;
      v44 = *(_QWORD *)(a1 + 160);
      if (!v44)
        operator new();
      v45 = *(_QWORD *)(a2 + 160);
      if (!v45)
        v45 = *(_QWORD *)(qword_102311908 + 160);
      sub_1008EFE10(v44, v45);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x400000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x400000u;
      v46 = *(_QWORD *)(a1 + 168);
      if (!v46)
        operator new();
      v47 = *(_QWORD *)(a2 + 168);
      if (!v47)
        v47 = *(_QWORD *)(qword_102311908 + 168);
      sub_1008FB9F4(v46, v47);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x800000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x800000u;
      v48 = *(_QWORD *)(a1 + 176);
      if (!v48)
        operator new();
      v49 = *(_QWORD *)(a2 + 176);
      if (!v49)
        v49 = *(_QWORD *)(qword_102311908 + 176);
      sub_1008FED50(v48, v49);
      v5 = *(_DWORD *)(a2 + 224);
    }
  }
  if (HIBYTE(v5))
  {
    if ((v5 & 0x1000000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x1000000u;
      v50 = *(_QWORD *)(a1 + 184);
      if (!v50)
        operator new();
      v51 = *(_QWORD *)(a2 + 184);
      if (!v51)
        v51 = *(_QWORD *)(qword_102311908 + 184);
      sub_1008D381C(v50, v51);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x2000000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x2000000u;
      v52 = *(_QWORD *)(a1 + 192);
      if (!v52)
        operator new();
      v53 = *(_QWORD *)(a2 + 192);
      if (!v53)
        v53 = *(_QWORD *)(qword_102311908 + 192);
      sub_1008D1C14(v52, v53);
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x4000000) != 0)
    {
      v54 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a1 + 224) |= 0x4000000u;
      *(_DWORD *)(a1 + 200) = v54;
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x8000000) != 0)
    {
      v55 = *(_DWORD *)(a2 + 204);
      if (v55 >= 3 && v55 != 4)
        sub_101935D6C();
      *(_DWORD *)(a1 + 224) |= 0x8000000u;
      *(_DWORD *)(a1 + 204) = v55;
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x10000000) != 0)
    {
      v56 = *(_DWORD *)(a2 + 216);
      *(_DWORD *)(a1 + 224) |= 0x10000000u;
      *(_DWORD *)(a1 + 216) = v56;
      v5 = *(_DWORD *)(a2 + 224);
    }
    if ((v5 & 0x20000000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x20000000u;
      v57 = *(_QWORD *)(a1 + 208);
      if (!v57)
        operator new();
      v58 = *(_QWORD *)(a2 + 208);
      if (!v58)
        v58 = *(_QWORD *)(qword_102311908 + 208);
      sub_1008CEDA0(v57, v58);
    }
  }
}

void sub_100F3D794()
{
  operator delete();
}

void sub_100F3D8DC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193498;
  sub_10010728C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F3D90C()
{
  operator new();
}

uint64_t sub_100F3D980(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 23) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100F3D998(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  if ((*(_BYTE *)(result + 44) & 2) != 0)
  {
    v2 = *(_QWORD *)(result + 32);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 20))
      {
        *(_DWORD *)(v2 + 11) = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      *(_DWORD *)(v2 + 20) = 0;
    }
  }
  if (*(int *)(result + 16) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v3);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100F3DA14(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100F3DA28(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100F3DA3C(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100F3DA54(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 36);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100F3DAA0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = result;
  v6 = *(_DWORD *)(result + 224);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 224);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), (unint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_35:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311908 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_38:
  v8 = *(_QWORD *)(v5 + 32);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311908 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_41:
  v9 = *(_QWORD *)(v5 + 40);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311908 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_44:
  v10 = *(_QWORD *)(v5 + 48);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311908 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_50;
  }
LABEL_47:
  v11 = *(_QWORD *)(v5 + 56);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311908 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_53;
  }
LABEL_50:
  v12 = *(_QWORD *)(v5 + 64);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311908 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_56;
  }
LABEL_53:
  v13 = *(_QWORD *)(v5 + 72);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311908 + 72);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_56:
  v14 = *(_QWORD *)(v5 + 80);
  if (!v14)
    v14 = *(_QWORD *)(qword_102311908 + 80);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v14, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_62;
  }
LABEL_59:
  v15 = *(_QWORD *)(v5 + 88);
  if (!v15)
    v15 = *(_QWORD *)(qword_102311908 + 88);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v15, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x2000) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_63;
  }
LABEL_62:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(_DWORD *)(v5 + 100), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_63:
  v16 = *(_QWORD *)(v5 + 104);
  if (!v16)
    v16 = *(_QWORD *)(qword_102311908 + 104);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v16, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(_DWORD *)(v5 + 96), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_70;
  }
LABEL_67:
  v17 = *(_QWORD *)(v5 + 112);
  if (!v17)
    v17 = *(_QWORD *)(qword_102311908 + 112);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v17, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_73;
  }
LABEL_70:
  v18 = *(_QWORD *)(v5 + 120);
  if (!v18)
    v18 = *(_QWORD *)(qword_102311908 + 120);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, v18, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_76;
  }
LABEL_73:
  v19 = *(_QWORD *)(v5 + 128);
  if (!v19)
    v19 = *(_QWORD *)(qword_102311908 + 128);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, v19, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_77;
  }
LABEL_76:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(31, *(_QWORD *)(v5 + 136), a2);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_80;
  }
LABEL_77:
  v20 = *(_QWORD *)(v5 + 144);
  if (!v20)
    v20 = *(_QWORD *)(qword_102311908 + 144);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x28, v20, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_83;
  }
LABEL_80:
  v21 = *(_QWORD *)(v5 + 152);
  if (!v21)
    v21 = *(_QWORD *)(qword_102311908 + 152);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x29, v21, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_86;
  }
LABEL_83:
  v22 = *(_QWORD *)(v5 + 160);
  if (!v22)
    v22 = *(_QWORD *)(qword_102311908 + 160);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2A, v22, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_89;
  }
LABEL_86:
  v23 = *(_QWORD *)(v5 + 168);
  if (!v23)
    v23 = *(_QWORD *)(qword_102311908 + 168);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2B, v23, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_92;
  }
LABEL_89:
  v24 = *(_QWORD *)(v5 + 176);
  if (!v24)
    v24 = *(_QWORD *)(qword_102311908 + 176);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2C, v24, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_95;
  }
LABEL_92:
  v25 = *(_QWORD *)(v5 + 184);
  if (!v25)
    v25 = *(_QWORD *)(qword_102311908 + 184);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x32, v25, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_98;
  }
LABEL_95:
  v26 = *(_QWORD *)(v5 + 192);
  if (!v26)
    v26 = *(_QWORD *)(qword_102311908 + 192);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x33, v26, a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_99;
  }
LABEL_98:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x34, *(_DWORD *)(v5 + 200), a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_30;
LABEL_100:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x36, *(_DWORD *)(v5 + 216), a2, a4);
    if ((*(_DWORD *)(v5 + 224) & 0x20000000) == 0)
      return result;
    goto LABEL_101;
  }
LABEL_99:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x35, *(_DWORD *)(v5 + 204), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x10000000) != 0)
    goto LABEL_100;
LABEL_30:
  if ((v6 & 0x20000000) == 0)
    return result;
LABEL_101:
  v27 = *(_QWORD *)(v5 + 208);
  if (!v27)
    v27 = *(_QWORD *)(qword_102311908 + 208);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x37, v27, a2, a4);
}

uint64_t sub_100F3DF5C(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  uint64_t v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;
  uint64_t v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  int v32;
  uint64_t v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  int v36;
  uint64_t v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  int v40;
  uint64_t v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  int v44;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v45;
  int v46;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  int v53;
  int v54;
  uint64_t v55;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v56;
  int v57;
  int v58;
  uint64_t v59;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v70;
  int v71;
  int v72;
  uint64_t v73;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v74;
  int v75;
  int v76;
  uint64_t v77;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v78;
  int v79;
  int v80;
  uint64_t v81;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v82;
  int v83;
  int v84;
  uint64_t v85;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v86;
  int v87;
  int v88;
  uint64_t v89;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v90;
  int v91;
  int v92;
  uint64_t v93;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v94;
  int v95;
  int v96;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v97;
  int v98;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v99;
  int v100;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v101;
  int v102;
  uint64_t v103;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v104;
  unsigned int v105;
  int v106;
  int v107;

  v3 = *(_DWORD *)(a1 + 224);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_56;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
  if ((v5 & 0x80000000) != 0)
  {
    v6 = 10;
  }
  else if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *(_DWORD *)(a1 + 224);
  }
  else
  {
    v6 = 1;
  }
  v4 = (v6 + 1);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 10;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *(_DWORD *)(a1 + 224);
    }
    else
    {
      v8 = 1;
    }
    v4 = (v4 + v8 + 1);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 224);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_32;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311908 + 24);
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100767B18(v9, a2);
  v11 = (int)v10;
  if (v10 >= 0x80)
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
  else
    v12 = 1;
  v4 = (v4 + v11 + v12 + 1);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_38;
  }
LABEL_32:
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311908 + 32);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DBA3AC(v13, a2);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 = (v4 + v15 + v16 + 1);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_38:
  v17 = *(_QWORD *)(a1 + 40);
  if (!v17)
    v17 = *(_QWORD *)(qword_102311908 + 40);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10076A1F8(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 = (v4 + v19 + v20 + 1);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0)
      goto LABEL_56;
    goto LABEL_50;
  }
LABEL_44:
  v21 = *(_QWORD *)(a1 + 48);
  if (!v21)
    v21 = *(_QWORD *)(qword_102311908 + 48);
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F3F2F0(v21, a2);
  v23 = (int)v22;
  if (v22 >= 0x80)
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  else
    v24 = 1;
  v4 = (v4 + v23 + v24 + 1);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x80) != 0)
  {
LABEL_50:
    v25 = *(_QWORD *)(a1 + 56);
    if (!v25)
      v25 = *(_QWORD *)(qword_102311908 + 56);
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100768DBC(v25, a2);
    v27 = (int)v26;
    if (v26 >= 0x80)
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
    else
      v28 = 1;
    v4 = (v4 + v27 + v28 + 1);
    v3 = *(_DWORD *)(a1 + 224);
  }
LABEL_56:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_114;
  if ((v3 & 0x100) != 0)
  {
    v29 = *(_QWORD *)(a1 + 64);
    if (!v29)
      v29 = *(_QWORD *)(qword_102311908 + 64);
    v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F45DE8(v29, a2);
    v31 = (int)v30;
    if (v30 >= 0x80)
      v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
    else
      v32 = 1;
    v4 = (v4 + v31 + v32 + 2);
    v3 = *(_DWORD *)(a1 + 224);
    if ((v3 & 0x200) == 0)
    {
LABEL_59:
      if ((v3 & 0x400) == 0)
        goto LABEL_60;
      goto LABEL_78;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_59;
  }
  v33 = *(_QWORD *)(a1 + 72);
  if (!v33)
    v33 = *(_QWORD *)(qword_102311908 + 72);
  v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F460C8(v33, a2);
  v35 = (int)v34;
  if (v34 >= 0x80)
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
  else
    v36 = 1;
  v4 = (v4 + v35 + v36 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x400) == 0)
  {
LABEL_60:
    if ((v3 & 0x800) == 0)
      goto LABEL_61;
    goto LABEL_84;
  }
LABEL_78:
  v37 = *(_QWORD *)(a1 + 80);
  if (!v37)
    v37 = *(_QWORD *)(qword_102311908 + 80);
  v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10076A97C(v37, a2);
  v39 = (int)v38;
  if (v38 >= 0x80)
    v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2);
  else
    v40 = 1;
  v4 = (v4 + v39 + v40 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x800) == 0)
  {
LABEL_61:
    if ((v3 & 0x1000) == 0)
      goto LABEL_62;
    goto LABEL_90;
  }
LABEL_84:
  v41 = *(_QWORD *)(a1 + 88);
  if (!v41)
    v41 = *(_QWORD *)(qword_102311908 + 88);
  v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10076A678(v41, a2);
  v43 = (int)v42;
  if (v42 >= 0x80)
    v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42, a2);
  else
    v44 = 1;
  v4 = (v4 + v43 + v44 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x1000) == 0)
  {
LABEL_62:
    if ((v3 & 0x2000) == 0)
      goto LABEL_63;
    goto LABEL_96;
  }
LABEL_90:
  v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 96);
  if ((v45 & 0x80000000) != 0)
  {
    v46 = 10;
  }
  else if (v45 >= 0x80)
  {
    v46 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45, a2);
    v3 = *(_DWORD *)(a1 + 224);
  }
  else
  {
    v46 = 1;
  }
  v4 = (v4 + v46 + 2);
  if ((v3 & 0x2000) == 0)
  {
LABEL_63:
    if ((v3 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_102;
  }
LABEL_96:
  v47 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 100);
  if ((v47 & 0x80000000) != 0)
  {
    v48 = 10;
  }
  else if (v47 >= 0x80)
  {
    v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v47, a2);
    v3 = *(_DWORD *)(a1 + 224);
  }
  else
  {
    v48 = 1;
  }
  v4 = (v4 + v48 + 2);
  if ((v3 & 0x4000) == 0)
  {
LABEL_64:
    if ((v3 & 0x8000) == 0)
      goto LABEL_114;
    goto LABEL_108;
  }
LABEL_102:
  v49 = *(_QWORD *)(a1 + 104);
  if (!v49)
    v49 = *(_QWORD *)(qword_102311908 + 104);
  if (*(_DWORD *)(v49 + 16))
    v50 = 2 * (*(_DWORD *)(v49 + 16) & 1);
  else
    v50 = 0;
  *(_DWORD *)(v49 + 12) = v50;
  v4 = (v4 + v50 + 3);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x8000) != 0)
  {
LABEL_108:
    v51 = *(_QWORD *)(a1 + 112);
    if (!v51)
      v51 = *(_QWORD *)(qword_102311908 + 112);
    v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F49700(v51, a2);
    v53 = (int)v52;
    if (v52 >= 0x80)
      v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52, a2);
    else
      v54 = 1;
    v4 = (v4 + v53 + v54 + 2);
    v3 = *(_DWORD *)(a1 + 224);
  }
LABEL_114:
  if ((v3 & 0xFF0000) == 0)
    goto LABEL_175;
  if ((v3 & 0x10000) != 0)
  {
    v55 = *(_QWORD *)(a1 + 120);
    if (!v55)
      v55 = *(_QWORD *)(qword_102311908 + 120);
    v56 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F49B88(v55, a2);
    v57 = (int)v56;
    if (v56 >= 0x80)
      v58 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v56, a2);
    else
      v58 = 1;
    v4 = (v4 + v57 + v58 + 2);
    v3 = *(_DWORD *)(a1 + 224);
    if ((v3 & 0x20000) == 0)
    {
LABEL_117:
      if ((v3 & 0x40000) == 0)
        goto LABEL_118;
      goto LABEL_136;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_117;
  }
  v59 = *(_QWORD *)(a1 + 128);
  if (!v59)
    v59 = *(_QWORD *)(qword_102311908 + 128);
  v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008CB8D8(v59, a2);
  v61 = (int)v60;
  if (v60 >= 0x80)
    v62 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60, a2);
  else
    v62 = 1;
  v4 = (v4 + v61 + v62 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x40000) == 0)
  {
LABEL_118:
    if ((v3 & 0x80000) == 0)
      goto LABEL_119;
    goto LABEL_145;
  }
LABEL_136:
  v63 = *(_QWORD *)(a1 + 136);
  v64 = *(unsigned __int8 *)(v63 + 23);
  v65 = v64;
  v66 = *(_QWORD *)(v63 + 8);
  if ((v64 & 0x80u) == 0)
    v67 = *(unsigned __int8 *)(v63 + 23);
  else
    v67 = v66;
  if (v67 >= 0x80)
  {
    v68 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v67, a2);
    v64 = *(unsigned __int8 *)(v63 + 23);
    v66 = *(_QWORD *)(v63 + 8);
    v3 = *(_DWORD *)(a1 + 224);
    v65 = *(_BYTE *)(v63 + 23);
  }
  else
  {
    v68 = 1;
  }
  if (v65 < 0)
    v64 = v66;
  v4 = (v4 + v68 + v64 + 2);
  if ((v3 & 0x80000) == 0)
  {
LABEL_119:
    if ((v3 & 0x100000) == 0)
      goto LABEL_120;
    goto LABEL_151;
  }
LABEL_145:
  v69 = *(_QWORD *)(a1 + 144);
  if (!v69)
    v69 = *(_QWORD *)(qword_102311908 + 144);
  v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008E62C8(v69, a2);
  v71 = (int)v70;
  if (v70 >= 0x80)
    v72 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70, a2);
  else
    v72 = 1;
  v4 = (v4 + v71 + v72 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x100000) == 0)
  {
LABEL_120:
    if ((v3 & 0x200000) == 0)
      goto LABEL_121;
    goto LABEL_157;
  }
LABEL_151:
  v73 = *(_QWORD *)(a1 + 152);
  if (!v73)
    v73 = *(_QWORD *)(qword_102311908 + 152);
  v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008EB1BC(v73, a2);
  v75 = (int)v74;
  if (v74 >= 0x80)
    v76 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74, a2);
  else
    v76 = 1;
  v4 = (v4 + v75 + v76 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x200000) == 0)
  {
LABEL_121:
    if ((v3 & 0x400000) == 0)
      goto LABEL_122;
    goto LABEL_163;
  }
LABEL_157:
  v77 = *(_QWORD *)(a1 + 160);
  if (!v77)
    v77 = *(_QWORD *)(qword_102311908 + 160);
  v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008F0818(v77, a2);
  v79 = (int)v78;
  if (v78 >= 0x80)
    v80 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v78, a2);
  else
    v80 = 1;
  v4 = (v4 + v79 + v80 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x400000) == 0)
  {
LABEL_122:
    if ((v3 & 0x800000) == 0)
      goto LABEL_175;
    goto LABEL_169;
  }
LABEL_163:
  v81 = *(_QWORD *)(a1 + 168);
  if (!v81)
    v81 = *(_QWORD *)(qword_102311908 + 168);
  v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008FBC90(v81, a2);
  v83 = (int)v82;
  if (v82 >= 0x80)
    v84 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82, a2);
  else
    v84 = 1;
  v4 = (v4 + v83 + v84 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x800000) != 0)
  {
LABEL_169:
    v85 = *(_QWORD *)(a1 + 176);
    if (!v85)
      v85 = *(_QWORD *)(qword_102311908 + 176);
    v86 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008FF8CC(v85, a2);
    v87 = (int)v86;
    if (v86 >= 0x80)
      v88 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v86, a2);
    else
      v88 = 1;
    v4 = (v4 + v87 + v88 + 2);
    v3 = *(_DWORD *)(a1 + 224);
  }
LABEL_175:
  if (!HIBYTE(v3))
    goto LABEL_215;
  if ((v3 & 0x1000000) != 0)
  {
    v89 = *(_QWORD *)(a1 + 184);
    if (!v89)
      v89 = *(_QWORD *)(qword_102311908 + 184);
    v90 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008D4858(v89, a2);
    v91 = (int)v90;
    if (v90 >= 0x80)
      v92 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v90, a2);
    else
      v92 = 1;
    v4 = (v4 + v91 + v92 + 2);
    v3 = *(_DWORD *)(a1 + 224);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_178:
      if ((v3 & 0x4000000) == 0)
        goto LABEL_179;
      goto LABEL_195;
    }
  }
  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_178;
  }
  v93 = *(_QWORD *)(a1 + 192);
  if (!v93)
    v93 = *(_QWORD *)(qword_102311908 + 192);
  v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008D2720(v93, a2);
  v95 = (int)v94;
  if (v94 >= 0x80)
    v96 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94, a2);
  else
    v96 = 1;
  v4 = (v4 + v95 + v96 + 2);
  v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_179:
    if ((v3 & 0x8000000) == 0)
      goto LABEL_180;
    goto LABEL_199;
  }
LABEL_195:
  v97 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 200);
  if (v97 >= 0x80)
  {
    v98 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v97, a2) + 2;
    v3 = *(_DWORD *)(a1 + 224);
  }
  else
  {
    v98 = 3;
  }
  v4 = (v98 + v4);
  if ((v3 & 0x8000000) == 0)
  {
LABEL_180:
    if ((v3 & 0x10000000) == 0)
      goto LABEL_181;
LABEL_205:
    v101 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 216);
    if (v101 >= 0x80)
    {
      v102 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101, a2) + 2;
      v3 = *(_DWORD *)(a1 + 224);
    }
    else
    {
      v102 = 3;
    }
    v4 = (v102 + v4);
    if ((v3 & 0x20000000) == 0)
      goto LABEL_215;
    goto LABEL_209;
  }
LABEL_199:
  v99 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 204);
  if ((v99 & 0x80000000) != 0)
  {
    v100 = 12;
  }
  else if (v99 >= 0x80)
  {
    v100 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v99, a2) + 2;
    v3 = *(_DWORD *)(a1 + 224);
  }
  else
  {
    v100 = 3;
  }
  v4 = (v100 + v4);
  if ((v3 & 0x10000000) != 0)
    goto LABEL_205;
LABEL_181:
  if ((v3 & 0x20000000) == 0)
    goto LABEL_215;
LABEL_209:
  v103 = *(_QWORD *)(a1 + 208);
  if (!v103)
    v103 = *(_QWORD *)(qword_102311908 + 208);
  v104 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008CF12C(v103, a2);
  v106 = (int)v104;
  if (v104 >= 0x80)
    v107 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v104, v105);
  else
    v107 = 1;
  v4 = (v4 + v106 + v107 + 2);
LABEL_215:
  *(_DWORD *)(a1 + 220) = v4;
  return v4;
}

void sub_100F3E7C4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3CD88(a1, (uint64_t)lpsrc);
}

void sub_100F3E810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 4539);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v9 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 24) = v9;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v10 = *(_BYTE *)(a2 + 25);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_BYTE *)(a1 + 25) = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0)
      return;
LABEL_9:
    v6 = *(_BYTE *)(a2 + 26);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_BYTE *)(a1 + 26) = v6;
  }
}

void sub_100F3E920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3E938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 10753);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 20);
      v8 = *(int *)(a1 + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 24))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v7 + 1);
          v7 = *(_DWORD *)(a1 + 20);
        }
        *(_DWORD *)(a1 + 20) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v8 + 1;
      sub_100F45270(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    *(_DWORD *)(a1 + 44) |= 2u;
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10)
      operator new();
    v11 = *(_QWORD *)(a2 + 32);
    if (!v11)
      v11 = *(_QWORD *)(qword_1023119E0 + 32);
    sub_100F44C88(v10, v11);
  }
}

void sub_100F3EAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3EB14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 10925);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 >= 5)
      sub_101935E34();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_100F3EBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3EBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 12924);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_BYTE *)(a1 + 8) = v5;
  }
}

void sub_100F3EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3EC60(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 13153);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      a1[6] |= 1u;
      a1[2] = v7;
      v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    a1[6] |= 2u;
    a1[3] = v8;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0)
      return;
LABEL_7:
    v6 = *(_DWORD *)(a2 + 16);
    a1[6] |= 4u;
    a1[4] = v6;
  }
}

void sub_100F3ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F3ED48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const std::string *v8;
  std::string *v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 13394);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_10;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_QWORD *)(a1 + 16) = v7;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return;
LABEL_10:
    v8 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    v9 = *(std::string **)(a1 + 24);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v9, v8);
  }
}

void sub_100F3EE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F3EE6C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.Indication");
}

void sub_100F3EE7C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193510;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F3EE8C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193510;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F3EEBC()
{
  operator new();
}

uint64_t sub_100F3EEFC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v5 = (unint64_t *)(a1 + 8);
  v6 = (unint64_t *)(a1 + 16);
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 < v10 && (*v11 & 0x80000000) == 0)
        {
          *v5 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)this + 1) = v12;
LABEL_26:
          *(_DWORD *)(a1 + 32) |= 1u;
          if ((unint64_t)v12 < v10 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_29;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if ((_DWORD)result)
        {
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          goto LABEL_26;
        }
        break;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_29:
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v13;
          v17 = v13 + 1;
          *((_QWORD *)this + 1) = v17;
        }
        *(_DWORD *)(a1 + 32) |= 2u;
        if ((unint64_t)v17 >= v10 || *v17 != 24)
          continue;
        v14 = v17 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_37:
        v27 = 0;
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v18 = v27;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v18 = *v14;
          v19 = v14 + 1;
          *((_QWORD *)this + 1) = v19;
        }
        *(_BYTE *)(a1 + 24) = v18 != 0;
        *(_DWORD *)(a1 + 32) |= 4u;
        if ((unint64_t)v19 >= v10 || *v19 != 32)
          continue;
        v15 = v19 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_45:
        v26 = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!(_DWORD)result)
            return result;
          v20 = v26;
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v20 = *v15;
          v21 = v15 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        *(_BYTE *)(a1 + 25) = v20 != 0;
        *(_DWORD *)(a1 + 32) |= 8u;
        if ((unint64_t)v21 >= v10 || *v21 != 40)
          continue;
        v16 = v21 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_53:
        v25 = 0;
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v22 = v25;
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v22 = *v16;
          v23 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)this + 1) = v23;
        }
        *(_BYTE *)(a1 + 26) = v22 != 0;
        *(_DWORD *)(a1 + 32) |= 0x10u;
        if (v23 != (unsigned __int8 *)v10 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v14 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_37;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v15 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_45;
      case 5u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v16 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_53;
      default:
        v9 = TagFallback & 7;
LABEL_20:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100F3F240(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 26), a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 25), a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 26), a2, a4);
  return result;
}

uint64_t sub_100F3F2F0(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_15;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
  v3 = *(_DWORD *)(a1 + 32);
  if ((v3 & 2) != 0)
  {
LABEL_7:
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 32);
  }
LABEL_8:
  v6 = v4 + 2;
  if ((v3 & 4) == 0)
    v6 = v4;
  if ((v3 & 8) != 0)
    v6 += 2;
  if ((v3 & 0x10) != 0)
    result = v6 + 2;
  else
    result = v6;
LABEL_15:
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

void sub_100F3F37C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3E810(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F3F3C8()
{
  return 1;
}

_QWORD *sub_100F3F3D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.Status");
}

void sub_100F3F3E0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193588;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F3F3F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193588;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F3F420()
{
  operator new();
}

uint64_t sub_100F3F468(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t result;
  unsigned int v28;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v28 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_27:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 20) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_30;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
        if ((_DWORD)result)
        {
          v10 = v28;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_27;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_30:
        v28 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
          if (!(_DWORD)result)
            return result;
          v17 = v28;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v12;
          v18 = v12 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 9) = v17 != 0;
        *(_DWORD *)(a1 + 20) |= 2u;
        if ((unint64_t)v18 >= v8 || *v18 != 24)
          continue;
        v13 = v18 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_38:
        v28 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
          if (!(_DWORD)result)
            return result;
          v19 = v28;
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v13;
          v20 = v13 + 1;
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 10) = v19 != 0;
        *(_DWORD *)(a1 + 20) |= 4u;
        if ((unint64_t)v20 >= v8 || *v20 != 32)
          continue;
        v14 = v20 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_46:
        v28 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
          if (!(_DWORD)result)
            return result;
          v21 = v28;
          v22 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v21 = *v14;
          v22 = v14 + 1;
          *((_QWORD *)this + 1) = v22;
        }
        *(_BYTE *)(a1 + 11) = v21 != 0;
        *(_DWORD *)(a1 + 20) |= 8u;
        if ((unint64_t)v22 >= v8 || *v22 != 40)
          continue;
        v15 = v22 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_54:
        v28 = 0;
        if ((unint64_t)v15 >= v8 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
          if (!(_DWORD)result)
            return result;
          v23 = v28;
          v24 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v23 = *v15;
          v24 = v15 + 1;
          *((_QWORD *)this + 1) = v24;
        }
        *(_BYTE *)(a1 + 12) = v23 != 0;
        *(_DWORD *)(a1 + 20) |= 0x10u;
        if ((unint64_t)v24 >= v8 || *v24 != 48)
          continue;
        v16 = v24 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_62:
        v28 = 0;
        if ((unint64_t)v16 >= v8 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
          if (!(_DWORD)result)
            return result;
          v25 = v28;
          v26 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v25 = *v16;
          v26 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)this + 1) = v26;
        }
        *(_BYTE *)(a1 + 13) = v25 != 0;
        *(_DWORD *)(a1 + 20) |= 0x20u;
        if (v26 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_38;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_46;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v15 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_54;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v16 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_62;
      default:
        v7 = TagFallback & 7;
LABEL_21:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100F3F83C(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 13), a2, a4);
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), a2, a4);
  if ((*(_DWORD *)(v5 + 20) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 13), a2, a4);
  return result;
}

uint64_t sub_100F3F908(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 20);
  if ((_BYTE)v1)
  {
    v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0)
      v2 += 2;
    if ((v1 & 4) != 0)
      v2 += 2;
    if ((v1 & 8) != 0)
      v2 += 2;
    if ((v1 & 0x10) != 0)
      v2 += 2;
    if ((v1 & 0x20) != 0)
      v3 = v2 + 2;
    else
      v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  *(_DWORD *)(a1 + 16) = v3;
  return v3;
}

void sub_100F3F968(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C21C(a1, lpsrc);
}

uint64_t sub_100F3F9B4()
{
  return 1;
}

_QWORD *sub_100F3F9BC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetPvtmReport");
}

void sub_100F3F9CC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193600;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F3F9FC()
{
  operator new();
}

uint64_t sub_100F3FA40(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  void *v10;
  uint64_t result;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_21;
      *(_DWORD *)(a1 + 24) |= 1u;
      v10 = *(void **)(a1 + 8);
      if (v10 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v10);
      if (!(_DWORD)result)
        return result;
      v12 = (_BYTE *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_17:
        v14 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v14);
          if (!(_DWORD)result)
            return result;
          v13 = v14;
        }
        else
        {
          v13 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v13 <= 2)
        {
          *(_DWORD *)(a1 + 24) |= 2u;
          *(_DWORD *)(a1 + 16) = v13;
        }
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_17;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_21:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F3FC00(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(1, *(_QWORD *)(result + 8), a2);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), v4, a4);
  return result;
}

void sub_100F3FC58(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100109C80(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F3FCA4()
{
  return 1;
}

_QWORD *sub_100F3FCAC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.InjectAssistanceFile");
}

void sub_100F3FCBC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193678;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F3FCEC()
{
  operator new();
}

uint64_t sub_100F3FD2C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  void *v7;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(void **)(a1 + 8);
      if (v7 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v7);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F3FE48(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(1, *(_QWORD *)(result + 8), a2);
  return result;
}

void sub_100F3FE64(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100010D44(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F3FEB0()
{
  return 1;
}

_QWORD *sub_100F3FEB8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.InjectRtiFile");
}

void sub_100F3FEC8(uint64_t *a1)
{
  *a1 = (uint64_t)off_1021936F0;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100F3FF00(uint64_t *a1)
{
  sub_100F3FEC8(a1);
  operator delete();
}

void sub_100F3FF24()
{
  operator new();
}

uint64_t sub_100F3FF64(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          sub_100F4AE78();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(unsigned int **)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100769A08(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F40154(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100F401B0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100769DEC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      else
        v7 = 1;
      v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_100F4022C(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C040(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F40278()
{
  return 1;
}

_QWORD *sub_100F40280@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.InjectSvidBlocklist");
}

void sub_100F40294()
{
  operator new();
}

uint64_t sub_100F402D4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t result;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v5 = (unint64_t *)(a1 + 24);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = *(_QWORD *)(a1 + 8);
        if (!v9)
          operator new();
        v32 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
        }
        else
        {
          v32 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
        if (!sub_1000F6578(v9, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v23 >= v13 || *v23 != 16)
          continue;
        v14 = v23 + 1;
        *((_QWORD *)this + 1) = v14;
        goto LABEL_33;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
LABEL_33:
        v30 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result)
            return result;
          v24 = v30;
        }
        else
        {
          v24 = *v14;
          *((_QWORD *)this + 1) = v14 + 1;
        }
        if (sub_10002A324(v24))
        {
          if (!sub_10002A324(v24))
            sub_101935BB4();
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 16) = v24;
        }
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v26 >= v11 || *v26 != 24)
          continue;
        v12 = v26 + 1;
        *((_QWORD *)this + 1) = v12;
LABEL_44:
        v31 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31);
          if (!(_DWORD)result)
            return result;
          v27 = v31;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v27 = *v12;
          v28 = v12 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_BYTE *)(a1 + 20) = v27 != 0;
        *(_DWORD *)(a1 + 36) |= 4u;
        if ((unint64_t)v28 >= v11 || *v28 != 80)
          continue;
        v15 = v28 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_52:
        if ((unint64_t)v15 >= v11 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v29 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v15;
          v29 = (unsigned __int8 *)(v15 + 1);
          *((_QWORD *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 36) |= 8u;
        if (v29 != (unsigned __int8 *)v11 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_44;
      case 0xAu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v15 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_52;
      default:
        v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

void sub_100F40634()
{
  operator delete();
}

uint64_t sub_100F40658(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311938 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(v5 + 24), (unint64_t)a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), (BOOL)a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(v5 + 24), (unint64_t)a2, a4);
  return result;
}

void sub_100F406FC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10010995C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F40748()
{
  return 1;
}

_QWORD *sub_100F40750@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.InjectAssistancePosition");
}

void sub_100F40760(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021937E0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F40770()
{
  operator new();
}

uint64_t sub_100F407B0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t result;

  v5 = (unint64_t *)(a1 + 8);
  v6 = (unint64_t *)(a1 + 16);
  v7 = (unint64_t *)(a1 + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v8 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v10 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)this + 1) = v15;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        if ((unint64_t)v15 < v12 && *v15 == 16)
        {
          v16 = v15 + 1;
          *((_QWORD *)this + 1) = v16;
          goto LABEL_27;
        }
      }
      if (v10 != 2)
        break;
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v16 = (char *)*((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
LABEL_27:
      if ((unint64_t)v16 >= v12 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
      }
      else
      {
        *v6 = *v16;
        v17 = v16 + 1;
        *((_QWORD *)this + 1) = v17;
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      if ((unint64_t)v17 < v12 && *v17 == 24)
      {
        v13 = v17 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_35:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v13;
          v18 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)this + 1) = v18;
        }
        *(_DWORD *)(a1 + 36) |= 4u;
        if (v18 == (unsigned __int8 *)v12
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v10 == 3)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_35;
      }
    }
    else
    {
      v11 = TagFallback & 7;
    }
LABEL_19:
    if (v11 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F409D0(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), a2, a4);
  return result;
}

void sub_100F40A48(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100109B54(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F40A94()
{
  return 1;
}

_QWORD *sub_100F40A9C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.InjectAssistanceTime");
}

void sub_100F40AAC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193858;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F40ABC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193858;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F40AEC()
{
  operator new();
}

uint64_t sub_100F40B24(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unint64_t v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t result;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v9 = (char *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v9;
        v10 = (unsigned __int8 *)(v9 + 1);
        *((_QWORD *)this + 1) = v10;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      if (v10 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F40C34(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100F40C50(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
  else
    result = 0;
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F40C8C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C17C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F40CD8()
{
  return 1;
}

_QWORD *sub_100F40CE0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.DeleteGnssData");
}

void sub_100F40CF0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021938D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F40D00(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021938D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F40D30()
{
  operator new();
}

uint64_t sub_100F40D68(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unint64_t v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t result;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v9 = (char *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v9;
        v10 = (unsigned __int8 *)(v9 + 1);
        *((_QWORD *)this + 1) = v10;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      if (v10 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F40E78(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100F40E94(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
  else
    result = 0;
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F40ED0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C364(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F40F1C()
{
  return 1;
}

_QWORD *sub_100F40F24@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetNmeaHandler");
}

void sub_100F40F34(uint64_t *a1)
{
  *a1 = (uint64_t)off_102193948;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100F40F6C(uint64_t *a1)
{
  sub_100F40F34(a1);
  operator delete();
}

void sub_100F40F90()
{
  operator new();
}

uint64_t sub_100F40FD0(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          sub_100F4AED8();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_QWORD *)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100769060(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F411C0(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100F4121C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100769240(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      else
        v7 = 1;
      v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_100F41298(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3B780(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F412E4()
{
  return 1;
}

_QWORD *sub_100F412EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistancePressure");
}

void sub_100F412FC(uint64_t *a1)
{
  *a1 = (uint64_t)off_1021939C0;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100F41334(uint64_t *a1)
{
  sub_100F412FC(a1);
  operator delete();
}

void sub_100F41358()
{
  operator new();
}

uint64_t sub_100F41398(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          sub_100F4AF38();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_DWORD **)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100769498(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F41588(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100F415E4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100769778(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      else
        v7 = 1;
      v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_100F41660(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3B8BC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F416AC()
{
  return 1;
}

_QWORD *sub_100F416B4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceAccel");
}

void sub_100F416C4(uint64_t *a1)
{
  *a1 = (uint64_t)off_102193A38;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100F416FC(uint64_t *a1)
{
  sub_100F416C4(a1);
  operator delete();
}

void sub_100F41720()
{
  operator new();
}

uint64_t sub_100F41760(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          sub_100F4AF38();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_DWORD **)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100769498(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F41950(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100F419AC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100769778(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      else
        v7 = 1;
      v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_100F41A28(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3B9F8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F41A74()
{
  return 1;
}

_QWORD *sub_100F41A7C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceGyro");
}

void sub_100F41A8C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193AB0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F41A9C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193AB0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F41ACC()
{
  operator new();
}

uint64_t sub_100F41B0C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE *v14;
  unint64_t v15;

  v5 = (unint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v6 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v8 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v9 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v11 = (char *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v11 >= v10 || *v11 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
            if (!(_DWORD)result)
              return result;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v10 = *((_QWORD *)this + 2);
          }
          else
          {
            *v5 = *v11;
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 36) |= 1u;
          if ((unint64_t)v12 < v10 && *v12 == 17)
          {
            *((_QWORD *)this + 1) = v12 + 1;
            goto LABEL_27;
          }
        }
        if (v8 != 2)
          break;
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_19;
LABEL_27:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v15;
        *(_DWORD *)(a1 + 36) |= 2u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 < *((_QWORD *)this + 2) && *v14 == 25)
        {
          *((_QWORD *)this + 1) = v14 + 1;
          goto LABEL_31;
        }
      }
      if (v8 != 3)
        break;
      v9 = TagFallback & 7;
      if (v9 != 1)
        goto LABEL_19;
LABEL_31:
      v15 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
        return 0;
      *(_QWORD *)(a1 + 24) = v15;
      *(_DWORD *)(a1 + 36) |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v9 = TagFallback & 7;
LABEL_19:
    if (v9 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_100F41CF4(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
  return result;
}

uint64_t sub_100F41D6C(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

double sub_100F41DD0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100F3BB34(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F41E1C()
{
  return 1;
}

_QWORD *sub_100F41E24@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceDem");
}

void sub_100F41E34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193B28;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F41E44(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193B28;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F41E74()
{
  operator new();
}

uint64_t sub_100F41EC0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t result;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39[2];

  v5 = (unint64_t *)(a1 + 8);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 76) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_45;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_36;
LABEL_45:
        *(_QWORD *)v39 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v39) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v39;
        *(_DWORD *)(a1 + 76) |= 2u;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 25)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_49:
        *(_QWORD *)v39 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v39) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v39;
        *(_DWORD *)(a1 + 76) |= 4u;
        v22 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v22 >= v12 || *v22 != 32)
          continue;
        v13 = v22 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_53:
        v39[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v39);
          if (!(_DWORD)result)
            return result;
          v23 = v39[0];
          v24 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          v23 = *v13;
          v24 = v13 + 1;
          *((_QWORD *)this + 1) = v24;
        }
        *(_BYTE *)(a1 + 64) = v23 != 0;
        *(_DWORD *)(a1 + 76) |= 8u;
        if ((unint64_t)v24 >= v12 || *v24 != 41)
          continue;
        *((_QWORD *)this + 1) = v24 + 1;
LABEL_61:
        *(_QWORD *)v39 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v39) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)v39;
        *(_DWORD *)(a1 + 76) |= 0x10u;
        v25 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 != 49)
          continue;
        *((_QWORD *)this + 1) = v25 + 1;
LABEL_65:
        *(_QWORD *)v39 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v39) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v39;
        *(_DWORD *)(a1 + 76) |= 0x20u;
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 != 57)
          continue;
        *((_QWORD *)this + 1) = v26 + 1;
LABEL_69:
        *(_QWORD *)v39 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v39) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)v39;
        *(_DWORD *)(a1 + 76) |= 0x40u;
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 != 65)
          continue;
        *((_QWORD *)this + 1) = v27 + 1;
LABEL_73:
        *(_QWORD *)v39 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v39) & 1) != 0)
        {
          *(_QWORD *)(a1 + 56) = *(_QWORD *)v39;
          *(_DWORD *)(a1 + 76) |= 0x80u;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
          if ((unint64_t)v28 < v14 && *v28 == 72)
          {
            v15 = v28 + 1;
            *((_QWORD *)this + 1) = v15;
LABEL_77:
            v39[0] = 0;
            if ((unint64_t)v15 >= v14 || *v15 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v39);
              if (!(_DWORD)result)
                return result;
              v29 = v39[0];
              v30 = (_BYTE *)*((_QWORD *)this + 1);
              v14 = *((_QWORD *)this + 2);
            }
            else
            {
              v29 = *v15;
              v30 = v15 + 1;
              *((_QWORD *)this + 1) = v30;
            }
            *(_BYTE *)(a1 + 65) = v29 != 0;
            *(_DWORD *)(a1 + 76) |= 0x100u;
            if ((unint64_t)v30 < v14 && *v30 == 80)
            {
              v16 = v30 + 1;
              *((_QWORD *)this + 1) = v16;
LABEL_85:
              v39[0] = 0;
              if ((unint64_t)v16 >= v14 || *v16 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v39);
                if (!(_DWORD)result)
                  return result;
                v31 = v39[0];
                v32 = (_BYTE *)*((_QWORD *)this + 1);
                v14 = *((_QWORD *)this + 2);
              }
              else
              {
                v31 = *v16;
                v32 = v16 + 1;
                *((_QWORD *)this + 1) = v32;
              }
              *(_BYTE *)(a1 + 66) = v31 != 0;
              *(_DWORD *)(a1 + 76) |= 0x200u;
              if ((unint64_t)v32 < v14 && *v32 == 88)
              {
                v17 = v32 + 1;
                *((_QWORD *)this + 1) = v17;
LABEL_93:
                v39[0] = 0;
                if ((unint64_t)v17 >= v14 || *v17 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v39);
                  if (!(_DWORD)result)
                    return result;
                  v33 = v39[0];
                  v34 = (_BYTE *)*((_QWORD *)this + 1);
                  v14 = *((_QWORD *)this + 2);
                }
                else
                {
                  v33 = *v17;
                  v34 = v17 + 1;
                  *((_QWORD *)this + 1) = v34;
                }
                *(_BYTE *)(a1 + 67) = v33 != 0;
                *(_DWORD *)(a1 + 76) |= 0x400u;
                if ((unint64_t)v34 < v14 && *v34 == 96)
                {
                  v18 = v34 + 1;
                  *((_QWORD *)this + 1) = v18;
LABEL_101:
                  v39[0] = 0;
                  if ((unint64_t)v18 >= v14 || *v18 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v39);
                    if (!(_DWORD)result)
                      return result;
                    v35 = v39[0];
                    v36 = (_BYTE *)*((_QWORD *)this + 1);
                    v14 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    v35 = *v18;
                    v36 = v18 + 1;
                    *((_QWORD *)this + 1) = v36;
                  }
                  *(_BYTE *)(a1 + 68) = v35 != 0;
                  *(_DWORD *)(a1 + 76) |= 0x800u;
                  if ((unint64_t)v36 < v14 && *v36 == 104)
                  {
                    v19 = v36 + 1;
                    *((_QWORD *)this + 1) = v19;
LABEL_109:
                    v39[0] = 0;
                    if ((unint64_t)v19 >= v14 || *v19 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v39);
                      if (!(_DWORD)result)
                        return result;
                      v37 = v39[0];
                      v38 = (unsigned __int8 *)*((_QWORD *)this + 1);
                      v14 = *((_QWORD *)this + 2);
                    }
                    else
                    {
                      v37 = *v19;
                      v38 = (unsigned __int8 *)(v19 + 1);
                      *((_QWORD *)this + 1) = v38;
                    }
                    *(_BYTE *)(a1 + 69) = v37 != 0;
                    *(_DWORD *)(a1 + 76) |= 0x1000u;
                    if (v38 == (unsigned __int8 *)v14
                      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      result = 1;
                      *((_BYTE *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_49;
        goto LABEL_36;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_53;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_61;
        goto LABEL_36;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_65;
        goto LABEL_36;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_69;
        goto LABEL_36;
      case 8u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_73;
        goto LABEL_36;
      case 9u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_77;
      case 0xAu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v16 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_85;
      case 0xBu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v17 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_93;
      case 0xCu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v18 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_101;
      case 0xDu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v19 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_109;
      default:
        v8 = TagFallback & 7;
LABEL_36:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100F42518(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 76);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 64), v4, a4);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v4, *(double *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v4, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v4, *(double *)(v5 + 48), a3);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v4, *(double *)(v5 + 56), a3);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 65), v4, a4);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 66), v4, a4);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned __int8 *)(v5 + 67), v4, a4);
  v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 69), v4, a4);
  }
LABEL_26:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned __int8 *)(v5 + 68), v4, a4);
  if ((*(_DWORD *)(v5 + 76) & 0x1000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 69), v4, a4);
  return result;
}

uint64_t sub_100F426A8(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;

  v3 = *(_DWORD *)(a1 + 76);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 76);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v4 += 2;
    if ((v3 & 0x10) != 0)
      v4 += 9;
    if ((v3 & 0x20) != 0)
      v4 += 9;
    if ((v3 & 0x40) != 0)
      v4 += 9;
    if ((v3 & 0x80) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    v6 = result + 2;
    if ((v3 & 0x100) == 0)
      v6 = result;
    if ((v3 & 0x200) != 0)
      v6 += 2;
    if ((v3 & 0x400) != 0)
      v6 += 2;
    if ((v3 & 0x800) != 0)
      v6 += 2;
    if ((v3 & 0x1000) != 0)
      result = v6 + 2;
    else
      result = v6;
  }
  *(_DWORD *)(a1 + 72) = result;
  return result;
}

void sub_100F42790(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3BC1C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F427DC()
{
  return 1;
}

_QWORD *sub_100F427E4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceMapVector");
}

void sub_100F427F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193BA0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F42804()
{
  operator new();
}

uint64_t sub_100F42848(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v5 = (unint64_t *)(a1 + 2);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 < v9 && (*v10 & 0x80000000) == 0)
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_24:
          a1[8] |= 1u;
          if ((unint64_t)v11 < v9 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_27;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if ((_DWORD)result)
        {
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v12 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_27:
        v25 = 0;
        if ((unint64_t)v12 >= v9 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v17 = v25;
        }
        else
        {
          v17 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (sub_10010285C(v17))
        {
          if (!sub_10010285C(v17))
            sub_101935C2C();
          a1[8] |= 2u;
          a1[4] = v17;
        }
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v18 >= v13 || *v18 != 24)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_38:
        v24 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
          if (!(_DWORD)result)
            return result;
          v19 = v24;
        }
        else
        {
          v19 = *v14;
          *((_QWORD *)this + 1) = v14 + 1;
        }
        if (sub_100106094(v19))
        {
          if (!sub_100106094(v19))
            sub_101935C04();
          a1[8] |= 4u;
          a1[5] = v19;
        }
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v20 >= v15 || *v20 != 32)
          continue;
        v16 = v20 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_49:
        v23 = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
          if (!(_DWORD)result)
            return result;
          v21 = v23;
        }
        else
        {
          v21 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        if (sub_100106054(v21))
        {
          if (!sub_100106054(v21))
            sub_101935BDC();
          a1[8] |= 8u;
          a1[6] = v21;
        }
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_38;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_49;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100F42B54(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = (int *)result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], v4, a4);
  v6 = v5[8];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], v4, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], v4, a4);
  if ((v5[8] & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], v4, a4);
  return result;
}

void sub_100F42BE8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100105F24(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F42C34()
{
  return 1;
}

_QWORD *sub_100F42C3C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceMotionActivityContext");
}

void sub_100F42C4C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193C18;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F42C5C()
{
  operator new();
}

uint64_t sub_100F42CA0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_24:
        v15 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!(_DWORD)result)
            return result;
          v13 = v15;
        }
        else
        {
          v13 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        if (sub_100106170(v13))
        {
          if (!sub_100106170(v13))
            sub_101935C54();
          *(_DWORD *)(a1 + 24) |= 2u;
          *(_DWORD *)(a1 + 16) = v13;
        }
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F42E64(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), v4, a4);
  return result;
}

void sub_100F42EBC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1001060A0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F42F08()
{
  return 1;
}

_QWORD *sub_100F42F10@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceMountState");
}

void sub_100F42F20(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193C90;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F42F30()
{
  operator new();
}

uint64_t sub_100F42F74(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v10 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!(_DWORD)result)
          return result;
        v8 = v10;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (sub_100109264(v8))
      {
        if ((sub_100109264(v8) & 1) == 0)
          sub_101935C7C();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F430AC(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

void sub_100F430C8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100109148(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F43114()
{
  return 1;
}

_QWORD *sub_100F4311C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceSignalEnvironment");
}

void sub_100F4312C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193D08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F4313C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193D08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F4316C()
{
  operator new();
}

uint64_t sub_100F431B0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;

  v5 = (unint64_t *)(a1 + 8);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_18;
LABEL_26:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v15;
        *(_DWORD *)(a1 + 44) |= 2u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 25)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_30:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 24) = v15;
        *(_DWORD *)(a1 + 44) |= 4u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 33)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_34:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) != 0)
        {
          *(_QWORD *)(a1 + 32) = v15;
          *(_DWORD *)(a1 + 44) |= 8u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_30;
        goto LABEL_18;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_18;
        goto LABEL_34;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100F433FC(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(double *)(v5 + 32), a3);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(double *)(v5 + 32), a3);
  return result;
}

uint64_t sub_100F43490(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

double sub_100F43500(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100F3BE50(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F4354C()
{
  return 1;
}

_QWORD *sub_100F43554@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceSpeedConstraint");
}

void sub_100F43564(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193D80;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F43574(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193D80;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F435A4()
{
  operator new();
}

uint64_t sub_100F435E4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE *v14;
  unint64_t v15;

  v5 = (unint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v6 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v8 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v9 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v11 = (char *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v11 >= v10 || *v11 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
            if (!(_DWORD)result)
              return result;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v10 = *((_QWORD *)this + 2);
          }
          else
          {
            *v5 = *v11;
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 36) |= 1u;
          if ((unint64_t)v12 < v10 && *v12 == 17)
          {
            *((_QWORD *)this + 1) = v12 + 1;
            goto LABEL_27;
          }
        }
        if (v8 != 2)
          break;
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_19;
LABEL_27:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v15;
        *(_DWORD *)(a1 + 36) |= 2u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 < *((_QWORD *)this + 2) && *v14 == 25)
        {
          *((_QWORD *)this + 1) = v14 + 1;
          goto LABEL_31;
        }
      }
      if (v8 != 3)
        break;
      v9 = TagFallback & 7;
      if (v9 != 1)
        goto LABEL_19;
LABEL_31:
      v15 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
        return 0;
      *(_QWORD *)(a1 + 24) = v15;
      *(_DWORD *)(a1 + 36) |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v9 = TagFallback & 7;
LABEL_19:
    if (v9 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_100F437CC(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
  return result;
}

uint64_t sub_100F43844(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

double sub_100F438A8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100F3BF58(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F438F4()
{
  return 1;
}

_QWORD *sub_100F438FC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetAssistanceAlongTrackVelocity");
}

void sub_100F4390C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193DF8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F4391C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193DF8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F4394C()
{
  operator new();
}

uint64_t sub_100F43988(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;

  v5 = (unint64_t *)(a1 + 8);
  v6 = (unsigned int *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v12 = (char *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v12;
        v13 = v12 + 1;
        *((_QWORD *)this + 1) = v13;
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        v11 = v13 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v11;
          v14 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_DWORD *)(a1 + 24) |= 2u;
        if (v14 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F43B24(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), v4, a4);
  return result;
}

uint64_t sub_100F43B7C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      if ((*(_DWORD *)(a1 + 24) & 2) == 0)
        goto LABEL_11;
    }
    else
    {
      v3 = 0;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        goto LABEL_11;
    }
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v4 >= 0x80)
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    else
      v5 = 2;
    v3 = (v5 + v3);
  }
  else
  {
    v3 = 0;
  }
LABEL_11:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_100F43BF4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C9D0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F43C40()
{
  return 1;
}

_QWORD *sub_100F43C48@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetThermalRiskState");
}

void sub_100F43C58(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193E70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F43C68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193E70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F43C98()
{
  operator new();
}

uint64_t sub_100F43CD8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v16 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
        if (!(_DWORD)result)
          return result;
        v11 = v16;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_BYTE *)(a1 + 8) = v11 != 0;
      *(_DWORD *)(a1 + 20) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_23:
        v17 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
          if (!(_DWORD)result)
            return result;
          v13 = v17;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v9;
          v14 = (unsigned __int8 *)(v9 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_DWORD *)(a1 + 12) = v13;
        *(_DWORD *)(a1 + 20) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F43E84(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_100F43EDC(unsigned int *a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;

  v3 = a1[5];
  if ((_BYTE)v3)
  {
    v4 = 2 * (v3 & 1);
    if ((v3 & 2) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[3];
      if ((v5 & 0x80000000) != 0)
      {
        v6 = 11;
      }
      else if (v5 >= 0x80)
      {
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      }
      else
      {
        v6 = 2;
      }
      v4 = (v6 + v4);
    }
  }
  else
  {
    v4 = 0;
  }
  a1[4] = v4;
  return v4;
}

void sub_100F43F48(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C404(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F43F94()
{
  return 1;
}

_QWORD *sub_100F43F9C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetConfigSimulatorMode");
}

void sub_100F43FAC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193EE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F43FBC()
{
  operator new();
}

uint64_t sub_100F43FF4(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;

  v5 = a1 + 2;
  v6 = a1 + 3;
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v12 = (char *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v12;
        v13 = v12 + 1;
        *((_QWORD *)this + 1) = v13;
      }
      a1[5] |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        v11 = v13 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v11;
          v14 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        a1[5] |= 2u;
        if (v14 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F44190(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  return result;
}

void sub_100F441E8(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1001097F8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F44234()
{
  return 1;
}

_QWORD *sub_100F4423C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetConfigEnableGnssConstellations");
}

void sub_100F4424C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193F60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F4425C()
{
  operator new();
}

uint64_t sub_100F44298(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v17 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
        if (!(_DWORD)result)
          return result;
        v11 = v17;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_BYTE *)(a1 + 8) = v11 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_23:
        v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v9;
          v14 = (unsigned __int8 *)(v9 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 9) = v13 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F4444C(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  return result;
}

void sub_100F444A4(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100107188(a1, lpsrc);
}

uint64_t sub_100F444F0()
{
  return 1;
}

_QWORD *sub_100F444F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetConfigRfBandEnable");
}

void sub_100F44508(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193FD8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F44518()
{
  operator new();
}

uint64_t sub_100F44554(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      v7 = *((_QWORD *)this + 2);
      if ((unint64_t)v8 >= v7 || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v9 = v12;
        v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v7 = *((_QWORD *)this + 2);
      }
      else
      {
        v9 = *v8;
        v10 = (unsigned __int8 *)(v8 + 1);
        *((_QWORD *)this + 1) = v10;
      }
      *(_BYTE *)(a1 + 8) = v9 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if (v10 == (unsigned __int8 *)v7 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F44670(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
  return result;
}

void sub_100F4468C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100106180(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F446D8()
{
  return 1;
}

_QWORD *sub_100F446E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.SetConfigDutyCycling");
}

void sub_100F446F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194050;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F44720(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194050;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F44764()
{
  operator new();
}

uint64_t sub_100F447A4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  void *v7;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(void **)(a1 + 8);
      if (v7 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v7);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F448C0(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(result + 8), a2);
  return result;
}

uint64_t sub_100F448DC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = v7;
    if (v8 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v7 = *(_QWORD *)(v4 + 8);
      v9 = v10 + 1;
      v6 = *(_BYTE *)(v4 + 23);
    }
    else
    {
      v9 = 2;
    }
    if (v6 < 0)
      v5 = v7;
    result = (v9 + v5);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F44958(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C4C4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F449A4()
{
  return 1;
}

_QWORD *sub_100F449AC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.TerminationImminent");
}

void sub_100F449BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021940C8;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F449EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021940C8;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F44A30()
{
  operator new();
}

uint64_t sub_100F44A70(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  void *v7;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(void **)(a1 + 8);
      if (v7 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v7);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F44B8C(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(result + 8), a2);
  return result;
}

uint64_t sub_100F44BA8(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = v7;
    if (v8 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v7 = *(_QWORD *)(v4 + 8);
      v9 = v10 + 1;
      v6 = *(_BYTE *)(v4 + 23);
    }
    else
    {
      v9 = 2;
    }
    if (v6 < 0)
      v5 = v7;
    result = (v9 + v5);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F44C24(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C5A0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F44C70()
{
  return 1;
}

_QWORD *sub_100F44C78@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.ExitMessage");
}

void sub_100F44C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 10285);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v7 = *(_BYTE *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_BYTE *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 20);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 20) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 2u;
    *(_DWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 20);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = *(_BYTE *)(a2 + 13);
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 13) = v9;
    if ((*(_DWORD *)(a2 + 20) & 8) == 0)
      return;
LABEL_8:
    v6 = *(_BYTE *)(a2 + 14);
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 14) = v6;
  }
}

void sub_100F44D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F44D90(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194140;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F44DA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194140;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F44DD0()
{
  operator new();
}

uint64_t sub_100F44E10(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
  {
    *(_DWORD *)(result + 11) = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F44E28(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v22 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_23:
          *(_BYTE *)(a1 + 12) = v10 != 0;
          *(_DWORD *)(a1 + 20) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_26;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if ((_DWORD)result)
        {
          v10 = v22;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_26:
        v22 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v15 = v22;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v12;
          v16 = v12 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_DWORD *)(a1 + 8) = v15;
        *(_DWORD *)(a1 + 20) |= 2u;
        if ((unint64_t)v16 >= v8 || *v16 != 24)
          continue;
        v13 = v16 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_34:
        v22 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v17 = v22;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v13;
          v18 = v13 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 13) = v17 != 0;
        *(_DWORD *)(a1 + 20) |= 4u;
        if ((unint64_t)v18 >= v8 || *v18 != 32)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_42:
        v22 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v19 = v22;
          v20 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v14;
          v20 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 14) = v19 != 0;
        *(_DWORD *)(a1 + 20) |= 8u;
        if (v20 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_34;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100F450F4(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 12), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 8), a2, a4);
  v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 14), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 13), a2, a4);
  if ((*(_DWORD *)(v5 + 20) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 14), a2, a4);
  return result;
}

uint64_t sub_100F45188(unsigned int *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t result;
  unsigned int v8;

  v3 = a1[5];
  if ((_BYTE)v3)
  {
    v4 = 2 * (v3 & 1);
    if ((v3 & 2) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[2];
      if ((v5 & 0x80000000) != 0)
      {
        v6 = 11;
      }
      else if (v5 >= 0x80)
      {
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        v3 = a1[5];
      }
      else
      {
        v6 = 2;
      }
      v4 += v6;
    }
    v8 = v4 + 2;
    if ((v3 & 4) == 0)
      v8 = v4;
    if ((v3 & 8) != 0)
      result = v8 + 2;
    else
      result = v8;
  }
  else
  {
    result = 0;
  }
  a1[4] = result;
  return result;
}

void sub_100F4520C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F44C88(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F45258()
{
  return 1;
}

_QWORD *sub_100F45260@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.RecoveryStatistics.RecoveryStatus");
}

void sub_100F45270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  int v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 10538);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v7, v6);
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(_DWORD *)(a1 + 24) = v8;
    if ((*(_DWORD *)(a2 + 32) & 4) == 0)
      return;
LABEL_12:
    v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 4u;
    v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, v9);
  }
}

void sub_100F453B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F453D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021941B8;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F45400(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021941B8;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F45444()
{
  operator new();
}

uint64_t sub_100F45488(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 32))
  {
    if ((*(_BYTE *)(result + 32) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(_BYTE **)v1 = 0;
          *(_QWORD *)(v1 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v1 = 0;
          *(_BYTE *)(v1 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 24) = 0;
    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100F45508(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  int v9;
  void *v10;
  uint64_t result;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  void *v17;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_24;
          *(_DWORD *)(a1 + 32) |= 1u;
          v10 = *(void **)(a1 + 8);
          if (v10 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v10);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
          if ((unint64_t)v13 < v12 && *v13 == 16)
          {
            v14 = v13 + 1;
            *((_QWORD *)this + 1) = v14;
            goto LABEL_20;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v14 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
LABEL_20:
        v18 = 0;
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result)
            return result;
          v15 = v18;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v14;
          v16 = v14 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_DWORD *)(a1 + 24) = v15;
        v9 = *(_DWORD *)(a1 + 32) | 2;
        *(_DWORD *)(a1 + 32) = v9;
        if ((unint64_t)v16 < v12 && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_32;
        }
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_24;
      v9 = *(_DWORD *)(a1 + 32);
LABEL_32:
      *(_DWORD *)(a1 + 32) = v9 | 4;
      v17 = *(void **)(a1 + 16);
      if (v17 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v17);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_24:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F45744(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(result + 8), a2);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 24), a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
  return result;
}

uint64_t sub_100F457BC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_31;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v10 = v11 + 1;
      v3 = *(_DWORD *)(a1 + 32);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 2;
    }
    if (v7 < 0)
      v6 = v8;
    v4 = (v10 + v6);
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_21;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = 11;
  }
  else if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v13 = 2;
  }
  v4 = (v13 + v4);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = v15;
    v17 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v18 = *(unsigned __int8 *)(v14 + 23);
    else
      v18 = v17;
    if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
      v15 = *(unsigned __int8 *)(v14 + 23);
      v17 = *(_QWORD *)(v14 + 8);
      v16 = *(_BYTE *)(v14 + 23);
    }
    else
    {
      v19 = 1;
    }
    if (v16 < 0)
      v15 = v17;
    v4 = (v4 + v19 + v15 + 1);
  }
LABEL_31:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_100F458E0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F45270(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F4592C()
{
  return 1;
}

_QWORD *sub_100F45934@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.RecoveryStatistics.RecoveryPoint");
}

void sub_100F45944(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)off_102194230;
  if ((uint64_t *)qword_1023119E0 != a1)
  {
    v2 = a1[4];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100F459A4(uint64_t *a1)
{
  sub_100F45944(a1);
  operator delete();
}

void sub_100F459C8()
{
  operator new();
}

uint64_t sub_100F45A08(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t result;
  unsigned int v32;
  unsigned int v33;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  do
  {
    while (1)
    {
LABEL_2:
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if (v8 == 2)
      {
        while (1)
        {
          v11 = *(_DWORD *)(a1 + 20);
          v12 = *(int *)(a1 + 16);
          if ((int)v12 >= v11)
          {
            if (v11 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
              v11 = *(_DWORD *)(a1 + 20);
            }
            *(_DWORD *)(a1 + 20) = v11 + 1;
            operator new();
          }
          v13 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v12 + 1;
          v14 = *(_QWORD *)(v13 + 8 * v12);
          v32 = 0;
          v15 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
          }
          else
          {
            v32 = *v15;
            *((_QWORD *)this + 1) = v15 + 1;
          }
          v16 = *((_DWORD *)this + 14);
          v17 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v16 + 1;
          if (v16 >= v17)
            return 0;
          v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
          if (!sub_100F45508(v14, this, v19) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
          v20 = *((_DWORD *)this + 14);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
          if (v22 < 0 == v21)
            *((_DWORD *)this + 14) = v22;
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          if ((unint64_t)v23 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v24 = *v23;
          if (v24 != 10)
          {
            if (v24 != 18)
              goto LABEL_2;
            *((_QWORD *)this + 1) = v23 + 1;
            goto LABEL_10;
          }
          *((_QWORD *)this + 1) = v23 + 1;
        }
      }
LABEL_34:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
    if (TagFallback >> 3 != 2)
    {
      v8 = TagFallback & 7;
      goto LABEL_34;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_34;
LABEL_10:
    *(_DWORD *)(a1 + 44) |= 2u;
    v9 = *(_QWORD *)(a1 + 32);
    if (!v9)
      operator new();
    v33 = 0;
    v10 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33))
        return 0;
    }
    else
    {
      v33 = *v10;
      *((_QWORD *)this + 1) = v10 + 1;
    }
    v25 = *((_DWORD *)this + 14);
    v26 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v25 + 1;
    if (v25 >= v26)
      return 0;
    v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v33);
    if (!sub_100F44E28(v9, this, v28) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
    v29 = *((_DWORD *)this + 14);
    v21 = __OFSUB__(v29, 1);
    v30 = v29 - 1;
    if (v30 < 0 == v21)
      *((_DWORD *)this + 14) = v30;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100F45D58(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if ((*(_BYTE *)(v5 + 44) & 2) != 0)
  {
    v7 = *(_QWORD *)(v5 + 32);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023119E0 + 32);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

uint64_t sub_100F45DE8(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    v4 = *(unsigned int **)(a1 + 32);
    if (!v4)
      v4 = *(unsigned int **)(qword_1023119E0 + 32);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F45188(v4, a2);
    v6 = (int)v5;
    if (v5 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    else
      v7 = 1;
    v3 = v6 + v7 + 1;
  }
  else
  {
    v3 = 0;
  }
  v8 = *(_DWORD *)(a1 + 16);
  v9 = (v8 + v3);
  if (v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F457BC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10), a2);
      v12 = (int)v11;
      if (v11 >= 0x80)
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      else
        v13 = 1;
      v9 = (v12 + v9 + v13);
      ++v10;
    }
    while (v10 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 40) = v9;
  return v9;
}

void sub_100F45EB4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3E938(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F45F00()
{
  return 1;
}

_QWORD *sub_100F45F08@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.RecoveryStatistics");
}

void sub_100F45F18(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021942A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F45F28(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021942A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F45F58()
{
  operator new();
}

uint64_t sub_100F45F90(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v10 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!(_DWORD)result)
          return result;
        v8 = v10;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 <= 4)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F460AC(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100F460C8(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100F46120(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3EB14(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F4616C()
{
  return 1;
}

_QWORD *sub_100F46174@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.LtlInfoRequest");
}

void sub_100F46184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 11203);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1002A19E0(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  v6 = *(_DWORD *)(a2 + 40);
  if (v6)
  {
    sub_1002A19E0(a1 + 32, *(_DWORD *)(a1 + 40) + v6);
    memcpy((void *)(*(_QWORD *)(a1 + 32) + 4 * *(int *)(a1 + 40)), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 40));
    *(_DWORD *)(a1 + 40) += *(_DWORD *)(a2 + 40);
  }
  LOBYTE(v7) = *(_BYTE *)(a2 + 52);
  if ((_BYTE)v7)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      v8 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 52) |= 1u;
      *(_DWORD *)(a1 + 8) = v8;
      v7 = *(_DWORD *)(a2 + 52);
    }
    if ((v7 & 2) != 0)
    {
      v9 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 52) |= 2u;
      *(_DWORD *)(a1 + 12) = v9;
    }
  }
}

void sub_100F462B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F462CC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_102194320;
  if (*((_QWORD *)this + 4))
    operator delete[]();
  if (*((_QWORD *)this + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F46334(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F462CC(a1);
  operator delete();
}

void sub_100F46358()
{
  operator new();
}

uint64_t sub_100F4639C(uint64_t result)
{
  if (*(_BYTE *)(result + 52))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t sub_100F463B8(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t result;
  char *v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE *v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  _BYTE *v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  char v44;
  unsigned int v45[12];

  v5 = a1 + 32;
  v6 = a1 + 16;
  v42 = (unsigned int *)(a1 + 8);
  v7 = (unsigned int *)(a1 + 12);
LABEL_2:
  while (2)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = (char *)*((_QWORD *)this + 2);
        if (v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v42);
          if (!(_DWORD)result)
            return result;
          v13 = (char *)*((_QWORD *)this + 1);
          v11 = (char *)*((_QWORD *)this + 2);
        }
        else
        {
          *v42 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)this + 1) = v13;
        }
        *(_DWORD *)(a1 + 52) |= 1u;
        if (v13 < v11 && *v13 == 16)
        {
          v14 = v13 + 1;
          *((_QWORD *)this + 1) = v14;
          goto LABEL_33;
        }
        continue;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)this + 1);
        v11 = (char *)*((_QWORD *)this + 2);
LABEL_33:
        if (v14 >= v11 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v18 = (char *)*((_QWORD *)this + 1);
          v11 = (char *)*((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_DWORD *)(a1 + 52) |= 2u;
        if (v18 >= v11)
          continue;
        v19 = *v18;
        goto LABEL_61;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 != 2)
        {
          if ((TagFallback & 7) == 0)
          {
            v15 = (char *)*((_QWORD *)this + 1);
            v11 = (char *)*((_QWORD *)this + 2);
            goto LABEL_40;
          }
          goto LABEL_21;
        }
        result = sub_100B3CD70(this, v6);
        if (!(_DWORD)result)
          return result;
        while (1)
        {
          v18 = (char *)*((_QWORD *)this + 1);
          v11 = (char *)*((_QWORD *)this + 2);
          if (v18 >= v11)
            goto LABEL_2;
          v19 = *v18;
          if (v19 == 32)
            goto LABEL_82;
LABEL_61:
          if (v19 != 24)
            goto LABEL_2;
          v15 = v18 + 1;
          *((_QWORD *)this + 1) = v15;
LABEL_40:
          v45[0] = 0;
          if (v15 >= v11 || *v15 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
            if (!(_DWORD)result)
              return result;
            v20 = v45[0];
          }
          else
          {
            v20 = *v15;
            *((_QWORD *)this + 1) = v15 + 1;
          }
          v21 = *(_DWORD *)(a1 + 24);
          if (v21 == *(_DWORD *)(a1 + 28))
          {
            sub_1002A19E0(v6, v21 + 1);
            v21 = *(_DWORD *)(a1 + 24);
          }
          v22 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v21 + 1;
          *(_DWORD *)(v22 + 4 * v21) = v20;
          v23 = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 24);
          if (v23 >= 1)
          {
            v24 = v23 + 1;
            do
            {
              v25 = (_BYTE *)*((_QWORD *)this + 1);
              v26 = *((_QWORD *)this + 2);
              if ((unint64_t)v25 >= v26 || *v25 != 24)
                break;
              *((_QWORD *)this + 1) = v25 + 1;
              v45[0] = 0;
              if ((unint64_t)(v25 + 1) >= v26 || (char)v25[1] < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
                if (!(_DWORD)result)
                  return result;
                v27 = v45[0];
              }
              else
              {
                v27 = v25[1];
                *((_QWORD *)this + 1) = v25 + 2;
              }
              v28 = *(_DWORD *)(a1 + 24);
              if (v28 >= *(_DWORD *)(a1 + 28))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v45, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                v29 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v45, "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v43, v29);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v45);
                v28 = *(_DWORD *)(a1 + 24);
              }
              v30 = *(_QWORD *)(a1 + 16);
              *(_DWORD *)(a1 + 24) = v28 + 1;
              *(_DWORD *)(v30 + 4 * v28) = v27;
              --v24;
            }
            while (v24 > 1);
          }
        }
      case 4u:
        v10 = TagFallback & 7;
        if (v10 == 2)
        {
          result = sub_1008D0E98(this, v5);
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v18 = (char *)*((_QWORD *)this + 1);
            v11 = (char *)*((_QWORD *)this + 2);
            if (v18 >= v11 || *v18 != 32)
              break;
LABEL_82:
            v16 = v18 + 1;
            *((_QWORD *)this + 1) = v16;
LABEL_63:
            v43 = 0;
            if (v16 >= v11 || *v16 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
            }
            else
            {
              v43 = *v16;
              *((_QWORD *)this + 1) = v16 + 1;
            }
            v31 = *(_DWORD *)(a1 + 40);
            if (v31 == *(_DWORD *)(a1 + 44))
            {
              sub_1002A19E0(v5, v31 + 1);
              v31 = *(_DWORD *)(a1 + 40);
            }
            v32 = v43;
            v33 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 40) = v31 + 1;
            *(_DWORD *)(v33 + 4 * v31) = v32;
            v34 = *(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 40);
            if (v34 >= 1)
            {
              v35 = v34 + 1;
              do
              {
                v36 = (_BYTE *)*((_QWORD *)this + 1);
                v37 = *((_QWORD *)this + 2);
                if ((unint64_t)v36 >= v37 || *v36 != 32)
                  break;
                *((_QWORD *)this + 1) = v36 + 1;
                if ((unint64_t)(v36 + 1) >= v37 || (char)v36[1] < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
                }
                else
                {
                  v43 = v36[1];
                  *((_QWORD *)this + 1) = v36 + 2;
                }
                v38 = *(_DWORD *)(a1 + 40);
                if (v38 >= *(_DWORD *)(a1 + 44))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v45, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v39 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v45, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v44, v39);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v45);
                  v38 = *(_DWORD *)(a1 + 40);
                }
                v40 = v43;
                v41 = *(_QWORD *)(a1 + 32);
                *(_DWORD *)(a1 + 40) = v38 + 1;
                *(_DWORD *)(v41 + 4 * v38) = v40;
                --v35;
              }
              while (v35 > 1);
            }
          }
          if (v18 == v11 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        if ((TagFallback & 7) == 0)
        {
          v16 = (char *)*((_QWORD *)this + 1);
          v11 = (char *)*((_QWORD *)this + 2);
          goto LABEL_63;
        }
LABEL_21:
        if (v10 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      default:
        v10 = TagFallback & 7;
        goto LABEL_21;
    }
  }
}

void sub_100F468C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F468E8(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
  }
  if ((v6 & 2) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v8 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(*(_QWORD *)(v5 + 32) + 4 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 40));
  }
  return result;
}

uint64_t sub_100F469A8(uint64_t a1, unsigned int a2)
{
  char v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 52);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 52) & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  else
    v7 = 2;
  v4 += v7;
LABEL_14:
  v8 = *(_DWORD *)(a1 + 24);
  if (v8 < 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 16)
                                                                                             + 4 * v9);
      if ((v11 & 0x80000000) != 0)
      {
        v12 = 10;
      }
      else if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        v8 = *(_DWORD *)(a1 + 24);
      }
      else
      {
        v12 = 1;
      }
      v10 += v12;
      ++v9;
    }
    while (v9 < v8);
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 < 1)
  {
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 32)
                                                                                             + 4 * v14);
      if (v16 >= 0x80)
      {
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
        v13 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        v17 = 1;
      }
      v15 += v17;
      ++v14;
    }
    while (v14 < v13);
  }
  result = (v10 + v4 + v13 + v8 + v15);
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

void sub_100F46AF4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F46184(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F46B40()
{
  return 1;
}

_QWORD *sub_100F46B48@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.LtlInfo.LtlLutParams");
}

void sub_100F46B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 11450);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    sub_1002A19E0(a1 + 8, *(_DWORD *)(a1 + 16) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 8) + 4 * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 4 * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }
  v6 = *(_DWORD *)(a2 + 36);
  if ((v6 & 0x1FE) != 0)
  {
    if ((v6 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 24) = v7;
      v6 = *(_DWORD *)(a2 + 36);
    }
    if ((v6 & 4) != 0)
    {
      v8 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_DWORD *)(a1 + 28) = v8;
    }
  }
}

void sub_100F46C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F46C60(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_102194398;
  if (*((_QWORD *)this + 1))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F46CAC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F46C60(a1);
  operator delete();
}

void sub_100F46CD0()
{
  operator new();
}

uint64_t sub_100F46D10(uint64_t result)
{
  if ((*(_WORD *)(result + 36) & 0x1FE) != 0)
    *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100F46D2C(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  _BYTE *v29;
  unsigned __int8 *v30;
  uint64_t result;
  char v32;
  unsigned int v33[12];

  v5 = a1 + 8;
  v6 = (unsigned int *)(a1 + 24);
  v7 = (unsigned int *)(a1 + 28);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v8 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v10 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v11 = TagFallback & 7;
        if (v11 != 2)
        {
          if ((TagFallback & 7) == 0)
          {
            v14 = (char *)*((_QWORD *)this + 1);
            v12 = *((_QWORD *)this + 2);
            goto LABEL_23;
          }
          goto LABEL_18;
        }
        result = sub_100B3CD70(this, v5);
        if (!(_DWORD)result)
          return result;
        while (1)
        {
          v27 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
          if ((unint64_t)v27 >= v12)
            break;
          v28 = *v27;
          if (v28 == 16)
          {
            v15 = (char *)(v27 + 1);
            *((_QWORD *)this + 1) = v15;
            goto LABEL_47;
          }
          if (v28 != 8)
            goto LABEL_2;
          v14 = (char *)(v27 + 1);
          *((_QWORD *)this + 1) = v14;
LABEL_23:
          v33[0] = 0;
          if ((unint64_t)v14 >= v12 || *v14 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v33);
            if (!(_DWORD)result)
              return result;
            v16 = v33[0];
          }
          else
          {
            v16 = *v14;
            *((_QWORD *)this + 1) = v14 + 1;
          }
          v17 = *(_DWORD *)(a1 + 16);
          if (v17 == *(_DWORD *)(a1 + 20))
          {
            sub_1002A19E0(v5, v17 + 1);
            v17 = *(_DWORD *)(a1 + 16);
          }
          v18 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v17 + 1;
          *(_DWORD *)(v18 + 4 * v17) = v16;
          v19 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 16);
          if (v19 >= 1)
          {
            v20 = v19 + 1;
            do
            {
              v21 = (_BYTE *)*((_QWORD *)this + 1);
              v22 = *((_QWORD *)this + 2);
              if ((unint64_t)v21 >= v22 || *v21 != 8)
                break;
              *((_QWORD *)this + 1) = v21 + 1;
              v33[0] = 0;
              if ((unint64_t)(v21 + 1) >= v22 || (char)v21[1] < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v33);
                if (!(_DWORD)result)
                  return result;
                v23 = v33[0];
              }
              else
              {
                v23 = v21[1];
                *((_QWORD *)this + 1) = v21 + 2;
              }
              v24 = *(_DWORD *)(a1 + 16);
              if (v24 >= *(_DWORD *)(a1 + 20))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v33, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                v25 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v32, v25);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v33);
                v24 = *(_DWORD *)(a1 + 16);
              }
              v26 = *(_QWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 16) = v24 + 1;
              *(_DWORD *)(v26 + 4 * v24) = v23;
              --v20;
            }
            while (v20 > 1);
          }
        }
      }
      if (v10 != 2)
        break;
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_18;
      v15 = (char *)*((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
LABEL_47:
      if ((unint64_t)v15 >= v12 || *v15 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
        if (!(_DWORD)result)
          return result;
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
      }
      else
      {
        *v6 = *v15;
        v29 = v15 + 1;
        *((_QWORD *)this + 1) = v29;
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      if ((unint64_t)v29 < v12 && *v29 == 24)
      {
        v13 = v29 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_55:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v30 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v13;
          v30 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 36) |= 4u;
        if (v30 == (unsigned __int8 *)v12
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v10 == 3)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_55;
      }
    }
    else
    {
      v11 = TagFallback & 7;
    }
LABEL_18:
    if (v11 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

void sub_100F47098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F470B0(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  v7 = *(_DWORD *)(v5 + 36);
  if ((v7 & 2) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 24), a2, a4);
    v7 = *(_DWORD *)(v5 + 36);
  }
  if ((v7 & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 28), a2, a4);
  return result;
}

uint64_t sub_100F47148(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 0x1FE) == 0)
  {
    v4 = 0;
    goto LABEL_14;
  }
  if ((v3 & 2) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 36) & 4) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 4) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((v3 & 4) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v6 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  else
    v7 = 2;
  v4 += v7;
LABEL_14:
  v8 = *(_DWORD *)(a1 + 16);
  if (v8 < 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 8)
                                                                                             + 4 * v9);
      if ((v11 & 0x80000000) != 0)
      {
        v12 = 10;
      }
      else if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        v8 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v12 = 1;
      }
      v10 += v12;
      ++v9;
    }
    while (v9 < v8);
  }
  result = (v10 + v4 + v8);
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_100F4723C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F46B58(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F47288()
{
  return 1;
}

_QWORD *sub_100F47290@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.LtlInfo.LtlCurrentSrcCalibData");
}

void sub_100F472A0(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 11654);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_100F47348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F47360(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194410;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F47370(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194410;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F473A0()
{
  operator new();
}

uint64_t sub_100F473D8(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F473EC(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;

  v5 = a1 + 3;
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v16 = 0;
      v11 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
        if (!(_DWORD)result)
          return result;
        v12 = v16;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        v12 = *v11;
        v13 = v11 + 1;
        *((_QWORD *)this + 1) = v13;
      }
      a1[2] = v12;
      a1[5] |= 1u;
      if ((unint64_t)v13 < v9 && *v13 == 16)
      {
        v10 = v13 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_24:
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v14 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        a1[5] |= 2u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100F47594(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_100F475EC(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_17;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0)
          goto LABEL_17;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_17;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0)
        goto LABEL_17;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if (v6 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    else
      v7 = 2;
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_17:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_100F47688(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F472A0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F476D4()
{
  return 1;
}

_QWORD *sub_100F476DC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.LtlInfo.LtlRacPmicAdcPreCalData");
}

void sub_100F476EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  char v17;
  _BYTE v18[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v18, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 12137);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  v5 = *(_DWORD *)(a2 + 56);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 56) |= 1u;
    *(_DWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 56) |= 2u;
  *(_DWORD *)(a1 + 12) = v9;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_DWORD *)(a1 + 16) = v10;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 56) |= 8u;
  *(_DWORD *)(a1 + 20) = v11;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_24:
    v13 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(_DWORD *)(a1 + 28) = v13;
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_23:
  v12 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 0x10u;
  *(_DWORD *)(a1 + 24) = v12;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x20) != 0)
    goto LABEL_24;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_25:
  v14 = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 56) |= 0x40u;
  *(_BYTE *)(a1 + 32) = v14;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 56) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v6;
    v5 = *(_DWORD *)(a2 + 56);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    v15 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) |= 0x100u;
    *(_DWORD *)(a1 + 40) = v15;
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        return;
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  v16 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 56) |= 0x200u;
  *(_DWORD *)(a1 + 44) = v16;
  if ((*(_DWORD *)(a2 + 56) & 0x400) == 0)
    return;
LABEL_17:
  v7 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) |= 0x400u;
  *(_DWORD *)(a1 + 48) = v7;
}

void sub_100F478C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F478E0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194488;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F478F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194488;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F47920()
{
  operator new();
}

uint64_t sub_100F47968(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 56);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 36) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_DWORD *)(result + 48) = 0;
  }
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_100F4799C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned __int8 *v41;
  uint64_t result;
  unsigned int v43;

  v5 = (unsigned int *)(a1 + 40);
  v6 = (unsigned int *)(a1 + 44);
  v7 = (unsigned int *)(a1 + 48);
  while (2)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v43 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v12 < v11 && (*v12 & 0x80000000) == 0)
        {
          v13 = *v12;
          v14 = v12 + 1;
          *((_QWORD *)this + 1) = v14;
LABEL_38:
          *(_DWORD *)(a1 + 8) = v13;
          *(_DWORD *)(a1 + 56) |= 1u;
          if ((unint64_t)v14 < v11 && *v14 == 16)
          {
            v15 = v14 + 1;
            *((_QWORD *)this + 1) = v15;
            goto LABEL_41;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
        if ((_DWORD)result)
        {
          v13 = v43;
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          goto LABEL_38;
        }
        break;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v15 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_41:
        v43 = 0;
        if ((unint64_t)v15 >= v11 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
          if (!(_DWORD)result)
            return result;
          v25 = v43;
          v26 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v25 = *v15;
          v26 = v15 + 1;
          *((_QWORD *)this + 1) = v26;
        }
        *(_DWORD *)(a1 + 12) = v25;
        *(_DWORD *)(a1 + 56) |= 2u;
        if ((unint64_t)v26 >= v11 || *v26 != 24)
          continue;
        v16 = v26 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_49:
        v43 = 0;
        if ((unint64_t)v16 >= v11 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
          if (!(_DWORD)result)
            return result;
          v27 = v43;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v27 = *v16;
          v28 = v16 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 16) = v27;
        *(_DWORD *)(a1 + 56) |= 4u;
        if ((unint64_t)v28 >= v11 || *v28 != 32)
          continue;
        v17 = v28 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_57:
        v43 = 0;
        if ((unint64_t)v17 >= v11 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
          if (!(_DWORD)result)
            return result;
          v29 = v43;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v29 = *v17;
          v30 = v17 + 1;
          *((_QWORD *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 20) = v29;
        *(_DWORD *)(a1 + 56) |= 8u;
        if ((unint64_t)v30 >= v11 || *v30 != 40)
          continue;
        v18 = v30 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_65:
        v43 = 0;
        if ((unint64_t)v18 >= v11 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
          if (!(_DWORD)result)
            return result;
          v31 = v43;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v31 = *v18;
          v32 = v18 + 1;
          *((_QWORD *)this + 1) = v32;
        }
        *(_DWORD *)(a1 + 24) = v31;
        *(_DWORD *)(a1 + 56) |= 0x10u;
        if ((unint64_t)v32 >= v11 || *v32 != 48)
          continue;
        v19 = v32 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_73:
        v43 = 0;
        if ((unint64_t)v19 >= v11 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
          if (!(_DWORD)result)
            return result;
          v33 = v43;
          v34 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v33 = *v19;
          v34 = v19 + 1;
          *((_QWORD *)this + 1) = v34;
        }
        *(_DWORD *)(a1 + 28) = v33;
        *(_DWORD *)(a1 + 56) |= 0x20u;
        if ((unint64_t)v34 >= v11 || *v34 != 56)
          continue;
        v20 = v34 + 1;
        *((_QWORD *)this + 1) = v20;
LABEL_81:
        v43 = 0;
        if ((unint64_t)v20 >= v11 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
          if (!(_DWORD)result)
            return result;
          v35 = v43;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v35 = *v20;
          v36 = v20 + 1;
          *((_QWORD *)this + 1) = v36;
        }
        *(_BYTE *)(a1 + 32) = v35 != 0;
        *(_DWORD *)(a1 + 56) |= 0x40u;
        if ((unint64_t)v36 >= v11 || *v36 != 64)
          continue;
        v21 = v36 + 1;
        *((_QWORD *)this + 1) = v21;
LABEL_89:
        v43 = 0;
        if ((unint64_t)v21 >= v11 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
          if (!(_DWORD)result)
            return result;
          v37 = v43;
          v38 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v37 = *v21;
          v38 = v21 + 1;
          *((_QWORD *)this + 1) = v38;
        }
        *(_DWORD *)(a1 + 36) = v37;
        *(_DWORD *)(a1 + 56) |= 0x80u;
        if ((unint64_t)v38 >= v11 || *v38 != 72)
          continue;
        v22 = v38 + 1;
        *((_QWORD *)this + 1) = v22;
LABEL_97:
        if ((unint64_t)v22 >= v11 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v22;
          v39 = v22 + 1;
          *((_QWORD *)this + 1) = v39;
        }
        *(_DWORD *)(a1 + 56) |= 0x100u;
        if ((unint64_t)v39 >= v11 || *v39 != 80)
          continue;
        v23 = v39 + 1;
        *((_QWORD *)this + 1) = v23;
LABEL_105:
        if ((unint64_t)v23 >= v11 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v23;
          v40 = v23 + 1;
          *((_QWORD *)this + 1) = v40;
        }
        *(_DWORD *)(a1 + 56) |= 0x200u;
        if ((unint64_t)v40 >= v11 || *v40 != 88)
          continue;
        v24 = v40 + 1;
        *((_QWORD *)this + 1) = v24;
LABEL_113:
        if ((unint64_t)v24 >= v11 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v41 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v24;
          v41 = (unsigned __int8 *)(v24 + 1);
          *((_QWORD *)this + 1) = v41;
        }
        *(_DWORD *)(a1 + 56) |= 0x400u;
        if (v41 != (unsigned __int8 *)v11 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v16 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_49;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v17 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_57;
      case 5u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v18 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_65;
      case 6u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v19 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_73;
      case 7u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v20 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_81;
      case 8u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v21 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_89;
      case 9u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v22 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_97;
      case 0xAu:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v23 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_105;
      case 0xBu:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v24 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_113;
      default:
        v10 = TagFallback & 7;
LABEL_32:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100F47F9C(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 56);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 16), a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 20), a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 28), a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 32), a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 36), a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 40), a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 48), a2, a4);
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 44), a2, a4);
  if ((*(_DWORD *)(v5 + 56) & 0x400) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 48), a2, a4);
  return result;
}

uint64_t sub_100F480F4(unsigned int *a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;

  v3 = a1[14];
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_57;
  }
  if ((v3 & 1) == 0)
  {
    LODWORD(v4) = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[2];
  if ((v5 & 0x80000000) != 0)
  {
    v6 = 10;
  }
  else if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = a1[14];
  }
  else
  {
    v6 = 1;
  }
  LODWORD(v4) = v6 + 1;
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[3];
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 10;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = a1[14];
    }
    else
    {
      v8 = 1;
    }
    LODWORD(v4) = v4 + v8 + 1;
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 10;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      v3 = a1[14];
    }
    else
    {
      v10 = 1;
    }
    LODWORD(v4) = v4 + v10 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_35;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if ((v11 & 0x80000000) != 0)
  {
    v12 = 11;
  }
  else if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    v3 = a1[14];
  }
  else
  {
    v12 = 2;
  }
  LODWORD(v4) = v12 + v4;
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_41;
  }
LABEL_35:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if ((v13 & 0x80000000) != 0)
  {
    v14 = 11;
  }
  else if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = a1[14];
  }
  else
  {
    v14 = 2;
  }
  LODWORD(v4) = v14 + v4;
  if ((v3 & 0x20) != 0)
  {
LABEL_41:
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
    if ((v15 & 0x80000000) != 0)
    {
      v16 = 11;
    }
    else if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      v3 = a1[14];
    }
    else
    {
      v16 = 2;
    }
    LODWORD(v4) = v16 + v4;
  }
LABEL_47:
  if ((v3 & 0x40) != 0)
    v4 = (v4 + 2);
  else
    v4 = v4;
  if ((v3 & 0x80) != 0)
  {
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
    if ((v17 & 0x80000000) != 0)
    {
      v18 = 11;
    }
    else if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      v3 = a1[14];
    }
    else
    {
      v18 = 2;
    }
    v4 = (v18 + v4);
  }
LABEL_57:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_74;
  if ((v3 & 0x100) != 0)
  {
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
    if (v19 >= 0x80)
    {
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      v3 = a1[14];
    }
    else
    {
      v20 = 2;
    }
    v4 = (v20 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_60:
      if ((v3 & 0x400) == 0)
        goto LABEL_74;
      goto LABEL_70;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_60;
  }
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[11];
  if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    v3 = a1[14];
  }
  else
  {
    v22 = 2;
  }
  v4 = (v22 + v4);
  if ((v3 & 0x400) != 0)
  {
LABEL_70:
    v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[12];
    if (v23 >= 0x80)
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    else
      v24 = 2;
    v4 = (v24 + v4);
  }
LABEL_74:
  a1[13] = v4;
  return v4;
}

void sub_100F48344(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F476EC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F48390()
{
  return 1;
}

_QWORD *sub_100F48398@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.LtlInfo.LtlInitialParams");
}

_QWORD *sub_100F483A8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((_QWORD *)qword_102311A00 != result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)v1[5];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100F4842C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194500;
  sub_100F483A8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F4845C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194500;
  sub_100F483A8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F484A0()
{
  operator new();
}

uint64_t sub_100F484E8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  _BYTE *v46;
  _DWORD *v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v55 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55);
          if (!(_DWORD)result)
            return result;
          v10 = v55;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_BYTE *)(a1 + 8) = v10 != 0;
        *(_DWORD *)(a1 + 56) |= 1u;
        if ((unint64_t)v11 < v8 && *v11 == 16)
        {
          v12 = v11 + 1;
          *((_QWORD *)this + 1) = v12;
          goto LABEL_31;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_31:
        v55 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55);
          if (!(_DWORD)result)
            return result;
          v15 = v55;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v12;
          v16 = v12 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_DWORD *)(a1 + 12) = v15;
        *(_DWORD *)(a1 + 56) |= 2u;
        if ((unint64_t)v16 >= v8 || *v16 != 24)
          continue;
        v13 = v16 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_39:
        v55 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55);
          if (!(_DWORD)result)
            return result;
          v17 = v55;
        }
        else
        {
          v17 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v17 <= 4)
        {
          *(_DWORD *)(a1 + 56) |= 4u;
          *(_DWORD *)(a1 + 48) = v17;
        }
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 34)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
LABEL_49:
        *(_DWORD *)(a1 + 56) |= 8u;
        v19 = *(_QWORD *)(a1 + 16);
        if (!v19)
          operator new();
        v55 = 0;
        v20 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55))return 0;
        }
        else
        {
          v55 = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)this + 14);
        v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55);
        if (!sub_100F4799C(v19, this, v24) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        v25 = *((_DWORD *)this + 14);
        v26 = __OFSUB__(v25, 1);
        v27 = v25 - 1;
        if (v27 < 0 == v26)
          *((_DWORD *)this + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 != 42)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_63:
        *(_DWORD *)(a1 + 56) |= 0x10u;
        v29 = *(_QWORD *)(a1 + 24);
        if (!v29)
          operator new();
        v55 = 0;
        v30 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55))return 0;
        }
        else
        {
          v55 = *v30;
          *((_QWORD *)this + 1) = v30 + 1;
        }
        v31 = *((_DWORD *)this + 14);
        v32 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v31 + 1;
        if (v31 >= v32)
          return 0;
        v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55);
        if (!sub_100F463B8(v29, this, v34) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v33);
        v35 = *((_DWORD *)this + 14);
        v26 = __OFSUB__(v35, 1);
        v36 = v35 - 1;
        if (v36 < 0 == v26)
          *((_DWORD *)this + 14) = v36;
        v37 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v37 >= *((_QWORD *)this + 2) || *v37 != 50)
          continue;
        *((_QWORD *)this + 1) = v37 + 1;
LABEL_77:
        *(_DWORD *)(a1 + 56) |= 0x20u;
        v38 = *(_QWORD *)(a1 + 32);
        if (!v38)
          operator new();
        v55 = 0;
        v39 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v39 >= *((_QWORD *)this + 2) || *v39 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55))return 0;
        }
        else
        {
          v55 = *v39;
          *((_QWORD *)this + 1) = v39 + 1;
        }
        v40 = *((_DWORD *)this + 14);
        v41 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v40 + 1;
        if (v40 >= v41)
          return 0;
        v42 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55);
        if (!sub_100F46D2C(v38, this, v43) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v42);
        v44 = *((_DWORD *)this + 14);
        v26 = __OFSUB__(v44, 1);
        v45 = v44 - 1;
        if (v45 < 0 == v26)
          *((_DWORD *)this + 14) = v45;
        v46 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 != 58)
          continue;
        *((_QWORD *)this + 1) = v46 + 1;
LABEL_91:
        *(_DWORD *)(a1 + 56) |= 0x40u;
        v47 = *(_DWORD **)(a1 + 40);
        if (!v47)
          operator new();
        v55 = 0;
        v48 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v48 >= *((_QWORD *)this + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v55))return 0;
        }
        else
        {
          v55 = *v48;
          *((_QWORD *)this + 1) = v48 + 1;
        }
        v49 = *((_DWORD *)this + 14);
        v50 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v49 + 1;
        if (v49 >= v50)
          return 0;
        v51 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55);
        if (!sub_100F473EC(v47, this, v52) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v51);
        v53 = *((_DWORD *)this + 14);
        v26 = __OFSUB__(v53, 1);
        v54 = v53 - 1;
        if (v54 < 0 == v26)
          *((_DWORD *)this + 14) = v54;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_39;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_49;
        goto LABEL_23;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_63;
        goto LABEL_23;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_77;
        goto LABEL_23;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_23;
        goto LABEL_91;
      default:
        v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100F48B8C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  v6 = *(_DWORD *)(result + 56);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), (BOOL)a2, a4);
    v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 48), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_12:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311A00 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_15:
  v8 = *(_QWORD *)(v5 + 24);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311A00 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return result;
    goto LABEL_21;
  }
LABEL_18:
  v9 = *(_QWORD *)(v5 + 32);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311A00 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v9, a2, a4);
  if ((*(_DWORD *)(v5 + 56) & 0x40) != 0)
  {
LABEL_21:
    v10 = *(_QWORD *)(v5 + 40);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311A00 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v10, a2, a4);
  }
  return result;
}

uint64_t sub_100F48CB4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  unsigned int *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  unsigned int v23;
  int v24;
  int v25;

  v3 = *(_DWORD *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_46;
  }
  v4 = 2 * (v3 & 1u);
  if ((v3 & 2) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 11;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v6 = 2;
    }
    v4 = (v6 + v4);
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
      goto LABEL_22;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if ((v7 & 0x80000000) != 0)
  {
    v8 = 11;
  }
  else if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    v3 = *(_DWORD *)(a1 + 56);
  }
  else
  {
    v8 = 2;
  }
  v4 = (v8 + v4);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_22:
  v9 = *(unsigned int **)(a1 + 16);
  if (!v9)
    v9 = *(unsigned int **)(qword_102311A00 + 16);
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F480F4(v9, a2);
  v11 = (int)v10;
  if (v10 >= 0x80)
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
  else
    v12 = 1;
  v4 = (v4 + v11 + v12 + 1);
  v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_28:
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311A00 + 24);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F469A8(v13, a2);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 = (v4 + v15 + v16 + 1);
  v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0)
      goto LABEL_46;
    goto LABEL_40;
  }
LABEL_34:
  v17 = *(_QWORD *)(a1 + 32);
  if (!v17)
    v17 = *(_QWORD *)(qword_102311A00 + 32);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F47148(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 = (v4 + v19 + v20 + 1);
  if ((*(_DWORD *)(a1 + 56) & 0x40) != 0)
  {
LABEL_40:
    v21 = *(_QWORD *)(a1 + 40);
    if (!v21)
      v21 = *(_QWORD *)(qword_102311A00 + 40);
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F475EC(v21, a2);
    v24 = (int)v22;
    if (v22 >= 0x80)
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, v23);
    else
      v25 = 1;
    v4 = (v4 + v24 + v25 + 1);
  }
LABEL_46:
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

void sub_100F48E94(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C67C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F48EE0()
{
  return 1;
}

_QWORD *sub_100F48EE8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.LtlInfo");
}

void sub_100F48EF8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194578;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F48F08(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194578;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F48F38()
{
  operator new();
}

uint64_t sub_100F48F70(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v10 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!(_DWORD)result)
          return result;
        v8 = v10;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 <= 6)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F4908C(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100F490A8(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100F49100(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3C924(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F4914C()
{
  return 1;
}

_QWORD *sub_100F49154@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.CntinStatusMessage");
}

void sub_100F49164(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021945F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F49174(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021945F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F491A4()
{
  operator new();
}

uint64_t sub_100F491E0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      v7 = *((_QWORD *)this + 2);
      if ((unint64_t)v8 >= v7 || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v9 = v12;
        v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v7 = *((_QWORD *)this + 2);
      }
      else
      {
        v9 = *v8;
        v10 = (unsigned __int8 *)(v8 + 1);
        *((_QWORD *)this + 1) = v10;
      }
      *(_BYTE *)(a1 + 8) = v9 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if (v10 == (unsigned __int8 *)v7 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100F492FC(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_100F49318(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 16))
    v1 = 2 * (*(_DWORD *)(a1 + 16) & 1u);
  else
    v1 = 0;
  *(_DWORD *)(a1 + 12) = v1;
  return v1;
}

void sub_100F49334(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3EBC0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F49380()
{
  return 1;
}

_QWORD *sub_100F49388@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.CntinClockControl");
}

uint64_t sub_100F49398(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102194668;
  *(_DWORD *)(a1 + 24) = 0;
  sub_100F3EC60((_DWORD *)a1, a2);
  return a1;
}

void sub_100F493D0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_100F493E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194668;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F493F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194668;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F49428()
{
  operator new();
}

uint64_t sub_100F49464(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v22 = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v12 = v22;
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v12 = *v11;
          v13 = v11 + 1;
          *((_QWORD *)this + 1) = v13;
        }
        a1[2] = v12;
        a1[6] |= 1u;
        if ((unint64_t)v13 < v9 && *v13 == 16)
        {
          v14 = v13 + 1;
          *((_QWORD *)this + 1) = v14;
          goto LABEL_26;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_18;
      v14 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
LABEL_26:
      v21 = 0;
      if ((unint64_t)v14 >= v9 || *v14 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
        if (!(_DWORD)result)
          return result;
        v15 = v21;
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        v15 = *v14;
        v16 = v14 + 1;
        *((_QWORD *)this + 1) = v16;
      }
      a1[3] = v15;
      a1[6] |= 2u;
      if ((unint64_t)v16 < v9 && *v16 == 24)
      {
        v10 = v16 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_34:
        v20 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!(_DWORD)result)
            return result;
          v17 = v20;
          v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v10;
          v18 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v18;
        }
        a1[4] = v17;
        a1[6] |= 4u;
        if (v18 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_34;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

int *sub_100F49688(int *result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;

  v5 = result;
  v6 = result[6];
  if ((v6 & 1) != 0)
  {
    result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, result[2], a2, a4);
    v6 = v5[6];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], a2, a4);
  if ((v5[6] & 4) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], a2, a4);
  return result;
}

uint64_t sub_100F49700(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  LOBYTE(v3) = *(_BYTE *)(a1 + 24);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 24);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    }
    else
    {
      v9 = 2;
    }
    v4 = (v9 + v4);
  }
LABEL_26:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_100F497DC(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3EC60(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F49828()
{
  return 1;
}

_QWORD *sub_100F49830@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.Exception");
}

void sub_100F49840(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021946E0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F49870(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021946E0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100F498B4()
{
  operator new();
}

uint64_t sub_100F498F8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  int v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t result;
  void *v16;
  unint64_t v17;

  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if (v8 != 1)
            goto LABEL_22;
          v17 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v17) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 8) = v17;
          *(_DWORD *)(a1 + 36) |= 1u;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v11 < v10 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_18;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v12 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_18:
        v17 = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v17);
          if (!(_DWORD)result)
            return result;
          v13 = v17;
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v12;
          v14 = v12 + 1;
          *((_QWORD *)this + 1) = v14;
        }
        *(_QWORD *)(a1 + 16) = v13;
        v9 = *(_DWORD *)(a1 + 36) | 2;
        *(_DWORD *)(a1 + 36) = v9;
        if ((unint64_t)v14 < v10 && *v14 == 26)
        {
          *((_QWORD *)this + 1) = v14 + 1;
          goto LABEL_30;
        }
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_22;
      v9 = *(_DWORD *)(a1 + 36);
LABEL_30:
      *(_DWORD *)(a1 + 36) = v9 | 4;
      v16 = *(void **)(a1 + 24);
      if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_22:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_100F49B10(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 24), a2);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 24), a2);
  return result;
}

uint64_t sub_100F49B88(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      v4 = v4
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    if ((v3 & 4) != 0)
    {
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = v6;
      v8 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = v8;
      if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
        v6 = *(unsigned __int8 *)(v5 + 23);
        v8 = *(_QWORD *)(v5 + 8);
        v7 = *(_BYTE *)(v5 + 23);
      }
      else
      {
        v10 = 1;
      }
      if (v7 < 0)
        v6 = v8;
      v4 = (v4 + v10 + v6 + 1);
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_100F49C3C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F3ED48(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F49C88()
{
  return 1;
}

_QWORD *sub_100F49C90@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.AskBasebandReset");
}

void sub_100F49CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  const std::string *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v16[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 13723);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 52);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 52) |= 1u;
    *(_QWORD *)(a1 + 8) = v6;
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
LABEL_14:
      *(_DWORD *)(a1 + 52) |= 4u;
      v9 = *(_QWORD *)(a1 + 24);
      if (!v9)
        operator new();
      v10 = *(_QWORD *)(a2 + 24);
      if (!v10)
        v10 = *(_QWORD *)(qword_102311A48 + 24);
      sub_100102868(v9, v10);
      v5 = *(_DWORD *)(a2 + 52);
      if ((v5 & 8) == 0)
      {
LABEL_8:
        if ((v5 & 0x10) == 0)
          return;
        goto LABEL_24;
      }
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  v7 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 52) |= 2u;
  v8 = *(std::string **)(a1 + 16);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v8, v7);
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 4) != 0)
    goto LABEL_14;
LABEL_7:
  if ((v5 & 8) == 0)
    goto LABEL_8;
LABEL_19:
  *(_DWORD *)(a1 + 52) |= 8u;
  v11 = *(_QWORD *)(a1 + 32);
  if (!v11)
    operator new();
  v12 = *(_QWORD *)(a2 + 32);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311A48 + 32);
  sub_100F3CAA8(v11, v12);
  if ((*(_DWORD *)(a2 + 52) & 0x10) != 0)
  {
LABEL_24:
    *(_DWORD *)(a1 + 52) |= 0x10u;
    v13 = *(_QWORD *)(a1 + 40);
    if (!v13)
      operator new();
    v14 = *(_QWORD *)(a2 + 40);
    if (!v14)
      v14 = *(_QWORD *)(qword_102311A48 + 40);
    sub_100F3CD88(v13, v14);
  }
}

void sub_100F49F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F49F98(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = result[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_102311A48 != result)
  {
    v4 = result[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = (_QWORD *)v1[5];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100F4A048(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194758;
  sub_100F49F98(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F4A078(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102194758;
  sub_100F49F98(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_100F4A0BC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311A48;
  if (!qword_102311A48)
  {
    sub_100F36330(0, a2, a3, a4);
    return qword_102311A48;
  }
  return result;
}

void sub_100F4A0E8()
{
  operator new();
}

uint64_t sub_100F4A130(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = result;
  v2 = *(_BYTE *)(result + 52);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    v4 = *(_DWORD *)(result + 52);
    if ((v4 & 4) != 0)
    {
      result = *(_QWORD *)(result + 24);
      if (result)
      {
        result = sub_1000FF154(result);
        v4 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v4 & 8) != 0)
    {
      v5 = *(_QWORD *)(v1 + 32);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 28))
        {
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)(v5 + 16) = 0;
        }
        *(_DWORD *)(v5 + 28) = 0;
        v4 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v4 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 40);
      if (result)
        result = sub_1002092E4(result);
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return result;
}

uint64_t sub_100F4A1DC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  int v12;
  uint64_t result;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  _DWORD *v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 < *((_QWORD *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        v12 = *(_DWORD *)(a1 + 52) | 1;
        *(_DWORD *)(a1 + 52) = v12;
        if ((unint64_t)v11 < v9 && *v11 == 18)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_28;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
        v12 = *(_DWORD *)(a1 + 52);
LABEL_28:
        *(_DWORD *)(a1 + 52) = v12 | 2;
        v14 = *(void **)(a1 + 16);
        if (v14 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
        if (!(_DWORD)result)
          return result;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 42)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 52) |= 4u;
        v16 = *(_QWORD *)(a1 + 24);
        if (!v16)
          operator new();
        v43 = 0;
        v17 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
        }
        else
        {
          v43 = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
        }
        v18 = *((_DWORD *)this + 14);
        v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 >= v19)
          return 0;
        v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_100F37A90(v16, this, v21) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
        v22 = *((_DWORD *)this + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)this + 14) = v24;
        v25 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 != 50)
          continue;
        *((_QWORD *)this + 1) = v25 + 1;
LABEL_48:
        *(_DWORD *)(a1 + 52) |= 8u;
        v26 = *(_DWORD **)(a1 + 32);
        if (!v26)
          operator new();
        v44 = 0;
        v27 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v44))return 0;
        }
        else
        {
          v44 = *v27;
          *((_QWORD *)this + 1) = v27 + 1;
        }
        v28 = *((_DWORD *)this + 14);
        v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 >= v29)
          return 0;
        v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v44);
        if (!sub_10010260C(v26, this, v31) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
        v32 = *((_DWORD *)this + 14);
        v23 = __OFSUB__(v32, 1);
        v33 = v32 - 1;
        if (v33 < 0 == v23)
          *((_DWORD *)this + 14) = v33;
        v34 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v34 >= *((_QWORD *)this + 2) || *v34 != 58)
          continue;
        *((_QWORD *)this + 1) = v34 + 1;
LABEL_62:
        *(_DWORD *)(a1 + 52) |= 0x10u;
        v35 = *(_QWORD *)(a1 + 40);
        if (!v35)
          operator new();
        v45 = 0;
        v36 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v36 >= *((_QWORD *)this + 2) || *v36 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45))return 0;
        }
        else
        {
          v45 = *v36;
          *((_QWORD *)this + 1) = v36 + 1;
        }
        v37 = *((_DWORD *)this + 14);
        v38 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v37 + 1;
        if (v37 >= v38)
          return 0;
        v39 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
        if (!sub_1000F3FC0(v35, this, v40) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v39);
        v41 = *((_DWORD *)this + 14);
        v23 = __OFSUB__(v41, 1);
        v42 = v41 - 1;
        if (v42 < 0 == v23)
          *((_DWORD *)this + 14) = v42;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_34;
        goto LABEL_20;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_48;
        goto LABEL_20;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
        goto LABEL_62;
      default:
        v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100F4A784(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), (unint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_9:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311A48 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    goto LABEL_15;
  }
LABEL_12:
  v8 = *(_QWORD *)(v5 + 32);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311A48 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0)
  {
LABEL_15:
    v9 = *(_QWORD *)(v5 + 40);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311A48 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v9, a2, a4);
  }
  return result;
}

uint64_t sub_100F4A864(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  unsigned int v21;
  int v22;
  int v23;

  LOBYTE(v3) = *(_BYTE *)(a1 + 52);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_38;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 52);
    if ((v3 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      goto LABEL_16;
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v3 = *(_DWORD *)(a1 + 52);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v4 = (v4 + v10 + v6 + 1);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (!v11)
      v11 = *(_QWORD *)(qword_102311A48 + 24);
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001050FC(v11, a2);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
    else
      v14 = 1;
    v4 = (v4 + v13 + v14 + 1);
    v3 = *(_DWORD *)(a1 + 52);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_38;
      goto LABEL_32;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (!v15)
    v15 = *(_QWORD *)(qword_102311A48 + 32);
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F3CC6C(v15, a2);
  v17 = (int)v16;
  if (v16 >= 0x80)
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
  else
    v18 = 1;
  v4 = (v4 + v17 + v18 + 1);
  if ((*(_DWORD *)(a1 + 52) & 0x10) != 0)
  {
LABEL_32:
    v19 = *(_QWORD *)(a1 + 40);
    if (!v19)
      v19 = *(_QWORD *)(qword_102311A48 + 40);
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F3DF5C(v19, a2);
    v22 = (int)v20;
    if (v20 >= 0x80)
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, v21);
    else
      v23 = 1;
    v4 = (v4 + v22 + v23 + 1);
  }
LABEL_38:
  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

void sub_100F4A9F8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100F49CA0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F4AA44()
{
  return 1;
}

_QWORD *sub_100F4AA4C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.LogEntry");
}

void sub_100F4AA5C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021947D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F4AA6C()
{
  operator new();
}

uint64_t sub_100F4AAA8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v5 = (unint64_t *)(a1 + 8);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v24 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 < v9 && (*v10 & 0x80000000) == 0)
        {
          v11 = *v10;
          v12 = v10 + 1;
          *((_QWORD *)this + 1) = v12;
LABEL_24:
          *(_BYTE *)(a1 + 16) = v11 != 0;
          *(_DWORD *)(a1 + 24) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_27;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
        if ((_DWORD)result)
        {
          v11 = v24;
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_27:
        v23 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
          if (!(_DWORD)result)
            return result;
          v16 = v23;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v16 = *v13;
          v17 = v13 + 1;
          *((_QWORD *)this + 1) = v17;
        }
        *(_BYTE *)(a1 + 17) = v16 != 0;
        *(_DWORD *)(a1 + 24) |= 2u;
        if ((unint64_t)v17 >= v9 || *v17 != 24)
          continue;
        v14 = v17 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_35:
        v22 = 0;
        if ((unint64_t)v14 >= v9 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v18 = v22;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v18 = *v14;
          v19 = v14 + 1;
          *((_QWORD *)this + 1) = v19;
        }
        *(_BYTE *)(a1 + 18) = v18 != 0;
        *(_DWORD *)(a1 + 24) |= 4u;
        if ((unint64_t)v19 >= v9 || *v19 != 32)
          continue;
        v15 = v19 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_43:
        if ((unint64_t)v15 >= v9 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v20 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v15;
          v20 = (unsigned __int8 *)(v15 + 1);
          *((_QWORD *)this + 1) = v20;
        }
        *(_DWORD *)(a1 + 24) |= 8u;
        if (v20 != (unsigned __int8 *)v9 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v14 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_35;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v15 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_43;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100F4AD70(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 17), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 8), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 18), a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 8), a2, a4);
  return result;
}

void sub_100F4AE04(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10021C460(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F4AE50()
{
  return 1;
}

_QWORD *sub_100F4AE58@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gpsd.StartContext");
}

uint64_t sub_100F4AE68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 392);
}

uint64_t sub_100F4AE70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 220);
}

void sub_100F4AE78()
{
  operator new();
}

void sub_100F4AEB4()
{
  operator delete();
}

void sub_100F4AED8()
{
  operator new();
}

void sub_100F4AF14()
{
  operator delete();
}

void sub_100F4AF38()
{
  operator new();
}

void sub_100F4AF74()
{
  operator delete();
}

void sub_100F4AF98()
{
  operator delete[]();
}

void sub_100F4B29C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100F4B2C8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_102194C88;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  if (objc_opt_class(HKHealthStore, a2))
    *(_QWORD *)(a1 + 104) = objc_alloc_init((Class)HKHealthStore);
  return a1;
}

void sub_100F4B330(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004A4854((_QWORD *)(v1 + 48));
  _Unwind_Resume(a1);
}

_QWORD *sub_100F4B348(_QWORD *a1)
{
  void *v2;

  *a1 = &off_102194C88;
  v2 = (void *)a1[13];
  if (v2)
  {

    a1[13] = 0;
  }
  sub_1004A4854(a1 + 6);
  return a1;
}

void sub_100F4B394(_QWORD *a1)
{
  sub_100F4B348(a1);
  operator delete();
}

void sub_100F4B3B8(int64x2_t *a1, __int32 a2, double a3, float a4)
{
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  uint64_t v13;
  float v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  NSObject *v22;
  __int32 v23;
  double v24;
  double v25;
  float *v26;
  _BOOL4 v27;
  float v28;
  float v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  float v35;
  float v36;
  _BOOL4 v37;
  int v39;
  int v41;
  NSObject *v42;
  __int32 v43;
  double v44;
  double v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  unint64_t v54;
  uint64_t v55;
  __int32 v56;
  BOOL v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int32 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  __int32 v67;
  double v68;
  double v69;
  char *v70;
  __int32 v71;
  double v72;
  double v73;
  char *v74;
  uint64_t v75;
  int v76;
  _BYTE v77[24];
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  _BYTE buf[64];
  _QWORD **v83;
  _QWORD *v84[196];

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102194CD0);
  v8 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134284033;
    *(double *)&buf[4] = a3;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = a4;
    *(_WORD *)&buf[22] = 1025;
    *(_DWORD *)&buf[24] = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[PhysicalEffort] aggregateWRMets - time: %{private}f, mets: %{private}f, activity: %{private}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v76 = 134284033;
    *(double *)v77 = a3;
    *(_WORD *)&v77[8] = 2049;
    *(double *)&v77[10] = a4;
    *(_WORD *)&v77[18] = 1025;
    *(_DWORD *)&v77[20] = a2;
    v59 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "[PhysicalEffort] aggregateWRMets - time: %{private}f, mets: %{private}f, activity: %{private}d", &v76, 28);
    sub_100512490("Generic", 1, 0, 2, "void CLPhysicalEffortAggregator::aggregateWRMets(CFAbsoluteTime, float, CLMetsType)", "%s\n", v59);
    if (v59 != buf)
      free(v59);
  }
  if (*(double *)&a1[1].i64[1] > a3)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
    {
      v11 = a1[1].i64[0];
      v10 = a1[1].i64[1];
      v12 = a1[2].i32[2];
      v13 = a1->i64[1];
      *(_DWORD *)buf = 134350081;
      *(double *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 1025;
      *(_DWORD *)&buf[24] = v12;
      *(_WORD *)&buf[28] = 2049;
      *(_QWORD *)&buf[30] = v13;
      *(_WORD *)&buf[38] = 2049;
      *(_QWORD *)&buf[40] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[PhysicalEffort] Time went backwards (time=%{public}f,lastTime=%{public}f,type=%{private}d,sampleStart=%{private}f,sampleStop=%{private}f)", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102194CD0);
      v61 = a1[1].i64[0];
      v60 = a1[1].i64[1];
      v62 = a1[2].i32[2];
      v63 = a1->i64[1];
      v76 = 134350081;
      *(double *)v77 = a3;
      *(_WORD *)&v77[8] = 2050;
      *(_QWORD *)&v77[10] = v60;
      *(_WORD *)&v77[18] = 1025;
      *(_DWORD *)&v77[20] = v62;
      v78 = 2049;
      v79 = v63;
      v80 = 2049;
      v81 = v61;
      LODWORD(v75) = 48;
      v64 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "[PhysicalEffort] Time went backwards (time=%{public}f,lastTime=%{public}f,type=%{private}d,sampleStart=%{private}f,sampleStop=%{private}f)", &v76, v75);
      sub_100512490("Generic", 1, 0, 2, "void CLPhysicalEffortAggregator::aggregateWRMets(CFAbsoluteTime, float, CLMetsType)", "%s\n", v64);
      if (v64 != buf)
        free(v64);
    }
  }
  if (a4 <= 0.0 || a4 > 20.0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v20 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a4;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Invalid value for METs received: %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102194CD0);
      v76 = 134349056;
      *(double *)v77 = a4;
      LODWORD(v75) = 12;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Invalid value for METs received: %{public}f", &v76, v75);
      sub_100512490("Generic", 1, 0, 0, "void CLPhysicalEffortAggregator::aggregateWRMets(CFAbsoluteTime, float, CLMetsType)", "%s\n", v21);
      if (v21 != buf)
        free(v21);
    }
  }
  else
  {
    v14 = fmaxf(a4, 1.0);
    v15 = *(double *)&a1->i64[1];
    if (v15 <= 0.0)
    {
LABEL_40:
      *(double *)&a1[1].i64[1] = a3;
LABEL_41:
      *(double *)&a1->i64[1] = a3 + -2.56;
      *(double *)a1[1].i64 = a3;
      *(float *)a1[2].i32 = v14;
      *(float *)&a1[2].i32[1] = v14;
      a1[2].i32[2] = a2;
      a1[2].i32[3] = 0;
      return;
    }
    v16 = *(double *)&a1[1].i64[1];
    if (v16 > 0.0)
    {
      if (vabdd_f64(a3, v16) > 11.52)
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102194CD0);
        v17 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
        {
          v18 = a1[1].i64[1];
          *(_DWORD *)buf = 134349312;
          *(double *)&buf[4] = a3;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[PhysicalEffort] Unexpected jump in time between mets. Current time: %{public}f, last update time: %{public}f, ending sample", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102194CD0);
          v65 = a1[1].i64[1];
          v76 = 134349312;
          *(double *)v77 = a3;
          *(_WORD *)&v77[8] = 2050;
          *(_QWORD *)&v77[10] = v65;
          LODWORD(v75) = 22;
          v66 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "[PhysicalEffort] Unexpected jump in time between mets. Current time: %{public}f, last update time: %{public}f, ending sample", &v76, v75);
          sub_100512490("Generic", 1, 0, 2, "void CLPhysicalEffortAggregator::aggregateWRMets(CFAbsoluteTime, float, CLMetsType)", "%s\n", v66);
          if (v66 != buf)
            free(v66);
        }
        v19 = 1;
LABEL_39:
        a1[2].i32[3] = v19;
        sub_100F4C234((uint64_t)a1);
        (*(void (**)(int64x2_t *, _QWORD, double, double, float))(a1->i64[0] + 16))(a1, a1[2].u32[2], *(double *)&a1->i64[1], *(double *)a1[1].i64, (float)(int)(float)((float)(*(float *)a1[2].i32 * 10.0) + 0.5) / 10.0);
        a1->i64[1] = 0;
        a1[1].i64[0] = 0;
        a1[2].i64[0] = 0;
        a1[2].i64[1] = 0;
        a1[6].i64[0] = 0;
        goto LABEL_40;
      }
      if (v15 + dbl_101C30210[*(float *)a1[2].i32 > 2.4] < a3)
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102194CD0);
        v22 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
        {
          v23 = a1[2].i32[2];
          v24 = *(double *)&a1->i64[1];
          v25 = *(double *)a1[1].i64 - v24;
          *(_DWORD *)buf = 67175169;
          *(_DWORD *)&buf[4] = v23;
          *(_WORD *)&buf[8] = 2049;
          *(double *)&buf[10] = v25;
          *(_WORD *)&buf[18] = 2049;
          *(double *)&buf[20] = v24;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "[PhysicalEffort] max duration reached, ending sample with type %{private}d, length %{private}f (start: %{private}f)", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102194CD0);
          v71 = a1[2].i32[2];
          v72 = *(double *)&a1->i64[1];
          v73 = *(double *)a1[1].i64 - v72;
          v76 = 67175169;
          *(_DWORD *)v77 = v71;
          *(_WORD *)&v77[4] = 2049;
          *(double *)&v77[6] = v73;
          *(_WORD *)&v77[14] = 2049;
          *(double *)&v77[16] = v72;
          LODWORD(v75) = 28;
          v74 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "[PhysicalEffort] max duration reached, ending sample with type %{private}d, length %{private}f (start: %{private}f)", &v76, v75);
          sub_100512490("Generic", 1, 0, 2, "void CLPhysicalEffortAggregator::aggregateWRMets(CFAbsoluteTime, float, CLMetsType)", "%s\n", v74);
          if (v74 != buf)
            free(v74);
        }
        v19 = 2;
        goto LABEL_39;
      }
    }
    *(double *)&a1[1].i64[1] = a3;
    if (v15 <= 0.0)
      goto LABEL_41;
    v26 = (float *)&a1[2].i32[1];
    if (a1[2].i32[2] != a2)
      goto LABEL_54;
    v27 = 0;
    v28 = *v26;
    v29 = vabds_f32(*v26, v14);
    v30 = v14 < 2.4;
    if (*v26 >= 2.4)
      v30 = 0;
    if (v28 < 6.5 && a2 == 1 && v28 >= 2.4)
    {
      v27 = v14 >= 2.4;
      if (v14 >= 6.5)
        v27 = 0;
    }
    if (v29 < 0.2 || v30 || v27)
    {
      v56 = a1[6].i32[0];
      v57 = __OFSUB__(v56, 1);
      v58 = v56 - 1;
      if (v58 < 0 != v57
        || (a1[6].i32[0] = v58, a1[6].i32[1] = 1, !v58) && (sub_100F4C234((uint64_t)a1), a1[6].i32[0] < 1))
      {
        sub_100F4C564((uint64_t)a1, 0, a3, v14);
        a1[6].i64[0] = 0;
      }
      else
      {
        *(double *)buf = a3;
        *(_QWORD *)&buf[8] = __PAIR64__(a2, LODWORD(v14));
        sub_100F4C4DC((int64x2_t *)a1[3].i64, (__n128 *)buf);
      }
    }
    else
    {
LABEL_54:
      v31 = a1[5].i64[1];
      if (!v31)
        goto LABEL_71;
      v32 = v31 + a1[5].i64[0] - 1;
      v33 = *(_QWORD *)(a1[3].i64[1] + ((v32 >> 5) & 0x7FFFFFFFFFFFFF8));
      if (*(_DWORD *)(v33 + 16 * v32 + 12) != a2)
        goto LABEL_71;
      v34 = 0;
      v35 = *(float *)(v33 + 16 * v32 + 8);
      v36 = vabds_f32(v35, v14);
      v37 = v14 < 2.4;
      if (v35 >= 2.4)
        v37 = 0;
      if (v35 < 6.5 && a2 == 1 && v35 >= 2.4)
      {
        v34 = v14 >= 2.4;
        if (v14 >= 6.5)
          v34 = 0;
      }
      v39 = v37 || v34;
      if (v36 < 0.2 || v39 != 0)
        v41 = a1[6].i32[1] + 1;
      else
LABEL_71:
        v41 = 1;
      a1[6].i32[1] = v41;
      ++a1[6].i32[0];
      *(double *)buf = a3;
      *(_QWORD *)&buf[8] = __PAIR64__(a2, LODWORD(v14));
      sub_100F4C4DC((int64x2_t *)a1[3].i64, (__n128 *)buf);
      if (a1[6].i32[0] > 3 || a1[6].i32[1] >= 3)
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102194CD0);
        v42 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
        {
          v43 = a1[2].i32[2];
          v44 = *(double *)&a1->i64[1];
          v45 = *(double *)a1[1].i64 - v44;
          *(_DWORD *)buf = 67175169;
          *(_DWORD *)&buf[4] = v43;
          *(_WORD *)&buf[8] = 2049;
          *(double *)&buf[10] = v45;
          *(_WORD *)&buf[18] = 2049;
          *(double *)&buf[20] = v44;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "[PhysicalEffort] outliers flagged. ending sample with type %{private}d, length %{private}f (start: %{private}f)", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102194CD0);
          v67 = a1[2].i32[2];
          v68 = *(double *)&a1->i64[1];
          v69 = *(double *)a1[1].i64 - v68;
          v76 = 67175169;
          *(_DWORD *)v77 = v67;
          *(_WORD *)&v77[4] = 2049;
          *(double *)&v77[6] = v69;
          *(_WORD *)&v77[14] = 2049;
          *(double *)&v77[16] = v68;
          LODWORD(v75) = 28;
          v70 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "[PhysicalEffort] outliers flagged. ending sample with type %{private}d, length %{private}f (start: %{private}f)", &v76, v75);
          sub_100512490("Generic", 1, 0, 2, "void CLPhysicalEffortAggregator::aggregateWRMets(CFAbsoluteTime, float, CLMetsType)", "%s\n", v70);
          if (v70 != buf)
            free(v70);
        }
        v46 = a1[6].u32[1];
        if ((int)v46 < 2)
          goto LABEL_84;
        for (; a1[5].i64[1] > v46; v46 = a1[6].i32[1])
        {
          v47 = *(_QWORD *)(a1[3].i64[1] + (((unint64_t)a1[5].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * a1[5].i64[0];
          sub_100F4C564((uint64_t)a1, 0, *(double *)v47, *(float *)(v47 + 8));
          a1[5] = vaddq_s64(a1[5], (int64x2_t)xmmword_101B9DFC0);
          sub_1004A57E8((uint64_t)a1[3].i64, 1);
        }
        if ((int)v46 <= 2)
LABEL_84:
          v48 = 4;
        else
          v48 = 3;
        a1[2].i32[3] = v48;
        (*(void (**)(int64x2_t *, _QWORD, double, double, float))(a1->i64[0] + 16))(a1, a1[2].u32[2], *(double *)&a1->i64[1], *(double *)a1[1].i64, (float)(int)(float)((float)(*(float *)a1[2].i32 * 10.0) + 0.5) / 10.0);
        v49 = a1[3].i64[1];
        v50 = a1[5].u64[0];
        v51 = a1[5].i64[1];
        v52 = *(double *)(*(_QWORD *)(v49 + ((v50 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v50);
        LODWORD(v49) = *(_DWORD *)(*(_QWORD *)(v49 + (((v50 + v51 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v50 + v51 - 1)
                                 + 12);
        v53 = v52 + -2.56;
        *(double *)&a1->i64[1] = v53;
        *(double *)a1[1].i64 = v53;
        a1[2].i64[0] = 0;
        a1[2].i32[2] = v49;
        a1[2].i32[3] = 0;
        *(_QWORD *)buf = off_10214EBA0;
        *(_DWORD *)&buf[8] = v51;
        memset(&buf[16], 0, 48);
        v84[0] = 0;
        v84[1] = 0;
        v83 = v84;
        while (a1[5].i64[1])
        {
          v54 = a1[5].u64[0];
          v55 = *(_QWORD *)(a1[3].i64[1] + ((v54 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v54;
          sub_100F4C564((uint64_t)a1, 0, *(double *)v55, *(float *)(v55 + 8));
          sub_1006D82B8((uint64_t)buf, (float *)(v55 + 8));
          a1[5] = vaddq_s64(a1[5], (int64x2_t)xmmword_101B9DFC0);
          sub_1004A57E8((uint64_t)a1[3].i64, 1);
        }
        sub_100A4533C(buf, 2, &a1[2].i32[1]);
        a1[6].i64[0] = 0;
        *(_QWORD *)buf = off_10214EBA0;
        sub_100008848((uint64_t)&v83, v84[0]);
        sub_10047F25C(&buf[16]);
      }
    }
  }
}

void sub_100F4C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1006D8228((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F4C234(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int v6;
  BOOL v7;
  float v8;
  BOOL v9;
  char v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102194CD0);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)buf = 134283521;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[PhysicalEffort] appending pending buffer of size %{private}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v12 = *(_QWORD *)(a1 + 88);
    v14 = 134283521;
    v15 = v12;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "[PhysicalEffort] appending pending buffer of size %{private}lu", &v14, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLPhysicalEffortAggregator::appendPendingBuffer()", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  while (*(_QWORD *)(a1 + 88))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((*(_QWORD *)(a1 + 80) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * *(_QWORD *)(a1 + 80);
    v5 = *(float *)(v4 + 8);
    v6 = *(_DWORD *)(a1 + 40);
    if (v6 == *(_DWORD *)(v4 + 12))
    {
      v7 = 0;
      v8 = *(float *)(a1 + 36);
      v9 = v5 < 2.4;
      if (v8 >= 2.4)
        v9 = 0;
      if (v8 < 6.5 && v6 == 1 && v8 >= 2.4)
      {
        v7 = v5 >= 2.4;
        if (v5 >= 6.5)
          v7 = 0;
      }
      v11 = vabds_f32(v8, v5) < 0.2 || v9 || v7;
    }
    else
    {
      v11 = 0;
    }
    sub_100F4C564(a1, v11 ^ 1, *(double *)v4, v5);
    *(int64x2_t *)(a1 + 80) = vaddq_s64(*(int64x2_t *)(a1 + 80), (int64x2_t)xmmword_101B9DFC0);
    sub_1004A57E8(a1 + 48, 1);
  }
}

__n128 sub_100F4C4DC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F4D288(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100F4C564(uint64_t a1, char a2, double a3, float a4)
{
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  float v12;
  float v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  char *v18;
  double v19;
  double v20;
  char *v21;
  uint64_t v22;
  int v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102194CD0);
  v8 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134283777;
    v30 = a3;
    v31 = 2049;
    v32 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[PhysicalEffort] adding sample {time=%{private}f,mets=%{private}f}", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v23 = 134283777;
    v24 = a3;
    v25 = 2049;
    v26 = a4;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "[PhysicalEffort] adding sample {time=%{private}f,mets=%{private}f}", &v23, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLPhysicalEffortAggregator::addToSample(CFAbsoluteTime, float, BOOL)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  v9 = *(double *)(a1 + 8);
  v10 = *(double *)(a1 + 16);
  v11 = fmax(v10 - v9, 0.0) + 2.56;
  v12 = (float)(a4 - *(float *)(a1 + 32)) * 2.56 / v11 + *(float *)(a1 + 32);
  *(float *)(a1 + 32) = v12;
  if ((a2 & 1) == 0)
  {
    v13 = (float)(a4 - *(float *)(a1 + 36)) * 2.56 / v11 + *(float *)(a1 + 36);
    *(float *)(a1 + 36) = v13;
  }
  v14 = fmax(v10, a3);
  *(double *)(a1 + 16) = v14;
  if (v14 <= v9)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v15 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
    {
      v16 = *(double *)(a1 + 8);
      v17 = *(double *)(a1 + 16);
      *(_DWORD *)buf = 134284033;
      v30 = v16;
      v31 = 2049;
      v32 = v17;
      v33 = 2050;
      v34 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[PhysicalEffort] Invalid sample: sampleStart=%{private}f, sampleStop=%{private}f at %{public}f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102194CD0);
      v19 = *(double *)(a1 + 8);
      v20 = *(double *)(a1 + 16);
      v23 = 134284033;
      v24 = v19;
      v25 = 2049;
      v26 = v20;
      v27 = 2050;
      v28 = a3;
      LODWORD(v22) = 32;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "[PhysicalEffort] Invalid sample: sampleStart=%{private}f, sampleStop=%{private}f at %{public}f", &v23, v22);
      sub_100512490("Generic", 1, 0, 2, "void CLPhysicalEffortAggregator::addToSample(CFAbsoluteTime, float, BOOL)", "%s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
  }
}

void sub_100F4C938(uint64_t a1, unsigned int a2, double a3, double a4, float a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSMutableDictionary *v17;
  _UNKNOWN **v18;
  HKQuantitySample *v19;
  void *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  HKQuantitySample *v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  unsigned int v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  unsigned int v40;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102194CD0);
  v10 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134284289;
    v34 = a3;
    v35 = 2049;
    v36 = a4;
    v37 = 2049;
    v38 = a5;
    v39 = 1025;
    v40 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[PhysicalEffort] sending sample: start=%{private}f, end=%{private}f, mets=%{private}f, type=%{private}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v25 = 134284289;
    v26 = a3;
    v27 = 2049;
    v28 = a4;
    v29 = 2049;
    v30 = a5;
    v31 = 1025;
    v32 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "[PhysicalEffort] sending sample: start=%{private}f, end=%{private}f, mets=%{private}f, type=%{private}d", &v25, 38);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPhysicalEffortAggregator::sendSampleToHealthKit(CFAbsoluteTime, CFAbsoluteTime, float, CLMetsType)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if (a3 < a4 && a5 > 0.0 && a2)
  {
    v11 = 77;
    v12 = 1;
    v13 = 11;
    switch(a2)
    {
      case 2u:
      case 3u:
        v13 = 13;
        goto LABEL_21;
      case 4u:
        goto LABEL_40;
      case 5u:
        goto LABEL_39;
      case 6u:
        v11 = 16;
        goto LABEL_39;
      case 7u:
        v12 = 1;
        v13 = 20;
        goto LABEL_40;
      case 8u:
        v11 = 35;
        goto LABEL_39;
      case 9u:
        v11 = 37;
        goto LABEL_39;
      case 0xAu:
        v11 = 44;
        goto LABEL_39;
      case 0xBu:
        v11 = 46;
        goto LABEL_39;
      case 0xCu:
        v11 = 52;
        goto LABEL_39;
      case 0xDu:
        v11 = 57;
        goto LABEL_39;
      case 0xEu:
        v12 = 1;
        v13 = 61;
        goto LABEL_40;
      case 0xFu:
        v11 = 63;
        goto LABEL_39;
      case 0x10u:
        v11 = 65;
        goto LABEL_39;
      case 0x11u:
        v11 = 70;
        goto LABEL_39;
      case 0x12u:
        v11 = 71;
        goto LABEL_39;
      case 0x13u:
        v11 = 72;
        goto LABEL_39;
      case 0x14u:
        v11 = 80;
        goto LABEL_39;
      default:
        v13 = 3000;
LABEL_21:
        if (a2 <= 0x15)
        {
          v12 = 1;
          if (((1 << a2) & 0x204098) != 0)
            goto LABEL_40;
        }
        v11 = v13;
LABEL_39:
        v12 = 2;
        v13 = v11;
LABEL_40:
        v17 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 5);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v13), HKMetadataKeyActivityType);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v12), HKMetadataKeyPhysicalEffortEstimationType);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", &off_10221C3C8, HKMetadataKeyAlgorithmVersion);
        if (a2 == 2)
        {
          v18 = &off_10221C3E0;
        }
        else
        {
          if (a2 != 3)
            goto LABEL_45;
          v18 = &off_10221C3C8;
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v18, HKMetadataKeyIndoorWorkout);
LABEL_45:
        v19 = +[HKQuantitySample quantitySampleWithType:quantity:startDate:endDate:metadata:](HKQuantitySample, "quantitySampleWithType:quantity:startDate:endDate:metadata:", +[HKObjectType quantityTypeForIdentifier:](HKObjectType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierPhysicalEffort), +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("kcal/(kg*hr)")), a5), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a3), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a4),
                v17);
        v20 = *(void **)(a1 + 104);
        v24 = v19;
        objc_msgSend(v20, "saveObjects:withCompletion:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1), &stru_102194CA0);
        break;
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v14 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349825;
      v34 = a3;
      v35 = 2050;
      v36 = a4;
      v37 = 2049;
      v38 = a5;
      v39 = 1026;
      v40 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[PhysicalEffort] attempt to send invalid sample to healthkit start:%{public}f stop:%{public}f mets:%{private}f, type:%{public}d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102194CD0);
      v25 = 134349825;
      v26 = a3;
      v27 = 2050;
      v28 = a4;
      v29 = 2049;
      v30 = a5;
      v31 = 1026;
      v32 = a2;
      LODWORD(v23) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "[PhysicalEffort] attempt to send invalid sample to healthkit start:%{public}f stop:%{public}f mets:%{private}f, type:%{public}d", &v25, v23);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLPhysicalEffortAggregator::sendSampleToHealthKit(CFAbsoluteTime, CFAbsoluteTime, float, CLMetsType)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_100F4CF9C(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (a2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[PhysicalEffort] successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102194CD0);
      LOWORD(v11) = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "[PhysicalEffort] successfully pushed to HKHealthStore", &v11, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPhysicalEffortAggregator::sendSampleToHealthKit(CFAbsoluteTime, CFAbsoluteTime, float, CLMetsType)_block_invoke", "%s\n", v4);
LABEL_19:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102194CD0);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[PhysicalEffort] HKHealthStore saveObjects failed on, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102194CD0);
      v11 = 138543362;
      v12 = a3;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "[PhysicalEffort] HKHealthStore saveObjects failed on, %{public}@", &v11, 12);
      v6 = v10;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLPhysicalEffortAggregator::sendSampleToHealthKit(CFAbsoluteTime, CFAbsoluteTime, float, CLMetsType)_block_invoke", "%s\n", v9);
      goto LABEL_19;
    }
  }
}

void sub_100F4D25C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100F4D288(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F4D550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *sub_100F4D59C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 6448) && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) > 0))
    return (_DWORD *)sub_1000AF4B4(a1, a1, a2);
  else
    return sub_100130B38(a2, a1);
}

uint64_t sub_100F4D5E0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  result = (uint64_t)sub_100130B38(a2, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    v5 = a1 + 3248;
    result = sub_100182520(v5);
    if ((result & 1) != 0)
    {
      v6 = (uint64_t *)nullsub_34(v5);
      v7 = *v6;
      return (uint64_t)sub_1000AFA6C((uint64_t)(a2 + 286), &v7, &v7, (uint64_t)v6);
    }
  }
  return result;
}

void sub_100F4D654(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100F4D670(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_100F4D69C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
  v5 = a1 + 16;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_OWORD *)(a3 + 32);
  v8 = *(_OWORD *)(a3 + 48);
  v9 = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  return a1;
}

void sub_100F4D718()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100F4D7B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100F4D7CC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100F4D858(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100F4D870(double *a1, double *a2)
{
  uint64_t result;

  result = rand();
  if ((int)result % 100 <= 0)
    return sub_100F4D8D0(a1, a2);
  return result;
}

uint64_t sub_100F4D8D0(double *a1, double *a2)
{
  id v4;
  _BOOL8 v5;
  double v6;
  _BOOL8 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  char *v15;
  _QWORD v16[5];
  int v17;
  id v18;
  uint8_t buf[4];
  id v20;

  v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v5 = 0;
  v6 = *a1;
  if (*a1 >= -90.0 && v6 <= 90.0)
  {
    v6 = a1[1];
    v5 = v6 <= 180.0 && v6 >= -180.0;
  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5, v6), CFSTR("isWifiHarvestCentroidValid"));
  v7 = 0;
  v8 = *a2;
  if (*a2 >= -90.0 && v8 <= 90.0)
  {
    v8 = a2[1];
    v7 = v8 <= 180.0 && v8 >= -180.0;
  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7, v8), CFSTR("isGpsHarvestCentroidValid"));
  v9 = *a1;
  if (*a1 >= -90.0 && v9 <= 90.0)
  {
    v10 = a1[1];
    if (v10 <= 180.0 && v10 >= -180.0)
    {
      v11 = *a2;
      if (*a2 >= -90.0 && v11 <= 90.0)
      {
        v12 = a2[1];
        if (v12 <= 180.0 && v12 >= -180.0)
          objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sub_100124100(v9, v10, v11, v12)), CFSTR("wifiHarvestCentroidAndGpsHarvestCentroidDistance"));
      }
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102194D10);
  v13 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Submitting CoreAnalytics event for associated AP harvest comparisons, %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102194D10);
    v17 = 138543362;
    v18 = v4;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Submitting CoreAnalytics event for associated AP harvest comparisons, %{public}@", &v17, 12);
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApHarvestComparator::submitMetrics(const CLWifiAccessPoint &, const CLWifiAccessPoint &)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100F4DC30;
  v16[3] = &unk_10215F370;
  v16[4] = v4;
  return AnalyticsSendEventLazy(CFSTR("com.apple.clx.associatedap.harvestcomparison"), v16);
}

uint64_t sub_100F4DC30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100F4DC38(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

id sub_100F4DC64(void *a1, unsigned int a2, _QWORD *a3)
{
  size_t v6;
  id v7;
  int v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  id v14;
  id v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  _QWORD v24[2];
  uint8_t buf[4];
  int v26;

  if (!a1 || !a3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#CLEU,createAESEncryptedDataAndKey,data and/or key pointer are nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    LOWORD(v24[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createAESEncryptedDataAndKey,data and/or key pointer are nil", v24, 2, v24[0]);
LABEL_50:
    v21 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyUtilities::createAESEncryptedDataAndKey(NSData *, int32_t, NSData **)", "%s\n", v12);
    if (v21 != buf)
      free(v21);
    return 0;
  }
  if (a2 != 16 && a2 != 32)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#CLEU,createAESEncryptedDataAndKey,unsupported AES key length,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    LODWORD(v24[0]) = 67240192;
    HIDWORD(v24[0]) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createAESEncryptedDataAndKey,unsupported AES key length,%{public}d", v24, 8, v24[0]);
    goto LABEL_50;
  }
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", a2);
  v8 = SecRandomCopyBytes(kSecRandomDefault, v6, objc_msgSend(v7, "mutableBytes"));
  if (v8)
  {
    v9 = v8;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#CLEU,createAESEncryptedDataAndKey,failed to generate AES key,error,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_11;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    LODWORD(v24[0]) = 67240192;
    HIDWORD(v24[0]) = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createAESEncryptedDataAndKey,failed to generate AES key,error,%{public}d", v24, 8, v24[0]);
LABEL_45:
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyUtilities::createAESEncryptedDataAndKey(NSData *, int32_t, NSData **)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
LABEL_11:

    return 0;
  }
  v16 = sub_100F4E2BC(a1, v7);
  if (!v16)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#CLEU,createAESEncryptedDataAndKey,failed to create AES encrypted data", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_11;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    LOWORD(v24[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createAESEncryptedDataAndKey,failed to create AES encrypted data", v24, 2, v24[0]);
    goto LABEL_45;
  }
  v14 = v16;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102194D30);
  v17 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLEU,createAESEncryptedDataAndKey,successfully created AES key and encrypted data", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    LOWORD(v24[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEU,createAESEncryptedDataAndKey,successfully created AES key and encrypted data", v24, 2);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyUtilities::createAESEncryptedDataAndKey(NSData *, int32_t, NSData **)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  *a3 = v7;
  return v14;
}

id sub_100F4E2BC(void *a1, void *a2)
{
  id v4;
  id v5;
  int v6;
  unsigned int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint8_t buf[4];
  unsigned int v28;

  if (!a1 || !a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#CLEU,createAESEncryptedData,data and/or key pointer are nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    LOWORD(v25) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createAESEncryptedData,data and/or key pointer are nil", &v25, 2);
LABEL_48:
    v22 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyUtilities::createAESEncryptedData(NSData *, NSData *)", "%s\n", v11);
    if (v22 != buf)
      free(v22);
    return 0;
  }
  if (objc_msgSend(a2, "length") != (id)16 && objc_msgSend(a2, "length") != (id)32)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v28 = objc_msgSend(a2, "length");
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#CLEU,createAESEncryptedData,unsupported AES key length,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v21 = qword_1022A0088;
    v25 = 67240192;
    v26 = objc_msgSend(a2, "length");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 16, "#CLEU,createAESEncryptedData,unsupported AES key length,%{public}d", &v25, 8);
    goto LABEL_48;
  }
  v4 = objc_msgSend(a1, "length");
  v5 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", (((_QWORD)v4 << 32) + 0x2000000000) >> 32);
  v6 = SecRandomCopyBytes(kSecRandomDefault, 0x10uLL, objc_msgSend(v5, "mutableBytes"));
  if (v6)
  {
    v7 = v6;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#CLEU,createAESEncryptedData,failed to generate AES IV,error,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_28;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v25 = 67240192;
    v26 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createAESEncryptedData,failed to generate AES IV,error,%{public}d", &v25, 8);
LABEL_53:
    v23 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyUtilities::createAESEncryptedData(NSData *, NSData *)", "%s\n", v9);
    if (v23 != buf)
      free(v23);
LABEL_28:

    return 0;
  }
  v12 = (char *)objc_msgSend(v5, "mutableBytes") + 16;
  v13 = CCCryptorGCMOneshotEncrypt(0, objc_msgSend(a2, "bytes"), objc_msgSend(a2, "length"), objc_msgSend(v5, "mutableBytes"), 16, 0, 0, objc_msgSend(a1, "bytes"), (int)v4, v12, &v12[(int)v4], 16);
  if (v13)
  {
    v14 = v13;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLEU,createAESEncryptedData,failed to encrypt data,error,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_28;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v25 = 67240192;
    v26 = v14;
    LODWORD(v24) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createAESEncryptedData,failed to encrypt data,error,%{public}d", &v25, v24);
    goto LABEL_53;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102194D30);
  v18 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#CLEU,createAESEncryptedData,successfully encrypted data", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    LOWORD(v25) = 0;
    LODWORD(v24) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#CLEU,createAESEncryptedData,successfully encrypted data", &v25, v24);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyUtilities::createAESEncryptedData(NSData *, NSData *)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return v5;
}

id sub_100F4E9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSMutableData *v7;
  uint64_t *v8;
  __SecCertificate *v9;
  __SecCertificate *v10;
  SecKeyRef v11;
  char *v12;
  unint64_t v13;
  NSMutableData *v14;
  void **v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void **v20;
  unsigned int v21;
  id v22;
  id v23;
  NSObject *v24;
  void **v25;
  void **v26;
  const char *v27;
  uint8_t *v28;
  NSObject *v29;
  void **v30;
  void **v31;
  const char *v32;
  CFDataRef v33;
  NSObject *v34;
  void **v35;
  unsigned int v36;
  id v37;
  id v38;
  uint64_t v39;
  void **v40;
  unsigned int v41;
  id v42;
  id v43;
  const char *v44;
  CFDataRef v45;
  id v46;
  id v47;
  NSMutableData *v48;
  id v49;
  void **v50;
  NSString *v51;
  uint64_t v52;
  void **v53;
  unsigned int v54;
  id v55;
  id v56;
  const char *v57;
  uint8_t *v58;
  NSObject *v59;
  const char *v61;
  uint8_t *v62;
  uint64_t v63;
  id v64;
  CFErrorRef error;
  void *__p[2];
  uint64_t v67;
  void *__dst[2];
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  _QWORD v72[2];
  int v73;
  void **v74;
  __int16 v75;
  unsigned int v76;
  __int16 v77;
  id v78;
  __int16 v79;
  id v80;
  SecKeyKeyExchangeParameter v81;
  NSMutableData *v82;
  uint8_t buf[4];
  void **v84;
  __int16 v85;
  unsigned int v86;
  __int16 v87;
  id v88;
  __int16 v89;
  id v90;

  v70 = a2;
  if (a3 && a4)
  {
    v7 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 40);
    -[NSMutableData appendData:](v7, "appendData:", a3);
    -[NSMutableData appendData:](v7, "appendData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v70, 8));
    v64 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", *(_QWORD *)(a1 + 24));
    v8 = *(uint64_t **)(a1 + 16);
    if (v8)
    {
      while (1)
      {
        if (*((char *)v8 + 39) < 0)
        {
          sub_100115CE4(__dst, (void *)v8[2], v8[3]);
        }
        else
        {
          *(_OWORD *)__dst = *((_OWORD *)v8 + 1);
          v69 = v8[4];
        }
        if (*((char *)v8 + 63) < 0)
        {
          sub_100115CE4(__p, (void *)v8[5], v8[6]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(v8 + 5);
          v67 = v8[7];
        }
        v9 = sub_100A54ACC((uint64_t *)__p);
        v10 = v9;
        if (!v9)
          break;
        v11 = SecCertificateCopyKey(v9);
        CFRelease(v10);
        if (!v11)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102194D30);
          v29 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            v30 = __dst;
            if (v69 < 0)
              v30 = (void **)__dst[0];
            *(_DWORD *)buf = 136446210;
            v84 = v30;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#CLEU,createWrappedKeyArray,couldn't extract partner key from cert so not creating wrapping key,partner,%{public}s", buf, 0xCu);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_75;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102194D30);
          v31 = __dst;
          if (v69 < 0)
            v31 = (void **)__dst[0];
          v73 = 136446210;
          v74 = v31;
          LODWORD(v63) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createWrappedKeyArray,couldn't extract partner key from cert so not creating wrapping key,partner,%{public}s", &v73, v63);
          v28 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyUtilities::createWrappedKeyArray(const PartnerCertMap &, uint64_t, NSData *, NSData *)", "%s\n", v32);
          goto LABEL_69;
        }
        v12 = -[NSMutableData length](v7, "length");
        v13 = HIBYTE(v69);
        if (v69 < 0)
          v13 = (unint64_t)__dst[1];
        v14 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", &v12[v13]);
        -[NSMutableData appendData:](v14, "appendData:", v7);
        if (v69 >= 0)
          v15 = __dst;
        else
          v15 = (void **)__dst[0];
        if (v69 >= 0)
          v16 = (void *)HIBYTE(v69);
        else
          v16 = __dst[1];
        -[NSMutableData appendData:](v14, "appendData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v15, v16));
        error = 0;
        v81 = kSecKeyKeyExchangeParameterSharedInfo;
        v82 = v14;
        v17 = (void *)SecKeyCreateEncryptedDataWithParameters(v11, kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM, a4, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v82, &v81, 1), &error);
        v18 = v17;
        if (error)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102194D30);
          v19 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            if (v69 >= 0)
              v20 = __dst;
            else
              v20 = (void **)__dst[0];
            v21 = -[__CFError code](error, "code");
            v22 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
            v23 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
            *(_DWORD *)buf = 136446978;
            v84 = v20;
            v85 = 1026;
            v86 = v21;
            v87 = 2082;
            v88 = v22;
            v89 = 2082;
            v90 = v23;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLEU,createWrappedKeyArray,failed to encrypt key for partner,%{public}s,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x26u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102194D30);
            v52 = qword_1022A0088;
            if (v69 >= 0)
              v53 = __dst;
            else
              v53 = (void **)__dst[0];
            v54 = -[__CFError code](error, "code");
            v55 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
            v56 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
            v73 = 136446978;
            v74 = v53;
            v75 = 1026;
            v76 = v54;
            v77 = 2082;
            v78 = v55;
            v79 = 2082;
            v80 = v56;
            LODWORD(v63) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v52, 16, "#CLEU,createWrappedKeyArray,failed to encrypt key for partner,%{public}s,error code,%{public}d,domain,%{public}s,reason,%{public}s", &v73, v63);
            v58 = (uint8_t *)v57;
            sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyUtilities::createWrappedKeyArray(const PartnerCertMap &, uint64_t, NSData *, NSData *)", "%s\n", v57);
            if (v58 != buf)
              free(v58);
          }
          CFRelease(v11);
        }
        else
        {
          v33 = SecKeyCopyExternalRepresentation(v11, &error);
          if (error)
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102194D30);
            v34 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
            {
              if (v69 >= 0)
                v35 = __dst;
              else
                v35 = (void **)__dst[0];
              v36 = -[__CFError code](error, "code");
              v37 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
              v38 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
              *(_DWORD *)buf = 136446978;
              v84 = v35;
              v85 = 1026;
              v86 = v36;
              v87 = 2082;
              v88 = v37;
              v89 = 2082;
              v90 = v38;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#CLEU,createWrappedKeyArray,failed to create DER data for partner public key,partner,%{public}s,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x26u);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_75;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102194D30);
            v39 = qword_1022A0088;
            if (v69 >= 0)
              v40 = __dst;
            else
              v40 = (void **)__dst[0];
            v41 = -[__CFError code](error, "code");
            v42 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
            v43 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
            v73 = 136446978;
            v74 = v40;
            v75 = 1026;
            v76 = v41;
            v77 = 2082;
            v78 = v42;
            v79 = 2082;
            v80 = v43;
            LODWORD(v63) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 16, "#CLEU,createWrappedKeyArray,failed to create DER data for partner public key,partner,%{public}s,error code,%{public}d,domain,%{public}s,reason,%{public}s", &v73, v63);
            v28 = (uint8_t *)v44;
            sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyUtilities::createWrappedKeyArray(const PartnerCertMap &, uint64_t, NSData *, NSData *)", "%s\n", v44);
            goto LABEL_69;
          }
          v45 = v33;
          v46 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", 32);
          CC_SHA256(-[__CFData bytes](v45, "bytes"), (CC_LONG)-[__CFData length](v45, "length"), (unsigned __int8 *)objc_msgSend(v46, "mutableBytes"));
          v47 = objc_msgSend(v46, "subdataWithRange:", 0, 2);
          CFRelease(v11);

          v48 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", (char *)objc_msgSend(v17, "length") + 2);
          -[NSMutableData appendData:](v48, "appendData:", v47);
          -[NSMutableData appendData:](v48, "appendData:", v17);
          v49 = -[NSMutableData base64EncodedStringWithOptions:](v48, "base64EncodedStringWithOptions:", 0);
          v71[0] = CFSTR("partner_ID");
          if (v69 >= 0)
            v50 = __dst;
          else
            v50 = (void **)__dst[0];
          v51 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v50);
          v71[1] = CFSTR("wrapped_key");
          v72[0] = v51;
          v72[1] = v49;
          objc_msgSend(v64, "addObject:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v72, v71, 2));
        }
LABEL_75:
        if (SHIBYTE(v67) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v69) < 0)
          operator delete(__dst[0]);
        v8 = (uint64_t *)*v8;
        if (!v8)
          return v64;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102194D30);
      v24 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v25 = __dst;
        if (v69 < 0)
          v25 = (void **)__dst[0];
        *(_DWORD *)buf = 136380675;
        v84 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#CLEU,createWrappedKeyArray,unable to convert cert data to SecCertificateRef for partner %{private}s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_75;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102194D30);
      v26 = __dst;
      if (v69 < 0)
        v26 = (void **)__dst[0];
      v73 = 136380675;
      v74 = v26;
      LODWORD(v63) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createWrappedKeyArray,unable to convert cert data to SecCertificateRef for partner %{private}s", &v73, v63);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyUtilities::createWrappedKeyArray(const PartnerCertMap &, uint64_t, NSData *, NSData *)", "%s\n", v27);
LABEL_69:
      if (v28 != buf)
        free(v28);
      goto LABEL_75;
    }
    return v64;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102194D30);
    v59 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "#CLEU,createWrappedKeyArray,hash of encrypted ADR data or key is nil so not computing wrapped keys", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102194D30);
      LOWORD(v73) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#CLEU,createWrappedKeyArray,hash of encrypted ADR data or key is nil so not computing wrapped keys", &v73, 2);
      v62 = (uint8_t *)v61;
      sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyUtilities::createWrappedKeyArray(const PartnerCertMap &, uint64_t, NSData *, NSData *)", "%s\n", v61);
      if (v62 != buf)
        free(v62);
    }
    return 0;
  }
}

void sub_100F4F594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void sub_100F4F618(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100F501A4(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  unint64_t v12;
  ALSCdmaCellTower *v13;
  ALSCellTower *v14;
  ALSCdmaEvdoTower *v15;
  ALSLteCellTower *v16;
  ALSScdmaCellTower *v17;
  ALSNr5GCellTower *v18;
  ALSWirelessAP *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    switch((v6 >> 3))
    {
      case 0x15u:
        v13 = objc_alloc_init(ALSCdmaCellTower);
        objc_msgSend(a1, "addCdmaCellTower:", v13);

        v21 = 0;
        v22 = 0;
        if (PBReaderPlaceMark(a2, &v21) && (sub_100EDC410((uint64_t)v13, a2) & 1) != 0)
          goto LABEL_40;
        return 0;
      case 0x16u:
        v15 = objc_alloc_init(ALSCdmaEvdoTower);
        objc_msgSend(a1, "addCdmaEvdoTower:", v15);

        v21 = 0;
        v22 = 0;
        if (!PBReaderPlaceMark(a2, &v21) || (sub_100EE6198((uint64_t)v15, a2) & 1) == 0)
          return 0;
        goto LABEL_40;
      case 0x17u:
        v16 = objc_alloc_init(ALSLteCellTower);
        objc_msgSend(a1, "addLteCellTower:", v16);

        v21 = 0;
        v22 = 0;
        if (!PBReaderPlaceMark(a2, &v21) || (sub_100F0B28C((uint64_t)v16, a2) & 1) == 0)
          return 0;
        goto LABEL_40;
      case 0x18u:
        v17 = objc_alloc_init(ALSScdmaCellTower);
        objc_msgSend(a1, "addScdmaCellTower:", v17);

        v21 = 0;
        v22 = 0;
        if (!PBReaderPlaceMark(a2, &v21) || (sub_1012FBA18((uint64_t)v17, a2) & 1) == 0)
          return 0;
        goto LABEL_40;
      case 0x19u:
        v18 = objc_alloc_init(ALSNr5GCellTower);
        objc_msgSend(a1, "addNr5GCellTower:", v18);

        v21 = 0;
        v22 = 0;
        if (!PBReaderPlaceMark(a2, &v21) || (sub_1014626D4((uint64_t)v18, a2) & 1) == 0)
          return 0;
        goto LABEL_40;
      default:
        if ((_DWORD)v12 != 2)
        {
          if ((_DWORD)v12 == 1)
          {
            v14 = objc_alloc_init(ALSCellTower);
            objc_msgSend(a1, "addCellTower:", v14);

            v21 = 0;
            v22 = 0;
            if (!PBReaderPlaceMark(a2, &v21) || (sub_100EFFFE8((uint64_t)v14, a2) & 1) == 0)
              return 0;
            goto LABEL_40;
          }
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
LABEL_41:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        v19 = objc_alloc_init(ALSWirelessAP);
        objc_msgSend(a1, "addWirelessAP:", v19);

        v21 = 0;
        v22 = 0;
        if (PBReaderPlaceMark(a2, &v21) && (sub_100F52C68((uint64_t)v19, a2) & 1) != 0)
        {
LABEL_40:
          PBReaderRecallMark(a2, &v21);
          goto LABEL_41;
        }
        return 0;
    }
  }
}

void sub_100F518E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 384; i != -48; i -= 48)
    sub_1006F0FB8((_QWORD *)(v1 + i));
  _Unwind_Resume(a1);
}

void sub_100F5191C(uint64_t a1, uint64_t a2)
{
  id *v3;
  id v4;

  *(_QWORD *)a1 = off_102194D60;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = (id *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  sub_10022142C((_QWORD *)(a1 + 56));
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 24) = -[CLSubHarvesterAltimeterIntersiloAdapter initWithHarvesterExternal:]([CLSubHarvesterAltimeterIntersiloAdapter alloc], "initWithHarvesterExternal:", a1);
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLBarometerCalibration"));
  *(_QWORD *)(a1 + 16) = v4;
  objc_msgSend(v4, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 24), objc_msgSend(*(id *)(a1 + 8), "silo"));
  objc_msgSend(*v3, "setDelegateEntityName:", "CLSubHarvesterAltimeterExternal");
  sub_100647FA8();
}

void sub_100F51AA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100261F44(v2);
  v5 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void sub_100F51AF8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLSubHarvesterAltimeterExternal::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102194DE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAltimeterExternal::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102194DE8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAltimeterExternal::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 6)
    *(_DWORD *)(a4 + 88) = *(_DWORD *)(a3 + 4);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100F51CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F51CD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102194D60;

  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100261F44(a1 + 56);
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_100F51D58(uint64_t a1)
{
  sub_100F51CD4(a1);
  operator delete();
}

uint64_t sub_100F51D7C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100F51D9C()
{
  sub_10071A314();
}

void sub_100F51E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSubHarvesterAltimeterExternal::onNetworkLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102194DE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAltimeterExternal::onNetworkLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102194DE8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAltimeterExternal::onNetworkLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a4 + 40) + 24))(*(_QWORD *)(a4 + 40), a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100F51FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F52008()
{
  return *sub_100FC2FA0();
}

id sub_100F52024(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_102194E08);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering for baro cal", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102194E08);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "registering for baro cal", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterAltimeterExternal::registerForBarometerCalibrationNotification()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 16), "registerClient:forNotification:", *(_QWORD *)(a1 + 24), 0);
}

id sub_100F521C0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_102194E08);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistering for baro cal", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102194E08);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "unregistering for baro cal", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterAltimeterExternal::unregisterForBarometerCalibrationNotification()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 16), "unregisterClient:forNotification:", *(_QWORD *)(a1 + 24), 0);
}

_BYTE *sub_100F5235C(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!result[72])
  {
    v1 = result;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102194E08);
    v2 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering for network location provider notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102194E08);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "registering for network location provider notification", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterAltimeterExternal::registerForNetworkLocationProviderNotification()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 6) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 6) + 8), 1, 0);
    result = objc_msgSend(*(id *)(*((_QWORD *)v1 + 6) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 6) + 8), 3, 0);
    v1[72] = 1;
  }
  return result;
}

_BYTE *sub_100F52524(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[72])
  {
    v1 = result;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102194E08);
    v2 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistering for network location provider notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102194E08);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "unregistering for network location provider notification", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterAltimeterExternal::unregisterForNetworkLocationProviderNotification()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 6) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 6) + 8), 1);
    result = objc_msgSend(*(id *)(*((_QWORD *)v1 + 6) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 6) + 8), 3);
    v1[72] = 0;
  }
  return result;
}

BOOL sub_100F526E0(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;

  *a2 = 0;
  if (!*((_BYTE *)sub_100FC2FA0() + 12))
    *a2 |= 4uLL;
  v4 = sub_10019CFA0();
  v5 = *a2;
  if (v4 != 1)
  {
    v5 |= 1uLL;
    *a2 = v5;
  }
  if (*(_DWORD *)(a1 + 88) != 2)
  {
    *a2 = v5 | 2;
    v5 = 1;
  }
  return v5 == 0;
}

void sub_100F52754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v7;
  id v8;
  _QWORD v9[5];
  void *__p;
  void *v11;
  uint64_t v12;
  _QWORD v13[4];
  int v14;

  v7 = *(void **)(a1 + 32);
  v11 = 0;
  v12 = 0;
  __p = 0;
  sub_10025EA00(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v8 = sub_100F52868((uint64_t)&__p);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100F529E4;
  v13[3] = &unk_102194E58;
  v14 = a5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100F52918;
  v9[3] = &unk_102145848;
  v9[4] = a1;
  objc_msgSend(v7, "fetchQueryLocationsForWifis:useCache:piggyback:config:withReply:", v8, 1, 1, objc_msgSend(v13, "copy"), v9);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_100F5284C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100F52868(uint64_t a1)
{
  id v1;
  _QWORD v3[4];
  void *__p;
  void *v5;
  uint64_t v6;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_100F52994;
  v3[3] = &unk_102194E28;
  v5 = 0;
  v6 = 0;
  __p = 0;
  sub_10025EA00(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v1 = objc_msgSend(v3, "copy");
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_100F528FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F52918(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
}

uint64_t sub_100F5292C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
}

void sub_100F5293C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F52968(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

_QWORD *sub_100F52994@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10025EA00(a2, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3);
}

_QWORD *sub_100F529B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return sub_10025EA00(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
}

void sub_100F529CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t sub_100F529E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_100F52C68(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  ALSLocation *v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void *String;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  _QWORD v26[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((int)(v6 >> 3) > 20)
    {
      if ((_DWORD)v12 == 21)
      {
        v20 = 0;
        v21 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v16 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0)
            goto LABEL_47;
          v20 += 7;
          v9 = v21++ >= 9;
          if (v9)
          {
            LODWORD(v16) = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_47:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_49:
        v25 = 8;
      }
      else
      {
        if ((_DWORD)v12 != 22)
        {
LABEL_40:
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v14 = 0;
        v15 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
          v16 |= (unint64_t)(v18 & 0x7F) << v14;
          if ((v18 & 0x80) == 0)
            goto LABEL_43;
          v14 += 7;
          v9 = v15++ >= 9;
          if (v9)
          {
            LODWORD(v16) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_45:
        v25 = 32;
      }
      *(_DWORD *)(a1 + v25) = v16;
    }
    else if ((_DWORD)v12 == 1)
    {
      String = (void *)PBReaderReadString(a2);

      *(_QWORD *)(a1 + 24) = String;
    }
    else
    {
      if ((_DWORD)v12 != 2)
        goto LABEL_40;
      v13 = objc_alloc_init(ALSLocation);

      *(_QWORD *)(a1 + 16) = v13;
      v26[0] = 0;
      v26[1] = 0;
      if (!PBReaderPlaceMark(a2, v26) || (sub_100F02DFC((uint64_t)v13, a2) & 1) == 0)
        return 0;
      PBReaderRecallMark(a2, v26);
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

_QWORD *sub_100F53484(_QWORD *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  _QWORD *v25;

  v8 = sub_101105B78((uint64_t)a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = off_102194E88;
  *(_BYTE *)(v8 + 192) = 0;
  v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonFullAccuracySession(ctor) #clfas", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102194F10);
  v10 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = a1[2];
    *(_DWORD *)buf = 68289794;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2114;
    v23 = v11;
    v24 = 2050;
    v25 = a1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonFullAccuracySession(ctor) #clfas\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x30u);
  }
  v12 = a1[3];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100F53658;
  v14[3] = &unk_10214A578;
  v14[4] = a1;
  sub_1007C9E5C(v12, (uint64_t)v14);
  a1[22] = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
  sub_100F538B8((uint64_t)a1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_100F5363C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  uint64_t v15;

  os_activity_scope_leave(&state);
  sub_10110619C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100F53658(uint64_t a1, const void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  NSObject *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a2 + 24))(a2) != 5)
    return 0;
  v4 = objc_msgSend(*(id *)(v3 + 16), "isEqual:", sub_100026CC8((uint64_t)a2));
  if (!v4 || v5 == 0)
    return 0;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102194F30);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
    v10 = *(_QWORD *)(v3 + 16);
    v14 = 68289794;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1026;
    v19 = v9;
    v20 = 2114;
    v21 = v10;
    v22 = 2050;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clfas consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v14, 0x2Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102194F30);
  }
  v11 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v12 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
    v13 = *(_QWORD *)(v3 + 16);
    v14 = 68289794;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1026;
    v19 = v12;
    v20 = 2114;
    v21 = v13;
    v22 = 2050;
    v23 = v3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clfas consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#clfas consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v14, 0x2Cu);
  }
  return 1;
}

void sub_100F538B8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  __int128 __p;
  uint64_t v14;
  _BYTE buf[28];
  __int16 v16;
  uint64_t v17;

  if (sub_1011085C4(a1))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102194F10);
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v3;
      v16 = 2050;
      v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clfas trying WIU #AutoPrompt-ing\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
    sub_101108720(a1);
  }
  sub_101108804((id *)a1);
  v4 = (unint64_t)objc_msgSend(*(id *)(a1 + 40), "diagnosticMask");
  v5 = objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult") != 1
    && objc_msgSend(*(id *)(a1 + 40), "registrationResult") != 8
    && objc_msgSend(*(id *)(a1 + 40), "registrationResult") != 0;
  v6 = objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 12);
  v7 = (v4 >> 11) & 1;
  if (!(((sub_1011060EC(a1) || v5) | v6) & 1 | (v4 >> 11) & 1))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102194F10);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v9;
      v16 = 2050;
      v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clfas trying FullAccuracy Prompt\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
    *(_BYTE *)(a1 + 192) = 1;
    if (!sub_101107BE4(a1, 9))
    {
      v10 = *(void **)(a1 + 176);
      if (v10)
        sub_1015A2E04(buf, (char *)objc_msgSend(v10, "UTF8String"));
      else
        sub_1015A2E04(buf, "");
      v11 = objc_msgSend(*(id *)(a1 + 32), "silo");
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3321888768;
      v12[2] = sub_100F54160;
      v12[3] = &unk_1021314A8;
      v12[4] = a1;
      if ((buf[23] & 0x80000000) != 0)
      {
        sub_100115CE4(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        __p = *(_OWORD *)buf;
        v14 = *(_QWORD *)&buf[16];
      }
      objc_msgSend(v11, "async:", v12);
      if (SHIBYTE(v14) < 0)
        operator delete((void *)__p);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
  }
  if (*(_BYTE *)(a1 + 192) && v6 | v7)
    *(_BYTE *)(a1 + 192) = 0;
  sub_10110883C((_QWORD *)a1);
}

void sub_100F53BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F53C20(_QWORD *a1)
{
  *a1 = off_102194E88;
  sub_1011078A4((uint64_t)a1, 5);
  return sub_10110619C((uint64_t)a1);
}

void sub_100F53C5C(_QWORD *a1)
{
  sub_100F53C20(a1);
  operator delete();
}

void sub_100F53C80(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44)
      goto LABEL_7;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(_BYTE *)(a1 + 48) = 1;
    return;
  }
LABEL_7:
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102194F10);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = CLConnectionMessage::name(*a2);
    v9 = *(char *)(v8 + 23) >= 0 ? (uint64_t *)v8 : *(uint64_t **)v8;
    v14 = 68289794;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v7;
    v20 = 2050;
    v21 = a1;
    v22 = 2082;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #clfas received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102194F10);
  }
  v10 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v12 + 23) >= 0)
      v13 = v12;
    else
      v13 = (uint64_t *)*v12;
    v14 = 68289794;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v11;
    v20 = 2050;
    v21 = a1;
    v22 = 2082;
    v23 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning #clfas received unhandled message", "{\"msg%{public}.0s\":\"#Warning #clfas received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
  }
}

uint64_t sub_100F53EC4()
{
  return 5;
}

uint64_t sub_100F53ECC()
{
  return 14359;
}

void sub_100F53ED4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102194F10);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v6 = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v3;
    v12 = 2050;
    v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clfas authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102194F10);
  }
  v4 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v5;
    v12 = 2050;
    v13 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clfas authContext has changed", "{\"msg%{public}.0s\":\"#clfas authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
  }
  sub_100F538B8(a1);
}

uint64_t sub_100F54080(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_100F54088(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 176);
  v3[1] = CFSTR("SDKAtLeast2024");
  v4[0] = v1;
  v3[0] = CFSTR("kCLConnectionMessagePurposeKey");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

BOOL sub_100F54118(uint64_t a1)
{
  return (objc_msgSend(*(id *)(a1 + 40), "diagnosticMask") & 0x800) != 0
      || objc_msgSend(*(id *)(a1 + 40), "registrationResult") == 2;
}

uint64_t sub_100F54158(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192);
}

void sub_100F54160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p[2];
  uint64_t v4;
  _DWORD v5[18];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 56);
  }
  sub_1007F5908((uint64_t)v5, 9, v2, 0, (__int128 *)__p);
  sub_101107F88(v1, v5, 0);
  sub_100235568((uint64_t)v5);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_100F541F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100235568((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F54220(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100F5424C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100F54278(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  BOOL v8;

  v4 = (uint64_t *)(a1 + 672);
  if (a2)
    v5 = sub_1008870F8(v4, a3);
  else
    v5 = sub_100887390(v4, a3);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v8 = v5;
    (*(void (**)(uint64_t, BOOL *))(*(_QWORD *)v6 + 48))(v6, &v8);
  }
  return 1;
}

double sub_100F542DC(_QWORD *a1, int a2, __n128 *a3)
{
  double result;

  switch(a2)
  {
    case 0:
      *(_QWORD *)&result = sub_100F54334(a1 + 7, a3).n128_u64[0];
      break;
    case 1:
      *(_QWORD *)&result = sub_100F546F4(a1 + 47, (uint64_t)a3).n128_u64[0];
      break;
    case 2:
      *(_QWORD *)&result = sub_100F54A94(a1 + 27, a3).n128_u64[0];
      break;
    case 3:
      *(_QWORD *)&result = sub_100F54E30(a1 + 67, a3).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

__n128 sub_100F54334(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F543E0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_100F543E0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F546A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_100F546F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F54780(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_100F54780(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F54A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_100F54A94(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F54B1C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100F54B1C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F54DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_100F54E30(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F54EDC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_100F54EDC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F551A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F551F0(uint64_t result, char a2, double a3, double a4)
{
  *(double *)result = a3;
  *(double *)(result + 8) = a4;
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t sub_100F551FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

__n128 sub_100F55204(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;

  *(_OWORD *)a1 = *a2;
  result = *a3;
  *(__n128 *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

void sub_100F55220(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a1[6];
  v4 = (uint64_t)(a1 + 6);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (void **)(v4 - 16);
    v11 = *(_QWORD *)(v4 - 16);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)sub_1002596A8(v4, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v18 = &v16[24 * v15];
    v19 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v19;
    v9 = v17 + 24;
    v21 = (char *)a1[4];
    v20 = (char *)a1[5];
    if (v20 != v21)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *(v17 - 8) = *(v20 - 8);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*v10;
    }
    a1[4] = v17;
    a1[5] = v9;
    a1[6] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 24);
  }
  a1[5] = v9;
}

BOOL sub_100F55348(double *a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a2 + 4);
  if (v2 <= *a1 && v2 >= a1[2] && (v3 = *(double *)(a2 + 12), v3 >= a1[1]))
    return v3 <= a1[3];
  else
    return 0;
}

uint64_t sub_100F5538C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_100F55394@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_100263E50((uint64_t)v14);
  sub_100263F7C(&v15, (uint64_t)"Market, Bounds", 14);
  v4 = sub_100263F7C(&v15, (uint64_t)", nwLat, ", 9);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 13;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v5 - 24) + 16) = 8;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(&v15, (uint64_t)", nwLon, ", 9);
  v7 = *v6;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 13;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 16) = 8;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(&v15, (uint64_t)", seLat, ", 9);
  v9 = *v8;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 13;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(v9 - 24) + 16) = 8;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v8, a1[2]);
  v10 = sub_100263F7C(&v15, (uint64_t)", seLon, ", 9);
  v11 = *v10;
  *(uint64_t *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 13;
  *(uint64_t *)((char *)v10 + *(_QWORD *)(v11 - 24) + 16) = 8;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v10, a1[3]);
  std::stringbuf::str(a2, v16);
  *(_QWORD *)((char *)v14
  v15 = v12;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf(v16);
  return std::ios::~ios(&v18);
}

void sub_100F555B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F555DC(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  *(_QWORD *)a1 = &off_102194F60;
  *(_BYTE *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_102195048);
  v4 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Enabled, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102195048);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "Enabled, %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLMotionStateFilter::CLMotionStateFilter(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return a1;
}

void sub_100F557B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1000F34E0(v1);
  _Unwind_Resume(a1);
}

__n128 sub_100F557CC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;

  if (*(_BYTE *)(a1 + 8))
  {
    v6 = (uint64_t **)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 32);
    if (v7
      && ((v8 = *v6, !*((_BYTE *)*v6 + 177))
       || (v9 = *v8,
           *(_QWORD *)(v9 + 8) = v8[1],
           *(_QWORD *)v8[1] = v9,
           *(_QWORD *)(a1 + 32) = v7 - 1,
           operator delete(v8),
           (v7 = *(_QWORD *)(a1 + 32)) != 0))
      && *((double *)*v6 + 3) > *(double *)(a2 + 8))
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102195048);
      v10 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (*v6)[3];
        v12 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134218240;
        v37 = v11;
        v38 = 2048;
        v39 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Time went backwards: Before - %f, Current - %f.  Clearing buffers and ignoring current entry.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_102195048);
        v27 = (*v6)[3];
        v28 = *(_QWORD *)(a2 + 8);
        v32 = 134218240;
        v33 = v27;
        v34 = 2048;
        v35 = v28;
        LODWORD(v31) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#Warning Time went backwards: Before - %f, Current - %f.  Clearing buffers and ignoring current entry.", COERCE_DOUBLE(&v32), v31);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "std::vector<CLMotionStateFilter::MotionState> CLMotionStateFilter::insert(const CLMotionStateFilter::MotionState &)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      sub_1000F34E0(v6);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    else
    {
      v14 = operator new(0xB8uLL);
      v15 = *(_OWORD *)(a2 + 112);
      v14[7] = *(_OWORD *)(a2 + 96);
      v14[8] = v15;
      v16 = *(_OWORD *)(a2 + 144);
      v14[9] = *(_OWORD *)(a2 + 128);
      v14[10] = v16;
      v17 = *(_OWORD *)(a2 + 48);
      v14[3] = *(_OWORD *)(a2 + 32);
      v14[4] = v17;
      v18 = *(_OWORD *)(a2 + 80);
      v14[5] = *(_OWORD *)(a2 + 64);
      v14[6] = v18;
      v19 = *(_OWORD *)(a2 + 16);
      v14[1] = *(_OWORD *)a2;
      v14[2] = v19;
      *((_WORD *)v14 + 88) = 0;
      v20 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)v14 = v20;
      *((_QWORD *)v14 + 1) = v6;
      *(_QWORD *)(v20 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v14;
      *(_QWORD *)(a1 + 32) = v7 + 1;
      sub_100F55AF0(a1, (char **)a3);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v21 = operator new(0xA0uLL);
    *(_QWORD *)(a3 + 16) = v21 + 10;
    v22 = *(_OWORD *)(a2 + 112);
    v21[6] = *(_OWORD *)(a2 + 96);
    v21[7] = v22;
    v23 = *(_OWORD *)(a2 + 144);
    v21[8] = *(_OWORD *)(a2 + 128);
    v21[9] = v23;
    v24 = *(_OWORD *)(a2 + 48);
    v21[2] = *(_OWORD *)(a2 + 32);
    v21[3] = v24;
    v25 = *(_OWORD *)(a2 + 80);
    v21[4] = *(_OWORD *)(a2 + 64);
    v21[5] = v25;
    result = *(__n128 *)a2;
    v26 = *(_OWORD *)(a2 + 16);
    *v21 = *(_OWORD *)a2;
    v21[1] = v26;
    *(_QWORD *)a3 = v21;
    *(_QWORD *)(a3 + 8) = v21 + 10;
  }
  return result;
}

void sub_100F55AF0(uint64_t a1@<X0>, char **a2@<X8>)
{
  unint64_t v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_100078B88();
  if (v4 >= 0x12D)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102195048);
    v6 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134349312;
      v29 = v7;
      v30 = 2050;
      v31 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Excessive size detected, Begin Filter, Entries, %{public}lu, Time, %{public}lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102195048);
      v13 = *(_QWORD *)(a1 + 32);
      v22 = 134349312;
      v23 = v13;
      v24 = 2050;
      v25 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "Excessive size detected, Begin Filter, Entries, %{public}lu, Time, %{public}lf", &v22, 22);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "std::vector<CLMotionStateFilter::MotionState> CLMotionStateFilter::process()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  sub_100F55E88(a1);
  v8 = sub_100078B88();
  if (v4 >= 0x12D)
  {
    v9 = v8;
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102195048);
    v10 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = sub_100078B88();
      *(_DWORD *)buf = 134349568;
      v29 = v11;
      v30 = 2050;
      v31 = v12;
      v32 = 2050;
      v33 = v9 - v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Excessive size detected, End Filter, Entries, %{public}lu, Time, %{public}lf, Duration, %{public}.6lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102195048);
      v16 = qword_10229FCB8;
      v17 = *(_QWORD *)(a1 + 32);
      v18 = sub_100078B88();
      v22 = 134349568;
      v23 = v17;
      v24 = 2050;
      v25 = v18;
      v26 = 2050;
      v27 = v9 - v5;
      LODWORD(v21) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 17, "Excessive size detected, End Filter, Entries, %{public}lu, Time, %{public}lf, Duration, %{public}.6lf", &v22, v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "std::vector<CLMotionStateFilter::MotionState> CLMotionStateFilter::process()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  sub_100F55F30(a1, a2);
}

uint64_t sub_100F55E88(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];

  if (*(_QWORD *)(result + 32) >= 2uLL)
  {
    v1 = (_QWORD *)result;
    v2 = *(_QWORD *)(result + 16);
    v3 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8);
    while (v3 != v2)
    {
      if (*(_BYTE *)(v3 + 176))
        goto LABEL_6;
      if (*(_BYTE *)(v3 + 177))
      {
        v4 = sub_101935E84();
        return sub_100F55F30(v4);
      }
      sub_100F56A8C(v5, (uint64_t)(v1 + 2), v3, *(_QWORD *)(v3 + 8));
      result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v1 + 16))(v1, v5);
      if ((result & 1) != 0)
      {
        v2 = v1[2];
        v3 = *(_QWORD *)(v1[3] + 8);
      }
      else
      {
LABEL_6:
        v3 = *(_QWORD *)(v3 + 8);
      }
    }
  }
  return result;
}

void sub_100F55F30(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = a1 + 16;
  if (v3 != a1 + 16)
  {
    v6 = *(double *)(*(_QWORD *)(a1 + 16) + 24) + -75.0;
    do
    {
      v7 = v3;
      while (*(_BYTE *)(v7 + 176))
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (v7 == v4)
          return;
      }
      if (v7 == v4 || *(double *)(v7 + 24) >= v6)
        break;
      if (!*(_BYTE *)(v7 + 177))
      {
        v8 = (_OWORD *)(v7 + 16);
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v19 = *a2;
          v20 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - *a2) >> 5);
          v21 = v20 + 1;
          if (v20 + 1 > 0x199999999999999)
            sub_100259694();
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)v19) >> 5);
          if (2 * v22 > v21)
            v21 = 2 * v22;
          if (v22 >= 0xCCCCCCCCCCCCCCLL)
            v23 = 0x199999999999999;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)sub_100542E70((uint64_t)(a2 + 2), v23);
            v19 = *a2;
            v10 = a2[1];
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[160 * v20];
          v26 = *(_OWORD *)(v7 + 32);
          *(_OWORD *)v25 = *v8;
          *((_OWORD *)v25 + 1) = v26;
          v27 = *(_OWORD *)(v7 + 48);
          v28 = *(_OWORD *)(v7 + 64);
          v29 = *(_OWORD *)(v7 + 96);
          *((_OWORD *)v25 + 4) = *(_OWORD *)(v7 + 80);
          *((_OWORD *)v25 + 5) = v29;
          *((_OWORD *)v25 + 2) = v27;
          *((_OWORD *)v25 + 3) = v28;
          v30 = *(_OWORD *)(v7 + 112);
          v31 = *(_OWORD *)(v7 + 128);
          v32 = *(_OWORD *)(v7 + 160);
          *((_OWORD *)v25 + 8) = *(_OWORD *)(v7 + 144);
          *((_OWORD *)v25 + 9) = v32;
          *((_OWORD *)v25 + 6) = v30;
          *((_OWORD *)v25 + 7) = v31;
          if (v10 == v19)
          {
            v41 = &v24[160 * v20];
          }
          else
          {
            v33 = &v24[160 * v20];
            do
            {
              v34 = *((_OWORD *)v10 - 9);
              *((_OWORD *)v33 - 10) = *((_OWORD *)v10 - 10);
              *((_OWORD *)v33 - 9) = v34;
              v35 = *((_OWORD *)v10 - 8);
              v36 = *((_OWORD *)v10 - 7);
              v37 = *((_OWORD *)v10 - 5);
              *((_OWORD *)v33 - 6) = *((_OWORD *)v10 - 6);
              *((_OWORD *)v33 - 5) = v37;
              *((_OWORD *)v33 - 8) = v35;
              *((_OWORD *)v33 - 7) = v36;
              v38 = *((_OWORD *)v10 - 4);
              v39 = *((_OWORD *)v10 - 3);
              v40 = *((_OWORD *)v10 - 1);
              v41 = v33 - 160;
              *((_OWORD *)v33 - 2) = *((_OWORD *)v10 - 2);
              *((_OWORD *)v33 - 1) = v40;
              *((_OWORD *)v33 - 4) = v38;
              *((_OWORD *)v33 - 3) = v39;
              v10 -= 160;
              v33 -= 160;
            }
            while (v10 != v19);
          }
          v18 = v25 + 160;
          *a2 = v41;
          a2[1] = v25 + 160;
          a2[2] = &v24[160 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          v11 = *(_OWORD *)(v7 + 32);
          *(_OWORD *)v10 = *v8;
          *((_OWORD *)v10 + 1) = v11;
          v12 = *(_OWORD *)(v7 + 48);
          v13 = *(_OWORD *)(v7 + 64);
          v14 = *(_OWORD *)(v7 + 96);
          *((_OWORD *)v10 + 4) = *(_OWORD *)(v7 + 80);
          *((_OWORD *)v10 + 5) = v14;
          *((_OWORD *)v10 + 2) = v12;
          *((_OWORD *)v10 + 3) = v13;
          v15 = *(_OWORD *)(v7 + 112);
          v16 = *(_OWORD *)(v7 + 128);
          v17 = *(_OWORD *)(v7 + 160);
          *((_OWORD *)v10 + 8) = *(_OWORD *)(v7 + 144);
          *((_OWORD *)v10 + 9) = v17;
          *((_OWORD *)v10 + 6) = v15;
          *((_OWORD *)v10 + 7) = v16;
          v18 = v10 + 160;
        }
        a2[1] = v18;
        v3 = *(_QWORD *)(a1 + 24);
      }
      if (*(_BYTE *)(v3 + 176))
      {
        sub_1005E98AC(v4, (uint64_t *)v3, (uint64_t *)v7);
        *(_BYTE *)(v7 + 176) = 1;
        v3 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        *(_BYTE *)(v7 + 176) = 1;
      }
    }
    while (v3 != v4);
  }
}

void sub_100F5616C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F56190(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  int v11;
  __int16 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v6 = a1 + 16;
    v7 = *(_QWORD *)(a1 + 16);
    if (*(double *)(v7 + 24) <= a3)
      v8 = a3;
    else
      v8 = *(double *)(v7 + 24);
    if (*(_BYTE *)(v7 + 177))
    {
      *(double *)(v7 + 24) = v8;
    }
    else
    {
      v9 = *(_QWORD *)(v7 + 16);
      v19 = *(_OWORD *)(v7 + 128);
      v20 = *(_OWORD *)(v7 + 144);
      v21 = *(_OWORD *)(v7 + 160);
      v22 = *(_BYTE *)(v7 + 176);
      v15 = *(_OWORD *)(v7 + 64);
      v16 = *(_OWORD *)(v7 + 80);
      v17 = *(_OWORD *)(v7 + 96);
      v18 = *(_OWORD *)(v7 + 112);
      v13 = *(_OWORD *)(v7 + 32);
      v14 = *(_OWORD *)(v7 + 48);
      v11 = *(_DWORD *)(v7 + 178);
      v12 = *(_WORD *)(v7 + 182);
      v10 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v10 + 2) = v9;
      *((double *)v10 + 3) = v8;
      *((_OWORD *)v10 + 8) = v19;
      *((_OWORD *)v10 + 9) = v20;
      *((_OWORD *)v10 + 10) = v21;
      v10[176] = v22;
      *((_OWORD *)v10 + 4) = v15;
      *((_OWORD *)v10 + 5) = v16;
      *((_OWORD *)v10 + 6) = v17;
      *((_OWORD *)v10 + 7) = v18;
      *((_OWORD *)v10 + 2) = v13;
      *((_OWORD *)v10 + 3) = v14;
      v10[177] = 1;
      *(_DWORD *)(v10 + 178) = v11;
      *((_WORD *)v10 + 91) = v12;
      *(_QWORD *)v10 = v7;
      *((_QWORD *)v10 + 1) = v6;
      *(_QWORD *)(v7 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 32) = v4 + 1;
    }
    sub_100F55AF0(a1, (char **)a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

void sub_100F56328(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t i;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18[3];
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2[1] == *(_QWORD *)(*a2 + 8))
  {
    v16 = (uint64_t *)sub_101935FF0();
    sub_100F567A0(v16, v17);
    return;
  }
  sub_100F567A0(a2, &v25);
  v3 = v26;
  v4 = a2[1];
  v5 = *(_DWORD *)(v4 + 40);
  if (*(_DWORD *)(v26 + 40) == v5)
  {
    if (v26 != v27)
    {
      for (i = *(_QWORD *)(v26 + 8); i != v27; i = *(_QWORD *)(i + 8))
      {
        if (*(unsigned __int8 *)(i + 44) < *(unsigned __int8 *)(v3 + 44))
          v3 = i;
      }
    }
    v7 = *(unsigned __int8 *)(v3 + 44);
    v8 = (uint64_t *)a2[2];
    v9 = a2[1];
    if ((uint64_t *)v4 != v8)
    {
      v10 = *(_QWORD *)(v4 + 8);
      v9 = a2[1];
      if ((uint64_t *)v10 != v8)
      {
        v9 = a2[1];
        do
        {
          if (*(unsigned __int8 *)(v10 + 44) < *(unsigned __int8 *)(v9 + 44))
            v9 = v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while ((uint64_t *)v10 != v8);
      }
    }
    if (v7 == *(unsigned __int8 *)(v9 + 44))
    {
      v11 = *a2;
LABEL_17:
      sub_1005E98AC(v11, (uint64_t *)v4, v8);
      return;
    }
  }
  if (v5 == 32 || (*(_DWORD *)(v4 + 40) & 0x70) != 0)
  {
    sub_100F56860((uint64_t **)a2, (uint64_t)&stru_102194F98, &v25);
    if (v26 != *(_QWORD *)(v25 + 8) && *(_QWORD *)(v27 + 8) != v25)
    {
      sub_100F567A0(&v25, &v22);
      if (*(_DWORD *)(v23 + 40) != 32 && (*(_DWORD *)(v23 + 40) & 0x70) == 0)
      {
        sub_100F567CC(&v25, &v19);
        v15 = *(_DWORD *)(v20 + 40);
        if (v15 != 32 && (v15 & 0x70) == 0)
        {
          sub_100F567A0(&v25, &v19);
          sub_100F56860(&v19, (uint64_t)&stru_102194FF8, &v22);
          sub_100F567CC(&v25, v18);
          sub_100F56860(v18, (uint64_t)&stru_102194FF8, &v19);
          if (*(double *)(v24 + 24) - *(double *)(v23 + 24) > 10.0)
          {
            v4 = v26;
            v8 = (uint64_t *)v27;
            if (*(double *)(v27 + 24) - *(double *)(v26 + 24) < 5.0
              && *(double *)(v21 + 24) - *(double *)(v20 + 24) > 10.0)
            {
              goto LABEL_55;
            }
          }
        }
      }
    }
    v5 = *(_DWORD *)(a2[1] + 40);
  }
  if ((v5 & 0x7300) != 0)
  {
    sub_100F56860((uint64_t **)a2, (uint64_t)&stru_102194FB8, &v25);
    if (v26 != *(_QWORD *)(v25 + 8) && *(_QWORD *)(v27 + 8) != v25)
    {
      sub_100F567A0(&v25, &v22);
      if ((*(_BYTE *)(v23 + 41) & 0x73) == 0)
      {
        sub_100F567CC(&v25, &v19);
        if ((*(_DWORD *)(v20 + 40) & 0x7300) == 0)
        {
          sub_100F567A0(&v25, &v19);
          sub_100F56860(&v19, (uint64_t)&stru_102194FD8, &v22);
          sub_100F567CC(&v25, v18);
          sub_100F56860(v18, (uint64_t)&stru_102194FD8, &v19);
          if (*(double *)(v24 + 24) - *(double *)(v23 + 24) > 25.0)
          {
            v4 = v26;
            v8 = (uint64_t *)v27;
            if (*(double *)(v27 + 24) - *(double *)(v26 + 24) < 20.0
              && *(double *)(v21 + 24) - *(double *)(v20 + 24) > 25.0)
            {
              goto LABEL_55;
            }
          }
        }
      }
    }
    v5 = *(_DWORD *)(a2[1] + 40);
  }
  if ((v5 & 0x7300) != 0)
    goto LABEL_45;
  sub_100F56860((uint64_t **)a2, (uint64_t)&stru_102194FD8, &v25);
  if (v26 != *(_QWORD *)(v25 + 8) && *(_QWORD *)(v27 + 8) != v25)
  {
    sub_100F567A0(&v25, &v22);
    sub_100F567CC(&v25, &v19);
    if ((*(_BYTE *)(v23 + 41) & 0x73) != 0)
    {
      v4 = v26;
      v8 = (uint64_t *)v27;
      if (*(double *)(v27 + 24) - *(double *)(v26 + 24) < 15.0 && (*(_BYTE *)(v20 + 41) & 0x73) != 0)
      {
LABEL_55:
        v11 = v25;
        goto LABEL_17;
      }
    }
  }
  v5 = *(_DWORD *)(a2[1] + 40);
LABEL_45:
  if (v5 == 16 || v5 == 4)
  {
    sub_100F56860((uint64_t **)a2, (uint64_t)&stru_102195018, &v25);
    if (v26 != *(_QWORD *)(v25 + 8) && *(_QWORD *)(v27 + 8) != v25)
    {
      sub_100F567A0(&v25, &v22);
      sub_100F567CC(&v25, &v19);
      if (*(_DWORD *)(v23 + 40) == 64)
      {
        v4 = v26;
        v8 = (uint64_t *)v27;
        if (*(double *)(v27 + 24) - *(double *)(v26 + 24) < 8.0 && *(_DWORD *)(v20 + 40) == 64)
          goto LABEL_55;
      }
    }
  }
}

void sub_100F567A0(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)a1[1];
  if (v2 == *(uint64_t **)(*a1 + 8))
  {
    v3 = sub_10193615C();
    sub_100F567CC(v3);
  }
  else
  {
    sub_100F56A8C(a2, *a1, *v2, (uint64_t)v2);
  }
}

void sub_100F567CC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;

  v2 = a1[2];
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 == *a1)
  {
    v4 = sub_1019362C0();
    sub_100F567F8(v4, v5);
  }
  else
  {
    sub_100F56A8C(a2, *a1, v2, v3);
  }
}

uint64_t sub_100F567F8(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t i;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v2 = a1 + 16;
  for (i = *(_QWORD *)(a1 + 24); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v2)
      return 0;
    if (!*(_BYTE *)(i + 176))
      break;
  }
  if (i == v2 || *(_BYTE *)(i + 177))
    return 0;
  v5 = *(_OWORD *)(i + 32);
  *a2 = *(_OWORD *)(i + 16);
  a2[1] = v5;
  v6 = *(_OWORD *)(i + 48);
  v7 = *(_OWORD *)(i + 64);
  v8 = *(_OWORD *)(i + 96);
  a2[4] = *(_OWORD *)(i + 80);
  a2[5] = v8;
  a2[2] = v6;
  a2[3] = v7;
  v9 = *(_OWORD *)(i + 112);
  v10 = *(_OWORD *)(i + 128);
  v11 = *(_OWORD *)(i + 160);
  a2[8] = *(_OWORD *)(i + 144);
  a2[9] = v11;
  a2[6] = v9;
  a2[7] = v10;
  return 1;
}

void sub_100F56860(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a1;
  v7 = a1[1];
  v8 = (uint64_t *)(*a1)[1];
  if (v8 != v7)
  {
    while ((*(unsigned int (**)(uint64_t, uint64_t))(a2 + 16))(a2, *v7 + 16))
    {
      v7 = (uint64_t *)*v7;
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
    v6 = *a1;
  }
  v9 = (uint64_t)a1[2];
  v10 = *v6;
  if (*v6 != v9)
  {
    while (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v9 + 16) & 1) != 0)
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v10)
        goto LABEL_11;
    }
    v10 = v9;
LABEL_11:
    v6 = *a1;
  }
  sub_100F56A8C(a3, (uint64_t)v6, (uint64_t)v7, v10);
}

BOOL sub_100F56918(id a1, const void *a2)
{
  return ((*((_DWORD *)a2 + 6) - 16) < 0x31) & (0x1000000010001uLL >> (*((_BYTE *)a2 + 24) - 16));
}

BOOL sub_100F5693C(id a1, const void *a2)
{
  int v2;
  BOOL result;

  v2 = *((_DWORD *)a2 + 6);
  result = 1;
  if (v2 > 4095)
  {
    if (v2 == 4096 || v2 == 0x2000 || v2 == 12288)
      return result;
    return 0;
  }
  if (v2 != 256 && v2 != 512)
    return 0;
  return result;
}

BOOL sub_100F56980(id a1, const void *a2)
{
  BOOL result;
  int v3;

  result = 0;
  v3 = *((_DWORD *)a2 + 6);
  if (v3 > 4095)
  {
    if (v3 == 4096 || v3 == 0x2000 || v3 == 12288)
      return result;
    return 1;
  }
  if (v3 != 256 && v3 != 512)
    return 1;
  return result;
}

BOOL sub_100F569C4(id a1, const void *a2)
{
  int v2;

  v2 = *((_DWORD *)a2 + 6);
  return (v2 & 0x70) == 0 && v2 != 32;
}

BOOL sub_100F569DC(id a1, const void *a2)
{
  int v2;

  v2 = *((_DWORD *)a2 + 6);
  return v2 == 4 || v2 == 16;
}

_QWORD *sub_100F569F0(_QWORD *a1)
{
  *a1 = &off_102194F60;
  sub_1000F34E0(a1 + 2);
  return a1;
}

void sub_100F56A20(_QWORD *a1)
{
  *a1 = &off_102194F60;
  sub_1000F34E0(a1 + 2);
  operator delete();
}

void sub_100F56A60(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_100F56A8C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  if (a3 == a4)
  {
    v4 = (void *)sub_10193642C();
    sub_100F56AB0(v4);
  }
}

void sub_100F56AB0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_100F56ADC()
{
  return os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100F56AF0()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3256), OS_LOG_TYPE_INFO);
}

BOOL sub_100F56B00()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3256));
}

_QWORD *sub_100F56B0C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10218CA60;
  v2 = (uint64_t)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 3));
  sub_100261F44(v2);
  return a1;
}

void sub_100F56B50(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_10218CA60;
  v1 = (uint64_t)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 3));
  sub_100261F44(v1);
  operator delete();
}

void sub_100F56BA4(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100F56BD0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v13;
  void **v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v26;
  id v27;
  NSObject *v28;
  id v29;
  NSObject *v30;
  id v31;
  NSObject *v32;
  id v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  os_activity_scope_state_s state;
  _BYTE buf[28];
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;

  v13 = sub_101105B78(a1, a2, a3, a5, a4, a6);
  *(_QWORD *)v13 = off_102195110;
  *(_BYTE *)(v13 + 176) = 0;
  *(_OWORD *)(v13 + 184) = 0u;
  v36 = v13 + 184;
  *(_OWORD *)(v13 + 232) = 0u;
  v14 = (void **)(v13 + 232);
  v35 = v13 + 208;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  v15 = _os_activity_create((void *)&_mh_execute_header, "CL: #monitor(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v15, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102195210);
  v34 = a7;
  v16 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(const char **)(a1 + 16);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    v44 = 2114;
    v45 = v17;
    v46 = 2050;
    v47 = (const char *)a1;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor(ctor)\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x30u);
  }
  v18 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v19 = objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitorNameKey"));
  v20 = objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitorProcessNameKey"));
  if (!v19)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v30 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v31 = objc_msgSend(0, "UTF8String");
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v31;
      v44 = 2082;
      v45 = "assert";
      v46 = 2081;
      v47 = "ledgerName";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor missing ledger name\", \"LedgerName\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
    }
    v32 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v33 = objc_msgSend(0, "UTF8String");
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v33;
      v44 = 2082;
      v45 = "assert";
      v46 = 2081;
      v47 = "ledgerName";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor missing ledger name", "{\"msg%{public}.0s\":\"#monitor missing ledger name\", \"LedgerName\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
    }
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      sub_1019365B4((uint64_t)objc_msgSend(0, "UTF8String"), (uint64_t)buf);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemonMonitor.mm", 39, "CLDaemonMonitor");
    goto LABEL_36;
  }
  v21 = v20;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 1;
  sub_1015A2E04(buf, (char *)objc_msgSend(v19, "UTF8String"));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)v36);
  *(_OWORD *)v36 = *(_OWORD *)buf;
  *(_QWORD *)(v36 + 16) = *(_QWORD *)&buf[16];
  sub_1015A2E04(buf, (char *)objc_msgSend(v21, "UTF8String"));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)v35);
  *(_OWORD *)v35 = *(_OWORD *)buf;
  *(_QWORD *)(v35 + 16) = *(_QWORD *)&buf[16];
  v22 = *(_QWORD *)(a1 + 24);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100F5741C;
  v37[3] = &unk_102195188;
  v37[4] = &v38;
  v37[5] = a1;
  sub_1007C9E5C(v22, (uint64_t)v37);
  v23 = sub_100F578A8(a1);
  if (*((_BYTE *)v39 + 24))
  {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("kCLMonitorLedgerNameKey"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v21, CFSTR("kCLMonitorLedgerProcessNameKey"));
    v24 = sub_1007D493C(a4, (uint64_t)a2);
    if (v24)
    {
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v24, CFSTR("kCLMonitorLedgerAccessKey"));
      sub_10089143C(v14, -[CLDaemonConditionLedger initWithConfiguration:clientKeyPath:authorizationContext:universe:hasClassCAccess:callbackHandler:]([CLDaemonConditionLedger alloc], "initWithConfiguration:clientKeyPath:authorizationContext:universe:hasClassCAccess:callbackHandler:", v18, a2, *(_QWORD *)(a1 + 40), a6, v34, v23));
      goto LABEL_13;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v26 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v27 = objc_msgSend(objc_msgSend(a2, "clientKey"), "UTF8String");
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v27;
      v44 = 2082;
      v45 = "assert";
      v46 = 2081;
      v47 = "clientStorageToken";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor client doesn't have the storage token\", \"clientKey\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
    }
    v28 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v29 = objc_msgSend(objc_msgSend(a2, "clientKey"), "UTF8String");
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v29;
      v44 = 2082;
      v45 = "assert";
      v46 = 2081;
      v47 = "clientStorageToken";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor client doesn't have the storage token", "{\"msg%{public}.0s\":\"#monitor client doesn't have the storage token\", \"clientKey\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
    }
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      sub_101936614((uint64_t)objc_msgSend(objc_msgSend(a2, "clientKey"), "UTF8String"), (uint64_t)buf);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemonMonitor.mm", 71, "CLDaemonMonitor");
LABEL_36:
    __break(1u);
  }
LABEL_13:
  sub_100F57978(a1);
  objc_msgSend(*v14, "updateCallbackHandler:", v23);
  sub_100F57BAC(a1);
  objc_msgSend(*v14, "validateClientMonitoringRecordsByIdenitifier:", objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitorLedger")));
  _Block_object_dispose(&v38, 8);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_100F57378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state)
{
  uint64_t v25;
  id *v26;

  os_activity_scope_leave(&state);
  sub_1004E591C(v26);
  if (*(char *)(v25 + 231) < 0)
    operator delete(*a13);
  if (*(char *)(v25 + 207) < 0)
    operator delete(*a14);
  sub_10110619C(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_100F5741C(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  void *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = sub_100F575EC(v4, a2);
  if ((_DWORD)v5)
  {
    if (a2)
    else
      v6 = 0;
    sub_100F57830((uint64_t)v6, &v11);
    sub_10089143C((void **)(v4 + 232), v11);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(v4 + 232) == 0;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
      v9 = *(_QWORD *)(v4 + 16);
      *(_DWORD *)buf = 68289794;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v8;
      v18 = 2114;
      v19 = v9;
      v20 = 2050;
      v21 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x2Cu);
    }

  }
  return v5;
}

void sub_100F575B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100F575EC(uint64_t a1, const void *a2)
{
  unsigned int v4;
  char *v5;
  char *v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  const void **v12;
  void **v13;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  const void **v19;
  void **v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  void *v28[2];
  uint64_t v29;
  void *__p[2];
  uint64_t v31;

  v4 = objc_msgSend(*(id *)(a1 + 16), "isEqual:", sub_100026CC8((uint64_t)a2));
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a2 + 24))(a2) != 4)
  {
    v7 = 0;
    return v4 & v7;
  }
  v6 = v5;
  if (v5[207] < 0)
  {
    sub_100115CE4(__p, *((void **)v5 + 23), *((_QWORD *)v5 + 24));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v5 + 184);
    v31 = *((_QWORD *)v5 + 25);
  }
  v8 = *(unsigned __int8 *)(a1 + 207);
  if ((v8 & 0x80u) == 0)
    v9 = (void *)*(unsigned __int8 *)(a1 + 207);
  else
    v9 = *(void **)(a1 + 192);
  v10 = (void *)HIBYTE(v31);
  v11 = HIBYTE(v31);
  if (v31 < 0)
    v10 = __p[1];
  if (v9 == v10)
  {
    v12 = (const void **)(a1 + 184);
    if (v31 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v12, v13, *(_QWORD *)(a1 + 192)))
        goto LABEL_21;
    }
    else if (*(_BYTE *)(a1 + 207))
    {
      while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v13)
      {
        v12 = (const void **)((char *)v12 + 1);
        v13 = (void **)((char *)v13 + 1);
        if (!--v8)
          goto LABEL_24;
      }
      goto LABEL_21;
    }
LABEL_24:
    if (v6[231] < 0)
    {
      sub_100115CE4(v28, *((void **)v6 + 26), *((_QWORD *)v6 + 27));
    }
    else
    {
      *(_OWORD *)v28 = *((_OWORD *)v6 + 13);
      v29 = *((_QWORD *)v6 + 28);
    }
    v15 = *(unsigned __int8 *)(a1 + 231);
    if ((v15 & 0x80u) == 0)
      v16 = (void *)*(unsigned __int8 *)(a1 + 231);
    else
      v16 = *(void **)(a1 + 216);
    v17 = (void *)HIBYTE(v29);
    v18 = SHIBYTE(v29);
    if (v29 < 0)
      v17 = v28[1];
    if (v16 == v17)
    {
      v19 = (const void **)(a1 + 208);
      if (v29 >= 0)
        v20 = v28;
      else
        v20 = (void **)v28[0];
      if ((v15 & 0x80) != 0)
      {
        v7 = memcmp(*v19, v20, *(_QWORD *)(a1 + 216)) == 0;
        goto LABEL_48;
      }
      if (*(_BYTE *)(a1 + 231))
      {
        v21 = v15 - 1;
        do
        {
          v23 = *(unsigned __int8 *)v19;
          v19 = (const void **)((char *)v19 + 1);
          v22 = v23;
          v25 = *(unsigned __int8 *)v20;
          v20 = (void **)((char *)v20 + 1);
          v24 = v25;
          v27 = v21-- != 0;
          v7 = v22 == v24;
        }
        while (v22 == v24 && v27);
LABEL_48:
        if ((v18 & 0x80000000) == 0)
          goto LABEL_50;
        goto LABEL_49;
      }
      v7 = 1;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_50:
        if ((v31 & 0x8000000000000000) == 0)
          return v4 & v7;
        goto LABEL_22;
      }
    }
    else
    {
      v7 = 0;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
        goto LABEL_50;
    }
LABEL_49:
    operator delete(v28[0]);
    goto LABEL_50;
  }
LABEL_21:
  v7 = 0;
  if (v11 < 0)
LABEL_22:
    operator delete(__p[0]);
  return v4 & v7;
}

void sub_100F57814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100F57830@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;

  *a2 = 0;
  *a2 = *(id *)(a1 + 232);
  v3 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;

  return objc_msgSend(*(id *)(a1 + 240), "setNextFireDelay:", 1.79769313e308);
}

void sub_100F57880(_Unwind_Exception *a1)
{
  id *v1;

  sub_1004E591C(v1);
  _Unwind_Resume(a1);
}

id sub_100F578A8(uint64_t a1)
{
  uint64_t *p_shared_weak_owners;
  unint64_t v3;
  id v4;
  _QWORD v6[6];
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_10052D218(a1 + 56, &v8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_100F59F94;
  v6[3] = &unk_1021951C0;
  v6[4] = a1;
  v6[5] = v8;
  v7 = v9;
  if (v9)
  {
    p_shared_weak_owners = &v9->__shared_weak_owners_;
    do
      v3 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v3 + 1, (unint64_t *)p_shared_weak_owners));
  }
  v4 = objc_msgSend(v6, "copy");
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return v4;
}

void sub_100F57954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v16;
  std::__shared_weak_count *v18;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(exception_object);
}

id sub_100F57978(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[5];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  sub_101108804((id *)a1);
  v2 = *(void **)(a1 + 232);
  objc_msgSend(v2, "updateAuthorizationContext:", *(_QWORD *)(a1 + 40));
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102195230);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 16);
    objc_msgSend(*(id *)(a1 + 40), "registrationResult");
    v5 = objc_msgSend(*(id *)(a1 + 40), "registrationResult");
    *(_DWORD *)buf = 68289794;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v4;
    v16 = 2050;
    v17 = a1;
    v18 = 2050;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor managing monitored conditions\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"RegistrationResult\":%{public, location:CLClientRegistrationResult}lld}", buf, 0x30u);
  }
  if (objc_msgSend(objc_msgSend(v2, "allMonitoringRecordsByIdentifier"), "count") && sub_1011085C4(a1))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = v7;
      v16 = 2050;
      v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor manageMonitoredConditions trying #AutoPrompt\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
    sub_101108720(a1);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100F59FB4;
  v9[3] = &unk_1021951F0;
  v9[4] = a1;
  return objc_msgSend(objc_msgSend(v2, "allMonitoringRecordsByIdentifier"), "enumerateKeysAndObjectsUsingBlock:", v9);
}

id sub_100F57BAC(uint64_t a1)
{
  id v2;
  id result;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  id v14;
  __int128 v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  id v28;
  _BYTE v29[128];

  v2 = objc_msgSend(*(id *)(a1 + 232), "allMonitoringRecordsByIdentifier");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v18;
    *(_QWORD *)&v4 = 68289538;
    v15 = v4;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v7);
        v9 = objc_msgSend(v2, "objectForKey:", v8, v15);
        if (objc_msgSend(v9, "daemonState"))
        {
          v10 = objc_msgSend(v9, "daemonState");
          if (v10 != objc_msgSend(v9, "clientState"))
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102195230);
            v11 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              v12 = a1 + 184;
              if (*(char *)(a1 + 207) < 0)
                v12 = *(_QWORD *)(a1 + 184);
              v13 = objc_msgSend(v8, "UTF8String");
              *(_DWORD *)buf = v15;
              v22 = 0;
              v23 = 2082;
              v24 = "";
              v25 = 2082;
              v26 = v12;
              v27 = 2082;
              v28 = v13;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor needs to send a pending event to client\", \"monitor\":%{public, location:escape_only}s, \"identifier\":%{public, location:escape_only}s}", buf, 0x26u);
            }
            v14 = objc_msgSend(v9, "getMonitoringRecordToNotifyClient");
            v16 = 0;
            v16 = v14;
            sub_100F58E0C(a1, &v16, 16);

          }
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_100F57DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F57E1C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  void *v6;
  os_activity_scope_state_s v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  *(_QWORD *)a1 = off_102195110;
  v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #monitor(dtor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v8);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102195210);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 68289794;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "activity";
    v15 = 2114;
    v16 = v4;
    v17 = 2050;
    v18 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor(dtor)\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x30u);
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  sub_1011078A4(a1, v5);
  objc_msgSend(*(id *)(a1 + 240), "invalidate");

  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v6 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;

  os_activity_scope_leave(&v8);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  sub_10110619C(a1);
  return a1;
}

void sub_100F57FE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_100F58000(uint64_t a1)
{
  sub_100F57E1C(a1);
  operator delete();
}

NSDictionary *sub_100F58024(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[3];
  _QWORD v6[3];

  v5[0] = CFSTR("kCLConnectionMessageMonitorNameKey");
  v2 = (_QWORD *)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    v2 = (_QWORD *)*v2;
  v6[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v5[1] = CFSTR("kCLConnectionMessageMonitorProcessNameKey");
  v3 = (_QWORD *)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    v3 = (_QWORD *)*v3;
  v6[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v5[2] = CFSTR("SDKAtLeast2024");
  v6[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 3);
}

void sub_100F58100(uint64_t a1, CLConnectionMessage **a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSSet *v21;
  void *v22;
  void *DictionaryOfClasses;
  void *v24;
  _QWORD *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t *v41;
  uint64_t *v42;
  NSObject *v43;
  uint64_t *v44;
  id v45;
  id v46;
  NSObject *v47;
  uint64_t *v48;
  id v49;
  uint64_t v50;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  uint64_t *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  id v61;

  v3 = objc_alloc((Class)NSSet);
  v5 = objc_opt_class(CLMonitoringRecord, v4);
  v7 = objc_opt_class(CLMonitoringEvent, v6);
  v9 = objc_opt_class(NSDictionary, v8);
  v11 = objc_opt_class(NSString, v10);
  v13 = objc_opt_class(NSDate, v12);
  v15 = objc_opt_class(CLCircularGeographicCondition, v14);
  v17 = objc_opt_class(CLBeaconIdentityCondition, v16);
  v50 = objc_opt_class(CLMinimumAltitudeCondition, v18);
  v20 = a1;
  v21 = (NSSet *)objc_msgSend(v3, "initWithObjects:", v5, v7, v9, v11, v13, v15, v17, v50, objc_opt_class(CLCondition, v19), 0);
  v22 = *(void **)(a1 + 232);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v21);
  if (DictionaryOfClasses)
  {
    v24 = DictionaryOfClasses;
    v25 = (_QWORD *)CLConnectionMessage::name(*a2);
    v26 = *((char *)v25 + 23);
    if (v26 < 0)
    {
      if (v25[1] != 38)
        goto LABEL_21;
      v25 = (_QWORD *)*v25;
    }
    else if (v26 != 38)
    {
      goto LABEL_21;
    }
    if (!memcmp(v25, "Monitor/kCLConnectionMessageMonitorAdd", 0x26uLL))
    {
      if (sub_1011085C4(a1))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102195230);
        v43 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v44 = *(uint64_t **)(v20 + 16);
          *(_DWORD *)buf = 68289538;
          v53 = 0;
          v54 = 2082;
          v55 = "";
          v56 = 2114;
          v57 = v44;
          v58 = 2050;
          v59 = v20;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor add-record trying #AutoPrompt\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
        }
        sub_101108720(v20);
      }
      v45 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitorMonitoringRecordKey"));
      objc_msgSend(v22, "addMonitoringRecord:forIdentifier:", v45, objc_msgSend(v45, "identifier"));
      v46 = objc_msgSend(objc_msgSend(v22, "allMonitoringRecordsByIdentifier"), "objectForKey:", objc_msgSend(v45, "identifier"));
      sub_100F58830(v20, v46);
      if ((objc_msgSend(v46, "conditionLimitExceeded") & 1) != 0
        || (objc_msgSend(v46, "conditionUnsupported") & 1) != 0
        || objc_msgSend(v46, "persistenceUnavailable"))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102195210);
        v47 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v48 = *(uint64_t **)(v20 + 16);
          *(_DWORD *)buf = 68289795;
          v53 = 0;
          v54 = 2082;
          v55 = "";
          v56 = 2114;
          v57 = v48;
          v58 = 2050;
          v59 = v20;
          v60 = 2113;
          v61 = v46;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"error while adding #monitor record\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"record\":%{private, location:escape_only}@}", buf, 0x30u);
        }
        objc_msgSend(v22, "removeRecordFromMonitoringWithIdentifier:", objc_msgSend(v45, "identifier"));
      }
      goto LABEL_62;
    }
LABEL_21:
    v33 = (_QWORD *)CLConnectionMessage::name(*a2);
    v34 = *((char *)v33 + 23);
    if (v34 < 0)
    {
      if (v33[1] != 41)
        goto LABEL_27;
      v33 = (_QWORD *)*v33;
    }
    else if (v34 != 41)
    {
      goto LABEL_27;
    }
    if (!memcmp(v33, "Monitor/kCLConnectionMessageMonitorRemove", 0x29uLL))
    {
      objc_msgSend(v22, "removeRecordFromMonitoringWithIdentifier:", objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitorIdentifierKey")));
      goto LABEL_62;
    }
LABEL_27:
    v35 = (_QWORD *)CLConnectionMessage::name(*a2);
    v36 = *((char *)v35 + 23);
    if (v36 < 0)
    {
      if (v35[1] != 46)
      {
LABEL_33:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102195230);
        v37 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          v38 = CLConnectionMessage::name(*a2);
          v39 = *(char *)(v38 + 23) >= 0 ? v38 : *(_QWORD *)v38;
          *(_DWORD *)buf = 68289282;
          v53 = 0;
          v54 = 2082;
          v55 = "";
          v56 = 2082;
          v57 = (uint64_t *)v39;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor unsupported message received\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102195230);
        }
        v40 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v41 = (uint64_t *)CLConnectionMessage::name(*a2);
          if (*((char *)v41 + 23) >= 0)
            v42 = v41;
          else
            v42 = (uint64_t *)*v41;
          *(_DWORD *)buf = 68289282;
          v53 = 0;
          v54 = 2082;
          v55 = "";
          v56 = 2082;
          v57 = v42;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor unsupported message received", "{\"msg%{public}.0s\":\"#monitor unsupported message received\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
        goto LABEL_62;
      }
      v35 = (_QWORD *)*v35;
    }
    else if (v36 != 46)
    {
      goto LABEL_33;
    }
    if (memcmp(v35, "Monitor/kCLConnectionMessageMonitorUpdateEvent", 0x2EuLL))
      goto LABEL_33;
    v49 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitorEventKey"));
    objc_msgSend(v22, "updateClientEvent:forIdentifier:", v49, objc_msgSend(v49, "identifier"));
LABEL_62:
    objc_msgSend(v22, "refillAwaitingMonitoringConditions:", objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitorLedger")));
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102195230);
  v27 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    v28 = CLConnectionMessage::name(*a2);
    v29 = *(char *)(v28 + 23) >= 0 ? v28 : *(_QWORD *)v28;
    *(_DWORD *)buf = 68289282;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v56 = 2082;
    v57 = (uint64_t *)v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor received a wronly encoded message\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
  }
  v30 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v31 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v31 + 23) >= 0)
      v32 = v31;
    else
      v32 = (uint64_t *)*v31;
    *(_DWORD *)buf = 68289282;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v56 = 2082;
    v57 = v32;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor received a wronly encoded message", "{\"msg%{public}.0s\":\"#monitor received a wronly encoded message\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
}

void sub_100F58830(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;

  if (!sub_1011060EC(a1))
  {
    v4 = (id)sub_100F5997C(a1, a2);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289794;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = v6;
      v17 = 2050;
      v18 = a1;
      v19 = 1026;
      v20 = (int)v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor updating diagnosticMask\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"diagnosticMask\":%{public}d}", buf, 0x2Cu);
    }
    if (!objc_msgSend(a2, "daemonEvent"))
      objc_msgSend(a2, "updateDaemonEvent:", objc_msgSend(objc_alloc((Class)CLMonitoringEvent), "initWithIdentifier:refinement:state:date:diagnostics:", objc_msgSend(objc_msgSend(a2, "clientEvent"), "identifier"), 0, 0, +[NSDate now](NSDate, "now"), 0));
    if (objc_msgSend(objc_msgSend(a2, "daemonEvent"), "diagnosticMask") == v4)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289794;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2114;
        v16 = v8;
        v17 = 2050;
        v18 = a1;
        v19 = 1026;
        v20 = (int)v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor skip update - existing mask is same as new mask\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"diagnosticMask\":%{public}d}", buf, 0x2Cu);
      }
    }
    else
    {
      objc_msgSend(objc_msgSend(a2, "daemonEvent"), "updateDiagnosticMask:", v4);
      if ((objc_msgSend(a2, "conditionLimitExceeded") & 1) != 0
        || (objc_msgSend(a2, "persistenceUnavailable") & 1) != 0
        || objc_msgSend(a2, "conditionUnsupported"))
      {
        objc_msgSend(objc_msgSend(a2, "daemonEvent"), "updateMonitoringState:", 3);
      }
      v9 = objc_msgSend(a2, "getMonitoringRecordToNotifyClient");
      v10 = v9;
      sub_100F58E0C(a1, &v10, 0);

    }
  }
}

void sub_100F58B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_100F58B48(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  int v15;

  if (*(_BYTE *)(a1 + 48))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(unsigned __int8 *)(a1 + 48);
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor eligibleForDestructionUponDisconnection\", \"destroyUponDisconnection\":%{public}hhd}", (uint8_t *)&v8, 0x18u);
    }
    return *(_BYTE *)(a1 + 48) != 0;
  }
  else
  {
    v5 = objc_msgSend(*(id *)(a1 + 232), "isMonitoring");
    v4 = v5 ^ 1;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = v5;
      v14 = 1026;
      v15 = v5 ^ 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor eligibleForDestructionUponDisconnection\", \"isMonitoring\":%{public}hhd, \"isElibleForDestruction\":%{public}hhd}", (uint8_t *)&v8, 0x1Eu);
    }
  }
  return v4;
}

uint64_t sub_100F58D00()
{
  return 4;
}

uint64_t sub_100F58D08()
{
  return 13271;
}

id sub_100F58D10(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102195210);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v5[0] = 68289538;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2114;
    v9 = v3;
    v10 = 2050;
    v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v5, 0x26u);
  }
  return sub_100F57978(a1);
}

void sub_100F58E0C(uint64_t a1, void **a2, uint64_t a3)
{
  id v6;
  id v7;
  NSObject *v8;
  void **v9;
  id v10;
  _BOOL4 v11;
  int v12;
  void *v13;
  _QWORD v14[5];
  void *__p[2];
  uint64_t v16;
  uint64_t buf;
  _BYTE v18[10];
  __int16 v19;
  void **v20;
  __int16 v21;
  id v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  int v26;

  if (sub_1011060EC(a1))
  {
    if (!*(_BYTE *)(a1 + 176))
    {
      v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager"));
      v7 = objc_msgSend(*(id *)(a1 + 16), "legacyClientKey");
      objc_msgSend(v6, "launchApplication:requiringAuthForServiceMask:", v7, a3 | 0x80000);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 207) < 0)
        {
          sub_100115CE4(__p, *(void **)(a1 + 184), *(_QWORD *)(a1 + 192));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(a1 + 184);
          v16 = *(_QWORD *)(a1 + 200);
        }
        if (v16 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        v10 = objc_msgSend(v7, "UTF8String");
        v11 = sub_1011060EC(a1);
        v12 = *(unsigned __int8 *)(a1 + 176);
        buf = 68290050;
        *(_WORD *)v18 = 2082;
        *(_QWORD *)&v18[2] = "";
        v19 = 2082;
        v20 = v9;
        v21 = 2082;
        v22 = v10;
        v23 = 1026;
        v24 = v11;
        v25 = 1026;
        v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor launch app\", \"monitor\":%{public, location:escape_only}s, \"clientKey\":%{public, location:escape_only}s, \"IsDisconnected\":%{public}hhd, \"wasPreviouslyLaunched\":%{public}hhd}", (uint8_t *)&buf, 0x32u);
        if (SHIBYTE(v16) < 0)
          operator delete(__p[0]);
      }
      *(_QWORD *)(a1 + 240) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
      sub_10052D218(a1 + 56, &buf);
      v13 = *(void **)(a1 + 240);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100F59B84;
      v14[3] = &unk_10212ECA0;
      v14[4] = a1;
      objc_msgSend(v13, "setHandler:", v14);
      objc_msgSend(*(id *)(a1 + 240), "setNextFireDelay:", 600.0);
      *(_BYTE *)(a1 + 176) = 1;
      if (*(_QWORD *)v18)
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v18);
    }
  }
  else
  {
    sub_100F59BC0(a1, *a2, a3);

    *a2 = 0;
  }
}

void sub_100F59064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F5909C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;

  if (a4)
  {
    if (a2)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v11 = (_QWORD *)(a1 + 184);
        if (*(char *)(a1 + 207) < 0)
          v11 = (_QWORD *)*v11;
        v16 = 68290051;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2082;
        v21 = v11;
        v22 = 2082;
        v23 = objc_msgSend(a2, "UTF8String");
        v24 = 2049;
        v25 = a4;
        v26 = 2113;
        v27 = a3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor onConditionUpdate\", \"monitor\":%{public, location:escape_only}s, \"identifier\":%{public, location:escape_only}s, \"newDaemonState\":%{private, location:CLMonitoringState}lld, \"condition\":%{private, location:escape_only}@}", (uint8_t *)&v16, 0x3Au);
      }
      sub_100F59354(a1, a2, a3, a4, a5);
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v13 = (_QWORD *)(a1 + 184);
        if (*(char *)(a1 + 207) < 0)
          v13 = (_QWORD *)*v13;
        v16 = 68289539;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2082;
        v21 = v13;
        v22 = 2049;
        v23 = a4;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor identifier nil onConditionUpdate\", \"monitor\":%{public, location:escape_only}s, \"newDaemonState\":%{private, location:CLMonitoringState}lld}", (uint8_t *)&v16, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102195230);
      }
      v14 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v15 = (_QWORD *)(a1 + 184);
        if (*(char *)(a1 + 207) < 0)
          v15 = (_QWORD *)*v15;
        v16 = 68289539;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2082;
        v21 = v15;
        v22 = 2049;
        v23 = a4;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor identifier nil onConditionUpdate", "{\"msg%{public}.0s\":\"#monitor identifier nil onConditionUpdate\", \"monitor\":%{public, location:escape_only}s, \"newDaemonState\":%{private, location:CLMonitoringState}lld}", (uint8_t *)&v16, 0x26u);
      }
    }
  }
}

void sub_100F59354(uint64_t a1, void *a2, void *a3, id a4, uint64_t a5)
{
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  _QWORD *v15;
  NSObject *v16;
  _BOOL8 v17;
  id v18;
  _QWORD *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  _QWORD *v25;
  id v26;
  void *v27;
  id v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  id v32;
  id v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  _QWORD *v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;
  __int16 v51;
  id v52;
  __int16 v53;
  id v54;

  v10 = *(void **)(a1 + 232);
  v11 = objc_msgSend(objc_msgSend(v10, "allMonitoringRecordsByIdentifier"), "objectForKey:", a2);
  if (v11)
    v12 = sub_100F5997C(a1, v11);
  else
    v12 = 0;
  v13 = objc_msgSend(objc_alloc((Class)CLMonitoringEvent), "initWithIdentifier:refinement:state:date:diagnostics:", a2, a5, a4, +[NSDate now](NSDate, "now"), v12);
  if (!v11)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v16 = qword_1022A01D8;
    v17 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      v18 = v13;
      v19 = (_QWORD *)(a1 + 184);
      if (*(char *)(a1 + 207) < 0)
        v19 = (_QWORD *)*v19;
      *(_DWORD *)buf = 68289795;
      v42 = 0;
      v43 = 2082;
      v44 = "";
      v45 = 2082;
      v46 = v19;
      v47 = 2082;
      v48 = objc_msgSend(a2, "UTF8String");
      v49 = 2049;
      v50 = a4;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor no daemon monitoring record found\", \"monitor\":%{public, location:escape_only}s, \"identifier\":%{public, location:escape_only}s, \"newDaemonState\":%{private, location:CLMonitoringState}lld}", buf, 0x30u);
      v13 = v18;
    }
    v20 = sub_100F59A28(v17, a3, (uint64_t)v13);
    goto LABEL_31;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102195230);
  v14 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v39 = v13;
    v15 = (_QWORD *)(a1 + 184);
    if (*(char *)(a1 + 207) < 0)
      v15 = (_QWORD *)*v15;
    v21 = objc_msgSend(a2, "UTF8String");
    objc_msgSend(v11, "clientState");
    v22 = objc_msgSend(v11, "clientState");
    objc_msgSend(v11, "daemonState");
    *(_DWORD *)buf = 68290307;
    v42 = 0;
    v43 = 2082;
    v44 = "";
    v45 = 2082;
    v46 = v15;
    v47 = 2082;
    v48 = v21;
    v49 = 2049;
    v50 = v22;
    v51 = 2049;
    v52 = objc_msgSend(v11, "daemonState");
    v53 = 2049;
    v54 = a4;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor update record to send to client\", \"monitor\":%{public, location:escape_only}s, \"identifier\":%{public, location:escape_only}s, \"clientState\":%{private, location:CLMonitoringState}lld, \"daemonState\":%{private, location:CLMonitoringState}lld, \"newDaemonState\":%{private, location:CLMonitoringState}lld}", buf, 0x44u);
    v13 = v39;
  }
  if (a4
    && objc_msgSend(objc_msgSend(v11, "condition"), "isEqual:", a3)
    && objc_msgSend(v11, "daemonState") != a4)
  {
    objc_msgSend(v10, "updateDaemonEvent:forIdentifier:", v13, a2);
  }
  v23 = objc_msgSend(v11, "daemonState");
  if (v23 != objc_msgSend(v11, "clientState"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v24 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v25 = (_QWORD *)(a1 + 184);
      if (*(char *)(a1 + 207) < 0)
        v25 = (_QWORD *)*v25;
      v26 = objc_msgSend(a2, "UTF8String");
      *(_DWORD *)buf = 68289538;
      v42 = 0;
      v43 = 2082;
      v44 = "";
      v45 = 2082;
      v46 = v25;
      v47 = 2082;
      v48 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor condition update to client\", \"monitor\":%{public, location:escape_only}s, \"identifier\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v20 = objc_msgSend(v11, "getMonitoringRecordToNotifyClient");
LABEL_31:
    v27 = v20;
    v28 = v20;
    if (objc_msgSend(objc_msgSend(v27, "lastEvent"), "state"))
    {
      v40 = v28;
      sub_100F58E0C(a1, &v40, 524304);

    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102195230);
      v29 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v30 = (_QWORD *)(a1 + 184);
        if (*(char *)(a1 + 207) < 0)
          v30 = (_QWORD *)*v30;
        v31 = *(_QWORD **)(a1 + 16);
        v32 = objc_msgSend(a2, "UTF8String");
        objc_msgSend(v11, "daemonState");
        v33 = objc_msgSend(v11, "daemonState");
        *(_DWORD *)buf = 68290051;
        v42 = 0;
        v43 = 2082;
        v44 = "";
        v45 = 2114;
        v46 = v31;
        v47 = 2082;
        v48 = v30;
        v49 = 2082;
        v50 = v32;
        v51 = 2049;
        v52 = v33;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor #Warning oh wait, lastEvent state is unknown so not actually sending this condition update to the client\", \"ClientKeyPath\":%{public, location:escape_only}@, \"monitor\":%{public, location:escape_only}s, \"identifier\":%{public, location:escape_only}s, \"daemonState\":%{private, location:CLMonitoringState}lld}", buf, 0x3Au);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102195230);
      }
      v34 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v35 = (_QWORD *)(a1 + 184);
        if (*(char *)(a1 + 207) < 0)
          v35 = (_QWORD *)*v35;
        v36 = *(_QWORD **)(a1 + 16);
        v37 = objc_msgSend(a2, "UTF8String");
        objc_msgSend(v11, "daemonState");
        v38 = objc_msgSend(v11, "daemonState");
        *(_DWORD *)buf = 68290051;
        v42 = 0;
        v43 = 2082;
        v44 = "";
        v45 = 2114;
        v46 = v36;
        v47 = 2082;
        v48 = v35;
        v49 = 2082;
        v50 = v37;
        v51 = 2049;
        v52 = v38;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor #Warning oh wait, lastEvent state is unknown so not actually sending this condition update to the client", "{\"msg%{public}.0s\":\"#monitor #Warning oh wait, lastEvent state is unknown so not actually sending this condition update to the client\", \"ClientKeyPath\":%{public, location:escape_only}@, \"monitor\":%{public, location:escape_only}s, \"identifier\":%{public, location:escape_only}s, \"daemonState\":%{private, location:CLMonitoringState}lld}", buf, 0x3Au);
      }
    }

  }
}

void sub_100F59930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100F5997C(uint64_t a1, void *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = (unint64_t)objc_msgSend(*(id *)(a1 + 40), "diagnosticMask");
  if (*(_BYTE *)(a1 + 128))
    v4 |= sub_101107BE4(a1, 2) | 0x2000;
  if (objc_msgSend(a2, "conditionLimitExceeded"))
    v4 |= 0x100uLL;
  if (objc_msgSend(a2, "persistenceUnavailable"))
    v4 |= 0x200uLL;
  if (objc_msgSend(a2, "conditionUnsupported"))
    v4 |= 0x80uLL;
  v5 = v4 | (unint64_t)objc_msgSend(a2, "diagnosticMaskIfMonitoringIsNonFunctional");
  return v5 & (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

id sub_100F59A28(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;

  v5 = objc_opt_class(CLCircularGeographicCondition, a2);
  if ((objc_opt_isKindOfClass(a2, v5) & 1) != 0)
  {
    v7 = objc_alloc((Class)CLCircularGeographicCondition);
    objc_msgSend(a2, "center");
    v9 = v8;
    v11 = v10;
    objc_msgSend(a2, "radius");
    v13 = objc_msgSend(v7, "initWithCenter:radius:", v9, v11, v12);
  }
  else
  {
    v14 = objc_opt_class(CLBeaconIdentityCondition, v6);
    if ((objc_opt_isKindOfClass(a2, v14) & 1) != 0)
    {
      v13 = objc_msgSend(objc_alloc((Class)CLBeaconIdentityCondition), "_initWithUUID:major:minor:", objc_msgSend(a2, "UUID"), objc_msgSend(a2, "major"), objc_msgSend(a2, "minor"));
    }
    else
    {
      v16 = objc_opt_class(CLMinimumAltitudeCondition, v15);
      if ((objc_opt_isKindOfClass(a2, v16) & 1) == 0)
      {
        v18 = 0;
        goto LABEL_8;
      }
      v17 = objc_alloc((Class)CLMinimumAltitudeCondition);
      objc_msgSend(a2, "altitude");
      v13 = objc_msgSend(v17, "initWithAltitude:");
    }
  }
  v18 = v13;
LABEL_8:
  v19 = objc_msgSend(objc_alloc((Class)CLMonitoringRecord), "initRecordWithCondition:options:event:", v18, 0, a3);

  return v19;
}

void sub_100F59B84(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 232);
  if (v2)
  {
    objc_msgSend(v2, "stopMonitoringAllConditions");
    sub_101106538(v1, 5.0);
  }
}

void sub_100F59BC0(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  const __CFString *v22;
  id v23;
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  void *v27;

  if (sub_1011060EC(a1))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102195210);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v25 = 2082;
      *(_QWORD *)&v25[2] = "";
      v26 = 2113;
      v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor connection not valid\", \"record\":%{private, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102195210);
    }
    v7 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v25 = 2082;
      *(_QWORD *)&v25[2] = "";
      v26 = 2113;
      v27 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor connection not valid", "{\"msg%{public}.0s\":\"#monitor connection not valid\", \"record\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 16), "bundlePath") == CFSTR("/System/Library/LocationBundles/NanoCompassAlerts.bundle"))
    {
      sub_1015A2E04(buf, "ShowAlert");
      sub_1015A2E04(__p, "locationd.fence.elevatedPriority");
    }
    else
    {
      sub_1015A2E04(buf, "FenceEvent");
      sub_1015A2E04(__p, "locationd.fence");
    }
    sub_101106640(a1, (uint64_t *)buf, (uint64_t *)__p);
    if (v21 < 0)
      operator delete(__p[0]);
    if (SBYTE3(v27) < 0)
      operator delete(*(void **)buf);
    v8 = objc_msgSend(objc_alloc((Class)CLMonitoringRecord), "initRecordWithMonitoringRecord:", a2);
    v22 = CFSTR("kCLConnectionMessageMonitorMonitoringRecordKey");
    v23 = v8;
    __p[0] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
    sub_100F5A1FC("Monitor/kCLConnectionMessageMonitorUpdateEvent", __p, buf);
    if (a3)
      v9 = objc_msgSend(objc_msgSend(a2, "lastEvent"), "state") != (id)1
        && objc_msgSend(objc_msgSend(a2, "lastEvent"), "state") != (id)2;
    else
      v9 = 1;
    v18 = *(void **)buf;
    v19 = *(std::__shared_weak_count **)v25;
    if (*(_QWORD *)v25)
    {
      v10 = (unint64_t *)(*(_QWORD *)v25 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_101106984(a1, (uint64_t)&v18, a3, v9, 0.0);
    v12 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    v15 = *(std::__shared_weak_count **)v25;
    if (*(_QWORD *)v25)
    {
      v16 = (unint64_t *)(*(_QWORD *)v25 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_100F59F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_100F59F94(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v5 + 8) != -1)
      sub_100F5909C(v6, a2, a3, a4, a5);
  }
}

void sub_100F59FB4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void *v19;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(a3, "daemonCondition");
  objc_msgSend(v5, "setAuthorizationContext:", *(_QWORD *)(v4 + 40));
  if (objc_msgSend(v5, "isAuthorized"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(v4 + 16);
      v10 = 68289795;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = v7;
      v16 = 2050;
      v17 = v4;
      v18 = 2113;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor trying to jump start condition due to auth context change\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"record\":%{private, location:escape_only}@}", (uint8_t *)&v10, 0x30u);
    }
    objc_msgSend(v5, "startMonitoring");
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102195230);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(v4 + 16);
      v10 = 68289795;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = v9;
      v16 = 2050;
      v17 = v4;
      v18 = 2113;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor trying to force stop condition due to auth context change\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"record\":%{private, location:escape_only}@}", (uint8_t *)&v10, 0x30u);
    }
    objc_msgSend(v5, "stopMonitoring");
  }
  sub_100F58830(v4, a3);
}

void sub_100F5A1A4(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100F5A1D0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_100F5A1FC@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100F5A248(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100F5A25C(float a1, uint64_t a2, uint64_t a3)
{
  *(float *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(_WORD *)(a3 + 8) = 2082;
}

uint64_t sub_100F5A270@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int16 a3@<W8>)
{
  uint64_t v3;

  *(_QWORD *)(a2 + 10) = v3;
  *(_WORD *)(a2 + 18) = a3;
  *(_QWORD *)(a2 + 20) = result;
  *(_WORD *)(a2 + 28) = a3;
  return result;
}

_QWORD *sub_100F5A35C(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0xBFF0000000000000;
  result[2] = 0;
  return result;
}

id sub_100F5A36C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)a1, "assertInside");
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

void sub_100F5A398(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  uint64_t v17;

  objc_msgSend(*(id *)a1, "assertInside");
  *(double *)(a1 + 8) = a2;
  ++*(_QWORD *)(a1 + 16);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102195250);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 67240448;
    v15 = v5;
    v16 = 2050;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TileDl, backoff, count, %{public}d, time, %{public}0.1f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102195250);
    v8 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    v11[0] = 67240448;
    v11[1] = v7;
    v12 = 2050;
    v13 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileDl, backoff, count, %{public}d, time, %{public}0.1f", v11, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLTileDownloadPolicy::receivedDownloadFailedAt(CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_100F5A584(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100F5A5B0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100F5A608;
  v3[3] = &unk_102131FE8;
  v3[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.MagnetometerStatistics"), v3);
}

NSDictionary *sub_100F5A608(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD v12[12];
  _QWORD v13[12];

  v12[0] = CFSTR("timestamp");
  v13[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1));
  v12[1] = CFSTR("isSaturated");
  v13[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 9));
  v12[2] = CFSTR("isFaulted");
  v13[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 10));
  v12[3] = CFSTR("maxAbsBx");
  LODWORD(v2) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 11);
  v13[3] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v2);
  v12[4] = CFSTR("maxAbsBy");
  LODWORD(v3) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 15);
  v13[4] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v12[5] = CFSTR("maxAbsBz");
  LODWORD(v4) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 19);
  v13[5] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4);
  v12[6] = CFSTR("meanAbsBx");
  LODWORD(v5) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 23);
  v13[6] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5);
  v12[7] = CFSTR("meanAbsBy");
  LODWORD(v6) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 27);
  v13[7] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6);
  v12[8] = CFSTR("meanAbsBz");
  LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 31);
  v13[8] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7);
  v12[9] = CFSTR("varBx");
  LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 35);
  v13[9] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8);
  v12[10] = CFSTR("varBy");
  LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 39);
  v13[10] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9);
  v12[11] = CFSTR("varBz");
  LODWORD(v10) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 43);
  v13[11] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 12);
}

_OWORD *sub_100F5A7F4(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_100270E34((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  sub_100270E34((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  a1[5] = 0u;
  a1[6] = 0u;
  return a1;
}

void sub_100F5A848(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 40);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100F5A888(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (void *)a1[13];
  if (v2)

  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[9];
  if (v4 == a1 + 6)
  {
    v5 = 4;
    v4 = a1 + 6;
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  v6 = (_QWORD *)a1[5];
  if (v6 == a1 + 2)
  {
    v7 = 4;
    v6 = a1 + 2;
    goto LABEL_14;
  }
  if (v6)
  {
    v7 = 5;
LABEL_14:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_100F5A928(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  NSObject *v24;
  id v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  NSObject *v33;
  id v34;
  double v35;
  const void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  id v50;
  uint64_t v51;
  id v52;
  const char *v53;
  uint8_t *v54;
  NSObject *v55;
  id v56;
  char *v57;
  char *v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  const char *v67;
  uint8_t *v68;
  uint64_t v69;
  id v70;
  const char *v71;
  uint8_t *v72;
  uint64_t v73;
  id v74;
  const char *v75;
  double v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  _BYTE *v80;
  uint64_t v81;
  int v82;
  id v83;
  __int16 v84;
  double v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint8_t buf[4];
  id v91;
  __int16 v92;
  double v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;

  v5 = (void **)(a1 + 80);
  v6 = a2 + 1;
  v8 = *a2;
  v7 = a2 + 5;
  v9 = v8;
  if ((*(_DWORD *)a1 & 0xFFFFFFFC) == 4)
    v6 = v7;
  v10 = *v6;
  v11 = *(char **)(a1 + 88);
  v12 = a1 + 96;
  v13 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)v11 >= v13)
  {
    v15 = (char *)*v5;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
    v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v17;
    if (v19)
    {
      v20 = (char *)sub_1002596A8(v12, v19);
      v15 = *(char **)(a1 + 80);
      v11 = *(char **)(a1 + 88);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[24 * v16];
    v22 = &v20[24 * v19];
    *(_QWORD *)v21 = v9;
    *((_QWORD *)v21 + 1) = v9;
    *((_QWORD *)v21 + 2) = v10;
    v14 = v21 + 24;
    if (v11 != v15)
    {
      do
      {
        v23 = *(_OWORD *)(v11 - 24);
        *((_QWORD *)v21 - 1) = *((_QWORD *)v11 - 1);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 24;
        v11 -= 24;
      }
      while (v11 != v15);
      v15 = (char *)*v5;
    }
    *(_QWORD *)(a1 + 80) = v21;
    *(_QWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 96) = v22;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_QWORD *)v11 = v9;
    *((_QWORD *)v11 + 1) = v9;
    v14 = v11 + 24;
    *((_QWORD *)v11 + 2) = v10;
  }
  *(_QWORD *)(a1 + 88) = v14;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102195270);
  v24 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v25 = objc_msgSend(*(id *)(a1 + 104), "cStringUsingEncoding:", 4);
    v26 = *(_QWORD *)(a1 + 88);
    v27 = *(double *)(v26 - 24);
    v28 = *(_QWORD *)(v26 - 8);
    *(_DWORD *)buf = 136315650;
    v91 = v25;
    v92 = 2048;
    v93 = v27;
    v94 = 2048;
    v95 = v28;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "[workout distance] aggregator %s, adding odometer sample %f, %f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v62 = qword_10229FE68;
    v63 = objc_msgSend(*(id *)(a1 + 104), "cStringUsingEncoding:", 4);
    v64 = *(_QWORD *)(a1 + 88);
    v65 = *(double *)(v64 - 24);
    v66 = *(_QWORD *)(v64 - 8);
    v82 = 136315650;
    v83 = v63;
    v84 = 2048;
    v85 = v65;
    v86 = 2048;
    v87 = v66;
    LODWORD(v76) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 2, "[workout distance] aggregator %s, adding odometer sample %f, %f", (const char *)&v82, v76, *(double *)&v77);
    v68 = (uint8_t *)v67;
    sub_100512490("Generic", 1, 0, 2, "std::optional<AggregationEntry> CLWorkoutDistanceDataCollector::Aggregator::feedOdometer(const CLOdometerEntry &)", "%s\n", v67);
    if (v68 != buf)
      free(v68);
  }
  v30 = *(double **)(a1 + 80);
  v29 = *(_QWORD *)(a1 + 88);
  if (0xAAAAAAAAAAAAAAABLL * ((v29 - (uint64_t)v30) >> 3) <= 1
    || (v31 = *(double *)(v29 - 24) - *v30, v32 = *(double *)(a1 + 8), v31 < v32 + 1.0 + -0.5))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  if (v31 > v32 + 10.0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v33 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v34 = objc_msgSend(*(id *)(a1 + 104), "cStringUsingEncoding:", 4);
      *(_DWORD *)buf = 136315394;
      v91 = v34;
      v92 = 2048;
      v93 = v31;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "[workout distance] aggregator %s, interval exceeds expected interval, %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102195270);
      v69 = qword_10229FE68;
      v70 = objc_msgSend(*(id *)(a1 + 104), "cStringUsingEncoding:", 4);
      v82 = 136315394;
      v83 = v70;
      v84 = 2048;
      v85 = v31;
      LODWORD(v76) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v69, 16, "[workout distance] aggregator %s, interval exceeds expected interval, %f", (const char *)&v82, v76);
      v72 = (uint8_t *)v71;
      sub_100512490("Generic", 1, 0, 0, "std::optional<AggregationEntry> CLWorkoutDistanceDataCollector::Aggregator::feedOdometer(const CLOdometerEntry &)", "%s\n", v71);
      if (v72 != buf)
        free(v72);
    }
  }
  v35 = *(double *)(a1 + 8);
  v36 = *(const void **)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - (_QWORD)v36) >> 3) - 1 >= (unint64_t)v35)
    v37 = (unint64_t)v35;
  else
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - (_QWORD)v36) >> 3) - 1;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  sub_1002782D0(&v79, v36, (uint64_t)v36 + 24 * v37, v37);
  if (v80 != (_BYTE *)v79)
  {
    v38 = (v80 - (_BYTE *)v79) / 24;
    v39 = *(_QWORD *)(a1 + 80);
    v40 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 88) - v39) >> 3);
    if (v40 <= 1)
      v40 = 1;
    v41 = v40 - 1;
    if (v38 <= 1)
      v38 = 1;
    v42 = v79 + 1;
    v43 = (uint64_t *)(v39 + 24);
    do
    {
      if (!v41)
        sub_1002EAEB0();
      v44 = *v43;
      v43 += 3;
      *v42 = v44;
      v42 += 3;
      --v41;
      --v38;
    }
    while (v38);
  }
  v45 = *(_QWORD *)(a1 + 40);
  if (!v45)
    sub_10025FD1C();
  *(_QWORD *)&v77 = (*(double (**)(uint64_t, _QWORD **))(*(_QWORD *)v45 + 48))(v45, &v79);
  *((_QWORD *)&v77 + 1) = v46;
  v78 = v47;
  v48 = *(_QWORD *)(a1 + 72);
  if (!v48)
    sub_10025FD1C();
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v48 + 48))(v48, &v77))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v49 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v50 = objc_msgSend(*(id *)(a1 + 104), "cStringUsingEncoding:", 4);
      *(_DWORD *)buf = 136315906;
      v91 = v50;
      v92 = 2048;
      v93 = *(double *)&v77;
      v94 = 2048;
      v95 = *((_QWORD *)&v77 + 1);
      v96 = 2048;
      v97 = v78;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "[workout distance] aggregator %s, writing entry <startTime=%f, endTime=%f, metric=%f>", buf, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_61;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v51 = qword_10229FE68;
    v52 = objc_msgSend(*(id *)(a1 + 104), "cStringUsingEncoding:", 4);
    v82 = 136315906;
    v83 = v52;
    v84 = 2048;
    v85 = *(double *)&v77;
    v86 = 2048;
    v87 = *((_QWORD *)&v77 + 1);
    v88 = 2048;
    v89 = v78;
    LODWORD(v76) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 2, "[workout distance] aggregator %s, writing entry <startTime=%f, endTime=%f, metric=%f>", (const char *)&v82, v76, *(double *)&v77, *((double *)&v77 + 1));
    v54 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 2, "std::optional<AggregationEntry> CLWorkoutDistanceDataCollector::Aggregator::feedOdometer(const CLOdometerEntry &)", "%s\n", v53);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v55 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v56 = objc_msgSend(*(id *)(a1 + 104), "cStringUsingEncoding:", 4);
      *(_DWORD *)buf = 136315906;
      v91 = v56;
      v92 = 2048;
      v93 = *(double *)&v77;
      v94 = 2048;
      v95 = *((_QWORD *)&v77 + 1);
      v96 = 2048;
      v97 = v78;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "[workout distance] aggregator %s, suppressing entry <startTime=%f, endTime=%f, metric=%f>", buf, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_61;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v73 = qword_10229FE68;
    v74 = objc_msgSend(*(id *)(a1 + 104), "cStringUsingEncoding:", 4);
    v82 = 136315906;
    v83 = v74;
    v84 = 2048;
    v85 = *(double *)&v77;
    v86 = 2048;
    v87 = *((_QWORD *)&v77 + 1);
    v88 = 2048;
    v89 = v78;
    LODWORD(v76) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, 0, "[workout distance] aggregator %s, suppressing entry <startTime=%f, endTime=%f, metric=%f>", (const char *)&v82, v76, *(double *)&v77, *((double *)&v77 + 1));
    v54 = (uint8_t *)v75;
    sub_100512490("Generic", 1, 0, 2, "std::optional<AggregationEntry> CLWorkoutDistanceDataCollector::Aggregator::feedOdometer(const CLOdometerEntry &)", "%s\n", v75);
  }
  if (v54 != buf)
    free(v54);
LABEL_61:
  if (v37)
  {
    v57 = (char *)*v5;
    v58 = &v57[24 * v37];
    v59 = *(_BYTE **)(a1 + 88);
    v60 = v59 - v58;
    if (v59 != v58)
      memmove(v57, v58, v59 - v58);
    *(_QWORD *)(a1 + 88) = &v57[v60];
  }
  *(_OWORD *)a3 = v77;
  v61 = v79;
  *(_QWORD *)(a3 + 16) = v78;
  *(_BYTE *)(a3 + 24) = 1;
  if (v61)
  {
    v80 = v61;
    operator delete(v61);
  }
}

void sub_100F5B2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100F5B314(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100F5B324(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v6;
  _QWORD **v7;

  v2 = a1[1];
  if (a1[2] != v2)
  {
    v3 = a1[4];
    v4 = (_QWORD *)(v2 + 8 * (v3 >> 9));
    v5 = (_QWORD **)(*v4 + 8 * (v3 & 0x1FF));
    v6 = *(_QWORD *)(v2 + (((a1[5] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v3) & 0x1FF);
    while (v5 != (_QWORD **)v6)
    {
      sub_100F5B3B8(v5++, 0);
      if ((_QWORD **)((char *)v5 - *v4) == (_QWORD **)4096)
      {
        v7 = (_QWORD **)v4[1];
        ++v4;
        v5 = v7;
      }
    }
  }
  return sub_100F5BDFC(a1);
}

_QWORD *sub_100F5B3B8(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100F5A888(result);
    operator delete();
  }
  return result;
}

void sub_100F5B3F8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = a1[1];
  if (a1[2] != v2)
  {
    v3 = a1[4];
    v4 = (_QWORD *)(v2 + 8 * (v3 >> 9));
    v5 = (uint64_t *)(*v4 + 8 * (v3 & 0x1FF));
    v6 = *(_QWORD *)(v2 + (((a1[5] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v3) & 0x1FF);
    while (v5 != (uint64_t *)v6)
    {
      v8 = *v5++;
      sub_100F5A928(v8, a2, (uint64_t)&v10);
      if ((uint64_t *)((char *)v5 - *v4) == (uint64_t *)4096)
      {
        v9 = (uint64_t *)v4[1];
        ++v4;
        v5 = v9;
      }
    }
  }
}

void sub_100F5B494(_QWORD *a1, int *a2)
{
  BOOL v3;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD **v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  const char *v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  int v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[8];
  __int16 v33;
  uint64_t v34;

  if (!*((_QWORD *)a2 + 5) || (*((_QWORD *)a2 + 9) ? (v3 = *a2 == 7) : (v3 = 1), v3 || *((double *)a2 + 1) <= 0.0))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v14 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v15 = *a2;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[workout distance] not adding aggregator for type %d because settings are nonsensical", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102195270);
      v21 = *a2;
      v28 = 67109120;
      v29 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "[workout distance] not adding aggregator for type %d because settings are nonsensical", &v28);
      v20 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutDistanceDataCollector::Collector::addAggregator(const Aggregator::Settings &)", "%s\n", v22);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      v7 = *((_QWORD *)a2 + 1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v6;
      v33 = 2048;
      v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[workout distance] adding aggregator of type %d with interval %f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102195270);
      v23 = *a2;
      v24 = *((_QWORD *)a2 + 1);
      v28 = 67109376;
      v29 = v23;
      v30 = 2048;
      v31 = v24;
      LODWORD(v27) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[workout distance] adding aggregator of type %d with interval %f", &v28, v27);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceDataCollector::Collector::addAggregator(const Aggregator::Settings &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v8 = a1[1];
    if (a1[2] == v8
      || (v9 = a1[4],
          v10 = (_QWORD *)(v8 + 8 * (v9 >> 9)),
          v11 = (_DWORD **)(*v10 + 8 * (v9 & 0x1FF)),
          v12 = *(_QWORD *)(v8 + (((a1[5] + v9) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v9) & 0x1FF),
          v11 == (_DWORD **)v12))
    {
LABEL_18:
      operator new();
    }
    while (**v11 != *a2)
    {
      if ((_DWORD **)((char *)++v11 - *v10) == (_DWORD **)4096)
      {
        v13 = (_DWORD **)v10[1];
        ++v10;
        v11 = v13;
      }
      if (v11 == (_DWORD **)v12)
        goto LABEL_18;
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195270);
    v16 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *a2;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[workout distance] already have an aggregator of that type %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102195270);
      v18 = *a2;
      v28 = 67109120;
      v29 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[workout distance] already have an aggregator of that type %d", &v28);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceDataCollector::Collector::addAggregator(const Aggregator::Settings &)", "%s\n", v19);
LABEL_36:
      if (v20 != buf)
        free(v20);
    }
  }
}

void sub_100F5B9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100F5B3B8((_QWORD **)va, 0);
  _Unwind_Resume(a1);
}

void sub_100F5BA34(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100F5BF24(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  v9 = *(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

void sub_100F5BABC(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100F5BAEC()
{
  operator delete();
}

_QWORD *sub_100F5BB00()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021952A0;
  return result;
}

void sub_100F5BB24(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021952A0;
}

double sub_100F5BB3C(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;

  v2 = *a2;
  result = **a2;
  v4 = 0.0;
  while (v2 != a2[1])
  {
    v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_100F5BB68(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F5BBA4()
{
}

void sub_100F5BBB4()
{
  operator delete();
}

_QWORD *sub_100F5BBC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102195320;
  return result;
}

void sub_100F5BBEC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102195320;
}

double sub_100F5BC04(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;
  double *v5;

  v2 = a2[1];
  result = **a2;
  v4 = 0.0;
  if (*a2 != v2)
  {
    v5 = *a2;
    do
    {
      v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_100F5BC54(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F5BC90()
{
}

void sub_100F5BCA0()
{
  operator delete();
}

_QWORD *sub_100F5BCB4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021953A0;
  return result;
}

void sub_100F5BCD8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021953A0;
}

BOOL sub_100F5BCF0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_100F5BD00(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F5BD3C()
{
}

void sub_100F5BD4C()
{
  operator delete();
}

_QWORD *sub_100F5BD60()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102195420;
  return result;
}

void sub_100F5BD84(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102195420;
}

BOOL sub_100F5BD9C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_100F5BDB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100F5BDF0()
{
}

uint64_t sub_100F5BDFC(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (char *)*v6 + 8 * (v5 & 0x1FF);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_100F5B3B8((_QWORD **)v7, 0);
        v7 += 8;
        if (v7 - (_BYTE *)*v6 == 4096)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 512;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100F5BF24(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F5C1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F5C238()
{
  qword_1023091A8 = (uint64_t)off_1021952A0;
  qword_1023091C0 = (uint64_t)&qword_1023091A8;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_1023091A8, (void *)&_mh_execute_header);
  qword_1023091C8 = (uint64_t)off_102195320;
  qword_1023091E0 = (uint64_t)&qword_1023091C8;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_1023091C8, (void *)&_mh_execute_header);
  qword_1023091E8 = (uint64_t)off_1021953A0;
  qword_102309200 = (uint64_t)&qword_1023091E8;
  __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_1023091E8, (void *)&_mh_execute_header);
  qword_102309208 = (uint64_t)off_102195420;
  qword_102309220 = (uint64_t)&qword_102309208;
  return __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_102309208, (void *)&_mh_execute_header);
}

uint64_t sub_100F5C2F4(uint64_t a1, uint64_t a2, char a3)
{
  _OWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v4 = *(_OWORD **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_OWORD *)a1 = *v4;
    *(_BYTE *)(a1 + 16) = a3;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(_OWORD *)a1 = *v4;
    *(_BYTE *)(a1 + 16) = a3;
  }
  return a1;
}

__n128 sub_100F5C384(__n128 *a1, __n128 **a2, unsigned __int8 a3)
{
  __n128 result;

  result = **a2;
  *a1 = result;
  a1[1].n128_u8[0] = a3;
  return result;
}

uint64_t sub_100F5C39C(uint64_t a1, void *a2, char a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)a1 = objc_msgSend(a2, "roadID");
  *(_QWORD *)(a1 + 8) = sub_100CCDDE0(a2);
  *(_BYTE *)(a1 + 16) = a3;
  return a1;
}

BOOL sub_100F5C3F4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

BOOL sub_100F5C430(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return *(_QWORD *)a1 < *(_QWORD *)a2;
  v2 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3)
    return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
  return *(_BYTE *)(a1 + 16) && v2 == 0;
}

BOOL sub_100F5C480(unsigned __int8 *a1, uint64_t *a2, _QWORD *a3, int a4, double a5)
{
  uint64_t v6;
  double v10;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  double v23;
  int v24;
  double v25;
  double *v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v42;
  NSObject *v43;
  const char *v44;
  uint8_t *v45;
  int v46;
  uint64_t v47;
  _BOOL8 v48;
  NSObject *v50;
  uint64_t v51;
  double v52;
  _QWORD *v53;
  int v54;
  double v55;
  double *v57;
  double *v58;
  __int128 *v59;
  __int128 v60;
  double v61;
  BOOL v62;
  NSObject *v63;
  const char *v64;
  uint8_t *v65;
  NSObject *v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint8_t *v93;
  const char *v94;
  uint8_t *v95;
  const char *v96;
  uint8_t *v97;
  uint64_t v98;
  __n128 v99;
  __int128 v100;
  _QWORD *v101;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  double v106;
  double *v107;
  std::__shared_weak_count *v108;
  int v109;
  int v110;
  _BYTE v111[32];
  _BYTE v112[40];
  _DWORD v113[8];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _BYTE v120[30];
  __int128 v121;
  __int128 v122;
  __int16 v123;
  uint64_t v124;
  int v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[27];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  unint64_t v134;
  uint8_t buf[4];
  _BYTE v136[10];
  _BYTE v137[10];
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  int v152;
  __int16 v153;
  int v154;

  *a2 = 0xBFF0000000000000;
  if (!*a1
    || (v6 = *((_QWORD *)a1 + 8)) == 0
    || !*(_BYTE *)(v6 + 18)
    || (v10 = *((double *)a1 + 22), v10 > 0.0) && vabdd_f64(a5, v10) <= 0.9)
  {
    if (!a4)
      return 0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v15 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *((_QWORD *)a1 + 8);
      if (v16)
        v17 = *(unsigned __int8 *)(v16 + 18);
      else
        v17 = -1;
      v46 = *a1;
      v47 = *((_QWORD *)a1 + 22);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v136 = v17;
      *(_WORD *)&v136[4] = 1026;
      *(_DWORD *)&v136[6] = v46;
      *(_WORD *)v137 = 2050;
      *(_QWORD *)&v137[2] = v47;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,isTunnel,%{public}d,isSnapUsable,%{public}d,lastAssistanceTime,%{public}.1lf", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v79 = *((_QWORD *)a1 + 8);
    if (v79)
      v80 = *(unsigned __int8 *)(v79 + 18);
    else
      v80 = -1;
    v81 = *a1;
    v82 = *((_QWORD *)a1 + 22);
    *(_DWORD *)v111 = 67240704;
    *(_DWORD *)&v111[4] = v80;
    *(_WORD *)&v111[8] = 1026;
    *(_DWORD *)&v111[10] = v81;
    *(_WORD *)&v111[14] = 2050;
    *(_QWORD *)&v111[16] = v82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no TEPA,isTunnel,%{public}d,isSnapUsable,%{public}d,lastAssistanceTime,%{public}.1lf", v111, 24);
    v14 = (uint8_t *)v83;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "%s\n", v83);
    goto LABEL_135;
  }
  if (+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", *((double *)a1 + 12), *((double *)a1 + 13)))
  {
    if (!a4)
      return 0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v12 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)v136 = a5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,no TEPA, shifted coordinates", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    *(_DWORD *)v111 = 134349056;
    *(double *)&v111[4] = a5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,no TEPA, shifted coordinates", v111, 12);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "%s\n", v13);
LABEL_135:
    if (v14 != buf)
      free(v14);
    return 0;
  }
  v18 = *((_QWORD *)a1 + 8);
  v19 = (std::__shared_weak_count *)*((_QWORD *)a1 + 9);
  v107 = (double *)v18;
  v108 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v101 = a3;
  v22 = *(unsigned __int8 *)(v18 + 18);
  v23 = *((double *)a1 + 14);
  *((_BYTE *)a2 + 72) = 0;
  v24 = 0;
  if (!v22)
  {
    v25 = 0.0;
    goto LABEL_81;
  }
  v25 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v99 = _Q0;
  while (1)
  {
    v30 = v107;
    if (!v107)
      goto LABEL_81;
    if (v24 == 200)
      break;
    sub_1004078E0(v107);
    v31 = v30[5];
    *(double *)a2 = a5;
    v32 = (uint64_t *)v107;
    v33 = *((_QWORD *)v107 + 18);
    if (v33 == *((_QWORD *)v107 + 17))
    {
      a2[1] = 0;
      v34 = 0;
    }
    else
    {
      a2[1] = *(_QWORD *)(v33 - 16);
      v34 = *(_QWORD *)(v33 - 8);
    }
    a2[2] = v34;
    *((double *)a2 + 4) = sub_100408388(v32);
    v35 = (uint64_t *)v107;
    a2[8] = *((_QWORD *)v107 + 12);
    if ((int)sub_100408414(v35) >= 1)
      *((_BYTE *)a2 + 72) = 1;
    v36 = fmod(*((float *)a1 + 22) - *((double *)a2 + 4), 360.0);
    if (v36 < 0.0)
      v36 = v36 + 360.0;
    if (v36 > 180.0)
      v36 = v36 + -360.0;
    if (fabs(v36) > 7.5)
      *((_BYTE *)a2 + 72) = 1;
    v37 = v107;
    sub_1004078E0(v107);
    v38 = 1.0 - v23;
    v39 = v37[5];
    v105 = 0;
    v106 = 0.0;
    v103 = (uint64_t)&v103;
    v104 = &v103;
    *(_QWORD *)v111 = 0;
    *(__n128 *)&v111[16] = v99;
    *(_OWORD *)v112 = 0uLL;
    *(_QWORD *)&v112[16] = 0xBFF0000000000000;
    v124 = 0;
    v125 = 0;
    v121 = 0u;
    v122 = 0u;
    v123 = 0;
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    memset(v129, 0, sizeof(v129));
    v130 = 0u;
    v131 = 0u;
    v132 = 0u;
    v119 = 0u;
    memset(v120, 0, sizeof(v120));
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v114 = 0u;
    *(_OWORD *)&v112[24] = 0u;
    memset(v113, 0, sizeof(v113));
    v134 = 0xBFF0000000000000;
    v133 = 0;
    *(double *)&v111[8] = a5;
    if (!(*(unsigned int (**)(_QWORD, _BYTE *, uint64_t *, _QWORD, uint64_t, double **, uint64_t, double *, double, double))(*(_QWORD *)*a3 + 80))(*a3, v111, &v103, 0, 1, &v107, 1, &v106, v23, v39 * (1.0 - v23) + 1.0))goto LABEL_52;
    if (v105 != 1 || v106 < 0.0)
    {
      if (a4)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102195490);
        v43 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v136 = v105;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,multi-outbound,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102195490);
          v109 = 67240192;
          v110 = v105;
          LODWORD(v98) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no TEPA,multi-outbound,%{public}d", &v109, v98);
          v45 = (uint8_t *)v44;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "%s\n", v44);
          if (v45 != buf)
            free(v45);
        }
      }
      v42 = 0;
      *a2 = 0xBFF0000000000000;
      goto LABEL_60;
    }
    sub_100349198(&v107, v104 + 2);
    v40 = sub_1004083A8((uint64_t)v107, 0, 1);
    if (v40 < 0.0)
      goto LABEL_49;
    v41 = fmod(v40 - *((double *)a2 + 4), 360.0);
    if (v41 < 0.0)
      v41 = v41 + 360.0;
    if (v41 > 180.0)
      v41 = v41 + -360.0;
    if (fabs(v41) > 7.5)
LABEL_49:
      *((_BYTE *)a2 + 72) = 1;
    v23 = 0.0;
    if (v107)
      v42 = *((_BYTE *)v107 + 18) != 0;
    else
LABEL_52:
      v42 = 0;
LABEL_60:
    if (SHIBYTE(v116) < 0)
      operator delete(*((void **)&v115 + 1));
    v25 = v25 + v31 * v38;
    sub_1001A5CBC(&v103);
    ++v24;
    if (!v42)
      goto LABEL_81;
  }
  *a2 = 0xBFF0000000000000;
  if (a4)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v50 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v136 = 201;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLMM,TEPA,outgoing reached max iterations,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102195490);
      *(_QWORD *)v111 = 0xC904020100;
      LODWORD(v98) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,TEPA,outgoing reached max iterations,%{public}d", v111, v98);
      v95 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
    v24 = 201;
LABEL_81:
    v51 = *a2;
    if (*(double *)a2 > 0.0)
    {
      *((double *)a2 + 14) = v25;
      a2[3] = 0x4039000000000000;
      *(_OWORD *)(a2 + 5) = xmmword_101C30740;
      a2[7] = 0xBFF0000000000000;
      v52 = *((double *)a1 + 4);
      if (v52 > 0.0)
      {
        a2[6] = *((_QWORD *)a1 + 5);
        *((double *)a2 + 7) = v52;
      }
      *((_QWORD *)a1 + 22) = v51;
      a2[11] = 0;
      a2[12] = 0;
      v53 = a2 + 11;
      *((double *)a2 + 13) = v25;
      sub_100349198(&v107, (uint64_t *)a1 + 8);
      if (*((_BYTE *)v107 + 18))
      {
        v54 = 0;
        v55 = *((double *)a1 + 14);
        __asm { FMOV            V0.2D, #-1.0 }
        v100 = _Q0;
        while (1)
        {
          v57 = v107;
          if (!v107)
            goto LABEL_119;
          if (v54 == 200)
          {
            a2[13] = 0xBFF0000000000000;
            *v53 = 0;
            a2[12] = 0;
            if (a4)
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102195490);
              v66 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67240192;
                *(_DWORD *)v136 = 201;
                _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "CLMM,TEPA,incoming reached max iterations,%{public}d", buf, 8u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102195490);
                *(_QWORD *)v111 = 0xC904020100;
                LODWORD(v98) = 8;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,TEPA,incoming reached max iterations,%{public}d", v111, v98);
                v97 = (uint8_t *)v96;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "%s\n", v96);
                if (v97 != buf)
                  free(v97);
              }
            }
            v54 = 201;
            goto LABEL_119;
          }
          sub_1004078E0(v107);
          *((double *)a2 + 13) = *((double *)a2 + 13) + v57[5] * v55;
          v58 = v107;
          v59 = (__int128 *)*((_QWORD *)v107 + 17);
          if (*((__int128 **)v107 + 18) == v59)
            v60 = 0uLL;
          else
            v60 = *v59;
          *(_OWORD *)v53 = v60;
          sub_1004078E0(v58);
          v61 = v58[5];
          v105 = 0;
          v106 = 0.0;
          v103 = (uint64_t)&v103;
          v104 = &v103;
          *(_QWORD *)v111 = 0;
          *(_OWORD *)&v111[16] = v100;
          *(_OWORD *)v112 = 0uLL;
          *(_QWORD *)&v112[16] = 0xBFF0000000000000;
          v124 = 0;
          v125 = 0;
          v121 = 0u;
          v122 = 0u;
          v123 = 0;
          v126 = 0u;
          v127 = 0u;
          v128 = 0u;
          memset(v129, 0, sizeof(v129));
          v130 = 0u;
          v131 = 0u;
          v132 = 0u;
          v119 = 0u;
          memset(v120, 0, sizeof(v120));
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v114 = 0u;
          *(_OWORD *)&v112[24] = 0u;
          memset(v113, 0, sizeof(v113));
          v134 = 0xBFF0000000000000;
          v133 = 0;
          *(double *)&v111[8] = a5;
          if (!(*(unsigned int (**)(_QWORD, _BYTE *, _QWORD, uint64_t *, _QWORD, double **, uint64_t, double *, double, double))(*(_QWORD *)*v101 + 80))(*v101, v111, 0, &v103, 0, &v107, 1, &v106, v55, v61 * v55 + 1.0))goto LABEL_102;
          if (v105 != 1 || v106 < 0.0)
            break;
          sub_100349198(&v107, v104 + 2);
          v55 = 1.0;
          if (!v107)
            goto LABEL_102;
          v62 = *((_BYTE *)v107 + 18) != 0;
LABEL_103:
          if (SHIBYTE(v116) < 0)
            operator delete(*((void **)&v115 + 1));
          sub_1001A5CBC(&v103);
          ++v54;
          if (!v62)
            goto LABEL_119;
        }
        a2[13] = 0xBFF0000000000000;
        *v53 = 0;
        a2[12] = 0;
        if (a4)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102195490);
          v63 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)v136 = v105;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,multi-inbound,%{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102195490);
            v109 = 67240192;
            v110 = v105;
            LODWORD(v98) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,no TEPA,multi-inbound,%{public}d", &v109, v98);
            v65 = (uint8_t *)v64;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "%s\n", v64);
            if (v65 != buf)
              free(v65);
          }
        }
LABEL_102:
        v62 = 0;
        goto LABEL_103;
      }
      v54 = 0;
LABEL_119:
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102195490);
      v67 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v68 = a2[1];
        v69 = a2[2];
        v70 = a2[11];
        v71 = a2[12];
        v72 = a2[6];
        v73 = a2[7];
        v74 = a2[13];
        v75 = a2[14];
        *(_DWORD *)buf = 134351617;
        *(double *)v136 = a5;
        *(_WORD *)&v136[8] = 2049;
        *(_QWORD *)v137 = v68;
        *(_WORD *)&v137[8] = 2049;
        v138 = v69;
        v139 = 2049;
        v140 = v70;
        v141 = 2049;
        v142 = v71;
        v143 = 2050;
        v144 = v72;
        v145 = 2050;
        v146 = v73;
        v147 = 2050;
        v148 = v74;
        v149 = 2050;
        v150 = v75;
        v151 = 1026;
        v152 = v24;
        v153 = 1026;
        v154 = v54;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,TEPA,ell,%{private}.7lf,%{private}.7lf,sll,%{private}.7lf,%{private}.7lf,alt,%{public}.1lf,vUnc,%{public}.1lf,length,%{public}.2lf,distFromCurrentParticle,%{public}.1lf,iterCountOut,%{public}d,iterCountIn,%{public}d", buf, 0x68u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102195490);
        v84 = a2[1];
        v85 = a2[2];
        v86 = a2[11];
        v87 = a2[12];
        v88 = a2[6];
        v89 = a2[7];
        v90 = a2[13];
        v91 = a2[14];
        *(_DWORD *)v111 = 134351617;
        *(double *)&v111[4] = a5;
        *(_WORD *)&v111[12] = 2049;
        *(_QWORD *)&v111[14] = v84;
        *(_WORD *)&v111[22] = 2049;
        *(_QWORD *)&v111[24] = v85;
        *(_WORD *)v112 = 2049;
        *(_QWORD *)&v112[2] = v86;
        *(_WORD *)&v112[10] = 2049;
        *(_QWORD *)&v112[12] = v87;
        *(_WORD *)&v112[20] = 2050;
        *(_QWORD *)&v112[22] = v88;
        *(_WORD *)&v112[30] = 2050;
        *(_QWORD *)&v112[32] = v89;
        LOWORD(v113[0]) = 2050;
        *(_QWORD *)((char *)v113 + 2) = v90;
        HIWORD(v113[2]) = 2050;
        *(_QWORD *)&v113[3] = v91;
        LOWORD(v113[5]) = 1026;
        *(_DWORD *)((char *)&v113[5] + 2) = v24;
        HIWORD(v113[6]) = 1026;
        v113[7] = v54;
        LODWORD(v98) = 104;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,TEPA,ell,%{private}.7lf,%{private}.7lf,sll,%{private}.7lf,%{private}.7lf,alt,%{public}.1lf,vUnc,%{public}.1lf,length,%{public}.2lf,distFromCurrentParticle,%{public}.1lf,iterCountOut,%{public}d,iterCountIn,%{public}d", v111, v98);
        v93 = (uint8_t *)v92;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "%s\n", v92);
        if (v93 != buf)
          free(v93);
      }
    }
  }
  _Q0.n128_u64[0] = *a2;
  v48 = *(double *)a2 > 0.0;
  v76 = v108;
  if (v108)
  {
    v77 = (unint64_t *)&v108->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, _Q0);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  return v48;
}

void sub_100F5D578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  sub_100261F44((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100F5D5E4(double *a1, uint64_t a2, _QWORD *a3, int a4)
{
  int v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  BOOL v14;
  double v15;
  NSObject *v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v32;
  NSObject *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  double v39;
  double v40;
  double v41;
  NSObject *v43;
  unint64_t v44;
  NSObject *v49;
  const char *v50;
  uint8_t *v51;
  NSObject *v52;
  NSObject *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  int v58;
  double v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  NSObject *v64;
  const char *v65;
  uint8_t *v66;
  NSObject *v67;
  const char *v68;
  NSObject *v69;
  double *v70;
  double v71;
  double v72;
  double *v73;
  double v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint8_t *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint8_t *v93;
  const char *v94;
  uint64_t v95;
  __int128 v96;
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99[2];
  unint64_t v100;
  int v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  double v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  _BYTE v113[12];
  __int16 v114;
  double v115;
  float v116;
  __int128 v117;
  _BYTE v118[88];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _BYTE v126[64];
  __int16 v127;
  uint64_t v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _BYTE v133[80];
  uint64_t v134;
  unint64_t v135;
  uint8_t buf[4];
  unint64_t v137;
  __int16 v138;
  _BYTE v139[10];
  _BYTE v140[10];
  _BYTE v141[10];
  _BYTE v142[10];
  _BYTE v143[10];
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;

  v8 = *(_DWORD *)(a2 + 96);
  v9 = *(double *)(a2 + 76);
  v10 = *(double *)(a2 + 44);
  if (v10 >= 0.0)
  {
    a1[6] = v9;
    a1[1] = v10;
  }
  if (!*(_BYTE *)a1
    || (v11 = *((_QWORD *)a1 + 8)) == 0
    || ((v12 = a1[7], v13 = v9 - v12, v12 > 0.0) ? (v14 = v13 > 5.0) : (v14 = 1),
        v14
     || !*(_BYTE *)(v11 + 18)
     || (v8 == 3 || a1[2] <= 0.0) && ((v15 = a1[6], v15 <= 0.0) || (v13 = a1[1], v13 < 0.0) || v9 - v15 > 15.0)))
  {
    if (!a4)
      return 0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v21 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_QWORD *)(a2 + 76);
      v23 = *((_QWORD *)a1 + 8);
      if (v23)
        v24 = *(unsigned __int8 *)(v23 + 18);
      else
        v24 = -1;
      v25 = *(unsigned __int8 *)a1;
      v27 = *((_QWORD *)a1 + 6);
      v26 = *((_QWORD *)a1 + 7);
      v28 = *((_QWORD *)a1 + 1);
      v29 = *((_QWORD *)a1 + 2);
      *(_DWORD *)buf = 134351104;
      v137 = v22;
      v138 = 1026;
      *(_DWORD *)v139 = v24;
      *(_WORD *)&v139[4] = 1026;
      *(_DWORD *)&v139[6] = v25;
      *(_WORD *)v140 = 2050;
      *(_QWORD *)&v140[2] = v26;
      *(_WORD *)v141 = 2050;
      *(_QWORD *)&v141[2] = 0x4014000000000000;
      *(_WORD *)v142 = 2050;
      *(_QWORD *)&v142[2] = v28;
      *(_WORD *)v143 = 2050;
      *(_QWORD *)&v143[2] = v27;
      v144 = 2050;
      v145 = 0x402E000000000000;
      v146 = 2050;
      v147 = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating,isTunnel,%{public}d,isSnapUsable,%{public}d,particleTime,%{public}.2lf,particleTimeOut,%{public}.1lf,speed,%{public}.2lf,speedTime,%{public}.2lf,speedTimeOut,%{public}.1lf,speedLimit,%{public}.1lf", buf, 0x54u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v76 = *(_QWORD *)(a2 + 76);
    v77 = *((_QWORD *)a1 + 8);
    if (v77)
      v78 = *(unsigned __int8 *)(v77 + 18);
    else
      v78 = -1;
    v79 = *(unsigned __int8 *)a1;
    v81 = *((_QWORD *)a1 + 6);
    v80 = *((_QWORD *)a1 + 7);
    v82 = *((_QWORD *)a1 + 1);
    v83 = *((_QWORD *)a1 + 2);
    *(_DWORD *)v118 = 134351104;
    *(_QWORD *)&v118[4] = v76;
    *(_WORD *)&v118[12] = 1026;
    *(_DWORD *)&v118[14] = v78;
    *(_WORD *)&v118[18] = 1026;
    *(_DWORD *)&v118[20] = v79;
    *(_WORD *)&v118[24] = 2050;
    *(_QWORD *)&v118[26] = v80;
    *(_WORD *)&v118[34] = 2050;
    *(_QWORD *)&v118[36] = 0x4014000000000000;
    *(_WORD *)&v118[44] = 2050;
    *(_QWORD *)&v118[46] = v82;
    *(_WORD *)&v118[54] = 2050;
    *(_QWORD *)&v118[56] = v81;
    *(_WORD *)&v118[64] = 2050;
    *(_QWORD *)&v118[66] = 0x402E000000000000;
    *(_WORD *)&v118[74] = 2050;
    *(_QWORD *)&v118[76] = v83;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,NotPropagating,isTunnel,%{public}d,isSnapUsable,%{public}d,particleTime,%{public}.2lf,particleTimeOut,%{public}.1lf,speed,%{public}.2lf,speedTime,%{public}.2lf,speedTimeOut,%{public}.1lf,speedLimit,%{public}.1lf", v118, 84);
    v20 = (uint8_t *)v84;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v84);
    goto LABEL_141;
  }
  if (+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", a1[12], a1[13], v13)&& *(_DWORD *)(a2 + 132) != 2)
  {
    if (!a4)
      return 0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v16 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)buf = 134349056;
      v137 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating, shifting is required but accessory is outputting  unshifted coordinates", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v18 = *(_QWORD *)(a2 + 76);
    *(_DWORD *)v118 = 134349056;
    *(_QWORD *)&v118[4] = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,NotPropagating, shifting is required but accessory is outputting  unshifted coordinates", v118, 12);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v19);
LABEL_141:
    if (v20 != buf)
      free(v20);
    return 0;
  }
  v32 = *(double *)(a2 + 76) - a1[7];
  if (v32 < 0.0)
  {
    if (!a4)
      return 0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v33 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v34 = *(_QWORD *)(a2 + 76);
      v35 = *((_QWORD *)a1 + 7);
      *(_DWORD *)buf = 134349312;
      v137 = v34;
      v138 = 2050;
      *(_QWORD *)v139 = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating,time lower than particleTime, %{public}.2lf", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v36 = *(_QWORD *)(a2 + 76);
    v37 = *((_QWORD *)a1 + 7);
    *(_DWORD *)v118 = 134349312;
    *(_QWORD *)&v118[4] = v36;
    *(_WORD *)&v118[12] = 2050;
    *(_QWORD *)&v118[14] = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,NotPropagating,time lower than particleTime, %{public}.2lf", v118, 22);
    v20 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v38);
    goto LABEL_141;
  }
  if (v8 == 3 || (v39 = a1[2], v39 <= 0.0))
  {
    v39 = a1[1];
  }
  else if (a1[1] >= v39)
  {
    v39 = a1[1];
  }
  v40 = v32 * v39;
  if (v32 * v39 <= 225.0)
    v41 = v32 * v39;
  else
    v41 = 225.0;
  if (v32 * v39 > 225.0 && a4 != 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v43 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v44 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)buf = 134349568;
      v137 = v44;
      v138 = 2050;
      *(double *)v139 = v40;
      *(_WORD *)&v139[8] = 2050;
      *(_QWORD *)v140 = 0x406C200000000000;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,limit distance to propagate,orig,%{public}.1lf,new,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102195490);
      v85 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)v118 = 134349568;
      *(_QWORD *)&v118[4] = v85;
      *(_WORD *)&v118[12] = 2050;
      *(double *)&v118[14] = v40;
      *(_WORD *)&v118[22] = 2050;
      *(_QWORD *)&v118[24] = 0x406C200000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,limit distance to propagate,orig,%{public}.1lf,new,%{public}.1lf", v118, 32);
      v87 = (uint8_t *)v86;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v86);
      if (v87 != buf)
        free(v87);
    }
    v41 = 225.0;
  }
  *(_QWORD *)v118 = 0;
  *(_QWORD *)&v118[8] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v96 = _Q0;
  *(_OWORD *)&v118[16] = _Q0;
  *(_QWORD *)&v118[32] = 0;
  *(_QWORD *)&v118[40] = 0;
  *(_QWORD *)&v118[48] = 0xBFF0000000000000;
  v128 = 0;
  v129 = 0;
  memset(&v126[32], 0, 32);
  v127 = 0;
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  memset(v133, 0, 27);
  memset(&v133[32], 0, 48);
  memset(v126, 0, 30);
  v125 = 0u;
  v124 = 0u;
  v123 = 0u;
  v122 = 0u;
  v121 = 0u;
  v120 = 0u;
  v119 = 0u;
  memset(&v118[56], 0, 32);
  v135 = 0xBFF0000000000000;
  v134 = 0;
  v99[0] = (uint64_t)v99;
  v99[1] = (uint64_t)v99;
  v100 = 0;
  v98 = 0;
  if (((*(uint64_t (**)(_QWORD, _BYTE *, uint64_t *, _QWORD, uint64_t, unsigned __int8 *, _QWORD, uint64_t *, double, double))(*(_QWORD *)*a3 + 80))(*a3, v118, v99, 0, 1, (unsigned __int8 *)a1 + 64, *((unsigned __int8 *)a1 + 84), &v98, a1[14], v41) & 1) == 0)
  {
    if (!a4)
      goto LABEL_83;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v52 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,roadsAtIntersection returned false", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_83;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    *(_WORD *)v113 = 0;
    LODWORD(v95) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,NotPropagating,roadsAtIntersection returned false", v113, v95);
    v51 = (uint8_t *)v88;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v88);
    goto LABEL_150;
  }
  if (v100 >= 2)
  {
    if (!a4)
      goto LABEL_83;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v49 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      v137 = v100;
      v138 = 2050;
      *(double *)v139 = v41;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,multi-outbound,%{public}lu,intersection within the distance,%{public}.2lf, needed to be travelled returned", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_83;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    *(_DWORD *)v113 = 134349312;
    *(_QWORD *)&v113[4] = v100;
    v114 = 2050;
    v115 = v41;
    LODWORD(v95) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,NotPropagating,multi-outbound,%{public}lu,intersection within the distance,%{public}.2lf, needed to be travelled returned", v113, v95);
    v51 = (uint8_t *)v50;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v50);
LABEL_150:
    if (v51 != buf)
      free(v51);
LABEL_83:
    v30 = 0;
    goto LABEL_125;
  }
  sub_100F5E8AC((uint64_t)v113, (uint64_t)(a1 + 8));
  v97[0] = v97;
  v97[1] = v97;
  v97[2] = 0;
  if (((*(uint64_t (**)(_QWORD, _BYTE *, _QWORD *, double))(*(_QWORD *)*a3 + 88))(*a3, v113, v97, v41) & 1) == 0)
  {
    if (!a4)
      goto LABEL_123;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v64 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,moveOnRoad returned false", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_123;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    LOWORD(v101) = 0;
    LODWORD(v95) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,NotPropagating,moveOnRoad returned false", &v101, v95);
    v66 = (uint8_t *)v65;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v65);
    goto LABEL_159;
  }
  if (!*(_QWORD *)v113)
  {
    if (!a4)
      goto LABEL_123;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v67 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_FAULT, "CLMM,NotPropagating,NULL road", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_123;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    LOWORD(v101) = 0;
    LODWORD(v95) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 17, "CLMM,NotPropagating,NULL road", &v101, v95);
    v66 = (uint8_t *)v68;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v68);
    goto LABEL_159;
  }
  if (*(_BYTE *)(*(_QWORD *)v113 + 18))
  {
    if (a4)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102195490);
      v53 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v54 = *(_QWORD *)(a2 + 76);
        v55 = *((_QWORD *)a1 + 1);
        v56 = *((_QWORD *)a1 + 2);
        *(_DWORD *)buf = 134350337;
        v137 = v54;
        v138 = 2049;
        *(_QWORD *)v139 = v117;
        *(_WORD *)&v139[8] = 2049;
        *(_QWORD *)v140 = *((_QWORD *)&v117 + 1);
        *(_WORD *)&v140[8] = 2050;
        *(double *)v141 = v116;
        *(_WORD *)&v141[8] = 2050;
        *(_QWORD *)v142 = v55;
        *(_WORD *)&v142[8] = 2050;
        *(_QWORD *)v143 = v56;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Propagating,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,speed,%{public}.1lf,speedLimit,%{public}.1lf", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102195490);
        v89 = *(_QWORD *)(a2 + 76);
        v90 = *((_QWORD *)a1 + 1);
        v91 = *((_QWORD *)a1 + 2);
        v101 = 134350337;
        v102 = v89;
        v103 = 2049;
        v104 = v117;
        v105 = 2049;
        v106 = *((_QWORD *)&v117 + 1);
        v107 = 2050;
        v108 = v116;
        v109 = 2050;
        v110 = v90;
        v111 = 2050;
        v112 = v91;
        LODWORD(v95) = 62;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,Propagating,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,speed,%{public}.1lf,speedLimit,%{public}.1lf", &v101, v95);
        v93 = (uint8_t *)v92;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v92);
        if (v93 != buf)
          free(v93);
      }
    }
    v57 = *(double *)(a2 + 76);
    a1[6] = v57;
    *(_OWORD *)(a2 + 4) = v117;
    *(double *)(a2 + 60) = v116;
    *(_QWORD *)(a2 + 52) = 0x3FC999999999999ALL;
    *(_QWORD *)(a2 + 68) = 0x4008000000000000;
    *(_OWORD *)(a2 + 28) = xmmword_101BAFEE0;
    v58 = *(_DWORD *)(a2 + 96);
    if (v58 != 3)
      *(_OWORD *)(a2 + 44) = v96;
    v59 = a1[4];
    if (v59 <= 0.0)
    {
      v61 = 0.0;
      v63 = -1.0;
    }
    else
    {
      v60 = (double *)(a2 + 36);
      v61 = a1[5];
      *(double *)(a2 + 28) = v61;
      v62 = v59 + v32 * 0.15;
      *(double *)(a2 + 36) = v62;
      if (v62 > 200.0)
        v60 = (double *)&unk_101C30750;
      v63 = *v60;
      *(double *)(a2 + 36) = *v60;
    }
    *(_QWORD *)(a2 + 20) = 0x4024000000000000;
    v70 = (double *)(a2 + 20);
    v71 = 10.0;
    if ((v58 & 0xFFFFFFF7) == 1)
    {
      v72 = a1[3] + v32 * 0.5;
      *v70 = v72;
      v73 = (double *)&unk_101C30758;
      if (v72 >= 10.0)
        v73 = v70;
      v74 = *v73;
      *v70 = *v73;
      v75 = (double *)&unk_101C30760;
      if (v74 <= 149.0)
        v75 = v70;
      v71 = *v75;
      *v70 = *v75;
    }
    v30 = 1;
    sub_100F5E954((uint64_t)a1, (uint64_t)v113, 1, v57, v71, v61, v63);
    goto LABEL_124;
  }
  if (a4)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v69 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,solution moved away from tunnel", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102195490);
      LOWORD(v101) = 0;
      LODWORD(v95) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,NotPropagating,solution moved away from tunnel", &v101, v95);
      v66 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "%s\n", v94);
LABEL_159:
      if (v66 != buf)
        free(v66);
    }
  }
LABEL_123:
  v30 = 0;
LABEL_124:
  sub_1000F34E0(v97);
  sub_100F5EA24((uint64_t)v113);
LABEL_125:
  sub_1001A5CBC(v99);
  if (SHIBYTE(v122) < 0)
    operator delete(*((void **)&v121 + 1));
  return v30;
}

void sub_100F5E84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  sub_1000F34E0(&a14);
  sub_100F5EA24((uint64_t)&a29);
  sub_1001A5CBC(&a18);
  if (a64 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F5E8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 65);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 65) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_100F5F150((_QWORD *)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  return a1;
}

void sub_100F5E940(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void *sub_100F5E954(uint64_t a1, uint64_t a2, char a3, double a4, double a5, double a6, double a7)
{
  uint64_t v13;
  void *result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v19;

  *(double *)(a1 + 56) = a4;
  v13 = a1 + 64;
  result = sub_100349198((_QWORD *)(a1 + 64), (uint64_t *)a2);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 112) = v15;
  v17 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 120) = v17;
  if (v13 != a2)
    result = sub_100F5F1C8((char *)(a1 + 152), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  *(_BYTE *)a1 = a3;
  *(double *)(a1 + 32) = a7;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 24) = a5;
  v18 = *(_QWORD *)(a1 + 64);
  if (v18)
  {
    v19 = *(double *)(v18 + 32);
    if (v19 <= 0.0)
      v19 = -1.0;
    *(double *)(a1 + 16) = v19;
  }
  return result;
}

uint64_t sub_100F5EA24(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  return sub_100261F44(a1);
}

void sub_100F5EA54(uint64_t a1, __int128 *a2)
{
  double v3;
  double v5;
  uint64_t v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;

  v3 = *((double *)a2 + 1);
  *(double *)a1 = v3;
  if (*((_BYTE *)a2 + 264))
  {
    v27 = 0.0;
    v28 = 0;
    v25 = 0.0;
    v26 = 0.0;
    v24 = 0.0;
    *(_BYTE *)(a1 + 56) = 0;
    if (!*(_DWORD *)(a1 + 8))
    {
      v7 = 1;
      v8 = 0.0;
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
LABEL_10:
      v12 = *(double *)(a1 + 16);
      v13 = *(double *)(a1 + 24);
      *(_DWORD *)(a1 + 8) = v7;
      *(double *)(a1 + 16) = v11 + v12;
      *(double *)(a1 + 24) = v10 + v13;
      v14 = v8 + *(double *)(a1 + 40);
      *(double *)(a1 + 32) = v9 + *(double *)(a1 + 32);
      *(double *)(a1 + 40) = v14;
      v15 = *a2;
      v16 = a2[1];
      v17 = a2[3];
      *(_OWORD *)(a1 + 96) = a2[2];
      *(_OWORD *)(a1 + 112) = v17;
      *(_OWORD *)(a1 + 64) = v15;
      *(_OWORD *)(a1 + 80) = v16;
      v18 = a2[4];
      v19 = a2[5];
      v20 = a2[7];
      *(_OWORD *)(a1 + 160) = a2[6];
      *(_OWORD *)(a1 + 176) = v20;
      *(_OWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 144) = v19;
      std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 8));
      memcpy((void *)(a1 + 216), (char *)a2 + 152, 0x118uLL);
      return;
    }
    v5 = v3 - *(double *)(a1 + 72);
    if (v5 >= 0.0 && v5 <= 2.2)
    {
      if (!sub_10011E780((double *)(a1 + 496), &v25, &v24, (double *)&v28, *((double *)a2 + 36), *((double *)a2 + 37), *((double *)a2 + 9), *(double *)(a1 + 352), *(double *)(a1 + 360), *(double *)(a1 + 136))|| sqrt(v24 * v24 + v25 * v25) / v5 > 3.8|| !*((_BYTE *)a2 + 228)&& *((double *)a2 + 12) > 2.2&& !sub_10011E780((double *)(a1 + 496), &v27, &v26, (double *)&v28, *((double *)a2 + 7),
              *((double *)a2 + 8),
              *((double *)a2 + 9),
              *(double *)(a1 + 120),
              *(double *)(a1 + 128),
              *(double *)(a1 + 136)))
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 41) = 0u;
        sub_100F5F328(a1 + 64);
        return;
      }
      v22 = 0.0;
      v23 = 0;
      sub_1010B9950((double *)(a1 + 496), (double *)&v23, &v22, *((double *)a2 + 36), *((double *)a2 + 37), *((double *)a2 + 9), *((double *)a2 + 21), *((double *)a2 + 7), *((double *)a2 + 8));
      v21 = v22;
      if (v22 > *(double *)(a1 + 48))
        *(_BYTE *)(a1 + 56) = 1;
      *(double *)(a1 + 48) = v21;
      v10 = v26;
      v11 = v27;
      v8 = v24;
      v9 = v25;
      v7 = *(_DWORD *)(a1 + 8) + 1;
      goto LABEL_10;
    }
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 41) = 0u;
    v6 = a1 + 64;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    v6 = a1 + 64;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 41) = 0u;
  }
  sub_100F5F328(v6);
}

BOOL sub_100F5EC98(uint64_t *a1, int a2)
{
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  _BYTE v25[38];
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  _BYTE v29[38];

  if (*((_DWORD *)a1 + 2) < 4u)
    return 0;
  v3 = sqrt(*((double *)a1 + 3) * *((double *)a1 + 3) + *((double *)a1 + 2) * *((double *)a1 + 2));
  v4 = sqrt(*((double *)a1 + 5) * *((double *)a1 + 5) + *((double *)a1 + 4) * *((double *)a1 + 4));
  if (*((_BYTE *)a1 + 56))
  {
    v5 = v3 - v4;
    if (*((double *)a1 + 6) > 15.0 && v5 > 29.0)
    {
      if (a2)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102195490);
        v6 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          v7 = *a1;
          v8 = a1[6];
          *(_DWORD *)buf = 134350080;
          v27 = v7;
          v28 = 2050;
          *(_QWORD *)v29 = v8;
          *(_WORD *)&v29[8] = 2050;
          *(double *)&v29[10] = v3;
          *(_WORD *)&v29[18] = 2050;
          *(double *)&v29[20] = v4;
          *(_WORD *)&v29[28] = 2050;
          *(_QWORD *)&v29[30] = 0x403D000000000000;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLMM,%{public}.1lf,detected stuck,alongTrackRawToSnap,%{public}.1lf,deltaPosChange,%{public}.1lf,deltaSnapChange,%{public}.1lf,thresholdDiff,%{public}.1lf", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102195490);
          v18 = *a1;
          v19 = a1[6];
          v22 = 134350080;
          v23 = v18;
          v24 = 2050;
          *(_QWORD *)v25 = v19;
          *(_WORD *)&v25[8] = 2050;
          *(double *)&v25[10] = v3;
          *(_WORD *)&v25[18] = 2050;
          *(double *)&v25[20] = v4;
          *(_WORD *)&v25[28] = 2050;
          *(_QWORD *)&v25[30] = 0x403D000000000000;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,%{public}.1lf,detected stuck,alongTrackRawToSnap,%{public}.1lf,deltaPosChange,%{public}.1lf,deltaSnapChange,%{public}.1lf,thresholdDiff,%{public}.1lf", &v22, 52);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::StuckAtEndOfRoad::isStuckAtEndOfRoad(const BOOL)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
      }
      return 1;
    }
  }
  else
  {
    v5 = v3 - v4;
  }
  if (v5 <= 5.0 || a2 == 0)
    return 0;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102195490);
  v11 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = *a1;
    v13 = *((unsigned __int8 *)a1 + 56);
    *(_DWORD *)buf = 134350080;
    v27 = v12;
    v28 = 1026;
    *(_DWORD *)v29 = v13;
    *(_WORD *)&v29[4] = 2050;
    *(double *)&v29[6] = v3;
    *(_WORD *)&v29[14] = 2050;
    *(double *)&v29[16] = v4;
    *(_WORD *)&v29[24] = 2050;
    *(_QWORD *)&v29[26] = 0x403D000000000000;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf,isMovingAway,%{public}d,deltaPosChange,%{public}.1lf,deltaSnapChange,%{public}.1lf,thresholdDiff,%{public}.1lf", buf, 0x30u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102195490);
    v14 = *a1;
    v15 = *((unsigned __int8 *)a1 + 56);
    v22 = 134350080;
    v23 = v14;
    v24 = 1026;
    *(_DWORD *)v25 = v15;
    *(_WORD *)&v25[4] = 2050;
    *(double *)&v25[6] = v3;
    *(_WORD *)&v25[14] = 2050;
    *(double *)&v25[16] = v4;
    *(_WORD *)&v25[24] = 2050;
    *(_QWORD *)&v25[26] = 0x403D000000000000;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM, %{public}.1lf,isMovingAway,%{public}d,deltaPosChange,%{public}.1lf,deltaSnapChange,%{public}.1lf,thresholdDiff,%{public}.1lf", &v22, 48);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::StuckAtEndOfRoad::isStuckAtEndOfRoad(const BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
    return 0;
  }
  return result;
}

BOOL sub_100F5F0D4(double *a1, double a2, double a3)
{
  return vabdd_f64(a2, *a1) >= a3;
}

double *sub_100F5F0E8(double *result, double a2)
{
  double *v2;

  if (*result >= 0.0)
  {
    v2 = result + 1;
    if (vabdd_f64(result[1], a2) > 6.0)
      *result = a2;
  }
  else
  {
    *result++ = a2;
    v2 = result;
  }
  *v2 = a2;
  return result;
}

void sub_100F5F124(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

_QWORD *sub_100F5F150(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100E28088(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100F5F1AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100F5F1C8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x8E38E38E38E38E39 * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x38E38E38E38E38ELL)
      sub_100259694();
    v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x1C71C71C71C71C7)
      v12 = 0x38E38E38E38E38ELL;
    else
      v12 = v11;
    result = sub_100E28088(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 4;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x8E38E38E38E38E39 * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 4;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void sub_100F5F328(uint64_t a1)
{
  _BYTE v7[88];
  __int128 v8;
  _BYTE v9[280];

  __asm { FMOV            V0.2D, #-1.0 }
  *(_QWORD *)v7 = 0xBFF0000000000000;
  *(_QWORD *)&v9[120] = 0;
  *(_DWORD *)&v9[128] = 0;
  memset(&v9[80], 0, 34);
  memset(&v9[136], 0, 75);
  memset(&v9[216], 0, 56);
  memset(&v7[8], 0, 80);
  memset(v9, 0, 78);
  v8 = 0u;
  *(_QWORD *)&v9[272] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
  *(_OWORD *)a1 = 0uLL;
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&v7[48];
  *(_OWORD *)(a1 + 112) = *(_OWORD *)&v7[64];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v7[16];
  *(_OWORD *)(a1 + 80) = *(_OWORD *)&v7[32];
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)&v7[80]);
  memcpy((void *)(a1 + 152), v9, 0x118uLL);
  if (SHIBYTE(v8) < 0)
    operator delete(*(void **)&v7[80]);
}

void sub_100F5F41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F5F9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F5FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100D7C59C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F5FD64(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100F5FD90()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100F5FE2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100F5FE44()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100F5FED0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100F5FEE8(uint64_t a1, uint64_t a2)
{
  return sub_100F5FEF4(a1, a2, (const char **)&off_1021954D0);
}

uint64_t sub_100F5FEF4(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  v5 = sub_100631F84(a1, a2);
  if (sub_1000CC4F4(v5))
  {
    sub_100634364(a1, "Vertices", a3, 0, 0);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102195590);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Fence: No access to vertices DB", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102195590);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: No access to vertices DB", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLFenceVertexDatabase::CLFenceVertexDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return a1;
}

void sub_100F600B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006322C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F600D0(uint64_t a1, _QWORD *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  _DWORD v25[2];
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t buf[8];
  __int16 v30;
  uint64_t v31;
  char v32;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102195590);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v7 = (uint64_t)(a2[1] - *a2) >> 4;
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = a3;
    v30 = 2050;
    v31 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: addVertices, key, %{public}d, num %{public}lu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102195590);
    v19 = (uint64_t)(a2[1] - *a2) >> 4;
    v25[0] = 67240448;
    v25[1] = a3;
    v26 = 2050;
    v27 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: addVertices, key, %{public}d, num %{public}lu", v25, 18);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceVertexDatabase::addVertices(const std::vector<CLClientLocationCoordinate> &, int)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (a3 != -1)
  {
    sub_100263E50((uint64_t)v25);
    v9 = sub_100263F7C((uint64_t *)((char *)&v27 + 6), (uint64_t)"INSERT INTO ", 12);
    v10 = sub_100263F7C(v9, (uint64_t)"Vertices", 8);
    v11 = sub_100263F7C(v10, (uint64_t)" (", 2);
    v12 = sub_100263F7C(v11, (uint64_t)"Latitude", 8);
    v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
    v14 = sub_100263F7C(v13, (uint64_t)"Longitude", 9);
    v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
    v16 = sub_100263F7C(v15, (uint64_t)"FenceForeignKey", 15);
    sub_100263F7C(v16, (uint64_t)") VALUES (?, ?, ?)", 18);
    std::stringbuf::str(buf, &v28);
    if (v32 >= 0)
      v17 = (char *)buf;
    else
      v17 = *(char **)buf;
    sub_1000CDA68(a1, v17);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102195590);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Fence: attempting to add vertices to db without a key", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102195590);
    LOWORD(v25[0]) = 0;
    LODWORD(v24) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: attempting to add vertices to db without a key", v25, v24);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceVertexDatabase::addVertices(const std::vector<CLClientLocationCoordinate> &, int)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  return 0;
}

void sub_100F60740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_100F6079C(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint64_t v13;
  _QWORD v14[8];
  uint8_t buf[8];
  char v16;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102195590);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: Removing vertices, key, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102195590);
    v12[0] = 67240192;
    v12[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Removing vertices, key, %{public}d", v12, 8);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceVertexDatabase::removeVertices(int)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_100263E50((uint64_t)v12);
  v5 = sub_100263F7C(&v13, (uint64_t)"DELETE FROM ", 12);
  v6 = sub_100263F7C(v5, (uint64_t)"Vertices", 8);
  v7 = sub_100263F7C(v6, (uint64_t)" WHERE ", 7);
  v8 = sub_100263F7C(v7, (uint64_t)"FenceForeignKey", 15);
  sub_100263F7C(v8, (uint64_t)"=?", 2);
  std::stringbuf::str(buf, v14);
  if (v16 >= 0)
    v9 = (char *)buf;
  else
    v9 = *(char **)buf;
  sub_1000CDA68(a1, v9);
}

void sub_100F60C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_100F60C60(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  char v17;

  a3[1] = *a3;
  sub_100263E50((uint64_t)&v13);
  v4 = sub_100263F7C(&v14, (uint64_t)"SELECT ", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"Latitude", 8);
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = sub_100263F7C(v6, (uint64_t)"Longitude", 9);
  v8 = sub_100263F7C(v7, (uint64_t)" FROM ", 6);
  v9 = sub_100263F7C(v8, (uint64_t)"Vertices", 8);
  v10 = sub_100263F7C(v9, (uint64_t)" WHERE ", 7);
  v11 = sub_100263F7C(v10, (uint64_t)"FenceForeignKey", 15);
  sub_100263F7C(v11, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v15);
  if (v17 >= 0)
    v12 = (char *)__p;
  else
    v12 = (char *)__p[0];
  sub_1000CDA68(a1, v12);
}

void sub_100F6139C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100F61408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 4;
  if (v6 < (v3 - (uint64_t)v4) >> 4)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 16 * v6;
    }
    else
    {
      v7 = (char *)sub_10028E224(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[16 * v6];
      v11 = &v7[16 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          *(_OWORD *)(v12 - 16) = *((_OWORD *)v8 - 1);
          v12 -= 16;
          v8 -= 16;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_100F614CC(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100F61580()
{
  operator delete();
}

void sub_100F619BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F61A64(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

_QWORD *sub_100F61A90(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *result;

  result = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *result = &off_1021955E0;
  return result;
}

void sub_100F61AB4(uint64_t a1)
{
  sub_10002FA68(a1);
  operator delete();
}

_QWORD *sub_100F61AD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[32];

  v15[0] = off_102195680;
  v15[1] = sub_100F61DF0;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v17, "kCLConnectionMessageKappaStatsAvailable");
  sub_100BBCD28((uint64_t)&v18, (uint64_t)v15);
  v13[0] = off_102195680;
  v13[1] = sub_100F61F48;
  v13[2] = 0;
  v14 = v13;
  sub_1015A2E04(v19, "kCLConnectionMessageKappaSendAPCommand");
  sub_100BBCD28((uint64_t)&v20, (uint64_t)v13);
  v11[0] = off_102195680;
  v11[1] = sub_100F62578;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v21, "kCLConnectionMessageSafetyAnomalyNotify");
  sub_100BBCD28((uint64_t)v22, (uint64_t)v11);
  sub_100F62E5C(a1, (unsigned __int8 *)v17, 3);
  for (i = 0; i != -21; i -= 7)
  {
    v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      v3 = &v22[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v12)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v14)
  {
    v8 = 5;
    goto LABEL_19;
  }
  result = v16;
  if (v16 == v15)
  {
    v10 = 4;
    result = v15;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  else if (v16)
  {
    v10 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

void sub_100F61CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  for (i = 112; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a21 + i));
  v23 = a12;
  if (a12 == &a9)
  {
    v24 = 4;
    v23 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  v25 = a16;
  if (a16 == &a13)
  {
    v26 = 4;
    v25 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_13:
  v27 = a20;
  if (a20 == &a17)
  {
    v28 = 4;
    v27 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_100F61DF0(uint64_t a1, _QWORD *a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[2];
  uint64_t v13;
  void *v14;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_100F6286C(a1, v12);
  v9 = v8;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v9)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (v8)
  {
LABEL_9:
    v13 = CMAvailable;
    v14 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
    CLConnectionMessage::sendReply(*a2);
  }
LABEL_10:

}

void sub_100F61F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100F61F48(uint64_t a1, uint64_t a2)
{
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  void *Dictionary;
  id v13;
  id v14;
  unsigned int v15;
  id v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  CLConnectionMessage *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  CLConnectionMessage *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  _DWORD v33[2];
  __int16 v34;
  int v35;
  uint8_t buf[4];
  unsigned int v37;
  __int16 v38;
  int v39;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v27 = *(CLConnectionMessage **)a2;
  v28 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_100F6286C(a1, (uint64_t *)&v27);
  v9 = v8;
  if (!v5)
    goto LABEL_8;
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((v9 & 1) == 0)
      goto LABEL_42;
  }
  else
  {
LABEL_8:
    if ((v8 & 1) == 0)
      goto LABEL_42;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  v13 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMKappaCmdKey);
  v14 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMKappaArgKey);
  v15 = objc_msgSend(v13, "intValue");
  v16 = objc_msgSend(v14, "intValue");
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_102195630);
  v17 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    v37 = v15;
    v38 = 1024;
    v39 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "received AP command %d arg %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102195630);
    v33[0] = 67109376;
    v33[1] = v15;
    v34 = 1024;
    v35 = (int)v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "received AP command %d arg %d", v33, 14);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLSafetyAnomalySubscription::handleMessageKappaSendAPCommand(std::shared_ptr<CLConnectionMessage>)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  v18 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
  v19 = 2;
  switch(v15)
  {
    case 0u:
      objc_msgSend(v18, "startDem");
      goto LABEL_40;
    case 1u:
      objc_msgSend(v18, "stopDem");
      goto LABEL_40;
    case 2u:
      objc_msgSend(v18, "forceCompanionHeartbeat");
      goto LABEL_40;
    case 3u:
      objc_msgSend(v18, "remoteTimeout");
      goto LABEL_40;
    case 4u:
      objc_msgSend(v18, "collect:isLocal:", 65793, 1);
      goto LABEL_40;
    case 5u:
      objc_msgSend(v18, "dontcollect:isLocal:", 257, 1);
      goto LABEL_40;
    case 6u:
      objc_msgSend(v18, "simulateTriggerWithDelay:", v16, 2);
      goto LABEL_40;
    case 7u:
      goto LABEL_38;
    case 8u:
      v19 = 4;
LABEL_38:
      objc_msgSend(v18, "simulateTriggerWithDelay:forMode:", v16, v19);
      goto LABEL_40;
    case 9u:
      objc_msgSend(v18, "collect:isLocal:", 0x101000001, 1);
      goto LABEL_40;
    case 0xAu:
      objc_msgSend(v18, "dontcollect:isLocal:", 16777217, 1);
      goto LABEL_40;
    case 0xBu:
      objc_msgSend(v18, "collect:isLocal:", 0x1010000000001, 1);
      goto LABEL_40;
    case 0xCu:
      objc_msgSend(v18, "dontcollect:isLocal:", 0x10000000001, 1);
      goto LABEL_40;
    case 0xDu:
      objc_msgSend(v18, "collect:isLocal:", 0x100000101000001, 1);
      goto LABEL_40;
    case 0xEu:
      objc_msgSend(v18, "dontcollect:isLocal:", 0x100000001000001, 1);
      goto LABEL_40;
    case 0xFu:
      objc_msgSend(v18, "simulateTrustedCrashVerification");
      goto LABEL_40;
    case 0x10u:
      objc_msgSend(v18, "queryTrustedCrashVerification");
LABEL_40:
      v21 = *(CLConnectionMessage **)a2;
      v29 = CMReturnCode;
      v30 = &__kCFBooleanTrue;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
      break;
    default:
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_102195630);
      v20 = qword_10229FDA8;
      if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "invalid AP command", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_102195630);
        LOWORD(v33[0]) = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 1, "invalid AP command", v33, v26, v27, v28);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLSafetyAnomalySubscription::handleMessageKappaSendAPCommand(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      v21 = *(CLConnectionMessage **)a2;
      v31 = CMReturnCode;
      v32 = &__kCFBooleanFalse;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
      break;
  }
  CLConnectionMessage::sendReply(v21);
LABEL_42:

}

void sub_100F624C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100F62578(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  CLConnectionMessage *v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19[2];
  uint64_t v20;
  void *v21;
  int v22;
  id v23;
  uint8_t buf[4];
  id v25;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v19[0] = *(_QWORD *)a2;
  v19[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = sub_100F6286C(a1, v19);
  v8 = v7;
  if (!v4)
    goto LABEL_8;
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((v8 & 1) == 0)
      return;
  }
  else
  {
LABEL_8:
    if ((v7 & 1) == 0)
      return;
  }
  v11 = objc_msgSend(objc_msgSend((id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2), "objectForKeyedSubscript:", CMSafetyAnomalyPropertiesKey), "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Guid"));
  if (qword_10229FFC0 != -1)
    dispatch_once(&qword_10229FFC0, &stru_102195650);
  v12 = qword_10229FFC8;
  if (os_log_type_enabled((os_log_t)qword_10229FFC8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = objc_msgSend(v11, "UTF8String");
    *(_DWORD *)buf = 136315138;
    v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handleMessageSafetyAnomalyNotification, retrieved guid %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFC0 != -1)
      dispatch_once(&qword_10229FFC0, &stru_102195650);
    v15 = qword_10229FFC8;
    v16 = objc_msgSend(v11, "UTF8String");
    v22 = 136315138;
    v23 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "handleMessageSafetyAnomalyNotification, retrieved guid %s", (const char *)&v22);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLSafetyAnomalySubscription::handleMessageSafetyAnomalyNotification(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier")), "forceTriggerIgneous:", v11);
  v14 = *(CLConnectionMessage **)a2;
  v20 = CMReturnCode;
  v21 = &__kCFBooleanTrue;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
  CLConnectionMessage::sendReply(v14);
}

void sub_100F62850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F6286C(uint64_t a1, uint64_t *a2)
{
  char v4;
  char v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  _UNKNOWN **v20;
  uint64_t v21;
  _UNKNOWN **v22;
  int v23;
  uint64_t v24;
  _BYTE __p[12];
  char v26;

  sub_1015A2E04(__p, "com.apple.locationd.activity");
  v4 = sub_1002255E0(a1);
  v5 = v4;
  if (v26 < 0)
  {
    operator delete(*(void **)__p);
    if ((v5 & 1) != 0)
      goto LABEL_3;
LABEL_6:
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102195630);
    v7 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)__p = 138477827;
      *(_QWORD *)&__p[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Client %{private}@ does not have appropriate motion entitlement.", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_102195630);
      v13 = *(_QWORD *)(a1 + 24);
      v23 = 138477827;
      v24 = v13;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FDA8, 16, "Client %{private}@ does not have appropriate motion entitlement.", &v23, 12);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSafetyAnomalySubscription::sanityChecksForKappa(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v15 != __p)
        free(v15);
    }
    v9 = *a2;
    v21 = CMErrorMessage;
    v22 = &off_10221C3F8;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    CLConnectionMessage::sendReply(v9);
    return 0;
  }
  if ((v4 & 1) == 0)
    goto LABEL_6;
LABEL_3:
  if (sub_10142EA34())
    return 1;
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_102195630);
  v10 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
  {
    v11 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)__p = 138477827;
    *(_QWORD *)&__p[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Client %{private}@ is not available on this platform.", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102195630);
    v16 = *(_QWORD *)(a1 + 24);
    v23 = 138477827;
    v24 = v16;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FDA8, 16, "Client %{private}@ is not available on this platform.", &v23, 12);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLSafetyAnomalySubscription::sanityChecksForKappa(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
    if (v18 != __p)
      free(v18);
  }
  v12 = *a2;
  v19 = CMErrorMessage;
  v20 = &off_10221C410;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
  CLConnectionMessage::sendReply(v12);
  return 0;
}

void sub_100F62C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F62C64(id a1)
{
  qword_10229FDA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Kappa");
}

void sub_100F62C90(id a1)
{
  qword_10229FFC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Igneous");
}

__n128 sub_100F62CBC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102195680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F62CF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102195680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F62D1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100F62D6C(a1 + 8, a2, a3);
}

uint64_t sub_100F62D24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F62D60()
{
}

void sub_100F62D6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100F62E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100F62E5C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100F62ED4(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100F62EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F62ED4(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100F63154(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100F6313C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F63154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100F631C8(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100F631B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F631C8(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F63220(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F6323C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  float v9;
  uint64_t v10;
  double v11;
  double Current;
  _BYTE v13[24];
  _BYTE *v14;

  result = 0;
  if (*(double *)(a2 + 288) == -1.79769313e308 || *(double *)(a2 + 328) != 0.0)
    return result;
  Current = CFAbsoluteTimeGetCurrent();
  v11 = Current + -8.0;
  v10 = 0;
  v9 = 0.0;
  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v5 = operator new(0x30uLL);
  *v5 = off_102195710;
  v5[1] = &v11;
  v5[2] = &Current;
  v5[3] = (char *)&v10 + 4;
  v5[4] = &v10;
  v5[5] = &v9;
  v14 = v5;
  sub_100623698(v4, (uint64_t)v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
  if (SHIDWORD(v10) < 6)
    return 0;
  if ((float)(*(float *)&v10 - v9) > 2.0 || *(float *)&v10 > 6.0)
    return 2;
  else
    return 1;
}

void sub_100F63384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F633BC(_DWORD *a1)
{
  int v1;

  v1 = *a1 - 4;
  if (v1 > 8)
    return 0;
  else
    return byte_101C3157E[v1];
}

std::string *sub_100F633E4@<X0>(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  unint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  double *v11;
  std::string *result;
  double v13;
  double Current;
  int v15;
  char __str[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[1152];

  v15 = 0;
  v4 = v34;
  for (i = 7; i > 1; --i)
  {
    v4[8] = xmmword_101C31358;
    v4[9] = unk_101C31368;
    v4[10] = xmmword_101C31378;
    v4[11] = unk_101C31388;
    v4[4] = xmmword_101C31318;
    v4[5] = unk_101C31328;
    v4[6] = xmmword_101C31338;
    v4[7] = unk_101C31348;
    *v4 = xmmword_101C312D8;
    v4[1] = unk_101C312E8;
    v4[2] = xmmword_101C312F8;
    v4[3] = unk_101C31308;
    v4 += 12;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v13 = Current + -8.0;
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v7 = operator new(0x28uLL);
  *v7 = off_102195790;
  v7[1] = &v13;
  v7[2] = &Current;
  v7[3] = &v15;
  v7[4] = v34;
  v33 = v7;
  sub_100623698(v6, (uint64_t)v32);
  v8 = v33;
  if (v33 == v32)
  {
    v9 = 4;
    v8 = v32;
    goto LABEL_7;
  }
  if (v33)
  {
    v9 = 5;
LABEL_7:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  sub_1015A2E04(a2, "");
  v10 = 0;
  v11 = (double *)v34;
  do
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__str = 0u;
    snprintf(__str, 0x100uLL, "gpsStartTime%d,%.4f,gpsRawSpeed%d,%.4f,gpsDist%d,%.4f", v10, *v11, v10, v11[5], v10, v11[1]);
    result = std::string::append(a2, __str);
    if (v10 <= 4)
      result = std::string::append(a2, ",");
    ++v10;
    v11 += 24;
  }
  while (v10 != 6);
  return result;
}

void sub_100F635EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  _Unwind_Resume(exception_object);
}

void sub_100F63648()
{
  operator delete();
}

__n128 sub_100F6365C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = off_102195710;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_100F636A4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = off_102195710;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float sub_100F636D4(uint64_t a1, double *a2)
{
  double v2;
  int *v3;
  int v4;
  unsigned int v5;
  float **v6;
  float *v7;

  v2 = *a2;
  if (*a2 >= **(double **)(a1 + 8) && v2 <= **(double **)(a1 + 16))
  {
    v3 = *(int **)(a1 + 24);
    v4 = *v3;
    v5 = *v3 + 1;
    *v3 = v5;
    if (v4 <= 2)
    {
      v6 = (float **)(a1 + 32);
LABEL_7:
      v7 = *v6;
      *(float *)&v2 = a2[1] + *v7;
      *v7 = *(float *)&v2;
      return *(float *)&v2;
    }
    if (v5 <= 6)
    {
      v6 = (float **)(a1 + 40);
      goto LABEL_7;
    }
  }
  return *(float *)&v2;
}

uint64_t sub_100F63744(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F63780()
{
}

void sub_100F63790()
{
  operator delete();
}

__n128 sub_100F637A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_102195790;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100F637E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102195790;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_100F6380C(uint64_t a1, __int128 *a2)
{
  __n128 result;
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  result.n128_u64[0] = *(_QWORD *)a2;
  if (*(double *)a2 >= **(double **)(a1 + 8) && result.n128_f64[0] <= **(double **)(a1 + 16))
  {
    v3 = **(_DWORD **)(a1 + 24);
    if (v3 <= 5)
    {
      v4 = *(_QWORD *)(a1 + 32) + 192 * v3;
      v5 = *a2;
      v6 = a2[1];
      v7 = a2[3];
      *(_OWORD *)(v4 + 32) = a2[2];
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)v4 = v5;
      *(_OWORD *)(v4 + 16) = v6;
      v8 = a2[4];
      v9 = a2[5];
      v10 = a2[7];
      *(_OWORD *)(v4 + 96) = a2[6];
      *(_OWORD *)(v4 + 112) = v10;
      *(_OWORD *)(v4 + 64) = v8;
      *(_OWORD *)(v4 + 80) = v9;
      result = (__n128)a2[8];
      v11 = a2[9];
      v12 = a2[11];
      *(_OWORD *)(v4 + 160) = a2[10];
      *(_OWORD *)(v4 + 176) = v12;
      *(__n128 *)(v4 + 128) = result;
      *(_OWORD *)(v4 + 144) = v11;
      ++**(_DWORD **)(a1 + 24);
    }
  }
  return result;
}

uint64_t sub_100F63890(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F638CC()
{
}

void sub_100F638D8(id a1)
{
  qword_102309238 = [CLClientKeyPath_32 alloc];
  if (_os_feature_enabled_impl("CoreLocation", "cl_pula"))
  {
    strlcat((char *)(qword_102309238 + 8), (const char *)objc_msgSend((id)qword_102309230, "UTF8String"), 0x18uLL);
    strlcat((char *)(qword_102309238 + 8), ":", 0x18uLL);
  }
  strlcat((char *)(qword_102309238 + 8), "!:", 0x18uLL);
}

uint64_t sub_100F63970(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    return (objc_msgSend((id)result, "isEqualToString:", qword_102309228) & 1) != 0
        || (objc_msgSend(v1, "isEqualToString:", qword_102309230) & 1) != 0
        || sub_10051700C(v1);
  }
  return result;
}

uint64_t sub_100F64710()
{
  if (qword_102309248 != -1)
    dispatch_once(&qword_102309248, &stru_102195820);
  return qword_102309250;
}

void sub_100F64750(id a1)
{
  qword_102309250 = (uint64_t)objc_msgSend(objc_alloc((Class)NSPointerFunctions), "initWithOptions:", 0);
  objc_msgSend((id)qword_102309250, "setHashFunction:", sub_100206440);
  _objc_msgSend((id)qword_102309250, "setIsEqualFunction:", sub_100055DD0);
}

uint64_t sub_100F6479C()
{
  if (qword_102309258 != -1)
    dispatch_once(&qword_102309258, &stru_102195840);
  return qword_102309260;
}

void sub_100F647DC(id a1)
{
  qword_102309260 = (uint64_t)objc_msgSend(objc_alloc((Class)NSPointerFunctions), "initWithOptions:", 0);
}

void sub_100F64808(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

BOOL sub_100F64834()
{
  return os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100F64848()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 472), OS_LOG_TYPE_INFO);
}

void sub_100F64858()
{
  void **v0;
  NSString *v1;
  void **v2;
  NSString *v3;
  void *__p[2];
  char v5;

  sub_10142AFE8(__p);
  if (v5 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v0);
  if (v5 < 0)
    operator delete(__p[0]);
  qword_102309228 = (uint64_t)v1;
  sub_10142AFF8(__p);
  if (v5 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  if (v5 < 0)
    operator delete(__p[0]);
  qword_102309230 = (uint64_t)v3;
}

void sub_100F64914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F64934(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  std::string *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  __int128 v22;
  std::string::size_type v23;
  uuid_t out;
  uint8_t buf[16];
  _BYTE v26[21];

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a1 + 40;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = (uint64_t *)(a1 + 88);
  v6 = (std::string *)(a1 + 96);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_BYTE *)(a1 + 120) = 0;
  sub_10055D44C(a1 + 128, "CMHealthColdStorageManager", 0, 1);
  *(_WORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  v7 = (char *)operator new(0x58uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = off_1021958B0;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *((_QWORD *)v7 + 9) = 0;
  *((_QWORD *)v7 + 10) = 0;
  *((_QWORD *)v7 + 6) = v7 + 56;
  *(_QWORD *)buf = v7 + 24;
  *(_QWORD *)&buf[8] = v7;
  sub_1002B7674(v4, (__int128 *)buf);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_5;
  v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_5:
    if (!a2)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (a2)
  {
LABEL_6:
    *(_BYTE *)(a1 + 120) = 1;
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 48) = 1;
    *(_QWORD *)(a1 + 80) = -[CMHealthColdStorageCloudKitManager initWithColdStorageManager:]([CMHealthColdStorageCloudKitManager alloc], "initWithColdStorageManager:", a1);
  }
LABEL_7:
  v11 = sub_1001FD94C();
  sub_1001FD9FC(v11, (uint64_t)CFSTR("kColdStorageSyncStartTime"), v5);
  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102195880);
  v12 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *v5;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[Manager] CMHealthColdStorageManager fStartSyncTime: %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102195880);
    v19 = *v5;
    LODWORD(v22) = 134217984;
    *(_QWORD *)((char *)&v22 + 4) = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[Manager] CMHealthColdStorageManager fStartSyncTime: %f", COERCE_DOUBLE(&v22));
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "CMHealthColdStorageManager::CMHealthColdStorageManager(BOOL)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  std::string::assign(v6, "");
  v14 = sub_1001FD94C();
  sub_1000BD5F0(v14, (uint64_t)CFSTR("kColdStorageInstanceUUID"), v6);
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(_QWORD *)(a1 + 104))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(a1 + 119))
  {
    goto LABEL_19;
  }
  memset(out, 0, sizeof(out));
  uuid_generate(out);
  *(_OWORD *)buf = 0u;
  memset(v26, 0, sizeof(v26));
  uuid_unparse(out, (char *)buf);
  sub_1015A2E04(&v22, (char *)buf);
  if (*(char *)(a1 + 119) < 0)
    operator delete(v6->__r_.__value_.__l.__data_);
  *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v22;
  v6->__r_.__value_.__r.__words[2] = v23;
  v15 = sub_1001FD94C();
  sub_1005288FC(v15, CFSTR("kColdStorageInstanceUUID"), (char *)v6);
  v16 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 944))(v16);
LABEL_19:
  v17 = sub_1001FD94C();
  sub_1001E48E4(v17, (uint64_t)CFSTR("HealthColdStorageVO2MaxDeletionComplete"), (BOOL *)(a1 + 148));
  return a1;
}

void sub_100F64D04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;

  sub_10055D4D0(v5);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v4);
  sub_100F67AE0(v3, *(_QWORD **)(v1 + 64));
  sub_100261F44(v2);
  sub_100F67A20(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F64D64(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {

      *(_QWORD *)(a1 + 80) = 0;
    }
  }
  sub_100346F9C((_QWORD *)(a1 + 40));
  sub_10055D4D0(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100F67AE0(a1 + 56, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 40);
  return sub_100F67A20(a1);
}

void sub_100F64DDC(uint64_t a1, uint64_t a2, std::string::size_type a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  size_t v10;
  std::string *p_p;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string::size_type v18;
  std::string __p;
  int v20;
  void *v21[2];
  std::string::size_type v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  char v26;
  uint64_t v27;

  v25 = a4;
  v24 = a6;
  v23 = a7;
  if (*(char *)(a2 + 23) >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  p_p = &__p;
  sub_100259584((uint64_t)&__p, v10 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = (const void *)a2;
    else
      v12 = *(const void **)a2;
    memmove(p_p, v12, v10);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v10) = 46;
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a3;
  else
    v14 = *(const std::string::value_type **)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::string::append(&__p, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v22 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v21 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) >= 0)
    v18 = a3;
  else
    v18 = *(_QWORD *)a3;
  __p.__r_.__value_.__r.__words[0] = v18;
  v27 = a1;
  v20 = 1106247680;
  sub_100F67BC0((uint64_t)&v26, &__p.__r_.__value_.__l.__data_, &v25, &v27, &v23, (float *)&v20, a2, &v24);
}

void sub_100F650C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_100261F44((uint64_t)&a20);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F65130(uint64_t a1)
{
  sub_100261F44(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100F65168(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  unsigned __int16 *v26;
  NSMutableArray *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  _QWORD *v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  const char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  id v46[2];
  int v47;
  uint64_t v48;
  void *__p;
  __int128 v50;
  uint8_t buf[4];
  _QWORD v52[203];

  sub_100131938(v46, (uint64_t)"CMHealthColdStorageManager.sync", 0);
  v4 = *(uint64_t **)(a1 + 16);
  if (v4)
  {
    v5 = (unsigned __int16 *)(a1 + 144);
    v6 = (unsigned __int16 *)(a1 + 146);
    v7 = 100;
    while (1)
    {
      v8 = *((_DWORD *)v4 + 17);
      v9 = v6;
      if (v8)
      {
        if (v8 != 1)
          goto LABEL_10;
        v9 = v5;
      }
      v10 = *v9;
      if (v10 >= 0x100 && v10 == 0)
      {
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        v31 = v4 + 5;
        v32 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
        {
          v33 = v4 + 5;
          if (*((char *)v4 + 63) < 0)
            v33 = (_QWORD *)*v31;
          v34 = *((_DWORD *)v4 + 17);
          *(_DWORD *)buf = 67240450;
          LODWORD(v52[0]) = v34;
          WORD2(v52[0]) = 2082;
          *(_QWORD *)((char *)v52 + 6) = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[Manager] FitnessTracking disabled, preventing sync (source=%{public}d, table=%{public}s)", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          v35 = *((_DWORD *)v4 + 17);
          if (*((char *)v4 + 63) < 0)
            v31 = (_QWORD *)*v31;
          LODWORD(__p) = 67240450;
          HIDWORD(__p) = v35;
          LOWORD(v50) = 2082;
          *(_QWORD *)((char *)&v50 + 2) = v31;
          LODWORD(v43) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[Manager] FitnessTracking disabled, preventing sync (source=%{public}d, table=%{public}s)", &__p, v43);
          v37 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageManager::sync(ShouldInterruptCheck)", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
        goto LABEL_63;
      }
LABEL_10:
      v12 = v4[9];
      v13 = *(double *)(a1 + 88);
      v14 = *(std::__shared_weak_count **)(a1 + 48);
      v44 = *(_QWORD *)(a1 + 40);
      v45 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v7 = sub_1004A95AC(v12, a1 + 96, &v44, v13);
      v17 = v45;
      if (v45)
      {
        v18 = (unint64_t *)&v45->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102195880);
      v20 = v4 + 2;
      v21 = qword_10229FFA8;
      if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
      {
        v22 = v4 + 2;
        if (*((char *)v4 + 39) < 0)
          v22 = (_QWORD *)*v20;
        *(_DWORD *)buf = 67109378;
        LODWORD(v52[0]) = v7;
        WORD2(v52[0]) = 2080;
        *(_QWORD *)((char *)v52 + 6) = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[Manager] syncFromHot returned %d for DB: %s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        if (*((char *)v4 + 39) < 0)
          v20 = (_QWORD *)*v20;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v7;
        LOWORD(v50) = 2080;
        *(_QWORD *)((char *)&v50 + 2) = v20;
        LODWORD(v43) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[Manager] syncFromHot returned %d for DB: %s", &__p, v43);
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageManager::sync(ShouldInterruptCheck)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      if (((_DWORD)v7 == 112 || (_DWORD)v7 == 100) && sub_1004AAEA4(v4[9]))
      {
        v23 = v4[9];
        v50 = 0uLL;
        __p = 0;
        sub_10027205C(&__p, *(const void **)(v23 + 312), *(_QWORD *)(v23 + 320), (uint64_t)(*(_QWORD *)(v23 + 320) - *(_QWORD *)(v23 + 312)) >> 2);
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        v24 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          v52[0] = (uint64_t)(v50 - (_QWORD)__p) >> 2;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "[Manager] Number of pending samples to send to cloud: %zu", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          v47 = 134217984;
          v48 = (uint64_t)(v50 - (_QWORD)__p) >> 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[Manager] Number of pending samples to send to cloud: %zu", (size_t)&v47);
          v41 = (uint8_t *)v40;
          sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageManager::sync(ShouldInterruptCheck)", "%s\n", v40);
          if (v41 != buf)
            free(v41);
        }
        v25 = __p;
        if (__p == (void *)v50)
        {
          v6 = (unsigned __int16 *)(a1 + 146);
          if (__p)
            goto LABEL_58;
        }
        else
        {
          v26 = v5;
          v27 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (uint64_t)(v50 - (_QWORD)__p) >> 2);
          v29 = (unsigned int *)__p;
          v28 = (unsigned int *)v50;
          while (v29 != v28)
          {
            v30 = a1 + 96;
            if (*(char *)(a1 + 119) < 0)
              v30 = *(_QWORD *)(a1 + 96);
            -[NSMutableArray addObject:](v27, "addObject:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d-%s"), *v29++, v30));
          }
          v5 = v26;
          v6 = (unsigned __int16 *)(a1 + 146);
          if (!*(_BYTE *)(a1 + 120)
            || (objc_msgSend(*(id *)(a1 + 80), "addPendingRecordChanges:forZoneName:", +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v27), objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4[9] + 72) + 40))(v4[9] + 72), "zoneName")) & 1) != 0)
          {
            *(_QWORD *)(v4[9] + 320) = *(_QWORD *)(v4[9] + 312);
          }
          v25 = __p;
          if (__p)
          {
LABEL_58:
            *(_QWORD *)&v50 = v25;
            operator delete(v25);
          }
        }
      }
      else if (!sub_1004AAEA4(v4[9]))
      {
        *(_QWORD *)(v4[9] + 320) = *(_QWORD *)(v4[9] + 312);
      }
      if (a2 && ((*(uint64_t (**)(uint64_t))(a2 + 16))(a2) & 1) != 0 || (_DWORD)v7 != 112 && (_DWORD)v7 != 100)
        goto LABEL_78;
LABEL_63:
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_78;
    }
  }
  v7 = 100;
LABEL_78:
  sub_100131740(v46);
  return v7;
}

void sub_100F658A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100131740(&a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F6590C(_QWORD *result, uint64_t a2)
{
  if (*((_BYTE *)result + 120))
  {
    result = (_QWORD *)result[10];
    if (result)
      return _objc_msgSend(result, "updateDeviceUnlockedState:", a2);
  }
  return result;
}

id sub_100F65928(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20[2];
  _QWORD *v21;
  std::__shared_weak_count *v22;
  void *__p[2];
  char v24;
  int v25;
  void *v26;
  uint8_t buf[4];
  void *v28;

  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(objc_msgSend(a2, "zoneID"), "zoneName"), "UTF8String"));
  v21 = 0;
  v22 = 0;
  v4 = sub_10019C4C0(a1 + 56, (const void **)__p);
  if (a1 + 64 != v4)
    sub_100349198(&v21, (uint64_t *)(v4 + 56));
  if (v21 && (*(uint64_t (**)(_QWORD *))(v21[9] + 40))(v21 + 9))
  {
    sub_100131938(v20, (uint64_t)"CMHealthColdStorageManager.ckRecordForRecordID", 0);
    v18 = 0;
    v19 = 0;
    sub_1004ABA08(v21, a2, &v19);
    if (v19)
    {
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102195880);
      v5 = qword_10229FFA8;
      if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[Manager] ckRecordForRecordID, no system field exists, creating a new record", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        LOWORD(v25) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[Manager] ckRecordForRecordID, no system field exists, creating a new record", &v25, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "CKRecord *CMHealthColdStorageManager::ckRecordForRecordID(CKRecordID *)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      v6 = objc_alloc((Class)CKRecord);
      v7 = objc_msgSend(v6, "initWithRecordType:recordID:", objc_msgSend((id)(*(uint64_t (**)(_QWORD *))(v21[9] + 40))(v21 + 9), "recordType"), a2);
      v8 = objc_msgSend(v7, "encryptedValues");
      objc_msgSend(v8, "setObject:forKey:", v19, objc_msgSend((id)(*(uint64_t (**)(_QWORD *))(v21[9] + 40))(v21 + 9), "dataFieldKey"));
    }
    else
    {
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102195880);
      v9 = qword_10229FFA8;
      if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v28 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#warning: Requested CKRecord for a record ID that does not exist (%@)", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        v25 = 138412290;
        v26 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "#warning: Requested CKRecord for a record ID that does not exist (%@)", &v25, 12);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "CKRecord *CMHealthColdStorageManager::ckRecordForRecordID(CKRecordID *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      v7 = 0;
    }
    sub_100131740(v20);
  }
  else
  {
    v7 = 0;
  }
  v10 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v24 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_100F65F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_100131740(&a14);
  sub_100261F44((uint64_t)&a16);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F65FA0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;

  if (!a2)
    return 0;
  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(objc_msgSend(a2, "zoneID"), "zoneName"), "UTF8String"));
  v12 = 0;
  v13 = 0;
  v6 = sub_10019C4C0(a1 + 56, (const void **)__p);
  if (a1 + 64 != v6)
    sub_100349198(&v12, (uint64_t *)(v6 + 56));
  if (v12)
    v7 = sub_1004ABC44(v12, a2, a3);
  else
    v7 = 0;
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_100F66090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100261F44((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F660B4(CFAbsoluteTime *a1)
{
  CFAbsoluteTime *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *i;

  v1 = a1;
  a1[11] = CFAbsoluteTimeGetCurrent();
  v1 += 11;
  v2 = sub_1001FD94C();
  sub_10018A534(v2, CFSTR("kColdStorageSyncStartTime"), v1);
  v3 = sub_1001FD94C();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
  for (i = (_QWORD *)*((_QWORD *)v1 - 9); i; i = (_QWORD *)*i)
    result = sub_101139070((_QWORD *)(i[9] + 72));
  return result;
}

uint64_t sub_100F66118(uint64_t result)
{
  _QWORD *i;

  for (i = *(_QWORD **)(result + 16); i; i = (_QWORD *)*i)
    result = sub_1004ABF18(i[9]);
  return result;
}

void sub_100F66148(uint64_t a1, void *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *__p[2];
  char v10;

  if (a2)
  {
    sub_1015A2E04(__p, (char *)objc_msgSend(a2, "UTF8String"));
    v7 = 0;
    v8 = 0;
    v3 = sub_10019C4C0(a1 + 56, (const void **)__p);
    if (a1 + 64 != v3)
      sub_100349198(&v7, (uint64_t *)(v3 + 56));
    if (v7)
      sub_1004ABF18(v7);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_100F66200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100261F44((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F66224(uint64_t a1, void *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  void *__p[2];
  char v11;

  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordID"), "zoneID"), "zoneName"), "UTF8String"));
  v8 = 0;
  v9 = 0;
  v4 = sub_10019C4C0(a1 + 56, (const void **)__p);
  if (a1 + 64 != v4)
    sub_100349198(&v8, (uint64_t *)(v4 + 56));
  if (v8)
    sub_1004ABF24(v8, a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_100F662EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100261F44((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F66310(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  v1 = *(_QWORD **)(a1 + 16);
  if (!v1)
    return 1;
  LOBYTE(result) = 1;
  do
  {
    if ((result & 1) != 0)
      result = sub_10008950C(v1[9] + 72);
    else
      result = 0;
    v1 = (_QWORD *)*v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100F6635C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 48);
  *a2 = *(_QWORD *)(result + 40);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100F66380(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;

  if (a2)
  {
    v3 = result;
    result = CKErrorIsCode(a2, 14);
    if ((_DWORD)result)
    {
      ++*(_DWORD *)(*(_QWORD *)(v3 + 40) + 8);
    }
    else
    {
      result = CKErrorIsCode(a2, 11);
      if ((_DWORD)result)
      {
        ++*(_DWORD *)(*(_QWORD *)(v3 + 40) + 12);
      }
      else
      {
        result = CKErrorIsCode(a2, 26);
        if ((_DWORD)result)
        {
          ++*(_DWORD *)(*(_QWORD *)(v3 + 40) + 16);
        }
        else
        {
          result = CKErrorIsCode(a2, 112);
          v4 = *(_DWORD **)(v3 + 40);
          if ((_DWORD)result)
            ++v4[1];
          else
            ++*v4;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100F66440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  NSString *v4;
  NSFileManager *v5;
  NSObject *v6;
  _BYTE *v7;
  NSString *v8;
  char *v9;
  uid_t v10;
  gid_t v11;
  _BYTE *v12;
  NSString *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  unint64_t i;
  NSString *v23;
  NSObject *v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  NSObject *v30;
  const char *v32;
  char *v33;
  const char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  char *v39;
  const char *v40;
  char *v41;
  const char *v42;
  uint64_t v43;
  CLOSTransaction *v44;
  _QWORD v45[3];
  __int16 v46;
  int v47;
  NSString *v48;
  __int16 v49;
  NSString *v50;
  __int16 v51;
  NSString *v52;
  _BYTE __p[1632];

  v2 = a1 + 128;
  v1 = *(_QWORD *)(a1 + 128);
  v45[1] = a1 + 128;
  (*(void (**)(uint64_t))(v1 + 16))(a1 + 128);
  v46 = 256;
  sub_100584CC0(0, (std::string *)__p);
  if (__p[23] >= 0)
    v3 = __p;
  else
    v3 = *(_BYTE **)__p;
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v5 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  if (!-[NSFileManager fileExistsAtPath:](v5, "fileExistsAtPath:", v4))
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102195880);
    v16 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[Migration] No legacy database to migrate", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102195880);
      LOWORD(v47) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 1, "[Migration] No legacy database to migrate", &v47, 2);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMHealthColdStorageManager::preinitialization()", "%s\n", v32);
      if (v33 != __p)
        free(v33);
    }
    goto LABEL_41;
  }
  v44 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CMHealthColdStorageManager.preinitialization");
  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102195880);
  v6 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 138412290;
    *(_QWORD *)&__p[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Migration] Migrating database at path %@", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102195880);
    v47 = 138412290;
    v48 = v4;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 0, "[Migration] Migrating database at path %@", &v47, 12);
    v35 = (char *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CMHealthColdStorageManager::preinitialization()", "%s\n", v34);
    if (v35 != __p)
      free(v35);
  }
  sub_100584CC0(2, (std::string *)__p);
  if (__p[23] >= 0)
    v7 = __p;
  else
    v7 = *(_BYTE **)__p;
  v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v9 = -[NSString UTF8String](v8, "UTF8String");
  v10 = getuid();
  v11 = getgid();
  if (!sub_100512E84(v9, v10, v11))
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102195880);
    v18 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_FAULT))
    {
      v19 = -[NSString UTF8String](v8, "UTF8String");
      *(_QWORD *)__p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", __p, 0x1Cu);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102195880);
    }
    v20 = qword_10229FFA8;
    if (os_signpost_enabled((os_log_t)qword_10229FFA8))
    {
      v21 = -[NSString UTF8String](v8, "UTF8String");
      *(_QWORD *)__p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = v21;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not create path", "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", __p, 0x1Cu);
    }

LABEL_87:
    v17 = 0;
    goto LABEL_88;
  }
  chmod(-[NSString UTF8String](v8, "UTF8String"), 0x1EFu);
  sub_100584CC0(1, (std::string *)__p);
  if (__p[23] >= 0)
    v12 = __p;
  else
    v12 = *(_BYTE **)__p;
  v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v45[0] = 0;
  if (!-[NSFileManager fileExistsAtPath:](v5, "fileExistsAtPath:", v13))
  {
    for (i = 0; ; ++i)
    {
      if ((unint64_t)objc_msgSend(&off_1022208B8, "count") <= i)
        goto LABEL_73;
      v23 = (NSString *)objc_msgSend(&off_1022208B8, "objectAtIndex:", i);
      if (-[NSFileManager moveItemAtPath:toPath:error:](v5, "moveItemAtPath:toPath:error:", -[NSString stringByAppendingString:](v4, "stringByAppendingString:", v23), -[NSString stringByAppendingString:](v13, "stringByAppendingString:", v23), v45))
      {
        chmod(-[NSString UTF8String](-[NSString stringByAppendingString:](v13, "stringByAppendingString:", v23), "UTF8String"), 0x1EFu);
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        v24 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 138543875;
          *(_QWORD *)&__p[4] = v23;
          *(_WORD *)&__p[12] = 2113;
          *(_QWORD *)&__p[14] = v4;
          *(_WORD *)&__p[22] = 2113;
          *(_QWORD *)&__p[24] = v13;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[Migration] Successfully moved db%{public}@ from %{private}@ to %{private}@", __p, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          v47 = 138543875;
          v48 = v23;
          v49 = 2113;
          v50 = v4;
          v51 = 2113;
          v52 = v13;
          LODWORD(v43) = 32;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 0, "[Migration] Successfully moved db%{public}@ from %{private}@ to %{private}@", &v47, v43);
          v26 = (char *)v25;
          sub_100512490("Generic", 1, 0, 2, "BOOL CMHealthColdStorageManager::preinitialization()", "%s\n", v25);
LABEL_71:
          if (v26 != __p)
            free(v26);
          continue;
        }
      }
      else
      {
        if (!i)
        {
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          v29 = qword_10229FFA8;
          if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 138412802;
            *(_QWORD *)&__p[4] = v45[0];
            *(_WORD *)&__p[12] = 2112;
            *(_QWORD *)&__p[14] = v4;
            *(_WORD *)&__p[22] = 2112;
            *(_QWORD *)&__p[24] = v13;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "[Migration] Unable to move root file, error: %@, move from %@ to %@", __p, 0x20u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_10229FFA0 != -1)
              dispatch_once(&qword_10229FFA0, &stru_102195880);
            v47 = 138412802;
            v48 = (NSString *)v45[0];
            v49 = 2112;
            v50 = v4;
            v51 = 2112;
            v52 = v13;
            LODWORD(v43) = 32;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[Migration] Unable to move root file, error: %@, move from %@ to %@", &v47, v43);
            v41 = (char *)v40;
            sub_100512490("Generic", 1, 0, 0, "BOOL CMHealthColdStorageManager::preinitialization()", "%s\n", v40);
            if (v41 != __p)
              free(v41);
          }
          if (-[NSFileManager removeItemAtPath:error:](v5, "removeItemAtPath:error:", v13, v45))
            goto LABEL_86;
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          v30 = qword_10229FFA8;
          if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 138412290;
            *(_QWORD *)&__p[4] = v45[0];
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "[Migration] Unable to remove corrupted mobile file, error: %@", __p, 0xCu);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_86;
          bzero(__p, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          v47 = 138412290;
          v48 = (NSString *)v45[0];
          LODWORD(v43) = 12;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[Migration] Unable to remove corrupted mobile file, error: %@", &v47, v43);
          v39 = (char *)v42;
          sub_100512490("Generic", 1, 0, 0, "BOOL CMHealthColdStorageManager::preinitialization()", "%s\n", v42);
          if (v39 == __p)
            goto LABEL_86;
          goto LABEL_112;
        }
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        v27 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 138412546;
          *(_QWORD *)&__p[4] = v23;
          *(_WORD *)&__p[12] = 2112;
          *(_QWORD *)&__p[14] = v45[0];
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[Migration] #Warning: Unable to move %@, error: %@", __p, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          v47 = 138412546;
          v48 = v23;
          v49 = 2112;
          v50 = (NSString *)v45[0];
          LODWORD(v43) = 22;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 0, "[Migration] #Warning: Unable to move %@, error: %@", &v47, v43);
          v26 = (char *)v28;
          sub_100512490("Generic", 1, 0, 2, "BOOL CMHealthColdStorageManager::preinitialization()", "%s\n", v28);
          goto LABEL_71;
        }
      }
    }
  }
  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102195880);
  v14 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "[Migration] DB exists in two locations. Deleting root", __p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102195880);
    LOWORD(v47) = 0;
    LODWORD(v43) = 2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 17, "[Migration] DB exists in two locations. Deleting root", &v47, v43);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "BOOL CMHealthColdStorageManager::preinitialization()", "%s\n", v36);
    if (v37 != __p)
      free(v37);
  }
  -[NSFileManager removeItemAtPath:error:](v5, "removeItemAtPath:error:", v4, v45);
  if (v45[0])
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102195880);
    v15 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 138412290;
      *(_QWORD *)&__p[4] = v45[0];
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[ColdStorage] Unable to delete mobile cold storage directory, error: %@", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102195880);
      v47 = 138412290;
      v48 = (NSString *)v45[0];
      LODWORD(v43) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[ColdStorage] Unable to delete mobile cold storage directory, error: %@", &v47, v43);
      v39 = (char *)v38;
      sub_100512490("Generic", 1, 0, 0, "BOOL CMHealthColdStorageManager::preinitialization()", "%s\n", v38);
      if (v39 != __p)
LABEL_112:
        free(v39);
    }
LABEL_86:

    goto LABEL_87;
  }
LABEL_73:

LABEL_41:
  v17 = 1;
LABEL_88:
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v17;
}

void sub_100F6730C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_10187E514((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100F673A0(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 144) = a2 | 0x100;
  if ((a2 & 1) == 0)
    sub_100F673B8(a1, 1);
}

void sub_100F673B8(uint64_t a1, int a2)
{
  uint64_t *i;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  _QWORD *v19;
  __int16 v20;
  int v21;

  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 17) == a2)
    {
      v4 = i + 5;
      if (sub_10008950C(i[9] + 72))
      {
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        v5 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
        {
          v6 = i + 5;
          if (*((char *)i + 63) < 0)
            v6 = (_QWORD *)*v4;
          *(_DWORD *)buf = 136446466;
          v19 = v6;
          v20 = 1026;
          v21 = a2;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Manager] Deleting Table: %{public}s, source: %{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          if (*((char *)i + 63) < 0)
            v4 = (_QWORD *)*v4;
          v14 = 136446466;
          v15 = v4;
          v16 = 1026;
          v17 = a2;
          LODWORD(v13) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 0, "[Manager] Deleting Table: %{public}s, source: %{public}d", &v14, v13);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "void CMHealthColdStorageManager::deleteTablesBySource(SourceDevice)", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
        sub_101139070((_QWORD *)(i[9] + 72));
      }
      else
      {
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102195880);
        v7 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
        {
          v8 = i + 5;
          if (*((char *)i + 63) < 0)
            v8 = (_QWORD *)*v4;
          *(_DWORD *)buf = 136446466;
          v19 = v8;
          v20 = 1026;
          v21 = a2;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[Manager] Database inaccessible, could not delete table: %{public}s, source: %{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_102195880);
          if (*((char *)i + 63) < 0)
            v4 = (_QWORD *)*v4;
          v14 = 136446466;
          v15 = v4;
          v16 = 1026;
          v17 = a2;
          LODWORD(v13) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[Manager] Database inaccessible, could not delete table: %{public}s, source: %{public}d", &v14, v13);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "void CMHealthColdStorageManager::deleteTablesBySource(SourceDevice)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
    }
  }
}

void sub_100F67744(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 146) = a2 | 0x100;
  if ((a2 & 1) == 0)
    sub_100F673B8(a1, 0);
}

id *sub_100F6775C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint64_t v13;
  std::__shared_weak_count *v14;
  id v15[2];
  uint8_t buf[1640];

  sub_100131938(v15, (uint64_t)"CMHealthColdStorageManager.cleanUpDatabase", 0);
  v13 = 0;
  v14 = 0;
  v2 = (uint64_t *)(a1 + 16);
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    if (*((_BYTE *)v2 + 64))
    {
      sub_100349198(&v13, v2 + 9);
      if (v13 && (sub_10008950C(v13 + 72) & 1) != 0)
      {
        if (!*(_BYTE *)(a1 + 148) && sub_1004A8F24(v13, "VO2MaxInputHistory"))
        {
          *(_BYTE *)(a1 + 148) = 1;
          v3 = sub_1001FD94C();
          sub_10011B81C(v3, CFSTR("HealthColdStorageVO2MaxDeletionComplete"), (_BYTE *)(a1 + 148));
          v4 = sub_1001FD94C();
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
        }
        *(_BYTE *)(a1 + 149) = sub_1004ACDEC(v13);
        goto LABEL_15;
      }
      break;
    }
  }
  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102195880);
  v5 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Manager] #warning: Cannot run database clean up, db is inaccessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102195880);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 0, "[Manager] #warning: Cannot run database clean up, db is inaccessible", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CMHealthColdStorageManager::cleanUpDatabase()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
LABEL_15:
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return sub_100131740(v15);
}

void sub_100F679CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100131740((id *)va1);
  _Unwind_Resume(a1);
}

void sub_100F679F4(id a1)
{
  qword_10229FFA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

uint64_t sub_100F67A20(uint64_t a1)
{
  void *v2;

  sub_100F67A58(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100F67A58(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100F67A94((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100F67A94(uint64_t a1)
{
  sub_100261F44(a1 + 56);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100F67AE0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100F67AE0(a1, *a2);
    sub_100F67AE0(a1, a2[1]);
    sub_100F67B28((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100F67B28(uint64_t a1)
{
  sub_100261F44(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100F67B64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021958B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F67B78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021958B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100F67BAC(uint64_t a1)
{
  sub_100090AE4(a1 + 48, *(char **)(a1 + 56));
}

void sub_100F67BC0(uint64_t a1, char **a2, unsigned __int8 *a3, uint64_t *a4, unsigned __int8 *a5, float *a6, uint64_t a7, uint64_t *a8)
{
  _QWORD *v15;

  v15 = operator new(0x180uLL);
  sub_100F67C60(v15, a2, a3, a4, a5, a6, a7, a8);
}

void sub_100F67C4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100F67C60(_QWORD *a1, char **a2, unsigned __int8 *a3, uint64_t *a4, unsigned __int8 *a5, float *a6, uint64_t a7, uint64_t *a8)
{
  char v8;

  a1[2] = 0;
  *a1 = off_102195900;
  a1[1] = 0;
  sub_100F67D34((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
}

void sub_100F67CC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100F67CDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102195900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F67CF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102195900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100F67D24(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_100F67D34(uint64_t a1, uint64_t a2, char **a3, unsigned __int8 *a4, uint64_t *a5, unsigned __int8 *a6, float *a7, uint64_t a8, uint64_t *a9)
{
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  __int128 __p;
  __int128 v18;

  v11 = *a3;
  v12 = *a4;
  v13 = *a5;
  v14 = *a6;
  v15 = *a7;
  v16 = *a9;
  sub_1015A2E04(&v18, "startTime");
  sub_1015A2E04(&__p, "id");
  sub_1004A73C4(a2, v11, v12 != 0, v13, v14 != 0, a8, v15, v16, &v18, &__p);
}

void sub_100F67E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_100F67E44(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_100F680DC(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_100F68184((uint64_t)v26, 0);
  return i;
}

void sub_100F680C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100F68184((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_100F680DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = v8 + 16;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_100115CE4(v9, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v9 = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100F6816C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100F68184(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100F68184(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100F67A94((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_OWORD *sub_100F681C8(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_10019C424((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    v13 = 1;
    sub_1000145B0(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_100F68288((uint64_t)v12, 0);
  }
  return v7;
}

void sub_100F68288(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100F67B28((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_100F682CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  CLProactiveInertialOdometryClientDelegate *v7;
  id v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  char v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v35;
  const char *v36;
  uint8_t *v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  _DWORD v42[4];
  uint8_t buf[8];
  std::__shared_weak_count *v44;

  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (uint64_t *)(a1 + 48);
  sub_1014937C4(a1 + 48, 300);
  *(_WORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 240) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 256) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 176) = xmmword_101C17498;
  *(_OWORD *)(a1 + 192) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 208) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 224) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 144) = xmmword_101C17478;
  *(_OWORD *)(a1 + 160) = xmmword_101C17488;
  *(_OWORD *)(a1 + 272) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 284) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 408) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 424) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 440) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 452) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 344) = xmmword_101C17498;
  *(_OWORD *)(a1 + 360) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 376) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 392) = xmmword_101C174C8;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 312) = xmmword_101C17478;
  *(_OWORD *)(a1 + 328) = xmmword_101C17488;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 1;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 596) = 0u;
  *(_QWORD *)a1 = a2;
  v7 = -[CLProactiveInertialOdometryClientDelegate initWithLocationController:]([CLProactiveInertialOdometryClientDelegate alloc], "initWithLocationController:", a3);
  *(_QWORD *)(a1 + 8) = v7;
  -[CLProactiveInertialOdometryClientDelegate setValid:](v7, "setValid:", 1);
  v8 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLBackgroundInertialOdometryService"));
  *(_QWORD *)(a1 + 16) = v8;
  objc_msgSend(v8, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(*(id *)a1, "silo"));
  objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", "CLBackgroundInertialOdometryService");
  sub_100197040();
  if (sub_1000C4240())
  {
    sub_1001E4804(buf);
    LOBYTE(v42[0]) = 0;
    sub_1001E4874(*(uint64_t *)buf, "CLProactiveInertialOdometryForwardSamplesToRoutine", (BOOL *)v42);
    v9 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    operator new();
  }
  sub_100197040();
  if (sub_100195F08())
  {
    sub_1001E4804(buf);
    v12 = *(_QWORD *)buf;
    _os_feature_enabled_impl("Workout", "AutostartRouteMaps");
    LOBYTE(v42[0]) = 0;
    sub_1001E4874(v12, "CLProactiveInertialOdometryForwardSamplesToRoutine", (BOOL *)v42);
    v13 = v44;
    if (v44)
    {
      v14 = (unint64_t *)&v44->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    operator new();
  }
  v16 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v17 = sub_100B30608(v16, buf);
  sub_100F68D00(a1, v17);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102195940);
  v18 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#pbio not enabling forward of samples to routined.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    LOWORD(v42[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#pbio not enabling forward of samples to routined.", v42, 2);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "CLProactiveInertialOdometryManager::CLProactiveInertialOdometryManager(id<CLIntersiloUniverse>, CLLocationController &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1001E4804(buf);
  LOBYTE(v42[0]) = 0;
  v21 = sub_1001E4874(*(uint64_t *)buf, "CLProactiveInertialOdometryEnableDebugLogs", (BOOL *)v42);
  if (LOBYTE(v42[0]))
    v22 = v21;
  else
    v22 = 0;
  *(_BYTE *)(a1 + 129) = v22;
  v23 = v44;
  if (v44)
  {
    v24 = (unint64_t *)&v44->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102195940);
  v26 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v27 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#pbio CLProactiveInertialOdometryManager::CLProactiveInertialOdometryManager(),enableDebugLogs,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v35 = *(unsigned __int8 *)(a1 + 129);
    v42[0] = 67109120;
    v42[1] = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#pbio CLProactiveInertialOdometryManager::CLProactiveInertialOdometryManager(),enableDebugLogs,%d", v42);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "CLProactiveInertialOdometryManager::CLProactiveInertialOdometryManager(id<CLIntersiloUniverse>, CLLocationController &)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v28 = operator new(0x20uLL);
  *v28 = off_102195970;
  v28[1] = sub_100F68F78;
  v28[2] = 0;
  v28[3] = a1;
  v41 = v28;
  sub_1014937C8(v6, (uint64_t)v40, 1, 4);
  v29 = v41;
  if (v41 == v40)
  {
    v30 = 4;
    v29 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_42;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_42:
  v31 = operator new(0x20uLL);
  *v31 = off_102195970;
  v31[1] = sub_100F69170;
  v31[2] = 0;
  v31[3] = a1;
  v39 = v31;
  sub_1014937C8(v6, (uint64_t)v38, 60, 180);
  v32 = v39;
  if (v39 == v38)
  {
    v33 = 4;
    v32 = v38;
    goto LABEL_46;
  }
  if (v39)
  {
    v33 = 5;
LABEL_46:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

void sub_100F68BD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_100F69380(v2);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  _Unwind_Resume(a1);
}

void sub_100F68D00(uint64_t a1, double a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if (sub_100E3BD44(v3, a2))
      *(_BYTE *)(a1 + 128) = 0;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#pbio IO subscription not enabled.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102195940);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#pbio IO subscription not enabled.", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLProactiveInertialOdometryManager::updateSubscriptionState(CFTimeInterval)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100F68EA0(id *a1, uint64_t *a2)
{
  id v4;
  uint64_t i;
  uint64_t v6;
  id v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[4];
  uint64_t v12;

  v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  v6 = *a2;
  for (i = a2[1]; v6 != i; v6 += 72)
  {
    v7 = objc_alloc((Class)CLBackgroundInertialOdometrySample);
    v11[0] = *(_OWORD *)v6;
    v9 = *(_OWORD *)(v6 + 32);
    v8 = *(_OWORD *)(v6 + 48);
    v10 = *(_OWORD *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 64);
    v11[2] = v9;
    v11[3] = v8;
    v11[1] = v10;
    objc_msgSend(v4, "addObject:", objc_msgSend(v7, "initWithCLPIOSample:", v11));
  }
  sub_100F6A20C(a1, v4);
}

void sub_100F68F78(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  unint64_t v10;
  uint8_t buf[4];
  unint64_t v12;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102195940);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v5 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134349056;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio forwarding %{public}zu samples to fuser", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v6 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3);
    v9 = 134349056;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio forwarding %{public}zu samples to fuser", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometryManager::forwardBackgroundInertialOdometrySamplesToFuser(const std::vector<CLPIOSample> &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_1006AA0B8(*(_QWORD *)(a1 + 24), a2);
}

void sub_100F69170(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  unint64_t v12;
  uint8_t buf[4];
  unint64_t v14;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102195940);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v5 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134349056;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio forwarding %{public}zu samples to telemetry calculator", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v8 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3);
    v11 = 134349056;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio forwarding %{public}zu samples to telemetry calculator", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometryManager::forwardBackgroundInertialOdometrySamplesToTelemetryCalculator(const std::vector<CLPIOSample> &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v6 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v7 = sub_100B30608(v6, buf);
  sub_100B0BCC8(a1 + 136, a2, v7);
}

uint64_t sub_100F69380(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  sub_100F6A9E4(&v4);
  return a1;
}

uint64_t sub_100F693C8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[8];

  objc_msgSend(*(id *)(a1 + 16), "stopBackgroundInertialOdometryUpdatesForClient:", *(_QWORD *)(a1 + 8));
  objc_msgSend(*(id *)(a1 + 8), "setValid:", 0);

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;

  *(_QWORD *)(a1 + 32) = 0;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102195940);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#pbio CLProactiveInertialOdometryManager::~CLProactiveInertialOdometryManager()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#pbio CLProactiveInertialOdometryManager::~CLProactiveInertialOdometryManager()", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLProactiveInertialOdometryManager::~CLProactiveInertialOdometryManager()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  *(_QWORD *)buf = a1 + 48;
  sub_100F6A9E4((void ***)buf);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return a1;
}

void sub_100F695D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100F695E0(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  const char *v58;
  uint8_t *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  int v69;
  double v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  uint8_t buf[4];
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  double v138;
  __int16 v139;
  double v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  int v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;

  *((_DWORD *)a4 + 14) = 0;
  *(_OWORD *)(a4 + 5) = 0u;
  *(_OWORD *)(a4 + 3) = 0u;
  *(_OWORD *)(a4 + 1) = 0u;
  *((_WORD *)a4 + 30) = 257;
  *(_DWORD *)((char *)a4 + 62) = 0;
  *a4 = *a2;
  objc_msgSend(a3, "timestamp");
  a4[1] = v7;
  *((_DWORD *)a4 + 4) = 1065353216;
  if (objc_msgSend(a3, "deltaPositionX") && objc_msgSend(a3, "deltaPositionY") && objc_msgSend(a3, "deltaPositionZ"))
  {
    *((_BYTE *)a4 + 63) = 1;
    objc_msgSend(objc_msgSend(a3, "deltaPositionX"), "floatValue");
    *((_DWORD *)a4 + 5) = v8;
    objc_msgSend(objc_msgSend(a3, "deltaPositionY"), "floatValue");
    *((_DWORD *)a4 + 6) = v9;
    objc_msgSend(objc_msgSend(a3, "deltaPositionZ"), "floatValue");
    *((_DWORD *)a4 + 7) = v10;
  }
  if (objc_msgSend(a3, "deltaVelocityX") && objc_msgSend(a3, "deltaVelocityY") && objc_msgSend(a3, "deltaVelocityZ"))
  {
    *((_BYTE *)a4 + 64) = 1;
    objc_msgSend(objc_msgSend(a3, "deltaVelocityX"), "floatValue");
    *((_DWORD *)a4 + 8) = v11;
    objc_msgSend(objc_msgSend(a3, "deltaVelocityY"), "floatValue");
    *((_DWORD *)a4 + 9) = v12;
    objc_msgSend(objc_msgSend(a3, "deltaVelocityZ"), "floatValue");
    *((_DWORD *)a4 + 10) = v13;
  }
  if (objc_msgSend(a3, "quaternionX")
    && objc_msgSend(a3, "quaternionY")
    && objc_msgSend(a3, "quaternionZ")
    && objc_msgSend(a3, "quaternionW"))
  {
    *((_BYTE *)a4 + 65) = 1;
    objc_msgSend(objc_msgSend(a3, "quaternionX"), "floatValue");
    *((_DWORD *)a4 + 11) = v14;
    objc_msgSend(objc_msgSend(a3, "quaternionY"), "floatValue");
    *((_DWORD *)a4 + 12) = v15;
    objc_msgSend(objc_msgSend(a3, "quaternionZ"), "floatValue");
    *((_DWORD *)a4 + 13) = v16;
    objc_msgSend(objc_msgSend(a3, "quaternionW"), "floatValue");
    *((_DWORD *)a4 + 14) = v17;
    *((_BYTE *)a4 + 60) = *(_BYTE *)(a1 + 128) ^ 1;
    *(_BYTE *)(a1 + 128) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 128) = 0;
  }
  if (objc_msgSend(a3, "referenceFrame") == (id)8)
    v18 = 8;
  else
    v18 = 1;
  *((_BYTE *)a4 + 61) = v18;
  *((_BYTE *)a4 + 62) = 0;
  v19 = objc_msgSend(a3, "staticFlag");
  if ((unint64_t)v19 <= 2)
    *((_BYTE *)a4 + 62) = (_BYTE)v19;
  if (*(_BYTE *)(a1 + 129))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v20 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v22 = *a4;
      v21 = a4[1];
      v23 = *((float *)a4 + 4);
      v24 = *((float *)a4 + 6);
      v65 = *((float *)a4 + 7);
      v67 = *((float *)a4 + 5);
      v25 = *((float *)a4 + 8);
      v26 = *((float *)a4 + 10);
      v61 = *((float *)a4 + 11);
      v63 = *((float *)a4 + 9);
      v27 = *((float *)a4 + 12);
      v60 = *((float *)a4 + 13);
      v28 = *((float *)a4 + 14);
      v29 = *((unsigned __int8 *)a4 + 60);
      v30 = *((unsigned __int8 *)a4 + 61);
      v31 = *((unsigned __int8 *)a4 + 62);
      v32 = *((unsigned __int8 *)a4 + 63);
      v33 = *((unsigned __int8 *)a4 + 64);
      v69 = *((unsigned __int8 *)a4 + 65);
      v34 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      v35 = sub_100B30608(v34, buf);
      v36 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      v37 = sub_100B30608(v36, buf) - *(double *)a4;
      v38 = sub_100B303DC();
      v39 = sub_100B309E0(v38);
      *(_DWORD *)buf = 134354433;
      v116 = v22;
      v117 = 2050;
      v118 = v21;
      v119 = 2050;
      v120 = v23;
      v121 = 2049;
      v122 = v67;
      v123 = 2049;
      v124 = v24;
      v125 = 2049;
      v126 = v65;
      v127 = 2049;
      v128 = v25;
      v129 = 2049;
      v130 = v63;
      v131 = 2049;
      v132 = v26;
      v133 = 2049;
      v134 = v61;
      v135 = 2049;
      v136 = v27;
      v137 = 2049;
      v138 = v60;
      v139 = 2049;
      v140 = v28;
      v141 = 1026;
      v142 = v29;
      v143 = 1026;
      v144 = v30;
      v145 = 1026;
      v146 = v31;
      v147 = 1025;
      v148 = v32;
      v149 = 1024;
      v150 = v33;
      v151 = 1025;
      v152 = v69;
      v153 = 2050;
      v154 = v35;
      v155 = 2050;
      v156 = v37;
      v157 = 2050;
      v158 = v39;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#pbio CLPIOSample, userCfAbsoluteTimestamp_s, %{public}.3f, machContinuousTimestamp_s, %{public}.3f, sampleInterval_s, %{public}.3f, dPosX_m, %{private}.3f, dPosY_m, %{private}.3f, dPosZ_m, %{private}.3f, dVelX_mps, %{private}.3f, dVelY_mps, %{private}.3f, dVelZ_mps, %{private}.3f, qX, %{private}.3f, qY, %{private}.3f, qZ, %{private}.3f, qW, %{private}.3f, referenceFrameContinuity, %{public}d, referenceFrame, %{public}d, staticFlag, %{public}d, isDeltaPositionValid, %{private}d, isDeltaVelocityValid, %d, isAttitudeValid, %{private}d, now, %{public}.3f, diffNowMinusSample, %{public}.3f, propagation_us, %{public}.3f", buf, 0xC6u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102195940);
      v40 = qword_1022A0028;
      v41 = *a4;
      v42 = a4[1];
      v43 = *((float *)a4 + 4);
      v44 = *((float *)a4 + 5);
      v45 = *((float *)a4 + 6);
      v46 = *((float *)a4 + 7);
      v47 = *((float *)a4 + 8);
      v48 = *((float *)a4 + 9);
      v49 = *((float *)a4 + 10);
      v50 = *((float *)a4 + 12);
      v64 = *((float *)a4 + 13);
      v66 = *((float *)a4 + 11);
      v62 = *((float *)a4 + 14);
      v51 = *((unsigned __int8 *)a4 + 60);
      v52 = *((unsigned __int8 *)a4 + 61);
      v53 = *((unsigned __int8 *)a4 + 62);
      v54 = *((unsigned __int8 *)a4 + 63);
      v55 = *((unsigned __int8 *)a4 + 64);
      v56 = *((unsigned __int8 *)a4 + 65);
      v70 = sub_1005FECEC();
      v68 = sub_1005FECEC() - *(double *)a4;
      v57 = sub_100B303DC();
      v71 = 134354433;
      v72 = v41;
      v73 = 2050;
      v74 = v42;
      v75 = 2050;
      v76 = v43;
      v77 = 2049;
      v78 = v44;
      v79 = 2049;
      v80 = v45;
      v81 = 2049;
      v82 = v46;
      v83 = 2049;
      v84 = v47;
      v85 = 2049;
      v86 = v48;
      v87 = 2049;
      v88 = v49;
      v89 = 2049;
      v90 = v66;
      v91 = 2049;
      v92 = v50;
      v93 = 2049;
      v94 = v64;
      v95 = 2049;
      v96 = v62;
      v97 = 1026;
      v98 = v51;
      v99 = 1026;
      v100 = v52;
      v101 = 1026;
      v102 = v53;
      v103 = 1025;
      v104 = v54;
      v105 = 1024;
      v106 = v55;
      v107 = 1025;
      v108 = v56;
      v109 = 2050;
      v110 = v70;
      v111 = 2050;
      v112 = v68;
      v113 = 2050;
      v114 = sub_100B309E0(v57);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 2, "#pbio CLPIOSample, userCfAbsoluteTimestamp_s, %{public}.3f, machContinuousTimestamp_s, %{public}.3f, sampleInterval_s, %{public}.3f, dPosX_m, %{private}.3f, dPosY_m, %{private}.3f, dPosZ_m, %{private}.3f, dVelX_mps, %{private}.3f, dVelY_mps, %{private}.3f, dVelZ_mps, %{private}.3f, qX, %{private}.3f, qY, %{private}.3f, qZ, %{private}.3f, qW, %{private}.3f, referenceFrameContinuity, %{public}d, referenceFrame, %{public}d, staticFlag, %{public}d, isDeltaPositionValid, %{private}d, isDeltaVelocityValid, %d, isAttitudeValid, %{private}d, now, %{public}.3f, diffNowMinusSample, %{public}.3f, propagation_us, %{public}.3f", &v71, 198);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "CLPIOSample CLProactiveInertialOdometryManager::createCLPIOSample(const CFAbsoluteTime &, const CMOdometry *)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
  }
}

void sub_100F69C68(uint64_t a1, void *a2)
{
  __n128 *v4;
  double v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __n128 v9[2];
  double v10;
  _BYTE v11[12];
  uint8_t buf[4];
  void *v13;

  v10 = 0.0;
  v4 = (__n128 *)sub_100B303DC();
  sub_100B307F4(v4, v9);
  if ((sub_100AD206C((uint64_t)v9, &v10) & 1) != 0)
  {
    objc_msgSend(a2, "timestamp");
    *(double *)v11 = v5 + v10;
    sub_100F695E0(a1, (uint64_t *)v11, a2, (uint64_t *)buf);
    sub_100F69E6C(a1, (uint64_t)buf);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#pbio cannot compute fMachContinuousToCFAbsoluteOffset_s, discarding sample %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102195940);
      *(_DWORD *)v11 = 138412290;
      *(_QWORD *)&v11[4] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio cannot compute fMachContinuousToCFAbsoluteOffset_s, discarding sample %@", v11, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometryManager::onBackgroundInertialOdometryState(const CMOdometry *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100F69E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  double v14;
  __int16 v15;
  _BOOL4 v16;
  uint8_t buf[4];
  double v18;
  __int16 v19;
  _BOOL4 v20;

  v4 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v5 = sub_100B30608(v4, buf) - *(double *)(a2 + 8);
  if (*(_BYTE *)(a1 + 129))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      v18 = v5;
      v19 = 1026;
      v20 = v5 < 2.0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#pbio onCLPIOSample, sample age %{public}.3f s, isPromptSample, %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102195940);
      v13 = 134349312;
      v14 = v5;
      v15 = 1026;
      v16 = v5 < 2.0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#pbio onCLPIOSample, sample age %{public}.3f s, isPromptSample, %{public}d", &v13, 18);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometryManager::onCLPIOSample(const CLPIOSample &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (v5 < 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349312;
      v18 = v5;
      v19 = 1026;
      v20 = v5 < 2.0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#pbio onCLPIOSample, unexpected sample age %{public}.3f s, isPromptSample, %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102195940);
      v13 = 134349312;
      v14 = v5;
      v15 = 1026;
      v16 = v5 < 2.0;
      LODWORD(v12) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#pbio onCLPIOSample, unexpected sample age %{public}.3f s, isPromptSample, %{public}d", &v13, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLProactiveInertialOdometryManager::onCLPIOSample(const CLPIOSample &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  sub_101493D58((uint64_t *)(a1 + 48), a2, v5 < 2.0);
}

void sub_100F6A20C(id *a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _QWORD block[6];
  int v10;
  id v11;
  uint8_t buf[4];
  id v13;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102195940);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    v13 = objc_msgSend(a2, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio forwarding %{public}zu samples to routine", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v6 = qword_1022A0028;
    v10 = 134349056;
    v11 = objc_msgSend(a2, "count");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 1, "#pbio forwarding %{public}zu samples to routine", &v10, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometryManager::performExportToRoutine(NSMutableArray<CLBackgroundInertialOdometrySample *> *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = objc_msgSend(objc_msgSend(*a1, "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F6A410;
  block[3] = &unk_102131360;
  block[4] = a2;
  block[5] = a1;
  dispatch_async(v5, block);
}

id sub_100F6A410(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint64_t v6;
  id v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  id v11;
  uint8_t buf[4];
  id v13;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102195940);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134283521;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#pbio adding %{private}zu background inertial odometry samples to fRoutineManager", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v6 = qword_1022A0028;
    v7 = objc_msgSend(*(id *)(a1 + 32), "count");
    v10 = 134283521;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 1, "#pbio adding %{private}zu background inertial odometry samples to fRoutineManager", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometryManager::performExportToRoutine(NSMutableArray<CLBackgroundInertialOdometrySample *> *)_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return objc_msgSend(*(id *)(v2 + 32), "addBackgroundInertialOdometrySamples:handler:");
}

void sub_100F6A610(uint64_t a1, void *a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v7;
  id v8;
  uint64_t v9;
  id v10;
  const char *v11;
  int v12;
  id v13;
  uint8_t buf[4];
  id v15;

  if (a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#pbio error adding background inertial odometry samples to routine: %@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v12 = 138412290;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#pbio error adding background inertial odometry samples to routine: %@", &v12, 12);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "void CLProactiveInertialOdometryManager::performExportToRoutine(NSMutableArray<CLBackgroundInertialOdometrySample *> *)_block_invoke", "%s\n", v4);
    if (v5 == buf)
      return;
LABEL_20:
    free(v5);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102195940);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134349056;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#pbio successfully added %{public}zu background inertial odometry samples to routined.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102195940);
    v9 = qword_1022A0028;
    v10 = objc_msgSend(*(id *)(a1 + 32), "count");
    v12 = 134349056;
    v13 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "#pbio successfully added %{public}zu background inertial odometry samples to routined.", &v12, 12);
    v5 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometryManager::performExportToRoutine(NSMutableArray<CLBackgroundInertialOdometrySample *> *)_block_invoke", "%s\n", v11);
    if (v5 != buf)
      goto LABEL_20;
  }
}

void sub_100F6A90C(uint64_t a1, uint64_t a2, double a3)
{
  sub_100B0C070(a1 + 136, a2, a3);
}

void sub_100F6A914(uint64_t a1, char a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    sub_100E3BF30(v6, a2, a3);
  sub_100F68D00(a1, a3);
  sub_100B0BE40(a1 + 136, a2, a3);
}

void sub_100F6A96C(uint64_t a1, char a2, double a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    sub_100E3C108(v5, a2, a3);
  sub_100F68D00(a1, a3);
}

void sub_100F6A9AC(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4)
{
  sub_100B0BED4(a1 + 136, a2, a3, a4);
}

void sub_100F6A9B8(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100F6A9E4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 56;
    v7 = (char *)*((_QWORD *)v4 - 4);
    if (v4 - 56 == v7)
    {
      v7 = v4 - 56;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

__n128 sub_100F6AA7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102195970;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100F6AAC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102195970;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100F6AAEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_100F6AB08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F6AB44()
{
}

void sub_100F6AB50()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C31648;
      v1[3] = unk_101C31658;
      v1[4] = xmmword_101C31668;
      v1[0] = xmmword_101C31628;
      v1[1] = unk_101C31638;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100F6AC24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100F6B58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  char a68;

  sub_1004E2BD0((uint64_t)&a68);
  if (a61 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100F6B650()
{
  operator new();
}

void sub_100F6B704()
{
  operator delete();
}

void sub_100F6BA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100F6BEC8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100F6BEF4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

uint64_t sub_100F6C33C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  void *String;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  TRANSITPbMacModePair *v18;
  uint64_t v19;
  _QWORD v20[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v6) = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString(a2);

        *(_QWORD *)(a1 + 24) = String;
        goto LABEL_35;
      case 2u:
        *(_BYTE *)(a1 + 40) |= 1u;
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 <= 0xFFFFFFFFFFFFFFF7 && v15 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v16 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v16 = 0;
        }
        v19 = 8;
        goto LABEL_34;
      case 3u:
        *(_BYTE *)(a1 + 40) |= 2u;
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v16 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v16 = 0;
        }
        v19 = 16;
LABEL_34:
        *(_QWORD *)(a1 + v19) = v16;
        goto LABEL_35;
      case 4u:
        v18 = objc_alloc_init(TRANSITPbMacModePair);
        objc_msgSend((id)a1, "addMacModes:", v18);

        v20[0] = 0;
        v20[1] = 0;
        if (PBReaderPlaceMark(a2, v20) && (sub_1012AA80C((uint64_t)v18, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v20);
LABEL_35:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_35;
    }
  }
}

void sub_100F6CDE0(uint64_t a1, void *a2, double a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  id v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  double v20;

  if (sub_100ED4F30())
  {
    if (*(_QWORD *)(a1 + 240))
      sub_100F6D1AC(a1);
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102195A40);
    v6 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v18 = objc_msgSend(a2, "identifier");
      v19 = 2050;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLInertialOdometryNotifierClient] %{public}@ requesting updates with interval: %{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102195A40);
      v8 = qword_10229FF88;
      v13 = 138543618;
      v14 = objc_msgSend(a2, "identifier");
      v15 = 2050;
      v16 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "[CLInertialOdometryNotifierClient] %{public}@ requesting updates with interval: %{public}f", &v13, 22);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLInertialOdometryNotifierClient::startOdometryUpdates(CLSilo *, CFTimeInterval)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    operator new();
  }
  if (qword_10229FF80 != -1)
    dispatch_once(&qword_10229FF80, &stru_102195A40);
  v7 = qword_10229FF88;
  if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLInertialOdometryNotifierClient] InertialOdometry notifier is not available, can't start updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102195A40);
    LOWORD(v13) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 16, "[CLInertialOdometryNotifierClient] InertialOdometry notifier is not available, can't start updates", &v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "void CLInertialOdometryNotifierClient::startOdometryUpdates(CLSilo *, CFTimeInterval)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_100F6D180()
{
  operator delete();
}

void sub_100F6D1AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (sub_100ED4F30())
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    if (*(_QWORD *)(a1 + 240))
    {
      v2 = sub_100ED4F30();
      sub_1000A4A6C(v2, 0, *(_QWORD *)(a1 + 240));
      v3 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(a1 + 240) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  else
  {
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102195A40);
    v4 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CLInertialOdometryNotifierClient] InertialOdometry notifier is not available, can't stop updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102195A40);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 16, "[CLInertialOdometryNotifierClient] InertialOdometry notifier is not available, can't stop updates", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLInertialOdometryNotifierClient::stopOdometryUpdates()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100F6D3B8(id a1)
{
  qword_10229FF88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

_QWORD *sub_100F6D3E4(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102195A70;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100F6D518;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10020ABCC;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100F6D4F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F6D518(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_100F6D530(uint64_t a1)
{
  sub_100F6D554(a1);
  operator delete();
}

uint64_t sub_100F6D554(uint64_t a1)
{
  *(_QWORD *)a1 = off_102195A70;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

void sub_100F6D5AC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100F6D5D8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  sub_100197040();
  result = sub_100195F08();
  if ((_DWORD)result)
  {
    sub_1001E4804(&v15);
    v17 = 0;
    sub_1001FD98C(v15, "halfMarathonCompletionTime", &v17);
    v3 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    sub_1001E4804(&v15);
    v17 = 0;
    sub_1001FD98C(v15, "fullMarathonCompletionTime", &v17);
    v6 = v16;
    if (v16)
    {
      v7 = (unint64_t *)&v16->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_1001E4804(&v15);
    v17 = 0;
    sub_1001FD98C(v15, "ravenAndL5OnToOffHysteresis", &v17);
    v9 = v16;
    if (v16)
    {
      v10 = (unint64_t *)&v16->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    sub_1001E4804(&v15);
    LODWORD(v17) = 0;
    sub_1001E4B84(v15, "hkWorkoutStitchThreshold", &v17);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator new();
  }
  *a1 = 0;
  return result;
}

void sub_100F6D820()
{
  operator delete();
}

void sub_100F6D860(uint64_t a1, void *a2, uint64_t a3, double a4, double a5, double a6)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 3) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(double *)(a1 + 48) = a4;
  *(double *)(a1 + 56) = a5;
  *(double *)(a1 + 64) = a6;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 88) = (double)(*(_QWORD *)(a1 + 72) / 2);
  operator new();
}

void sub_100F6DA14()
{
  operator delete();
}

uint64_t sub_100F6DA58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
  {
    v5 = 0xBFF0000000000000;
    sub_100585ED4(v2, (double *)&v5, 0);
  }

  v3 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

BOOL sub_100F6DAC4(uint64_t a1, double a2)
{
  int v4;
  double v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  double v9;
  NSObject *v12;
  int v13;
  double v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;

  if (!*(_BYTE *)a1 || !*(_BYTE *)(a1 + 1))
    return 1;
  v4 = *(unsigned __int8 *)(a1 + 6);
  v5 = a2 - *(double *)(a1 + 32);
  v6 = *(double *)(a1 + 56) >= v5 + *(double *)(a1 + 80);
  v7 = *(_DWORD *)(a1 + 40) - 3;
  v8 = v7 < 2;
  if (*(double *)(a1 + 56) >= v5 + *(double *)(a1 + 80) || v7 <= 1)
  {
    *(_BYTE *)(a1 + 6) = 1;
    *(double *)(a1 + 16) = a2;
  }
  else if (*(_BYTE *)(a1 + 6))
  {
    v9 = *(double *)(a1 + 64);
    if (a2 - *(double *)(a1 + 8) > v9 && v5 > v9)
      *(_BYTE *)(a1 + 6) = 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102195AD0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(unsigned __int8 *)(a1 + 6);
    v14 = *(double *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 80);
    v16[0] = 68290306;
    v16[1] = 0;
    v17 = 2082;
    v18 = "";
    v19 = 1026;
    v20 = v6 || v8;
    v21 = 1026;
    v22 = v13;
    v23 = 2050;
    v24 = a2 - v14;
    v25 = 2050;
    v26 = v15;
    v27 = 2050;
    v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,isRavenAllowed\", \"allowRaven\":%{public}hhd, \"fIsRavenAllowed\":%{public}hhd, \"currentWorkoutDuration\":\"%{public}f\", \"fStitchedPreviousWorkoutDuration\":\"%{public}f\", \"fHkWorkoutStartMCT\":\"%{public}f\"}", (uint8_t *)v16, 0x3Cu);
  }
  if (v4 != *(unsigned __int8 *)(a1 + 6))
  {
    if (*(_QWORD *)(a1 + 104))
    {
      sub_100F6EEA0(a1);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 944))(*(_QWORD *)(a1 + 104));
    }
    v4 = *(unsigned __int8 *)(a1 + 6);
  }
  return v4 != 0;
}

BOOL sub_100F6DCC4(uint64_t a1, double a2)
{
  int v4;
  double v5;
  BOOL v6;
  int v7;
  BOOL v8;
  double v9;
  NSObject *v12;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;

  if (!*(_BYTE *)a1 || !*(_BYTE *)(a1 + 1))
    return 1;
  v4 = *(unsigned __int8 *)(a1 + 5);
  v5 = a2 - *(double *)(a1 + 32);
  v6 = *(double *)(a1 + 56) < v5 + *(double *)(a1 + 80);
  v7 = *(_DWORD *)(a1 + 40);
  v8 = (v7 - 3) < 2 || *(double *)(a1 + 56) >= v5 + *(double *)(a1 + 80);
  if (*(double *)(a1 + 56) >= v5 + *(double *)(a1 + 80) || (v7 - 5) >= 0xFFFFFFFE)
  {
    *(_BYTE *)(a1 + 5) = (v7 - 3) < 2 || *(double *)(a1 + 56) >= v5 + *(double *)(a1 + 80);
    *(double *)(a1 + 8) = a2;
  }
  else if (*(_BYTE *)(a1 + 5))
  {
    v9 = *(double *)(a1 + 64);
    if (a2 - *(double *)(a1 + 8) > v9 && v5 > v9)
      *(_BYTE *)(a1 + 5) = 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102195AD0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(unsigned __int8 *)(a1 + 5);
    v14 = *(_DWORD *)(a1 + 40);
    v15 = *(double *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 80);
    v17[0] = 68290818;
    v18 = 2082;
    v17[1] = 0;
    v19 = "";
    v20 = 1026;
    v21 = v8;
    v22 = 1026;
    v23 = v13;
    v24 = 1026;
    v25 = v6;
    v26 = 1026;
    v27 = v14;
    v28 = 2050;
    v29 = a2 - v15;
    v30 = 2050;
    v31 = v16;
    v32 = 2050;
    v33 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,isL5Allowed\", \"allowL5\":%{public}hhd, \"fIsL5Allowed\":%{public}hhd, \"pastFullMarathon\":%{public}hhd, \"fCurrentSigEnv\":%{public}d, \"currentWorkoutDuration\":\"%{public}f\", \"fStitchedPreviousWorkoutDuration\":\"%{public}f\", \"fHkWorkoutStartMCT\":\"%{public}f\"}", (uint8_t *)v17, 0x48u);
  }
  if (v4 != *(unsigned __int8 *)(a1 + 5))
  {
    if (*(_QWORD *)(a1 + 104))
    {
      sub_100F6EEA0(a1);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 944))(*(_QWORD *)(a1 + 104));
    }
    v4 = *(unsigned __int8 *)(a1 + 5);
  }
  return v4 != 0;
}

void sub_100F6DEE4(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  *(_DWORD *)(a1 + 40) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102195AD0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 40);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,feedSignalEnvironment\", \"fCurrentSigEnv\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_100F6DFD0(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  BOOL v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[4];
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v4 = *(unsigned __int8 *)(a1 + 1);
  switch(*(_QWORD *)(a2 + 16))
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 0x11:
      if (*(_BYTE *)(a1 + 1))
        goto LABEL_27;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102195AD0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GnssWorkoutPwrSaver,implicit start", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102195AD0);
        LOWORD(v20[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GnssWorkoutPwrSaver,implicit start", v20, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssWorkoutPowerSaver::feedHkWorkout(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      goto LABEL_8;
    case 0xDLL:
LABEL_8:
      *(_BYTE *)(a1 + 1) = 1;
      goto LABEL_22;
    case 0xFLL:
      sub_100F6E444(a1);
      goto LABEL_22;
    case 0x10:
      *(_BYTE *)(a1 + 2) = 1;
      v11 = *(_DWORD *)(a1 + 24);
      if (v11)
        *(_DWORD *)(a1 + 24) = v11 - 1;
      goto LABEL_22;
    case 0x12:
      sub_100F6E4B8(a1, *(_QWORD *)(a2 + 112));
LABEL_22:
      if (v4)
        v12 = 1;
      else
        v12 = *(_BYTE *)(a1 + 1) == 0;
      if (!v12)
        sub_100F6E604(a1, *(_QWORD *)(a2 + 112));
LABEL_27:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102195AD0);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_QWORD *)(a2 + 16);
        v15 = *(_QWORD *)(a2 + 112);
        v16 = *(unsigned __int8 *)(a1 + 1);
        v17 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)buf = 68290306;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 1026;
        v26 = v14;
        v27 = 1026;
        v28 = v15;
        v29 = 1026;
        v30 = v4;
        v31 = 1026;
        v32 = v16;
        v33 = 1026;
        v34 = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,feedHkWorkout\", \"eventType\":%{public}d, \"workoutType\":%{public}d, \"previousHkWorkoutOn\":%{public}hhd, \"currentHkWorkoutOn\":%{public}hhd, \"fGnssResetsWhileInWorkout\":%{public}u}", buf, 0x30u);
      }
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102195AD0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a2 + 16);
        *(_DWORD *)buf = 67240192;
        v22 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GnssWorkoutPwrSaver,feedHkWorkout,Unhandled,eventType,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102195AD0);
        v8 = *(_QWORD *)(a2 + 16);
        v20[0] = 67240192;
        v20[1] = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GnssWorkoutPwrSaver,feedHkWorkout,Unhandled,eventType,%{public}d", v20, 8);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssWorkoutPowerSaver::feedHkWorkout(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      break;
  }
}

void sub_100F6E444(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  if (*(_QWORD *)(a1 + 104))
  {
    sub_100F6EEA0(a1);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 944))(*(_QWORD *)(a1 + 104));
    v2 = *(_QWORD *)(a1 + 104);
    if (v2)
    {
      v3 = 0xBFF0000000000000;
      sub_100585ED4(v2, (double *)&v3, 0);
    }
  }
  *(_WORD *)(a1 + 1) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 80) = 0;
}

void sub_100F6E4B8(uint64_t a1, unint64_t a2)
{
  int v2;
  int v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  if (a2 <= 0x21)
  {
    v2 = a2;
    if (((1 << a2) & 0x200080010) != 0)
    {
      v4 = *(unsigned __int8 *)(a1 + 4);
      *(_BYTE *)(a1 + 4) = 1;
      if (!v4)
      {
        if (*(_QWORD *)(a1 + 104))
        {
          sub_100F6EEA0(a1);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 944))(*(_QWORD *)(a1 + 104));
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102195AD0);
        v5 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v6 = *(unsigned __int8 *)(a1 + 4);
          v7[0] = 68289538;
          v7[1] = 0;
          v8 = 2082;
          v9 = "";
          v10 = 1026;
          v11 = v6;
          v12 = 1026;
          v13 = v2;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,updateHkWorkoutType\", \"fIsPotentiallyMultiSportWorkout\":%{public}hhd, \"workoutType\":%{public}d}", (uint8_t *)v7, 0x1Eu);
        }
      }
    }
  }
}

void sub_100F6E604(uint64_t a1, unint64_t a2)
{
  *(double *)(a1 + 32) = sub_1001FCBB4();
  sub_100F6F39C(a1);
  sub_100F6E4B8(a1, a2);
  *(_BYTE *)(a1 + 2) = 0;
}

void sub_100F6E644(_BYTE *a1, char a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  *a1 = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102195AD0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a1;
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,feedBatterySaverMode\", \"fIsBatterySaverMode\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
}

void sub_100F6E730(uint64_t a1)
{
  sub_100F6E738(a1, 1);
}

void sub_100F6E738(uint64_t a1, char a2)
{
  int v3;
  unsigned int v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  v3 = *(unsigned __int8 *)(a1 + 3);
  *(_BYTE *)(a1 + 3) = a2;
  if (v3)
  {
    if ((a2 & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 1))
      {
        if (!*(_BYTE *)(a1 + 2))
        {
          v4 = *(_DWORD *)(a1 + 24) + 1;
          *(_DWORD *)(a1 + 24) = v4;
          if (v4 >= 0xB)
            sub_100F6E864(a1);
        }
      }
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102195AD0);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 24);
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,feedGnssStatus\", \"fGnssResetsWhileInWorkout\":%{public}u}", (uint8_t *)v7, 0x18u);
  }
}

void sub_100F6E85C(uint64_t a1)
{
  sub_100F6E738(a1, 0);
}

void sub_100F6E864(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102195AD0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 24);
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,resetOnGetOutOfHoleDetection\", \"fGnssResetsWhileInWorkout\":%{public}u}", (uint8_t *)v4, 0x18u);
  }
  sub_100F6E444(a1);
}

void sub_100F6E954(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  char v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  time_t v19;
  time_t v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  time_t v26;
  __int16 v27;
  time_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;

  v19 = 0;
  v20 = 0;
  if (time(&v20) == -1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102195AD0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchWorkout,std::time,-1\"}", buf, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102195AD0);
    }
    v4 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289026;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "GnssWorkoutPwrSaver,stitchWorkout,std::time,-1", "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchWorkout,std::time,-1\"}", buf, 0x12u);
    }
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 936))(*(_QWORD *)(a1 + 104));
    if ((sub_1005265CC(*(_QWORD *)(a1 + 104), (uint64_t)CFSTR("kGnssWorkoutChkpointUTC"), &v19) & 1) != 0)
    {
      if (v20 > v19 && v20 - v19 > *(_QWORD *)(a1 + 72))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102195AD0);
        v2 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          v22 = 0;
          v23 = 2082;
          v24 = "";
          v25 = 2050;
          v26 = v20;
          v27 = 2050;
          v28 = v19;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchWorkout,newWorkout,notstitched\", \"currentUtcEpochSeconds\":%{public}ld, \"kGnssWorkoutChkpointTime\":%{public}ld}", buf, 0x26u);
        }
        *(_QWORD *)(a1 + 80) = 0;
        return;
      }
      v18 = 0;
      if (sub_1000B1180(*(_QWORD *)(a1 + 104), (uint64_t)CFSTR("kGnssHkWorkoutStatus"), &v18))
      {
        v9 = v18;
        *(double *)(a1 + 80) = (double)(v18 >> 8);
        *(_BYTE *)(a1 + 4) = v9 & 1;
        *(_BYTE *)(a1 + 5) = (v9 & 2) != 0;
        *(_BYTE *)(a1 + 6) = (v9 & 4) != 0;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102195AD0);
        v10 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          v22 = 0;
          v23 = 2082;
          v24 = "";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchWorkout,kGnssHkWorkoutDurationSec,notavailable\"}", buf, 0x12u);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102195AD0);
        }
        v11 = qword_1022A0078;
        if (!os_signpost_enabled((os_log_t)qword_1022A0078))
          goto LABEL_32;
        *(_DWORD *)buf = 68289026;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "GnssWorkoutPwrSaver,stitchWorkout,kGnssHkWorkoutDurationSec,notavailable", "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchWorkout,kGnssHkWorkoutDurationSec,notavailable\"}", buf, 0x12u);
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102195AD0);
LABEL_32:
      v12 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return;
      v13 = *(_QWORD *)(a1 + 80);
      v14 = *(unsigned __int8 *)(a1 + 5);
      v15 = *(unsigned __int8 *)(a1 + 6);
      v16 = *(unsigned __int8 *)(a1 + 4);
      v17 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68291074;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2050;
      v26 = v20;
      v27 = 2050;
      v28 = v19;
      v29 = 2050;
      v30 = v13;
      v31 = 1026;
      v32 = v18;
      v33 = 1026;
      v34 = v14;
      v35 = 1026;
      v36 = v15;
      v37 = 1026;
      v38 = v16;
      v39 = 2050;
      v40 = v17;
      v6 = "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchWorkout\", \"currentUtcEpochSeconds\":%{public}ld, \"kGnssWo"
           "rkoutChkpointTime\":%{public}ld, \"fStitchedPreviousWorkoutDuration\":\"%{public}f\", \"workoutStatus\":%{pub"
           "lic}u, \"fIsL5Allowed\":%{public}hhd, \"fIsRavenAllowed\":%{public}hhd, \"fIsPotentiallyMultiSportWorkout\":%"
           "{public}hhd, \"fHkWorkoutStartMCT\":\"%{public}f\"}";
      v7 = v12;
      v8 = 82;
      goto LABEL_34;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102195AD0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v6 = "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchWorkout,noKey,newWorkout\"}";
      v7 = v5;
      v8 = 18;
LABEL_34:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, buf, v8);
    }
  }
}

void sub_100F6EEA0(uint64_t a1)
{
  double v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  int v23;
  time_t v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  time_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  _BOOL4 v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;

  v2 = sub_1001FCBB4();
  if (*(_BYTE *)(a1 + 1))
  {
    v24 = 0;
    if (time(&v24) == -1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102195AD0);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchCheckpoint,std::time,-1\"}", buf, 0x12u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102195AD0);
      }
      v19 = qword_1022A0078;
      if (!os_signpost_enabled((os_log_t)qword_1022A0078))
        return;
      *(_DWORD *)buf = 68289026;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v20 = "GnssWorkoutPwrSaver,stitchCheckpoint,std::time,-1";
      v21 = "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchCheckpoint,std::time,-1\"}";
    }
    else
    {
      if (sub_100528350(*(_QWORD *)(a1 + 104), CFSTR("kGnssWorkoutChkpointUTC"), &v24))
      {
        v3 = (v2 - *(double *)(a1 + 32) + *(double *)(a1 + 80));
        if (v3 >= 0xFFFFFF)
          v3 = 0xFFFFFF;
        v4 = v3 << 8;
        v23 = v4;
        if (*(_BYTE *)(a1 + 4))
        {
          v4 |= 1u;
          v23 = v4;
        }
        if (*(_BYTE *)(a1 + 5))
        {
          v4 |= 2u;
          v23 = v4;
        }
        if (*(_BYTE *)(a1 + 6))
          v23 = v4 | 4;
        v5 = sub_10018AAE4(*(_QWORD *)(a1 + 104), CFSTR("kGnssHkWorkoutStatus"), (unsigned int *)&v23);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102195AD0);
        v6 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *(_DWORD *)(a1 + 40);
          v8 = *(_QWORD *)(a1 + 80);
          v9 = *(_QWORD *)(a1 + 32);
          v10 = *(unsigned __int8 *)(a1 + 5);
          v11 = *(unsigned __int8 *)(a1 + 6);
          v12 = *(unsigned __int8 *)(a1 + 4);
          *(_DWORD *)buf = 68291586;
          v27 = 2082;
          v26 = 0;
          v28 = "";
          v29 = 2050;
          v30 = v24;
          v31 = 1026;
          v32 = v7;
          v33 = 1026;
          v34 = v23;
          v35 = 2050;
          v36 = v8;
          v37 = 2050;
          v38 = v2;
          v39 = 2050;
          v40 = v9;
          v41 = 1026;
          v42 = v5;
          v43 = 1026;
          v44 = v10;
          v45 = 1026;
          v46 = v11;
          v47 = 1026;
          v48 = v12;
          v13 = "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchCheckpoint\", \"kGnssWorkoutChkpointTime\":%{public}ld,"
                " \"fCurrentSigEnv\":%{public}d, \"workoutStatus\":%{public}u, \"fStitchedPreviousWorkoutDuration\":\"%{p"
                "ublic}f\", \"currentMCT\":\"%{public}f\", \"fHkWorkoutStartMCT\":\"%{public}f\", \"wkStatusUpdate\":%{pu"
                "blic}hhd, \"fIsL5Allowed\":%{public}hhd, \"fIsRavenAllowed\":%{public}hhd, \"fIsPotentiallyMultiSportWor"
                "kout\":%{public}hhd}";
          v14 = v6;
          v15 = 94;
LABEL_20:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
          return;
        }
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102195AD0);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchCheckpoint,kGnssWorkoutChkpointUTC update failed\"}", buf, 0x12u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102195AD0);
      }
      v19 = qword_1022A0078;
      if (!os_signpost_enabled((os_log_t)qword_1022A0078))
        return;
      *(_DWORD *)buf = 68289026;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v20 = "GnssWorkoutPwrSaver,stitchCheckpoint,kGnssWorkoutChkpointUTC update failed";
      v21 = "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchCheckpoint,kGnssWorkoutChkpointUTC update failed\"}";
    }
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v20, v21, buf, 0x12u);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102195AD0);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(unsigned __int8 *)(a1 + 1);
    *(_DWORD *)buf = 68289538;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    v29 = 2050;
    v30 = *(_QWORD *)&v2;
    v31 = 1026;
    v32 = v17;
    v13 = "{\"msg%{public}.0s\":\"GnssWorkoutPwrSaver,stitchCheckpoint,notNeeded\", \"currentMCT\":\"%{public}f\", \"fIsI"
          "nHkWorkout\":%{public}hhd}";
    v14 = v16;
    v15 = 34;
    goto LABEL_20;
  }
}

_QWORD *sub_100F6F364(_QWORD *result)
{
  _QWORD *v1;

  if (result[13])
  {
    v1 = result;
    sub_100F6EEA0((uint64_t)result);
    return sub_100586288(v1[13]);
  }
  return result;
}

void sub_100F6F39C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (*(_QWORD *)(a1 + 104))
  {
    sub_100F6E954(a1);
    v2 = *(_QWORD *)(a1 + 104);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100F6F40C;
    v3[3] = &unk_10212ECA0;
    v3[4] = a1;
    sub_100585ED4(v2, (double *)(a1 + 88), (uint64_t)v3);
  }
}

_QWORD *sub_100F6F40C(uint64_t a1)
{
  return sub_100F6F364(*(_QWORD **)(a1 + 32));
}

void sub_100F6F414(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100F6F440(uint64_t a1)
{
  sub_100F96154(a1);
}

void sub_100F6F498(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_100F961B8(v1);
  _Unwind_Resume(a1);
}

void sub_100F6F4B4(_DWORD *a1)
{
  sub_100F961B8(a1);
  operator delete();
}

void sub_100F6F4DC(float32x2_t *a1)
{
  __int32 v2;
  char *v3;
  char *v4;
  NSObject *v5;
  __int32 v6;
  __int32 v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  __int32 v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  __int32 v40;

  bzero(&v11, 0x12uLL);
  v2 = a1[8].i32[0];
  v3 = (char *)&a1[21] + 6;
  if (v2 != 2)
    v3 = (char *)&a1[14] + 2;
  if (v2 == 1)
    v4 = (char *)&a1[17] + 2;
  else
    v4 = v3;
  v11 = *(_QWORD *)v4;
  v12 = *((_DWORD *)v4 + 2);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102195B60);
  v5 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    v6 = a1[8].i32[0];
    *(_DWORD *)buf = 67110656;
    v28 = (__int16)v11;
    v29 = 1024;
    v30 = SWORD1(v11);
    v31 = 1024;
    v32 = SWORD2(v11);
    v33 = 1024;
    v34 = SHIWORD(v11);
    v35 = 1024;
    v36 = (__int16)v12;
    v37 = 1024;
    v38 = SHIWORD(v12);
    v39 = 1024;
    v40 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102195B60);
    v7 = a1[8].i32[0];
    v15 = 1024;
    v16 = SWORD1(v11);
    v17 = 1024;
    v18 = SWORD2(v11);
    v19 = 1024;
    v20 = SHIWORD(v11);
    v21 = 1024;
    v22 = (__int16)v12;
    v23 = 1024;
    v24 = SHIWORD(v12);
    v25 = 1024;
    v26 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d", &v14, 44, v10, v11, v12, v13, 67110656);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV10::chooseOffsetData()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100F96F10(a1, (__int16 *)&v11);
}

void sub_100F6F76C(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100F6F798(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  *(_QWORD *)result = off_102195B90;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a4;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)(result + 28) = a6;
  return result;
}

uint64_t sub_100F6F7B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_100F6F7B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_100F6F7C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_100F6F7C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_100F6F7D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

id sub_100F6FA84(uint64_t a1)
{
  double Current;
  uint64_t v3;
  double v4;
  double v5;
  NSObject *v6;
  double v7;
  const char *v8;
  double v9;
  NSObject *v10;
  uint8_t *v12;
  uint8_t buf[4];
  double v14;
  __int16 v15;
  double v16;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(double *)(v3 + 96);
  if (v4 == 0.0)
  {
    *(double *)(v3 + 96) = Current - (*(double *)(a1 + 40) + 5.0);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(double *)(v3 + 96);
  }
  v5 = *(double *)(v3 + 104);
  if (Current - v4 >= v5)
    v4 = Current - v5;
  *(double *)(v3 + 96) = v4;
  if ((objc_msgSend(*(id *)(a1 + 32), "registeredXPCTaskElevationProfile") & 1) != 0)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    v6 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(*(_QWORD *)(a1 + 32) + 96) + 5.0;
      *(_DWORD *)buf = 134218240;
      v14 = v7;
      v15 = 2048;
      v16 = Current;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "delay registration of XPC task for elevation profile calculation with startTime,%f,endTime,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102195C90);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "delay registration of XPC task for elevation profile calculation with startTime,%f,endTime,%f");
LABEL_25:
      v12 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile initWithUniverse:delegate:withBuffer:withSourceAggregator:]_block_invoke", "%s\n", v8);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v9 = *(double *)(*(_QWORD *)(a1 + 32) + 96) + 5.0;
    if (+[CLContextManagerElevationProfileBase isQueryValidWithStartTime:andEndTime:](CLContextManagerElevationProfileBase, "isQueryValidWithStartTime:andEndTime:", v9, Current))
    {
      objc_msgSend(*(id *)(a1 + 32), "pushElevationsFromTime:toTime:", *(double *)(*(_QWORD *)(a1 + 32) + 96) + 5.0, Current);
      return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setNextFireDelay:", *(double *)(a1 + 40));
    }
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    v10 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v14 = v9;
      v15 = 2048;
      v16 = Current;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "skip elevation profile calculation due to false startTime,%f,endTime,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102195C90);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "skip elevation profile calculation due to false startTime,%f,endTime,%f");
      goto LABEL_25;
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setNextFireDelay:", *(double *)(a1 + 40));
}

uint64_t sub_100F703F4(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  void *v7;
  id v8;
  id v9;
  __objc2_class *v10;
  __objc2_class *v11;
  void *v12;
  void *v13;
  CLVisitTimePeriod *v14;
  NSObject *isa;
  id v16;
  unsigned int v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  double v30;
  double v31;
  double v32;
  __objc2_class *v33;
  id v34;
  unsigned int v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  const char *v41;
  uint8_t *v42;
  __objc2_class *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  const char *v50;
  uint8_t *v51;
  id v52;
  NSObject *v53;
  const char *v54;
  uint8_t *v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  const char *v66;
  __int16 v67;
  id v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  _BYTE v72[54];
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  unsigned int v78;
  uint8_t v79[128];
  uint8_t buf[4];
  _BYTE v81[28];
  __int16 v82;
  _BYTE v83[54];
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  unsigned int v89;

  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v81 = 0;
      *(_WORD *)&v81[4] = 2082;
      *(_QWORD *)&v81[6] = "";
      *(_WORD *)&v81[14] = 2114;
      *(_QWORD *)&v81[16] = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching routine visits\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102195C90);
    }
    v5 = qword_10229FE88;
    if (os_signpost_enabled((os_log_t)qword_10229FE88))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v81 = 0;
      *(_WORD *)&v81[4] = 2082;
      *(_QWORD *)&v81[6] = "";
      *(_WORD *)&v81[14] = 2114;
      *(_QWORD *)&v81[16] = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching routine visits", "{\"msg%{public}.0s\":\"error fetching routine visits\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0x7FFFFFFFLL);
  }
  v7 = a2;
  if (objc_msgSend(a2, "count"))
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v61, v79, 16);
    if (!v8)
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "count") - 1);
    v9 = v8;
    v10 = DefaultObserver;
    v11 = DefaultObserver;
    v60 = *(_QWORD *)v62;
    v57 = v7;
    while (1)
    {
      v12 = 0;
      v58 = v9;
      do
      {
        if (*(_QWORD *)v62 != v60)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)v12);
        v14 = objc_alloc_init(CLVisitTimePeriod);
        if (v10[92].info != (__objc2_class_ro *)-1)
          dispatch_once(&qword_10229FE80, &stru_102195C90);
        isa = v11[93].isa;
        if (os_log_type_enabled(isa, OS_LOG_TYPE_DEFAULT))
        {
          v16 = objc_msgSend(v13, "date");
          v17 = objc_msgSend(v13, "type");
          v18 = objc_msgSend(v13, "entry");
          v19 = objc_msgSend(v13, "exit");
          objc_msgSend(v13, "confidence");
          v21 = v20;
          v22 = objc_msgSend(v13, "source");
          *(_DWORD *)buf = 136317954;
          *(_QWORD *)v81 = "date";
          *(_WORD *)&v81[8] = 2112;
          *(_QWORD *)&v81[10] = v16;
          *(_WORD *)&v81[18] = 2080;
          *(_QWORD *)&v81[20] = "type";
          v82 = 1024;
          *(_DWORD *)v83 = v17;
          v7 = v57;
          v9 = v58;
          *(_WORD *)&v83[4] = 2080;
          *(_QWORD *)&v83[6] = "entryDate";
          *(_WORD *)&v83[14] = 2112;
          *(_QWORD *)&v83[16] = v18;
          v10 = DefaultObserver;
          *(_WORD *)&v83[24] = 2080;
          *(_QWORD *)&v83[26] = "exitDate";
          *(_WORD *)&v83[34] = 2112;
          *(_QWORD *)&v83[36] = v19;
          v11 = DefaultObserver;
          *(_WORD *)&v83[44] = 2080;
          *(_QWORD *)&v83[46] = "confidence";
          v84 = 2048;
          v85 = v21;
          v86 = 2080;
          v87 = "source";
          v88 = 1024;
          v89 = v22;
          _os_log_impl((void *)&_mh_execute_header, isa, OS_LOG_TYPE_DEFAULT, "visit from Routine,%s,%@,%s,%d,%s,%@,%s,%@,%s,%f,%s,%d", buf, 0x72u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v10[92].info != (__objc2_class_ro *)-1)
            dispatch_once(&qword_10229FE80, &stru_102195C90);
          v33 = v11[93].isa;
          v34 = objc_msgSend(v13, "date");
          v35 = objc_msgSend(v13, "type");
          v36 = objc_msgSend(v13, "entry");
          v37 = objc_msgSend(v13, "exit");
          objc_msgSend(v13, "confidence");
          v39 = v38;
          v40 = objc_msgSend(v13, "source");
          v65 = 136317954;
          v66 = "date";
          v67 = 2112;
          v68 = v34;
          v69 = 2080;
          v70 = "type";
          v71 = 1024;
          *(_DWORD *)v72 = v35;
          *(_WORD *)&v72[4] = 2080;
          *(_QWORD *)&v72[6] = "entryDate";
          *(_WORD *)&v72[14] = 2112;
          *(_QWORD *)&v72[16] = v36;
          *(_WORD *)&v72[24] = 2080;
          *(_QWORD *)&v72[26] = "exitDate";
          *(_WORD *)&v72[34] = 2112;
          *(_QWORD *)&v72[36] = v37;
          *(_WORD *)&v72[44] = 2080;
          *(_QWORD *)&v72[46] = "confidence";
          v73 = 2048;
          v74 = v39;
          v75 = 2080;
          v76 = "source";
          v77 = 1024;
          v78 = v40;
          LODWORD(v56) = 114;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "visit from Routine,%s,%@,%s,%d,%s,%@,%s,%@,%s,%f,%s,%d", &v65, v56);
          v42 = (uint8_t *)v41;
          sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile getStoredVisit:betweenStartTime:andEndTime:withCompletionBlock:]_block_invoke", "%s\n", v41);
          if (v42 != buf)
            free(v42);
          v7 = v57;
          v9 = v58;
          v10 = DefaultObserver;
          v11 = DefaultObserver;
        }
        if (objc_msgSend(v13, "exit"))
        {
          objc_msgSend(objc_msgSend(v13, "entry"), "timeIntervalSinceReferenceDate");
          -[CLVisitTimePeriod setStartTime:](v14, "setStartTime:");
          objc_msgSend(objc_msgSend(v13, "exit"), "timeIntervalSinceReferenceDate");
        }
        else
        {
          if (objc_msgSend(objc_msgSend(v7, "firstObject"), "exit"))
            goto LABEL_30;
          objc_msgSend(objc_msgSend(v13, "entry"), "timeIntervalSinceReferenceDate");
          v31 = v30;
          objc_msgSend(objc_msgSend(objc_msgSend(v7, "firstObject"), "entry"), "timeIntervalSinceReferenceDate");
          if (v31 != v32)
            goto LABEL_30;
          objc_msgSend(objc_msgSend(objc_msgSend(v7, "firstObject"), "entry"), "timeIntervalSinceReferenceDate");
          -[CLVisitTimePeriod setStartTime:](v14, "setStartTime:");
        }
        -[CLVisitTimePeriod setEndTime:](v14, "setEndTime:");
        if (v10[92].info != (__objc2_class_ro *)-1)
          dispatch_once(&qword_10229FE80, &stru_102195C90);
        v23 = v11[93].isa;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          -[CLVisitTimePeriod startTime](v14, "startTime");
          v25 = v24;
          -[CLVisitTimePeriod endTime](v14, "endTime");
          v27 = v26;
          v28 = objc_msgSend(v13, "entry");
          v29 = objc_msgSend(v13, "exit");
          *(_DWORD *)buf = 136316930;
          *(_QWORD *)v81 = "entryTimestamp";
          *(_WORD *)&v81[8] = 2048;
          *(_QWORD *)&v81[10] = v25;
          *(_WORD *)&v81[18] = 2080;
          *(_QWORD *)&v81[20] = "exitTimestamp";
          v82 = 2048;
          *(_QWORD *)v83 = v27;
          *(_WORD *)&v83[8] = 2080;
          *(_QWORD *)&v83[10] = "entryDate";
          *(_WORD *)&v83[18] = 2112;
          *(_QWORD *)&v83[20] = v28;
          v11 = DefaultObserver;
          *(_WORD *)&v83[28] = 2080;
          *(_QWORD *)&v83[30] = "exitDate";
          *(_WORD *)&v83[38] = 2112;
          *(_QWORD *)&v83[40] = v29;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "filtered visit from Routine,%s,%f,%s,%f,%s,%@,%s,%@", buf, 0x52u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v10[92].info != (__objc2_class_ro *)-1)
            dispatch_once(&qword_10229FE80, &stru_102195C90);
          v43 = v11[93].isa;
          -[CLVisitTimePeriod startTime](v14, "startTime");
          v45 = v44;
          -[CLVisitTimePeriod endTime](v14, "endTime");
          v47 = v46;
          v48 = objc_msgSend(v13, "entry");
          v49 = objc_msgSend(v13, "exit");
          v65 = 136316930;
          v66 = "entryTimestamp";
          v67 = 2048;
          v68 = v45;
          v69 = 2080;
          v70 = "exitTimestamp";
          v71 = 2048;
          *(_QWORD *)v72 = v47;
          *(_WORD *)&v72[8] = 2080;
          *(_QWORD *)&v72[10] = "entryDate";
          *(_WORD *)&v72[18] = 2112;
          *(_QWORD *)&v72[20] = v48;
          *(_WORD *)&v72[28] = 2080;
          *(_QWORD *)&v72[30] = "exitDate";
          *(_WORD *)&v72[38] = 2112;
          *(_QWORD *)&v72[40] = v49;
          LODWORD(v56) = 82;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 0, "filtered visit from Routine,%s,%f,%s,%f,%s,%@,%s,%@", &v65, v56);
          v51 = (uint8_t *)v50;
          sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile getStoredVisit:betweenStartTime:andEndTime:withCompletionBlock:]_block_invoke", "%s\n", v50);
          if (v51 != buf)
            free(v51);
          v10 = DefaultObserver;
          v11 = DefaultObserver;
        }
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v14);
LABEL_30:

        v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      v52 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v61, v79, 16);
      v9 = v52;
      if (!v52)
        return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "count") - 1);
    }
  }
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_102195C90);
  v53 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "empty visit fetched from Routine", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    LOWORD(v65) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "empty visit fetched from Routine", &v65, 2);
    v55 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile getStoredVisit:betweenStartTime:andEndTime:withCompletionBlock:]_block_invoke", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0xFFFFFFFFLL);
}

void sub_100F70EF0(uint64_t a1, void *a2, void *a3, int a4)
{
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  CLLocationPreFilterEntry *v13;
  double v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  _QWORD block[5];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  id v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  id v50;
  uint8_t buf[4];
  id v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  id v56;
  _BYTE v57[128];

  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v42;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v42 != v10)
          objc_enumerationMutation(a2);
        v12 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(*(id *)(a1 + 32), "isLocationUsefulForCalibration:", objc_msgSend(v12, "type")))
        {
          v13 = objc_alloc_init(CLLocationPreFilterEntry);
          objc_msgSend(objc_msgSend(v12, "timestamp"), "timeIntervalSinceReferenceDate");
          -[CLLocationDBEntry setTimestamp:](v13, "setTimestamp:");
          objc_msgSend(v12, "altitude");
          -[CLLocationDBEntry setElevation:](v13, "setElevation:");
          objc_msgSend(v12, "verticalAccuracy");
          -[CLLocationDBEntry setVerticalAccuracy:](v13, "setVerticalAccuracy:");
          objc_msgSend(v12, "coordinate");
          -[CLLocationDBEntry setLatitude:](v13, "setLatitude:");
          objc_msgSend(v12, "coordinate");
          -[CLLocationDBEntry setLongitude:](v13, "setLongitude:", v14);
          objc_msgSend(v12, "horizontalAccuracy");
          -[CLLocationPreFilterEntry setHorizontalAccuracy:](v13, "setHorizontalAccuracy:");
          objc_msgSend(*(id *)(a1 + 40), "addObject:", v13);

        }
      }
      v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
    }
    while (v9);
  }
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_102195C90);
  v15 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_INFO))
  {
    v16 = objc_msgSend(a2, "count");
    *(_DWORD *)buf = 134349056;
    v52 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "received stored locations,count,%{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    v25 = qword_10229FE88;
    v26 = objc_msgSend(a2, "count");
    v45 = 134349056;
    v46 = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 1, "received stored locations,count,%{public}lu", &v45, 12);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile fetchLocationsWithStartTime:andEndTime:andBatchSize:andLocationArray:andVisitSearchStartIndex:andCompletionBlock:]_block_invoke", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  if (a3)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    v17 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v52 = a3;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "error enumerating stored locations, %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102195C90);
      v45 = 138412290;
      v46 = a3;
      LODWORD(v39) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 1, "error enumerating stored locations, %@", &v45, v39);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile fetchLocationsWithStartTime:andEndTime:andBatchSize:andLocationArray:andVisitSearchStartIndex:andCompletionBlock:]_block_invoke", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
  if (a4)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    v18 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "startDate"), "timeIntervalSinceReferenceDate");
      v20 = v19;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "endDate"), "timeIntervalSinceReferenceDate");
      v22 = v21;
      v23 = objc_msgSend(*(id *)(a1 + 40), "count");
      *(_DWORD *)buf = 134349568;
      v52 = v20;
      v53 = 2050;
      v54 = v22;
      v55 = 2050;
      v56 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "received all stored locations,startDate,%{public}f,endDate,%{public}f,count,%{public}lu", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102195C90);
      v31 = qword_10229FE88;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "startDate"), "timeIntervalSinceReferenceDate");
      v33 = v32;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "endDate"), "timeIntervalSinceReferenceDate");
      v35 = v34;
      v36 = objc_msgSend(*(id *)(a1 + 40), "count");
      v45 = 134349568;
      v46 = v33;
      v47 = 2050;
      v48 = v35;
      v49 = 2050;
      v50 = v36;
      LODWORD(v39) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 1, "received all stored locations,startDate,%{public}f,endDate,%{public}f,count,%{public}lu", &v45, v39);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile fetchLocationsWithStartTime:andEndTime:andBatchSize:andLocationArray:andVisitSearchStartIndex:andCompletionBlock:]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v24 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100F71560;
    block[3] = &unk_102162918;
    block[4] = *(_QWORD *)(a1 + 56);
    dispatch_async(v24, block);
  }
}

uint64_t sub_100F71560(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100F71C6C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  id v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  id v32;
  __int16 v33;
  id v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  id v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 112))
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    v2 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      v3 = objc_msgSend(*(id *)(a1 + 40), "count");
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "firstObject"), "endDate"), "timeIntervalSinceReferenceDate");
      v5 = v4;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "lastObject"), "endDate"), "timeIntervalSinceReferenceDate");
      v7 = v6;
      v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "firstObject"), "endDate");
      v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "lastObject"), "endDate");
      v10 = *(_QWORD *)(a1 + 64);
      v11 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 134219522;
      v40 = v3;
      v41 = 2048;
      v42 = v5;
      v43 = 2048;
      v44 = v7;
      v45 = 2112;
      v46 = v8;
      v47 = 2112;
      v48 = v9;
      v49 = 2048;
      v50 = v10;
      v51 = 2048;
      v52 = v11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "pushing elevation profile batch,batchSize,%lu,firstElevationTime,%f,lastElevationTime,%f,firstElevationDate,%@,lastElevationDate,%@,startIndex,%lu,endIndex,%lu", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102195C90);
      v13 = qword_10229FE88;
      v14 = objc_msgSend(*(id *)(a1 + 40), "count");
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "firstObject"), "endDate"), "timeIntervalSinceReferenceDate");
      v16 = v15;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "lastObject"), "endDate"), "timeIntervalSinceReferenceDate");
      v18 = v17;
      v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "firstObject"), "endDate");
      v20 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "lastObject"), "endDate");
      v21 = *(_QWORD *)(a1 + 64);
      v22 = *(_QWORD *)(a1 + 72);
      v25 = 134219522;
      v26 = v14;
      v27 = 2048;
      v28 = v16;
      v29 = 2048;
      v30 = v18;
      v31 = 2112;
      v32 = v19;
      v33 = 2112;
      v34 = v20;
      v35 = 2048;
      v36 = v21;
      v37 = 2048;
      v38 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "pushing elevation profile batch,batchSize,%lu,firstElevationTime,%f,lastElevationTime,%f,firstElevationDate,%@,lastElevationDate,%@,startIndex,%lu,endIndex,%lu", &v25, 72);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile _sendElevationsFromEstimates:startIndex:withCompletionBlock:]_block_invoke", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "addElevations:handler:");
}

void sub_100F71FB0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _BYTE *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (a2)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102195C90);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "error adding elevations to routine: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102195C90);
      v9 = 138412290;
      v10 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "error adding elevations to routine: %@", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerElevationProfile _sendElevationsFromEstimates:startIndex:withCompletionBlock:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
  else
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 64)), "timestamp");
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96) = v5;
    objc_msgSend(*(id *)(a1 + 40), "saveLastPushedTime:", *(double *)(*(_QWORD *)(a1 + 40) + 96));
    v6 = *(_BYTE **)(a1 + 64);
    if (v6 == (char *)objc_msgSend(*(id *)(a1 + 48), "count") - 1)
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    else
      objc_msgSend(*(id *)(a1 + 40), "_sendElevationsFromEstimates:startIndex:withCompletionBlock:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64) + 1, *(_QWORD *)(a1 + 56));

  }
}

void sub_100F72974(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_100F729A0()
{
  sub_1015A2E04(qword_102309268, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102309268, (void *)&_mh_execute_header);
}

unsigned __int8 *sub_100F729E4(unsigned __int8 *a1)
{
  uuid_clear(a1);
  return a1;
}

unsigned __int8 *sub_100F72A08(unsigned __int8 *a1, const unsigned __int8 *a2)
{
  uuid_copy(a1, a2);
  return a1;
}

uuid_t sub_100F72A2C(uuid_t uu, char *in)
{
  uuid_parse(in, uu);
  return uu;
}

uint64_t sub_100F72A58(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  return uuid_compare(a1, a2) >> 31;
}

BOOL sub_100F72A70(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  return uuid_compare(a1, a2) == 0;
}

BOOL sub_100F72A8C(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  return uuid_compare(a1, a2) != 0;
}

_QWORD *sub_100F72AA8@<X0>(const unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v4[37];

  memset(v4, 0, sizeof(v4));
  uuid_unparse(a1, v4);
  return sub_1015A2E04(a2, v4);
}

uint64_t sub_100F72B18(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 > 0xA)
    return 0;
  else
    return dword_101C31AA0[v1];
}

BOOL sub_100F72B3C(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 3;
}

BOOL sub_100F72B4C(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 16) - 13) < 6;
}

uint64_t sub_100F72B60(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 <= 0x11)
  {
    if (((1 << v1) & 0x18002) != 0)
      return 2;
    if (((1 << v1) & 0x22001) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_100F72BB4(uint64_t result, uint64_t a2)
{
  switch(result)
  {
    case 1:
      if (a2 == 1)
      {
        return 16;
      }
      else if (a2 == 2)
      {
        return 15;
      }
      break;
    case 2:
      if (a2 == 1)
      {
        return 18;
      }
      else if (a2 == 2)
      {
        return 17;
      }
      break;
    case 3:
      if (a2 == 1)
      {
        return 5;
      }
      else if (a2 == 2)
      {
        return 4;
      }
      break;
  }
  return result;
}

uint64_t sub_100F72C2C(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x40)
    return 26;
  else
    return qword_101C31AD0[a1 - 1];
}

uint64_t sub_100F72C50(unint64_t a1)
{
  uint64_t v1;

  if (((1 << a1) & 0x2408801328010) != 0)
    v1 = 2;
  else
    v1 = ((1 << a1) & 0x1810000050020) != 0;
  if (a1 <= 0x31)
    return v1;
  else
    return 0;
}

BOOL sub_100F72CA4(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

std::string *sub_100F72CB4@<X0>(unint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *result;

  result = (std::string *)sub_1015A2E04(a2, "invalid");
  if (a1 < 0x18 && ((0xFFFFDFu >> a1) & 1) != 0)
    return std::string::assign(a2, (&off_102195CD0)[a1]);
  return result;
}

void sub_100F72D10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F72D2C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0;
  switch(*(_QWORD *)(a1 + 16))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 9:
    case 0xBLL:
    case 0xELL:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
      result = 6;
      break;
    case 4:
      result = 5;
      break;
    case 8:
      result = 2;
      break;
    case 0xCLL:
    case 0xDLL:
    case 0x11:
      result = 1;
      break;
    case 0x10:
      result = 3;
      break;
    case 0x16:
      v3 = *(_QWORD *)(a1 + 112);
      if (v3 == 26 || v3 == 0)
        result = 3;
      else
        result = 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F72D98(unint64_t a1)
{
  unint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a1 > 6)
    return 0;
  v1 = a1;
  if (((1 << a1) & 0x4B) != 0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102195CB0);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Unexpected state for user dismiss, keeping as is", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102195CB0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Unexpected state for user dismiss, keeping as is", v6, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "CMWorkoutState CLWorkoutUtil::stateAfterUserDismiss(CMWorkoutState)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else if (a1 == 4)
  {
    return 3;
  }
  else
  {
    return a1 == 5;
  }
  return v1;
}

uint64_t sub_100F72F68(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 82:
    case 83:
      break;
    case 14:
    case 15:
    case 30:
    case 81:
      goto LABEL_4;
    default:
      if (a1 != 3000)
      {
LABEL_4:
        result = 0;
        a1 = 3000;
      }
      break;
  }
  *a2 = a1;
  return result;
}

void sub_100F72FB0(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100F72FDC()
{
  operator new();
}

void sub_100F73020()
{
  operator delete();
}

void sub_100F730E8(id a1)
{
  qword_1023092F8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLEmergencyControllerAdapterSilo"));
}

void sub_100F73160(id a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!objc_opt_class(TUCallCenter, v1))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EmergCon not supported on this platform because TelephonyUtilities.framework is not present", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon not supported on this platform because TelephonyUtilities.framework is not present", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "+[CLEmergencyControllerAdapter isSupported]_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    byte_102309308 = 1;
  }
}

id sub_100F7344C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "checkEmergencyCallStatus");
}

char *sub_100F734B0(char *result, void *a2)
{
  char *v2;
  id v3;
  uint64_t *v4;
  id v5;
  NSObject *v6;
  uint64_t *v7;
  id v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15[166];
  __int16 v16;
  uint64_t v17[166];
  id v18;
  uint8_t buf[8];
  uint64_t v20;
  __n128 (*v21)@<Q0>(__n128 *@<X0>, __n128 *@<X8>);
  void *v22;
  __int128 v23;
  int v24;

  v18 = a2;
  if (a2)
  {
    v2 = result;
    v3 = a2;
    sub_100210524((uint64_t **)v2 + 2, (unint64_t *)&v18, (uint64_t *)&v18);
    *(_DWORD *)buf = 0;
    v4 = sub_1001F8DEC((_QWORD *)v2 + 20, (int *)buf);
    if (v4)
    {
      v5 = v18;
      sub_100F8CA40((uint64_t)v17, v4 + 3);
      objc_msgSend(v5, "emergencySettingsChange:withReason:", sub_100F793A4(v17), 0);
      sub_100857FD0((uint64_t)v17);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EmergCon #Warning inst0 settings find returned null", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v16 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon #Warning inst0 settings find returned null", &v16, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::registerObserver(id<CLEmergencyClientProtocol>)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    if (v2[133])
    {
      *(_DWORD *)buf = 1;
      v7 = sub_1001F8DEC((_QWORD *)v2 + 20, (int *)buf);
      if (v7)
      {
        v8 = v18;
        sub_100F8CA40((uint64_t)v15, v7 + 3);
        objc_msgSend(v8, "emergencySettingsChange:withReason:", sub_100F793A4(v15), 0);
        sub_100857FD0((uint64_t)v15);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v9 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#EmergCon #Warning inst1 settings find returned null", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          v16 = 0;
          LODWORD(v14) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon #Warning inst1 settings find returned null", &v16, v14);
          v13 = (uint8_t *)v12;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::registerObserver(id<CLEmergencyClientProtocol>)", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
      }
    }
    v23 = *(_OWORD *)(v2 + 72);
    v24 = *((_DWORD *)v2 + 22);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v20 = 3221225472;
    v21 = sub_100F8F69C;
    v22 = &unk_102196018;
    objc_msgSend(v18, "emergencyStateChange:", -[uint8_t copy](buf, "copy"));
    return (char *)objc_msgSend(v18, "shouldLockoutNilr:", v2[1]);
  }
  return result;
}

void sub_100F738AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100857FD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F738E4(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if (a2)
  {
    sub_10071E360(a1 + 16, (unint64_t *)&v2);

  }
}

void sub_100F73928(uint64_t a1, int a2)
{
  NSObject *v4;
  unsigned int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = "emergencyenablementassertion";
    v11 = 1026;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon E911Event\", \"event\":%{public, location:escape_only}s, \"CLEEA\":%{public}d}", (uint8_t *)v6, 0x22u);
  }
  *(_BYTE *)(a1 + 56) = a2;
  if (a2)
    v5 = 5;
  else
    v5 = 0;
  sub_100F7D994(a1, v5);
  sub_100F7798C(a1);
}

void sub_100F73B8C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v2 = objc_msgSend(*(id *)(a1 + 32), "name");
  if (objc_msgSend(v2, "isEqualToString:", TUCallCenterCallStatusChangedNotification))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EmergCon received TUCallCenterCallStatusChangedNotification notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v14) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon received TUCallCenterCallStatusChangedNotification notification", &v14, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "-[CLEmergencyControllerAdapter callEventHandler:]_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v4 = objc_msgSend(*(id *)(a1 + 32), "object");
    if (v4)
    {
      v5 = v4;
      if (objc_msgSend(v4, "isEmergency"))
        sub_100F73EC4(qword_102311A70, v5);
    }
    objc_msgSend(*(id *)(a1 + 40), "checkEmergencyCallStatus");
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "name"), "UTF8String");
      *(_DWORD *)buf = 136315138;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EmergCon unexpected call event notification %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v10 = qword_1022A0088;
      v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "name"), "UTF8String");
      v14 = 136315138;
      v15 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 16, "#EmergCon unexpected call event notification %s", (const char *)&v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CLEmergencyControllerAdapter callEventHandler:]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_100F73EC4(uint64_t a1, void *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (sub_100F787E4(objc_msgSend(a2, "status")) == 7)
  {
    *(_DWORD *)(a1 + 248) = sub_100F78E00((uint64_t)objc_msgSend(a2, "disconnectedReason"));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a1 + 248);
      *(_DWORD *)buf = 67109120;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,processCallStatusChanged,call disconnected reason:%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v6 = *(_DWORD *)(a1 + 248);
      v9[0] = 67109120;
      v9[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,processCallStatusChanged,call disconnected reason:%d", v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::processCallStatusChanged(TUCall *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 248) = -1;
  }
}

void sub_100F741AC(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  int v13;
  void **v14;
  unsigned int v15;
  void **v16;
  uint64_t v17;
  unsigned int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  void *__p[2];
  char v25;
  void *v26;
  char v27;
  char v28;
  uint64_t v29[3];
  char *v30;
  _BYTE *v31;
  char *v32;
  const __CFString *v33;
  NSNumber *v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  void **v46;
  __int16 v47;
  unsigned int v48;

  if (a2)
  {
    sub_100F7855C(a1);
    *(_BYTE *)(a1 + 134) = 1;
    if (*(_BYTE *)(a1 + 132))
    {
      *(_BYTE *)(a1 + 132) = 0;
      *(_OWORD *)(a1 + 92) = *(_OWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a1 + 128);
      sub_100F7798C(a1);
    }
    v4 = sub_100F787E4(objc_msgSend(a2, "status"));
    v5 = objc_msgSend(a2, "originatingUIType");
    v6 = sub_100F789BC((int)objc_msgSend(a2, "isSOS"), (uint64_t)v5);
    *(_DWORD *)(a1 + 240) = v6;
    *(_DWORD *)(a1 + 244) = v6;
    *(_DWORD *)buf = 82;
    *(_DWORD *)v36 = sub_100F79058(v6, v7);
    LODWORD(v42) = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v26 = &v30;
    v27 = 0;
    v30 = (char *)operator new(0x28uLL);
    v31 = v30;
    v32 = v30 + 40;
    v31 = (_BYTE *)sub_1006AB40C((uint64_t)&v32, (uint64_t)buf, (uint64_t)&v43, (uint64_t)v30);
    sub_1001F8644((uint64_t)v36);
    v8 = *(void **)(a1 + 712);
    memset(v29, 0, sizeof(v29));
    sub_1006AB68C(v29, (uint64_t)v30, (uint64_t)v31, 0xCCCCCCCCCCCCCCCDLL * ((v31 - v30) >> 3));
    objc_msgSend(v8, "setMeasurements:", sub_1006A7590(v29));
    *(_QWORD *)buf = v29;
    sub_1006AB5A0((void ***)buf);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(a2, "isConnected");
      v11 = objc_msgSend(a2, "isSOS");
      v12 = &v26;
      sub_100F787D0(v4, &v26);
      if (v28 < 0)
        v12 = v26;
      sub_100F789A8(*(_DWORD *)(a1 + 244), __p);
      v13 = v25;
      v14 = (void **)__p[0];
      v15 = objc_msgSend(a2, "isEndpointOnCurrentDevice");
      *(_DWORD *)buf = 68290562;
      v16 = __p;
      if (v13 < 0)
        v16 = v14;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v36 = 2082;
      *(_QWORD *)&v36[2] = "";
      v37 = 1026;
      v38 = v10;
      v39 = 1026;
      v40 = v11;
      v41 = 2082;
      v42 = v12;
      v43 = 1026;
      v44 = (int)v5;
      v45 = 2082;
      v46 = v16;
      v47 = 1026;
      v48 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,onEmergencyCallStatusChanged\", \"call connected\":%{public}hhd, \"isSOS\":%{public}hhd, \"call status\":%{public, location:escape_only}s, \"TU trigger\":%{public}d, \"trigger\":%{public, location:escape_only}s, \"endpointOnCurrentDevice\":%{public}hhd}", buf, 0x3Eu);
      if (v25 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v26);
    }
    sub_1013920A4(*(_QWORD *)(a1 + 688), (uint64_t)objc_msgSend(a2, "callUUID"), *(unsigned int *)(a1 + 244), v4, (uint64_t)objc_msgSend(a2, "isEndpointOnCurrentDevice"));
    v17 = a1 + 584;
    if (!*(_QWORD *)(a1 + 584))
      operator new();
    if (*(unsigned __int8 *)(a1 + 68) != objc_msgSend(a2, "isConnected"))
    {
      v18 = objc_msgSend(a2, "isConnected");
      *(_BYTE *)(a1 + 68) = v18;
      if (v18)
      {
        sub_100F775E0(a1, *(_DWORD *)(a1 + 64));
        sub_100F7798C(a1);
        if (*(_QWORD *)v17)
        {
          *(_BYTE *)(*(_QWORD *)v17 + 33) = 1;
          *(double *)(*(_QWORD *)v17 + 552) = sub_1001FCBB4();
        }
      }
    }
    *(_QWORD *)buf = &v30;
    sub_1006AB5A0((void ***)buf);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#EmergCon,onEmergencyCallStatusChanged,no emergency call active", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v30) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,onEmergencyCallStatusChanged,no emergency call active", &v30, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onEmergencyCallStatusChanged(TUCall *)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    *(_BYTE *)(a1 + 68) = 0;
    sub_1013920A4(*(_QWORD *)(a1 + 688), 0, 0, 0, 0);
    if (sub_100CD595C(a1 + 72))
      sub_100F7CED8(a1);
    *(_BYTE *)(a1 + 134) = 0;
    v21 = *(_QWORD *)(a1 + 584);
    if (v21)
      sub_100F7DC90(v21);
    if (*(_DWORD *)(a1 + 240)
      && objc_opt_class(MCProfileConnection, v20)
      && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isSafetyDataSubmissionAllowed"))
    {
      v33 = CFSTR("callTriggerType");
      v34 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 240));
      AnalyticsSendEvent(CFSTR("com.apple.locationd.emergency.call_trigger_histogram"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
    }
    *(_QWORD *)(a1 + 256) = 0;
    *(_DWORD *)(a1 + 240) = 0;
  }
}

void sub_100F74744(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  operator delete();
}

void sub_100F74808(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#EmergCon,CLEmergencyController,interactiveStateChanged", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,CLEmergencyController,interactiveStateChanged", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::interactiveStateChanged()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v4 = *(_QWORD *)(a1 + 584);
  if (v4)
    sub_100F7E850(v4, v3);
}

void sub_100F749A4(uint64_t a1, uint64_t a2)
{
  char v3;

  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_WORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 255;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 96) = 0x400000000;
  *(_WORD *)(a1 + 104) = 256;
  *(_BYTE *)(a1 + 106) = 0;
  *(_DWORD *)(a1 + 108) = 255;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0x400000000;
  *(_WORD *)(a1 + 124) = 256;
  *(_BYTE *)(a1 + 126) = 0;
  *(_DWORD *)(a1 + 128) = 255;
  *(_BYTE *)(a1 + 132) = 0;
  v3 = sub_1001DC538();
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 133) = v3;
  *(_BYTE *)(a1 + 134) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = -1;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  *(_DWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 516) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_BYTE *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  operator new();
}

void sub_100F760B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, _QWORD *a12, uint64_t *a13, uint64_t a14, _QWORD **a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t *a29,uint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v38 = *a30;
  *a30 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  sub_100F8EC9C((const void **)(v34 + 696), 0);
  sub_100F8EC60(a11, 0);
  sub_100F8ED4C(a16, 0);
  v39 = *(_QWORD *)(v34 + 656);
  *(_QWORD *)(v34 + 656) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *v36;
  *v36 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  sub_10047F25C(a12);
  sub_100F7E278((uint64_t *)(v35 + 384), 0);
  v41 = *a13;
  *a13 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(v34 + 560);
  *(_QWORD *)(v34 + 560) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *(_QWORD *)(v34 + 528);
  *(_QWORD *)(v34 + 528) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *a29;
  *a29 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  sub_100067AC4(v35 + 272);
  sub_100067AC4(a31);
  sub_100067AC4(v35 + 192);
  sub_100067AC4(a32);
  sub_100127554(v35 + 112);
  sub_100067AC4(a33);
  sub_100F8ECD8(v35);
  sub_100859D78(a34);
  sub_100008848(a14, *a15);
  _Unwind_Resume(a1);
}

void sub_100F763D0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLEmergencyController::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102195EB8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyController::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102195EB8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyController::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100F7A244(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100F76588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100F765A8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLEmergencyController::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102195EB8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyController::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102195EB8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyController::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100F7AC48(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100F76760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100F76780(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLEmergencyController::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102195EB8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyController::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102195EB8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyController::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100F7B108(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100F76938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F76958(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  __int128 v23;
  void **v24;
  __int128 v25;
  void **v26;
  __int128 v27;
  void **v28;
  __int128 v29;
  void **v30;
  __int128 v31;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v6 = *((_OWORD *)a2 + 5);
  v5 = *((_OWORD *)a2 + 6);
  v7 = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  sub_100F8C7C8(a1 + 120, (__int128 *)(a2 + 15));
  v10 = (void **)(a1 + 936);
  if (*(char *)(a1 + 959) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 117);
  *(_QWORD *)(a1 + 952) = a2[119];
  *(_OWORD *)v10 = v11;
  *((_BYTE *)a2 + 959) = 0;
  *((_BYTE *)a2 + 936) = 0;
  v12 = (void **)(a1 + 960);
  if (*(char *)(a1 + 983) < 0)
    operator delete(*v12);
  v13 = *((_OWORD *)a2 + 60);
  *(_QWORD *)(a1 + 976) = a2[122];
  *(_OWORD *)v12 = v13;
  *((_BYTE *)a2 + 983) = 0;
  *((_BYTE *)a2 + 960) = 0;
  v14 = *((_DWORD *)a2 + 248);
  *(_QWORD *)(a1 + 984) = a2[123];
  *(_DWORD *)(a1 + 992) = v14;
  v15 = a2[131];
  v17 = *(_OWORD *)(a2 + 127);
  v16 = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 1000) = *(_OWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 1016) = v17;
  *(_OWORD *)(a1 + 1032) = v16;
  *(_QWORD *)(a1 + 1048) = v15;
  *(_BYTE *)(a1 + 1056) = *((_BYTE *)a2 + 1056);
  v18 = (void **)(a1 + 1064);
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*v18);
  v19 = *(_OWORD *)(a2 + 133);
  *(_QWORD *)(a1 + 1080) = a2[135];
  *(_OWORD *)v18 = v19;
  *((_BYTE *)a2 + 1087) = 0;
  *((_BYTE *)a2 + 1064) = 0;
  v20 = *((_OWORD *)a2 + 68);
  *(_OWORD *)(a1 + 1100) = *(_OWORD *)((char *)a2 + 1100);
  *(_OWORD *)(a1 + 1088) = v20;
  sub_1003B0498((void **)(a1 + 1120));
  *(_OWORD *)(a1 + 1120) = *((_OWORD *)a2 + 70);
  *(_QWORD *)(a1 + 1136) = a2[142];
  a2[142] = 0;
  a2[141] = 0;
  a2[140] = 0;
  *(_BYTE *)(a1 + 1144) = *((_BYTE *)a2 + 1144);
  v21 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*v21);
  v22 = *((_OWORD *)a2 + 72);
  *(_QWORD *)(a1 + 1168) = a2[146];
  *(_OWORD *)v21 = v22;
  *((_BYTE *)a2 + 1175) = 0;
  *((_BYTE *)a2 + 1152) = 0;
  v23 = *(_OWORD *)(a2 + 147);
  *(_OWORD *)(a1 + 1188) = *(_OWORD *)((char *)a2 + 1188);
  *(_OWORD *)(a1 + 1176) = v23;
  sub_1003B0498((void **)(a1 + 1208));
  *(_QWORD *)(a1 + 1208) = a2[151];
  *(_QWORD *)(a1 + 1216) = a2[152];
  *(_QWORD *)(a1 + 1224) = a2[153];
  a2[152] = 0;
  a2[151] = 0;
  a2[153] = 0;
  v24 = (void **)(a1 + 1232);
  if (*(char *)(a1 + 1255) < 0)
    operator delete(*v24);
  v25 = *((_OWORD *)a2 + 77);
  *(_QWORD *)(a1 + 1248) = a2[156];
  *(_OWORD *)v24 = v25;
  *((_BYTE *)a2 + 1255) = 0;
  *((_BYTE *)a2 + 1232) = 0;
  v26 = (void **)(a1 + 1256);
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*v26);
  v27 = *(_OWORD *)(a2 + 157);
  *(_QWORD *)(a1 + 1272) = a2[159];
  *(_OWORD *)v26 = v27;
  *((_BYTE *)a2 + 1279) = 0;
  *((_BYTE *)a2 + 1256) = 0;
  v28 = (void **)(a1 + 1280);
  if (*(char *)(a1 + 1303) < 0)
    operator delete(*v28);
  v29 = *((_OWORD *)a2 + 80);
  *(_QWORD *)(a1 + 1296) = a2[162];
  *(_OWORD *)v28 = v29;
  *((_BYTE *)a2 + 1303) = 0;
  *((_BYTE *)a2 + 1280) = 0;
  v30 = (void **)(a1 + 1304);
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*v30);
  v31 = *(_OWORD *)(a2 + 163);
  *(_QWORD *)(a1 + 1320) = a2[165];
  *(_OWORD *)v30 = v31;
  *((_BYTE *)a2 + 1327) = 0;
  *((_BYTE *)a2 + 1304) = 0;
  return a1;
}

void sub_100F76BFC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  dispatch_time_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _BOOL4 v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD block[5];
  int v21;
  _QWORD v22[3];
  uint8_t buf[4];
  _QWORD v24[204];

  sub_100197040();
  if (sub_100195F08() && !qword_102309318)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "EMERGENCY: addException", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v21) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 1, "EMERGENCY: addException", &v21, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::connectToCT()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    _CTServerConnectionAddIdentifierException(CFSTR("com.apple.locationd.emergency"));
  }
  v3 = _CTServerConnectionCreateOnTargetQueue(kCFAllocatorDefault, CFSTR("com.apple.locationd.emergency"), objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue"), 0);
  *(_QWORD *)(a1 + 552) = v3;
  if (v3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v24[0] = qword_102309318 + 1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EmergCon EMERGENCY: Connected to CT after %lld attempts", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v21 = 134217984;
      v22[0] = qword_102309318 + 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon EMERGENCY: Connected to CT after %lld attempts", &v21);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::connectToCT()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    qword_102309318 = 0;
  }
  else
  {
    ++qword_102309318;
    v5 = dispatch_time(0, 2000000000 * qword_102309318);
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100F799A0;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_after(v5, v6, block);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v24[0] = qword_102309318;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EmergCon #Warning EMERGENCY: Did not connect to CT after %lld attempts", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v21 = 134217984;
      v22[0] = qword_102309318;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon #Warning EMERGENCY: Did not connect to CT after %lld attempts", &v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::connectToCT()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  sub_100197040();
  if (sub_100195F08())
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 552) != 0;
      *(_DWORD *)buf = 67109376;
      LODWORD(v24[0]) = v9;
      WORD2(v24[0]) = 2048;
      *(_QWORD *)((char *)v24 + 6) = qword_102309318;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "EMERGENCY: connected?, %d, failed, %lld", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v14 = *(_QWORD *)(a1 + 552) != 0;
      v21 = 67109376;
      LODWORD(v22[0]) = v14;
      WORD2(v22[0]) = 2048;
      *(_QWORD *)((char *)v22 + 6) = qword_102309318;
      LODWORD(v19) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 1, "EMERGENCY: connected?, %d, failed, %lld", &v21, v19);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::connectToCT()", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_100F77280(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning #EmergCon call connect timeout fired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EmergCon call connect timeout fired", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyController::CLEmergencyController(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100F77434((id *)v1);
  *(_BYTE *)(v1 + 68) = 1;
  sub_100F775E0(v1, *(_DWORD *)(v1 + 64));
  sub_100F7798C(v1);
}

id *sub_100F77434(id *result)
{
  id *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5[8];
  uint8_t buf[1640];

  if (*((_BYTE *)result + 144))
  {
    v1 = result;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EmergCon clearing call connect timeout", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon clearing call connect timeout", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::clearCallConnectTimeout()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    result = (id *)objc_msgSend(v1[17], "setNextFireDelay:", 1.79769313e308);
    *((_BYTE *)v1 + 144) = 0;
  }
  return result;
}

void sub_100F775E0(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  void *p_p;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  void *v17;
  void *__p;
  __int16 v19;
  unsigned int v20;
  char v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  _BYTE v27[14];
  __int16 v28;
  void *v29;

  *(_DWORD *)(a1 + 64) = a2;
  if (*(_DWORD *)(a1 + 60) == a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)buf = 67109376;
      v23 = v5;
      v24 = 1024;
      LODWORD(v25) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EmergCon,newState,ignoring,fEmergencyStateOld,%d,state,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v6 = *(_DWORD *)(a1 + 60);
      LODWORD(__p) = 67109376;
      HIDWORD(__p) = v6;
      v19 = 1024;
      v20 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,newState,ignoring,fEmergencyStateOld,%d,state,%d", &__p, 14);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::newState(EmergencyState)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return;
  }
  if (*(_BYTE *)(a1 + 69))
    v9 = a2 > 0xA;
  else
    v9 = 1;
  v10 = v9 || ((1 << a2) & 0x442) == 0;
  if (v10 || *(_BYTE *)(a1 + 68))
  {
    *(_DWORD *)(a1 + 60) = a2;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      sub_100F7BE5C(a2, &__p);
      if (v21 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 68289794;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      *(_QWORD *)v27 = "newState";
      *(_WORD *)&v27[8] = 1026;
      *(_DWORD *)&v27[10] = a2;
      v28 = 2082;
      v29 = p_p;
      v13 = "{\"msg%{public}.0s\":\"#EmergCon E911Event\", \"event\":%{public, location:escape_only}s, \"Emergency: state"
            "\":%{public}d, \"Emergency: StringifiedState\":%{public, location:escape_only}s}";
      v14 = v11;
      v15 = 44;
      goto LABEL_26;
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      sub_100F7BE5C(a2, &__p);
      if (v21 >= 0)
        v17 = &__p;
      else
        v17 = __p;
      *(_DWORD *)buf = 68289538;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 1026;
      *(_DWORD *)v27 = a2;
      *(_WORD *)&v27[4] = 2082;
      *(_QWORD *)&v27[6] = v17;
      v13 = "{\"msg%{public}.0s\":\"#EmergCon delaying emergency state until call connects\", \"state\":%{public}d, \"Str"
            "ingifiedState\":%{public, location:escape_only}s}";
      v14 = v16;
      v15 = 34;
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
      if (v21 < 0)
        operator delete(__p);
    }
  }
}

void sub_100F7798C(uint64_t a1)
{
  NSObject *v2;
  std::string *p_p;
  NSObject *v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  NSObject *v8;
  std::string *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  NSObject *v16;
  std::string *v17;
  const char *v18;
  uint8_t *v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  std::string __p;
  __int128 v25;
  int v26;
  _BYTE v27[20];
  uint8_t buf[8];
  _BYTE v29[40];
  int v30;

  v25 = *(_OWORD *)(a1 + 92);
  v26 = *(_DWORD *)(a1 + 108);
  sub_100CD56FC((uint64_t)v27, (unsigned __int8 *)&v25, *(unsigned __int8 *)(a1 + 56));
  if (*(_DWORD *)v27 == *(_DWORD *)(a1 + 72)
    && *(_QWORD *)&v27[4] == *(_QWORD *)(a1 + 76)
    && *(_QWORD *)&v27[12] == *(_QWORD *)(a1 + 84))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      sub_100CD5278(v27, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,updateEmergencyState,ignoring as it is same as current state\", \"state\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100F77434((id *)a1);
  }
  else
  {
    if (sub_100CD595C((uint64_t)v27))
    {
      if (!*(_BYTE *)(a1 + 134))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v4 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EmergCon,updateEmergencyState,emergency call not active but CT in voice emergency", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,updateEmergencyState,emergency call not active but CT in voice emergency", &__p, 2);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::updateEmergencyState()", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        sub_100F7CED8(a1);
      }
    }
    else
    {
      sub_100F7855C(a1);
    }
    if (*(_BYTE *)(a1 + 69) && sub_100CD5918((uint64_t)v27) && !*(_BYTE *)(a1 + 68))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        sub_100CD5278(v27, &__p);
        v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2082;
        *(_QWORD *)&v29[12] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,updateEmergencyState,delaying emergency state until call connects\", \"State\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100F7D3D4((id *)a1);
    }
    else
    {
      sub_100F77434((id *)a1);
      v5 = sub_100219C64((uint64_t)v27);
      sub_100F7BB04((unsigned __int8 *)a1, !v5);
      v6 = sub_100CD597C(a1 + 72);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v27;
      *(_DWORD *)(a1 + 88) = *(_DWORD *)&v27[16];
      v7 = sub_100CD597C(a1 + 72);
      if (!v6 || v7)
      {
        if (!v6 && v7)
          sub_100F7C430(a1);
      }
      else
      {
        sub_100F7CD08(a1);
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        sub_100CD5278(v27, &__p);
        v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2082;
        *(_QWORD *)&v29[12] = "newStateClass";
        *(_WORD *)&v29[20] = 2082;
        *(_QWORD *)&v29[22] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon E911Event\", \"event\":%{public, location:escape_only}s, \"Emergency: StringifiedState\":%{public, location:escape_only}s}", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v10 = *(_QWORD **)(a1 + 16);
      if (v10 != (_QWORD *)(a1 + 24))
      {
        do
        {
          v11 = (void *)v10[4];
          *(_OWORD *)&v29[24] = *(_OWORD *)v27;
          v30 = *(_DWORD *)&v27[16];
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)v29 = 3221225472;
          *(_QWORD *)&v29[8] = sub_100F8F69C;
          *(_QWORD *)&v29[16] = &unk_102196018;
          objc_msgSend(v11, "emergencyStateChange:", -[uint8_t copy](buf, "copy"));
          v12 = (_QWORD *)v10[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v10[2];
              v14 = *v13 == (_QWORD)v10;
              v10 = v13;
            }
            while (!v14);
          }
          v10 = v13;
        }
        while (v13 != (_QWORD *)(a1 + 24));
      }
      v15 = *(_QWORD *)(a1 + 688);
      v22 = *(_OWORD *)v27;
      v23 = *(_DWORD *)&v27[16];
      sub_1013914FC(v15, &v22);
      v20 = *(_OWORD *)v27;
      v21 = *(_DWORD *)&v27[16];
      sub_100F7D5A0(a1, &v20);
    }
  }
}

void sub_100F77FA8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLEmergencyController::onDeviceOrientation");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102195EB8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyController::onDeviceOrientation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102195EB8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyController::onDeviceOrientation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100F7B21C(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100F78158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100F78178(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLEmergencyController::onMotionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102195EB8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyController::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102195EB8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyController::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100F7B448(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100F78330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100F78350(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLEmergencyController::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102195EB8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyController::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102195EB8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyController::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 5 && sub_1000C4240())
    *(_BYTE *)(a4 + 516) = *a3;
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100F78514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100F78534(id a1)
{
  -[SOSManager mostRecentLocationSentWithCompletion:](+[SOSManager sharedInstance](SOSManager, "sharedInstance"), "mostRecentLocationSentWithCompletion:", &stru_102195E30);
}

void sub_100F7855C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  _QWORD v7[2];
  uint8_t buf[1640];

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 152) = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EmergCon,clearLongEemTimeout,timer cleared", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,clearLongEemTimeout,timer cleared", v7, 2, v7[0]);
LABEL_19:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::clearLongEemTimeout()", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EmergCon,clearLongEemTimeout,no timer exists", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,clearLongEemTimeout,no timer exists", v7, 2, v7[0]);
      goto LABEL_19;
    }
  }
}

_QWORD *sub_100F787D0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_102196750[a1]);
}

uint64_t sub_100F787E4(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  unsigned int v9;

  if (a1 < 7)
    return a1 + 1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EmergCon unhandled TUCallStatus %{public}d", buf, 8u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v7[0] = 67240192;
    v7[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon unhandled TUCallStatus %{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "static CLEmergencyController::CallStatus CLEmergencyController::toCallStatus(TUCallStatus)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

_QWORD *sub_100F789A8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_102196790[a1]);
}

uint64_t sub_100F789BC(int a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  NSObject *v11;
  double v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v2 = a2;
  switch((int)a2)
  {
    case 0:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #EmergCon TU trigger was not filled in", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_30;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v15[0]) = 0;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EmergCon TU trigger was not filled in", v15, 2);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 2, "static CLEmergencyController::EmergencyTriggerType CLEmergencyController::toEmergencyTriggerType(BOOL, TUCallOriginatingUIType)", "%s\n", v5);
      goto LABEL_38;
    case 1:
      return v2;
    case 2:
      return 2;
    case 3:
      return 4;
    case 4:
      return 5;
    case 5:
      return 6;
    case 6:
      return 7;
    case 7:
      return 8;
    case 8:
      return 12;
    case 9:
      return 13;
    case 10:
      v8 = !sub_100F78DA8();
      v9 = 9;
      v10 = 17;
      goto LABEL_21;
    case 11:
      return 14;
    case 12:
      v8 = !sub_100F78DA8();
      v9 = 10;
      v10 = 18;
LABEL_21:
      if (v8)
        v2 = v9;
      else
        v2 = v10;
      break;
    case 13:
      v2 = 11;
      break;
    case 26:
      v2 = 16;
      break;
    default:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v17 = v2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EmergCon unhandled TU trigger %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v15[0] = 67240192;
        v15[1] = v2;
        v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon unhandled TU trigger %{public}d", v15, 8);
        v7 = v14;
        sub_100512490("Generic", 1, 0, 0, "static CLEmergencyController::EmergencyTriggerType CLEmergencyController::toEmergencyTriggerType(BOOL, TUCallOriginatingUIType)", "%s\n", v13);
LABEL_38:
        if (v7 != buf)
          free(v7);
      }
LABEL_30:
      if (a1)
        v2 = 3;
      else
        v2 = 0;
      break;
  }
  return v2;
}

BOOL sub_100F78DA8()
{
  void *v0;

  v0 = (id)CFPreferencesCopyValue(CFSTR("SafetySOSEvent"), CFSTR("com.apple.anomalydetectiond"), CFSTR("mobile"), kCFPreferencesCurrentHost);
  return v0 && objc_msgSend(v0, "intValue") == 2;
}

uint64_t sub_100F78E00(uint64_t result)
{
  if (result > 0x24 || ((1 << result) & 0x17FFEFFFFFLL) == 0)
  {
    if ((result - 1000) >= 2)
      return 0xFFFFFFFFLL;
    else
      return result;
  }
  return result;
}

uint64_t sub_100F78E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = sub_100F79058(a1, a2);
  result = 0;
  switch((int)v2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      result = v2;
      break;
    case 9:
    case 10:
    case 11:
    case 15:
      result = 3;
      break;
    case 19:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EmergCon,mapCallTriggerType,invalid enum value", buf, 2u);
      }
      v5 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,mapCallTriggerType,invalid enum value", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "static Emergency::CallTriggerType CLEmergencyController::mapCallTriggerType(EmergencyTriggerType)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
        result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F79058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1;
  if (a1 <= 0x12
    && ((1 << a1) & 0x60E80) != 0
    && (!objc_opt_class(MCProfileConnection, a2)
     || (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isSafetyDataSubmissionAllowed") & 1) == 0))
  {
    return 15;
  }
  return v2;
}

_QWORD *sub_100F790BC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v5;
  _QWORD *result;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  switch(a1)
  {
    case 0:
      v4 = "kClientRegistration";
      goto LABEL_14;
    case 1:
      v4 = "kCTConnectionEstablished";
      goto LABEL_14;
    case 2:
      v4 = "kCarrierChanged";
      goto LABEL_14;
    case 3:
      v4 = "kOperatorChanged";
      goto LABEL_14;
    case 4:
      v4 = "kVoiceCarrierChanged";
      goto LABEL_14;
    case 5:
      v4 = "kDEMAreaMonitorStatusChanged";
LABEL_14:
      result = sub_1015A2E04(a2, v4);
      break;
    default:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "#EmergCon Unknown settings changed reason %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v9[0] = 67109120;
        v9[1] = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EmergCon Unknown settings changed reason %d", v9);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "static std::string CLEmergencyController::toString(SettingsChangedReason)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      result = sub_1015A2E04(a2, "UnhandledReason");
      break;
  }
  return result;
}

id sub_100F793A4(uint64_t *a1)
{
  id v1;
  _QWORD v3[4];
  _BYTE v4[1328];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_100F8F67C;
  v3[3] = &unk_102195FE8;
  sub_100F8CA40((uint64_t)v4, a1);
  v1 = objc_msgSend(v3, "copy");
  sub_100857FD0((uint64_t)v4);
  return v1;
}

void sub_100F79428(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100857FD0(v1);
  _Unwind_Resume(a1);
}

void sub_100F7943C(uint64_t a1, int a2)
{
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  BOOL v22[16];
  uint8_t buf[8];
  _BYTE v24[10];
  __int16 v25;
  int v26;

  sub_1001E4804(buf);
  v22[0] = 0;
  v4 = sub_1001E4874(*(uint64_t *)buf, "EmergencyCellularDataToggleAllowed", v22);
  if (v22[0])
    v5 = 0;
  else
    v5 = v4;
  v6 = *(std::__shared_weak_count **)v24;
  if (!*(_QWORD *)v24)
    goto LABEL_8;
  v7 = (unint64_t *)(*(_QWORD *)v24 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v5)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v5)
    {
LABEL_9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EmergCon,enableCellularData,not allowed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_WORD *)v22 = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,enableCellularData,not allowed", v22, v21);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::enableCellularData(BOOL)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      *(_BYTE *)(a1 + 568) = 0;
      return;
    }
  }
  HIBYTE(v21) = 0;
  if (!a2)
  {
    if (!*(_BYTE *)(a1 + 568))
      return;
    *(_BYTE *)(a1 + 568) = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EmergCon forcing cellular data off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v22 = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon forcing cellular data off", v22, v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::enableCellularData(BOOL)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v13 = 0;
    v12 = (_QWORD *)(a1 + 552);
    goto LABEL_35;
  }
  _CTServerConnectionGetCellularDataIsEnabled(*(_QWORD *)(a1 + 552), (char *)&v21 + 7);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v24 = 2082;
    *(_QWORD *)&v24[2] = "";
    v25 = 1026;
    v26 = HIBYTE(v21);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"CellData\":%{public}d}", buf, 0x18u);
  }
  if (!HIBYTE(v21))
  {
    *(_BYTE *)(a1 + 568) = 1;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EmergCon forcing cellular data on", buf, 2u);
    }
    v12 = (_QWORD *)(a1 + 552);
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v22 = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon forcing cellular data on", v22, v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::enableCellularData(BOOL)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v13 = 1;
LABEL_35:
    _CTServerConnectionSetCellularDataIsEnabled(*v12, v13);
  }
}

void sub_100F79984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F799A0(uint64_t a1)
{
  return sub_100F76BFC(*(_QWORD *)(a1 + 32));
}

void sub_100F799A8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void *p_p;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void **v40;
  int v41;
  char *v42;
  char *v43;
  void *v44[2];
  uint64_t v45;
  void *__p;
  int v47;
  char v48;
  void *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  void **v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  void **v59;
  __int16 v60;
  int v61;
  uint8_t buf[4];
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  void **v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  int v75;

  v4 = &qword_1022A0000;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v5 = &qword_1022A0000;
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_DWORD *)a2 + 4);
    v8 = *a2;
    v9 = *((int *)a2 + 1);
    sub_1005A4E30((uint64_t)a2, &v49);
    v10 = SHIBYTE(v53);
    v11 = (void **)v49;
    v12 = *((int *)a2 + 2);
    sub_1005A4E60((uint64_t)a2, &__p);
    v13 = &v49;
    if (v10 < 0)
      v13 = v11;
    p_p = __p;
    v15 = a2[12];
    if (v48 >= 0)
      p_p = &__p;
    *(_DWORD *)buf = 67110658;
    v63 = v7;
    v64 = 1024;
    v65 = v8;
    v66 = 2048;
    v67 = v9;
    v68 = 2080;
    v69 = v13;
    v70 = 2048;
    v71 = v12;
    v72 = 2080;
    v73 = p_p;
    v74 = 1024;
    v75 = v15;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EmergCon onEmergencyModeChanged sim,%d,enabled,%d,type,%ld,CLCTEmergencyModeType_%s,state,%ld,CLCTEmergencyModeState_%s,isEmergencyText,%d", buf, 0x3Cu);
    if (v48 < 0)
      operator delete(__p);
    v5 = &qword_1022A0000;
    v4 = &qword_1022A0000;
    if (SHIBYTE(v53) < 0)
      operator delete(v49);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v32 = qword_1022A0088;
    v33 = *((_DWORD *)a2 + 4);
    v34 = *a2;
    v35 = *((int *)a2 + 1);
    sub_1005A4E30((uint64_t)a2, &__p);
    v36 = v48;
    v37 = (void **)__p;
    v38 = *((int *)a2 + 2);
    sub_1005A4E60((uint64_t)a2, v44);
    v39 = &__p;
    if (v36 < 0)
      v39 = v37;
    if (v45 >= 0)
      v40 = v44;
    else
      v40 = (void **)v44[0];
    v41 = a2[12];
    LODWORD(v49) = 67110658;
    HIDWORD(v49) = v33;
    v50 = 1024;
    v51 = v34;
    v52 = 2048;
    v53 = v35;
    v54 = 2080;
    v55 = v39;
    v56 = 2048;
    v57 = v38;
    v58 = 2080;
    v59 = v40;
    v60 = 1024;
    v61 = v41;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "#EmergCon onEmergencyModeChanged sim,%d,enabled,%d,type,%ld,CLCTEmergencyModeType_%s,state,%ld,CLCTEmergencyModeState_%s,isEmergencyText,%d", &v49, 60, v44[0], (const char *)v44[1], v45, (const char *)__p, v47);
    v43 = v42;
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    v5 = &qword_1022A0000;
    v4 = &qword_1022A0000;
    if (v48 < 0)
      operator delete(__p);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onEmergencyModeChanged(CLCTEmergencyMode)", "%s\n", v43);
    if (v43 != (char *)buf)
      free(v43);
  }
  v16 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 112) = v16;
  if (!*(_BYTE *)(a1 + 132))
    goto LABEL_16;
  if (a2[12] || !*a2 || !*((_DWORD *)a2 + 1))
  {
    *(_BYTE *)(a1 + 132) = 0;
LABEL_16:
    v17 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 4);
    *(_OWORD *)(a1 + 92) = v17;
  }
  sub_100F7798C(a1);
  v19 = *((_DWORD *)a2 + 1);
  v20 = *a2;
  v21 = a2[12];
  v22 = *((_DWORD *)a2 + 4);
  if (v22 < 2 || v22 == 255)
  {
    if (v22 != 1 || *(_BYTE *)(a1 + 133))
    {
      if (!v20 || v19)
      {
        if (v22)
        {
          if (v22 == 1)
          {
            *(_DWORD *)(a1 + 52) = v19;
            v30 = sub_100F894B4(v18, 1, v19, v21 != 0);
            sub_100F7A08C(a1, v30);
          }
          else if (!v20)
          {
            *(_DWORD *)(a1 + 48) = v19;
            *(_DWORD *)(a1 + 52) = v19;
            sub_100F7A08C(a1, 0);
          }
        }
        else
        {
          *(_DWORD *)(a1 + 48) = v19;
          v31 = sub_100F894B4(v18, 0, v19, v21 != 0);
          sub_100F7A08C(a1, v31);
        }
      }
      else
      {
        sub_100F7A08C(a1, 0xAu);
      }
    }
    else
    {
      if (v4[16] != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v23 = v5[17];
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v63 = 1;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "#EmergCon Unexpected Sim Instance received %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v4[16] != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v24 = v5[17];
        v49 = (void *)0x104000100;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 17, "#EmergCon Unexpected Sim Instance received %d", &v49);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onEmergencyModeChanged(CLCTEmergencyMode)", "%s\n", v25);
LABEL_40:
        if (v26 != buf)
          free(v26);
      }
    }
  }
  else
  {
    if (v4[16] != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v27 = v5[17];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      v63 = v22;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "#EmergCon,InvalidSim,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v4[16] != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v28 = v5[17];
      LODWORD(v49) = 67109120;
      HIDWORD(v49) = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 17, "#EmergCon,InvalidSim,%d", &v49);
      v26 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onEmergencyModeChanged(CLCTEmergencyMode)", "%s\n", v29);
      goto LABEL_40;
    }
  }
}

void sub_100F7A054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F7A08C(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  unsigned int v9;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EmergCon,updateCtEmergencyState,state,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,updateCtEmergencyState,state,%d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::updateCtEmergencyState(EmergencyState)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100F7EB58(a1, a2);
}

uint64_t sub_100F7A244(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  NSObject *v4;
  _BYTE v5[16];
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;

  if (*a3 == 1)
  {
    v3 = result;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = "CLMobileAssetManager_Type::kNotificationEmergencyCarrierSettings";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,#cb,#EmergSettings CB:notification\", \"notif\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_100525028(v5);
    sub_100F7A380(v3, (uint64_t)v5);
    return sub_10011A5A8(v5);
  }
  return result;
}

void sub_100F7A364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100F7A380(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *i;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t *v11;
  void **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t *v17;
  void **v18;
  uint64_t *v19;
  int v20;
  NSObject *v21;
  int v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  int v31;
  const char *v32;
  void **v33;
  uint64_t v34;
  uint64_t *v35;
  _BYTE *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40[332];
  int v41[333];
  int v42;
  int v43;
  _BYTE buf[12];
  char v45;
  int v46;
  _BYTE *v47;
  void *__p[2];
  char v49;

  v3 = a1 + 200;
  for (i = *(_QWORD **)(a1 + 216); i; i = (_QWORD *)*i)
  {
    v6 = (void *)sub_10011A5AC(a2);
    sub_10059AC3C((uint64_t)(i + 3), v6);
  }
  v46 = 0;
  *(_QWORD *)buf = &v46;
  v7 = sub_100F8ED88(v3, &v46, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v43 = 1;
  *(_QWORD *)buf = &v43;
  v8 = sub_100F8ED88(v3, &v43, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  sub_100F7FCF8(a1, (uint64_t)(v7 + 3), (uint64_t)(v8 + 3), (uint64_t)__p);
  v42 = 0;
  *(_QWORD *)buf = &v42;
  v9 = sub_10085EDC0(a1 + 160, &v42, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  sub_100F76958((uint64_t)(v9 + 3), (uint64_t *)__p);
  sub_100857FD0((uint64_t)__p);
  *(_DWORD *)buf = 0;
  __p[0] = buf;
  *((_DWORD *)sub_10085EDC0(a1 + 160, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 6) = 0;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v46 = 0;
    __p[0] = &v46;
    v11 = sub_10085EDC0(a1 + 160, &v46, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
    sub_100F7CA7C((unsigned __int8 *)v11 + 24, __p);
    v12 = v49 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#cb, New Location Settings for sim 1,%{private}s", buf, 0xCu);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v26 = qword_1022A0088;
    v43 = 0;
    *(_QWORD *)buf = &v43;
    v27 = sub_10085EDC0(a1 + 160, &v43, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_100F7CA7C((unsigned __int8 *)v27 + 24, buf);
    if (v45 >= 0)
      v28 = buf;
    else
      v28 = *(_BYTE **)buf;
    v46 = 136380675;
    v47 = v28;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v26, 2, "#EmergCon,#EmergSettings,#cb, New Location Settings for sim 1,%{private}s", &v46, 12);
    v30 = v29;
    if (v45 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::updateEmergencySettings(CLNameValuePair)", "%s\n", v30);
    if (v30 != (char *)__p)
      free(v30);
  }
  if (*(_BYTE *)(a1 + 133))
  {
    v46 = 2;
    *(_QWORD *)buf = &v46;
    v13 = sub_100F8ED88(v3, &v46, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v43 = 3;
    *(_QWORD *)buf = &v43;
    v14 = sub_100F8ED88(v3, &v43, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_100F7FCF8(a1, (uint64_t)(v13 + 3), (uint64_t)(v14 + 3), (uint64_t)__p);
    v42 = 1;
    *(_QWORD *)buf = &v42;
    v15 = sub_10085EDC0(a1 + 160, &v42, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_100F76958((uint64_t)(v15 + 3), (uint64_t *)__p);
    sub_100857FD0((uint64_t)__p);
    *(_DWORD *)buf = 1;
    __p[0] = buf;
    *((_DWORD *)sub_10085EDC0(a1 + 160, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 6) = 1;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v46 = 1;
      __p[0] = &v46;
      v17 = sub_10085EDC0(a1 + 160, &v46, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
      sub_100F7CA7C((unsigned __int8 *)v17 + 24, __p);
      v18 = v49 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#cb, New Location Settings for sim 2,%{private}s", buf, 0xCu);
      if (v49 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v34 = qword_1022A0088;
      v43 = 1;
      *(_QWORD *)buf = &v43;
      v35 = sub_10085EDC0(a1 + 160, &v43, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_100F7CA7C((unsigned __int8 *)v35 + 24, buf);
      if (v45 >= 0)
        v36 = buf;
      else
        v36 = *(_BYTE **)buf;
      v46 = 136380675;
      v47 = v36;
      LODWORD(v39) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v34, 2, "#EmergCon,#EmergSettings,#cb, New Location Settings for sim 2,%{private}s", &v46, v39);
      v38 = v37;
      if (v45 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::updateEmergencySettings(CLNameValuePair)", "%s\n", v38);
      if (v38 != (char *)__p)
        free(v38);
    }
  }
  *(_BYTE *)(a1 + 69) = 0;
  v19 = *(uint64_t **)(a1 + 176);
  if (v19)
  {
    v20 = 0;
    do
    {
      v20 |= *((_BYTE *)v19 + 32) != 0;
      *(_BYTE *)(a1 + 69) = v20 & 1;
      v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v21 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(unsigned __int8 *)(a1 + 69);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#EmeregCon,#EmergSettings,#cb,fDelayEmergencyUntilCallConnect,%d", (uint8_t *)__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v31 = *(unsigned __int8 *)(a1 + 69);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v31;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmeregCon,#EmergSettings,#cb,fDelayEmergencyUntilCallConnect,%d", buf);
    v33 = (void **)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::updateEmergencySettings(CLNameValuePair)", "%s\n", v32);
    if (v33 != __p)
      free(v33);
  }
  *(_DWORD *)buf = 0;
  __p[0] = buf;
  v23 = sub_10085EDC0(a1 + 160, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
  sub_100F8CA40((uint64_t)v41, v23 + 3);
  sub_100F800FC(a1, 2, v41);
  result = sub_100857FD0((uint64_t)v41);
  if (*(_BYTE *)(a1 + 133))
  {
    *(_DWORD *)buf = 1;
    __p[0] = buf;
    v25 = sub_10085EDC0(a1 + 160, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
    sub_100F8CA40((uint64_t)v40, v25 + 3);
    sub_100F800FC(a1, 2, v40);
    return sub_100857FD0((uint64_t)v40);
  }
  return result;
}

void sub_100F7AC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100857FD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F7AC48(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  const char *v24;
  uint8_t buf[4];
  _BYTE v26[14];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  switch(*a3)
  {
    case 6:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(unsigned int *)(a4 + 4);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)v26 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EmergCon,onDaemonStatusNotification,kNotificationReachability,[%{public}ld]", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v17 = (const char *)*(unsigned int *)(a4 + 4);
        v23 = 134349056;
        v24 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,onDaemonStatusNotification,kNotificationReachability,[%{public}ld]", &v23, 12);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      v8 = *(unsigned int *)(a4 + 4);
      *(_DWORD *)(a1 + 512) = v8;
      sub_101394FF8(*(_QWORD *)(a1 + 688), v8);
      break;
    case 7:
      *(_DWORD *)(a1 + 544) = *(_DWORD *)(a4 + 12);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_DWORD *)(a4 + 12);
        v11 = (int)*(double *)a4;
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)v26 = 0;
        *(_WORD *)&v26[4] = 2082;
        *(_QWORD *)&v26[6] = "";
        v27 = 1025;
        v28 = v10;
        v29 = 1026;
        v30 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,onDaemonStatusNotification\", \"chargerType\":%{private}d, \"batteryLevel\":%{public}d}", buf, 0x1Eu);
      }
      sub_101394D68(*(_QWORD *)(a1 + 688), a4);
      break;
    case 8:
      v12 = *(uint64_t **)(a1 + 672);
      if (v12)
      {
        v13 = *v12;
        if (*v12)
        {
          if (*(_BYTE *)a4)
            v14 = (const char *)(v13 + 24);
          else
            v14 = (const char *)*v12;
          sub_100EEFB48(v13, v14);
        }
      }
      break;
    case 0xB:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (*(_BYTE *)a4)
          v16 = "locked";
        else
          v16 = "unlocked";
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v26 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#EmergCon,onDaemonStatusNotification,kNotificationLockScreen,display [%{public}s]", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        if (*(_BYTE *)a4)
          v20 = "locked";
        else
          v20 = "unlocked";
        v23 = 136446210;
        v24 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,onDaemonStatusNotification,kNotificationLockScreen,display [%{public}s]", &v23, 12);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      *(_BYTE *)(a1 + 640) = *(_BYTE *)a4;
      break;
    default:
      return;
  }
}

void sub_100F7B108(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v5;
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _BOOL4 v11;

  if (*a3 == 4)
  {
    v5 = *(_DWORD *)(a4 + 188);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 68289282;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1026;
      v11 = v5 == 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon Location Services status change\", \"enabled\":%{public}hhd}", (uint8_t *)v7, 0x18u);
    }
    sub_101392C4C(*(_QWORD *)(a1 + 688), v5 == 1);
  }
}

void sub_100F7B21C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;

  if (a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 68289283;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 1025;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,onDeviceOrientation,\", \"deviceOrientation\":%{private}d}", buf, 0x18u);
    }
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 8);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#warning,#EmergCon,onDeviceOrientation,data nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#warning,#EmergCon,onDeviceOrientation,data nullptr", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onDeviceOrientation(const CLOrientationNotifier::Sample *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100F7B448(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if (*a3 == 1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_DWORD *)(a4 + 12);
      v8[0] = 68289283;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1025;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,handleAssistanceMotion,\", \"mountState\":%{private}d}", (uint8_t *)v8, 0x18u);
    }
    *(_DWORD *)(a1 + 540) = *(_DWORD *)(a4 + 12);
  }
}

CLOSTransaction *sub_100F7B550(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  CLOSTransaction *result;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 664))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "#EmergCon Creating new transaction without releasing previous one", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EmergCon Creating new transaction without releasing previous one", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::createTransaction()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_100F7B834(a1);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EmergCon Creating os transaction CLEmergency", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v10[0] = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon Creating os transaction CLEmergency", v10, v9);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::createTransaction()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLEmergency");
  *(_QWORD *)(a1 + 664) = result;
  return result;
}

void sub_100F7B834(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 664))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EmergCon Release os transaction CLEmergency", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon Release os transaction CLEmergency", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::releaseTransaction()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }

    *(_QWORD *)(a1 + 664) = 0;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EmergCon Attempt to release transaction that was already released", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon Attempt to release transaction that was already released", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::releaseTransaction()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100F7BB04(unsigned __int8 *a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;

  if (*a1 == a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *a1;
      *(_DWORD *)buf = 67109376;
      v19 = v5;
      v20 = 1024;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EmergCon setCLEEA,Current,%d,New,%d,ignoring", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v6 = *a1;
      v14 = 67109376;
      v15 = v6;
      v16 = 1024;
      v17 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon setCLEEA,Current,%d,New,%d,ignoring", &v14, 14);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::setCLEEA(BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a1;
      *(_DWORD *)buf = 67109376;
      v19 = v10;
      v20 = 1024;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EmergCon setCLEEA,Current,%d,New,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v11 = *a1;
      v14 = 67109376;
      v15 = v11;
      v16 = 1024;
      v17 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon setCLEEA,Current,%d,New,%d", &v14, 14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::setCLEEA(BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *a1 = a2;
    objc_msgSend(objc_msgSend(objc_msgSend(*((id *)a1 + 1), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "markClientEmergencyEnablementTransition:", *a1);
  }
}

_QWORD *sub_100F7BE5C@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xE)
    v2 = "UnknownState";
  else
    v2 = off_102196830[a1];
  return sub_1015A2E04(a2, v2);
}

id sub_100F7BE88(uint64_t a1, int a2)
{
  id result;
  id v5;

  result = (id)sub_100195F08();
  if ((_DWORD)result)
  {
    v5 = *(id *)(a1 + 680);
    if (a2)
    {
      if (!v5)
      {
        v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:forClient:", CFSTR("CLStreamingAwareLocationProvider"), CFSTR("CLEmergencyController"));
        *(_QWORD *)(a1 + 680) = v5;
      }
      return objc_msgSend(v5, "takeAccuracyEnablementAssertionForClient:withDesiredAccuracy:", CLISP_ME_TOKEN, -1.0);
    }
    else
    {
      return objc_msgSend(v5, "releaseAccuracyEnablementAssertionForClient:", CLISP_ME_TOKEN);
    }
  }
  return result;
}

void sub_100F7BF14(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *global_queue;
  BOOL v11[16];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  if (!objc_opt_class(AVSystemController, a2))
    return;
  sub_1001E4804(buf);
  v11[0] = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "EmergencyUnpickAirPlayRoutesEnabled", v11);
  if (v11[0])
    v3 = 0;
  else
    v3 = v2;
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v3)
        goto LABEL_10;
LABEL_20:
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async(global_queue, &stru_102195E50);
      return;
    }
  }
  if (!v3)
    goto LABEL_20;
LABEL_10:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EmergCon,unpick AirPlay routes is disabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    *(_WORD *)v11 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,unpick AirPlay routes is disabled", v11, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::unpickAirPlayRoutes()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100F7C130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F7C14C(id a1)
{
  id v1;
  NSObject *v2;
  double v3;
  uint8_t *v4;
  uint8_t *v5;
  NSObject *v6;
  double v7;
  uint8_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  v9 = 0;
  v1 = +[AVSystemController sharedAVSystemController](AVSystemController, "sharedAVSystemController");
  if ((objc_msgSend(v1, "setAttribute:forKey:error:", &__kCFBooleanTrue, AVSystemController_RouteAwayFromAirPlayAttribute, &v9) & 1) != 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EmergCon,successfully unpicked AirPlay routes", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v10) = 0;
      v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,successfully unpicked AirPlay routes", &v10, 2);
      v5 = v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::unpickAirPlayRoutes()_block_invoke", "%s\n", v3);
LABEL_19:
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EmergCon,error unpicking AirPlay routes,%{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v10 = 138543362;
      v11 = v9;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,error unpicking AirPlay routes,%{public}@", &v10, 12);
      v5 = v8;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::unpickAirPlayRoutes()_block_invoke", "%s\n", v7);
      goto LABEL_19;
    }
  }
}

id sub_100F7C430(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t *v4;
  uint8_t *v5;
  NSObject *v6;
  uint64_t *v7;
  uint8_t *v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _BYTE v27[12];
  char v28;
  int v29;
  _BYTE *v30;
  uint8_t buf[8];
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EmergCon,EnterEmergency", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    *(_WORD *)v27 = 0;
    LODWORD(v26) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,EnterEmergency", v27, v26);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::enterEmergency()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v29 = 0;
    *(_QWORD *)buf = &v29;
    v4 = sub_10085EDC0(a1 + 160, &v29, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_100F7CA7C((unsigned __int8 *)v4 + 24, buf);
    v5 = v35 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v27 = 136380675;
    *(_QWORD *)&v27[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EmgContext,repeating current settings for sim 1,%{private}s", v27, 0xCu);
    if (SHIBYTE(v35) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v16 = qword_1022A0088;
    HIDWORD(v26) = 0;
    *(_QWORD *)v27 = (char *)&v26 + 4;
    v17 = sub_10085EDC0(a1 + 160, (int *)&v26 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)v27);
    sub_100F7CA7C((unsigned __int8 *)v17 + 24, v27);
    if (v28 >= 0)
      v18 = v27;
    else
      v18 = *(_BYTE **)v27;
    v29 = 136380675;
    v30 = v18;
    LODWORD(v26) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#EmgContext,repeating current settings for sim 1,%{private}s", &v29, v26);
    v20 = v19;
    if (v28 < 0)
      operator delete(*(void **)v27);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::enterEmergency()", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  if (*(_BYTE *)(a1 + 133))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 1;
      *(_QWORD *)buf = &v29;
      v7 = sub_10085EDC0(a1 + 160, &v29, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_100F7CA7C((unsigned __int8 *)v7 + 24, buf);
      v8 = v35 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v27 = 136380675;
      *(_QWORD *)&v27[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EmgContext,repeating current settings for sim 2,%{private}s", v27, 0xCu);
      if (SHIBYTE(v35) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v21 = qword_1022A0088;
      HIDWORD(v26) = 1;
      *(_QWORD *)v27 = (char *)&v26 + 4;
      v22 = sub_10085EDC0(a1 + 160, (int *)&v26 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)v27);
      sub_100F7CA7C((unsigned __int8 *)v22 + 24, v27);
      if (v28 >= 0)
        v23 = v27;
      else
        v23 = *(_BYTE **)v27;
      v29 = 136380675;
      v30 = v23;
      LODWORD(v26) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "#EmgContext,repeating current settings for sim 2,%{private}s", &v29, v26);
      v25 = v24;
      if (v28 < 0)
        operator delete(*(void **)v27);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::enterEmergency()", "%s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v32 = 2082;
    v33 = "";
    v34 = 1026;
    v35 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"CleeaAsserted\":%{public}d}", buf, 0x18u);
  }
  sub_100F7B550(a1);
  sub_100F7BE88(a1, 1);
  sub_100F7943C(a1, 1);
  sub_100F7BF14(v11, v12);
  return objc_msgSend(*(id *)(a1 + 40), "setE911Active:", 1);
}

uint64_t sub_100F7CA7C@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  void *v30[2];
  unsigned __int8 v31;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[10];
  char v35;
  uint64_t v36;

  sub_100263E50((uint64_t)v32);
  v4 = sub_100263F7C(&v33, (uint64_t)"ins,", 4);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *(unsigned int *)a1);
  v6 = sub_100263F7C(v5, (uint64_t)",Location", 9);
  v7 = sub_100263F7C(v6, (uint64_t)",enableCpiDuringEmergencyMode,", 30);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[4]);
  v9 = sub_100263F7C(v8, (uint64_t)",enableEarlyReturnDuringEmergencyMode,", 38);
  v10 = (_QWORD *)std::ostream::operator<<(v9, a1[5]);
  v11 = sub_100263F7C(v10, (uint64_t)",allowOTDOADuringEmergencyMode,", 31);
  v12 = (_QWORD *)std::ostream::operator<<(v11, a1[6]);
  v13 = sub_100263F7C(v12, (uint64_t)",EmergencyLocation,", 19);
  sub_100F8D318((uint64_t)(a1 + 16), v30);
  if ((v31 & 0x80u) == 0)
    v14 = v30;
  else
    v14 = (void **)v30[0];
  if ((v31 & 0x80u) == 0)
    v15 = v31;
  else
    v15 = (uint64_t)v30[1];
  v16 = sub_100263F7C(v13, (uint64_t)v14, v15);
  v17 = sub_100263F7C(v16, (uint64_t)",SUPL,", 6);
  sub_100F8D5A4((uint64_t)(a1 + 936), v28);
  if ((v29 & 0x80u) == 0)
    v18 = v28;
  else
    v18 = (void **)v28[0];
  if ((v29 & 0x80u) == 0)
    v19 = v29;
  else
    v19 = (uint64_t)v28[1];
  v20 = sub_100263F7C(v17, (uint64_t)v18, v19);
  v21 = sub_100263F7C(v20, (uint64_t)",BAA,", 5);
  sub_100F84228(a1 + 1000, __p);
  if ((v27 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v23 = v27;
  else
    v23 = (uint64_t)__p[1];
  sub_100263F7C(v21, (uint64_t)v22, v23);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if ((char)v29 < 0)
    operator delete(v28[0]);
  if ((char)v31 < 0)
    operator delete(v30[0]);
  std::stringbuf::str(a2, v34);
  *(_QWORD *)((char *)v32
  v33 = v24;
  if (v35 < 0)
    operator delete((void *)v34[8]);
  std::streambuf::~streambuf(v34);
  return std::ios::~ios(&v36);
}

void sub_100F7CCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  sub_1018B38B4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_100F7CD08(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EmergCon,ExitEmergency", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,ExitEmergency", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::exitEmergency()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  objc_msgSend(*(id *)(a1 + 40), "setE911Active:", 0);
  *(_BYTE *)(a1 + 68) = 0;
  sub_100F7943C(a1, 0);
  if (sub_100195F08())
    objc_msgSend(*(id *)(a1 + 680), "releaseAccuracyEnablementAssertionForClient:", CLISP_ME_TOKEN);
  sub_100F7B834(a1);
}

void sub_100F7CED8(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  char *v3;
  unsigned int v5;
  void *v6;
  id v7;
  double v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  const char *v13;
  _QWORD v14[5];
  uint64_t v15[4];
  char v16;
  _OWORD buf[2];
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (*(_QWORD *)(a1 + 152))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v1 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#EmergCon,createLongEemTimeout,timer already exists", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v20) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,createLongEemTimeout,timer already exists", &v20, 2);
      v3 = (char *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::createLongEemTimeout()", "%s\n", v2);
LABEL_30:
      if (v3 != (char *)buf)
        free(v3);
    }
  }
  else
  {
    if (*(double *)(a1 + 256) == 0.0)
    {
      *(_DWORD *)(a1 + 264) = 0;
    }
    else
    {
      v5 = vcvtpd_u64_f64(sub_1001FCBB4() - *(double *)(a1 + 256));
      *(_DWORD *)(a1 + 264) = v5;
      LODWORD(buf[0]) = 32;
      DWORD2(buf[0]) = v5;
      v18 = 3;
      v21 = 0;
      v20 = 0uLL;
      v15[3] = (uint64_t)&v20;
      v16 = 0;
      *(_QWORD *)&v20 = operator new(0x28uLL);
      *((_QWORD *)&v20 + 1) = v20;
      v21 = v20 + 40;
      *((_QWORD *)&v20 + 1) = sub_1006AB40C((uint64_t)&v21, (uint64_t)buf, (uint64_t)&v19, v20);
      sub_1001F8644((uint64_t)buf + 8);
      v6 = *(void **)(a1 + 712);
      memset(v15, 0, 24);
      sub_1006AB68C(v15, v20, *((uint64_t *)&v20 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v20 + 1) - v20) >> 3));
      objc_msgSend(v6, "setMeasurements:", sub_1006A7590(v15));
      *(_QWORD *)&buf[0] = v15;
      sub_1006AB5A0((void ***)buf);
      *(_QWORD *)&buf[0] = &v20;
      sub_1006AB5A0((void ***)buf);
    }
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
    *(_QWORD *)(a1 + 152) = v7;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100F7EF94;
    v14[3] = &unk_10212ECA0;
    v14[4] = a1;
    objc_msgSend(v7, "setHandler:", v14);
    sub_1001E4804(buf);
    *(_QWORD *)&v20 = 0;
    if (sub_1001FD98C(*(uint64_t *)&buf[0], "EEMTimeout", &v20))
      v8 = *(double *)&v20;
    else
      v8 = 420.0;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (*((_QWORD *)&buf[0] + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", v8);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v8;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EmergCon,createLongEemTimeout,started timer for %{public}f", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LODWORD(v20) = 134349056;
      *(double *)((char *)&v20 + 4) = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,createLongEemTimeout,started timer for %{public}f", &v20, 12);
      v3 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::createLongEemTimeout()", "%s\n", v13);
      goto LABEL_30;
    }
  }
}

void sub_100F7D368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;

  a21 = (void **)(v21 - 96);
  sub_1006AB5A0(&a21);
  _Unwind_Resume(a1);
}

id *sub_100F7D3D4(id *result)
{
  id *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;

  if (!*((_BYTE *)result + 144))
  {
    v1 = result;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v8 = 0x4034000000000000;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EmergCon setting call connect timeout for %{public}f s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v5 = 134349056;
      v6 = 0x4034000000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon setting call connect timeout for %{public}f s", &v5, 12);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::initCallConnectTimeout()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    result = (id *)objc_msgSend(v1[17], "setNextFireDelay:", 20.0);
    *((_BYTE *)v1 + 144) = 1;
  }
  return result;
}

void sub_100F7D5A0(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  std::string *p_p;
  void *v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  uint64_t v10[3];
  uint64_t v11[3];
  uint64_t v12[3];
  std::string __p;
  std::string *v14;
  char v15;
  uint8_t buf[8];
  _BYTE v17[10];
  __int16 v18;
  std::string *v19;
  int v20;
  uint64_t v21;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100CD5278(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_QWORD *)buf = 68289282;
    *(_WORD *)v17 = 2082;
    *(_QWORD *)&v17[2] = "";
    v18 = 2082;
    v19 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon logCommType\", \"Emergency: StringifiedState\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!sub_100CD597C((uint64_t)a2))
  {
    *(_DWORD *)buf = 77;
    *(_DWORD *)v17 = 0;
    v20 = 0;
    memset(&__p, 0, sizeof(__p));
    v14 = &__p;
    v15 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 40;
    __p.__r_.__value_.__l.__size_ = sub_1006AB40C((uint64_t)&__p.__r_.__value_.__r.__words[2], (uint64_t)buf, (uint64_t)&v21, (uint64_t)__p.__r_.__value_.__l.__data_);
    sub_1001F8644((uint64_t)v17);
    v8 = *(void **)(a1 + 712);
    memset(v12, 0, sizeof(v12));
    sub_1006AB68C(v12, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
    objc_msgSend(v8, "setMeasurements:", sub_1006A7590(v12));
    v7 = v12;
    goto LABEL_13;
  }
  if (sub_100CD595C((uint64_t)a2))
  {
    *(_DWORD *)buf = 77;
    *(_DWORD *)v17 = 1;
    v20 = 0;
    memset(&__p, 0, sizeof(__p));
    v14 = &__p;
    v15 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 40;
    __p.__r_.__value_.__l.__size_ = sub_1006AB40C((uint64_t)&__p.__r_.__value_.__r.__words[2], (uint64_t)buf, (uint64_t)&v21, (uint64_t)__p.__r_.__value_.__l.__data_);
    sub_1001F8644((uint64_t)v17);
    v6 = *(void **)(a1 + 712);
    memset(v11, 0, sizeof(v11));
    sub_1006AB68C(v11, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
    objc_msgSend(v6, "setMeasurements:", sub_1006A7590(v11));
    v7 = v11;
LABEL_13:
    *(_QWORD *)buf = v7;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &__p;
    sub_1006AB5A0((void ***)buf);
    return;
  }
  if (sub_100CD596C((uint64_t)a2))
  {
    *(_DWORD *)buf = 77;
    *(_DWORD *)v17 = 2;
    v20 = 0;
    memset(&__p, 0, sizeof(__p));
    v14 = &__p;
    v15 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 40;
    __p.__r_.__value_.__l.__size_ = sub_1006AB40C((uint64_t)&__p.__r_.__value_.__r.__words[2], (uint64_t)buf, (uint64_t)&v21, (uint64_t)__p.__r_.__value_.__l.__data_);
    sub_1001F8644((uint64_t)v17);
    v9 = *(void **)(a1 + 712);
    memset(v10, 0, sizeof(v10));
    sub_1006AB68C(v10, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
    objc_msgSend(v9, "setMeasurements:", sub_1006A7590(v10));
    v7 = v10;
    goto LABEL_13;
  }
}

void sub_100F7D918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 96) = &a18;
  sub_1006AB5A0((void ***)(v18 - 96));
  _Unwind_Resume(a1);
}

void sub_100F7D994(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  unsigned int v13;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EmergCon,updateCleeaEmergencyState,state,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v11[0] = 67109120;
    v11[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,updateCleeaEmergencyState,state,%d", v11);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::updateCleeaEmergencyState(EmergencyState)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = *(_DWORD *)(a1 + 60);
  if (v5 != 5 && v5)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EmergCon,skipping updateEmergencyState, do not clear telephony determined emergency state", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,skipping updateEmergencyState, do not clear telephony determined emergency state", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::updateCleeaEmergencyState(EmergencyState)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    sub_100F7EB58(a1, a2);
  }
}

id sub_100F7DC90(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  double v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSDate *v12;
  NSDate *v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v23;
  id v24;
  id v25;
  const char *v26;
  char *v27;
  _QWORD v28[7];
  _BYTE v29[12];
  __int16 v30;
  id v31;
  _BYTE buf[1628];

  *(CFAbsoluteTime *)(a1 + 560) = CFAbsoluteTimeGetCurrent();
  if (objc_opt_class(SOSUtilities, v2)
    && *(_DWORD *)(*(_QWORD *)(a1 + 528) + 244) == 5
    && *(_QWORD *)(a1 + 688) == 1)
  {
    *(_BYTE *)(a1 + 432) = 1;
    v3 = sub_1001FCBB4();
    v4 = *(double *)(*(_QWORD *)(a1 + 528) + 256);
    v5 = v3 < v4 || v4 == 0.0;
    v6 = vcvtpd_s64_f64(v3 - v4);
    if (v5)
      v6 = -1;
    *(_DWORD *)(a1 + 428) = v6;
  }
  v7 = *(unsigned __int8 *)(a1 + 33);
  if (*(_BYTE *)(a1 + 33))
    v7 = vcvtpd_s64_f64(sub_1001FCBB4() - *(double *)(a1 + 552));
  *(_DWORD *)(a1 + 36) = v7;
  sub_1001E4804(buf);
  *(_QWORD *)v29 = 0;
  if (sub_1001FD98C(*(uint64_t *)buf, "EmergencyPreCallMotionActivityInterval", v29))
    v8 = *(double *)v29;
  else
    v8 = 1800.0;
  v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 544) - v8);
  v13 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 560));
  v14 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v14, "setLocale:", objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX")));
  objc_msgSend(v14, "setTimeZone:", +[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
  objc_msgSend(v14, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss"));
  v15 = objc_msgSend(v14, "stringFromDate:", v12);
  v16 = objc_msgSend(v14, "stringFromDate:", v13);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v17 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v18 = objc_msgSend(v15, "UTF8String");
    v19 = objc_msgSend(v16, "UTF8String");
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#EmergCon,initiateCallTriggerMetric,Request motion activity from,%{public}s,toDate,%{public}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v23 = qword_1022A0088;
    v24 = objc_msgSend(v15, "UTF8String");
    v25 = objc_msgSend(v16, "UTF8String");
    *(_DWORD *)v29 = 136446466;
    *(_QWORD *)&v29[4] = v24;
    v30 = 2082;
    v31 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 0, "#EmergCon,initiateCallTriggerMetric,Request motion activity from,%{public}s,toDate,%{public}s", v29, 22);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::initiateCallTriggerMetric()", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v20 = objc_alloc_init((Class)CMMotionActivityManager);
  *(_QWORD *)(a1 + 536) = v20;
  v21 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 528) + 8), "silo"), "operationQueue");
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100F8A504;
  v28[3] = &unk_102195E78;
  v28[5] = v16;
  v28[6] = a1;
  v28[4] = v15;
  return objc_msgSend(v20, "queryActivityStartingFromDate:toDate:toQueue:withHandler:", v12, v13, v21, v28);
}

void sub_100F7E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F7E0B8(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 584))
  {
    sub_100F7E278((uint64_t *)(a1 + 584), 0);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v1 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#ADR,cleanupEmergencyCallTriggersMetric,fEmergencyCallTriggerMetric is nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ADR,cleanupEmergencyCallTriggersMetric,fEmergencyCallTriggerMetric is nil", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::cleanupEmergencyCallTriggersMetric()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
}

uint64_t sub_100F7E278(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100F8A39C(result);
    operator delete();
  }
  return result;
}

void sub_100F7E2B4(int64x2_t *a1, double a2)
{
  uint64_t i64;
  NSObject *v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  double v25;
  _BYTE v26[12];
  _OWORD buf[102];

  v25 = a2;
  i64 = (uint64_t)a1[37].i64;
  sub_1000D796C((int64x2_t *)a1[37].i64, &v25);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[39].i64[1];
    LODWORD(buf[0]) = 67240192;
    DWORD1(buf[0]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EmergCon,addEmergencyCallToHistory,Q size after addition %{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v18 = a1[39].i64[1];
    *(_DWORD *)v26 = 67240192;
    *(_DWORD *)&v26[4] = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,addEmergencyCallToHistory,Q size after addition %{public}d", v26, 8);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::addEmergencyCallToHistory(CFAbsoluteTime)", "%s\n", v19);
    if (v20 != (char *)buf)
      free(v20);
  }
  sub_1001E4804(buf);
  *(_QWORD *)v26 = 0;
  if (sub_1001FD98C(*(uint64_t *)&buf[0], "EmergencyCallHistoryInterval", v26))
    v6 = *(double *)v26;
  else
    v6 = 86400.0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (a1[39].i64[1])
  {
    v10 = v25 - v6;
    do
    {
      if (*(double *)(*(_QWORD *)(a1[37].i64[1] + (((unint64_t)a1[39].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (a1[39].i64[0] & 0x1FF)) >= v10)
        break;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1[37].i64[1] + (((unint64_t)a1[39].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (a1[39].i64[0] & 0x1FF));
        LODWORD(buf[0]) = 134349056;
        *(_QWORD *)((char *)buf + 4) = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#EmergCon,addEmergencyCallToHistory,element being deleted %{public}f", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v13 = *(_QWORD *)(*(_QWORD *)(a1[37].i64[1] + (((unint64_t)a1[39].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (a1[39].i64[0] & 0x1FF));
        *(_DWORD *)v26 = 134349056;
        *(_QWORD *)&v26[4] = v13;
        LODWORD(v24) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,addEmergencyCallToHistory,element being deleted %{public}f", v26, v24);
        v15 = (char *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::addEmergencyCallToHistory(CFAbsoluteTime)", "%s\n", v14);
        if (v15 != (char *)buf)
          free(v15);
      }
      a1[39] = vaddq_s64(a1[39], (int64x2_t)xmmword_101B9DFC0);
      sub_10047F604(i64, 1);
    }
    while (a1[39].i64[1]);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v16 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v17 = a1[39].i64[1];
    LODWORD(buf[0]) = 67240192;
    DWORD1(buf[0]) = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#EmergCon,addEmergencyCallToHistory,Q size after cleanup %{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v21 = a1[39].i64[1];
    *(_DWORD *)v26 = 67240192;
    *(_DWORD *)&v26[4] = v21;
    LODWORD(v24) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,addEmergencyCallToHistory,Q size after cleanup %{public}d", v26, v24);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::addEmergencyCallToHistory(CFAbsoluteTime)", "%s\n", v22);
    if (v23 != (char *)buf)
      free(v23);
  }
}

void sub_100F7E834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F7E850(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _QWORD block[5];
  _WORD v10[8];
  uint8_t buf[1640];

  if (objc_opt_class(SOSUtilities, a2))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EmergCon,interactiveStateChanged", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,interactiveStateChanged", v10, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::interactiveStateChanged()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100F8C330;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EmergCon,interactiveStateChanged, SOS not supported. Early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,interactiveStateChanged, SOS not supported. Early return", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::interactiveStateChanged()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100F7EB58(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  unsigned int v5;
  void *v6;
  int v7;
  int v8;
  void **v9;
  int v10;
  void **v11;
  void **v12;
  uint64_t v13;
  unsigned int v14;
  void **v15;
  int v16;
  int v17;
  void **v18;
  int v19;
  void **v20;
  void *v21;
  char *v22;
  char *v23;
  const char *v24;
  int v25;
  void *v26;
  int v27;
  const char *v28;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33;
  __int16 v34;
  void **v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void **v39;
  __int16 v40;
  int v41;
  __int16 v42;
  void *v43;
  uint8_t buf[4];
  unsigned int v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  void **v51;
  __int16 v52;
  int v53;
  __int16 v54;
  void **v55;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 48);
    sub_100F7EF6C(v5, &v33);
    if (v37 >= 0)
      v6 = &v33;
    else
      v6 = v33;
    v7 = *(_DWORD *)(a1 + 48);
    sub_100F7EF6C(*(_DWORD *)(a1 + 52), v31);
    v8 = v32;
    v9 = (void **)v31[0];
    v10 = *(unsigned __int8 *)(a1 + 56);
    sub_100F7BE5C(a2, __p);
    v11 = v31;
    if (v8 < 0)
      v11 = v9;
    if (v30 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 67110402;
    v45 = v5;
    v46 = 2080;
    v47 = v6;
    v48 = 1024;
    v49 = v7;
    v50 = 2080;
    v51 = v11;
    v52 = 1024;
    v53 = v10;
    v54 = 2080;
    v55 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EmergCon updateEmergencyState,fS1ModeFromCT,%d,%s,fS2ModeFromCT,%d,%s,fIsCleeaAsserted,%d,state,%s", buf, 0x32u);
    if (v30 < 0)
      operator delete(__p[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v37) < 0)
      operator delete(v33);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v13 = qword_1022A0088;
    v14 = *(_DWORD *)(a1 + 48);
    v15 = v31;
    sub_100F7EF6C(v14, v31);
    if (v32 < 0)
      v15 = (void **)v31[0];
    v16 = *(_DWORD *)(a1 + 48);
    sub_100F7EF6C(*(_DWORD *)(a1 + 52), __p);
    v17 = v30;
    v18 = (void **)__p[0];
    v19 = *(unsigned __int8 *)(a1 + 56);
    sub_100F7BE5C(a2, &v26);
    v20 = __p;
    if (v17 < 0)
      v20 = v18;
    if (SHIBYTE(v28) >= 0)
      v21 = &v26;
    else
      v21 = v26;
    LODWORD(v33) = 67110402;
    HIDWORD(v33) = v14;
    v34 = 2080;
    v35 = v15;
    v36 = 1024;
    v37 = v16;
    v38 = 2080;
    v39 = v20;
    v40 = 1024;
    v41 = v19;
    v42 = 2080;
    v43 = v21;
    LODWORD(v24) = 50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "#EmergCon updateEmergencyState,fS1ModeFromCT,%d,%s,fS2ModeFromCT,%d,%s,fIsCleeaAsserted,%d,state,%s", &v33, v24, v25, (const char *)v26, v27, v28);
    v23 = v22;
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
    if (v30 < 0)
      operator delete(__p[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::updateEmergencyState(EmergencyState)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  if (!a2)
  {
    if (*(_BYTE *)(a1 + 56))
      a2 = 5;
    else
      a2 = 0;
    goto LABEL_27;
  }
  if (a2 != 5)
  {
LABEL_27:
    sub_100F775E0(a1, a2);
    return;
  }
  if (!*(_DWORD *)(a1 + 60) && !*(_DWORD *)(a1 + 64))
  {
    a2 = 5;
    goto LABEL_27;
  }
}

void sub_100F7EF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100F7EF6C@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 5)
    v2 = "UnknownMode";
  else
    v2 = off_1021968A8[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_100F7EF94(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#EmergCon,longEemTimeout,longer than expected EEM detected", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,longEemTimeout,longer than expected EEM detected", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::createLongEemTimeout()_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100F7855C(v1);
  sub_100F7F134(v1);
}

void sub_100F7F134(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  int v5;
  std::string *p_p;
  std::string *v7;
  _QWORD *v8;
  std::string *v9;
  _QWORD *v10;
  std::string *v11;
  _QWORD *v12;
  std::string *v13;
  _QWORD *v14;
  std::string *v15;
  _QWORD *v16;
  std::string *v17;
  std::string __p;
  int v19;
  int *v20;

  v2 = sub_100217A98((unsigned int *)(a1 + 72));
  v19 = v2;
  *(_BYTE *)(a1 + 132) = 1;
  *(_BYTE *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 96) = 0x400000000;
  *(_WORD *)(a1 + 104) = 256;
  *(_BYTE *)(a1 + 106) = 0;
  *(_DWORD *)(a1 + 108) = 255;
  sub_100F7798C(a1);
  v3 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v3, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2), CFSTR("simSlot"));
  objc_msgSend(v3, "setValue:forKey:", CFSTR("Voice"), CFSTR("communicationType"));
  v5 = sub_100F79058(*(unsigned int *)(a1 + 244), v4);
  sub_100F789A8(v5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v3, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), CFSTR("callTriggerType"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  objc_msgSend(v3, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 264)), CFSTR("callDuration"));
  sub_1005A4E30(a1 + 92, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v3, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), CFSTR("emergencyModeRat"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = &v19;
  v8 = sub_10006A62C(a1 + 272, &v19, (uint64_t)&unk_101B9EB60, &v20);
  sub_1001E3CC8(*((_DWORD *)v8 + 5), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v3, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9), CFSTR("ratType"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v20) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  v10 = sub_10006A62C(a1 + 352, (int *)&v20, (uint64_t)&unk_101B9EB60, &__p);
  objc_msgSend(v3, "setValue:forKey:", sub_100F7F650(*((unsigned int *)v10 + 5)), CFSTR("simCountry1"));
  sub_100F7F6C0(a1, 0, 0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &__p;
  else
    v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v3, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11), CFSTR("simBundleId1"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v20) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  v12 = sub_10006A62C(a1 + 432, (int *)&v20, (uint64_t)&unk_101B9EB60, &__p);
  objc_msgSend(v3, "setValue:forKey:", sub_100F7F650(*((unsigned int *)v12 + 5)), CFSTR("operatorCountry1"));
  sub_100F7F6C0(a1, 0, 1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__p;
  else
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v3, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), CFSTR("operatorBundleId1"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 133))
  {
    LODWORD(v20) = 1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    v14 = sub_10006A62C(a1 + 352, (int *)&v20, (uint64_t)&unk_101B9EB60, &__p);
    objc_msgSend(v3, "setValue:forKey:", sub_100F7F650(*((unsigned int *)v14 + 5)), CFSTR("simCountry2"));
    sub_100F7F6C0(a1, 1, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &__p;
    else
      v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(v3, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15), CFSTR("simBundleId2"));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(v20) = 1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    v16 = sub_10006A62C(a1 + 432, (int *)&v20, (uint64_t)&unk_101B9EB60, &__p);
    objc_msgSend(v3, "setValue:forKey:", sub_100F7F650(*((unsigned int *)v16 + 5)), CFSTR("operatorCountry2"));
    sub_100F7F6C0(a1, 1, 1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(v3, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17), CFSTR("operatorBundleId2"));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  AnalyticsSendEvent(CFSTR("com.apple.locationd.emergency.long_eem"), v3);

  if ((sub_1000C4240() & 1) != 0 || sub_100195F08() && sub_10075742C())
    sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue"), (uint64_t)"Emergency", (uint64_t)"long_EEM", 1);
}

void sub_100F7F61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSString *sub_100F7F650(uint64_t a1)
{
  NSString *result;
  const __CFString *v3;

  if ((a1 - 1) > 0x3E6)
  {
    v3 = CFSTR("InvalidMCC:%d");
  }
  else
  {
    result = (NSString *)TUISOCountryCodeForMCC(-[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1), "stringValue"));
    if (result)
      return result;
    v3 = CFSTR("InvalidCountryCodeForMCC:%d");
  }
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", v3, a1);
}

void sub_100F7F6C0(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  const std::string *v5;
  NSObject *v6;
  std::string::size_type size;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  std::string v11;
  int v12;
  uint8_t buf[1640];

  v12 = a2;
  memset(&v11, 0, sizeof(v11));
  if (a3 == 1)
  {
    *(_QWORD *)buf = &v12;
    v5 = (const std::string *)(sub_10085EDC0(a1 + 160, &v12, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 166);
    goto LABEL_5;
  }
  if (!a3)
  {
    *(_QWORD *)buf = &v12;
    v5 = (const std::string *)(sub_10085EDC0(a1 + 160, &v12, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 160);
LABEL_5:
    std::string::operator=(&v11, v5);
    goto LABEL_11;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EmergCon,getBundleId,unexpected bundle type", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,getBundleId,unexpected bundle type", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "std::string CLEmergencyController::getBundleId(SimInstance, BundleType)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
LABEL_11:
  size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v11.__r_.__value_.__l.__size_;
  if (size)
  {
    *a4 = v11;
  }
  else
  {
    sub_1015A2E04(a4, "Unavailable");
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_100F7F914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F7F934(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (*(unsigned __int8 *)(a1 + 1) == a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 1))
        v4 = "locked";
      else
        v4 = "unlocked";
      *(_DWORD *)buf = 136446210;
      v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EmergCon NILR already %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(_BYTE *)(a1 + 1))
        v5 = "locked";
      else
        v5 = "unlocked";
      v17 = 136446210;
      v18 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon NILR already %{public}s", &v17, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::sendObserversNilrLockoutStatus(BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 1) = a2;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 1))
        v9 = "locked";
      else
        v9 = "unlocked";
      *(_DWORD *)buf = 136446210;
      v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EmergCon NILR %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(_BYTE *)(a1 + 1))
        v14 = "locked";
      else
        v14 = "unlocked";
      v17 = 136446210;
      v18 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon NILR %{public}s", &v17, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::sendObserversNilrLockoutStatus(BOOL)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v10 = *(_QWORD **)(a1 + 16);
    if (v10 != (_QWORD *)(a1 + 24))
    {
      do
      {
        objc_msgSend((id)v10[4], "shouldLockoutNilr:", *(unsigned __int8 *)(a1 + 1));
        v11 = (_QWORD *)v10[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v10[2];
            v13 = *v12 == (_QWORD)v10;
            v10 = v12;
          }
          while (!v13);
        }
        v10 = v12;
      }
      while (v12 != (_QWORD *)(a1 + 24));
    }
  }
}

uint64_t sub_100F7FCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  const char *v20;
  uint8_t *v21;
  _WORD v22[8];
  _QWORD v23[2];
  uint8_t buf[8];
  std::__shared_weak_count *v25;

  *(_DWORD *)a4 = 255;
  *(_DWORD *)(a4 + 4) = 257;
  v8 = (_OWORD *)(a4 + 1004);
  *(_BYTE *)(a4 + 8) = 0;
  *(_OWORD *)(a4 + 16) = xmmword_101C31CE0;
  *(_DWORD *)(a4 + 32) = 1;
  *(_QWORD *)(a4 + 44) = 0;
  *(_QWORD *)(a4 + 36) = 0;
  *(_QWORD *)(a4 + 49) = 0;
  *(_OWORD *)(a4 + 60) = xmmword_101C31CF0;
  *(_QWORD *)(a4 + 76) = 0x100000001;
  *(_QWORD *)(a4 + 92) = 0;
  *(_QWORD *)(a4 + 84) = 0;
  *(_QWORD *)(a4 + 112) = 0x401C000000000000;
  *(_QWORD *)(a4 + 97) = 0;
  sub_100857DA8(a4 + 120);
  *(_OWORD *)(a4 + 952) = 0u;
  *(_OWORD *)(a4 + 968) = 0u;
  *(_OWORD *)(a4 + 936) = 0u;
  *(_WORD *)(a4 + 984) = 7275;
  *(_QWORD *)(a4 + 988) = 0;
  *(_WORD *)(a4 + 1000) = 256;
  *v8 = xmmword_101BDBEC0;
  *(_QWORD *)(a4 + 1020) = 0x93A80018B8200;
  *(_WORD *)(a4 + 1028) = 256;
  *(_OWORD *)((char *)v8 + 28) = xmmword_101BDBEC0;
  *(_QWORD *)(a4 + 1048) = 0x93A80018B8200;
  *(_BYTE *)(a4 + 1056) = 0;
  *(_QWORD *)(a4 + 1064) = 0;
  *(_QWORD *)(a4 + 1080) = 0;
  *(_QWORD *)(a4 + 1072) = 0;
  *(_OWORD *)(a4 + 1088) = xmmword_101BDBED0;
  *(_QWORD *)(a4 + 1104) = 0xE1000015180;
  *(_DWORD *)(a4 + 1112) = 5184000;
  *(_QWORD *)(a4 + 1160) = 0;
  *(_QWORD *)(a4 + 1152) = 0;
  *(_QWORD *)(a4 + 1168) = 0;
  *(_QWORD *)(a4 + 1136) = 0;
  *(_QWORD *)(a4 + 1120) = 0;
  *(_QWORD *)(a4 + 1128) = 0;
  *(_BYTE *)(a4 + 1144) = 0;
  *(_OWORD *)((char *)v8 + 172) = xmmword_101BDBED0;
  *(_QWORD *)(a4 + 1192) = 0xE1000015180;
  *(_DWORD *)(a4 + 1200) = 5184000;
  *(_OWORD *)(a4 + 1208) = 0u;
  *(_OWORD *)(a4 + 1224) = 0u;
  *(_OWORD *)(a4 + 1240) = 0u;
  *(_OWORD *)(a4 + 1256) = 0u;
  *(_OWORD *)(a4 + 1272) = 0u;
  *(_OWORD *)(a4 + 1288) = 0u;
  *(_OWORD *)(a4 + 1304) = 0u;
  *(_QWORD *)(a4 + 1320) = 0;
  sub_100119F3C(v23);
  sub_1001E4804(buf);
  v9 = sub_100006BB4(*(uint64_t *)buf, "CarrierBundleLocationSettings", v23);
  v10 = v9;
  v11 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v10)
        goto LABEL_6;
LABEL_13:
      v15 = (_QWORD *)(a2 + 72);
      v16 = (_QWORD *)(a3 + 72);
      v17 = (_QWORD *)(a2 + 120);
      goto LABEL_14;
    }
  }
  if (!v9)
    goto LABEL_13;
LABEL_6:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EmergCon #Warning overriding CB Location key settings", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v22[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon #Warning overriding CB Location key settings", v22, 2);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyController::LocationSettings CLEmergencyController::getLocationSettings(const BundleInfo &, const BundleInfo &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v15 = v23;
  v16 = v23;
  v17 = v23;
LABEL_14:
  v18 = sub_100F80388(a1, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, (_BYTE *)a4);
  *(_BYTE *)(a4 + 7) = sub_100F81BD0(v18, a2 + 96, a3 + 96, a4 + 936);
  std::string::operator=((std::string *)(a4 + 1232), (const std::string *)(a2 + 40));
  std::string::operator=((std::string *)(a4 + 1256), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a4 + 1280), (const std::string *)(a3 + 40));
  std::string::operator=((std::string *)(a4 + 1304), (const std::string *)(a3 + 8));
  return sub_10011A5A8(v23);
}

void sub_100F800C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  sub_100857FD0(v5);
  _Unwind_Resume(a1);
}

void sub_100F800FC(uint64_t a1, uint64_t a2, int *a3)
{
  NSObject *v6;
  int v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16[166];
  _DWORD v17[2];
  __int16 v18;
  int v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a3;
    *(_DWORD *)buf = 67109376;
    v21 = v7;
    v22 = 1024;
    v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "inst,%d,#EmergCon,#EmergSettings,#cb, sendObserversEmergencySettings,reason,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v13 = *a3;
    v17[0] = 67109376;
    v17[1] = v13;
    v18 = 1024;
    v19 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "inst,%d,#EmergCon,#EmergSettings,#cb, sendObserversEmergencySettings,reason,%d", v17, 14);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::sendObserversEmergencySettings(SettingsChangedReason, LocationSettings)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  sub_10139234C(*(_QWORD *)(a1 + 688), a3, a2);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8 != (_QWORD *)(a1 + 24))
  {
    do
    {
      v9 = (void *)v8[4];
      sub_100F8CA40((uint64_t)v16, (uint64_t *)a3);
      objc_msgSend(v9, "emergencySettingsChange:withReason:", sub_100F793A4(v16), a2);
      sub_100857FD0((uint64_t)v16);
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 24));
  }
  sub_100F83B84(a1, a3);
}

void sub_100F8036C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F80388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v7;
  char v9;
  BOOL *v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  int v17;
  BOOL *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  _BYTE *v30;
  NSObject *v31;
  _BYTE *v32;
  const char *v33;
  NSObject *v34;
  uint64_t *v35;
  const char *v36;
  NSObject *v37;
  uint64_t *v38;
  NSObject *v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE *v43;
  NSObject *v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  _BYTE *v48;
  int v50;
  int v51;
  int v52;
  int v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  _BYTE *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  const char *v78;
  char *v79;
  const char *v80;
  char *v81;
  const char *v82;
  char *v83;
  const char *v84;
  char *v85;
  uint64_t *v86;
  const char *v87;
  char *v88;
  uint64_t *v89;
  const char *v90;
  char *v91;
  const char *v92;
  const char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[2];
  _QWORD v99[2];
  _QWORD v100[2];
  _QWORD v101[2];
  int v102;
  uint64_t *v103;
  __int16 v104;
  _BYTE *v105;
  _BYTE v106[14];
  _BYTE *v107;
  int v108;
  _BYTE buf[14];
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;

  v7 = a3;
  v96 = a1;
  v97 = a3;
  if ((sub_100241564() & 1) != 0)
  {
    sub_100197040();
    v9 = sub_1000C4240();
    v10 = a5 + 4;
    if ((v9 & 1) != 0)
    {
      if ((sub_1001E4874(a4, "EnableCPIDuringEmergencyMode", v10) & 1) == 0)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v11 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,No e911 CPI flags found, using default", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          *(_WORD *)v106 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,No e911 CPI flags found, using default", v106, 2, v96);
          v13 = (char *)v12;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v12);
          v7 = v97;
LABEL_218:
          if (v13 != buf)
            free(v13);
        }
      }
    }
    else
    {
      *v10 = 1;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings HELO force enabled because this isn't an iPhone", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_WORD *)v106 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings HELO force enabled because this isn't an iPhone", v106, 2, v96);
        v13 = (char *)v92;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v92);
        goto LABEL_218;
      }
    }
  }
  else
  {
    a5[4] = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings HELO not supported in this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v106 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings HELO not supported in this platform", v106, 2, v96);
      v13 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v15);
      goto LABEL_218;
    }
  }
  sub_100197040();
  v17 = sub_100195F08();
  v18 = a5 + 5;
  if (v17)
  {
    *v18 = 1;
  }
  else if ((sub_1001E4874(a2, "EnableEarlyReturnDuringEmergencyMode", v18) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,No early return flag found, using default", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v106 = 0;
      LODWORD(v95) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,No early return flag found, using default", v106, v95);
      v94 = (char *)v93;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v93);
      if (v94 != buf)
        free(v94);
    }
  }
  if ((sub_1001E4874(a2, "AllowOTDOADuringEmergencyMode", a5 + 6) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v20 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No OTDOA flags found. Assuming default: OTDOA not supported", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v106 = 0;
      LODWORD(v95) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No OTDOA flags found. Assuming default: OTDOA not supported", v106, v95);
      v79 = (char *)v78;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v78);
      if (v79 != buf)
        free(v79);
    }
  }
  if ((sub_1001E4874(v7, "DelayEmergencyUntilCallConnects", a5 + 8) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v21 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No emergency mode delay flag found. Assuming default: not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v106 = 0;
      LODWORD(v95) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No emergency mode delay flag found. Assuming default: not enabled", v106, v95);
      v81 = (char *)v80;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v80);
      if (v81 != buf)
        free(v81);
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v22 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v23 = a5[4];
    v24 = a5[5];
    v25 = a5[6];
    v26 = a5[8];
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v23;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v24;
    v110 = 1024;
    v111 = v25;
    v112 = 1024;
    v113 = v26;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings enableE911CPI,%d,enableEarlyReturn,%d,allowOTDOADuringEmergencyMode,%d,delayEmergencyUntilCallConnect,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v50 = a5[4];
    v51 = a5[5];
    v52 = a5[6];
    v53 = a5[8];
    *(_DWORD *)v106 = 67109888;
    *(_DWORD *)&v106[4] = v50;
    *(_WORD *)&v106[8] = 1024;
    *(_DWORD *)&v106[10] = v51;
    LOWORD(v107) = 1024;
    *(_DWORD *)((char *)&v107 + 2) = v52;
    HIWORD(v107) = 1024;
    v108 = v53;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings enableE911CPI,%d,enableEarlyReturn,%d,allowOTDOADuringEmergencyMode,%d,delayEmergencyUntilCallConnect,%d", v106, 26, v96, v97);
    v55 = (char *)v54;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  sub_100119F3C(v101);
  if (!sub_100006BB4(a2, "BAA", v101))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v27 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No BAA dict found in carrier bundle, using default", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v106 = 0;
      LODWORD(v95) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No BAA dict found in carrier bundle, using default", v106, v95);
      v83 = (char *)v82;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v82);
      if (v83 != buf)
        free(v83);
    }
  }
  sub_100119F3C(v100);
  if (!sub_100006BB4(v7, "BAA", v100))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v28 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No BAA dict found in operator bundle, using default", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v106 = 0;
      LODWORD(v95) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No BAA dict found in operator bundle, using default", v106, v95);
      v85 = (char *)v84;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v84);
      if (v85 != buf)
        free(v85);
    }
  }
  sub_1015A2E04(buf, "carrier");
  sub_100A6957C((uint64_t *)buf, (uint64_t)v101, (uint64_t)(a5 + 1028));
  if (SBYTE1(v113) < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v29 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_100F84228(a5 + 1028, buf);
    v30 = (v113 & 0x8000) == 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v106 = 136380675;
    *(_QWORD *)&v106[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings carrier BAA: %{private}s", v106, 0xCu);
    if (SBYTE1(v113) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v56 = qword_1022A0088;
    sub_100F84228(a5 + 1028, v106);
    if ((v108 & 0x8000) == 0)
      v57 = (uint64_t *)v106;
    else
      v57 = *(uint64_t **)v106;
    v102 = 136380675;
    v103 = v57;
    LODWORD(v95) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 2, "#EmergCon,#EmergSettings carrier BAA: %{private}s", &v102, v95);
    v59 = v58;
    if (SBYTE1(v108) < 0)
      operator delete(*(void **)v106);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v59);
    if (v59 != buf)
      free(v59);
  }
  sub_1015A2E04(buf, "operator");
  sub_100A6957C((uint64_t *)buf, (uint64_t)v100, (uint64_t)(a5 + 1000));
  if (SBYTE1(v113) < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v31 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_100F84228(a5 + 1000, buf);
    v32 = (v113 & 0x8000) == 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v106 = 136380675;
    *(_QWORD *)&v106[4] = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings operator BAA: %{private}s", v106, 0xCu);
    if (SBYTE1(v113) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v60 = qword_1022A0088;
    sub_100F84228(a5 + 1000, v106);
    if ((v108 & 0x8000) == 0)
      v61 = (uint64_t *)v106;
    else
      v61 = *(uint64_t **)v106;
    v102 = 136380675;
    v103 = v61;
    LODWORD(v95) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 2, "#EmergCon,#EmergSettings operator BAA: %{private}s", &v102, v95);
    v63 = v62;
    if (SBYTE1(v108) < 0)
      operator delete(*(void **)v106);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v63);
    if (v63 != buf)
      free(v63);
  }
  sub_100119F3C(v99);
  if (byte_1023126A7 >= 0)
    v33 = (const char *)&qword_102312690;
  else
    v33 = (const char *)qword_102312690;
  if (!sub_100006BB4(a2, v33, v99))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v34 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_1023126A7 >= 0)
        v35 = &qword_102312690;
      else
        v35 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No %{public}s dict found in carrier bundle, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (byte_1023126A7 >= 0)
        v86 = &qword_102312690;
      else
        v86 = (uint64_t *)qword_102312690;
      *(_DWORD *)v106 = 136446210;
      *(_QWORD *)&v106[4] = v86;
      LODWORD(v95) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No %{public}s dict found in carrier bundle, using default", v106, v95);
      v88 = (char *)v87;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v87);
      if (v88 != buf)
        free(v88);
    }
  }
  sub_100119F3C(v98);
  if (byte_1023126A7 >= 0)
    v36 = (const char *)&qword_102312690;
  else
    v36 = (const char *)qword_102312690;
  if (!sub_100006BB4(v7, v36, v98))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v37 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_1023126A7 >= 0)
        v38 = &qword_102312690;
      else
        v38 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No %{public}s dict found in operator bundle, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (byte_1023126A7 >= 0)
        v89 = &qword_102312690;
      else
        v89 = (uint64_t *)qword_102312690;
      *(_DWORD *)v106 = 136446210;
      *(_QWORD *)&v106[4] = v89;
      LODWORD(v95) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No %{public}s dict found in operator bundle, using default", v106, v95);
      v91 = (char *)v90;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v90);
      if (v91 != buf)
        free(v91);
    }
  }
  sub_1015A2E04(buf, "carrier");
  sub_100A6A1D0((uint64_t *)buf, (uint64_t)v99, (uint64_t)(a5 + 1144));
  if (SBYTE1(v113) < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v39 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v40 = byte_1023126A7;
    v41 = qword_102312690;
    sub_100F843AC(a5 + 1144, buf);
    if (v40 >= 0)
      v42 = &qword_102312690;
    else
      v42 = (uint64_t *)v41;
    if ((v113 & 0x8000) == 0)
      v43 = buf;
    else
      v43 = *(_BYTE **)buf;
    *(_DWORD *)v106 = 136446467;
    *(_QWORD *)&v106[4] = v42;
    *(_WORD *)&v106[12] = 2081;
    v107 = v43;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings carrier %{public}s: %{private}s", v106, 0x16u);
    if (SBYTE1(v113) < 0)
      operator delete(*(void **)buf);
    v7 = v97;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v64 = qword_1022A0088;
    v65 = byte_1023126A7;
    v66 = qword_102312690;
    sub_100F843AC(a5 + 1144, v106);
    if (v65 >= 0)
      v67 = &qword_102312690;
    else
      v67 = (uint64_t *)v66;
    if ((v108 & 0x8000) == 0)
      v68 = v106;
    else
      v68 = *(_BYTE **)v106;
    v102 = 136446467;
    v103 = v67;
    v104 = 2081;
    v105 = v68;
    LODWORD(v95) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 2, "#EmergCon,#EmergSettings carrier %{public}s: %{private}s", &v102, v95);
    v70 = v69;
    if (SBYTE1(v108) < 0)
      operator delete(*(void **)v106);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v70);
    v7 = v97;
    if (v70 != buf)
      free(v70);
  }
  sub_1015A2E04(buf, "operator");
  sub_100A6A1D0((uint64_t *)buf, (uint64_t)v98, (uint64_t)(a5 + 1056));
  if (SBYTE1(v113) < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v44 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v45 = byte_1023126A7;
    v46 = qword_102312690;
    sub_100F843AC(a5 + 1056, buf);
    if (v45 >= 0)
      v47 = &qword_102312690;
    else
      v47 = (uint64_t *)v46;
    if ((v113 & 0x8000) == 0)
      v48 = buf;
    else
      v48 = *(_BYTE **)buf;
    *(_DWORD *)v106 = 136446467;
    *(_QWORD *)&v106[4] = v47;
    *(_WORD *)&v106[12] = 2081;
    v107 = v48;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings operator %{public}s: %{private}s", v106, 0x16u);
    if (SBYTE1(v113) < 0)
      operator delete(*(void **)buf);
    v7 = v97;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v71 = qword_1022A0088;
    v72 = byte_1023126A7;
    v73 = qword_102312690;
    sub_100F843AC(a5 + 1056, v106);
    if (v72 >= 0)
      v74 = &qword_102312690;
    else
      v74 = (uint64_t *)v73;
    if ((v108 & 0x8000) == 0)
      v75 = v106;
    else
      v75 = *(_BYTE **)v106;
    v102 = 136446467;
    v103 = v74;
    v104 = 2081;
    v105 = v75;
    LODWORD(v95) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 2, "#EmergCon,#EmergSettings operator %{public}s: %{private}s", &v102, v95);
    v77 = v76;
    if (SBYTE1(v108) < 0)
      operator delete(*(void **)v106);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLocationKeys(const CLNameValuePair &, const CLNameValuePair &, const CLNameValuePair &, LocationSettings &) const", "%s\n", v77);
    v7 = v97;
    if (v77 != buf)
      free(v77);
  }
  sub_100F84714(v96, a2, v7, (uint64_t)(a5 + 16));
  sub_10011A5A8(v98);
  sub_10011A5A8(v99);
  sub_10011A5A8(v100);
  return sub_10011A5A8(v101);
}

void sub_100F81AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_10011A5A8(&a13);
  sub_10011A5A8(&a15);
  sub_10011A5A8(&a17);
  sub_10011A5A8(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100F81BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  NSObject *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  _BYTE *v38;
  _BYTE *v39;
  const char *v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  std::string *p_p;
  _BYTE *v48;
  NSObject *v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  const char *v53;
  NSObject *v54;
  _BYTE *v55;
  std::string::size_type v56;
  unint64_t v57;
  _BYTE *v58;
  const char *v59;
  NSObject *v60;
  NSObject *v61;
  void *v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  NSObject *v68;
  uint64_t v69;
  std::string::size_type v70;
  const char *v71;
  char *v72;
  NSObject *v73;
  void *v74;
  int v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  NSObject *v80;
  uint64_t v81;
  std::string::size_type v82;
  const char *v83;
  NSObject *v84;
  int *v85;
  NSObject *v86;
  NSObject *v87;
  int v88;
  NSObject *v90;
  const char *v91;
  char *v92;
  NSObject *v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  const char *v99;
  char *v100;
  const char *v101;
  char *v102;
  const char *v103;
  char *v104;
  void *v105;
  int v106;
  const char *v107;
  char *v108;
  const char *v109;
  void *v110;
  int v111;
  const char *v112;
  int v113;
  const char *v114;
  char *v115;
  const char *v116;
  char *v117;
  _BYTE *v118;
  const char *v119;
  const char *v120;
  const char *v121;
  char *v122;
  std::string *v123;
  _BYTE *v124;
  const char *v125;
  char *v126;
  const char *v127;
  const char *v128;
  _BYTE __endptr[12];
  __int16 v130;
  _BYTE *v131;
  int v132;
  std::string __p;
  _BYTE __str[26];
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  _BYTE buf[26];
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;

  sub_1001E4804(buf);
  v7 = (unsigned int *)(a4 + 56);
  v8 = sub_100526244(*(uint64_t *)buf, "GpsSuplFlags", (_DWORD *)(a4 + 56));
  v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v8)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *v7;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#supl #Warning SUPL: overriding suplFlags with [0x%X]", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v14 = *v7;
      *(_DWORD *)__str = 67109120;
      *(_DWORD *)&__str[4] = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#supl #Warning SUPL: overriding suplFlags with [0x%X]", __str);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v15);
LABEL_251:
      if (v16 != buf)
        free(v16);
    }
  }
  else if ((sub_100526244(a2, "SuplFlags", (_DWORD *)(a4 + 56)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#supl SUPL: no supl flags found, using default", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)__str = 0;
      LODWORD(v128) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#supl SUPL: no supl flags found, using default", __str, v128);
      v16 = (char *)v109;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v109);
      goto LABEL_251;
    }
  }
  HIBYTE(v128) = *(_BYTE *)v7 & 1;
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "GpsEnableNonEmergencySupl", (BOOL *)&v128 + 7);
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = HIBYTE(v128);
  *(_BYTE *)v7 = *(_BYTE *)v7 & 0xFE | HIBYTE(v128);
  if (v21)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v22 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#supl #Warning SUPL: supl sessions will be allowed in non-emergency requests too", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)__str = 0;
      LODWORD(v128) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#supl #Warning SUPL: supl sessions will be allowed in non-emergency requests too", __str, v128);
      v102 = (char *)v101;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v101);
      if (v102 != buf)
        free(v102);
    }
  }
  HIBYTE(v128) = (*(_BYTE *)v7 & 2) != 0;
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "GpsAllowSuplWithoutEmergencyNotification", (BOOL *)&v128 + 7);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = HIBYTE(v128);
  *(_BYTE *)v7 = *(_BYTE *)v7 & 0xFD | (2 * HIBYTE(v128));
  if (v26)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v27 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#supl #Warning SUPL: non e-slp supl sessions will be allowed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)__str = 0;
      LODWORD(v128) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#supl #Warning SUPL: non e-slp supl sessions will be allowed", __str, v128);
      v104 = (char *)v103;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v103);
      if (v104 != buf)
        free(v104);
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v28 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v29 = *v7;
    v30 = *v7 & 1;
    v31 = (*v7 >> 1) & 1;
    v32 = (*v7 >> 2) & 1;
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v29;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v30;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v31;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v32;
    v140 = 1024;
    v141 = (v29 >> 3) & 1;
    v142 = 1024;
    v143 = (v29 >> 4) & 1;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: suplFlags,0x%X,allowNonEmergencySupl,%d,allowSuplWithoutEmergencyNotification,%d,allowHslpMismatch,%d,allowHslpWildCard,%d,allowNonConformingEslpAddress,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v94 = *v7;
    v95 = *v7 & 1;
    v96 = (*v7 >> 1) & 1;
    v97 = (*v7 >> 2) & 1;
    v98 = (*v7 >> 3) & 1;
    *(_DWORD *)__str = 67110400;
    *(_DWORD *)&__str[4] = v94;
    *(_WORD *)&__str[8] = 1024;
    *(_DWORD *)&__str[10] = v95;
    *(_WORD *)&__str[14] = 1024;
    *(_DWORD *)&__str[16] = v96;
    *(_WORD *)&__str[20] = 1024;
    *(_DWORD *)&__str[22] = v97;
    v135 = 1024;
    v136 = v98;
    v137 = 1024;
    v138 = (v94 >> 4) & 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: suplFlags,0x%X,allowNonEmergencySupl,%d,allowSuplWithoutEmergencyNotification,%d,allowHslpMismatch,%d,allowHslpWildCard,%d,allowNonConformingEslpAddress,%d", __str, 38, *(_DWORD *)__endptr, *(_DWORD *)&__endptr[8], *(_DWORD *)((char *)&v131 + 2), v132);
    v100 = (char *)v99;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v99);
    if (v100 != buf)
      free(v100);
  }
  memset(__str, 0, 24);
  sub_1001E4804(buf);
  if (sub_1000BCB64(*(uint64_t *)buf, "GpsSuplHslpAddress", (std::string *)__str))
  {
    if (__str[23] >= 0)
      v33 = __str[23];
    else
      v33 = *(_QWORD *)&__str[8];
    v34 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_56;
    v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (v33)
      {
LABEL_57:
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v37 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v38 = __str;
          if (__str[23] < 0)
            v38 = *(_BYTE **)__str;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#supl #Warning SUPL: overriding carrier and operator HSLP address with [%s]", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          v39 = __str;
          if (__str[23] < 0)
            v39 = *(_BYTE **)__str;
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#supl #Warning SUPL: overriding carrier and operator HSLP address with [%s]", (const char *)&__p);
          v41 = (char *)v40;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v40);
LABEL_274:
          if (v41 != buf)
            free(v41);
          goto LABEL_116;
        }
        goto LABEL_116;
      }
    }
    else
    {
LABEL_56:
      if (v33)
        goto LABEL_57;
    }
  }
  else
  {
    v42 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  if (!sub_1000BCB64(a2, "SuplHSLPServerAddress", (std::string *)__str))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v49 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: CB does not contain HSLP address. SUPL not supported", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_173;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v128) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: CB does not contain HSLP address. SUPL not supported", &__p, v128);
    v51 = (char *)v50;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v50);
    goto LABEL_259;
  }
  v45 = __str[23];
  if (__str[23] < 0)
    v45 = *(_QWORD *)&__str[8];
  if (!v45)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v52 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: carrier-hslp is empty. SUPL disabled", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_173;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v128) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: carrier-hslp is empty. SUPL disabled", &__p, v128);
    v51 = (char *)v53;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v53);
    goto LABEL_259;
  }
  if ((*(_BYTE *)v7 & 4) == 0)
  {
    memset(&__p, 0, sizeof(__p));
    if (sub_1000BCB64(a3, "SuplHSLPServerAddress", &__p))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v46 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v48 = __str;
        if (__str[23] < 0)
          v48 = *(_BYTE **)__str;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = p_p;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v48;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: operator-hslp,[%s],carrier-hslp,[%s]", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v123 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v124 = __str;
        if (__str[23] < 0)
          v124 = *(_BYTE **)__str;
        *(_DWORD *)__endptr = 136315394;
        *(_QWORD *)&__endptr[4] = v123;
        v130 = 2080;
        v131 = v124;
        LODWORD(v128) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: operator-hslp,[%s],carrier-hslp,[%s]", __endptr, v128);
        v126 = (char *)v125;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v125);
        if (v126 != buf)
          free(v126);
      }
      if ((sub_100F88460(&__p, __str, 0) & 1) != 0)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_116;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v93 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: carrier and operator bundle HSLP address are different. SUPL disabled", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_227:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_173;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)__endptr = 0;
      LODWORD(v128) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: carrier and operator bundle HSLP address are different. SUPL disabled", __endptr, v128);
      v92 = (char *)v127;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v127);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v90 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: OB does not contain HSLP address. SUPL not supported", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_227;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)__endptr = 0;
      LODWORD(v128) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: OB does not contain HSLP address. SUPL not supported", __endptr, v128);
      v92 = (char *)v91;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v91);
    }
    if (v92 != buf)
      free(v92);
    goto LABEL_227;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v54 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v55 = __str;
    if (__str[23] < 0)
      v55 = *(_BYTE **)__str;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v55;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: carrier-hslp,[%s]", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v118 = __str;
    if (__str[23] < 0)
      v118 = *(_BYTE **)__str;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v118;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: carrier-hslp,[%s]", (const char *)&__p);
    v41 = (char *)v119;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v119);
    goto LABEL_274;
  }
LABEL_116:
  v56 = std::string::find((const std::string *)__str, 58, 0);
  std::string::basic_string((std::string *)buf, (const std::string *)__str, 0, v56, (std::allocator<char> *)&__p);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = *(_OWORD *)buf;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)&buf[16];
  if (v56 != -1)
  {
    v57 = v56 + 1;
    if ((__str[23] & 0x80000000) != 0)
    {
      if (v57 >= *(_QWORD *)&__str[8])
        goto LABEL_132;
      *(_QWORD *)__endptr = 0;
      v58 = *(_BYTE **)__str;
    }
    else
    {
      if (v57 >= __str[23])
        goto LABEL_132;
      *(_QWORD *)__endptr = 0;
      v58 = __str;
    }
    v59 = &v58[v56 + 1];
    *(_WORD *)(a4 + 48) = strtol(v59, (char **)__endptr, 10);
    if (*(_QWORD *)__endptr && **(_BYTE **)__endptr)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v60 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v59;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#supl #Warning SUPL: invalid port specification [%s]. reverting to default", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#supl #Warning SUPL: invalid port specification [%s]. reverting to default", (const char *)&__p);
        v122 = (char *)v121;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v121);
        if (v122 != buf)
          free(v122);
      }
      *(_WORD *)(a4 + 48) = 7275;
    }
  }
LABEL_132:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v61 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a4 + 23) >= 0)
      v62 = (void *)a4;
    else
      v62 = *(void **)a4;
    v63 = *(unsigned __int16 *)(a4 + 48);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v62;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v63;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: using hslp,%s,port,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    if (*(char *)(a4 + 23) >= 0)
      v105 = (void *)a4;
    else
      v105 = *(void **)a4;
    v106 = *(unsigned __int16 *)(a4 + 48);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v105;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v106;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: using hslp,%s,port,%d", (const char *)&__p, 18);
    v108 = (char *)v107;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v107);
    if (v108 != buf)
      free(v108);
  }
  if ((sub_100F88B60((uint64_t *)a4, (*(unsigned __int8 *)(a4 + 56) >> 3) & 1, (*(_BYTE *)(a4 + 56) & 0x16) != 0) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v73 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      if (*(char *)(a4 + 23) >= 0)
        v74 = (void *)a4;
      else
        v74 = *(void **)a4;
      v75 = *(unsigned __int16 *)(a4 + 48);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v74;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v75;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_FAULT, "#EmergCon,#EmergSettings,#supl SUPL: invalid HSLP specification [%{public}s], port [%{public}d]. SUPL disabled ", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_173;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    if (*(char *)(a4 + 23) >= 0)
      v110 = (void *)a4;
    else
      v110 = *(void **)a4;
    v111 = *(unsigned __int16 *)(a4 + 48);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v110;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v111;
    LODWORD(v128) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EmergCon,#EmergSettings,#supl SUPL: invalid HSLP specification [%{public}s], port [%{public}d]. SUPL disabled ", &__p, v128);
    v51 = (char *)v112;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v112);
LABEL_259:
    if (v51 != buf)
      free(v51);
LABEL_173:
    v76 = 0;
    goto LABEL_211;
  }
  sub_1001E4804(buf);
  if (!sub_1000BCB64(*(uint64_t *)buf, "GpsSuplHslpCert", (std::string *)(a4 + 24)))
  {
    v77 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v78 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
LABEL_179:
    if (sub_1000BCB64(a2, "SuplCARootCert", (std::string *)(a4 + 24)))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v80 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a4 + 47) >= 0)
          v81 = a4 + 24;
        else
          v81 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v81;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: HSLPCARootCert,%s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_199;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a4 + 47) >= 0)
        v82 = a4 + 24;
      else
        v82 = *(_QWORD *)(a4 + 24);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v82;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: HSLPCARootCert,%s", (const char *)&__p);
      v72 = (char *)v83;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v83);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v84 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: carrier dictionary does not contain HSLP cert", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_199;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v128) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: carrier dictionary does not contain HSLP cert", &__p, v128);
      v72 = (char *)v120;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v120);
    }
    goto LABEL_279;
  }
  if (*(char *)(a4 + 47) >= 0)
    v64 = *(unsigned __int8 *)(a4 + 47);
  else
    v64 = *(_QWORD *)(a4 + 32);
  v65 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v66 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (!v64)
    goto LABEL_179;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v68 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a4 + 47) >= 0)
      v69 = a4 + 24;
    else
      v69 = *(_QWORD *)(a4 + 24);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v69;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#supl #Warning SUPL: overriding carrier hslp cert with [%s]", buf, 0xCu);
  }
  if (!sub_1001BFF7C(115, 2))
    goto LABEL_199;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  if (*(char *)(a4 + 47) >= 0)
    v70 = a4 + 24;
  else
    v70 = *(_QWORD *)(a4 + 24);
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v70;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#supl #Warning SUPL: overriding carrier hslp cert with [%s]", (const char *)&__p);
  v72 = (char *)v71;
  sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v71);
LABEL_279:
  if (v72 != buf)
    free(v72);
LABEL_199:
  v85 = (int *)(a4 + 52);
  if ((sub_100526244(a2, "SuplUdpPortConfig", v85) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v86 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,,#supl,#Warning SUPL: no supl udp port config found, using default", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v128) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,,#supl,#Warning SUPL: no supl udp port config found, using default", &__p, v128);
      v117 = (char *)v116;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v116);
      if (v117 != buf)
        free(v117);
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v87 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v88 = *v85;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v88;
    _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: udpPortConfig,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v113 = *v85;
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v113;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: udpPortConfig,%d", &__p);
    v115 = (char *)v114;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyController::readSuplKeys(const CLNameValuePair &, const CLNameValuePair &, SuplSettings &) const", "%s\n", v114);
    if (v115 != buf)
      free(v115);
  }
  v76 = 1;
LABEL_211:
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  return v76;
}

void sub_100F83AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_100F83B84(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t j;
  void *v13;
  uint64_t *v14;
  uint64_t i;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  const char *v23;
  uint64_t v24[3];
  uint64_t v25[3];
  int v26;
  __int128 __p;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  char *v31;
  void **v32;
  char v33;
  _DWORD v34[2];
  void *v35[3];
  uint8_t buf[8];
  _BYTE v37[24];
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  _BYTE v43[1560];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102195ED8);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v6 = a2 + 314;
    if (*((char *)a2 + 1279) < 0)
      v6 = (int *)*((_QWORD *)a2 + 157);
    v7 = a2 + 326;
    if (*((char *)a2 + 1327) < 0)
      v7 = (int *)*((_QWORD *)a2 + 163);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v5;
    *(_WORD *)v37 = 2080;
    *(_QWORD *)&v37[2] = v6;
    *(_WORD *)&v37[10] = 2080;
    *(_QWORD *)&v37[12] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ca,handleEmergencySettingsChange,simInstance,%d,carrierBundleID,%s,operatorBundleID,%s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102195ED8);
    v17 = *a2;
    v18 = a2 + 314;
    if (*((char *)a2 + 1279) < 0)
      v18 = (void *)*((_QWORD *)a2 + 157);
    v19 = a2 + 326;
    if (*((char *)a2 + 1327) < 0)
      v19 = (void *)*((_QWORD *)a2 + 163);
    v34[0] = 67109634;
    v34[1] = v17;
    LOWORD(v35[0]) = 2080;
    *(void **)((char *)v35 + 2) = v18;
    WORD1(v35[1]) = 2080;
    *(void **)((char *)&v35[1] + 4) = v19;
    LODWORD(v22) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,handleEmergencySettingsChange,simInstance,%d,carrierBundleID,%s,operatorBundleID,%s", v34, v22, v23);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::setSimRelatedMeasurementsInLoggerFramework(const LocationSettings &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (*a2 == 1)
  {
    v34[0] = 17;
    if (*((char *)a2 + 1279) < 0)
    {
      sub_100115CE4(v35, *((void **)a2 + 157), *((_QWORD *)a2 + 158));
      v9 = v34[0];
    }
    else
    {
      *(_OWORD *)v35 = *(_OWORD *)(a2 + 314);
      v35[2] = *((void **)a2 + 159);
      v9 = 17;
    }
    *(_DWORD *)buf = v9;
    *(_OWORD *)v37 = *(_OWORD *)v35;
    *(void **)&v37[16] = v35[2];
    memset(v35, 0, sizeof(v35));
    v38 = 6;
    v26 = 19;
    if (*((char *)a2 + 1327) < 0)
    {
      sub_100115CE4(&__p, *((void **)a2 + 163), *((_QWORD *)a2 + 164));
      v11 = v26;
    }
    else
    {
      __p = *(_OWORD *)(a2 + 326);
      v28 = *((_QWORD *)a2 + 165);
      v11 = 19;
    }
    v39 = v11;
    v40 = __p;
    v41 = v28;
    __p = 0uLL;
    v28 = 0;
    v42 = 6;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    v32 = (void **)&v29;
    v33 = 0;
    v29 = (char *)operator new(0x50uLL);
    v30 = v29;
    v31 = v29 + 80;
    v30 = (_BYTE *)sub_1006AB40C((uint64_t)&v31, (uint64_t)buf, (uint64_t)v43, (uint64_t)v29);
    for (i = 48; i != -32; i -= 40)
      sub_1001F8644((uint64_t)&buf[i]);
    if (SHIBYTE(v28) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v35[2]) < 0)
      operator delete(v35[0]);
    v16 = *(void **)(a1 + 712);
    memset(v24, 0, sizeof(v24));
    sub_1006AB68C(v24, (uint64_t)v29, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - v29) >> 3));
    objc_msgSend(v16, "setMeasurements:", sub_1006A7590(v24));
    v14 = v24;
  }
  else
  {
    if (*a2)
      return;
    v34[0] = 7;
    if (*((char *)a2 + 1279) < 0)
    {
      sub_100115CE4(v35, *((void **)a2 + 157), *((_QWORD *)a2 + 158));
      v8 = v34[0];
    }
    else
    {
      *(_OWORD *)v35 = *(_OWORD *)(a2 + 314);
      v35[2] = *((void **)a2 + 159);
      v8 = 7;
    }
    *(_DWORD *)buf = v8;
    *(_OWORD *)v37 = *(_OWORD *)v35;
    *(void **)&v37[16] = v35[2];
    memset(v35, 0, sizeof(v35));
    v38 = 6;
    v26 = 11;
    if (*((char *)a2 + 1327) < 0)
    {
      sub_100115CE4(&__p, *((void **)a2 + 163), *((_QWORD *)a2 + 164));
      v10 = v26;
    }
    else
    {
      __p = *(_OWORD *)(a2 + 326);
      v28 = *((_QWORD *)a2 + 165);
      v10 = 11;
    }
    v39 = v10;
    v40 = __p;
    v41 = v28;
    __p = 0uLL;
    v28 = 0;
    v42 = 6;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    v32 = (void **)&v29;
    v33 = 0;
    v29 = (char *)operator new(0x50uLL);
    v30 = v29;
    v31 = v29 + 80;
    v30 = (_BYTE *)sub_1006AB40C((uint64_t)&v31, (uint64_t)buf, (uint64_t)v43, (uint64_t)v29);
    for (j = 48; j != -32; j -= 40)
      sub_1001F8644((uint64_t)&buf[j]);
    if (SHIBYTE(v28) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v35[2]) < 0)
      operator delete(v35[0]);
    v13 = *(void **)(a1 + 712);
    memset(v25, 0, sizeof(v25));
    sub_1006AB68C(v25, (uint64_t)v29, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - v29) >> 3));
    objc_msgSend(v13, "setMeasurements:", sub_1006A7590(v25));
    v14 = v25;
  }
  *(_QWORD *)buf = v14;
  sub_1006AB5A0((void ***)buf);
  *(_QWORD *)buf = &v29;
  sub_1006AB5A0((void ***)buf);
}

void sub_100F8412C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38)
{
  if (a36 < 0)
    operator delete(__p);
  sub_1001F8644((uint64_t)&a38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F84228@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;

  sub_100263E50((uint64_t)v21);
  v4 = sub_100263F7C(&v22, (uint64_t)"#EED2,#BAA,Disabled,", 20);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",EEDEnabledOnly,", 16);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)",CertValidityPeriod,", 20);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned int *)a1 + 1));
  v10 = sub_100263F7C(v9, (uint64_t)",NoCertRequestWindow,", 21);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *((unsigned int *)a1 + 2));
  v12 = sub_100263F7C(v11, (uint64_t)",NoCertRetryWindow,", 19);
  v13 = (_QWORD *)std::ostream::operator<<(v12, *((unsigned int *)a1 + 3));
  v14 = sub_100263F7C(v13, (uint64_t)",CertAvailableRequestWindowMin,", 31);
  v15 = (_QWORD *)std::ostream::operator<<(v14, *((unsigned int *)a1 + 4));
  v16 = sub_100263F7C(v15, (uint64_t)",CertAvailableRequestWindowMax,", 31);
  v17 = (_QWORD *)std::ostream::operator<<(v16, *((unsigned int *)a1 + 5));
  v18 = sub_100263F7C(v17, (uint64_t)",CertAvailableRetryWindow,", 26);
  std::ostream::operator<<(v18, *((unsigned int *)a1 + 6));
  std::stringbuf::str(a2, v23);
  *(_QWORD *)((char *)v21
  v22 = v19;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf(v23);
  return std::ios::~ios(&v25);
}

void sub_100F84398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F843AC@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;
  _BYTE v39[16];
  void *v40[2];
  unsigned __int8 v41;
  uint64_t v42;

  sub_100263E50((uint64_t)v34);
  v4 = sub_100263F7C(&v35, (uint64_t)"enabled,", 8);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",url,", 5);
  v7 = (char)a1[31];
  if (v7 >= 0)
    v8 = (uint64_t)(a1 + 8);
  else
    v8 = *((_QWORD *)a1 + 1);
  if (v7 >= 0)
    v9 = a1[31];
  else
    v9 = *((_QWORD *)a1 + 2);
  v10 = sub_100263F7C(v6, v8, v9);
  v11 = sub_100263F7C(v10, (uint64_t)",debounceDelay,", 15);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *((unsigned int *)a1 + 8));
  v13 = sub_100263F7C(v12, (uint64_t)",debounceGracePeriod,", 21);
  v14 = (_QWORD *)std::ostream::operator<<(v13, *((unsigned int *)a1 + 9));
  v15 = sub_100263F7C(v14, (uint64_t)",periodicDelay,", 15);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *((unsigned int *)a1 + 10));
  v17 = sub_100263F7C(v16, (uint64_t)",periodicGracePeriod,", 21);
  v18 = (_QWORD *)std::ostream::operator<<(v17, *((unsigned int *)a1 + 11));
  v19 = sub_100263F7C(v18, (uint64_t)",backoffDelay,", 14);
  v20 = (_QWORD *)std::ostream::operator<<(v19, *((unsigned int *)a1 + 12));
  v21 = sub_100263F7C(v20, (uint64_t)",backoffGracePeriod,", 20);
  v22 = (_QWORD *)std::ostream::operator<<(v21, *((unsigned int *)a1 + 13));
  v23 = sub_100263F7C(v22, (uint64_t)",validityInterval,", 18);
  v24 = (_QWORD *)std::ostream::operator<<(v23, *((unsigned int *)a1 + 14));
  sub_100263F7C(v24, (uint64_t)",partnerInfoVec,[", 17);
  v25 = *((_QWORD *)a1 + 8);
  v26 = *((_QWORD *)a1 + 9);
  if (v25 != v26)
  {
    do
    {
      v27 = sub_100263F7C(&v35, (uint64_t)"{", 1);
      sub_100F8D7C8(v25, v40);
      if ((v41 & 0x80u) == 0)
        v28 = v40;
      else
        v28 = (void **)v40[0];
      if ((v41 & 0x80u) == 0)
        v29 = v41;
      else
        v29 = (uint64_t)v40[1];
      v30 = sub_100263F7C(v27, (uint64_t)v28, v29);
      sub_100263F7C(v30, (uint64_t)"},", 2);
      if ((char)v41 < 0)
        operator delete(v40[0]);
      v25 += 48;
    }
    while (v25 != v26);
    if (*((_QWORD *)a1 + 9) != *((_QWORD *)a1 + 8))
    {
      std::ostream::sentry::sentry(v39, &v35);
      v31 = (char *)&v36[-1] + *(_QWORD *)(v35 - 24);
      if ((v31[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v31 + 5) + 32))(v40, *((_QWORD *)v31 + 5), -1, 1, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24)), *(_DWORD *)((char *)&v36[3] + *(_QWORD *)(v35 - 24)) | 4);
      }
      std::ostream::sentry::~sentry(v39);
    }
  }
  sub_100263F7C(&v35, (uint64_t)"]", 1);
  std::stringbuf::str(a2, v36);
  *(_QWORD *)((char *)v34
  v35 = v32;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf(v36);
  return std::ios::~ios(&v38);
}

void sub_100F846C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::ostream::sentry::~sentry(v2 - 240);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F84714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  NSObject *v18;
  uint8_t *v19;
  _QWORD *v20;
  NSObject *v21;
  uint8_t *v22;
  NSObject *v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  uint8_t *v27;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _BYTE v58[12];
  char v59;
  int v60;
  _BYTE *v61;
  uint8_t buf[8];
  char v63;

  sub_100119F3C(v57);
  sub_100119F3C(v56);
  sub_100119F3C(v55);
  sub_100119F3C(v54);
  if (sub_100006BB4(a2, "EmergencyLocation", v57))
  {
    if (!sub_100006BB4((uint64_t)v57, "ControlPlane", v56))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No ControlPlane dict found, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_WORD *)v58 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No ControlPlane dict found, using default", v58, 2);
        v48 = (uint8_t *)v47;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v47);
        if (v48 != buf)
          free(v48);
      }
    }
    if (!sub_100006BB4((uint64_t)v57, "UserPlane", v55))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No UserPlane dict found, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_WORD *)v58 = 0;
        LODWORD(v51) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No UserPlane dict found, using default", v58, v51);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
    }
    if (!sub_100006BB4((uint64_t)v57, "AugmentedEmergencyAction", v54))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No AugmentedEmergencyAction dict found in carrier bundle, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_WORD *)v58 = 0;
        LODWORD(v51) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No AugmentedEmergencyAction dict found in carrier bundle, using default", v58, v51);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v11);
LABEL_125:
        if (v12 != buf)
          free(v12);
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No EmergencyLocation dict found in carrier bundle, using default", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v58 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No EmergencyLocation dict found in carrier bundle, using default", v58, 2);
      v12 = (uint8_t *)v45;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v45);
      goto LABEL_125;
    }
  }
  sub_100119F3C(v53);
  sub_100119F3C(v52);
  if (sub_100006BB4(a3, "EmergencyLocation", v53))
  {
    if (!sub_100006BB4((uint64_t)v53, "AugmentedEmergencyAction", v52))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No AugmentedEmergencyAction dict found in operator bundle, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_WORD *)v58 = 0;
        LODWORD(v51) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No AugmentedEmergencyAction dict found in operator bundle, using default", v58, v51);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v15);
LABEL_130:
        if (v16 != buf)
          free(v16);
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings No EmergencyLocation dict found in operator bundle, using default", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)v58 = 0;
      LODWORD(v51) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings No EmergencyLocation dict found in operator bundle, using default", v58, v51);
      v16 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v46);
      goto LABEL_130;
    }
  }
  sub_1015A2E04(buf, "Control Plane");
  sub_100F8579C(a1, (std::string::size_type)buf, (uint64_t)v56, (_DWORD *)a4);
  if (v63 < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v18 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100F86440((unsigned int *)a4, buf);
    v19 = v63 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v58 = 136315138;
    *(_QWORD *)&v58[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings ControlPlane: %s", v58, 0xCu);
    if (v63 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v29 = qword_1022A0088;
    sub_100F86440((unsigned int *)a4, v58);
    if (v59 >= 0)
      v30 = v58;
    else
      v30 = *(_BYTE **)v58;
    v60 = 136315138;
    v61 = v30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 0, "#EmergCon,#EmergSettings ControlPlane: %s", (const char *)&v60);
    v32 = v31;
    if (v59 < 0)
      operator delete(*(void **)v58);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v32);
    if (v32 != (char *)buf)
      free(v32);
  }
  v20 = sub_1015A2E04(buf, "Control Plane Cdma");
  sub_100F8676C((uint64_t)v20, (std::string::size_type)buf, (uint64_t)v56, a4 + 40);
  if (v63 < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v21 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100F8704C((unsigned __int8 *)(a4 + 40), buf);
    v22 = v63 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v58 = 136315138;
    *(_QWORD *)&v58[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings ControlPlaneCdma: %s", v58, 0xCu);
    if (v63 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v33 = qword_1022A0088;
    sub_100F8704C((unsigned __int8 *)(a4 + 40), v58);
    if (v59 >= 0)
      v34 = v58;
    else
      v34 = *(_BYTE **)v58;
    v60 = 136315138;
    v61 = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "#EmergCon,#EmergSettings ControlPlaneCdma: %s", (const char *)&v60);
    v36 = v35;
    if (v59 < 0)
      operator delete(*(void **)v58);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  sub_1015A2E04(buf, "User Plane");
  sub_100F8579C(a1, (std::string::size_type)buf, (uint64_t)v55, (_DWORD *)(a4 + 48));
  if (v63 < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v23 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100F86440((unsigned int *)(a4 + 48), buf);
    v24 = v63 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v58 = 136315138;
    *(_QWORD *)&v58[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings UserPlane: %s", v58, 0xCu);
    if (v63 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v37 = qword_1022A0088;
    sub_100F86440((unsigned int *)(a4 + 48), v58);
    if (v59 >= 0)
      v38 = v58;
    else
      v38 = *(_BYTE **)v58;
    v60 = 136315138;
    v61 = v38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "#EmergCon,#EmergSettings UserPlane: %s", (const char *)&v60);
    v40 = v39;
    if (v59 < 0)
      operator delete(*(void **)v58);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v40);
    if (v40 != (char *)buf)
      free(v40);
  }
  v25 = a4 + 104;
  sub_101390D9C((uint64_t)v54, (uint64_t)v52, v25);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v26 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100F87198(v25, buf);
    v27 = v63 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v58 = 136380675;
    *(_QWORD *)&v58[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings AugmentedEmergencyAction: %{private}s", v58, 0xCu);
    if (v63 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v41 = qword_1022A0088;
    sub_100F87198(v25, v58);
    if (v59 >= 0)
      v42 = v58;
    else
      v42 = *(_BYTE **)v58;
    v60 = 136380675;
    v61 = v42;
    LODWORD(v51) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 0, "#EmergCon,#EmergSettings AugmentedEmergencyAction: %{private}s", &v60, v51);
    v44 = v43;
    if (v59 < 0)
      operator delete(*(void **)v58);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readEmergencyLocationKeys(const CLNameValuePair &, const CLNameValuePair &, LocationSettings::Emergency &) const", "%s\n", v44);
    if (v44 != (char *)buf)
      free(v44);
  }
  sub_10011A5A8(v52);
  sub_10011A5A8(v53);
  sub_10011A5A8(v54);
  sub_10011A5A8(v55);
  sub_10011A5A8(v56);
  return sub_10011A5A8(v57);
}

void sub_100F856B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_10011A5A8(&a15);
  sub_10011A5A8(&a17);
  sub_10011A5A8(&a19);
  sub_10011A5A8(&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8579C(uint64_t a1, std::string::size_type a2, uint64_t a3, _DWORD *a4)
{
  NSObject *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  const char *v10;
  std::string *v11;
  NSObject *v12;
  std::string::size_type v13;
  NSObject *v14;
  std::string::size_type v15;
  NSObject *v16;
  _BOOL8 v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  std::string *v21;
  NSObject *v22;
  std::string::size_type v23;
  int *v24;
  NSObject *v25;
  std::string::size_type v26;
  int v27;
  std::string::size_type v28;
  int v29;
  const char *v30;
  std::string *v31;
  NSObject *v32;
  std::string::size_type v33;
  std::string::size_type v35;
  const char *v36;
  std::string::size_type v37;
  const char *v38;
  std::string *v39;
  std::string::size_type v40;
  const char *v41;
  std::string *v42;
  std::string::size_type v43;
  const char *v44;
  _QWORD v45[2];
  _QWORD v46[2];
  int v47;
  std::string::size_type v48;
  __int16 v49;
  int v50;
  std::string buf[68];

  sub_100197040();
  if ((sub_100195F08() & 1) != 0 || (sub_100197040(), (sub_1002416C0() & 1) == 0))
  {
    *a4 = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = *(_QWORD *)a2;
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings %s: MSA not supported on platform", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v35 = a2;
      else
        v35 = *(_QWORD *)a2;
      v47 = 136315138;
      v48 = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings %s: MSA not supported on platform", (const char *)&v47);
      v11 = (std::string *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readPlaneKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v36);
      goto LABEL_102;
    }
  }
  else if ((sub_100526244(a3, "EnableMSAssisted", a4) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0)
        v8 = a2;
      else
        v8 = *(_QWORD *)a2;
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings %s: No EnableMSAssisted flag found, using default", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      v47 = 136315138;
      v48 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings %s: No EnableMSAssisted flag found, using default", (const char *)&v47);
      v11 = (std::string *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readPlaneKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v10);
LABEL_102:
      if (v11 != buf)
        free(v11);
    }
  }
  sub_100119F3C(v46);
  if (sub_100006BB4(a3, "EnableAdditionalAssistedConstellations", v46))
  {
    memset(buf, 0, 24);
    if (sub_1000BCB64((uint64_t)v46, "Glonass", buf))
      a4[1] = sub_100F873B4((const void **)&buf[0].__r_.__value_.__l.__data_);
    if (sub_1000BCB64((uint64_t)v46, "Beidou", buf))
      a4[5] = sub_100F873B4((const void **)&buf[0].__r_.__value_.__l.__data_);
    if (sub_1000BCB64((uint64_t)v46, "Galileo", buf))
      a4[2] = sub_100F873B4((const void **)&buf[0].__r_.__value_.__l.__data_);
    if (sub_1000BCB64((uint64_t)v46, "Qzss", buf))
      a4[3] = sub_100F873B4((const void **)&buf[0].__r_.__value_.__l.__data_);
    if (sub_1000BCB64((uint64_t)v46, "Sbas", buf))
      a4[4] = sub_100F873B4((const void **)&buf[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings %s: No EnableAdditionalAssistedConstellations dict found, using default", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v37 = a2;
      else
        v37 = *(_QWORD *)a2;
      v47 = 136315138;
      v48 = v37;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings %s: No EnableAdditionalAssistedConstellations dict found, using default", (const char *)&v47);
      v39 = (std::string *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readPlaneKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
  }
  sub_100197040();
  if ((sub_10075BD18() & 1) != 0)
  {
    sub_100119F3C(v45);
    if (sub_100006BB4(a3, "LPPRel13WlanMeas", v45))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v16 = qword_1022A0088;
      v17 = os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT);
      if (v17)
      {
        v18 = sub_10011A5AC((uint64_t)v45);
        buf[0].__r_.__value_.__r.__words[0] = 68289282;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2114;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,#EmergSettings,#wlan,LPPRel13WlanMeas configured using CB\", \"LPPRel13WlanMeas:\":%{public, location:escape_only}@}", (uint8_t *)buf, 0x1Cu);
      }
      sub_100F87630(v17, a2, (uint64_t)v45, a4);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a2 + 23) >= 0)
          v23 = a2;
        else
          v23 = *(_QWORD *)a2;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13WlanMeas dict found, using default", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        if (*(char *)(a2 + 23) >= 0)
          v40 = a2;
        else
          v40 = *(_QWORD *)a2;
        v47 = 136315138;
        v48 = v40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13WlanMeas dict found, using default", (const char *)&v47);
        v42 = (std::string *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readPlaneKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
    }
    v24 = a4 + 9;
    if ((sub_100526244(a3, "LPPRel13LocationSource", v24) & 1) != 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v25 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v26 = a2;
        else
          v26 = *(_QWORD *)a2;
        v27 = *v24;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v26;
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#wlan,%s,LPPRel13LocationSource configured using CB:,%d", (uint8_t *)buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_94;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v28 = a2;
      else
        v28 = *(_QWORD *)a2;
      v29 = *v24;
      v47 = 136315394;
      v48 = v28;
      v49 = 1024;
      v50 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#wlan,%s,LPPRel13LocationSource configured using CB:,%d", (const char *)&v47, 18);
      v31 = (std::string *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readPlaneKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v30);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v32 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v33 = a2;
        else
          v33 = *(_QWORD *)a2;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13LocationSource flag found, using default", (uint8_t *)buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_94;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v43 = a2;
      else
        v43 = *(_QWORD *)a2;
      v47 = 136315138;
      v48 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13LocationSource flag found, using default", (const char *)&v47);
      v31 = (std::string *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readPlaneKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v44);
    }
    if (v31 != buf)
      free(v31);
LABEL_94:
    sub_10011A5A8(v45);
    return sub_10011A5A8(v46);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v19 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,LPPRel13,unsupported", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    LOWORD(v47) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,LPPRel13,unsupported", &v47, 2);
    v21 = (std::string *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readPlaneKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  return sub_10011A5A8(v46);
}

void sub_100F863E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_10011A5A8(&a11);
  sub_10011A5A8(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100F86440@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void *__p[2];
  unsigned __int8 v30;
  void *v31[2];
  unsigned __int8 v32;
  void *v33[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  _QWORD v39[2];
  uint64_t v40;
  _QWORD v41[10];
  char v42;
  uint64_t v43;

  sub_100263E50((uint64_t)v39);
  v4 = sub_100263F7C(&v40, (uint64_t)"enableMSAssisted,", 17);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",glonass,", 9);
  sub_100F8D8E8(a1[1], v37);
  if ((v38 & 0x80u) == 0)
    v7 = v37;
  else
    v7 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v8 = v38;
  else
    v8 = (uint64_t)v37[1];
  v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
  v10 = sub_100263F7C(v9, (uint64_t)",beidou,", 8);
  sub_100F8D8E8(a1[5], v35);
  if ((v36 & 0x80u) == 0)
    v11 = v35;
  else
    v11 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v12 = v36;
  else
    v12 = (uint64_t)v35[1];
  v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)",galileo,", 9);
  sub_100F8D8E8(a1[2], v33);
  if ((v34 & 0x80u) == 0)
    v15 = v33;
  else
    v15 = (void **)v33[0];
  if ((v34 & 0x80u) == 0)
    v16 = v34;
  else
    v16 = (uint64_t)v33[1];
  v17 = sub_100263F7C(v14, (uint64_t)v15, v16);
  v18 = sub_100263F7C(v17, (uint64_t)",qzss,", 6);
  sub_100F8D8E8(a1[3], v31);
  if ((v32 & 0x80u) == 0)
    v19 = v31;
  else
    v19 = (void **)v31[0];
  if ((v32 & 0x80u) == 0)
    v20 = v32;
  else
    v20 = (uint64_t)v31[1];
  v21 = sub_100263F7C(v18, (uint64_t)v19, v20);
  v22 = sub_100263F7C(v21, (uint64_t)",lppRel13MeasSettings,", 22);
  sub_100F8DB3C(a1 + 6, __p);
  if ((v30 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v24 = v30;
  else
    v24 = (uint64_t)__p[1];
  v25 = sub_100263F7C(v22, (uint64_t)v23, v24);
  v26 = sub_100263F7C(v25, (uint64_t)",enableLocationSource,", 22);
  std::ostream::operator<<(v26, a1[9]);
  if ((char)v30 < 0)
    operator delete(__p[0]);
  if ((char)v32 < 0)
    operator delete(v31[0]);
  if ((char)v34 < 0)
    operator delete(v33[0]);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  std::stringbuf::str(a2, v41);
  *(_QWORD *)((char *)v39
  v40 = v27;
  if (v42 < 0)
    operator delete((void *)v41[8]);
  std::streambuf::~streambuf(v41);
  return std::ios::~ios(&v43);
}

void sub_100F866CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  sub_1018B38B4((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8676C(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  std::string::size_type v10;
  NSObject *v11;
  std::string::size_type v12;
  std::string *p_p;
  std::string::size_type v14;
  std::string *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  const char *v26;
  NSObject *v27;
  std::string::size_type v28;
  std::string::size_type v30;
  const char *v31;
  uint8_t *v32;
  std::string::size_type v33;
  const char *v34;
  _QWORD v35[2];
  int v36;
  std::string::size_type v37;
  __int16 v38;
  std::string *v39;
  std::string __p;
  uint8_t buf[4];
  _BYTE v42[24];

  sub_100119F3C(v35);
  if (sub_100006BB4(a3, "CDMA", v35))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_10011A5AC((uint64_t)v35);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(_QWORD *)&v42[6] = "";
      *(_WORD *)&v42[14] = 2114;
      *(_QWORD *)&v42[16] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,#EmergSettings,CDMA settings configured configured using CB\", \"CDMA:\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if ((sub_1001E4874((uint64_t)v35, "ProvideHELOUnsolicited", (BOOL *)a4) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v10 = a2;
        else
          v10 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v42 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,%s,No CDMA.ProvideHELOUnsolicited field in CB, using default", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        if (*(char *)(a2 + 23) >= 0)
          v30 = a2;
        else
          v30 = *(_QWORD *)a2;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,%s,No CDMA.ProvideHELOUnsolicited field in CB, using default", (const char *)&__p);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readCDMAKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::CDMASettings &) const", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
    }
    if (sub_10075BD84())
    {
      memset(&__p, 0, sizeof(__p));
      if (sub_1000BCB64((uint64_t)v35, "MeasurementTimeStampSource", &__p))
      {
        *(_DWORD *)(a4 + 4) = sub_100F88224((const void **)&__p.__r_.__value_.__l.__data_);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v11 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0)
            v12 = a2;
          else
            v12 = *(_QWORD *)a2;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)v42 = v12;
          *(_WORD *)&v42[8] = 2080;
          *(_QWORD *)&v42[10] = p_p;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,%s,CDMA.MeasurementTimeStampSource,%s", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_73;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        if (*(char *)(a2 + 23) >= 0)
          v14 = a2;
        else
          v14 = *(_QWORD *)a2;
        v15 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v36 = 136315394;
        v37 = v14;
        v38 = 2080;
        v39 = v15;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,%s,CDMA.MeasurementTimeStampSource,%s", (const char *)&v36, 22);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readCDMAKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::CDMASettings &) const", "%s\n", v16);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v27 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0)
            v28 = a2;
          else
            v28 = *(_QWORD *)a2;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v42 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,%s,No CDMA.MeasurementTimeStampSource field found, using default", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_73;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        if (*(char *)(a2 + 23) >= 0)
          v33 = a2;
        else
          v33 = *(_QWORD *)a2;
        v36 = 136315138;
        v37 = v33;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,%s,No CDMA.MeasurementTimeStampSource field found, using default", (const char *)&v36);
        v17 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readCDMAKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::CDMASettings &) const", "%s\n", v34);
      }
      if (v17 != buf)
        free(v17);
LABEL_73:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return sub_10011A5A8(v35);
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v23 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v24 = a2;
      else
        v24 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v42 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,%s,TimestampSourceConfig not supported on this platform", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v25 = a2;
      else
        v25 = *(_QWORD *)a2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,%s,TimestampSourceConfig not supported on this platform", (const char *)&__p);
      v22 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readCDMAKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::CDMASettings &) const", "%s\n", v26);
LABEL_63:
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v19 = a2;
      else
        v19 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v42 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettingss,%s,No CDMA dict found, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v20 = a2;
      else
        v20 = *(_QWORD *)a2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettingss,%s,No CDMA dict found, using default", (const char *)&__p);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readCDMAKeys(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::CDMASettings &) const", "%s\n", v21);
      goto LABEL_63;
    }
  }
  return sub_10011A5A8(v35);
}

void sub_100F87000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  sub_10011A5A8(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8704C@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  unsigned __int8 v12;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  sub_100263E50((uint64_t)v13);
  v4 = sub_100263F7C(&v14, (uint64_t)"provideHELOUnsolicited,", 23);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",timeStampSource,", 17);
  sub_100F8DED0(*((_DWORD *)a1 + 1), __p);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (uint64_t)__p[1];
  sub_100263F7C(v6, (uint64_t)v7, v8);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  std::stringbuf::str(a2, v15);
  *(_QWORD *)((char *)v13
  v14 = v9;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  return std::ios::~ios(&v17);
}

void sub_100F87168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100F87198@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;

  sub_100263E50((uint64_t)v23);
  v4 = sub_100263F7C(&v24, (uint64_t)"#AML,", 5);
  sub_100F8E0F8(a1, v21);
  if ((v22 & 0x80u) == 0)
    v5 = v21;
  else
    v5 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v6 = v22;
  else
    v6 = (uint64_t)v21[1];
  v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
  v8 = sub_100263F7C(v7, (uint64_t)",#EED2,", 7);
  sub_100F8E45C((unsigned __int8 *)(a1 + 144), v19);
  if ((v20 & 0x80u) == 0)
    v9 = v19;
  else
    v9 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v10 = v20;
  else
    v10 = (uint64_t)v19[1];
  v11 = sub_100263F7C(v8, (uint64_t)v9, v10);
  v12 = sub_100263F7C(v11, (uint64_t)",#EED2-sim,", 11);
  sub_100F8E45C((unsigned __int8 *)(a1 + 480), __p);
  if ((v18 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v14 = v18;
  else
    v14 = (uint64_t)__p[1];
  sub_100263F7C(v12, (uint64_t)v13, v14);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  std::stringbuf::str(a2, v25);
  *(_QWORD *)((char *)v23
  v24 = v15;
  if (v26 < 0)
    operator delete((void *)v25[8]);
  std::streambuf::~streambuf(v25);
  return std::ios::~ios(&v27);
}

void sub_100F8734C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  sub_1018B38B4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_100F873B4(const void **a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  void *v6;
  size_t v7;
  __int128 *p_buf;
  size_t v9;
  const void *v10;
  size_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  NSObject *v14;
  void *v15;
  void *v17;
  const char *v18;
  char *v19;
  __int128 buf;
  unsigned __int8 v21;
  _BYTE v22[24];

  v2 = 0;
  *(_QWORD *)v22 = &_mh_execute_header;
  *(_DWORD *)&v22[8] = 2;
  while (1)
  {
    v3 = *(unsigned int *)&v22[v2];
    sub_100F8D8E8(*(_DWORD *)&v22[v2], &buf);
    v4 = *((char *)a1 + 23);
    v5 = (char)v21;
    v6 = (void *)buf;
    if ((v21 & 0x80u) == 0)
      v7 = v21;
    else
      v7 = *((_QWORD *)&buf + 1);
    if ((v21 & 0x80u) == 0)
      p_buf = &buf;
    else
      p_buf = (__int128 *)buf;
    if (v4 >= 0)
      v9 = *((unsigned __int8 *)a1 + 23);
    else
      v9 = (size_t)a1[1];
    if (v4 >= 0)
      v10 = a1;
    else
      v10 = *a1;
    if (v9 >= v7)
      v11 = v7;
    else
      v11 = v9;
    v12 = memcmp(p_buf, v10, v11) == 0;
    v13 = v9 == v7 && v12;
    if (v5 < 0)
      operator delete(v6);
    if (v13)
      break;
    v2 += 4;
    if (v2 == 12)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
      {
        if (*((char *)a1 + 23) >= 0)
          v15 = a1;
        else
          v15 = (void *)*a1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "unknown constellationUsage %s\n", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        if (*((char *)a1 + 23) >= 0)
          v17 = a1;
        else
          v17 = (void *)*a1;
        *(_DWORD *)v22 = 136315138;
        *(_QWORD *)&v22[4] = v17;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "unknown constellationUsage %s\n", v22);
        v19 = (char *)v18;
        sub_100512490("Generic", 1, 0, 0, "static ConstellationUsage CLEmergencyController::LocationSettings::Emergency::Settings::constellationUsagefromString(const std::string &)", "%s\n", v18);
        if (v19 != (char *)&buf)
          free(v19);
      }
      return 0;
    }
  }
  return v3;
}

void sub_100F87630(uint64_t a1, std::string::size_type a2, uint64_t a3, _DWORD *a4)
{
  int *v7;
  NSObject *v8;
  std::string::size_type v9;
  int v10;
  std::string::size_type v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  std::string::size_type v16;
  NSObject *v17;
  std::string::size_type v18;
  std::string *p_p;
  std::string::size_type v20;
  std::string *v21;
  const char *v22;
  uint8_t *v23;
  NSObject *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  const char *v27;
  uint8_t *v28;
  NSObject *v29;
  std::string::size_type v30;
  NSObject *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  const char *v34;
  std::string::size_type v35;
  const char *v36;
  std::string::size_type v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  int v41;
  std::string::size_type v42;
  __int16 v43;
  std::string *v44;
  std::string __p;
  uint8_t buf[4];
  std::string::size_type v47;
  __int16 v48;
  std::string *v49;

  v7 = a4 + 6;
  if ((sub_100526244(a3, "Enabled", a4 + 6) & 1) != 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      v10 = *v7;
      *(_DWORD *)buf = 136315394;
      v47 = v9;
      v48 = 1024;
      LODWORD(v49) = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#wlan,%s,LPPRel13WlanMeas.Enable,%d,", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      v12 = *v7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v11;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#wlan,%s,LPPRel13WlanMeas.Enable,%d,", (const char *)&__p, 18);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLppRel13WlanSettings(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v13);
LABEL_85:
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136315138;
      v47 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13WlanMeas.Enable field in CB, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v33 = a2;
      else
        v33 = *(_QWORD *)a2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v33;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13WlanMeas.Enable field in CB, using default", (const char *)&__p);
      v14 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLppRel13WlanSettings(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v34);
      goto LABEL_85;
    }
  }
  if (*v7)
  {
    memset(&__p, 0, sizeof(__p));
    if (sub_1000BCB64(a3, "ScanResultConfig", &__p))
    {
      a4[7] = sub_100F87FE8((const void **)&__p.__r_.__value_.__l.__data_);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v17 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v18 = a2;
        else
          v18 = *(_QWORD *)a2;
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        v47 = v18;
        v48 = 2080;
        v49 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#wlan,%s,LPPRel13WlanMeas.ScanResultConfig,%s", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_67;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v20 = a2;
      else
        v20 = *(_QWORD *)a2;
      v21 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v41 = 136315394;
      v42 = v20;
      v43 = 2080;
      v44 = v21;
      LODWORD(v40) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#wlan,%s,LPPRel13WlanMeas.ScanResultConfig,%s", (const char *)&v41, v40);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLppRel13WlanSettings(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v22);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v29 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v30 = a2;
        else
          v30 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136315138;
        v47 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13WlanMeas.ScanResultConfig field found, using default", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_67;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*(char *)(a2 + 23) >= 0)
        v35 = a2;
      else
        v35 = *(_QWORD *)a2;
      v41 = 136315138;
      v42 = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13WlanMeas.ScanResultConfig field found, using default", (const char *)&v41);
      v23 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLppRel13WlanSettings(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v36);
    }
    if (v23 != buf)
      free(v23);
LABEL_67:
    if ((sub_100526244(a3, "EnableRssi", a4 + 8) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v31 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v32 = a2;
        else
          v32 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136315138;
        v47 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13WlanMeas.EnableRssi field in CB, using default", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        if (*(char *)(a2 + 23) >= 0)
          v37 = a2;
        else
          v37 = *(_QWORD *)a2;
        v41 = 136315138;
        v42 = v37;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#wlan,%s,No LPPRel13WlanMeas.EnableRssi field in CB, using default", (const char *)&v41);
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLppRel13WlanSettings(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v24 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v25 = a2;
    else
      v25 = *(_QWORD *)a2;
    *(_DWORD *)buf = 136315138;
    v47 = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#wlan,%s,LPPRel13WlanMeas feature is disabled", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    if (*(char *)(a2 + 23) >= 0)
      v26 = a2;
    else
      v26 = *(_QWORD *)a2;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#wlan,%s,LPPRel13WlanMeas feature is disabled", (const char *)&__p);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::readLppRel13WlanSettings(const std::string &, const CLNameValuePair &, LocationSettings::Emergency::Settings &) const", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
}

void sub_100F87FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F87FE8(const void **a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint8_t *v6;
  size_t v7;
  uint8_t *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  uint8_t buf[8];
  size_t v19;
  unsigned __int8 v20;
  const mach_header_64 *v21;

  v2 = 0;
  v21 = &_mh_execute_header;
  while (1)
  {
    v3 = *(unsigned int *)((char *)&v21 + v2);
    sub_100F8DCA8(*(_DWORD *)((char *)&v21 + v2), buf);
    v4 = *((char *)a1 + 23);
    v5 = (char)v20;
    v6 = *(uint8_t **)buf;
    if ((v20 & 0x80u) == 0)
      v7 = v20;
    else
      v7 = v19;
    if ((v20 & 0x80u) == 0)
      v8 = buf;
    else
      v8 = *(uint8_t **)buf;
    if (v4 >= 0)
      v9 = *((unsigned __int8 *)a1 + 23);
    else
      v9 = (size_t)a1[1];
    if (v4 >= 0)
      v10 = a1;
    else
      v10 = *a1;
    if (v9 >= v7)
      v11 = v7;
    else
      v11 = v9;
    v12 = memcmp(v8, v10, v11) == 0;
    v13 = v9 == v7 && v12;
    if (v5 < 0)
      operator delete(v6);
    if (v13)
      break;
    v2 += 4;
    if (v2 == 8)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#wlan,apConfigFromString,unexpected config", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        LOWORD(v21) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#wlan,apConfigFromString,unexpected config", &v21, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "static AccessPointConfig CLEmergencyController::LocationSettings::Emergency::Settings::apConfigFromString(const std::string &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      return 0;
    }
  }
  return v3;
}

