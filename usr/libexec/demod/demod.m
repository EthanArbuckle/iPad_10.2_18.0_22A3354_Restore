void sub_100004CE8(id a1)
{
  F13Server *v1;
  void *v2;

  v1 = objc_alloc_init(F13Server);
  v2 = (void *)qword_100175150;
  qword_100175150 = (uint64_t)v1;

}

void sub_100005614(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  id WeakRetained;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  unsigned int v19;
  id v20;
  NSObject *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  unsigned __int8 v33;
  id v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  uint8_t v46[8];
  _QWORD v47[4];
  id v48;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_1000B72D4(v3, v4, v5, v6, v7, v8, v9, v10);

  v11 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v11);
  v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "extension"));
  if (!v13)
    goto LABEL_6;
  v14 = (void *)v13;
  v15 = objc_loadWeakRetained(v11);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "extension"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "_plugIn"));
  if ((objc_msgSend(v17, "active") & 1) != 0)
  {

LABEL_6:
    goto LABEL_7;
  }
  v32 = objc_loadWeakRetained(v11);
  v33 = objc_msgSend(v32, "appInstallationInProgress");

  if ((v33 & 1) == 0)
  {
    v34 = sub_1000604F0();
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      sub_1000B72A4(v35, v36, v37, v38, v39, v40, v41, v42);

    v43 = objc_loadWeakRetained(v11);
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "extension"));
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_100005880;
    v47[3] = &unk_10013D818;
    objc_copyWeak(&v48, v11);
    objc_msgSend(v44, "beginExtensionRequestWithInputItems:completion:", 0, v47);

    objc_destroyWeak(&v48);
    goto LABEL_18;
  }
LABEL_7:
  v18 = objc_loadWeakRetained(v11);
  v19 = objc_msgSend(v18, "appInstallationInProgress");

  if (v19)
  {
    v20 = sub_1000604F0();
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "F13Server: Extension not running, but not launching extension because app installation is in progress", v46, 2u);
    }
LABEL_13:

    goto LABEL_18;
  }
  v22 = objc_loadWeakRetained(v11);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "extension"));

  if (!v23)
  {
    v24 = sub_1000604F0();
    v21 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      sub_1000B7274(v21, v25, v26, v27, v28, v29, v30, v31);
    goto LABEL_13;
  }
LABEL_18:
  v45 = objc_loadWeakRetained(v11);
  objc_msgSend(v45, "verifyExtensionIsRunning");

}

void sub_10000586C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100005880(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *WeakRetained;
  int v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000604F0();
    WeakRetained = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138543362;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "F13Server: Error launching extension: %{public}@", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    -[NSObject setExtensionContextIdentifier:](WeakRetained, "setExtensionContextIdentifier:", v5);
  }

}

void sub_1000059B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "extensionContextIdentifier"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "extension"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "extensionContextIdentifier"));
    objc_msgSend(v3, "cancelExtensionRequestWithIdentifier:", v4);

    objc_msgSend(*(id *)(a1 + 32), "setExtensionContextIdentifier:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setExtension:", 0);
  }
}

void sub_100005FF8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_10000644C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

int *sub_10000646C()
{
  return __error();
}

char *sub_100006474(int *a1)
{
  return strerror(*a1);
}

void sub_1000064C8(id a1)
{
  MSDAudioController *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAudioController);
  v2 = (void *)qword_100175160;
  qword_100175160 = (uint64_t)v1;

}

void sub_1000065C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000066C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000693C(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", kFigRoutingContextNotificationPayloadKey_RouteConfigUpdateReason));
  if (objc_msgSend(v5, "isEqualToString:", kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonStarted))
  {
    *a3 = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }

}

void sub_100006C08(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", kFigRoutingContextNotificationPayloadKey_RouteConfigUpdateReason));
  if ((objc_msgSend(v5, "isEqualToString:", kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedSuccess) & 1) != 0|| objc_msgSend(v5, "isEqualToString:", kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed))
  {
    *a3 = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }

}

id sub_1000072EC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MSDAudioController: Received notification of available routes changed!", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "lock");
  objc_msgSend(*(id *)(a1 + 32), "signal");
  return objc_msgSend(*(id *)(a1 + 32), "unlock");
}

void sub_100007624(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint8_t buf[4];
  void *v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "userInfo"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kFigRoutingContextNotificationPayloadKey_RouteConfigUpdateID));
  v5 = sub_1000604F0();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MSDAudioController: Route config updated with info: %{public}@", buf, 0xCu);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", v4))
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100007824(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000785C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_10000786C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100007888(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100007BA8(id a1)
{
  MSDConfigurationProfileManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDConfigurationProfileManager);
  v2 = (void *)qword_100175170;
  qword_100175170 = (uint64_t)v1;

}

void sub_1000084B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000084D0(uint64_t a1, void *a2, char a3)
{
  id v5;
  id v6;
  NSObject *v7;

  v5 = a2;
  if (v5)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    v6 = sub_1000604F0();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000B7B44();

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100008718(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100008E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100008ED8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100008EE8(uint64_t a1)
{

}

void sub_100008EF0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "userInfo"));
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138543362;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received completion notification with info: %{public}@", (uint8_t *)&v10, 0xCu);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("Result")));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "BOOLValue");

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("Error")));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10000A0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10000A0D4(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *context;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];

  v4 = a2;
  context = objc_autoreleasePoolPush();
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "setupIntraComponentDependency:", *(_BYTE *)(a1 + 48) == 0));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v20 = v4;
  if (*(_QWORD *)(v6 + 40))
  {
    objc_msgSend(v4, "addInstallDependency:", context, v4);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  objc_storeStrong((id *)(v6 + 40), a2);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v35, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v12, context));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                           + 40), "objectForKey:", v12));
        if (v14)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "lastObject"));
          v17 = sub_1000604F0();
          v18 = objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "component"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "component"));
            *(_DWORD *)buf = 138413058;
            v28 = v15;
            v29 = 2112;
            v30 = v22;
            v31 = 2112;
            v32 = v16;
            v33 = 2112;
            v34 = v21;
            _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Setting up inter-operation dependency: %@(%@) -> %@(%@)", buf, 0x2Au);

          }
          objc_msgSend(v15, "addDependency:", v16);

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v35, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addEntriesFromDictionary:", v7);
  objc_autoreleasePoolPop(context);

}

void sub_10000AEDC(id a1)
{
  MSDS3UploadHandler *v1;
  void *v2;

  v1 = objc_alloc_init(MSDS3UploadHandler);
  v2 = (void *)qword_100175180;
  qword_100175180 = (uint64_t)v1;

}

void sub_10000B1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B20C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000B21C(uint64_t a1)
{

}

void sub_10000B224(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  MSDS3UploadRequest *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  _BOOL4 v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  id obj;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  void *v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDHelperAgent sharedInstance](MSDHelperAgent, "sharedInstance"));
  v4 = objc_msgSend(v3, "collectDemoLogsToFolder:", *(_QWORD *)(a1 + 32));

  v5 = sub_1000604F0();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Collection of logs succeeded, lets upload these logs.", buf, 2u);
    }

    v8 = objc_alloc_init(MSDS3UploadRequest);
    -[MSDS3UploadRequest setS3url:](v8, "setS3url:", *(_QWORD *)(a1 + 40));
    -[MSDS3UploadRequest setLogFilePath:](v8, "setLogFilePath:", CFSTR("/private/var/mnt/com.apple.mobilestoredemo.storage/com.apple.mobilestoredemo.blob/Metadata/DekotaLogs.tar.gz"));
    -[MSDS3UploadRequest setRetryAttempts:](v8, "setRetryAttempts:", *(_QWORD *)(a1 + 72));
    -[MSDS3UploadRequest setHttpHeaders:](v8, "setHttpHeaders:", *(_QWORD *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MSDServerRequestHandler sharedInstance](MSDServerRequestHandler, "sharedInstance"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "handleRequestSync:", v8));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "error"));
    v12 = sub_1000604F0();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v14)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "error"));
        v16 = objc_msgSend(v15, "code");
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "error"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedDescription"));
        *(_DWORD *)buf = 134218242;
        v27 = v16;
        v28 = 2114;
        v29 = v18;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Log upload failed. Inform hub of error. Error: %ld, Reason: %{public}@", buf, 0x16u);

      }
      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "error"));
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v13 = *(NSObject **)(v20 + 40);
      *(_QWORD *)(v20 + 40) = v19;
    }
    else if (v14)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Log upload completed successfully.", buf, 2u);
    }

    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    obj = *(id *)(v23 + 40);
    objc_msgSend(v2, "removeItemAtPath:error:", CFSTR("/private/var/mnt/com.apple.mobilestoredemo.storage/com.apple.mobilestoredemo.blob/Metadata/DekotaLogs.tar.gz"), &obj);
    objc_storeStrong((id *)(v23 + 40), obj);

  }
  else
  {
    if (v7)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Log collection failed. Inform hub of error.", buf, 2u);
    }

    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v24 = *(id *)(v21 + 40);
    sub_1000B63A4(&v24, 3727744742, (uint64_t)CFSTR("Failed to upload MobileStoreDemo logs to S3."));
    v22 = v24;
    v8 = *(MSDS3UploadRequest **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v22;
  }

  objc_msgSend(*(id *)(a1 + 56), "setUploadInProgress:", 0);
  objc_msgSend(*(id *)(a1 + 56), "demoLogUploadCompleted:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));

}

void sub_10000C308(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000C34C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000C35C(uint64_t a1)
{

}

void sub_10000C364(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1[4] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(a1[5] + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_10000C3F4(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10000C448(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10000C49C(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10000C4F0(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10000C8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10000C8F4(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1[4] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(a1[5] + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_10000C984(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10000CCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10000CCDC(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10000CD30(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10000CF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10000CF68(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10000D298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000D2B4(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10000D500(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  int v15;
  void *v16;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000604F0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000B7F74(v6, v9);

    v10 = v6;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ak_redactedCopy"));
    v15 = 138543362;
    v16 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Account authentication completed with results: %{public}@", (uint8_t *)&v15, 0xCu);

  }
  if (!objc_msgSend(*(id *)(a1 + 32), "_isAllowListedAccount:withAuthResults:", *(_QWORD *)(a1 + 40), v5))
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741044, CFSTR("Account is not allowed.")));
LABEL_10:
    v14 = v10;
    v13 = 0;
    goto LABEL_11;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v5));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), AKAuthenticationRawPasswordKey);
  v13 = objc_msgSend(v12, "copy");

  v14 = 0;
LABEL_11:
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10000D964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000D988(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint8_t v16[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v5 = a3;
  v6 = sub_1000604F0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Signing in to Apple ID completed!", v16, 2u);
    }
    v9 = 0;
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000B7FF4();

    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allValues"));
    v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v18;
      while (2)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "error"));

          if (v13)
          {
            v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "error"));
            goto LABEL_17;
          }
        }
        v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v9)
          continue;
        break;
      }
    }
  }
LABEL_17:

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = 0;

}

void sub_10000DEBC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  _QWORD v15[4];
  id v16;

  v6 = a3;
  v7 = a4;
  if ((char *)objc_msgSend(v6, "statusCode") - 200 > (char *)0x63)
  {
    v12 = sub_1000604F0();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1000B8084();

    if (v7)
      v14 = v7;
    else
      v14 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727744512, CFSTR("Unexpected server response.")));
    v11 = v14;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v8 = v6;
    v9 = objc_alloc((Class)AAiCloudTermsAgreeRequest);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "agreeURL"));

    v11 = objc_msgSend(v9, "initWithURLString:account:", v10, *(_QWORD *)(a1 + 32));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10000E028;
    v15[3] = &unk_10013DAD0;
    v16 = *(id *)(a1 + 40);
    objc_msgSend(v11, "performRequestWithHandler:", v15);

  }
}

void sub_10000E028(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  char *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  void *v12;
  uint8_t v13[16];

  v6 = a4;
  v7 = (char *)objc_msgSend(a3, "statusCode") - 200;
  v8 = sub_1000604F0();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if ((unint64_t)v7 > 0x63)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1000B80E8();

    if (v6)
      v11 = v6;
    else
      v11 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727744512, CFSTR("Unexpected server response.")));
    v12 = v11;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Successfully agreed to iCloud terms!", v13, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_10000E340(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  uint8_t v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v5 = a3;
  v6 = sub_1000604F0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Signing out from Apple ID completed!", v14, 2u);
    }
    v9 = 0;
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000B814C();

    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allValues"));
    v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "error"));

          if (v13)
          {
            v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "error"));
            goto LABEL_17;
          }
        }
        v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v9)
          continue;
        break;
      }
    }
  }
LABEL_17:

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10000E4F8(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  uint8_t v11[16];

  v5 = a3;
  v6 = v5;
  if ((a2 & 1) != 0)
  {
    v7 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Signing out from Apple ID completed!", v11, 2u);
    }
    v9 = 0;
  }
  else
  {
    v9 = v5;
    v10 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000B81B0(v9, v8);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10000E780(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;

  v5 = a3;
  if ((a2 & 1) == 0)
  {
    v6 = sub_1000604F0();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000B8230(v5, v7);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10000EC40(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t v9[16];

  v5 = a3;
  v6 = sub_1000604F0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "iCloud account features have been successfully updated!", v9, 2u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_1000B8318(v5, v8);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10000EDDC(uint64_t a1, char a2)
{
  id v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[16];

  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "'Find My' service has been successfully enabled!", buf, 2u);
    }

    v7 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Toggling 'Send Last Location'...", buf, 2u);
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[FMDFMIPManager sharedInstance](FMDFMIPManager, "sharedInstance"));
    v10 = *(unsigned __int8 *)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10000EF58;
    v12[3] = &unk_10013DB70;
    v13 = *(id *)(a1 + 32);
    objc_msgSend(v9, "setLowBatteryLocateEnabled:withCompletion:", v10, v12);

    v11 = v13;
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000B8398();

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727744768, CFSTR("An error has occurred.")));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_10000EF58(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t v7[16];

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000B83C4(v3, v6);
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "'Send Last Location' has been successfully toggled!", v7, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10000F394(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[16];

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", AKAuthenticationPasswordKey));
    objc_msgSend(v3, "aa_setPassword:", v4);

    v5 = objc_msgSend(objc_alloc((Class)AAFMIPAuthenticateRequest), "initWithAccount:", *(_QWORD *)(a1 + 32));
    v6 = sub_1000604F0();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending AAFMIPAuthenticateRequest...", buf, 2u);
    }

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10000F4D4;
    v8[3] = &unk_10013DBE8;
    v10 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 40);
    objc_msgSend(v5, "performRequestWithHandler:", v8);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_10000F4D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  uint8_t buf[24];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v8;
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "fmipWipeToken"));
  v12 = (void *)v11;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = sub_10000C34C;
  v34 = sub_10000C35C;
  v35 = 0;
  if (v10 && v11)
  {
    v13 = sub_1000604F0();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received AAFMIPAuthenticateResponse!", buf, 2u);
    }

    v15 = sub_1000604F0();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Disabling 'Find My' service...", buf, 2u);
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v18 = AAUIDeviceLocatorStateDidChangeNotification;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_10000F7BC;
    v26[3] = &unk_10013DBC0;
    v27 = *(id *)(a1 + 32);
    v29 = &v30;
    v28 = *(id *)(a1 + 40);
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "addObserverForName:object:queue:usingBlock:", v18, 0, 0, v26));
    v20 = (void *)v31[5];
    v31[5] = v19;

    objc_msgSend(*(id *)(a1 + 32), "disableInContext:withWipeToken:", 2, v12);
    v21 = v27;
  }
  else
  {
    v22 = sub_1000604F0();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedDescription"));
      sub_1000B8470(v24, (uint64_t)buf, v23);
    }

    if (v9)
      v25 = v9;
    else
      v25 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741043, CFSTR("Failed to authenticate account with server.")));
    v21 = v25;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

  _Block_object_dispose(&v30, 8);
}

void sub_10000F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000F7BC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _DWORD v13[2];
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "isStateKnown");
    v5 = objc_msgSend(*(id *)(a1 + 32), "isChangingState");
    v6 = objc_msgSend(*(id *)(a1 + 32), "isEnabled");
    v13[0] = 67109632;
    v13[1] = v4;
    v14 = 1024;
    v15 = v5;
    v16 = 1024;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "'Find My' service state changed! isStateKnown = %{BOOL}d isChaningState = %{BOOL}d isEnabled = %{BOOL}d", (uint8_t *)v13, 0x14u);
  }

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "isStateKnown");
  if ((_DWORD)result)
  {
    result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "isChangingState");
    if ((result & 1) == 0)
    {
      result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "isEnabled");
      if ((result & 1) == 0)
      {
        v8 = sub_1000604F0();
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "'Find My' service is now disabled.", (uint8_t *)v13, 2u);
        }

        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
        objc_msgSend(v10, "removeObserver:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v12 = *(void **)(v11 + 40);
        *(_QWORD *)(v11 + 40) = 0;

        return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      }
    }
  }
  return result;
}

void sub_100010034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010064(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint8_t v9[16];

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000B85F8(v3, v6);
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "iCloud keychain has been successfully synced!", v9, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;

}

void sub_100010B4C(uint64_t a1, int a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  const __CFString *v8;
  int v9;
  const __CFString *v10;
  __int16 v11;
  id v12;

  v5 = a3;
  v6 = sub_1000604F0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = CFSTR("NO");
    if (a2)
      v8 = CFSTR("YES");
    v9 = 138412546;
    v10 = v8;
    v11 = 2112;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removal of account completed with success: %@, error: %@", (uint8_t *)&v9, 0x16u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100011138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100011160(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100011170(uint64_t a1)
{

}

uint64_t sub_100011178(uint64_t a1, uint64_t a2)
{
  uint64_t UUID;
  void *v4;

  UUID = MISProvisioningProfileGetUUID(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(UUID);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v4);

  return 1;
}

void sub_100011308(id a1)
{
  MSDAnalytics *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAnalytics);
  v2 = (void *)qword_100175190;
  qword_100175190 = (uint64_t)v1;

}

void sub_100011548(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10001155C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100013C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013C30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100013C40(uint64_t a1)
{

}

void sub_100013C48(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned int v10;

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "stringByAppendingPathComponent:", a2));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "isEqualToString:", CFSTR("/")) & 1) == 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nonContainerizedContentRoots"));
    v10 = objc_msgSend(v9, "containsObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

    if (v10)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      *a4 = 1;
    }
  }
}

void sub_100014B38(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100014B48(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_100014B68(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_1000153DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001541C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001542C(uint64_t a1)
{

}

void sub_100015434(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  void *v7;
  id v8;
  NSObject *v9;

  v6 = a3;
  v7 = v6;
  if (!a2 || v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
    v8 = sub_1000604F0();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1000B972C(a1, v7);

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_100015668(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100019200(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1000196C8(id a1)
{
  MSDAppPrivacyPermissionsHelper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAppPrivacyPermissionsHelper);
  v2 = (void *)qword_1001751A0;
  qword_1001751A0 = (uint64_t)v1;

}

void sub_10001ACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001ACF0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001AD00(uint64_t a1)
{

}

void sub_10001AD08(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000BA180((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v15 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v17)
            objc_enumerationMutation(v5);
          v19 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "name"));
          v21 = objc_msgSend(v20, "isEqualToString:", CFSTR("com.apple.preferences.networkprivacy"));

          if (v21)
            objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v19);
        }
        v16 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      }
      while (v16);
    }
    v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v22)
    {
      v23 = objc_msgSend(objc_alloc((Class)NEConfiguration), "initWithName:grade:", CFSTR("com.apple.preferences.networkprivacy"), 2);
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v25 = *(void **)(v24 + 40);
      *(_QWORD *)(v24 + 40) = v23;

      v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "pathController"));

    if (!v26)
    {
      v27 = objc_alloc_init((Class)NEPathController);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setPathController:", v27);

    }
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 40), "pathController"));
    -[NSObject setEnabled:](v8, "setEnabled:", 1);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_10001B08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10001B0B0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;

  v3 = a2;
  if (v3)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000BA1E4(v3, v5);

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_10001BA1C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_10001C0EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001C57C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001C9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001CB08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001CD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001CD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001CE8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001CF9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001D078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001D180(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001D380(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001D580(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001E958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001EBA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001F070(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 120));
  _Unwind_Resume(a1);
}

void sub_10001F0C4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000BA738(a1);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741186, CFSTR("Failed to establish xpc connection to demod.")));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_hanldeAuthCompletionWithError:", v4);

}

void sub_10001F14C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000BA7AC(a1);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741186, CFSTR("Failed to establish xpc connection to demod.")));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_hanldeAuthCompletionWithError:", v4);

}

void sub_10001F1D4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_hanldeAuthCompletionWithError:", v3);

}

void sub_10001F21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handlePasswordPromptWithFlags:throttleSeconds:", a2, a3);

}

void sub_10001F4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001F4FC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_activate");

}

void sub_10001F5DC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10001F600(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  id *v7;
  id v8;
  void *v9;
  void *v10;
  id WeakRetained;
  void (**v12)(_QWORD, _QWORD);
  int v13;
  id v14;

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (!v3)
  {
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
LABEL_9:

      goto LABEL_10;
    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v13 = 138543362;
    v14 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@: Handler successfully activated!", (uint8_t *)&v13, 0xCu);
LABEL_8:

    goto LABEL_9;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1000BA820(a1, v3);

  v7 = (id *)(a1 + 32);
  v8 = objc_loadWeakRetained(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "completionHandler"));

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
    v6 = objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741107, CFSTR("Cannot authenticate demo peer."), v10));

    WeakRetained = objc_loadWeakRetained(v7);
    v12 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionHandler"));
    ((void (**)(_QWORD, NSObject *))v12)[2](v12, v6);

    goto LABEL_8;
  }
LABEL_10:

}

void sub_10001FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001FB9C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_fetchPairingSecretFromServer");

}

void sub_10001FD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001FDAC(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001FE78;
  v7[3] = &unk_10013DDB8;
  objc_copyWeak(&v9, a1);
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

  objc_destroyWeak(&v9);
}

void sub_10001FE78(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleKVStoreResponse:", *(_QWORD *)(a1 + 32));

}

id sub_100020150(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 32));
}

void sub_1000201B4(id a1)
{
  MSDSessionMetrics *v1;
  void *v2;

  v1 = objc_alloc_init(MSDSessionMetrics);
  v2 = (void *)qword_1001751B0;
  qword_1001751B0 = (uint64_t)v1;

}

void sub_10002037C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  MSDSessionTransactionData *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionMetrics", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v7, "resourceFetchType") != (id)3)
        {
          v8 = -[MSDSessionTransactionData initWithData:]([MSDSessionTransactionData alloc], "initWithData:", v7);
          objc_msgSend(*(id *)(a1 + 40), "saveToFile:", v8);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_1000206F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100023254(id a1)
{
  MSDPreferencesFile *v1;
  void *v2;

  v1 = objc_alloc_init(MSDPreferencesFile);
  v2 = (void *)qword_1001751C0;
  qword_1001751C0 = (uint64_t)v1;

}

void sub_1000233B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100023468(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100023670(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100023734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000237F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100023C24(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/private/var/mnt/com.apple.mobilestoredemo.storage/com.apple.mobilestoredemo.blob/Metadata"), "stringByAppendingPathComponent:", CFSTR("com.apple.MobileStoreDemo")));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringByAppendingPathExtension:", CFSTR("plist")));

  v2 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v4, 0));
  v3 = (void *)qword_1001751D0;
  qword_1001751D0 = v2;

}

void sub_100023D2C(id a1)
{
  MSDTestInterface *v1;
  void *v2;

  v1 = objc_alloc_init(MSDTestInterface);
  v2 = (void *)qword_1001751E0;
  qword_1001751E0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001751E0, "start");
}

id sub_100023FB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "pushTestLog:", *(_QWORD *)(a1 + 40));
}

void sub_100024340(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "userInfo"));
  objc_msgSend(v2, "sendTestEvents:", v3);

}

void sub_10002500C(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "groupContainerPaths"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "path"));

  objc_msgSend(v8, "setObject:forKey:", v7, v6);
}

void sub_10002508C(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "groupContainerPaths"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "path"));

  objc_msgSend(v8, "setObject:forKey:", v7, v6);
}

void sub_1000256E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  int v9;
  id v10;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000604F0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138543362;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Clearing app data container: %{public}@", (uint8_t *)&v9, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_createUninstallOperationForContainer:ofType:containerPath:isContainerized:", v5, CFSTR("AppData"), v6, 1);
}

void sub_1000257C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  int v9;
  id v10;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000604F0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138543362;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Clearing plugin data container: %{public}@", (uint8_t *)&v9, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_createUninstallOperationForContainer:ofType:containerPath:isContainerized:", v5, CFSTR("ExtensionData"), v6, 1);
}

void sub_1000258A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  int v9;
  id v10;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000604F0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138543362;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Clearing group data container: %{public}@", (uint8_t *)&v9, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_createUninstallOperationForContainer:ofType:containerPath:isContainerized:", v5, CFSTR("GroupData"), v6, 1);
}

void sub_1000265AC(id a1)
{
  MSDDemoPeerCommander *v1;
  void *v2;

  v1 = objc_alloc_init(MSDDemoPeerCommander);
  v2 = (void *)qword_1001751F8;
  qword_1001751F8 = (uint64_t)v1;

}

void sub_100026818(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100026A6C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100026B38;
  block[3] = &unk_10013E100;
  v12 = v6;
  v8 = *(id *)(a1 + 40);
  v13 = v5;
  v14 = v8;
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, block);

}

void sub_100026B38(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedDescription"));
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v3));

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "payload"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("Result")));

    if (v5 && objc_msgSend(v5, "BOOLValue"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "payload"));
      v7 = objc_msgSend(v6, "mutableCopy");

      objc_msgSend(v7, "removeObjectForKey:", CFSTR("Result"));
      objc_msgSend(v7, "removeObjectForKey:", CFSTR("Reason"));
      v8 = *(_QWORD *)(a1 + 48);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v7));
      (*(void (**)(uint64_t, void *, _QWORD))(v8 + 16))(v8, v9, 0);

      v12 = 0;
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "payload"));
      v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("Reason")));

      if (v7)
        v11 = objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741109, CFSTR("Cannot execute command on demo peer."), v7));
      else
        v11 = objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741109, CFSTR("Cannot execute command on demo peer.")));
      v12 = (id)v11;
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }

  }
}

void sub_1000276A8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

void sub_1000276F0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000BAFD0();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setXpcConnection:", 0);

}

void sub_10002774C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000BAFFC();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setXpcConnection:", 0);

}

void sub_1000277A8(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "xpcConnection"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveredPeers"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allValues"));

    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v17;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v17 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v11);
          v13 = objc_loadWeakRetained(v2);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "xpcConnection", (_QWORD)v16));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "remoteObjectProxy"));
          objc_msgSend(v15, "providerDidDiscoverNewPeer:", v12);

          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v9);
    }

  }
}

void sub_100027C04(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
    v9 = 138543618;
    v10 = v6;
    v11 = 2114;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MSDDemoPeerCommander: Pairing completed with peer: %{public}@ error: %{public}@", (uint8_t *)&v9, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pairingHandlers"));
  objc_msgSend(v8, "removeObjectForKey:", *(_QWORD *)(a1 + 48));

}

uint64_t sub_100027DD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100027EBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  uint64_t v15;
  _UNKNOWN **v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  v21 = a2;
  v5 = a3;
  v6 = v5;
  if (!v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveredPeers"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", *(_QWORD *)(a1 + 40)));

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("DeviceInfo")));
      v10 = v9;
      if (v9)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kMSDKPeerDemoDevicePropertyDeviceName));
        if (v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceName"));
          v13 = objc_msgSend(v11, "isEqualToString:", v12);

          if ((v13 & 1) == 0)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDemoPeerPairingManager sharedInstance](MSDDemoPeerPairingManager, "sharedInstance"));
            objc_msgSend(v14, "updateDeviceNameForPairedPeerOfUUID:withNewName:", *(_QWORD *)(a1 + 40), v11);

          }
        }
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("ProtocolVersion")));
        if (v15)
          v16 = (_UNKNOWN **)v15;
        else
          v16 = &off_10014D7F0;
        v17 = objc_msgSend(v10, "mutableCopy");
        objc_msgSend(v17, "setObject:forKey:", v16, CFSTR("ProtocolVersion"));
        objc_msgSend(v8, "refreshDevicePropertiesUsingProperties:", v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcConnection"));

        if (v18)
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcConnection"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "remoteObjectProxy"));
          objc_msgSend(v20, "providerDidUpdateDeviceInfoOnPeerOfID:withNewProperties:", *(_QWORD *)(a1 + 40), v17);

        }
        v6 = 0;
      }
      else
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741109, CFSTR("Cannot execute command on demo peer.")));
      }

    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741104, CFSTR("Cannot find specified demo peer.")));
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_1000282AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10002840C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000284E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100028680(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100028868(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100028A0C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v25 = a1;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("AppArchiveList")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0));
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v12 = v10;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v13)
    {
      v15 = v13;
      v8 = 0;
      v16 = *(_QWORD *)v28;
LABEL_5:
      v17 = 0;
      v18 = v8;
      while (1)
      {
        if (*(_QWORD *)v28 != v16)
          objc_enumerationMutation(v12);
        v19 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v17);
        v20 = objc_opt_class(MSDKPeerDemoApp, v14);
        v26 = v18;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v20, v19, &v26));
        v8 = v26;

        if (!v21)
          break;
        objc_msgSend(v11, "addObject:", v21);

        v17 = (char *)v17 + 1;
        v18 = v8;
        if (v15 == v17)
        {
          v15 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
          if (v15)
            goto LABEL_5;
          goto LABEL_17;
        }
      }
      v22 = sub_1000604F0();
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        sub_1000BB028();

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v24));

      a1 = v25;
      v6 = 0;
      if (v7)
      {
        v9 = 0;
        goto LABEL_19;
      }
    }
    else
    {
      v8 = 0;
LABEL_17:

      a1 = v25;
      v6 = 0;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11));
    v7 = 0;
LABEL_19:

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_100028E08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100028F90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100029064(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v25 = a1;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("EnvArchiveList")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0));
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v12 = v10;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v13)
    {
      v15 = v13;
      v8 = 0;
      v16 = *(_QWORD *)v28;
LABEL_5:
      v17 = 0;
      v18 = v8;
      while (1)
      {
        if (*(_QWORD *)v28 != v16)
          objc_enumerationMutation(v12);
        v19 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v17);
        v20 = objc_opt_class(MSDKPeerDemoEnvironment, v14);
        v26 = v18;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v20, v19, &v26));
        v8 = v26;

        if (!v21)
          break;
        objc_msgSend(v11, "addObject:", v21);

        v17 = (char *)v17 + 1;
        v18 = v8;
        if (v15 == v17)
        {
          v15 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
          if (v15)
            goto LABEL_5;
          goto LABEL_17;
        }
      }
      v22 = sub_1000604F0();
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        sub_1000BB0A4();

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v24));

      a1 = v25;
      v6 = 0;
      if (v7)
      {
        v9 = 0;
        goto LABEL_19;
      }
    }
    else
    {
      v8 = 0;
LABEL_17:

      a1 = v25;
      v6 = 0;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11));
    v7 = 0;
LABEL_19:

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_100029424(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100029610(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000296E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000297B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v25 = a1;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("TestScriptArchiveList")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0));
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v12 = v10;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v13)
    {
      v15 = v13;
      v8 = 0;
      v16 = *(_QWORD *)v28;
LABEL_5:
      v17 = 0;
      v18 = v8;
      while (1)
      {
        if (*(_QWORD *)v28 != v16)
          objc_enumerationMutation(v12);
        v19 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v17);
        v20 = objc_opt_class(MSDKPeerDemoTestScript, v14);
        v26 = v18;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v20, v19, &v26));
        v8 = v26;

        if (!v21)
          break;
        objc_msgSend(v11, "addObject:", v21);

        v17 = (char *)v17 + 1;
        v18 = v8;
        if (v15 == v17)
        {
          v15 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
          if (v15)
            goto LABEL_5;
          goto LABEL_17;
        }
      }
      v22 = sub_1000604F0();
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        sub_1000BB120(v8);

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v24));

      a1 = v25;
      v6 = 0;
      if (v7)
      {
        v9 = 0;
        goto LABEL_19;
      }
    }
    else
    {
      v8 = 0;
LABEL_17:

      a1 = v25;
      v6 = 0;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11));
    v7 = 0;
LABEL_19:

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_100029BEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100029CC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("GKResultsArchive")));
    v16 = 0;
    v12 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(MSDKPeerDemoGKResults, v11), v10, &v16);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v8 = v16;
    v7 = 0;
    if (!v9)
    {
      v13 = sub_1000604F0();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000BB198(v8);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v15));

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100029EDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("GKMetricsArchive")));
    v16 = 0;
    v12 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(MSDKPeerDemoGKMetrics, v11), v10, &v16);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v8 = v16;
    v7 = 0;
    if (!v9)
    {
      v13 = sub_1000604F0();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000BB210(v8);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v15));

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10002A0F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("LSMeasurementsData")));
    if (v10)
    {
      v9 = (void *)v10;
      v8 = 0;
      goto LABEL_6;
    }
    v11 = sub_1000604F0();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1000BB288();

    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741108, CFSTR("Cannot communicate with demo peer.")));
  }
  v8 = v7;
  v9 = 0;
LABEL_6:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10002A290(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("HSCoachingSuggestion")));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10002A3C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("IPDStatusArchive")));
    v16 = 0;
    v12 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(MSDKPeerDemoIPDStatus, v11), v10, &v16);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v8 = v16;
    v7 = 0;
    if (!v9)
    {
      v13 = sub_1000604F0();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000BB2B4(v8);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v15));

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_10002A5E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002A7A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  _UNKNOWN **v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = &off_10014E708;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("FinalIPD")));
    if (v10 && (v11 = objc_opt_class(NSNumber, v9), (objc_opt_isKindOfClass(v10, v11) & 1) != 0))
    {
      v8 = v10;
      v7 = 0;
    }
    else
    {
      v12 = sub_1000604F0();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1000BB32C();

      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741108, CFSTR("Cannot communicate with demo peer.")));
      v8 = &off_10014E708;
    }

  }
  v14 = *(_QWORD *)(a1 + 32);
  objc_msgSend(v8, "doubleValue");
  (*(void (**)(uint64_t, id))(v14 + 16))(v14, v7);

}

void sub_10002A988(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  _UNKNOWN **v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = &off_10014D808;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("IPDResetStage")));
    if (v10 && (v11 = objc_opt_class(NSNumber, v9), (objc_opt_isKindOfClass(v10, v11) & 1) != 0))
    {
      v8 = v10;
      v7 = 0;
    }
    else
    {
      v12 = sub_1000604F0();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1000BB358();

      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741108, CFSTR("Cannot communicate with demo peer.")));
      v8 = &off_10014D808;
    }

  }
  (*(void (**)(_QWORD, id, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(v8, "unsignedIntegerValue"), v7);

}

void sub_10002AB6C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("AXSettingsArchive")));
    v16 = 0;
    v12 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(MSDKPeerDemoAXSettings, v11), v10, &v16);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v8 = v16;
    v7 = 0;
    if (!v9)
    {
      v13 = sub_1000604F0();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000BB384(v8);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v15));

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_10002AEA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10002AF78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10002B320(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10002B3E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002B484(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  int v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "nearbyObjects"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v2));

  if (!v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "nearbyObjects"));
    objc_msgSend(v5, "setObject:forKey:", *(_QWORD *)(a1 + 32), v2);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "discoveredPeers"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v2));

  if (v7)
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "isInBubble");
    v9 = sub_1000604F0();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v19 = v7;
      v20 = 1024;
      v21 = (int)v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MSDDemoPeerCommander: Peer '%{public}@' is in bubble: %{BOOL}d", buf, 0x12u);
    }

    objc_msgSend(v7, "setIsInBubble:", v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "xpcConnection"));

    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8, kMSDKPeerDemoDevicePropertyIsInBubble));
      v17 = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "xpcConnection"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "remoteObjectProxy"));
      objc_msgSend(v15, "providerDidUpdateDeviceInfoOnPeerOfID:withNewProperties:", v2, v13);

    }
  }

}

void sub_10002B718(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(objc_alloc((Class)MSDKPeerDemoDevice), "initWithMSDRapportDevice:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "_handleDiscoveryOfNewPeer:", v2);

}

void sub_10002B7FC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveredPeers"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v3));

  v4 = v5;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleLossOfExistingPeer:", v5);
    v4 = v5;
  }

}

void sub_10002B914(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveredPeers"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v3));

  v4 = v5;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleUpdateOfExistingPeer:", v5);
    v4 = v5;
  }

}

void sub_10002BB20(id *a1)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  int v11;
  id v12;
  __int16 v13;
  id v14;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[4];
    v5 = a1[5];
    v11 = 138543618;
    v12 = v4;
    v13 = 2114;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MSDDemoPeerCommander: Received event message: %{public}@ from device: %{public}@", (uint8_t *)&v11, 0x16u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "discoveredPeers"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v7));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "identifier"));
    v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.MobileStoreDemo.UpdateDeviceInfo"));

    if (v10)
      objc_msgSend(a1[6], "_handleUpdateDeviceEventMessage:fromPeer:", a1[4], v8);
  }

}

void sub_10002BDD0(id a1)
{
  MSDPairedWatchProxy *v1;
  void *v2;

  v1 = objc_alloc_init(MSDPairedWatchProxy);
  v2 = (void *)qword_100175200;
  qword_100175200 = (uint64_t)v1;

}

void sub_10002BF28(id a1, PSYSyncSession *a2, NSSet *a3, NSError *a4)
{
  NSError *v4;
  id v5;
  NSObject *v6;

  v4 = a4;
  if (v4)
  {
    v5 = sub_1000604F0();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1000BB4EC(v4, v6);

  }
}

void sub_10002CC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10002CC44(uint64_t a1, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10002CD40(id a1)
{
  MSDBluetoothHelper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDBluetoothHelper);
  v2 = (void *)qword_100175210;
  qword_100175210 = (uint64_t)v1;

}

void sub_10002DDF8(id a1)
{
  MSDPushNotificationHandler *v1;
  void *v2;

  v1 = objc_alloc_init(MSDPushNotificationHandler);
  v2 = (void *)qword_100175220;
  qword_100175220 = (uint64_t)v1;

}

void sub_10002E55C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_10002ED2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002ED70(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002ED80(uint64_t a1)
{

}

void sub_10002ED88(uint64_t a1, void *a2, const char *a3, _BYTE *a4)
{
  char *v7;
  void *v8;
  char *v9;
  id v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  unsigned int v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  unsigned int v25;
  void *v26;
  MSDComponent *v27;
  MSDComponent *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  MSDComponent *v39;
  id v40;
  NSObject *v41;
  void *v42;
  unsigned int v43;
  void *v44;
  void *v45;
  id v46;
  NSObject *v47;
  void *v48;
  unsigned int v49;
  id v50;
  _BOOL4 v51;
  id v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  char *v65;
  __int16 v66;
  char *v67;

  v7 = a2;
  v8 = objc_autoreleasePoolPush();
  v9 = (char *)objc_claimAutoreleasedReturnValue(+[MSDSignedManifest getComponentFromPath:forManifestVersion:](MSDSignedManifest, "getComponentFromPath:forManifestVersion:", v7, *(_QWORD *)(a1 + 32)));
  v10 = sub_1000604F0();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    v63 = a3;
    v64 = 2114;
    v65 = v7;
    v66 = 2114;
    v67 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%lu] Building component for signed manifest item: %{public}@(%{public}@)", buf, 0x20u);
  }

  if (!v9)
  {
    v26 = 0;
    v13 = 0;
    goto LABEL_53;
  }
  if (!objc_msgSend(*(id *)(a1 + 40), "getComponentProgressStatus:", v9))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "signedManifest"));
    v18 = objc_msgSend(v17, "isItemBackup:", v7);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "signedManifest"));
    v20 = v19;
    if (v18)
    {
      v21 = objc_msgSend(v19, "isItemDeviceSettings:", v9);

      if (v21)
      {
        v22 = sub_1000604F0();
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v63 = "-[MSDComponentBuilder buildComponentsFromManifest]_block_invoke";
          v64 = 2114;
          v65 = v9;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s - building settings dict for component %{public}@", buf, 0x16u);
        }

        v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "buildSettingsOperationWithIdentifier:", v9));
      }
      else
      {
        v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "buildBackupOperationsWithPath:andIndex:", v7, a3));
      }
    }
    else
    {
      v25 = objc_msgSend(v19, "isItemSystemAppData:", v7);

      if (v25)
      {
        v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "buildSystemAppOperationsWithIdentifier:", v9));
      }
      else
      {
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "signedManifest"));
        v43 = objc_msgSend(v42, "isItemApp:", v7);

        if (v43)
        {
          v44 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "appItemToDefer"));
          v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "buildAppOperationsWithIdentifier:shouldDeferApp:", v9, objc_msgSend(v45, "isEqualToString:", v9)));

          if ((objc_msgSend(*(id *)(a1 + 48), "forBackgroundDownload") & 1) == 0
            && objc_msgSend(*(id *)(a1 + 56), "containsObject:", v9)
            && (objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.ist.windward")) & 1) == 0
            && (objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.ist.DemoDiscoveryApp")) & 1) == 0
            && (objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.ist.demoloop")) & 1) == 0
            && (objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.ist.DigitalSignage.iOS")) & 1) == 0
            && (objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.ist.dast")) & 1) == 0)
          {
            v46 = sub_1000604F0();
            v47 = objc_claimAutoreleasedReturnValue(v46);
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              v63 = v9;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Building remove operations for app: %{public}@", buf, 0xCu);
            }

            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "buildAppRemovalOperationsWithIdentifier:", v9));
            if (!v26)
              goto LABEL_53;
            goto LABEL_18;
          }
LABEL_17:
          v26 = 0;
LABEL_18:
          if (v13)
          {
            v27 = -[MSDComponent initWithName:andOperations:]([MSDComponent alloc], "initWithName:andOperations:", v9, v13);
            if (v27)
            {
              v28 = v27;
              if (v26)
                -[MSDComponent addRemoveOperations:](v27, "addRemoveOperations:", v26);
              v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "appItemToDefer"));
              if (v29)
              {
                v30 = (void *)v29;
                v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "appItemToDefer"));
                if ((objc_msgSend(v31, "isEqualToString:", v9) & 1) != 0)
                {
                  v32 = v26;
                  v33 = v8;
                  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "signedManifest"));
                  v61 = objc_msgSend(v34, "isItemApp:", v7);

                  v8 = v33;
                  v26 = v32;

                  if (v61)
                  {
                    v35 = sub_1000604F0();
                    v36 = objc_claimAutoreleasedReturnValue(v35);
                    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Deferring the update of app item as requested.", buf, 2u);
                    }

                    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
                    v38 = *(void **)(v37 + 40);
                    *(_QWORD *)(v37 + 40) = v28;
                    v39 = v28;

LABEL_32:
                    goto LABEL_33;
                  }
                }
                else
                {

                }
              }
              v40 = sub_1000604F0();
              v41 = objc_claimAutoreleasedReturnValue(v40);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543362;
                v63 = (const char *)v28;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Component built successfully: %{public}@", buf, 0xCu);
              }

              objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "addObject:", v28);
              goto LABEL_32;
            }
          }
LABEL_53:
          v52 = sub_1000604F0();
          v53 = objc_claimAutoreleasedReturnValue(v52);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            sub_1000BBB58(v53, v54, v55, v56, v57, v58, v59, v60);

          *a4 = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 0;
          goto LABEL_32;
        }
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "signedManifest"));
        v49 = objc_msgSend(v48, "isItemConfigurationProfile:", v7);

        v50 = sub_1000604F0();
        v13 = objc_claimAutoreleasedReturnValue(v50);
        v51 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        if (!v49)
        {
          if (!v51)
            goto LABEL_33;
          *(_WORD *)buf = 0;
          v14 = "Ignore unrecognized item in signed manifest.";
          v15 = v13;
          v16 = 2;
          goto LABEL_7;
        }
        if (v51)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Building config profile operation.", buf, 2u);
        }

        v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "buildConfigurationProfileOperationsWithIdentifier:", v9));
      }
    }
    v13 = v24;
    goto LABEL_17;
  }
  v12 = sub_1000604F0();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v63 = v9;
    v14 = "Skip already processed component: %{public}@";
    v15 = v13;
    v16 = 12;
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
  }
LABEL_33:

  objc_autoreleasePoolPop(v8);
}

uint64_t sub_10002F72C()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLocalMessageResponder sharedInstance](MSDLocalMessageResponder, "sharedInstance"));
  objc_msgSend(v0, "start");

  v1 = +[MSDTestInterface sharedInstance](MSDTestInterface, "sharedInstance");
  return 0;
}

uint64_t sub_10002F778()
{
  void *v0;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLocalEventStreamHandler sharedInstance](MSDLocalEventStreamHandler, "sharedInstance"));
  objc_msgSend(v0, "start");

  return 0;
}

uint64_t sub_10002F7B0()
{
  void *v0;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[MSDMailProcessor sharedInstance](MSDMailProcessor, "sharedInstance"));
  objc_msgSend(v0, "start");

  return 0;
}

uint64_t start(uint64_t a1, void **a2)
{
  void *v3;
  uint64_t v4;
  MSDLegacyMigrationHelper *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  void *v30;
  _BOOL4 v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  void *v37;
  void *v38;
  NSObject *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  NSObject *v44;
  void *v45;
  unsigned __int8 v47;
  void *v48;
  _QWORD block[4];
  id v50;
  id v51;
  uint64_t *v52;
  uint64_t *v53;
  BOOL v54;
  char v55;
  unsigned __int8 v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  void (*v63)(uint64_t);
  id v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  uint8_t buf[4];
  void *v70;

  v65 = 0;
  v66 = &v65;
  v67 = 0x2020000000;
  v68 = 0;
  v59 = 0;
  v60 = &v59;
  v61 = 0x3032000000;
  v62 = sub_10002FE64;
  v63 = sub_10002FE74;
  v64 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTargetDevice sharedInstance](MSDTargetDevice, "sharedInstance"));
  v4 = objc_claimAutoreleasedReturnValue(+[MSDHelperAgent sharedInstance](MSDHelperAgent, "sharedInstance"));
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
  v5 = objc_alloc_init(MSDLegacyMigrationHelper);
  v6 = objc_msgSend(v3, "isVerifiedDemoDevice");
  v7 = objc_msgSend(v3, "isOfflineMode");
  v8 = objc_msgSend(v3, "dcotaOfflineModeDevice");
  v9 = objc_msgSend(v3, "isVerifiedPOSDevice");
  v10 = objc_msgSend(v3, "isBetterTogetherDemo");
  v47 = v8;
  v11 = (void *)v4;
  v12 = sub_1000604F0();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *a2;
    *(_DWORD *)buf = 136446210;
    v70 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s started", buf, 0xCu);
  }

  v15 = sub_1000604F0();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(-[MSDLegacyMigrationHelper osVersionStr](v5, "osVersionStr"));
    *(_DWORD *)buf = 138543362;
    v70 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "OS version: %{public}@", buf, 0xCu);

  }
  v18 = sub_1000604F0();
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "demodVersion"));
    *(_DWORD *)buf = 138543362;
    v70 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "demod version: %{public}@", buf, 0xCu);

  }
  v21 = sub_1000604F0();
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "packageVersion"));
    *(_DWORD *)buf = 138543362;
    v70 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Package version: %{public}@", buf, 0xCu);

  }
  if (-[MSDLegacyMigrationHelper doPreSkyMigration](v5, "doPreSkyMigration"))
    objc_msgSend(v3, "clearUpNvramIfNeeded");
  if ((v6 | v9) == 1)
  {
    objc_msgSend(v3, "setupWorkFolderForBootTask");
    if (-[MSDLegacyMigrationHelper doPreSkyMigration](v5, "doPreSkyMigration"))
    {
      objc_msgSend(v3, "migrateDemoDeviceToDemoVolume");
      objc_msgSend(v3, "clearUpF200FootprintIfNeeded");
    }
    objc_msgSend(v3, "createMobileStoreDemoCache");
  }
  else if (v7)
  {
    objc_msgSend(v3, "setupFactoryDemoDeviceMetadataFolder");
  }
  v24 = objc_msgSend(v3, "mode");
  *((_DWORD *)v66 + 6) = v24;
  if (v24 - 1 <= 8)
  {
    v25 = os_transaction_create("Booted as a demo device");
    v26 = (void *)v60[5];
    v60[5] = v25;

  }
  if (v6)
  {
    if (-[MSDLegacyMigrationHelper doPreSkyMigration](v5, "doPreSkyMigration"))
      +[MSDBundleProgressTracker migratePreferencesFromLegacyDevicesIfNeeded](MSDBundleProgressTracker, "migratePreferencesFromLegacyDevicesIfNeeded");
    if (-[MSDLegacyMigrationHelper doPreSydneyMigration](v5, "doPreSydneyMigration"))
    {
      objc_msgSend(v3, "cleanUpPreferencesFile");
      if ((objc_msgSend(v3, "migrateCellularSupportFlag") & 1) == 0)
      {
        v27 = sub_1000604F0();
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          sub_1000BBBC0(v28);

      }
    }
    objc_msgSend(v48, "loadBundles");
  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[MSDKeychainManager sharedInstance](MSDKeychainManager, "sharedInstance"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "getItemForKey:", CFSTR("com.apple.mobilestoredemo.keychainItemID")));
  v31 = v30 != 0;

  if (v31)
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[MSDCryptoHandler sharedInstance](MSDCryptoHandler, "sharedInstance"));
    objc_msgSend(v32, "createSecretKeyIfNeeded");

    if (v10)
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPairedWatchProxy sharedInstance](MSDPairedWatchProxy, "sharedInstance"));
      objc_msgSend(v33, "bootstrap");

    }
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDemoPeerPairingManager sharedInstance](MSDDemoPeerPairingManager, "sharedInstance"));
    objc_msgSend(v34, "restorePairedPeersDataIfNeeded");

    v35 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTestPreferences sharedInstance](MSDTestPreferences, "sharedInstance"));
    v36 = objc_msgSend(v35, "enablePeerDemoService");

    if (v36)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDemoPeerResponder sharedInstance](MSDDemoPeerResponder, "sharedInstance"));
      objc_msgSend(v37, "start");

    }
  }
  if (v6)
    -[MSDLegacyMigrationHelper saveOSVerionAfterMigration](v5, "saveOSVerionAfterMigration");
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[MSDWorkQueueSet sharedInstance](MSDWorkQueueSet, "sharedInstance"));
  v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "demoUpdateQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002FE7C;
  block[3] = &unk_10013E348;
  v40 = v3;
  v50 = v40;
  v52 = &v65;
  v54 = v31;
  v55 = v9;
  v41 = v11;
  v51 = v41;
  v53 = &v59;
  v56 = v47;
  v57 = v6;
  v58 = v7;
  dispatch_async(v39, block);

  v42 = +[F13Server sharedInstance](F13Server, "sharedInstance");
  v43 = sub_1000604F0();
  v44 = objc_claimAutoreleasedReturnValue(v43);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Starting the xpc and mail services as soon as device boot up.", buf, 2u);
  }

  sub_10002F7B0();
  sub_10002F72C();
  sub_10002F778();
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
  objc_msgSend(v45, "run");

  _Block_object_dispose(&v59, 8);
  _Block_object_dispose(&v65, 8);
  return 0;
}

void sub_10002FDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002FE64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002FE74(uint64_t a1)
{

}

void sub_10002FE7C(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  int v15;
  void *v16;
  BOOL v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  void *v31;
  const char *v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  NSObject *v40;
  unsigned __int8 v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned int v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  unsigned int v57;
  id v58;
  NSObject *v59;
  _BOOL4 v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  void *v66;
  NSObject *v67;
  id v68;
  NSObject *v69;
  int v70;
  int v71;
  int v72;
  void *v73;
  void *v74;
  unsigned int v75;
  id v76;
  NSObject *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned int v94;
  id v95;
  NSObject *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  id v107;
  id v108;
  NSObject *v109;
  id v110;
  void *v111;
  _QWORD block[4];
  id v113;
  _QWORD v114[4];
  id v115;
  uint8_t buf[4];
  _BYTE v117[10];
  __int16 v118;
  int v119;

  v2 = objc_msgSend(*(id *)(a1 + 32), "allowSnapshotMode");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDemoUpdateStatusHub sharedInstance](MSDDemoUpdateStatusHub, "sharedInstance"));
  v4 = objc_claimAutoreleasedReturnValue(+[MSDDemoUpdateController sharedInstance](MSDDemoUpdateController, "sharedInstance"));
  v5 = sub_1000604F0();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v117 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "DeviceMode = %d. Checking startup tasks...", buf, 8u);
  }
  v111 = (void *)v4;

  if (*(_BYTE *)(a1 + 64))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLanguageAndRegionManager sharedInstance](MSDLanguageAndRegionManager, "sharedInstance"));
    objc_msgSend(v8, "restoreDeviceLanguageAndRegionIfNeeded");

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MSDBluetoothHelper sharedInstance](MSDBluetoothHelper, "sharedInstance"));
    objc_msgSend(v9, "restoreBTPairingRecordIfNeeded");

    objc_msgSend(*(id *)(a1 + 32), "configureNetworkInterface");
    objc_msgSend(*(id *)(a1 + 32), "waitForNetworkReachability");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MSDS3UploadHandler sharedInstance](MSDS3UploadHandler, "sharedInstance"));
    objc_msgSend(v10, "uploadDemoLogsIfNeeded");

    objc_msgSend(*(id *)(a1 + 32), "registerCAHearbeatActivity");
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
  objc_msgSend(v3, "registerDemoUpdateStatusDelegate:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
  objc_msgSend(v3, "registerDemoUpdateStatusDelegate:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getSavedRequest"));
  v14 = objc_msgSend(*(id *)(a1 + 32), "getSavedFlag");
  v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v15 == 4)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
    objc_msgSend(v16, "updateStage:", 201);

    v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  }
  v17 = v15 == 2 || v15 == 4;
  if (!v17
    && (v15 != 7
     || (v22 = (void *)objc_claimAutoreleasedReturnValue(+[MSDOSUpdaterController sharedInstance](MSDOSUpdaterController, "sharedInstance")), v23 = objc_msgSend(v22, "isOSUpdateInProgress"), v22, (v23 & 1) != 0))|| (v18 = objc_msgSend(*(id *)(a1 + 32), "getSavedCompleteByInterval"), v19 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDemoUpdateTimeKeeper sharedInstance](MSDDemoUpdateTimeKeeper, "sharedInstance")), v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "setCompletionTime:reserveTimeForCleanup:", v18, 1)), v19, !v20))
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
      || (v24 = *(unsigned __int8 *)(a1 + 65), *(_BYTE *)(a1 + 65)))
    {
      objc_msgSend(*(id *)(a1 + 32), "holdPowerAssertion");
      v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    }
    if (v24 == 5)
      v25 = 0;
    else
      v25 = v2;
    if (v25 == 1)
      objc_msgSend(*(id *)(a1 + 32), "manageDeviceSnapshot:", CFSTR("DeleteSnapshot"));
    if (objc_msgSend(*(id *)(a1 + 32), "snapshotRevertFlagged"))
    {
      objc_msgSend(*(id *)(a1 + 32), "resetSystemTimeCache");
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAccountManager sharedInstance](MSDAccountManager, "sharedInstance"));
      objc_msgSend(v26, "forceiCloudKeychainToSyncWithServer");

      objc_msgSend(*(id *)(a1 + 32), "saveSnapshotRevertFlagged:", 0);
    }
    switch(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      case 0:
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedBundleInstallState"));
        v34 = objc_msgSend(v33, "isEqualToString:", CFSTR("cachedBundleInstallWaitMigration"));

        if (v34)
        {
          v35 = os_transaction_create("com.apple.MobileStoreDemo.OfflineModeDataMigration");
          v36 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          v37 = *(void **)(v36 + 40);
          *(_QWORD *)(v36 + 40) = v35;

          v38 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
          objc_msgSend(v38, "startFullScreenUIWith:allowCancel:disableIdleTimer:", CFSTR("CACHED_BUNDLE_INSTALL"), 1, 1);

          v39 = sub_1000604F0();
          v40 = objc_claimAutoreleasedReturnValue(v39);
          v31 = v111;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Data Migration in process, waiting to finish...", buf, 2u);
          }

          v41 = objc_msgSend(v111, "migrateDataWithBlockingUI:startMigration:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), 0);
          v42 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLanguageAndRegionManager sharedInstance](MSDLanguageAndRegionManager, "sharedInstance"));
          objc_msgSend(v42, "restoreDeviceLanguageAndRegionIfNeeded");

          objc_msgSend(*(id *)(a1 + 40), "clearStagedDeviceAfterUpdateProcess");
          objc_msgSend(*(id *)(a1 + 32), "setCachedBundleInstallState:", CFSTR("cachedBundleInstallDone"));
          if (!*(_BYTE *)(a1 + 66))
          {
            objc_msgSend(*(id *)(a1 + 32), "cleanupDummyPreferenceFile");
            objc_msgSend(*(id *)(a1 + 32), "destroyWorkFolderForBootTask");
          }
          v43 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          v44 = *(void **)(v43 + 40);
          *(_QWORD *)(v43 + 40) = 0;

          v45 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
          objc_msgSend(v45, "stopFullScreenUI:", 0);

          if ((v41 & 1) == 0)
            goto LABEL_96;
        }
        else
        {
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedBundleInstallState"));
          v65 = objc_msgSend(v64, "isEqualToString:", CFSTR("cachedBundleInstallInProgress"));

          v31 = v111;
          if (v65)
          {
            v66 = (void *)objc_claimAutoreleasedReturnValue(+[MSDWorkQueueSet sharedInstance](MSDWorkQueueSet, "sharedInstance"));
            v67 = objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "demoUpdateQueue"));
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100030C54;
            block[3] = &unk_10013D868;
            v113 = *(id *)(a1 + 32);
            dispatch_async(v67, block);

            v53 = v113;
            goto LABEL_68;
          }
        }
        v68 = sub_1000604F0();
        v69 = objc_claimAutoreleasedReturnValue(v68);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          v70 = *(unsigned __int8 *)(a1 + 67);
          v71 = *(unsigned __int8 *)(a1 + 68);
          v72 = *(unsigned __int8 *)(a1 + 66);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v117 = v70;
          *(_WORD *)&v117[4] = 1024;
          *(_DWORD *)&v117[6] = v71;
          v118 = 1024;
          v119 = v72;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Device is DCOTA device: %{BOOL}d; is Offline Mode Device: %{BOOL}d; is DCOTA Offline Mode Device:%{BOOL}d",
            buf,
            0x14u);
        }

        if ((*(_BYTE *)(a1 + 67) || *(_BYTE *)(a1 + 66)) && !*(_BYTE *)(a1 + 64))
        {
          v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getDemoEnrollmentFlag"));

          v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getDemoEnrollmentFlag"));
          v75 = objc_msgSend(v74, "isEqualToString:", CFSTR("enrollmentSuccess"));

          v76 = sub_1000604F0();
          v77 = objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v117 = v73 != 0;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v75;
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Device did attempt enrollment:  %{BOOL}d; success: %{BOOL}d",
              buf,
              0xEu);
          }

          v78 = v73 ? v75 : 1;
          if ((v78 & 1) == 0)
          {
            v79 = os_transaction_create("Retry enrolling");
            v80 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v81 = *(void **)(v80 + 40);
            *(_QWORD *)(v80 + 40) = v79;

            v30 = objc_claimAutoreleasedReturnValue(+[MSDFindMyHub sharedInstance](MSDFindMyHub, "sharedInstance"));
            -[NSObject handleEnrollmentRetryUponFirstLaunch](v30, "handleEnrollmentRetryUponFirstLaunch");
            goto LABEL_95;
          }
        }
        goto LABEL_96;
      case 1:
        if (objc_msgSend(*(id *)(a1 + 32), "waitingForCommand"))
        {
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
          objc_msgSend(v46, "startFullScreenUIWith:allowCancel:", CFSTR("IN_PROGRESS"), 0);

          objc_msgSend(*(id *)(a1 + 32), "startWaitingForCommandTimer");
          v47 = (void *)objc_claimAutoreleasedReturnValue(+[MSDMailProcessor sharedInstance](MSDMailProcessor, "sharedInstance"));
          objc_msgSend(v47, "setWaitingForCommand:", 1);
          goto LABEL_42;
        }
        v82 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
        objc_msgSend(v82, "updateStage:", 100);

        if (v13)
          objc_msgSend(v3, "demoUpdateCompleted:", v13);
        objc_msgSend(*(id *)(a1 + 32), "deleteOperationRequest");
        goto LABEL_64;
      case 2:
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
        objc_msgSend(v48, "startFullScreenUIWith:allowCancel:", CFSTR("IN_PROGRESS"), 1);

        if ((v14 & 4) != 0)
        {
          if ((objc_msgSend(*(id *)(a1 + 32), "switchModeImmediately:", 4) & 1) == 0)
          {
            v83 = sub_1000604F0();
            v30 = objc_claimAutoreleasedReturnValue(v83);
            v31 = v111;
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              sub_1000BBC68(v30, v84, v85, v86, v87, v88, v89, v90);
            goto LABEL_95;
          }
        }
        else
        {
          if ((v14 & 8) != 0)
          {
            v95 = sub_1000604F0();
            v96 = objc_claimAutoreleasedReturnValue(v95);
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)v117 = 5;
              *(_WORD *)&v117[4] = 1024;
              *(_DWORD *)&v117[6] = 2;
              _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "Switch to mode %d from mode %d to complete snapshot revert.", buf, 0xEu);
            }

            v31 = v111;
            if ((objc_msgSend(*(id *)(a1 + 32), "switchModeImmediately:", 5) & 1) != 0)
              goto LABEL_96;
            v97 = sub_1000604F0();
            v30 = objc_claimAutoreleasedReturnValue(v97);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              sub_1000BBBFC(v30, v98, v99, v100, v101, v102, v103, v104);
            goto LABEL_95;
          }
          objc_msgSend(*(id *)(a1 + 32), "deleteConfigurationApp");
          if (objc_msgSend(*(id *)(a1 + 32), "backgroundDownloadState") == (id)1
            || objc_msgSend(*(id *)(a1 + 32), "backgroundDownloadState") == (id)2)
          {
            objc_msgSend(*(id *)(a1 + 32), "setBackgroundDownloadState:", 4);
            objc_msgSend(*(id *)(a1 + 32), "setBackgroundDownloadActive:", 0);
          }
          v49 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
          if ((objc_msgSend(v49, "macOS") & 1) != 0)
          {
            v50 = 1;
          }
          else
          {
            v105 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
            v50 = objc_msgSend(v105, "iOS");

          }
          if (v50 && v14 == 2)
          {
            v106 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
            objc_msgSend(v106, "updateStage:", 17);

            v47 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPricingUpdateController sharedInstance](MSDPricingUpdateController, "sharedInstance"));
            objc_msgSend(v47, "setSwitchModeAfterCompletion:", 1);
LABEL_42:

            goto LABEL_64;
          }
          if ((v14 & 1) != 0)
          {
            v31 = v111;
            if ((objc_msgSend(v111, "updateDemoContent") & 1) != 0)
              goto LABEL_96;
            v107 = sub_1000604F0();
            v30 = objc_claimAutoreleasedReturnValue(v107);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              v32 = "Device is busy?";
LABEL_32:
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v32, buf, 2u);
            }
LABEL_95:

LABEL_96:
            v20 = 0;
            goto LABEL_97;
          }
        }
LABEL_64:
        v20 = 0;
        goto LABEL_65;
      case 3:
        v108 = sub_1000604F0();
        v109 = objc_claimAutoreleasedReturnValue(v108);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "kMSDModePreRebootDataStaged is obsoleted in Azul so we should NOT reach here!", buf, 2u);
        }

        v110 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, CFSTR("kMSDModePreRebootDataStaged is obsoleted in Azul"), 0));
        objc_exception_throw(v110);
      case 4:
        if ((v14 & 4) != 0)
        {
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
          objc_msgSend(v91, "startFullScreenUIWith:allowCancel:disableIdleTimer:", CFSTR("IN_PROGRESS"), 1, 1);

          v31 = v111;
          if (objc_msgSend(v111, "continueToUpdateAccountContent"))
            objc_msgSend(*(id *)(a1 + 32), "switchModeImmediately:", 5);
        }
        else
        {
          v31 = v111;
          if (objc_msgSend(v111, "migrateDataWithBlockingUI:startMigration:", 4, 1))
          {
            objc_msgSend(*(id *)(a1 + 32), "configureNetworkInterface");
            objc_msgSend(*(id *)(a1 + 32), "waitForNetworkReachability");
            objc_msgSend(*(id *)(a1 + 40), "clearStagedDeviceAfterUpdateProcess");
            v51 = (void *)objc_claimAutoreleasedReturnValue(+[MSDContentCacheManager sharedInstance](MSDContentCacheManager, "sharedInstance"));
            objc_msgSend(v51, "clearCache");

            objc_msgSend(*(id *)(a1 + 32), "cleanUpBackgroundState:", 1);
            objc_msgSend(v111, "setIOSSpecificSettings");
            objc_msgSend(v111, "setAutomatedDeviceGroupStoreID");
            if (objc_msgSend(v111, "continueToUpdateDemoContent"))
            {
              v52 = *(void **)(a1 + 32);
              v114[0] = _NSConcreteStackBlock;
              v114[1] = 3221225472;
              v114[2] = sub_100030C28;
              v114[3] = &unk_10013E320;
              v115 = v52;
              objc_msgSend(v115, "waitForBuddy:", v114);
              v53 = v115;
LABEL_68:

            }
          }
        }
        goto LABEL_96;
      case 5:
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
        objc_msgSend(v54, "updateStage:", 100);

        if (v13)
          objc_msgSend(v3, "demoUpdateCompleted:", v13);
        objc_msgSend(*(id *)(a1 + 32), "deleteOperationRequestAndQuitHelper");
        objc_msgSend(*(id *)(a1 + 32), "setupCoreAnalyticsLogsUploadTimer");
        objc_msgSend(*(id *)(a1 + 32), "setupStoreHoursManager");
        objc_msgSend(*(id *)(a1 + 32), "setupSnapshotRevertTimer");
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDeviceDataCollector sharedInstance](MSDDeviceDataCollector, "sharedInstance"));
        objc_msgSend(v55, "setupCollectAppUsageDataTimer");

        v56 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAccountManager sharedInstance](MSDAccountManager, "sharedInstance"));
        objc_msgSend(v56, "setupTrustedPeerChangeNotificationObserver");

        v57 = objc_msgSend(*(id *)(a1 + 32), "backgroundDownloadActive");
        v58 = sub_1000604F0();
        v59 = objc_claimAutoreleasedReturnValue(v58);
        v60 = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
        if (v57)
        {
          v31 = v111;
          if (v60)
          {
            v61 = objc_msgSend(*(id *)(a1 + 32), "backgroundDownloadState");
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)v117 = v61;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Background download enabled and its status is:%lu", buf, 0xCu);
          }

          v30 = objc_claimAutoreleasedReturnValue(+[MSDBackgroundDownload sharedInstance](MSDBackgroundDownload, "sharedInstance"));
          -[NSObject kickOffBackgroundDownload](v30, "kickOffBackgroundDownload");
          goto LABEL_95;
        }
        v31 = v111;
        if (v60)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Background download not enabled.", buf, 2u);
        }

        goto LABEL_96;
      case 6:
      case 8:
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
        objc_msgSend(v27, "startFullScreenUIWith:allowCancel:", CFSTR("IN_PROGRESS"), 0);

        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 6)
          v28 = 0;
        else
          v28 = 9;
        objc_msgSend(*(id *)(a1 + 32), "switchModeImmediately:", v28);
        goto LABEL_64;
      case 7:
        v62 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "backgroundBundle"));
        if (objc_msgSend(v63, "bundleState") == 1)
        {

          v31 = v111;
        }
        else
        {
          v92 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
          v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "backgroundBundle"));
          v94 = objc_msgSend(v93, "bundleState");

          v31 = v111;
          if (v94 != 2)
            goto LABEL_94;
        }
        objc_msgSend(*(id *)(a1 + 32), "setBackgroundDownloadState:", 4);
        objc_msgSend(*(id *)(a1 + 32), "setBackgroundDownloadActive:", 0);
LABEL_94:
        v30 = objc_claimAutoreleasedReturnValue(+[MSDOSUpdaterController sharedInstance](MSDOSUpdaterController, "sharedInstance"));
        -[NSObject startOSUpdate](v30, "startOSUpdate");
        goto LABEL_95;
      default:
        v29 = sub_1000604F0();
        v30 = objc_claimAutoreleasedReturnValue(v29);
        v31 = v111;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          goto LABEL_95;
        *(_WORD *)buf = 0;
        v32 = "Unknown demo install state";
        goto LABEL_32;
    }
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDemoUpdateStatusHub sharedInstance](MSDDemoUpdateStatusHub, "sharedInstance"));
  objc_msgSend(v21, "demoUpdateFailed:", v20);

  if (objc_msgSend(v20, "code") == (id)3727741184)
    objc_msgSend(*(id *)(a1 + 32), "forceSwitchToDemoModeIfNeeded");
LABEL_65:
  v31 = v111;
LABEL_97:

}

id sub_100030C28(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "markContentInstallingInstalled");
  return objc_msgSend(*(id *)(a1 + 32), "switchModeImmediately:", 5);
}

id sub_100030C54(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Cached bundle install in progress, resuming cached bundle install", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "kickOffCachedBundleInstall");
}

void sub_100032758(id a1)
{
  MSDCache *v1;
  void *v2;

  v1 = objc_alloc_init(MSDCache);
  v2 = (void *)qword_100175230;
  qword_100175230 = (uint64_t)v1;

}

void sub_1000329A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100032A60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100032B60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100032C34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100032D58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100032F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000330D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000331FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000332D0(id a1)
{
  MSDLocalMessageResponder *v1;
  void *v2;

  v1 = objc_alloc_init(MSDLocalMessageResponder);
  v2 = (void *)qword_100175240;
  qword_100175240 = (uint64_t)v1;

}

void sub_1000338C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  xpc_type_t type;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  NSObject *v15;
  _xpc_connection_s *v16;
  id v17;
  NSObject *v18;
  const char *v19;
  id v20;
  _BOOL4 v21;
  void *v22;
  _xpc_connection_s *v23;
  __int128 v24;
  void (*v25)(uint64_t, void *);
  void *v26;
  id v27;

  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcListener"));
  v5 = v3;
  v6 = sub_1000605D0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_1000BC388();

  type = xpc_get_type(v5);
  v9 = sub_1000605D0();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    sub_1000BC35C();

  if (type != (xpc_type_t)&_xpc_type_connection)
  {
    if (v5 == &_xpc_error_termination_imminent)
    {
      v17 = sub_1000605D0();
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_18;
      LOWORD(v24) = 0;
      v19 = "XPC connection will be closed";
    }
    else
    {
      v20 = sub_1000605D0();
      v18 = objc_claimAutoreleasedReturnValue(v20);
      v21 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if (v5 != &_xpc_error_connection_invalid)
      {
        if (v21)
        {
          LODWORD(v24) = 136446210;
          *(_QWORD *)((char *)&v24 + 4) = xpc_dictionary_get_string(v5, _xpc_error_key_description);
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Got XPC error on listener connection: %{public}s", (uint8_t *)&v24, 0xCu);
        }

        v22 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLocalMessageResponder sharedInstance](MSDLocalMessageResponder, "sharedInstance"));
        v23 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "xpcListener"));
        xpc_connection_cancel(v23);

        exit(1);
      }
      if (!v21)
      {
LABEL_18:

        exit(0);
      }
      LOWORD(v24) = 0;
      v19 = "No XPC connection, exiting";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v24, 2u);
    goto LABEL_18;
  }
  v11 = sub_1000605D0();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    sub_1000BC330();

  v13 = v5;
  v14 = sub_1000605D0();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v24) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Start to deal with new connection", (uint8_t *)&v24, 2u);
  }

  *(_QWORD *)&v24 = _NSConcreteStackBlock;
  *((_QWORD *)&v24 + 1) = 3221225472;
  v25 = sub_100038D9C;
  v26 = &unk_10013E3B0;
  v27 = v13;
  v16 = (_xpc_connection_s *)v13;
  xpc_connection_set_event_handler(v16, &v24);
  xpc_connection_resume(v16);

}

void sub_1000373D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003762C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10003763C(uint64_t a1)
{

}

void sub_100037644(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  id obj;
  uint8_t buf[4];
  const char *v15;

  v2 = sub_1000605D0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v15 = "-[MSDLocalMessageResponder handleMessage:from:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s: waiting for buddy to quit.", buf, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "waitForBuddyWithTimeout");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
  objc_msgSend(v4, "startFullScreenUIWith:allowCancel:", CFSTR("IN_PROGRESS"), 1);

  v5 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  obj = *(id *)(v10 + 40);
  v11 = objc_msgSend(v5, "enrollForDeviceName:pairingCredential:hubHostName:hubPort:error:", v6, v7, v8, v9, &obj);
  objc_storeStrong((id *)(v10 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v11;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)
    || (objc_msgSend(*(id *)(a1 + 32), "setDemoEnrollmentFlag:", CFSTR("enrollmentSuccess")),
        !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)))
  {
    objc_msgSend(*(id *)(a1 + 32), "setDemoEnrollmentFlag:", CFSTR("enrollmentFailed"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
    objc_msgSend(v12, "stopFullScreenUI:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));

  }
}

void sub_1000377C8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
  objc_msgSend(v2, "startFullScreenUIWith:allowCancel:", CFSTR("IN_PROGRESS"), 1);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDemoUpdateTimeKeeper sharedInstance](MSDDemoUpdateTimeKeeper, "sharedInstance"));
  v4 = objc_msgSend(v3, "setCompletionTime:reserveTimeForCleanup:", *(unsigned int *)(a1 + 48), 1);

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "updateDemoContent");
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v5 = sub_1000604F0();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device is busy?", v7, 2u);
    }

  }
}

void sub_1000378A8(uint64_t a1)
{
  xpc_object_t reply;
  id v3;
  NSObject *v4;
  uint8_t v5[16];

  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (!reply)
    reply = xpc_dictionary_create(0, 0, 0);
  if (objc_msgSend(*(id *)(a1 + 40), "isContentFrozen"))
  {
    objc_msgSend(*(id *)(a1 + 40), "manageDeviceSnapshot:", CFSTR("CommitSnapshot"));
  }
  else
  {
    v3 = sub_1000604F0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Snapshot commit not allowed in current state.", v5, 2u);
    }

  }
  xpc_dictionary_set_BOOL(reply, "Acknowledged", 1);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 48), reply);

}

id sub_10003797C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  const char *string;
  const char *v9;
  const char *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  unint64_t i;
  void *v21;
  void *v22;
  const char *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  unsigned __int8 v29;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id obj;
  uint8_t buf[4];
  const char *v37;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getDemoEnrollmentFlag"));

  if (objc_msgSend(*(id *)(a1 + 32), "isVerifiedDemoDevice"))
  {
    if (!v2)
    {
      objc_msgSend(*(id *)(a1 + 32), "setupDemoDeviceMetadataFolder");
      objc_msgSend(*(id *)(a1 + 32), "setDemoEnrollmentFlag:", CFSTR("enrollmentStarted"));
    }
  }
  else if (objc_msgSend(*(id *)(a1 + 32), "isVerifiedPOSDevice"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setupDemoDeviceMetadataFolder");
    objc_msgSend(*(id *)(a1 + 32), "setPOSDeviceFlag");
  }
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), *(xpc_object_t *)(a1 + 48));
  if (objc_msgSend(*(id *)(a1 + 32), "isVerifiedDemoDevice"))
  {
    if (v2)
    {
      v31 = sub_1000605D0();
      v17 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v37 = "DemoPrepare";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Skipping %s request because it already ran once", buf, 0xCu);
      }
      goto LABEL_35;
    }
    objc_msgSend(*(id *)(a1 + 32), "setDemoDeviceFlag");
    objc_msgSend(*(id *)(a1 + 32), "registerCAHearbeatActivity");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDKeychainManager sharedInstance](MSDKeychainManager, "sharedInstance"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "getItemForKey:", CFSTR("com.apple.mobilestoredemo.keychainItemID")));

    if (!v4)
    {
      v5 = sub_1000605D0();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v37 = "-[MSDLocalMessageResponder handleMessage:from:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s: waiting for buddy to quit.", buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 32), "waitForBuddyWithTimeout");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
      objc_msgSend(v7, "startFullScreenUIWith:allowCancel:", CFSTR("IN_PROGRESS"), 0);

      string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 56), "SSID");
      if (string)
      {
        v9 = string;
        v10 = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 56), "Password");
        if (v10)
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
        else
          v11 = 0;
        v18 = sub_1000605D0();
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v37 = v9;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Setting up WiFi: ssid = %{public}s", buf, 0xCu);
        }

        for (i = 4; i > 1; --i)
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[MSDWiFiHelper sharedInstance](MSDWiFiHelper, "sharedInstance"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(v21, "configureWiFi:password:", v22, v11);

          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
            goto LABEL_26;
          sleep(5u);
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
        {
LABEL_26:
          objc_msgSend(*(id *)(a1 + 32), "waitForNetworkReachability");

          goto LABEL_27;
        }
        v32 = objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727741072, CFSTR("Failed to configure WiFi.")));
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v34 = *(void **)(v33 + 40);
        *(_QWORD *)(v33 + 40) = v32;

      }
      else
      {
LABEL_27:
        v23 = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 56), "PreferredStoreID");
        if (v23)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23));
          objc_msgSend(*(id *)(a1 + 32), "setPreferredStoreID:", v24);

        }
        v25 = sub_1000605D0();
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v37 = "-[MSDLocalMessageResponder handleMessage:from:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%s: requesting discoverAndEnrollWithHub.", buf, 0xCu);
        }

        v27 = (void *)objc_claimAutoreleasedReturnValue(+[MSDFindMyHub sharedInstance](MSDFindMyHub, "sharedInstance"));
        v28 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        obj = *(id *)(v28 + 40);
        v29 = objc_msgSend(v27, "discoverAndEnrollWithHub:", &obj);
        objc_storeStrong((id *)(v28 + 40), obj);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v29;

        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
          objc_msgSend(*(id *)(a1 + 32), "setDemoEnrollmentFlag:", CFSTR("enrollmentSuccess"));
      }
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      {
        objc_msgSend(*(id *)(a1 + 32), "setDemoEnrollmentFlag:", CFSTR("enrollmentFailed"));
        v17 = objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
        -[NSObject stopFullScreenUI:](v17, "stopFullScreenUI:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
LABEL_35:

      }
    }
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTargetDevice sharedInstance](MSDTargetDevice, "sharedInstance"));
    v13 = objc_msgSend(v12, "isVerifiedPOSDevice");

    if (!v13)
    {
      v15 = sub_1000605D0();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "This device is not a demo device.", buf, 2u);
      }

      v17 = objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
      -[NSObject startFullScreenUIWith:allowCancel:](v17, "startFullScreenUIWith:allowCancel:", CFSTR("NOT_VERIFIED"), 1);
      goto LABEL_35;
    }
    v14 = +[F13Server sharedInstance](F13Server, "sharedInstance");
  }
  return objc_msgSend(*(id *)(a1 + 64), "setDemoPrepareInProgress:", 0);
}

intptr_t sub_100037EE0(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100037EE8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "kickOffCachedBundleInstall");
}

void sub_100037EF0(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "switchModeImmediately:", 7);
  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSDOSUpdaterController sharedInstance](MSDOSUpdaterController, "sharedInstance"));
  objc_msgSend(v1, "startOSUpdate");

}

id sub_100037F30(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "kickOffCachedBundleInstall");
  return objc_msgSend(*(id *)(a1 + 40), "setDemoPrepareInProgress:", 0);
}

uint64_t sub_100037F5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v12;
  unsigned __int8 v13;
  int v14;
  const char *v15;

  v4 = a3;
  if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_string)
    goto LABEL_14;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (!strncmp(string_ptr, "CurrentWiFiSSID", 0x10uLL))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSDWiFiHelper sharedInstance](MSDWiFiHelper, "sharedInstance"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getCurrentWiFiSsid"));
  }
  else
  {
    if (strncmp(string_ptr, "PersistentWiFiSSID", 0x13uLL))
    {
      if (!strncmp(string_ptr, "EmbeddedSIMInstalled", 0x15uLL))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[MSDCellularHelper sharedInstance](MSDCellularHelper, "sharedInstance"));
        v13 = objc_msgSend(v12, "embeddedSIMInstalled");

        xpc_dictionary_set_BOOL(*(xpc_object_t *)(a1 + 32), string_ptr, v13);
      }
      else if (!strncmp(string_ptr, "ActiveNetworkInterface", 0x17uLL))
      {
        xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), string_ptr, (uint64_t)objc_msgSend(*(id *)(a1 + 40), "fetchActiveNetworkInterface"));
      }
      else
      {
        v6 = sub_1000604F0();
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v14 = 136446210;
          v15 = string_ptr;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received unrecognized key for network info: %{public}s", (uint8_t *)&v14, 0xCu);
        }

      }
      goto LABEL_14;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSDWiFiHelper sharedInstance](MSDWiFiHelper, "sharedInstance"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getPersistentWiFiSsid"));
  }
  v10 = (void *)v9;

  if (v10)
    xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 32), string_ptr, (const char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"));

LABEL_14:
  return 1;
}

void sub_1000384B4(uint64_t a1, BOOL a2, BOOL a3, uint64_t a4)
{
  xpc_object_t xdict;

  xdict = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  xpc_dictionary_set_BOOL(xdict, "Result", a4 == 0);
  if (!a4)
  {
    xpc_dictionary_set_BOOL(xdict, "Eligible", a2);
    xpc_dictionary_set_BOOL(xdict, "ShowUI", a3);
  }
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), xdict);

}

void sub_100038600(uint64_t a1, uint64_t a2)
{
  xpc_object_t message;

  message = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  xpc_dictionary_set_BOOL(message, "Result", a2 == 0);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), message);

}

void sub_100038824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100038860(_QWORD *a1, void *a2, void *a3)
{
  void *v5;
  char v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = a3 == 0;
  if (a2)
  {
    v5 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
    v6 = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24);
    v12 = a3;
    v7 = a2;
    xpc_dictionary_set_BOOL(v5, "Result", v6);
    v8 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
    v9 = objc_retainAutorelease(v7);
    v10 = objc_msgSend(v9, "bytes");
    v11 = objc_msgSend(v9, "length");

    xpc_dictionary_set_data(v8, "ResultData", v10, (size_t)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1[6] + 8) + 40), *(xpc_object_t *)(*(_QWORD *)(a1[5] + 8) + 40));

  }
}

void sub_100038D9C(uint64_t a1, void *a2)
{
  id v3;
  xpc_type_t type;
  id v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  NSObject *v15;
  uint8_t v16[16];
  uint8_t buf[16];

  v3 = a2;
  type = xpc_get_type(v3);
  v5 = sub_1000605D0();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_1000BC35C();

  v7 = sub_1000605D0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (v9)
      sub_1000BCC78();

    if (v3 == &_xpc_error_connection_invalid)
    {
      v14 = sub_1000605D0();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "XPC disconnected by client", buf, 2u);
      }

      v12 = objc_claimAutoreleasedReturnValue(+[MSDLocalMessageResponder sharedInstance](MSDLocalMessageResponder, "sharedInstance"));
      -[NSObject lostClientConnection:](v12, "lostClientConnection:", *(_QWORD *)(a1 + 32));
    }
    else
    {
      if (v3 != &_xpc_error_termination_imminent)
        goto LABEL_10;
      v13 = sub_1000605D0();
      v12 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "XPC connection will be closed", v16, 2u);
      }
    }
  }
  else
  {
    if (v9)
      sub_1000BCCF8();

    if (type != (xpc_type_t)&_xpc_type_dictionary)
      sub_1000BCCD0();
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLocalMessageResponder sharedInstance](MSDLocalMessageResponder, "sharedInstance"));
    objc_msgSend(v10, "handleMessage:from:", v3, *(_QWORD *)(a1 + 32));

    v11 = sub_1000605D0();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      sub_1000BCCA4();
  }

LABEL_10:
}

void sub_100038F80(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_10003970C(id a1)
{
  MSDAirPlayAssistedSender *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAirPlayAssistedSender);
  v2 = (void *)qword_100175258;
  qword_100175258 = (uint64_t)v1;

}

void sub_100039978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100039990(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "state");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result == (id)1;
  return result;
}

void sub_100039BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100039C00(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_activateSenderUsingParameters:discoveryMode:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_10003A250(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleTimeoutTimerFired");
}

void sub_10003A558(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_NSStringFromSenderState:", objc_msgSend(*(id *)(a1 + 32), "state")));
    v28 = 138543362;
    v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MSDAirPlayAssistedSender: Received AV output device changed notification when in state: %{public}@", (uint8_t *)&v28, 0xCu);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "state") != (id)1)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "state") == (id)2)
      objc_msgSend(*(id *)(a1 + 32), "_stopActivation");
    v5 = objc_msgSend(*(id *)(a1 + 32), "_isAirPlayStreaming");
    v6 = *(void **)(a1 + 32);
    if (v5)
    {
      objc_msgSend(v6, "setState:", 3);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAudioController sharedInstance](MSDAudioController, "sharedInstance"));
      v8 = objc_msgSend(v7, "addRouteToSystemMusicForSpeaker");

      if ((v8 & 1) != 0)
        return;
      v9 = sub_1000604F0();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1000BCFD4(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      objc_msgSend(v6, "setState:", 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAudioController sharedInstance](MSDAudioController, "sharedInstance"));
      v19 = objc_msgSend(v18, "removeRouteToSystemMusicForSpeaker");

      if ((v19 & 1) != 0)
        return;
      v20 = sub_1000604F0();
      v10 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1000BD004(v10, v21, v22, v23, v24, v25, v26, v27);
    }

  }
}

void sub_10003AB14(id a1)
{
  MSDPricingUpdateController *v1;
  void *v2;

  v1 = objc_alloc_init(MSDPricingUpdateController);
  v2 = (void *)qword_100175260;
  qword_100175260 = (uint64_t)v1;

}

void sub_10003ACC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10003B0E4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "heartBeatMonitor"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "heartBeatMonitor"));
    objc_msgSend(v3, "invalidate");

  }
  return objc_msgSend(*(id *)(a1 + 32), "setHeartBeatMonitor:", 0);
}

void sub_10003B1CC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  _DWORD v5[2];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = 120;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting timer for Pricing (will trigger in %d seconds).", (uint8_t *)v5, 8u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "pricingUpdateTimeOut:", 0, 0, 120.0));
  objc_msgSend(*(id *)(a1 + 32), "setHeartBeatMonitor:", v4);

}

id sub_10003CA04()
{
  if (qword_100175278 != -1)
    dispatch_once(&qword_100175278, &stru_10013E5E8);
  return (id)qword_100175270;
}

void sub_10003CA44(id a1)
{
  void *v1;
  unsigned int v2;
  NSArray *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
  v2 = objc_msgSend(v1, "watchOS");

  if (v2)
  {
    v3 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("/var/mobile/Demo.mov"), CFSTR("/var/mobile/Demo.plist"), CFSTR("/var/mobile/Media"), CFSTR("/var/mobile/Library/AddressBook"), CFSTR("/var/mobile/Library/Alarms"), CFSTR("/var/mobile/Library/Calendar"), CFSTR("/var/mobile/Library/CallHistoryDB"), CFSTR("/var/mobile/Library/Carousel"), CFSTR("/var/mobile/Library/Health"), CFSTR("/var/mobile/Library/Maps"), CFSTR("/var/mobile/Library/MapsHistory.plist"), CFSTR("/var/mobile/Library/NanoMailKit"), CFSTR("/var/mobile/Library/NanoMusicSync"), CFSTR("/var/mobile/Library/NanoPasses"), CFSTR("/var/mobile/Library/NanoPodcasts"), CFSTR("/var/mobile/Library/NanoPhotos"), CFSTR("/var/mobile/Library/NanoWeatherDemo"),
           CFSTR("/var/mobile/Library/News"),
           CFSTR("/var/mobile/Library/RetailDemo"),
           CFSTR("/var/mobile/Library/Reminders"),
           CFSTR("/var/mobile/Library/SMS"),
           CFSTR("/var/mobile/Library/UserConfigurationProfiles"),
           CFSTR("/var/mobile/Library/Preferences/.GlobalPreferences.plist"),
           CFSTR("/var/mobile/Library/Preferences/.GlobalPreferences_m.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.Accessibility.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.ActivitySharing.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.AppleMediaServices.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.assistant.backedup.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.assistant.nano.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.assistant.support.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.backboardd.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.Carousel.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.coremedia.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.ControlCenter.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.DeepBreathing.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.demo-settings.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.findmy.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.healthd.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.ids.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.locationd.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.mobileme.fmf1.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.mobilephone.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.mobilephone.speeddial.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.mobiletimer.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.nanobuddy.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.nanolifestyle.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.nanolifestyle.privacy.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.NanoMediaUI.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.NanoMusicSync.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.nanopassbook.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.nanophotos.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.nanonews.sync.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.Noise.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.podcasts.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.SessionTrackerApp.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.stockholm.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.system.prefs.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.timed.plist"),
           CFSTR("/var/mobile/Library/Preferences/com.apple.voicememod.plist"),
           CFSTR("/var/mobile/Library/Preferences/group.com.apple.stocks.plist"),
           CFSTR("/var/mobile/Library/Preferences/Avalon"));
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
    v5 = objc_msgSend(v4, "tvOS");

    if (!v5)
      return;
    v3 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("/var/mobile/Media/DCIM"), CFSTR("/var/mobile/Media/PhotoData"), CFSTR("/var/mobile/Library/Preferences/com.apple.demo-settings.plist"), CFSTR("/var/MobileDevice/ProvisioningProfiles"), CFSTR("/var/mobile/Library/com.apple.HeadBoard/HBDemoModeAppOrder"), CFSTR("/var/mobile/Library/com.apple.HeadBoard/AppOrder.plist"), CFSTR("/var/mobile/Library/Preferences/.GlobalPreferences.plist"), CFSTR("/var/mobile/Library/Preferences/.GlobalPreferences_m.plist"), CFSTR("/var/mobile/Library/DemoLoop"), 0, v8, v9, v10, v11, v12, v13, v14,
           v15,
           v16,
           v17,
           v18,
           v19,
           v20,
           v21,
           v22,
           v23,
           v24,
           v25,
           v26,
           v27,
           v28,
           v29,
           v30,
           v31,
           v32,
           v33,
           v34,
           v35,
           v36,
           v37,
           v38,
           v39,
           v40,
           v41,
           v42,
           v43,
           v44,
           v45,
           v46,
           v47,
           v48,
           v49,
           v50,
           v51,
           v52,
           v53,
           v54,
           v55,
           v56,
           v57,
           v58);
  }
  v6 = objc_claimAutoreleasedReturnValue(v3);
  v7 = (void *)qword_100175270;
  qword_100175270 = v6;

}

id sub_10003CE70()
{
  if (qword_100175288 != -1)
    dispatch_once(&qword_100175288, &stru_10013E608);
  return (id)qword_100175280;
}

void sub_10003CEB0(id a1)
{
  void *v1;
  unsigned int v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  void *v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
  v2 = objc_msgSend(v1, "watchOS");

  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("/var/mobile/Library/Caches/sharedCaches/com.apple.WatchListKit.NSURLCache"), CFSTR("/var/mobile/Library/Caches/sharedCaches/com.apple.iTunesStore.NSURLCache/VaryState.db-shm"), CFSTR("/var/mobile/Library/Caches/sharedCaches/com.apple.iTunesStore.NSURLCache/VaryState.db-wal"), CFSTR("/var/mobile/Library/Caches/sharedCaches/com.apple.iTunesStore.NSURLCache/VaryState.db"), CFSTR("/var/mobile/Library/Caches/sharedCaches/com.apple.iTunesStore.NSURLCache/Cache.db"), CFSTR("/var/mobile/Library/Caches/sharedCaches/com.apple.iTunesStore.NSURLCache/Cache.db-wal"), CFSTR("/var/mobile/Library/Caches/sharedCaches/com.apple.iTunesStore.NSURLCache/Cache.db-shm"), CFSTR("/var/mobile/Library/Caches/sharedCaches/com.apple.iTunesStore.NSURLCache/fsCachedData"), 0));
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
    v5 = objc_msgSend(v4, "tvOS");

    if (!v5)
      return;
    v3 = objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
  }
  v6 = (void *)qword_100175280;
  qword_100175280 = v3;

}

id sub_10003CFB0()
{
  if (qword_100175298 != -1)
    dispatch_once(&qword_100175298, &stru_10013E628);
  return (id)qword_100175290;
}

void sub_10003CFF0(id a1)
{
  void *v1;
  unsigned int v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  void *v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
  v2 = objc_msgSend(v1, "watchOS");

  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("systemgroup.com.apple.configurationprofiles"), 0));
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
    v5 = objc_msgSend(v4, "tvOS");

    if (!v5)
      return;
    v3 = objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
  }
  v6 = (void *)qword_100175290;
  qword_100175290 = v3;

}

id sub_10003D0AC()
{
  if (qword_1001752A8 != -1)
    dispatch_once(&qword_1001752A8, &stru_10013E648);
  return (id)qword_1001752A0;
}

void sub_10003D0EC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("/.com.apple.mobile_container_manager.metadata.plist"), CFSTR("/Library/Caches"), CFSTR("/Library/SyncedPreferences"), CFSTR("/Library/Saved Application State"), CFSTR("/SystemData/com.apple.AuthenticationServices"), 0));
  v2 = (void *)qword_1001752A0;
  qword_1001752A0 = v1;

}

id sub_10003D154()
{
  if (qword_1001752B8 != -1)
    dispatch_once(&qword_1001752B8, &stru_10013E668);
  return (id)qword_1001752B0;
}

void sub_10003D194(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("/.com.apple.mobile_container_manager.metadata.plist"), CFSTR("/Library/Caches"), CFSTR("/Library/SyncedPreferences"), CFSTR("/Library/Saved Application State"), CFSTR("/SystemData/com.apple.AuthenticationServices"), 0));
  v2 = (void *)qword_1001752B0;
  qword_1001752B0 = v1;

}

id sub_10003D1FC()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v6[0] = CFSTR("ContentRootDomain");
  v0 = sub_10003CA04();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v6[1] = CFSTR("SystemContainerDomain");
  v7[0] = v1;
  v2 = sub_10003CFB0();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v7[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2));

  return v4;
}

void sub_10003D2F0(id a1)
{
  MSDAppSwitcherManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAppSwitcherManager);
  v2 = (void *)qword_1001752C8;
  qword_1001752C8 = (uint64_t)v1;

}

void sub_10003D990(id a1)
{
  MSDAVFlashlight *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAVFlashlight);
  v2 = (void *)qword_1001752D8;
  qword_1001752D8 = (uint64_t)v1;

}

void sub_10003DB70(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;

  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setFlashTimer:", *(unsigned int *)(a1 + 40));

  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "_startFlash");

}

id sub_10003DC28(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  return +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "_stopFlash:", 0, 0, (double)*(unint64_t *)&a2);
}

void sub_10003DF38(id a1)
{
  MSDDemoPeerPairingManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDDemoPeerPairingManager);
  v2 = (void *)qword_1001752E8;
  qword_1001752E8 = (uint64_t)v1;

}

void sub_10003E824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E850(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10003E860(uint64_t a1)
{

}

void sub_10003E868(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  NSObject *v6;

  v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
    v5 = sub_1000604F0();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1000BDA20(a1, (uint64_t)v4, v6);

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_10003EA78(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10003EAB0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000BDA9C();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "pairingManager"));
  objc_msgSend(v5, "invalidate");

}

void sub_10003EB18(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000BDAC8();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setPairingManager:", 0);

}

void sub_10003ED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10003ED94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10003EFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003F00C(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10003F290(id a1, CUPairedPeer *a2, unint64_t a3, BOOL *a4)
{
  CUPairedPeer *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  unint64_t v10;
  __int16 v11;
  void *v12;

  v5 = a2;
  v6 = sub_1000604F0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[CUPairedPeer detailedDescription](v5, "detailedDescription"));
    v9 = 134218242;
    v10 = a3;
    v11 = 2114;
    v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MSDDemoPeerPairingManager: [%lu] %{public}@", (uint8_t *)&v9, 0x16u);

  }
}

void sub_100040D80(id a1)
{
  MSDWallpaperManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDWallpaperManager);
  v2 = (void *)qword_1001752F8;
  qword_1001752F8 = (uint64_t)v1;

}

void sub_100041340(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;

  v4 = a3;
  v5 = sub_1000604F0();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = PRSWallpaperObserverLocationsDescription(objc_msgSend(v4, "changed"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = 138543362;
    v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Poster config changed with transition: %{public}@", (uint8_t *)&v9, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 32), "_handleWallpaperConfigChange");

}

void sub_10004169C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000BE474(v3);

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100041CA8(id a1)
{
  MSDCellularHelper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDCellularHelper);
  v2 = (void *)qword_100175300;
  qword_100175300 = (uint64_t)v1;

}

void sub_100041EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100041EE0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100041EF0(uint64_t a1)
{

}

void sub_100041EF8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cellularSlotsInfo"));
  v2 = objc_msgSend(v6, "copy");
  v3 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v2, CFSTR("Slots")));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100042074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004208C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cellularSlotsInfo", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", CFSTR("SimType")));
        if (v8)
        {
          v9 = objc_opt_class(NSNumber, v7);
          if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
          {
            if (objc_msgSend(v8, "isEqual:", &off_10014D898))
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

              goto LABEL_13;
            }
          }
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_13:

}

void sub_100042300(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004242C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000424B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000428B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100042988(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fetchCellularPlanItems");
}

void sub_100043214(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100043228(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_activate");

}

void sub_1000432F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100043308(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_deactivate");

}

void sub_1000436A8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;
  uint64_t v7;

  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_100043720(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000BE4EC();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_deactivate");

}

void sub_100043778(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000BE518();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_deactivate");

}

void sub_1000437D0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleRPCompanionLinkDeviceFound:", v3);

}

void sub_100043818(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleRPCompanionLinkDeviceLost:", v3);

}

void sub_100043860(uint64_t a1, void *a2, uint64_t a3)
{
  id *v4;
  id v5;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_handleRPCompanionLinkDeviceChanged:withChanges:", v5, a3);

}

void sub_1000438B8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  int v10;
  void *v11;

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000BE544(v3, v6);
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "rpClient"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activeDevices"));
    v10 = 138412290;
    v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MSDRapportDeviceExplorer: Known devices: %@", (uint8_t *)&v10, 0xCu);

  }
}

void sub_100044038(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  uint8_t buf[16];

  if ((objc_msgSend(*(id *)(a1 + 32), "droppedByRapport") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "devices"));
    objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 32));

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "observer"));
    if (v3)
    {
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "observer"));
      objc_msgSend(v6, "explorerDidLoseDevice:", *(_QWORD *)(a1 + 32));

    }
  }
  else
  {
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MSDRapportDeviceExplorer: Ignore device lost event as device was found again after it was reportedly dropped.", buf, 2u);
    }

  }
}

void sub_1000444F0(int a1, int a2, CFStringRef theString1)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint8_t v6[16];

  if (CFStringCompare(theString1, CFSTR("com.apple.purplebuddy.setupdone"), 0) == kCFCompareEqualTo)
  {
    v3 = sub_1000604F0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received notification: buddy finished setup", v6, 2u);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTargetDevice sharedInstance](MSDTargetDevice, "sharedInstance"));
    objc_msgSend(v5, "invokeHandler:", 1);

  }
}

void sub_1000445CC(id a1)
{
  MSDTargetDevice *v1;
  void *v2;

  v1 = objc_alloc_init(MSDTargetDevice);
  v2 = (void *)qword_100175318;
  qword_100175318 = (uint64_t)v1;

  objc_msgSend((id)qword_100175318, "setModeLock:", &off_10014D8C8);
  objc_msgSend((id)qword_100175318, "setBuddyCompletionHandlerLock:", &off_10014D8C8);
}

void sub_1000451A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000453B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100045690(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000457F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100045B44(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1000604F0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138543362;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request to wipeOutDevice failed =  %{public}@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_10004621C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004684C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100046928(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100046AC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000475F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  const __CFString *v28;
  void *v29;
  unsigned int v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  void *v37;
  unsigned __int8 v38;
  void *v39;
  id v40;
  void *v41;
  uint64_t v42;
  void *v43;
  unsigned __int8 v44;
  void *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  unsigned int v53;
  const CFStringRef *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  id v73;
  NSObject *v74;
  id v75;
  void *v76;
  id v77;
  const __CFDictionary *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  void *v86;
  unsigned int v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  __int16 v92;

  v3 = a2;
  v5 = objc_opt_class(NSString, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTargetDevice sharedInstance](MSDTargetDevice, "sharedInstance"));
    v7 = (__CFString *)v3;
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoManualUpdateState")))
    {
      v92 = 0;
      objc_msgSend(*(id *)(a1 + 32), "manualUpdateMode:allowChange:", (char *)&v92 + 1, &v92);
      v8 = *(void **)(a1 + 40);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", HIBYTE(v92)));
      objc_msgSend(v8, "setObject:forKey:", v9, CFSTR("MSDDemoManualUpdateCurrentMode"));

      v10 = *(void **)(a1 + 40);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v92));
      v12 = CFSTR("MSDDemoManualUpdateAllowChange");
      v13 = v10;
LABEL_4:
      v14 = v11;
LABEL_5:
      objc_msgSend(v13, "setObject:forKey:", v14, v12);
LABEL_22:

      goto LABEL_23;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoContentStatus")))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));

      if (!v15)
      {
LABEL_23:

        goto LABEL_24;
      }
      v16 = *(void **)(a1 + 40);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "getContentStatus"));
      objc_msgSend(v16, "setObject:forKey:", v18, CFSTR("MSDDemoContentStatus"));

      v19 = *(void **)(a1 + 40);
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v20, "getInternalStatus")));
      objc_msgSend(v19, "setObject:forKey:", v21, CFSTR("InternalStatus"));

LABEL_9:
      goto LABEL_23;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoLastRebootTime")))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastRebootTime"));
      if (!v22)
        goto LABEL_23;
      goto LABEL_18;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoLastRevertTime")))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSnapshotRevertTime"));
      if (!v22)
        goto LABEL_23;
LABEL_18:
      v11 = v22;
      v23 = *(void **)(a1 + 40);
      v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "toString"));
LABEL_19:
      v25 = (id)v24;
      v26 = v23;
      v27 = v25;
      v28 = v7;
LABEL_20:
      objc_msgSend(v26, "setObject:forKey:", v27, v28);
LABEL_21:

      goto LABEL_22;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDLastShallowRefreshTime")))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastShallowRefreshTime"));
      if (!v22)
        goto LABEL_23;
      goto LABEL_18;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoNANDSize")))
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance"));
      v30 = objc_msgSend(v29, "isNPIDevice");

      if (v30)
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "getMaskValueForKey:", CFSTR("MSDDemoNANDSize")));

        if (v32)
        {
          v34 = objc_opt_class(NSNumber, v33);
          v20 = v32;
          if ((objc_opt_isKindOfClass(v32, v34) & 1) != 0)
          {
LABEL_35:
            objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v20, v7);
            goto LABEL_9;
          }
        }
      }
      else
      {
        v32 = 0;
      }
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "nandSize"));

      if (!v20)
        goto LABEL_23;
      goto LABEL_35;
    }
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
    if ((objc_msgSend(v35, "macOS") & 1) != 0)
    {
      v36 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDPricingRequestUpdate"));

      if (!v36)
        goto LABEL_42;
LABEL_38:
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPricingUpdateController sharedInstance](MSDPricingUpdateController, "sharedInstance"));
      v40 = objc_msgSend(v39, "needUpdate");

      v41 = *(void **)(a1 + 40);
      v42 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v40));
      goto LABEL_39;
    }
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
    if ((objc_msgSend(v37, "iOS") & 1) != 0)
    {
      v38 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDPricingRequestUpdate"));

      if ((v38 & 1) != 0)
        goto LABEL_38;
    }
    else
    {

    }
LABEL_42:
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoAcceptUATContent")))
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
      v44 = objc_msgSend(v43, "macOS");

      if ((v44 & 1) != 0)
      {
        v11 = &__kCFBooleanFalse;
      }
      else
      {
        v11 = (void *)MGCopyAnswer(CFSTR("SigningFuse"), 0);
        if (!v11)
          goto LABEL_23;
      }
      v23 = *(void **)(a1 + 40);
      v24 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v11, "BOOLValue") ^ 1));
      goto LABEL_19;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoProductDescription")))
    {
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance"));
      v46 = objc_msgSend(v45, "isNPIDevice");

      if (v46)
      {
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "getMaskValueForKey:", CFSTR("MSDDemoProductDescription")));

        if (v11)
        {
          v49 = objc_opt_class(NSString, v48);
          v50 = (uint64_t)v11;
          if ((objc_opt_isKindOfClass(v11, v49) & 1) != 0)
            goto LABEL_66;
        }
      }
      else
      {
        v11 = 0;
      }
      v56 = (void *)MGCopyAnswer(CFSTR("oPeik/9e8lQWMszEjbPzng"), 0);
      v25 = v56;
      if (v56)
      {
        v50 = objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKey:", CFSTR("ArtworkDeviceProductDescription")));

        if (v50)
        {
          v58 = objc_opt_class(NSString, v57);
          if ((objc_opt_isKindOfClass(v50, v58) & 1) != 0)
          {

            v11 = (void *)v50;
LABEL_66:
            v13 = *(void **)(a1 + 40);
            v14 = (void *)v50;
            goto LABEL_67;
          }
        }
        v73 = sub_1000604F0();
        v74 = objc_claimAutoreleasedReturnValue(v73);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          sub_1000BEBB4();
        v11 = (void *)v50;
      }
      else
      {
        v75 = sub_1000604F0();
        v74 = objc_claimAutoreleasedReturnValue(v75);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          sub_1000BEB88();
      }

      goto LABEL_21;
    }
    if ((-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoCarrierBundleID")) & 1) != 0
      || -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoCarrierBundleVersion")))
    {
      v51 = (void *)MGCopyAnswer(CFSTR("CarrierBundleInfoArray"), 0);
      v11 = v51;
      if (v51 && objc_msgSend(v51, "count"))
      {
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndex:", 0));
        v53 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoCarrierBundleID"));
        v54 = &kCFBundleIdentifierKey;
        if (!v53)
          v54 = &kCFBundleVersionKey;
        v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKey:", *v54));
        if (v55)
          objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v55, v7);

      }
      goto LABEL_22;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDHubSuppliedSettingsID")))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "hubSuppliedSettings"));
      if (!v11)
        goto LABEL_22;
      v60 = objc_opt_class(NSDictionary, v59);
      if ((objc_opt_isKindOfClass(v11, v60) & 1) == 0)
        goto LABEL_22;
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", CFSTR("SettingsID")));
      v25 = v61;
      if (!v61 || !objc_msgSend(v61, "length"))
        goto LABEL_21;
      v26 = *(void **)(a1 + 40);
      v28 = CFSTR("SettingsID");
      goto LABEL_74;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDNetworkInterfacesEnabled")))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "fetchActiveNetworkInterface")));
      v13 = *(void **)(a1 + 40);
      v12 = CFSTR("MSDNetworkInterfacesEnabled");
      goto LABEL_4;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDCurrentWiFiSSID")))
    {
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[MSDWiFiHelper sharedInstance](MSDWiFiHelper, "sharedInstance"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "getCurrentWiFiSsid"));

      if (!v11)
        goto LABEL_22;
      v13 = *(void **)(a1 + 40);
      v12 = CFSTR("MSDCurrentWiFiSSID");
      goto LABEL_4;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDPersistentWiFiSSID")))
    {
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[MSDWiFiHelper sharedInstance](MSDWiFiHelper, "sharedInstance"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "getPersistentWiFiSsid"));

      if (!v11)
        goto LABEL_22;
      v13 = *(void **)(a1 + 40);
      v12 = CFSTR("MSDPersistentWiFiSSID");
      goto LABEL_4;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDCellularConfiguration")))
    {
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance"));
      v65 = objc_msgSend(v64, "isNPIDevice");

      if (v65)
      {
        v66 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance"));
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "getMaskValueForKey:", CFSTR("MSDCellularConfiguration")));

        if (v67)
        {
          v69 = objc_opt_class(NSDictionary, v68);
          v20 = v67;
          if ((objc_opt_isKindOfClass(v67, v69) & 1) != 0)
            goto LABEL_35;
        }
      }
      else
      {
        v67 = 0;
      }
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[MSDCellularHelper sharedInstance](MSDCellularHelper, "sharedInstance"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "cellularInfo"));

      if (!v20)
        goto LABEL_23;
      goto LABEL_35;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MinOSVersionAvailable")))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "minOSVersionAvailable"));
      if (!v11)
        goto LABEL_22;
LABEL_111:
      v13 = *(void **)(a1 + 40);
      goto LABEL_40;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDApnsKey")))
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPushNotificationHandler sharedInstance](MSDPushNotificationHandler, "sharedInstance"));
      v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "apsToken"));
      goto LABEL_110;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoSystemLanguage")))
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLanguageAndRegionManager sharedInstance](MSDLanguageAndRegionManager, "sharedInstance"));
      v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "getCurrentDeviceLanguage"));
      goto LABEL_110;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoSystemRegion")))
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLanguageAndRegionManager sharedInstance](MSDLanguageAndRegionManager, "sharedInstance"));
      v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "getCurrentDeviceRegion"));
      goto LABEL_110;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoPreferencesLanguage")))
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLanguageAndRegionManager sharedInstance](MSDLanguageAndRegionManager, "sharedInstance"));
      v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "getDemoPreferencesLanguage"));
      goto LABEL_110;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDDemoPreferencesRegion")))
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLanguageAndRegionManager sharedInstance](MSDLanguageAndRegionManager, "sharedInstance"));
      v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "getDemoPreferencesRegion"));
LABEL_110:
      v11 = (void *)v72;

      if (!v11)
        goto LABEL_22;
      goto LABEL_111;
    }
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("IdleDuration")))
    {
      v76 = (void *)objc_claimAutoreleasedReturnValue(+[MSDSystemMonitor sharedInstance](MSDSystemMonitor, "sharedInstance"));
      v77 = objc_msgSend(v76, "systemIdleDuration");

      v41 = *(void **)(a1 + 40);
      v42 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v77));
    }
    else
    {
      if (!-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("MSDTotalStorageAvailable")))
      {
        if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("UniqueDeviceID")))
        {
          v79 = *(void **)(a1 + 40);
          v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "udid"));
          objc_msgSend(v79, "setObject:forKey:", v80, v7);

          goto LABEL_23;
        }
        if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("PairedDeviceInfo")))
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPairedWatchProxy sharedInstance](MSDPairedWatchProxy, "sharedInstance"));
          if (!objc_msgSend(*(id *)(a1 + 32), "isBetterTogetherDemo")
            || !objc_msgSend(v11, "paired"))
          {
            goto LABEL_22;
          }
          v25 = objc_alloc_init((Class)NSMutableDictionary);
          v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "udid"));
          objc_msgSend(v25, "setObject:forKey:", v81, CFSTR("UniqueDeviceID"));

          v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v11, "reachable")));
          objc_msgSend(v25, "setObject:forKey:", v82, CFSTR("IsReachable"));

          if ((objc_msgSend(v11, "reachable") & 1) == 0)
          {
            v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastSeenDate"));

            if (v83)
            {
              v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastSeenDate"));
              objc_msgSend(v25, "setObject:forKey:", v84, CFSTR("LastSeenDate"));

            }
          }
          v26 = *(void **)(a1 + 40);
          v28 = CFSTR("PairedDeviceInfo");
LABEL_74:
          v27 = v25;
          goto LABEL_20;
        }
        if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("xRyzf9zFE/ycr/wJPweZvQ")))
        {
          v11 = (void *)MGCopyAnswer(CFSTR("xRyzf9zFE/ycr/wJPweZvQ"), 0);
          if (!v11)
            goto LABEL_22;
          v13 = *(void **)(a1 + 40);
          v12 = CFSTR("InternationalMobileEquipmentIdentity2");
          goto LABEL_4;
        }
        v85 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("PartNumber"));
        v86 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance"));
        v87 = objc_msgSend(v86, "isNPIDevice");

        if (v85)
        {
          if (v87)
          {
            v88 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "getMaskValueForKey:", v7));
          }
          else
          {
            v88 = (void *)MGCopyAnswer(CFSTR("ModelNumber"), 0);
            v90 = (void *)MGCopyAnswer(CFSTR("RegionInfo"), 0);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "stringByAppendingString:", v90));

          }
          goto LABEL_35;
        }
        if (!v87
          || (v89 = (void *)objc_claimAutoreleasedReturnValue(+[MSDNPIMaskValues sharedInstance](MSDNPIMaskValues, "sharedInstance")),
              v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "getMaskValueForKey:", v7)),
              v89,
              !v11))
        {
          v11 = (void *)MGCopyAnswer(v7, 0);
          if (!v11)
            goto LABEL_23;
        }
        goto LABEL_111;
      }
      v78 = (const __CFDictionary *)MGCopyAnswer(CFSTR("DiskUsage"), 0);
      if (!v78)
        goto LABEL_23;
      v91 = 0;
      sub_1000482E8(v78, kMGQDiskUsageTotalDataAvailable, &v91);
      v41 = *(void **)(a1 + 40);
      v42 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v91));
    }
LABEL_39:
    v11 = (void *)v42;
    v13 = v41;
LABEL_40:
    v14 = v11;
LABEL_67:
    v12 = v7;
    goto LABEL_5;
  }
LABEL_24:

}

const __CFNumber *sub_1000482E8(const __CFDictionary *a1, const void *a2, void *a3)
{
  const __CFNumber *result;
  const __CFNumber *v5;
  CFTypeID v6;

  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v5 = result;
    v6 = CFGetTypeID(result);
    result = (const __CFNumber *)CFNumberGetTypeID();
    if ((const __CFNumber *)v6 == result)
      return (const __CFNumber *)CFNumberGetValue(v5, kCFNumberSInt64Type, a3);
  }
  return result;
}

void sub_10004AC88(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationProxy applicationProxyForIdentifier:](LSApplicationProxy, "applicationProxyForIdentifier:", v3));

  if (objc_msgSend(v4, "isDeletable"))
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleIdentifier"));
    objc_msgSend(v5, "addObject:", v6);

  }
}

void sub_10004AE60(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifier"));
  LODWORD(v3) = objc_msgSend(v3, "containsObject:", v4);

  v5 = v10;
  if ((_DWORD)v3)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifier"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationProxy applicationProxyForIdentifier:](LSApplicationProxy, "applicationProxyForIdentifier:", v6));

    if (objc_msgSend(v7, "isInstalled") && (objc_msgSend(v7, "isPlaceholder") & 1) == 0)
    {
      v8 = *(void **)(a1 + 40);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifier"));
      objc_msgSend(v8, "addObject:", v9);

    }
    v5 = v10;
  }

}

void sub_10004B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004B2F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
  LODWORD(v4) = objc_msgSend(v4, "containsObject:", v5);

  if ((_DWORD)v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationProxy applicationProxyForIdentifier:](LSApplicationProxy, "applicationProxyForIdentifier:", v6));

    if (objc_msgSend(v7, "isInstalled") && (objc_msgSend(v7, "isPlaceholder") & 1) == 0)
    {
      v8 = *(void **)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
      objc_msgSend(v8, "removeObject:", v9);

      v10 = sub_1000604F0();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
        v13 = 138543362;
        v14 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "System app %{public}@ has been installed.", (uint8_t *)&v13, 0xCu);

      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    }

  }
}

id sub_10004CAE8(uint64_t a1)
{
  void *v2;
  void *v3;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSDStoreHoursManager sharedInstance](MSDStoreHoursManager, "sharedInstance"));
  objc_msgSend(v2, "evaluateStoreStatusAgainstCurrentTime");

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDStoreHoursManager sharedInstance](MSDStoreHoursManager, "sharedInstance"));
  objc_msgSend(v3, "setupStoreOpenCloseTimers");

  result = objc_msgSend(*(id *)(a1 + 32), "isContentFrozen");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "setupSnapshotRevertTimer");
  return result;
}

id sub_10004CB60(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStoreOpenNotification");
}

id sub_10004CB68(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStoreClosedNotification");
}

void sub_10004CBAC(id a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v5[16];

  v1 = sub_1000604F0();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "It's time to submit CoreAnalytics logs!", v5, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAnalytics sharedInstance](MSDAnalytics, "sharedInstance"));
  objc_msgSend(v3, "rollOverCoreAnalyticsLogs");

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAnalytics sharedInstance](MSDAnalytics, "sharedInstance"));
  objc_msgSend(v4, "uploadCoreAnalyticsLogs");

}

void sub_10004CCD0(uint64_t a1)
{
  void *v2;
  id *v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  id v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  int v21;
  double v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 30.0));
  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "caLogsUploadTimer"));

  if (v5)
  {
    v6 = objc_loadWeakRetained(v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "caLogsUploadTimer"));
    objc_msgSend(v7, "invalidate");

    v8 = objc_loadWeakRetained(v3);
    objc_msgSend(v8, "setCaLogsUploadTimer:", 0);

  }
  if (os_variant_has_internal_content("com.apple.mobilestoredemod"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTestPreferences sharedInstance](MSDTestPreferences, "sharedInstance"));
    objc_msgSend(v9, "caLogsUploadInterval");
    v11 = v10;

    if (v11 <= 0.0)
      v11 = 7200.0;
  }
  else
  {
    v11 = 7200.0;
  }
  v12 = sub_1000604F0();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v21 = 134217984;
    v22 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CoreAnalytics logs upload timer interval set to: %f (seconds)", (uint8_t *)&v21, 0xCu);
  }

  v14 = objc_alloc((Class)NSTimer);
  v15 = objc_loadWeakRetained(v3);
  v16 = objc_msgSend(v14, "initWithFireDate:interval:target:selector:userInfo:repeats:", v2, v15, "caLogsUploadTimerHandler:", 0, 1, v11);
  v17 = objc_loadWeakRetained(v3);
  objc_msgSend(v17, "setCaLogsUploadTimer:", v16);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
  v19 = objc_loadWeakRetained(v3);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "caLogsUploadTimer"));
  objc_msgSend(v18, "addTimer:forMode:", v20, NSDefaultRunLoopMode);

}

void sub_10004CFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004CFE0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id *v4;
  id WeakRetained;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  uint8_t v14[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "It's time for snapshot revert!", v14, 2u);
  }

  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  if ((objc_msgSend(WeakRetained, "isBetterTogetherDemo") & 1) == 0)
  {

LABEL_10:
    v13 = objc_loadWeakRetained(v4);
    objc_msgSend(v13, "revertSnapshot");
    goto LABEL_11;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPairedWatchProxy sharedInstance](MSDPairedWatchProxy, "sharedInstance"));
  v7 = objc_msgSend(v6, "paired");

  if (!v7)
    goto LABEL_10;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPairedWatchProxy sharedInstance](MSDPairedWatchProxy, "sharedInstance"));
  v9 = objc_msgSend(v8, "revertSnapshot");

  if ((v9 & 1) != 0)
    goto LABEL_10;
  v10 = sub_1000604F0();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    sub_1000BF4F0();

  v12 = objc_loadWeakRetained(v4);
  objc_msgSend(v12, "saveOperationRequest:requestFlag:completeBy:", CFSTR("Restart"), 0, 0);

  v13 = objc_loadWeakRetained(v4);
  objc_msgSend(v13, "reboot");
LABEL_11:

}

void sub_10004D1BC(uint64_t a1)
{
  void *v2;
  id *v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  unsigned int v10;
  void *v11;
  void *v12;
  unsigned int v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  int v25;
  void *v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSDStoreHoursManager sharedInstance](MSDStoreHoursManager, "sharedInstance"));
  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "snapshotRevertTimer"));

  if (v5)
  {
    v6 = objc_loadWeakRetained(v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "snapshotRevertTimer"));
    objc_msgSend(v7, "invalidate");

    v8 = objc_loadWeakRetained(v3);
    objc_msgSend(v8, "setSnapshotRevertTimer:", 0);

  }
  v9 = objc_loadWeakRetained(v3);
  v10 = objc_msgSend(v9, "allowSnapshotRevertTimer");

  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "nextContentRevertDate"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantFuture](NSDate, "distantFuture"));
    v13 = objc_msgSend(v11, "isEqualToDate:", v12);

    if (v13)
    {
      v14 = sub_1000604F0();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v25) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Disable snapshot revert timer for the near future.", (uint8_t *)&v25, 2u);
      }
    }
    else
    {
      v16 = objc_alloc((Class)NSTimer);
      v17 = objc_loadWeakRetained(v3);
      v18 = objc_msgSend(v16, "initWithFireDate:interval:target:selector:userInfo:repeats:", v11, v17, "snapshotRevertTimerHandler:", 0, 0, 0.0);
      v19 = objc_loadWeakRetained(v3);
      objc_msgSend(v19, "setSnapshotRevertTimer:", v18);

      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
      v21 = objc_loadWeakRetained(v3);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "snapshotRevertTimer"));
      objc_msgSend(v20, "addTimer:forMode:", v22, NSDefaultRunLoopMode);

      v23 = sub_1000604F0();
      v15 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "toString"));
        v25 = 138543362;
        v26 = v24;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Periodic snapshot revert timer scheduled: %{public}@", (uint8_t *)&v25, 0xCu);

      }
    }

  }
}

void sub_10004D7E0(id a1, OS_xpc_object *a2)
{
  OS_xpc_object *v2;
  id v3;
  NSObject *v4;
  void *v5;

  v2 = a2;
  if (xpc_activity_get_state(v2) == 2)
  {
    v3 = sub_1000604F0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      sub_1000BF628();

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAnalyticsEventHandler sharedInstance](MSDAnalyticsEventHandler, "sharedInstance"));
    objc_msgSend(v5, "sendHeartbeatEvent");

    xpc_activity_set_state(v2, 5);
  }

}

id sub_10004DDCC(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waitForCommandTimer"));
  objc_msgSend(v2, "invalidate");

  return objc_msgSend(*(id *)(a1 + 32), "setWaitForCommandTimer:", 0);
}

void sub_10004DE60(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10004DEEC;
  v3[3] = &unk_10013EA18;
  v3[4] = *(_QWORD *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v3, 300.0));
  objc_msgSend(*(id *)(a1 + 32), "setWaitForCommandTimer:", v2);

}

void sub_10004DEEC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Didn't receive a valid command within given time, go to demo mode now.", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setWaitingForCommand:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setWaitForCommandTimer:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPairedWatchProxy sharedInstance](MSDPairedWatchProxy, "sharedInstance"));
  if (objc_msgSend(*(id *)(a1 + 32), "isBetterTogetherDemo") && objc_msgSend(v4, "paired"))
    objc_msgSend(v4, "lockSnapshot");
  objc_msgSend(*(id *)(a1 + 32), "lockSnapshot");

}

intptr_t sub_10004E264(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10004E2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10004EBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004EBF4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004EC04(uint64_t a1)
{

}

id sub_10004EC0C(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  objc_msgSend(*(id *)(*(_QWORD *)(a1[4] + 8) + 40), "lock");
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "fetchActiveNetworkInterface");
  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found active network interfaces: %lu", (uint8_t *)&v6, 0xCu);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1[4] + 8) + 40), "signal");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1[4] + 8) + 40), "unlock");
}

void sub_10004EDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004EDF8(uint64_t a1, void *a2)
{
  NSObject *v3;
  unsigned __int32 v4;

  v3 = a2;
  if (nw_path_get_status(*(nw_path_t *)(a1 + 32)) == nw_path_status_satisfied)
  {
    v4 = nw_interface_get_type(v3) - 1;
    if (v4 <= 2)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= qword_1000F0038[v4];
  }

  return 1;
}

void sub_100051C48(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

CFStringRef sub_100052600(unsigned __int8 *a1)
{
  char __str[100];

  snprintf(__str, 0x64uLL, "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15],
    a1[16],
    a1[17],
    a1[18],
    a1[19]);
  return CFStringCreateWithCString(kCFAllocatorDefault, __str, 0x8000100u);
}

unsigned __int8 *sub_1000526FC(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t i;

  v4 = sub_10005275C(a2);
  v5 = v4;
  if (v4)
  {
    v4 = sub_10005275C(a3);
    if (v4)
    {
      for (i = 0; i != 20; ++i)
        v5[i] ^= v4[i];
    }
  }
  free(v4);
  return v5;
}

unsigned __int8 *sub_10005275C(const __CFString *a1)
{
  CFTypeID v2;
  unsigned __int8 *v3;
  CC_SHA1_CTX *p_c;
  CC_LONG Length;
  size_t v6;
  char *v7;
  const UInt8 *BytePtr;
  id v9;
  NSObject *v10;
  CFIndex v12;
  const void *ValueAtIndex;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t i;
  uint8_t v17[16];
  CC_SHA1_CTX c;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (v2 == CFBooleanGetTypeID())
  {
    v3 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x14uLL, 0x6A69C61BuLL);
    LOBYTE(c.h0) = CFBooleanGetValue((CFBooleanRef)a1);
    p_c = &c;
    Length = 1;
LABEL_10:
    CC_SHA1(p_c, Length, v3);
    return v3;
  }
  if (v2 != CFStringGetTypeID())
  {
    if (v2 == CFDateGetTypeID())
    {
      v3 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x14uLL, 0xEAF147E6uLL);
      *(_QWORD *)&c.h0 = CFDateGetAbsoluteTime((CFDateRef)a1);
      p_c = &c;
      Length = 8;
      goto LABEL_10;
    }
    if (v2 == CFDataGetTypeID())
    {
      v3 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x14uLL, 0x1991A161uLL);
      BytePtr = CFDataGetBytePtr((CFDataRef)a1);
      Length = CFDataGetLength((CFDataRef)a1);
      p_c = (CC_SHA1_CTX *)BytePtr;
      goto LABEL_10;
    }
    if (v2 == CFArrayGetTypeID())
    {
      if (CFArrayGetCount((CFArrayRef)a1))
      {
        memset(&c, 0, sizeof(c));
        if (!sub_100052FE0((const __CFArray *)a1))
        {
          v3 = (unsigned __int8 *)sub_10005275C(CFSTR("array"));
          CC_SHA1_Init(&c);
          if (CFArrayGetCount((CFArrayRef)a1) >= 1)
          {
            v12 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v12);
              v14 = (unsigned __int8 *)sub_10005275C(ValueAtIndex);
              if (!v14)
                break;
              v15 = v14;
              CC_SHA1_Update(&c, v14, 0x14u);
              CC_SHA1_Final(v15, &c);
              if (v3)
              {
                for (i = 0; i != 20; ++i)
                  v3[i] ^= v15[i];
              }
              free(v15);
              ++v12;
            }
            while (CFArrayGetCount((CFArrayRef)a1) > v12);
          }
          return v3;
        }
        v9 = sub_1000604F0();
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failing to hash due to duplicate array entries", v17, 2u);
        }

      }
    }
    else
    {
      if (v2 == CFDictionaryGetTypeID())
        return (unsigned __int8 *)sub_100052DA0((const __CFDictionary *)a1);
      if (v2 == CFNumberGetTypeID())
        return sub_100052F1C((const __CFNumber *)a1);
    }
    return 0;
  }
  v3 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x14uLL, 0x877E83E2uLL);
  v6 = CFStringGetLength(a1) + 1;
  v7 = (char *)malloc_type_calloc(1uLL, v6, 0x9DED1793uLL);
  CFStringGetCString(a1, v7, v6, 0x8000100u);
  CC_SHA1(v7, v6, v3);
  free(v7);
  return v3;
}

CFDataRef sub_100052A44(const __CFAllocator *a1, const __CFString *a2, CFStringRef theString1, uint64_t a4, void (*a5)(uint64_t, float, float), uint64_t a6)
{
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFDataRef v20;
  const __CFURL *v21;
  const __CFURL *v22;
  __CFReadStream *v23;
  __CFReadStream *v24;
  UInt8 *v25;
  UInt8 *v26;
  CFIndex v27;
  CFIndex v28;
  uint64_t v29;
  __n128 v30;
  int v31;
  CFDataRef v32;
  CFStringRef v33;
  id v34;
  id v35;
  NSObject *v36;
  id v37;
  NSObject *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  id v57;
  timeval v59;
  CC_SHA1_CTX c;
  unsigned __int8 md[20];

  memset(&c, 0, sizeof(c));
  if (CFStringCompare(theString1, CFSTR("SHA-1"), 0) == kCFCompareEqualTo)
  {
    v21 = CFURLCreateWithFileSystemPath(a1, a2, kCFURLPOSIXPathStyle, 0);
    if (!v21)
    {
      v34 = sub_1000604F0();
      v12 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1000BFD58((uint64_t)a2, v12);
      goto LABEL_4;
    }
    v22 = v21;
    v23 = CFReadStreamCreateWithFile(a1, v21);
    if (!v23)
    {
      v35 = sub_1000604F0();
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        sub_1000BFDC8();

      v20 = 0;
      goto LABEL_40;
    }
    v24 = v23;
    if (CFReadStreamOpen(v23))
    {
      if (a5)
        a5(a6, 0.0, -1.0);
      CC_SHA1_Init(&c);
      v25 = (UInt8 *)malloc_type_calloc(1uLL, 0x10000uLL, 0x49093F70uLL);
      if (v25)
      {
        v26 = v25;
        v59.tv_sec = 0;
        *(_QWORD *)&v59.tv_usec = 0;
        gettimeofday(&v59, 0);
        v27 = CFReadStreamRead(v24, v26, 0x10000);
        if (v27 < 1)
        {
LABEL_18:
          CC_SHA1_Final(md, &c);
          v32 = CFDataCreate(a1, md, 20);
          if (v32)
          {
            v20 = v32;
            v33 = sub_100052600(md);
            if (v33)
              CFRelease(v33);
            if (a5)
              a5(a6, 1.0, -1.0);
            goto LABEL_38;
          }
          v47 = sub_1000604F0();
          v48 = objc_claimAutoreleasedReturnValue(v47);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            sub_1000BFEB8(v48, v49, v50, v51, v52, v53, v54, v55);
        }
        else
        {
          v28 = v27;
          v29 = 0;
          while (1)
          {
            CC_SHA1_Update(&c, v26, v28);
            v29 += v28;
            v30.n128_u32[0] = -1.0;
            if (a4)
              v30.n128_f32[0] = (float)v29 / (float)a4;
            if (a5)
            {
              v31 = ((uint64_t (*)(uint64_t, __n128, float))a5)(a6, v30, -1.0);
              if (v31)
                break;
            }
            v28 = CFReadStreamRead(v24, v26, 0x10000);
            if (v28 <= 0)
              goto LABEL_18;
          }
          v56 = v31;
          v57 = sub_1000604F0();
          v48 = objc_claimAutoreleasedReturnValue(v57);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            sub_1000BFEE8(v56, v48);
        }

        v20 = 0;
LABEL_38:
        free(v26);
        goto LABEL_39;
      }
      v39 = sub_1000604F0();
      v38 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        sub_1000BFE88(v38, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      v37 = sub_1000604F0();
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        sub_1000BFE28();
    }

    v20 = 0;
LABEL_39:
    CFReadStreamClose(v24);
    CFRelease(v24);
LABEL_40:
    CFRelease(v22);
    return v20;
  }
  v11 = sub_1000604F0();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    sub_1000BFF58(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_4:

  return 0;
}

uint64_t sub_100052DA0(const __CFDictionary *a1)
{
  uint64_t v2;
  int64_t Count;
  const void **v4;
  uint64_t i;
  void *v6;
  const void *Value;
  void *v8;
  unsigned __int8 *v9;
  uint64_t j;
  CC_SHA1_CTX v12;

  if (!CFDictionaryGetCount(a1))
    return 0;
  memset(&v12, 0, sizeof(v12));
  v2 = sub_10005275C(CFSTR("dictionary"));
  Count = CFDictionaryGetCount(a1);
  v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  CFDictionaryGetKeysAndValues(a1, v4, 0);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v6 = (void *)sub_10005275C(v4[i]);
      Value = CFDictionaryGetValue(a1, v4[i]);
      v8 = (void *)sub_10005275C(Value);
      CC_SHA1_Init(&v12);
      v9 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x14uLL, 0x663AA81CuLL);
      if (v6)
      {
        CC_SHA1_Update(&v12, v6, 0x14u);
        free(v6);
      }
      if (v8)
      {
        CC_SHA1_Update(&v12, v8, 0x14u);
        free(v8);
      }
      CC_SHA1_Final(v9, &v12);
      if (v2 && v9)
      {
        for (j = 0; j != 20; ++j)
          *(_BYTE *)(v2 + j) ^= v9[j];
      }
      free(v9);
    }
  }
  free(v4);
  return v2;
}

unsigned __int8 *sub_100052F1C(const __CFNumber *a1)
{
  unsigned __int8 *v2;
  size_t v3;
  CFNumberType v4;
  void *v5;
  uint64_t valuePtr;

  v2 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x14uLL, 0xFF7F1A96uLL);
  valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
  if ((unint64_t)(valuePtr + 1) >= 0xE)
    v3 = 8;
  else
    v3 = 4;
  if ((unint64_t)(valuePtr + 1) < 0xE)
    v4 = kCFNumberSInt32Type;
  else
    v4 = kCFNumberSInt64Type;
  v5 = malloc_type_calloc(1uLL, v3, 0xD98972E9uLL);
  CFNumberGetValue(a1, v4, v5);
  CC_SHA1(v5, v3, v2);
  free(v5);
  return v2;
}

uint64_t sub_100052FE0(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;
  CFRange v7;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    v7.location = 0;
    v7.length = v3;
    if (CFArrayGetCountOfValue(a1, v7, ValueAtIndex) >= 2)
      break;
    if (v3 == ++v4)
      return 0;
  }
  return 1;
}

void sub_100053058(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1000532FC(id a1)
{
  MSDFindMyHub *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  v1 = objc_alloc_init(MSDFindMyHub);
  v2 = (void *)qword_100175330;
  qword_100175330 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTargetDevice sharedInstance](MSDTargetDevice, "sharedInstance"));
  objc_msgSend((id)qword_100175330, "setDevice:", v3);

  v5 = (id)objc_opt_new(NSMutableString, v4);
  objc_msgSend((id)qword_100175330, "setStoresSearched:", v5);

}

void sub_100053FD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _DWORD v12[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
  v5 = objc_msgSend(v3, "eligible");
  v6 = objc_msgSend(v3, "showUI");

  if (!v4)
  {
    v7 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109120;
      v12[1] = (_DWORD)v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Successfully checked in device to DU; saving device eligibility: %d",
        (uint8_t *)v12,
        8u);
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPreferencesFile sharedInstance](MSDPreferencesFile, "sharedInstance"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5));
    objc_msgSend(v9, "setObject:forKey:", v10, CFSTR("DemoEligible"));

  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    (*(void (**)(uint64_t, id, id, void *))(v11 + 16))(v11, v5, v6, v4);

}

void sub_1000542AC(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "error"));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_100054588(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = a2;
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "data"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));

    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v5, v4);
  }
}

void sub_1000546D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100054898(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Cellular plan did change, retrying enrollment in Offline Mode", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "handleEnrollmentRetryUponFirstLaunch");
}

void sub_100054D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100054D78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100054D88(uint64_t a1)
{

}

void sub_100054D90(uint64_t a1, char a2, int a3, id obj)
{
  id v7;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
  v7 = obj;
  **(_BYTE **)(a1 + 48) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_100055960(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  int v22;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toString"));
    v5 = *(unsigned __int8 *)(a1 + 48);
    v19 = 138543618;
    v20 = v4;
    v21 = 1026;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FMH retry timer scheduled: %{public}@, isFirstLaunch: %{public, BOOL}d", (uint8_t *)&v19, 0x12u);

  }
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "retryTimer"));
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "retryTimer"));
    v9 = objc_msgSend(v8, "isValid");

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "retryTimer"));
      objc_msgSend(v10, "invalidate");

      objc_msgSend(*(id *)(a1 + 40), "setRetryTimer:", 0);
    }
  }
  v11 = objc_alloc((Class)NSTimer);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v14, CFSTR("isFirstLaunch")));
  v16 = objc_msgSend(v11, "initWithFireDate:interval:target:selector:userInfo:repeats:", v12, v13, "handleRetryTimerFireForEnrollment:", v15, 0, 0.0);
  objc_msgSend(*(id *)(a1 + 40), "setRetryTimer:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "retryTimer"));
  objc_msgSend(v17, "addTimer:forMode:", v18, NSDefaultRunLoopMode);

}

id sub_100055C34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "retryEnrollmentWithHub:", *(unsigned __int8 *)(a1 + 40));
}

void sub_100055F24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100056934(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100056AC8(id a1)
{
  MSDDeviceDataCollector *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = objc_alloc_init(MSDDeviceDataCollector);
  v2 = (void *)qword_100175340;
  qword_100175340 = (uint64_t)v1;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUIDString"));
  objc_msgSend((id)qword_100175340, "setSessionUUID:", v3);

}

void sub_100056B98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100056DBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100057024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100057044(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_1000C03DC((uint64_t)v3, v5);

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("bundleID")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("executableName")));
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("sessionStartTime")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringFromDate:", v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("sessionEndTime")));
  v12 = objc_opt_class(NSDate, v11);
  if ((objc_opt_isKindOfClass(v10, v12) & 1) != 0)
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringFromDate:", v10));
  else
    v13 = CFSTR("<NOT_SET>");
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("appDuration")));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAnalyticsEventHandler sharedInstance](MSDAnalyticsEventHandler, "sharedInstance"));
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v19 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v18 + 24) = v19 + 1;
  objc_msgSend(v14, "doubleValue");
  objc_msgSend(v15, "sendAppUsageDataEvent:withExecutable:sessionUUID:sessionStart:sessionEnd:sessionDuration:appOrder:appDuration:", v20, v6, v17, v9, v13, v16, v19);

}

void sub_100057A28(id a1)
{
  MSDNPIMaskValues *v1;
  MSDNPIMaskValues *v2;
  void *v3;
  id v4;

  v1 = [MSDNPIMaskValues alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[MSDPreferencesFile sharedInstance](MSDPreferencesFile, "sharedInstance"));
  v2 = -[MSDNPIMaskValues initWithPreferencesFile:](v1, "initWithPreferencesFile:", v4);
  v3 = (void *)qword_100175350;
  qword_100175350 = (uint64_t)v2;

}

void sub_100059B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;

  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Block_object_dispose(&STACK[0x310], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100059C2C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100059C3C(uint64_t a1)
{

}

void sub_100059C44(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 v7;
  id v8;
  NSObject *v9;
  void *v10;
  id obj;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[4] + 8) + 40), "objectAtIndex:", a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "objectForKey:", v3));
  v5 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
  v6 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v6 + 40);
  v7 = objc_msgSend(v5, "createSymbolicLinkAtPath:withDestinationPath:error:", v3, v4, &obj);
  objc_storeStrong((id *)(v6 + 40), obj);
  if ((v7 & 1) == 0)
  {
    v8 = sub_1000604F0();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "localizedDescription"));
      *(_DWORD *)buf = 138543874;
      v13 = v3;
      v14 = 2114;
      v15 = v4;
      v16 = 2114;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Could not create link from %{public}@ to %{public}@ - %{public}@", buf, 0x20u);

    }
    *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = 0;
  }

}

void sub_100059DB0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  id v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[4] + 8) + 40), "objectAtIndex:", a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "objectForKey:", v3));
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("ZERO_SIZE")))
  {
    if ((objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "createFileAtPath:contents:attributes:", v3, 0, 0) & 1) == 0)
    {
      v5 = objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727740944, CFSTR("Cannot write file.")));
      v6 = *(_QWORD *)(a1[7] + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

      v8 = sub_1000604F0();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 138543362;
        v15 = v3;
        v10 = "Could not create empty file at %{public}@";
        v11 = v9;
        v12 = 12;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, v12);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  else if ((objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "copyFileIfPresentInCache:toLocation:verifyHash:", v4, v3, *(unsigned __int8 *)(*(_QWORD *)(a1[9] + 8) + 24)) & 1) == 0)
  {
    v13 = sub_1000604F0();
    v9 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138543618;
      v15 = v4;
      v16 = 2114;
      v17 = v3;
      v10 = "Could not copy file %{public}@ from content cache to %{public}@";
      v11 = v9;
      v12 = 22;
      goto LABEL_9;
    }
LABEL_10:

    *(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) = 0;
  }

}

uint64_t sub_10005C704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(*(id *)(a1 + 32), "setMetadata:forFile:", a2, a3);
  return 1;
}

BOOL sub_10005D084(id a1, NSURL *a2, NSError *a3)
{
  NSURL *v4;
  NSError *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v10;
  const char *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  NSURL *v15;
  __int16 v16;
  NSError *v17;

  v4 = a2;
  v5 = a3;
  v6 = sub_1000604F0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL path](v4, "path"));
    v10 = 136315906;
    v11 = "-[MSDManifest enumerateAndCollectMetaData:relativeTo:skip:superSet:handler:]_block_invoke";
    v12 = 2114;
    v13 = v8;
    v14 = 2114;
    v15 = v4;
    v16 = 2114;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s: Could not enumerate %{public}@, url=%{public}@, error=%{public}@", (uint8_t *)&v10, 0x2Au);

  }
  return 1;
}

id sub_10005D6F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateFDCforRequest:", *(_QWORD *)(a1 + 40));
}

void sub_10005DF28(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  id v8;

  if ((uint64_t)objc_msgSend(*(id *)(a1 + 32), "downloadedSize") >= 1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadSource"));

    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadSource"));
      v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("localCachingHub"));
      v5 = CFSTR("remote");
      if (v4)
        v5 = CFSTR("local");
      v6 = v5;

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleInProgress"));

      objc_msgSend(v8, "updateDownloadedContent:fromSource:", objc_msgSend(*(id *)(a1 + 32), "downloadedSize"), v6);
    }
  }
}

id sub_10005E014(id *a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  char *v9;
  void *v10;
  void *v11;
  int v13;
  void *v14;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "fileInfo"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fileHash"));
    v13 = 138543362;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to download file again: %{public}@", (uint8_t *)&v13, 0xCu);

  }
  v6 = sub_100060640();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v9 = (char *)objc_msgSend(WeakRetained, "signpostId");

  if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "fileInfo"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "fileHash"));
    v13 = 138412290;
    v14 = v11;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, (os_signpost_id_t)v9, "Retry File Download", "File download retry: %{xcode:string}@", (uint8_t *)&v13, 0xCu);

  }
  objc_msgSend(a1[4], "setRetryCount:", (char *)objc_msgSend(a1[4], "retryCount") - 1);
  return objc_msgSend(a1[5], "_dispatchRequest:", a1[4]);
}

void sub_10005E7F8(id a1)
{
  MSDTestPreferences *v1;
  void *v2;

  v1 = objc_alloc_init(MSDTestPreferences);
  v2 = (void *)qword_100175368;
  qword_100175368 = (uint64_t)v1;

}

void sub_10005F684(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_10005F698(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_activate");

}

void sub_10005F764(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_10005F778(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_deactivate");

}

void sub_10005FBE4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  _Unwind_Resume(a1);
}

void sub_10005FC30(id a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1000604F0();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_1000C1270(v2, v3, v4, v5, v6, v7, v8, v9);

}

void sub_10005FC70(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = sub_1000604F0();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MSDRapportDeviceAdvertiser: XPC connection to RPCompanionLinkClient invalidated!", v3, 2u);
  }

}

void sub_10005FCD4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleLocalDeviceUpdated");

}

void sub_10005FD00(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleRPCompanionClientActivateCompletionWithError:", v3);

}

void sub_10005FD48(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;

  v2 = a2;
  v3 = sub_1000604F0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1000C12A0(v2);

}

void sub_10005FD98(id a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1000604F0();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_1000C131C(v2, v3, v4, v5, v6, v7, v8, v9);

}

void sub_10005FDD8(id a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1000604F0();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_1000C134C(v2, v3, v4, v5, v6, v7, v8, v9);

}

void sub_10005FE18(uint64_t a1, uint64_t a2, void *a3)
{
  id *v4;
  id v5;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_handleShowPassword:withFlags:", v5, a2);

}

void sub_10005FE70(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleHidePasswordWithFlags:", a2);

}

id sub_1000604F0()
{
  if (qword_100175380 != -1)
    dispatch_once(&qword_100175380, &stru_10013EDA0);
  return (id)qword_100175378;
}

void sub_100060530(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.MobileStoreDemo", "Default");
  v2 = (void *)qword_100175378;
  qword_100175378 = (uint64_t)v1;

}

id sub_100060560()
{
  if (qword_100175390 != -1)
    dispatch_once(&qword_100175390, &stru_10013EDC0);
  return (id)qword_100175388;
}

void sub_1000605A0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.MobileStoreDemo", "ScreenSaver");
  v2 = (void *)qword_100175388;
  qword_100175388 = (uint64_t)v1;

}

id sub_1000605D0()
{
  if (qword_1001753A0 != -1)
    dispatch_once(&qword_1001753A0, &stru_10013EDE0);
  return (id)qword_100175398;
}

void sub_100060610(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.MobileStoreDemo", "Message");
  v2 = (void *)qword_100175398;
  qword_100175398 = (uint64_t)v1;

}

id sub_100060640()
{
  if (qword_1001753B0 != -1)
    dispatch_once(&qword_1001753B0, &stru_10013EE00);
  return (id)qword_1001753A8;
}

void sub_100060680(id a1)
{
  os_log_t v1;
  id v2;
  void *v3;

  if (os_variant_has_internal_content("com.apple.mobilestoredemod"))
  {
    v1 = os_log_create("com.apple.MobileStoreDemo", "Signpost");
  }
  else
  {
    v1 = (os_log_t)&_os_log_disabled;
    v2 = &_os_log_disabled;
  }
  v3 = (void *)qword_1001753A8;
  qword_1001753A8 = (uint64_t)v1;

}

void sub_1000606DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  void *v10;

  v9 = a1;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[MSDLogModel sharedInstance](MSDLogModel, "sharedInstance"));
  objc_msgSend(v10, "logWithFormat:andArgs:", v9, &a9);

}

void sub_100060778(id a1)
{
  MSDLogModel *v1;
  void *v2;

  v1 = objc_alloc_init(MSDLogModel);
  v2 = (void *)qword_1001753B8;
  qword_1001753B8 = (uint64_t)v1;

}

void sub_100060914(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100060CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100060CBC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100060CCC(uint64_t a1)
{

}

void sub_100060CD4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringByAppendingFormat:", CFSTR("/%@"), a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
  NSLog(CFSTR("Checking existing log file (full path) %@ against %@"), v14, v6);

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "attributesOfItemAtPath:error:", v14, 0));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fileCreationDate"));
  v11 = objc_msgSend(v10, "compare:", *(_QWORD *)(a1 + 40));

  if (v11 == (id)-1)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fileCreationDate"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "description"));
    NSLog(CFSTR("Removing %@ whose creation date is %@."), v14, v13);

    objc_msgSend(*(id *)(a1 + 48), "removeItemAtPath:error:", v14, 0);
  }
  *a4 = 0;

}

void sub_100060F70(id a1)
{
  MSDMailProcessor *v1;
  void *v2;

  v1 = objc_alloc_init(MSDMailProcessor);
  v2 = (void *)qword_1001753C8;
  qword_1001753C8 = (uint64_t)v1;

}

void sub_1000613E4(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  double v6;
  id v7;
  void *v8;
  id v9;
  id v10;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "pingTimer"));

  if (v3)
  {
    v4 = objc_loadWeakRetained(v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pingTimer"));
    objc_msgSend(v5, "invalidate");

  }
  v10 = objc_loadWeakRetained(v1);
  v6 = (double)(unint64_t)objc_msgSend(v10, "pingInterval");
  v7 = objc_loadWeakRetained(v1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v7, "handlePingTimerTicking:", 0, 1, v6));
  v9 = objc_loadWeakRetained(v1);
  objc_msgSend(v9, "setPingTimer:", v8);

}

void sub_1000616F8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  id v16;
  uint8_t buf[4];
  void *v18;

  v2 = objc_autoreleasePoolPush();
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  v4 = sub_1000605D0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ping and process command (if any)", buf, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pingWithType:", *(_QWORD *)(a1 + 40)));
  if (v6)
  {
    v7 = sub_1000605D0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received a request: %{public}@", buf, 0xCu);
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[MSDWorkQueueSet sharedInstance](MSDWorkQueueSet, "sharedInstance"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "messageQueue"));
    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_1000618F4;
    v14 = &unk_10013DE28;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = v6;
    dispatch_async(v10, &v11);

  }
  objc_msgSend(*(id *)(a1 + 32), "setQueuedPingType:", (unint64_t)objc_msgSend(*(id *)(a1 + 32), "queuedPingType", v11, v12, v13, v14, v15) & ~*(_QWORD *)(a1 + 40));

  objc_sync_exit(v3);
  objc_autoreleasePoolPop(v2);
}

void sub_1000618D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000618F4(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "processRequest:", *(_QWORD *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_100063404(uint64_t a1)
{
  void *v1;
  unsigned __int8 v2;
  id v3;
  NSObject *v4;
  id v5;

  if (*(_BYTE *)(a1 + 44)
    && (objc_msgSend(*(id *)(a1 + 32), "updateContentWithDeadline:", *(unsigned int *)(a1 + 40)) & 1) == 0)
  {
    v5 = sub_1000605D0();
    v4 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000C1A28();
  }
  else
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[MSDDemoUpdateController sharedInstance](MSDDemoUpdateController, "sharedInstance"));
    v2 = objc_msgSend(v1, "updateDemoContent");

    if ((v2 & 1) != 0)
      return;
    v3 = sub_1000605D0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000C19FC();
  }

}

void sub_1000634A8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSDOSUpdaterController sharedInstance](MSDOSUpdaterController, "sharedInstance"));
  objc_msgSend(v1, "startOSUpdate");

}

void sub_100063CAC(id a1)
{
  MSDKeychainManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDKeychainManager);
  v2 = (void *)qword_1001753D8;
  qword_1001753D8 = (uint64_t)v1;

}

void sub_100063EAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100064058(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100064178(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000643D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100064560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100064ED4(id a1)
{
  MSDLocalEventStreamHandler *v1;
  void *v2;

  v1 = objc_alloc_init(MSDLocalEventStreamHandler);
  v2 = (void *)qword_1001753F0;
  qword_1001753F0 = (uint64_t)v1;

}

id sub_100064F94(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleEvent:fromStream:", a2, "com.apple.fsevents.matching");
}

void sub_1000666F0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observer"));
  objc_msgSend(v2, "operation:didProduceNewOperation:forRollback:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));

}

void sub_100066BD8(id a1)
{
  MSDProcessTestEvents *v1;
  void *v2;

  v1 = objc_alloc_init(MSDProcessTestEvents);
  v2 = (void *)qword_100175400;
  qword_100175400 = (uint64_t)v1;

}

void sub_100066D20(id a1, NSString *a2)
{
  NSLog(CFSTR("Received reply from demod:%@"), a2);
}

void sub_100067738(id a1)
{
  MSDAccountManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAccountManager);
  v2 = (void *)qword_100175410;
  qword_100175410 = (uint64_t)v1;

}

void sub_100067920(id a1, int a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received notification for trusted peer change!", v5, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTargetDevice sharedInstance](MSDTargetDevice, "sharedInstance"));
  objc_msgSend(v4, "saveiCloudAccountSyncNeeded:", 1);

}

void sub_100069E48(id a1)
{
  MSDAppHelper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAppHelper);
  v2 = (void *)qword_100175420;
  qword_100175420 = (uint64_t)v1;

}

void sub_10006AF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006AF9C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "demuxQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006B050;
  v6[3] = &unk_10013DDB8;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  v7 = v3;
  v5 = v3;
  dispatch_barrier_sync(v4, v6);

  objc_destroyWeak(&v8);
}

void sub_10006B050(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "handleDownloadPaused:", *(_QWORD *)(a1 + 32));

}

void sub_10006B08C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "demuxQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006B140;
  v6[3] = &unk_10013DDB8;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  v7 = v3;
  v5 = v3;
  dispatch_barrier_sync(v4, v6);

  objc_destroyWeak(&v8);
}

void sub_10006B140(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "handleDownloadAborted:", *(_QWORD *)(a1 + 32));

}

id sub_10006B260(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dispatchSessionTask:", *(_QWORD *)(a1 + 40));
}

id sub_10006D8E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dispatchSessionTask:", *(_QWORD *)(a1 + 40));
}

void sub_10006DDC8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

id sub_10006DDF4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "count");
}

void sub_10006DE40(id a1)
{
  MSDAnalyticsEventHandler *v1;
  void *v2;

  v1 = objc_alloc_init(MSDAnalyticsEventHandler);
  v2 = (void *)qword_100175430;
  qword_100175430 = (uint64_t)v1;

}

void sub_10006FF44(id a1)
{
  MSDBAAInterface *v1;
  void *v2;

  v1 = objc_alloc_init(MSDBAAInterface);
  v2 = (void *)qword_100175440;
  qword_100175440 = (uint64_t)v1;

}

void sub_100070244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100070274(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a3;
  v7 = a4;
  if (a2 && v11)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPrivateKey:", a2);
    v8 = objc_msgSend(v11, "mutableCopy");
    objc_msgSend(*(id *)(a1 + 32), "setClientCertArray:", v8);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientCertArray"));
    (*(void (**)(uint64_t, void *, id, id))(v9 + 16))(v9, v10, objc_msgSend(*(id *)(a1 + 32), "privateKey"), v7);

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_100071B34(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000C34F4(v3, v5);

  }
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "semaphore"));
  dispatch_semaphore_signal(v6);

}

void sub_1000721CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007221C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007222C(uint64_t a1)
{

}

void sub_100072234(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;

  v5 = a3;
  if (v5)
  {
    v6 = sub_1000604F0();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000C36B8();

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  }
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "semaphore"));
  dispatch_semaphore_signal(v8);

}

void sub_1000722C4(uint64_t a1, void *a2, char a3)
{
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;

  v6 = a2;
  if (v6)
  {
    v7 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000C371C();

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a3;
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "semaphore"));
  dispatch_semaphore_signal(v9);

}

void sub_10007236C(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;

  v4 = a2;
  if (v4)
  {
    v5 = sub_1000604F0();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1000C3780();

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "semaphore"));
  dispatch_semaphore_signal(v7);

}

void sub_1000742C8(id a1)
{
  MSDBackgroundDownload *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = objc_alloc_init(MSDBackgroundDownload);
  v2 = (void *)qword_100175450;
  qword_100175450 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "backgroundBundle"));
  objc_msgSend((id)qword_100175450, "setBundleDownloadInProgress:", v4);

  objc_msgSend((id)qword_100175450, "setIsBackgroundDownloadQueueEmpty:", 1);
}

void sub_10007443C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100074454(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  MSDComponentBuilder *v18;
  void *v19;
  MSDComponentProcessor *v20;
  MSDComponentManager *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  NSObject *v38;
  id v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t v43[16];
  uint8_t v44;
  _BYTE v45[15];

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDSystemMonitor sharedInstance](MSDSystemMonitor, "sharedInstance"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSDHelperAgent sharedInstance](MSDHelperAgent, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MSDTargetDevice sharedInstance](MSDTargetDevice, "sharedInstance"));
  objc_msgSend(*(id *)(a1 + 32), "setDevice:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
  objc_msgSend(v6, "setBackgroundDownloadActive:", 1);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
  objc_msgSend(v7, "manageDeviceSnapshot:", CFSTR("MountSnapshot"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "backgroundBundle"));
  objc_msgSend(*(id *)(a1 + 32), "setBundleDownloadInProgress:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleDownloadInProgress"));
  objc_msgSend(v10, "startBundleUpdateTimer");

  if (!objc_msgSend(v4, "stageDeviceForUpdateProcess:", 1))
  {
    v29 = sub_1000604F0();
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      sub_1000C3AA0(v30, v31, v32);
    goto LABEL_17;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "initiateBackgroundDownload"));
  if (!v11)
  {
    v12 = 0;
    do
    {
      v13 = sub_1000604F0();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000C3A6C(&v44, v45, v14);

      v15 = v12 + 1;
      sleep(0x3Cu);
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "initiateBackgroundDownload"));
      v11 = (void *)v16;
      if (v16)
        break;
    }
    while (v12++ < 4);
    if (!v16)
    {
      v33 = sub_1000604F0();
      v30 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        sub_1000C39C0(v15, v30);
LABEL_17:

      v20 = 0;
      v19 = 0;
      goto LABEL_18;
    }
  }
  v18 = -[MSDComponentBuilder initWithSignedManifest:andOptions:]([MSDComponentBuilder alloc], "initWithSignedManifest:andOptions:", v11, &off_10014E7B8);
  v19 = (void *)objc_claimAutoreleasedReturnValue(-[MSDComponentBuilder buildComponentsFromManifest](v18, "buildComponentsFromManifest"));
  if (!v19)
  {
    v39 = sub_1000604F0();
    v40 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      sub_1000C3A34(v40, v41, v42);

    v20 = 0;
    goto LABEL_12;
  }

  v20 = -[MSDComponentProcessor initWithQoS:]([MSDComponentProcessor alloc], "initWithQoS:", 9);
  v21 = -[MSDComponentManager initWithComponents:andProcessor:]([MSDComponentManager alloc], "initWithComponents:andProcessor:", v19, v20);
  objc_msgSend(*(id *)(a1 + 32), "setComponentManager:", v21);

  objc_msgSend(v3, "registerObserver:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "startSystemIdleDetection");
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "componentManager"));
  objc_msgSend(v22, "startProcessingAllComponents");

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "componentManager"));
  v24 = objc_msgSend(v23, "waitForProcessingCompletionTillDate:outError:", 0, 0);

  objc_msgSend(v3, "unregisterObserver");
  objc_msgSend(v3, "stopSystemIdleDetection");
  if (v24)
  {
LABEL_12:
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleDownloadInProgress"));
    objc_msgSend(v25, "setBundleStateAs:", 3);

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
    v27 = v26;
    v28 = 3;
    goto LABEL_19;
  }
LABEL_18:
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleDownloadInProgress"));
  objc_msgSend(v34, "setBundleStateAs:", 4);

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
  v27 = v26;
  v28 = 4;
LABEL_19:
  objc_msgSend(v26, "setBackgroundDownloadState:", v28);

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
  objc_msgSend(v35, "manageDeviceSnapshot:", CFSTR("UnmountSnapshot"));

  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleDownloadInProgress"));
  objc_msgSend(v36, "stopBundleUpdateTimer");

  v37 = sub_1000604F0();
  v38 = objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Can not continue background download. Exiting...", v43, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setIsBackgroundDownloadQueueEmpty:", 1);
  objc_autoreleasePoolPop(v2);
}

void sub_100074BB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100074D40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100074EE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100075094(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_100075644(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100075840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10007591C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100075B8C(id a1)
{
  MSDLanguageAndRegionManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDLanguageAndRegionManager);
  v2 = (void *)qword_100175460;
  qword_100175460 = (uint64_t)v1;

}

void sub_100075E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100075EAC(uint64_t result)
{
  uint64_t v1;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 24) != -1)
  {
    v1 = result;
    v2 = sub_1000604F0();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Deadline for Springboard restart passed.", v4, 2u);
    }

    objc_msgSend(*(id *)(v1 + 32), "cancelNotifyToken:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8) + 24));
    result = *(_QWORD *)(v1 + 40);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_100075F50(uint64_t a1)
{
  uint64_t result;
  id v3;
  NSObject *v4;
  uint8_t v5[16];
  uint64_t state64;
  int out_token;

  out_token = 0;
  notify_register_check("com.apple.springboard.finishedstartup", &out_token);
  result = out_token;
  if (out_token != -1)
  {
    state64 = 0;
    result = notify_get_state(out_token, &state64);
    if (state64)
    {
      v3 = sub_1000604F0();
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Springboard restarted.", v5, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "cancelNotifyToken:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
      result = *(_QWORD *)(a1 + 40);
      if (result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
    }
  }
  return result;
}

void sub_1000775FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));

  if (v6)
  {
    v7 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parseResponseForError:andPayload:", v9, v5));
    ((void (**)(_QWORD, void *))v7)[2](v7, v8);

  }
}

void sub_100077910(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));

  if (v6)
  {
    v7 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parseResponseForError:andPayload:", v9, v5));
    ((void (**)(_QWORD, void *))v7)[2](v7, v8);

  }
}

void sub_100077A18(id a1)
{
  MSDLocalization *v1;
  void *v2;

  v1 = objc_alloc_init(MSDLocalization);
  v2 = (void *)qword_100175470;
  qword_100175470 = (uint64_t)v1;

}

void sub_100077E34(uint64_t a1)
{
  void *v2;
  __objc2_class **p_superclass;
  unsigned int v4;
  id v5;
  NSObject *v6;
  BOOL v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  __CFString *v31;
  void *v32;
  unsigned int v33;
  NSObject *v34;
  id v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  NSObject *v48;
  void *v49;
  NSObject *obj;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  id v59;
  id v60;
  uint8_t buf[4];
  void *v62;
  _QWORD v63[3];
  _QWORD v64[3];
  _BYTE v65[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/MobileStoreDemoKit.framework")));
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  p_superclass = &OBJC_METACLASS___MSDBackgroundDownload.superclass;
  v59 = 0;
  v60 = 0;
  v4 = +[MSDLocalization getWarningKeys:andPlaceHolderWarnings:forOwnershipWarningFlag:](MSDLocalization, "getWarningKeys:andPlaceHolderWarnings:forOwnershipWarningFlag:", &v60, &v59, *(_QWORD *)(a1 + 32));
  v5 = v60;
  v6 = v59;
  if (v2)
    v7 = v4 == 0;
  else
    v7 = 1;
  if (v7)
  {
    v8 = sub_1000604F0();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1000C468C(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizations"));
    v9 = v17;
    if (v17 && (v19 = objc_opt_class(NSArray, v18), (objc_opt_isKindOfClass(v9, v19) & 1) != 0))
    {
      v20 = sub_1000604F0();
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        sub_1000C4614();
      v48 = v6;

      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v9 = v9;
      v52 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v55, v65, 16);
      if (v52)
      {
        v51 = *(_QWORD *)v56;
        v54 = kMMSDPropertyClaimTitleKey;
        v53 = kMMSDPropertyClaimBodyKey;
        v23 = kMMSDPropertyClaimLinkKey;
        *(_QWORD *)&v22 = 138543362;
        v47 = v22;
        obj = v9;
        do
        {
          v24 = 0;
          do
          {
            if (*(_QWORD *)v56 != v51)
              objc_enumerationMutation(obj);
            v25 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)v24);
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v54, v47));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:localization:", v26, 0, 0, v25));

            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v53));
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:localization:", v28, 0, 0, v25));

            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v23));
            v31 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:localization:", v30, 0, 0, v25));

            if (!v31
              || (v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v23)),
                  v33 = -[__CFString isEqualToString:](v31, "isEqualToString:", v32),
                  v32,
                  v33))
            {

              v31 = &stru_100141020;
            }
            if (v27 && v29)
            {
              v63[0] = v54;
              v63[1] = v53;
              v64[0] = v27;
              v64[1] = v29;
              v63[2] = v23;
              v64[2] = v31;
              v34 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v64, v63, 3));
              objc_msgSend(v49, "setObject:forKey:", v34, v25);
              if (objc_msgSend(v25, "isEqualToString:", CFSTR("en")))
              {
                v34 = v34;

                v48 = v34;
              }
            }
            else
            {
              v35 = sub_1000604F0();
              v34 = objc_claimAutoreleasedReturnValue(v35);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v47;
                v62 = v25;
                _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "ERROR - Either title, body or link localized text is missing for locale:  %{public}@", buf, 0xCu);
              }
            }

            v24 = (char *)v24 + 1;
          }
          while (v52 != v24);
          v9 = obj;
          v52 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v55, v65, 16);
        }
        while (v52);
      }

      p_superclass = (__objc2_class **)(&OBJC_METACLASS___MSDBackgroundDownload + 8);
      v6 = v48;
    }
    else
    {
      v36 = sub_1000604F0();
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        sub_1000C4590(v37, v38, v39, v40, v41, v42, v43, v44);

    }
  }

  objc_msgSend(p_superclass + 44, "fillInMissingLocales:withOwnershipWarningMsg:", v49, v6);
  v45 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v49));
  v46 = (void *)qword_100175480;
  qword_100175480 = v45;

}

void sub_100078414(id a1)
{
  void *v1;

  v1 = (void *)qword_100175490;
  qword_100175490 = (uint64_t)&off_10014E5D0;

}

void sub_100078AB0(id a1)
{
  MSDStoreHoursManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDStoreHoursManager);
  v2 = (void *)qword_1001754A0;
  qword_1001754A0 = (uint64_t)v1;

}

void sub_100078C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100078C74(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "expirationTimer"));
  objc_msgSend(v1, "fire");

}

void sub_100079FC4(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  int v19;
  void *v20;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "expirationTimer"));

  if (v4)
  {
    v5 = objc_loadWeakRetained(v2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "expirationTimer"));
    objc_msgSend(v6, "invalidate");

    v7 = objc_loadWeakRetained(v2);
    objc_msgSend(v7, "setExpirationTimer:", 0);

  }
  v8 = objc_alloc((Class)NSTimer);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = objc_loadWeakRetained(v2);
  v11 = objc_msgSend(v8, "initWithFireDate:interval:target:selector:userInfo:repeats:", v9, v10, "storeHourSettingsExpirationHandler:", 0, 0, 0.0);
  v12 = objc_loadWeakRetained(v2);
  objc_msgSend(v12, "setExpirationTimer:", v11);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
  v14 = objc_loadWeakRetained(v2);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "expirationTimer"));
  objc_msgSend(v13, "addTimer:forMode:", v15, NSDefaultRunLoopMode);

  v16 = sub_1000604F0();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toString"));
    v19 = 138543362;
    v20 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Store hour settings will expire on %{public}@", (uint8_t *)&v19, 0xCu);

  }
}

void sub_10007A300(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "storeOpenTimer"));

  if (v4)
  {
    v5 = objc_loadWeakRetained(v2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "storeOpenTimer"));
    objc_msgSend(v6, "invalidate");

    v7 = objc_loadWeakRetained(v2);
    objc_msgSend(v7, "setStoreOpenTimer:", 0);

  }
  v8 = objc_alloc((Class)NSTimer);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = objc_loadWeakRetained(v2);
  v11 = objc_msgSend(v8, "initWithFireDate:interval:target:selector:userInfo:repeats:", v9, v10, "storeOpenHandler:", 0, 0, 0.0);
  v12 = objc_loadWeakRetained(v2);
  objc_msgSend(v12, "setStoreOpenTimer:", v11);

  v15 = (id)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
  v13 = objc_loadWeakRetained(v2);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "storeOpenTimer"));
  objc_msgSend(v15, "addTimer:forMode:", v14, NSDefaultRunLoopMode);

}

void sub_10007A59C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "storeCloseTimer"));

  if (v4)
  {
    v5 = objc_loadWeakRetained(v2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "storeCloseTimer"));
    objc_msgSend(v6, "invalidate");

    v7 = objc_loadWeakRetained(v2);
    objc_msgSend(v7, "setStoreCloseTimer:", 0);

  }
  v8 = objc_alloc((Class)NSTimer);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = objc_loadWeakRetained(v2);
  v11 = objc_msgSend(v8, "initWithFireDate:interval:target:selector:userInfo:repeats:", v9, v10, "storeCloseHandler:", 0, 0, 0.0);
  v12 = objc_loadWeakRetained(v2);
  objc_msgSend(v12, "setStoreCloseTimer:", v11);

  v15 = (id)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
  v13 = objc_loadWeakRetained(v2);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "storeCloseTimer"));
  objc_msgSend(v15, "addTimer:forMode:", v14, NSDefaultRunLoopMode);

}

void sub_10007A8E0(id a1)
{
  MSDProgressUpdater *v1;
  void *v2;

  v1 = objc_alloc_init(MSDProgressUpdater);
  v2 = (void *)qword_1001754B0;
  qword_1001754B0 = (uint64_t)v1;

}

void sub_10007BB30(id a1, MSDServerResponse *a2)
{
  MSDServerResponse *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  void *v9;

  v2 = a2;
  v3 = sub_1000604F0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[MSDServerResponse error](v2, "error"));
    v6 = 136315394;
    v7 = "-[MSDProgressUpdater demoUpdateCompleted:]_block_invoke";
    v8 = 2114;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: sent done status to hub; error=%{public}@",
      (uint8_t *)&v6,
      0x16u);

  }
}

void sub_10007C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007C318(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  char v6;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000C4E7C(a1, (uint64_t)v3, v5);

    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v6;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_10007E590(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_10007EADC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lowercaseString"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_10007EB60(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", CFSTR("Host"), CFSTR("X-Apple-HMAC-Sent-Timestamp"), 0);
  v2 = (void *)qword_1001754C0;
  qword_1001754C0 = (uint64_t)v1;

}

void sub_10007F5EC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("X-Apple-HMAC-Sent-Timestamp"), "lowercaseString"));
  v2 = (void *)qword_1001754D8;
  qword_1001754D8 = v1;

}

void sub_10007FF1C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("X-Apple-HMAC-Sent-Timestamp"), "lowercaseString"));
  v2 = (void *)qword_1001754D8;
  qword_1001754D8 = v1;

}

void sub_10007FFD8(id a1)
{
  MSDSystemMonitor *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  NSSet *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v1 = objc_alloc_init(MSDSystemMonitor);
  v2 = (void *)qword_1001754E0;
  qword_1001754E0 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
  v4 = objc_msgSend(v3, "macOS");

  if (v4)
  {
    v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("com.apple.ist.demoloop"), CFSTR("com.apple.ScreenSaver.Engine"), CFSTR("com.apple.ist.DigitalSignage.iOS"), 0, v15, v16, v17);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
    v7 = objc_msgSend(v6, "iOS");

    if (v7)
    {
      v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("com.retailtech.arkenstone"), CFSTR("com.apple.ist.windward"), CFSTR("com.apple.ist.DemoDiscoveryApp"), CFSTR("com.apple.ist.demoloop"), CFSTR("com.apple.ist.DigitalCatalog"), CFSTR("com.apple.ist.DigitalSignage.iOS"), 0);
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
      v9 = objc_msgSend(v8, "watchOS");

      if (v9)
      {
        v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("com.apple.NanoDemo"), 0, v13, v14, v15, v16, v17);
      }
      else
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPlatform sharedInstance](MSDPlatform, "sharedInstance"));
        v11 = objc_msgSend(v10, "tvOS");

        if (!v11)
        {
          v12 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
          goto LABEL_10;
        }
        v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("com.apple.TVIdleScreen"), CFSTR("com.apple.PineBoard"), CFSTR("com.apple.IdleScreen"), 0, v15, v16, v17);
      }
    }
  }
  v12 = objc_claimAutoreleasedReturnValue(v5);
LABEL_10:
  v18 = (void *)v12;
  objc_msgSend((id)qword_1001754E0, "setForegroundAllowedApps:", v12);

}

void sub_100080460(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diskSpaceMonitoringTimer"));

  if (v3)
  {
    v4 = objc_loadWeakRetained(v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "diskSpaceMonitoringTimer"));
    objc_msgSend(v5, "invalidate");

  }
  v8 = objc_loadWeakRetained(v1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v8, "processDiskSpaceMonitorCallback", 0, 1, 300.0));
  v7 = objc_loadWeakRetained(v1);
  objc_msgSend(v7, "setDiskSpaceMonitoringTimer:", v6);

}

void sub_1000805C0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diskSpaceMonitoringTimer"));

  if (v3)
  {
    v4 = objc_loadWeakRetained(v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "diskSpaceMonitoringTimer"));
    objc_msgSend(v5, "invalidate");

    v6 = objc_loadWeakRetained(v1);
    objc_msgSend(v6, "setDiskSpaceMonitoringTimer:", 0);

  }
}

void sub_10008074C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100080944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100080970(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "processCoreDuetCallBack");

  return 1;
}

void sub_100080C6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100080D9C(id a1)
{
  MSDDemoUpdateController *v1;
  void *v2;

  v1 = objc_alloc_init(MSDDemoUpdateController);
  v2 = (void *)qword_1001754F0;
  qword_1001754F0 = (uint64_t)v1;

}

void sub_100081598(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100081E9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000827A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100082AD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100082CA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008312C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100083D5C(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;

  v5 = a3;
  if ((a2 & 1) == 0)
  {
    v6 = sub_1000604F0();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000C5C2C(v5, v7);

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10008620C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100086228(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100086238(uint64_t a1)
{

}

uint64_t sub_100086240(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  xpc_type_t type;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSNumber *v13;
  id v14;
  NSString *v15;
  NSNumber *v16;
  NSNumber *v17;
  void *v18;
  const void *bytes_ptr;
  size_t length;
  NSNumber *v21;
  NSDate *v22;
  void *v23;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, 4));
  type = xpc_get_type(v5);
  if (type == (xpc_type_t)&_xpc_type_BOOL)
  {
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v13 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", xpc_BOOL_get_value(v5));
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
LABEL_22:
    v23 = v14;
    objc_msgSend(v12, "setObject:forKey:", v14, v6);

    v11 = 1;
    goto LABEL_23;
  }
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v15 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", xpc_string_get_string_ptr(v5), 4);
    v14 = (id)objc_claimAutoreleasedReturnValue(v15);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_int64)
  {
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v16 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", xpc_int64_get_value(v5));
    v14 = (id)objc_claimAutoreleasedReturnValue(v16);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_uint64)
  {
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v17 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", xpc_uint64_get_value(v5));
    v14 = (id)objc_claimAutoreleasedReturnValue(v17);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    v18 = *(void **)(a1 + 32);
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v14 = objc_msgSend(v18, "initWithXPCDictionary:", v5);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = xpc_data_get_bytes_ptr(v5);
    length = xpc_data_get_length(v5);
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes_ptr, length));
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_array)
  {
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithXPCArray:](NSArray, "arrayWithXPCArray:", v5));
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_double)
  {
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v21 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", xpc_double_get_value(v5));
    v14 = (id)objc_claimAutoreleasedReturnValue(v21);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_date)
  {
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v22 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)xpc_date_get_value(v5));
    v14 = (id)objc_claimAutoreleasedReturnValue(v22);
    goto LABEL_22;
  }
  v8 = sub_1000604F0();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    sub_1000C65DC((uint64_t)v6, v9, v10);

  v11 = 0;
LABEL_23:

  return v11;
}

id sub_100086DA8()
{
  void *v0;

  return objc_msgSend(v0, "code");
}

void sub_100086FCC(id a1)
{
  MSDDemoManifestCheck *v1;
  void *v2;

  v1 = objc_alloc_init(MSDDemoManifestCheck);
  v2 = (void *)qword_100175500;
  qword_100175500 = (uint64_t)v1;

}

void sub_100088C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100088CA8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100088CB8(uint64_t a1)
{

}

void sub_100088CC0(uint64_t a1, const __CFData *a2, uint64_t a3, _BYTE *a4)
{
  SecCertificateRef v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  SecCertificateRef v18;

  v6 = SecCertificateCreateWithData(kCFAllocatorDefault, a2);
  if (v6)
  {
    v18 = v6;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v6);

  }
  else
  {
    v7 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000C74A8(v8, v9, v10, v11, v12, v13, v14, v15);

    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = 0;

    *a4 = 1;
  }
}

void sub_1000894FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100089530(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v10 = a2;
  v7 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v10))
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100089628;
    v11[3] = &unk_10013F550;
    v11[4] = *(_QWORD *)(a1 + 40);
    v8 = v10;
    v9 = *(_QWORD *)(a1 + 72);
    v12 = v8;
    v16 = v9;
    v13 = *(id *)(a1 + 48);
    v14 = *(id *)(a1 + 56);
    v15 = *(id *)(a1 + 64);
    v17 = a4;
    objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v11);

  }
}

void sub_100089628(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSObject *v13;
  char *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  unsigned int v18;
  id v19;
  NSObject *v20;
  unsigned __int8 v21;
  id v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  id v26;
  NSObject *v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  uint64_t v35;

  v7 = a2;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkType"));
  if (v9)
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkType"));
  else
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("RigorousCheckType")));
  v11 = (char *)v10;

  v12 = sub_1000604F0();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(char **)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    v29 = v7;
    v30 = 2114;
    v31 = v14;
    v32 = 2114;
    v33 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Name: %{public}@, Section Name: %{public}@, Check Type: %{public}@", buf, 0x20u);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getComponentData:", v8));
  if (objc_msgSend(v11, "isEqualToString:", CFSTR("Skip")))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }
  else if (objc_msgSend(v11, "isEqualToString:", CFSTR("Default")))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "runSecurityChecksForSection:dataType:componentName:options:", v15, *(_QWORD *)(a1 + 40), v7, *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (objc_msgSend(v11, "isEqualToString:", CFSTR("AppleISTCertCheck")))
    {
      v16 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), *(_QWORD *)(a1 + 40), v7));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allowedISTSignedComponents"));
      v18 = objc_msgSend(v17, "containsObject:", v16);

      if (v18)
      {
        if (objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 56))
          && objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", *(_QWORD *)(a1 + 64)))
        {
          v19 = sub_1000604F0();
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v29 = (const char *)v16;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "About to run app layout checks for %{public}@", buf, 0xCu);
          }

          v21 = objc_msgSend(*(id *)(a1 + 32), "runAppLayoutSecurityCheck:", v15);
        }
        else
        {
          v21 = objc_msgSend(*(id *)(a1 + 32), "runSecurityChecksForSection:dataType:componentName:options:", v15, *(_QWORD *)(a1 + 40), v7, *(_QWORD *)(a1 + 48));
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v21;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
        v24 = sub_1000604F0();
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          sub_1000C78C8();

      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
      v22 = sub_1000604F0();
      v16 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315906;
        v29 = "-[MSDDemoManifestCheck runSecurityCheck:]_block_invoke";
        v30 = 2114;
        v31 = v11;
        v32 = 2114;
        v33 = v7;
        v34 = 2114;
        v35 = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s: Unknown rigorous check type (%{public}@) for %{public}@ (from %{public}@).", buf, 0x2Au);
      }
    }

  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    v26 = sub_1000604F0();
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      sub_1000C7830((uint64_t)v7, a1, v27);

    *a4 = 1;
    **(_BYTE **)(a1 + 80) = 1;
  }

}

void sub_10008B098(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
    v9 = 138543618;
    v10 = v6;
    v11 = 2114;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notification received for entitlement check for: %{public}@ %{public}@", (uint8_t *)&v9, 0x16u);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
  objc_msgSend(*(id *)(a1 + 32), "setItemBeingInstalled:", v8);

}

void sub_10008C4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v8 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008C52C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10008C53C(uint64_t a1)
{

}

void sub_10008C544(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  MSDSignedManifestFactoryMetadata *v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  _QWORD v23[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pathExtension"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lowercaseString"));

  if (objc_msgSend(v5, "isEqualToString:", CFSTR("plist")))
  {
    v23[0] = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
    v23[1] = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](NSString, "pathWithComponents:", v6));

    v8 = sub_1000604F0();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 138543362;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Loading factory metadata from path %{public}@", (uint8_t *)&v21, 0xCu);
    }

    v10 = -[MSDSignedManifestFactoryMetadata initWithContentPlistFile:]([MSDSignedManifestFactoryMetadata alloc], "initWithContentPlistFile:", v7);
    v11 = *(_QWORD *)(a1[5] + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "addObject:");
    }
    else
    {
      v13 = sub_1000604F0();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000C7EF8((uint64_t)v7, v14, v15, v16, v17, v18, v19, v20);

    }
  }

}

void sub_10008D55C(id a1)
{
  MSDSettingsRefresher *v1;
  void *v2;

  v1 = objc_alloc_init(MSDSettingsRefresher);
  v2 = (void *)qword_100175518;
  qword_100175518 = (uint64_t)v1;

}

void sub_10008E420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008E43C(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)RadiosPreferences);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v2, "airplaneMode");

}

void sub_10008E540(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  v2 = objc_alloc_init((Class)RadiosPreferences);
  objc_msgSend(v2, "setAirplaneMode:", *(unsigned __int8 *)(a1 + 40));
  v3 = sub_1000604F0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 136315394;
    v7 = "-[MSDSettingsRefresher setAirplaneMode:]_block_invoke";
    v8 = 2114;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s - Set system airplane mode setting to %{public}@", (uint8_t *)&v6, 0x16u);
  }

}

void sub_1000909C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000909D8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_listenForIncomingRequestMessageOfID:", *(_QWORD *)(a1 + 32));

}

void sub_100090ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100090AF0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_listenForIncomingEventMessageOfID:", *(_QWORD *)(a1 + 32));

}

void sub_100090C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100090C50(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_sendOutgoingRequestMessage:toDevice:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100090DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100090DB4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_sendOutgoingEventMessage:toDevice:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100090EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100090ED0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_invalidateSenderRPClientForDevice:", *(_QWORD *)(a1 + 32));

}

void sub_100091158(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void sub_100091190(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MSDRapportMessageHandler: XPC connection to listener RPCompanionLinkClient interrupted!", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_invalidateListenerRPClient");

}

void sub_10009120C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MSDRapportMessageHandler: XPC connection to listener RPCompanionLinkClient invalidated!", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_invalidateListenerRPClient");

}

void sub_100091288(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000C9090(v3, v5);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listenerRPClient"));
    (*(void (**)(uint64_t, void *, _QWORD))(v6 + 16))(v6, v7, 0);

  }
}

void sub_100091504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100091528(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  NSObject *v18;
  uint64_t v19;
  id v20;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100091634;
    v17[3] = &unk_10013F6A0;
    v18 = v7;
    objc_copyWeak(&v20, (id *)(a1 + 48));
    v19 = *(_QWORD *)(a1 + 40);
    objc_msgSend(v5, "registerRequestID:options:handler:", v18, 0, v17);
    objc_destroyWeak(&v20);
    v8 = v18;
  }
  else
  {
    v9 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000C9124(v8, v10, v11, v12, v13, v14, v15, v16);
  }

}

void sub_100091620(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100091634(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  dispatch_queue_global_t global_queue;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  global_queue = dispatch_get_global_queue(21, 0);
  v11 = objc_claimAutoreleasedReturnValue(global_queue);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10009175C;
  v15[3] = &unk_10013F678;
  v16 = *(id *)(a1 + 32);
  v17 = v7;
  v18 = v8;
  v12 = v8;
  v13 = v7;
  objc_copyWeak(&v21, (id *)(a1 + 48));
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v9;
  v14 = v9;
  dispatch_async(v11, v15);

  objc_destroyWeak(&v21);
}

void sub_10009175C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  void *v9;
  MSDRapportDevice *v10;
  MSDRapportMessage *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v19 = 138543618;
    v20 = v4;
    v21 = 2114;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MSDRapportMessageHandler: Received request of ID: %{public}@ payload: %{public}@", (uint8_t *)&v19, 0x16u);
  }

  v6 = sub_1000604F0();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_1000C9158();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "observer"));

  if (v9)
  {
    v10 = -[MSDRapportDevice initWithIncomingOptions:]([MSDRapportDevice alloc], "initWithIncomingOptions:", *(_QWORD *)(a1 + 48));
    v11 = -[MSDRapportMessage initWithIdentifier:andPayload:usingOptions:]([MSDRapportMessage alloc], "initWithIdentifier:andPayload:usingOptions:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v12 = objc_loadWeakRetained((id *)(a1 + 72));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "observer"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "didReceiveRequestMessage:fromDevice:", v11, v10));

    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_extractRapportPayloadFromMessage:", v14));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_extractRapportOptionsFromMessage:", v14));
      v17 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v11 = 0;
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727744768, CFSTR("An error has occurred.")));
  v14 = 0;
  v16 = 0;
  v15 = &__NSDictionary0__struct;
LABEL_10:
  v18 = *(_QWORD *)(a1 + 64);
  if (v18)
    (*(void (**)(uint64_t, void *, void *, void *))(v18 + 16))(v18, v15, v16, v17);

}

void sub_100091AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100091AE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  NSObject *v18;
  id v19;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100091BE8;
    v17[3] = &unk_10013F6F0;
    v18 = v7;
    objc_copyWeak(&v19, (id *)(a1 + 40));
    objc_msgSend(v5, "registerEventID:options:handler:", v18, 0, v17);
    objc_destroyWeak(&v19);
    v8 = v18;
  }
  else
  {
    v9 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000C9124(v8, v10, v11, v12, v13, v14, v15, v16);
  }

}

void sub_100091BD4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100091BE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  void *v20;
  MSDRapportDevice *v21;
  MSDRapportMessage *v22;
  id v23;
  void *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  id v28;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000604F0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v25 = 138543618;
    v26 = v9;
    v27 = 2114;
    v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MSDRapportMessageHandler: Received event of ID: %{public}@ payload: %{public}@", (uint8_t *)&v25, 0x16u);
  }

  v10 = sub_1000604F0();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    sub_1000C91BC((uint64_t)v6, v11, v12, v13, v14, v15, v16, v17);

  v18 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "observer"));

  if (v20)
  {
    v21 = -[MSDRapportDevice initWithIncomingOptions:]([MSDRapportDevice alloc], "initWithIncomingOptions:", v6);
    v22 = -[MSDRapportMessage initWithIdentifier:andPayload:usingOptions:]([MSDRapportMessage alloc], "initWithIdentifier:andPayload:usingOptions:", *(_QWORD *)(a1 + 32), v5, v6);
    v23 = objc_loadWeakRetained(v18);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "observer"));
    objc_msgSend(v24, "didReceiveEventMessage:fromDevice:", v22, v21);

  }
}

void sub_100092328(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 128));
  _Unwind_Resume(a1);
}

void sub_100092380(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000C9220();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_invalidateSenderRPClientForDevice:", *(_QWORD *)(a1 + 32));

}

void sub_1000923E0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000C9280();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_invalidateSenderRPClientForDevice:", *(_QWORD *)(a1 + 32));

}

void sub_100092440(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000C92E0();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_invalidateSenderRPClientForDevice:", *(_QWORD *)(a1 + 32));

}

void sub_1000924A0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void (*v6)(void);
  void *v7;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000C9340(a1, (uint64_t)v3);

    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "senderRPClients"));
    objc_msgSend(v7, "addObject:", *(_QWORD *)(a1 + 48));

    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
  }
  v6();

}

void sub_100092860(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_extractRapportPayloadFromMessage:", *(_QWORD *)(a1 + 48)));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_extractRapportOptionsFromMessage:", *(_QWORD *)(a1 + 48)));
    v9 = *(void **)(a1 + 56);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000929D0;
    v13[3] = &unk_10013F768;
    v14 = v9;
    v15 = *(id *)(a1 + 64);
    objc_msgSend(v5, "sendRequestID:request:options:responseHandler:", v14, v7, v8, v13);

  }
  else
  {
    v10 = sub_1000604F0();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1000C93BC();

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v12));

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

void sub_1000929D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  MSDRapportMessage *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  id v28;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = sub_1000604F0();
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1000C941C(a1, (uint64_t)v9);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedDescription"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v13));

    v15 = 0;
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v25 = 138543618;
      v26 = v16;
      v27 = 2114;
      v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "MSDRapportMessageHandler: Received response for request of ID: %{public}@ payload: %{public}@", (uint8_t *)&v25, 0x16u);
    }

    v17 = sub_1000604F0();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      sub_1000C91BC((uint64_t)v8, v18, v19, v20, v21, v22, v23, v24);

    v15 = -[MSDRapportMessage initWithIdentifier:andPayload:usingOptions:]([MSDRapportMessage alloc], "initWithIdentifier:andPayload:usingOptions:", *(_QWORD *)(a1 + 32), v7, v8);
    v14 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100092D1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_extractRapportPayloadFromMessage:", *(_QWORD *)(a1 + 48)));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_extractRapportOptionsFromMessage:", *(_QWORD *)(a1 + 48)));
    v9 = *(void **)(a1 + 56);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100092E88;
    v13[3] = &unk_10013F7B8;
    v14 = v9;
    v15 = *(id *)(a1 + 64);
    objc_msgSend(v5, "sendEventID:event:options:completion:", v14, v7, v8, v13);

  }
  else
  {
    v10 = sub_1000604F0();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1000C93BC();

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v12));

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

void sub_100092E88(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000C9498(a1, (uint64_t)v3);

    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", 3727741108, CFSTR("Cannot communicate with demo peer."), v6));
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = 138543362;
      v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MSDRapportMessageHandler: Successfuly sent event of ID: %{public}@", (uint8_t *)&v9, 0xCu);
    }
    v7 = 0;
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100093290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000932A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000932B8(uint64_t a1)
{

}

void sub_1000932C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  int v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("Timeout")))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKey:", v6, RPOptionTimeoutSeconds);
  }
  else
  {
    v7 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138543362;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MSDRapportMessageHandler: Unknown options key: %{public}@", (uint8_t *)&v9, 0xCu);
    }

  }
}

uint64_t sub_100093488(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_100093498(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_100093680(id a1)
{
  MSDXCTestSpawnWrapper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDXCTestSpawnWrapper);
  v2 = (void *)qword_100175520;
  qword_100175520 = (uint64_t)v1;

}

void sub_100096390(id a1)
{
  MSDFileDownloadCredentials *v1;
  void *v2;

  v1 = objc_alloc_init(MSDFileDownloadCredentials);
  v2 = (void *)qword_100175530;
  qword_100175530 = (uint64_t)v1;

}

void sub_1000975A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000975BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000975CC(uint64_t a1)
{

}

uint64_t sub_1000975D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  xpc_type_t type;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSNumber *v12;
  id v13;
  NSString *v14;
  NSNumber *v15;
  NSNumber *v16;
  const void *bytes_ptr;
  size_t length;
  NSNumber *v19;
  void *v20;
  NSDate *v21;
  void *v22;

  v5 = a3;
  type = xpc_get_type(v5);
  if (type == (xpc_type_t)&_xpc_type_BOOL)
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", xpc_BOOL_get_value(v5));
    v13 = (id)objc_claimAutoreleasedReturnValue(v12);
LABEL_22:
    v22 = v13;
    objc_msgSend(v11, "addObject:", v13);

    v10 = 1;
    goto LABEL_23;
  }
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v14 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", xpc_string_get_string_ptr(v5), 4);
    v13 = (id)objc_claimAutoreleasedReturnValue(v14);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_int64)
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v15 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", xpc_int64_get_value(v5));
    v13 = (id)objc_claimAutoreleasedReturnValue(v15);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_uint64)
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v16 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", xpc_uint64_get_value(v5));
    v13 = (id)objc_claimAutoreleasedReturnValue(v16);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = xpc_data_get_bytes_ptr(v5);
    length = xpc_data_get_length(v5);
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes_ptr, length));
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_double)
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v19 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", xpc_double_get_value(v5));
    v13 = (id)objc_claimAutoreleasedReturnValue(v19);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithXPCDictionary:](NSDictionary, "dictionaryWithXPCDictionary:", v5));
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_array)
  {
    v20 = *(void **)(a1 + 32);
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v13 = objc_msgSend(v20, "initWithXPCArray:", v5);
    goto LABEL_22;
  }
  if (type == (xpc_type_t)&_xpc_type_date)
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v21 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)xpc_date_get_value(v5));
    v13 = (id)objc_claimAutoreleasedReturnValue(v21);
    goto LABEL_22;
  }
  v7 = sub_1000604F0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_1000C9FD4(a2, v8, v9);

  v10 = 0;
LABEL_23:

  return v10;
}

void sub_100097954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009796C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  xpc_object_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  id v37;
  NSObject *v38;
  double v39;

  v6 = a2;
  v8 = objc_opt_class(NSString, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    v10 = *(void **)(a1 + 32);
    v11 = xpc_string_create((const char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
LABEL_5:
    v15 = v11;
    xpc_array_append_value(v10, v11);

    goto LABEL_6;
  }
  v12 = objc_opt_class(NSData, v9);
  if ((objc_opt_isKindOfClass(v6, v12) & 1) != 0)
  {
    v10 = *(void **)(a1 + 32);
    v14 = objc_retainAutorelease(v6);
    v11 = xpc_data_create(objc_msgSend(v14, "bytes"), (size_t)objc_msgSend(v14, "length"));
    goto LABEL_5;
  }
  v16 = objc_opt_class(NSNumber, v13);
  if ((objc_opt_isKindOfClass(v6, v16) & 1) != 0)
  {
    v18 = objc_retainAutorelease(v6);
    if (!strcmp((const char *)objc_msgSend(v18, "objCType"), "i")
      || (v19 = objc_retainAutorelease(v18), !strcmp((const char *)objc_msgSend(v19, "objCType"), "s"))
      || (v20 = objc_retainAutorelease(v19), !strcmp((const char *)objc_msgSend(v20, "objCType"), "q"))
      || (v21 = objc_retainAutorelease(v20), !strcmp((const char *)objc_msgSend(v21, "objCType"), "q")))
    {
      v30 = *(void **)(a1 + 32);
      v31 = xpc_int64_create((int64_t)objc_msgSend(v18, "longLongValue"));
    }
    else
    {
      v22 = objc_retainAutorelease(v21);
      if (!strcmp((const char *)objc_msgSend(v22, "objCType"), "f")
        || (v23 = objc_retainAutorelease(v22), !strcmp((const char *)objc_msgSend(v23, "objCType"), "d")))
      {
        v30 = *(void **)(a1 + 32);
        objc_msgSend(v22, "doubleValue");
        v31 = xpc_double_create(v39);
      }
      else
      {
        v24 = objc_retainAutorelease(v23);
        if (strcmp((const char *)objc_msgSend(v24, "objCType"), "B"))
        {
          v25 = objc_retainAutorelease(v24);
          if (strcmp((const char *)objc_msgSend(v25, "objCType"), "c"))
          {
            v26 = sub_1000604F0();
            v27 = objc_claimAutoreleasedReturnValue(v26);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              sub_1000CA040(v25, v27);

            *a4 = 1;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
            goto LABEL_23;
          }
        }
        v30 = *(void **)(a1 + 32);
        v31 = xpc_BOOL_create((BOOL)objc_msgSend(v24, "BOOLValue"));
      }
    }
    v32 = v31;
    xpc_array_append_value(v30, v31);

LABEL_23:
    goto LABEL_6;
  }
  v28 = objc_opt_class(NSArray, v17);
  if ((objc_opt_isKindOfClass(v6, v28) & 1) != 0)
  {
    v10 = *(void **)(a1 + 32);
    v11 = (xpc_object_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "xpcArrayFromArray"));
    goto LABEL_5;
  }
  v33 = objc_opt_class(NSDictionary, v29);
  if ((objc_opt_isKindOfClass(v6, v33) & 1) != 0)
  {
    v10 = *(void **)(a1 + 32);
    v11 = (xpc_object_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "createXPCDictionary"));
    goto LABEL_5;
  }
  v35 = objc_opt_class(NSDate, v34);
  if ((objc_opt_isKindOfClass(v6, v35) & 1) != 0)
  {
    v10 = *(void **)(a1 + 32);
    objc_msgSend(v6, "timeIntervalSince1970");
    v11 = xpc_date_create((uint64_t)v36);
    goto LABEL_5;
  }
  v37 = sub_1000604F0();
  v38 = objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    sub_1000CA0C4(v38);

  *a4 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
LABEL_6:

}

void sub_100097D00(id a1)
{
  MSDContentCacheManager *v1;
  void *v2;

  v1 = objc_alloc_init(MSDContentCacheManager);
  v2 = (void *)qword_100175540;
  qword_100175540 = (uint64_t)v1;

}

void sub_1000982F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  NSObject *v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  id v22;
  unsigned __int8 v23;
  uint8_t buf[4];
  void *v25;
  _QWORD v26[2];

  v3 = a2;
  v23 = 0;
  v26[0] = *(_QWORD *)(a1 + 32);
  v26[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v26, 2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](NSString, "pathWithComponents:", v4));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithHexString:](NSData, "dataWithHexString:", v3));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v8 = objc_msgSend(v7, "fileExistsAtPath:isDirectory:", v5, &v23);
    v9 = v23;

    if (v8)
      v10 = v9 == 0;
    else
      v10 = 0;
    if (!v10 || (objc_msgSend(*(id *)(a1 + 48), "containsObject:", v6) & 1) != 0)
    {
      v11 = 0;
      goto LABEL_18;
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fileManager"));
    v21 = 0;
    v19 = objc_msgSend(v18, "removeItemAtPath:error:", v5, &v21);
    v11 = v21;

    if ((v19 & 1) != 0)
      goto LABEL_18;
    v20 = sub_1000604F0();
    v17 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1000CA104((uint64_t)v5, v11, v17);
LABEL_17:

    goto LABEL_18;
  }
  v12 = sub_1000604F0();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Removing download in progress %{public}@", buf, 0xCu);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fileManager"));
  v22 = 0;
  v15 = objc_msgSend(v14, "removeItemAtPath:error:", v5, &v22);
  v11 = v22;

  if ((v15 & 1) == 0)
  {
    v16 = sub_1000604F0();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1000CA104((uint64_t)v5, v11, v17);
    goto LABEL_17;
  }
LABEL_18:

}

void sub_1000988E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000989B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100098A84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100099228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100099240(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100099250(uint64_t a1)
{

}

void sub_100099258(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[2];

  v6[0] = CFSTR("/var/MSDWorkContainer/.MSD_cache_manifest");
  v6[1] = a2;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v6, 2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](NSString, "pathWithComponents:", v4));

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v5);
}

void sub_100099CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100099D0C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_start");

}

void sub_100099DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100099DEC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_stop");

}

void sub_10009A1E8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 96));
  _Unwind_Resume(a1);
}

void sub_10009A230(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_feedNewRSSIReadingReceivedFromDevice:", v3);

}

void sub_10009A278(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_feedNewRSSIReadingReceivedFromDevice:", v3);

}

void sub_10009A2C0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_feedNewRSSIReadingReceivedFromDevice:", v3);

}

void sub_10009A308(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1000604F0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000CA4A4(v2);

  }
}

void sub_10009AA14(id a1)
{
  MSDPlatform *v1;
  void *v2;

  v1 = objc_alloc_init(MSDPlatform);
  v2 = (void *)qword_100175550;
  qword_100175550 = (uint64_t)v1;

}

void sub_10009AA7C(id a1)
{
  byte_100175560 = NSClassFromString(CFSTR("MSDHubBundleManager")) != 0;
}

void sub_10009B2E0(id a1)
{
  MSDOSUpdaterController *v1;
  void *v2;

  v1 = objc_alloc_init(MSDOSUpdaterController);
  v2 = (void *)qword_100175570;
  qword_100175570 = (uint64_t)v1;

}

id sub_10009B9D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "switchModeImmediately:", 5);
}

id sub_10009B9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "scanResult:error:", a2, a3);
}

void sub_10009BB6C(uint64_t a1, int a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  const char *v8;
  id v9;
  _BOOL4 v10;
  void *v11;
  int v12;
  void *v13;

  v5 = a3;
  if (a2)
  {
    v6 = sub_1000604F0();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      v8 = "Software update purge happened successfully.";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, 2u);
    }
  }
  else
  {
    v9 = sub_1000604F0();
    v7 = objc_claimAutoreleasedReturnValue(v9);
    v10 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v10)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedDescription"));
        v12 = 138543362;
        v13 = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "remove software update failed: %{public}@", (uint8_t *)&v12, 0xCu);

      }
    }
    else if (v10)
    {
      LOWORD(v12) = 0;
      v8 = "remove software update failed: no error returned";
      goto LABEL_9;
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id *sub_10009C700(id *result, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0)
    return (id *)objc_msgSend(result[4], "bail:error:", "-[MSDOSUpdaterController scanResult:error:]_block_invoke", a3);
  return result;
}

void sub_10009C938(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSDProgressUpdater sharedInstance](MSDProgressUpdater, "sharedInstance"));
  objc_msgSend(v2, "updateStage:", 19);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "manager"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10009C9CC;
  v4[3] = &unk_10013F4B8;
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "installUpdate:", v4);

}

id *sub_10009C9CC(id *result, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0)
    return (id *)objc_msgSend(result[4], "bail:error:", "-[MSDOSUpdaterController client:downloadDidFinish:]_block_invoke_2", a3);
  return result;
}

void sub_10009CDF8(id a1, BOOL a2, NSError *a3)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[MSDTargetDevice sharedInstance](MSDTargetDevice, "sharedInstance", a3));
  objc_msgSend(v3, "forceSwitchToDemoModeIfNeeded");

}

void sub_10009E490(id a1)
{
  MSDServerRequestHandler *v1;
  void *v2;

  v1 = objc_alloc_init(MSDServerRequestHandler);
  v2 = (void *)qword_100175580;
  qword_100175580 = (uint64_t)v1;

}

void sub_10009E8EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009E984(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009EB94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009EDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EE0C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10009EE1C(uint64_t a1)
{

}

void sub_10009EE24(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10009EF68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  id v27;
  NSObject *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  int v33;
  const char *v34;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));

  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "credential"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSDKeychainManager sharedInstance](MSDKeychainManager, "sharedInstance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dataUsingEncoding:", 4));
    v10 = objc_msgSend(v8, "saveItem:forKey:", v9, CFSTR("com.apple.mobilestoredemo.keychainItemID"));

    if ((v10 & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hubServer"));
      objc_msgSend(v11, "overrideHmacKey:", v7);

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settingsDict"));
      if (v6)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
        v13 = objc_msgSend(v12, "saveHubSuppliedSettings:", v6);

        if ((v13 & 1) == 0)
        {
          v14 = sub_1000604F0();
          v15 = objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            v33 = 136315138;
            v34 = "-[MSDServerRequestHandler handleEnroll:]_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s: Cannot save settings dictionary.", (uint8_t *)&v33, 0xCu);
          }

        }
      }
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("DeviceOptions")));
      if (v5)
      {
        v17 = objc_opt_class(NSDictionary, v16);
        if ((objc_opt_isKindOfClass(v5, v17) & 1) != 0)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
          v19 = objc_msgSend(v18, "updateDeviceOptions:skipImutableKeys:", v5, 0);

          if ((v19 & 1) == 0)
          {
            v20 = sub_1000604F0();
            v21 = objc_claimAutoreleasedReturnValue(v20);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              v33 = 136315138;
              v34 = "-[MSDServerRequestHandler handleEnroll:]_block_invoke";
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%s: Cannot set deviceOptions dictionary received during /Register response.", (uint8_t *)&v33, 0xCu);
            }

          }
        }
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "hubProtocolVersion"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
      objc_msgSend(v23, "setHubProtocolVersion:", v22);

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "hubProtocolVersion"));
      v26 = objc_msgSend(v25, "lowerVersionThan:", CFSTR("2"));

      if (v26)
      {
        v27 = sub_1000604F0();
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
          v30 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "hubProtocolVersion"));
          v33 = 138543362;
          v34 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Hub protocol version (%{public}@) is too old.", (uint8_t *)&v33, 0xCu);

        }
      }
    }
    else
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727740949, CFSTR("Cannot save enrollment record.")));
      objc_msgSend(v3, "setError:", v32);

      v5 = 0;
      v6 = 0;
    }
  }
  v31 = *(_QWORD *)(a1 + 40);
  if (v31)
    (*(void (**)(uint64_t, id))(v31 + 16))(v31, v3);

}

id sub_10009F4A0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "checkIPAForResponse:withRequest:", a2, *(_QWORD *)(a1 + 40));
}

id sub_10009F4B0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "downloadIPAForResponse:withRequest:", a2, *(_QWORD *)(a1 + 40));
}

void sub_10009F5E8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "error"));

  if (!v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getDownloadFileRequestFromResponse:forFilePath:", v9, *(_QWORD *)(a1 + 40)));
    if (v4)
    {
      v5 = v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fileInfo"));
      objc_msgSend(v6, "setSkipHashCheck:", 1);

      objc_msgSend(v5, "setCompletion:", *(_QWORD *)(a1 + 48));
      objc_msgSend(*(id *)(a1 + 32), "handleDownloadFile:", v5);

      goto LABEL_4;
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727744512, CFSTR("Unexpected server response.")));
    objc_msgSend(v9, "setError:", v7);

  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
LABEL_4:

}

void sub_10009FA74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009FEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009FEE0(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "error"));

    if (!v6)
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "credential"));
      if (v8)
      {
        v7 = (void *)v8;
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[MSDFileDownloadCredentials sharedInstance](MSDFileDownloadCredentials, "sharedInstance"));
        v10 = objc_msgSend(v9, "updateWithResponseFromGetFileDownloadCredentials:", v7);

        if ((v10 & 1) != 0)
          goto LABEL_6;
        v21 = sub_1000604F0();
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          sub_1000CA784(v22, v23, v24, v25, v26, v27, v28, v29);

        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727744737, CFSTR("Cannot write file.")));
      }
      else
      {
        v11 = sub_1000604F0();
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          sub_1000CA750(v12, v13, v14, v15, v16, v17, v18, v19);

        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", 3727744512, CFSTR("Unexpected server response.")));
        v7 = 0;
      }
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setError:", v20);

      goto LABEL_6;
    }
  }
  v7 = 0;
LABEL_6:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1000A022C(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v3);

  return objc_msgSend(*(id *)(a1 + 40), "checkIPAForResponse:withRequest:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
}

void sub_1000A07DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A0CD0(id a1)
{
  MSDUIHelper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDUIHelper);
  v2 = (void *)qword_100175590;
  qword_100175590 = (uint64_t)v1;

}

void sub_1000A0E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000A0E98(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  id *v6;
  id WeakRetained;
  void *v8;
  id v9;
  _xpc_connection_s *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  unsigned int v15;
  id v16;
  id v17;
  uint64_t v18;
  uint8_t v19[16];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_1000604F0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v5)
    {
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "App providing UI checking out or app terminated.", v19, 2u);
    }

    v18 = *(_QWORD *)(a1 + 40);
    v17 = *(id *)(v18 + 16);
    *(_QWORD *)(v18 + 16) = 0;
    goto LABEL_11;
  }
  if (v5)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "App providing UI checking in.", buf, 2u);
  }

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 16), *(id *)(a1 + 32));
  v6 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "pendingMessage"));

  if (v8)
  {
    v9 = objc_loadWeakRetained(v6);
    v10 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "connection"));
    v11 = objc_loadWeakRetained(v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "pendingMessage"));
    xpc_connection_send_message(v10, v12);

    v13 = objc_loadWeakRetained(v6);
    objc_msgSend(v13, "setPendingMessage:", 0);

  }
  v14 = objc_loadWeakRetained(v6);
  v15 = objc_msgSend(v14, "fullScreenState");

  if (v15 == 1)
  {
    v16 = objc_loadWeakRetained(v6);
    objc_msgSend(v16, "setFullScreenState:", 2);

    v17 = objc_loadWeakRetained(v6);
    objc_msgSend(v17, "activateFullScreenUIAppMonitor");
LABEL_11:

  }
}

void sub_1000A112C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A1140(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  unsigned int v4;
  id v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = objc_msgSend(WeakRetained, "fullScreenState");

  if (!v4)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = objc_loadWeakRetained(v2);
    objc_msgSend(v9, "setMessage:", v8);

    v10 = *(unsigned __int8 *)(a1 + 48);
    v11 = objc_loadWeakRetained(v2);
    objc_msgSend(v11, "setAllowCancel:", v10);

    v12 = *(unsigned __int8 *)(a1 + 49);
    v13 = objc_loadWeakRetained(v2);
    objc_msgSend(v13, "setDisableIdleTimer:", v12);

    v14 = objc_loadWeakRetained(v2);
    objc_msgSend(v14, "setPendingMessage:", 0);

    v18 = objc_loadWeakRetained(v2);
    objc_msgSend(v18, "requestFullScreenUI");
LABEL_6:

    return;
  }
  v5 = objc_loadWeakRetained(v2);
  v6 = objc_msgSend(v5, "allowCancel");
  v7 = *(unsigned __int8 *)(a1 + 48);

  if (v7 != v6)
  {
    v15 = *(unsigned __int8 *)(a1 + 48);
    v16 = objc_loadWeakRetained(v2);
    objc_msgSend(v16, "setAllowCancel:", v15);

    v18 = (id)objc_claimAutoreleasedReturnValue(+[MSDUIHelper sharedInstance](MSDUIHelper, "sharedInstance"));
    v17 = objc_loadWeakRetained(v2);
    objc_msgSend(v18, "demoUpdateAllowCancel:", objc_msgSend(v17, "allowCancel"));

    goto LABEL_6;
  }
}

void sub_1000A136C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000A1380(id *a1)
{
  id *v2;
  id WeakRetained;
  unsigned int v4;
  id v5;
  id v6;
  id v7;
  xpc_object_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  _xpc_connection_s *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint8_t buf[4];
  id v36;
  __int16 v37;
  void *v38;

  v2 = a1 + 6;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v4 = objc_msgSend(WeakRetained, "fullScreenState");

  if (v4)
  {
    v5 = objc_loadWeakRetained(v2);
    objc_msgSend(v5, "setFullScreenState:", 0);

    v6 = objc_loadWeakRetained(v2);
    objc_msgSend(v6, "setCurrentProgress:", 0);

    v7 = objc_loadWeakRetained(v2);
    objc_msgSend(v7, "deactivateFullScreenUIAppMonitor");

    v8 = xpc_dictionary_create(0, 0, 0);
    v9 = v8;
    if (v8)
    {
      xpc_dictionary_set_string(v8, "ContentUpdateStatus", "Completed");
      if (a1[4])
      {
        v10 = sub_1000604F0();
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = objc_msgSend(a1[4], "code");
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userInfo"));
          *(_DWORD *)buf = 134218242;
          v36 = v12;
          v37 = 2114;
          v38 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending xpc message with error: %td:%{public}@", buf, 0x16u);

        }
        xpc_dictionary_set_int64(v9, "ErrorCode", (int64_t)objc_msgSend(a1[4], "code"));
        v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "domain")));
        xpc_dictionary_set_string(v9, "ErrorDomain", (const char *)objc_msgSend(v14, "cStringUsingEncoding:", 4));

        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userInfo"));
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472;
        v33[2] = sub_1000A1684;
        v33[3] = &unk_10013FB70;
        v34 = v9;
        objc_msgSend(v15, "enumerateKeysAndObjectsUsingBlock:", v33);

      }
      v16 = objc_loadWeakRetained(v2);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "connection"));

      v18 = objc_loadWeakRetained(v2);
      v19 = v18;
      if (v17)
      {
        v20 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "connection"));
        xpc_connection_send_message(v20, v9);

      }
      else
      {
        objc_msgSend(v18, "setPendingMessage:", v9);
      }

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "remoteAlertHandle"));
      if (v21)
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "remoteAlertHandle"));
        objc_msgSend(v22, "removeObserver:", a1[5]);

        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "remoteAlertHandle"));
        objc_msgSend(v23, "invalidate");

        objc_msgSend(a1[5], "setRemoteAlertHandle:", 0);
      }
    }
    else
    {
      v24 = sub_1000604F0();
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        sub_1000CA92C(v25, v26, v27, v28, v29, v30, v31, v32);

    }
  }
}

void sub_1000A1684(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;

  v5 = a2;
  v6 = a3;
  v8 = objc_opt_class(NSString, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    v10 = objc_opt_class(NSString, v9);
    if ((objc_opt_isKindOfClass(v6, v10) & 1) != 0)
    {
      v11 = sub_1000604F0();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        sub_1000CA99C();

      xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 32), (const char *)objc_msgSend(objc_retainAutorelease(v5), "cStringUsingEncoding:", 4), (const char *)objc_msgSend(objc_retainAutorelease(v6), "cStringUsingEncoding:", 4));
    }
  }

}

void sub_1000A1800(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000A1814(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setFullScreenState:", 0);

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "setCurrentProgress:", 0);

  v4 = objc_loadWeakRetained(v1);
  objc_msgSend(v4, "deactivateFullScreenUIAppMonitor");

}

void sub_1000A19D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A19EC(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  unsigned int v3;
  id v4;
  NSObject *v5;
  id v6;
  uint8_t v7[16];

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "fullScreenState");

  if (v3 == 1)
  {
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Timer triggered but still no UI checked in. Requesting blocking UI again...", v7, 2u);
    }

    v6 = objc_loadWeakRetained(v1);
    objc_msgSend(v6, "requestFullScreenUI");

  }
}

void sub_1000A1BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A1BE8(id *a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  void *v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessStateDescriptor descriptor](RBSProcessStateDescriptor, "descriptor"));
  objc_msgSend(v4, "setValues:", 1);
  objc_msgSend(v4, "setEndowmentNamespaces:", &off_10014E6D8);
  objc_msgSend(v3, "setStateDescriptor:", v4);
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fullScreenUIAppId"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingBundleIdentifier:](RBSProcessPredicate, "predicateMatchingBundleIdentifier:", v6));
  v11 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  objc_msgSend(v3, "setPredicates:", v8);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000A1D7C;
  v9[3] = &unk_10013FBC0;
  objc_copyWeak(&v10, a1);
  objc_msgSend(v3, "setUpdateHandler:", v9);
  objc_destroyWeak(&v10);

}

void sub_1000A1D60(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000A1D7C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id WeakRetained;
  id v11;

  v5 = a4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "state"));
  v7 = objc_msgSend(v6, "taskState");

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "state"));
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "endowmentNamespaces"));

  v9 = objc_msgSend(v11, "containsObject:", CFSTR("com.apple.frontboard.visibility"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleFullScreenUIAppStateChange:withVisibility:", v7, v9);

}

void sub_1000A20FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1000A2120(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  unsigned int v3;
  id v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "fullScreenState");

  if (v3 == 2)
  {
    v4 = objc_loadWeakRetained(v1);
    objc_msgSend(v4, "deactivateFullScreenUIAppMonitor");

    v5 = objc_loadWeakRetained(v1);
    objc_msgSend(v5, "requestFullScreenUI");

  }
}

void sub_1000A21A8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  unsigned int v3;
  id v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "fullScreenState");

  if (v3 == 2)
  {
    v4 = objc_loadWeakRetained(v1);
    objc_msgSend(v4, "launchFullScreenUI");

    v5 = objc_loadWeakRetained(v1);
    objc_msgSend(v5, "demoUpdateProgress:", objc_msgSend(v5, "currentProgress"));

  }
}

void sub_1000A29A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A29BC(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  unsigned int v5;
  id v6;

  if (objc_msgSend(*(id *)(a1 + 32), "backlightStatus"))
  {
    v2 = (id *)(a1 + 40);
    WeakRetained = objc_loadWeakRetained(v2);
    objc_msgSend(WeakRetained, "deactivateFullScreenUIAppMonitor");

    v4 = objc_loadWeakRetained(v2);
    v5 = objc_msgSend(v4, "fullScreenState");

    if (v5 == 2)
    {
      v6 = objc_loadWeakRetained(v2);
      objc_msgSend(v6, "requestFullScreenUI");

    }
  }
}

void sub_1000A2C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000A2C5C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  unsigned int v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  int v17;
  id v18;
  __int16 v19;
  id v20;

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v5 = objc_msgSend(WeakRetained, "backlightStatus");
    v6 = objc_msgSend(*(id *)(a1 + 32), "displayBacklightLevel");
    v17 = 134218240;
    v18 = v5;
    v19 = 2048;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Backlight changed from %td to %td", (uint8_t *)&v17, 0x16u);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "displayBacklightLevel") == (id)100)
  {
    v7 = objc_loadWeakRetained((id *)(a1 + 40));
    v8 = objc_msgSend(v7, "backlightStatus");

    if (!v8)
    {
      v9 = objc_loadWeakRetained((id *)(a1 + 40));
      v10 = objc_msgSend(v9, "fullScreenState");

      if (v10 == 2)
      {
        v11 = sub_1000604F0();
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v17) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Device back up, starting full screen UI", (uint8_t *)&v17, 2u);
        }

        v13 = objc_loadWeakRetained((id *)(a1 + 40));
        objc_msgSend(v13, "launchFullScreenUI");

        v14 = objc_loadWeakRetained((id *)(a1 + 40));
        objc_msgSend(v14, "demoUpdateProgress:", objc_msgSend(v14, "currentProgress"));

      }
    }
  }
  v15 = objc_msgSend(*(id *)(a1 + 32), "displayBacklightLevel");
  v16 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v16, "setBacklightStatus:", v15);

}

void sub_1000A2EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000A2F04(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  xpc_object_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id *v11;
  id WeakRetained;
  void *v13;
  id v14;
  _xpc_connection_s *v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  uint8_t buf[16];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;

  v37 = 0;
  v38 = &v37;
  v39 = 0x3032000000;
  v40 = sub_1000A31C8;
  v41 = sub_1000A31D8;
  v42 = 0;
  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "demoUpdateFailed(XPC) is called", buf, 2u);
  }

  v4 = *(void **)(a1 + 32);
  if (!v4)
  {
    v19 = sub_1000604F0();
    v17 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1000CAA28(v17, v20, v21, v22, v23, v24, v25, v26);
    goto LABEL_10;
  }
  if (objc_msgSend(v4, "code") != (id)3727741185)
  {
    v5 = xpc_dictionary_create(0, 0, 0);
    v6 = (void *)v38[5];
    v38[5] = (uint64_t)v5;

    v7 = (void *)v38[5];
    if (v7)
    {
      xpc_dictionary_set_string(v7, "ContentUpdateStatus", "Error");
      xpc_dictionary_set_int64((xpc_object_t)v38[5], "ErrorCode", (int64_t)objc_msgSend(*(id *)(a1 + 32), "code"));
      v8 = (void *)v38[5];
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "domain")));
      xpc_dictionary_set_string(v8, "ErrorDomain", (const char *)objc_msgSend(v9, "cStringUsingEncoding:", 4));

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_1000A31E0;
      v35[3] = &unk_10013FC10;
      v35[4] = &v37;
      objc_msgSend(v10, "enumerateKeysAndObjectsUsingBlock:", v35);

      v11 = (id *)(a1 + 40);
      WeakRetained = objc_loadWeakRetained(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "connection"));

      if (v13)
      {
        v14 = objc_loadWeakRetained(v11);
        v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "connection"));
        xpc_connection_send_message(v15, (xpc_object_t)v38[5]);

        v16 = sub_1000604F0();
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          sub_1000CAB08();
      }
      else
      {
        v18 = v38[5];
        v17 = objc_loadWeakRetained(v11);
        -[NSObject setPendingMessage:](v17, "setPendingMessage:", v18);
      }
    }
    else
    {
      v27 = sub_1000604F0();
      v17 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_1000CAA98(v17, v28, v29, v30, v31, v32, v33, v34);
    }
LABEL_10:

  }
  _Block_object_dispose(&v37, 8);

}

void sub_1000A31A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A31C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000A31D8(uint64_t a1)
{

}

void sub_1000A31E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;

  v5 = a2;
  v6 = a3;
  v8 = objc_opt_class(NSString, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    v10 = objc_opt_class(NSString, v9);
    if ((objc_opt_isKindOfClass(v6, v10) & 1) != 0)
    {
      v11 = sub_1000604F0();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        sub_1000CA99C();

      xpc_dictionary_set_string(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (const char *)objc_msgSend(objc_retainAutorelease(v5), "cStringUsingEncoding:", 4), (const char *)objc_msgSend(objc_retainAutorelease(v6), "cStringUsingEncoding:", 4));
    }
  }

}

void sub_1000A336C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000A3380(uint64_t a1)
{
  xpc_object_t v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  id *v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  _xpc_connection_s *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21[16];

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = sub_1000604F0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending a progress(XPC)", v21, 2u);
    }

    xpc_dictionary_set_string(v2, "ContentUpdateStatus", "Progress");
    xpc_dictionary_set_int64(v2, "Percentage", *(_QWORD *)(a1 + 40));
    v6 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "connection"));

    v9 = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = v9;
    if (v8)
    {
      v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(-[NSObject connection](v9, "connection"));
      xpc_connection_send_message(v11, v2);

      v12 = sub_1000604F0();
      v10 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        sub_1000CAB08();
    }
    else
    {
      -[NSObject setPendingMessage:](v9, "setPendingMessage:", v2);
    }

    v13 = *(_QWORD *)(a1 + 40);
    v5 = objc_loadWeakRetained(v6);
    -[NSObject setCurrentProgress:](v5, "setCurrentProgress:", v13);
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_1000CAB34(v5, v14, v15, v16, v17, v18, v19, v20);
  }

}

void sub_1000A359C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000A35B0(uint64_t a1)
{
  xpc_object_t v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  id *v7;
  id WeakRetained;
  void *v9;
  NSObject *v10;
  _xpc_connection_s *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD v20[2];

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = sub_1000604F0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int8 *)(a1 + 40);
      v20[0] = 67109120;
      v20[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending allowCancel(XPC): %d", (uint8_t *)v20, 8u);
    }

    xpc_dictionary_set_string(v2, "ContentUpdateStatus", "AllowContentUpdateCancel");
    xpc_dictionary_set_BOOL(v2, "allowCancel", *(_BYTE *)(a1 + 40));
    v7 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "connection"));

    v10 = objc_loadWeakRetained(v7);
    v5 = v10;
    if (v9)
    {
      v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(-[NSObject connection](v10, "connection"));
      xpc_connection_send_message(v11, v2);

      v12 = sub_1000604F0();
      v5 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        sub_1000CAB08();
    }
    else
    {
      -[NSObject setPendingMessage:](v10, "setPendingMessage:", v2);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_1000CABA4(v5, v13, v14, v15, v16, v17, v18, v19);
  }

}

void sub_1000A38E0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1000A3934(id a1)
{
  MSDEnrollPassword *v1;
  void *v2;

  v1 = objc_alloc_init(MSDEnrollPassword);
  v2 = (void *)qword_1001755A0;
  qword_1001755A0 = (uint64_t)v1;

}

void sub_1000A3C28(id a1)
{
  MSDWorkQueueSet *v1;
  void *v2;
  dispatch_queue_t v3;
  dispatch_queue_t v4;
  dispatch_queue_t v5;
  dispatch_queue_t v6;
  dispatch_queue_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v1 = objc_alloc_init(MSDWorkQueueSet);
  v2 = (void *)qword_1001755B0;
  qword_1001755B0 = (uint64_t)v1;

  v3 = dispatch_queue_create("com.apple.msddemoupdate", 0);
  objc_msgSend((id)qword_1001755B0, "setDemoUpdateQueue:", v3);

  v4 = dispatch_queue_create("com.apple.msdmessage", 0);
  objc_msgSend((id)qword_1001755B0, "setMessageQueue:", v4);

  v5 = dispatch_queue_create("com.apple.msdpolling", 0);
  objc_msgSend((id)qword_1001755B0, "setPollingQueue:", v5);

  v6 = dispatch_queue_create("com.apple.backgroundDownloadQueue", 0);
  objc_msgSend((id)qword_1001755B0, "setBackgroundDownloadQueue:", v6);

  v7 = dispatch_queue_create("com.apple.contentDownloadQueue", (dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent);
  objc_msgSend((id)qword_1001755B0, "setContentDownloadConcurrentQueue:", v7);

  v8 = objc_alloc_init((Class)NSOperationQueue);
  objc_msgSend((id)qword_1001755B0, "setOperationQueue:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001755B0, "operationQueue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001755B0, "contentDownloadConcurrentQueue"));
  objc_msgSend(v9, "setUnderlyingQueue:", v10);

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001755B0, "operationQueue"));
  objc_msgSend(v11, "setMaxConcurrentOperationCount:", 3);

}

void sub_1000A3EAC(id a1)
{
  MSDCryptoHandler *v1;
  void *v2;

  v1 = objc_alloc_init(MSDCryptoHandler);
  v2 = (void *)qword_1001755C0;
  qword_1001755C0 = (uint64_t)v1;

}

void sub_1000A4770(id a1)
{
  MSDHelperAgent *v1;
  void *v2;

  v1 = objc_alloc_init(MSDHelperAgent);
  v2 = (void *)qword_1001755D0;
  qword_1001755D0 = (uint64_t)v1;

}

void sub_1000A48B0(id a1, OS_xpc_object *a2)
{
  OS_xpc_object *v2;
  xpc_type_t type;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a2;
  type = xpc_get_type(v2);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (v2 == (OS_xpc_object *)&_xpc_error_connection_invalid)
    {
      v13 = sub_1000604F0();
      v5 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1000CAEF0(v5, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      if (v2 != (OS_xpc_object *)&_xpc_error_connection_interrupted)
        goto LABEL_11;
      v4 = sub_1000604F0();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1000CAF20(v5, v6, v7, v8, v9, v10, v11, v12);
    }

    goto LABEL_11;
  }
  if (type != (xpc_type_t)&_xpc_type_dictionary)
    sub_1000CAF50();
LABEL_11:

}

void sub_1000A931C(id a1)
{
  MSDDemoUpdateStatusHub *v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init(MSDDemoUpdateStatusHub);
  v2 = (void *)qword_1001755E0;
  qword_1001755E0 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", 0));
  objc_msgSend((id)qword_1001755E0, "setDelegates:", v3);

}

void sub_1000A9738(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000A9758(uint64_t a1, void *a2, _BYTE *a3)
{
  id result;

  result = objc_msgSend(a2, "demoUpdateProgress:", *(_QWORD *)(a1 + 32));
  *a3 = 0;
  return result;
}

void sub_1000A9878(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000A9890(uint64_t a1, void *a2, _BYTE *a3)
{
  id result;

  result = objc_msgSend(a2, "demoUpdateCompleted:", *(_QWORD *)(a1 + 32));
  *a3 = 0;
  return result;
}

void sub_1000A9998(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000A99AC(uint64_t a1, void *a2, _BYTE *a3)
{
  id result;

  result = objc_msgSend(a2, "demoUpdateFailed:", *(_QWORD *)(a1 + 32));
  *a3 = 0;
  return result;
}

void sub_1000A9A38(id a1)
{
  MSDWiFiHelper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDWiFiHelper);
  v2 = (void *)qword_1001755F0;
  qword_1001755F0 = (uint64_t)v1;

}

id sub_1000AAC08(uint64_t a1, void *a2)
{
  id result;
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  result = objc_msgSend(a2, "type");
  if (result == (id)10)
  {
    v4 = sub_1000604F0();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Wifi interface is now initialized. Should be safe to proceed..", v6, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "lock");
    objc_msgSend(*(id *)(a1 + 32), "signal");
    return objc_msgSend(*(id *)(a1 + 32), "unlock");
  }
  return result;
}

void sub_1000AB5C0(id a1)
{
  MSDDemoUpdateTimeKeeper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDDemoUpdateTimeKeeper);
  v2 = (void *)qword_100175600;
  qword_100175600 = (uint64_t)v1;

}

id sub_1000AB8D0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v6[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The previous completion timer will be invalidated.", v6, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timer"));
  objc_msgSend(v4, "invalidate");

  return objc_msgSend(*(id *)(a1 + 32), "setTimer:", 0);
}

void sub_1000AB95C(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "date"));
  objc_msgSend(v3, "timeIntervalSinceNow");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "forceSwitchToDemoMode:", 0, 0));
  objc_msgSend(*(id *)(a1 + 32), "setTimer:", v2);

}

id sub_1000ABAA4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v6[16];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalidate fatal error timer.", v6, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timerForFatalError"));
  objc_msgSend(v4, "invalidate");

  return objc_msgSend(*(id *)(a1 + 32), "setTimerForFatalError:", 0);
}

void sub_1000ABB30(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v4;
  void *v5;
  _DWORD v6[2];

  v2 = sub_1000604F0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 40);
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting up fatal error timer to trigger %d seconds later.", (uint8_t *)v6, 8u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "forceSwitchToDemoMode:", 0, 0, (double)*(int *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "setTimerForFatalError:", v5);

}

void sub_1000AC790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AC81C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000AC82C(uint64_t a1)
{

}

id sub_1000AC834(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  char *v6;
  os_signpost_id_t v7;
  int v8;
  id v9;
  id v10;
  NSObject *v11;
  char *v12;
  os_signpost_id_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  const __CFString *v20;
  uint64_t v21;
  uint8_t buf[4];
  id v23;

  v4 = sub_100060640();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = (char *)objc_msgSend(*(id *)(a1 + 32), "signpostId");
  if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = (os_signpost_id_t)v6;
    if (os_signpost_enabled(v5))
    {
      v8 = *(unsigned __int8 *)(a1 + 104);
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v7, "Download File", "File download result: %{xcode:BOOLean}d", buf, 8u);
    }
  }

  if (a2)
  {
    v9 = objc_msgSend(*(id *)(a1 + 40), "fileSizeInCache:", *(_QWORD *)(a1 + 48));
    v10 = sub_100060640();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = (char *)objc_msgSend(*(id *)(a1 + 32), "signpostId");
    if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v13 = (os_signpost_id_t)v12;
      if (os_signpost_enabled(v11))
      {
        *(_DWORD *)buf = 134217984;
        v23 = v9;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, v13, "File Downloaded", "File download size: %{xcode:size-in-bytes}llu", buf, 0xCu);
      }
    }

    if (os_variant_has_internal_content("com.apple.mobilestoredemod"))
    {
      v14 = *(_QWORD *)(a1 + 48);
      v20 = CFSTR("Hash");
      v21 = v14;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "setObject:forKey:", v15, *(_QWORD *)(a1 + 56));

    }
  }
  else
  {
    v16 = sub_1000604F0();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1000CBC3C(a1, v17, v18);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 0;
  }
  objc_msgSend(*(id *)(a1 + 72), "lock");
  --*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
  objc_msgSend(*(id *)(a1 + 72), "broadcast");
  return objc_msgSend(*(id *)(a1 + 72), "unlock");
}

void sub_1000ACBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ACC10(uint64_t a1, void *a2)
{
  void *v3;
  id WeakRetained;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "error"));
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = v3;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "setError:", v5);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v3 = v5;
  }

}

void sub_1000ACCC8(id a1)
{
  MSDDemoPeerResponder *v1;
  void *v2;

  v1 = objc_alloc_init(MSDDemoPeerResponder);
  v2 = (void *)qword_100175618;
  qword_100175618 = (uint64_t)v1;

}

void sub_1000ACFA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AD0B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AD6F0(id a1, MSDServerResponse *a2)
{
  void *v2;
  id v3;
  NSObject *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[MSDServerResponse error](a2, "error"));
  if (v2)
  {
    v3 = sub_1000604F0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000CBCB8(v2, v4);

  }
}

id sub_1000AE4F0(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "saveOperationRequest:requestFlag:completeBy:", CFSTR("RevertSnapshot"), 0, 0);
  v2 = *(void **)(a1 + 40);
  if (v2 && objc_msgSend(v2, "BOOLValue"))
    return objc_msgSend(*(id *)(a1 + 32), "revertSnapshot");
  else
    return objc_msgSend(*(id *)(a1 + 32), "revertSnapshotAndShutdown");
}

void sub_1000B00E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B0170(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B01C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000B117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1000B11FC(id a1, BMStoreEvent *a2)
{
  BMStoreEvent *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;

  v2 = a2;
  v3 = sub_1000604F0();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_1000CC3F8(v4, v5, v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v2, "eventBody"));
  +[MSDBiomeAppInFocusStream printBMAppInfocusEvent:](MSDBiomeAppInFocusStream, "printBMAppInfocusEvent:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v2, "eventBody"));
  v9 = objc_msgSend(v8, "starting");

  return v9;
}

NSCopying *__cdecl sub_1000B129C(id a1, BMStoreEvent *a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](a2, "eventBody"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleID"));

  return (NSCopying *)v3;
}

uint64_t sub_1000B12D8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000B12E8(uint64_t a1)
{

}

void sub_1000B12F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  int v10;
  const char *v11;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "state"))
  {
    v7 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000CC470(v5, v8);
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
    v9 = sub_1000604F0();
    v8 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 136315138;
      v11 = "+[MSDBiomeAppInFocusStream collectAppUsageDataFrom:to:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s - Sink completed successfully.", (uint8_t *)&v10, 0xCu);
    }
  }

}

void sub_1000B1404(id *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  _BYTE v31[24];

  v30 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "startEvent"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "endEvent"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "eventBody"));

  v7 = sub_1000604F0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    sub_1000CC5C4();

  v9 = sub_1000604F0();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    sub_1000CC598();

  +[MSDBiomeAppInFocusStream printBMAppInfocusEvent:](MSDBiomeAppInFocusStream, "printBMAppInfocusEvent:", v4);
  v11 = sub_1000604F0();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    sub_1000CC56C();

  +[MSDBiomeAppInFocusStream printBMAppInfocusEvent:](MSDBiomeAppInFocusStream, "printBMAppInfocusEvent:", v6);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "absoluteTimestamp"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "absoluteTimestamp"));
  v15 = v13;
  v16 = v14;
  v17 = a1[5];
  v18 = a1[6];
  v19 = v15;
  v20 = v16;
  v21 = v20;
  if (MSDIsEnrolledResponse.vtable == (void **)-2336)
  {
    v26 = v19;
    v27 = v20;
LABEL_12:

    goto LABEL_13;
  }
  if (+[MSDBiomeAppInFocusStream timeRange:subsumes:](MSDBiomeAppInFocusStream, "timeRange:subsumes:", v17, v18, v19, v20))
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "launchReason"));
    v23 = objc_msgSend(v22, "isEqualToString:", CFSTR("com.apple.SpringBoard.transitionReason.externalrequest"));

    if ((v23 & 1) == 0)
    {
      v24 = v4;
      v25 = v6;
      v26 = v24;
      v27 = v25;
      v18 = (id)objc_claimAutoreleasedReturnValue(+[MSDBiomeAppInFocusStream eventSessionToAppUsage:](MSDBiomeAppInFocusStream, "eventSessionToAppUsage:", v26, v27));
      objc_msgSend(a1[4], "addObject:", v18);
      v28 = sub_1000604F0();
      v17 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "bundleID"));
        sub_1000CC524(v29, (uint64_t)v31, v17);
      }
      goto LABEL_12;
    }
  }
LABEL_13:

}

void sub_1000B16AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1000B16E0(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 40) = *(id *)(a2 + 40);
  result = *(id *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void sub_1000B1718(uint64_t a1)
{

}

void sub_1000B1740(id *a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  unsigned __int8 v16;
  NSObject *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  id v22;
  id v23;
  _BYTE v25[24];

  v23 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "events"));
  v4 = objc_opt_class(NSArray, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) == 0 || !objc_msgSend(v2, "count"))
  {
    v22 = sub_1000604F0();
    v17 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1000CC5F0();
    v14 = 0;
    v13 = 0;
    v6 = 0;
    goto LABEL_13;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", 0));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "eventBody"));

  v7 = sub_1000604F0();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    sub_1000CC670();

  +[MSDBiomeAppInFocusStream printBMAppInfocusEvent:](MSDBiomeAppInFocusStream, "printBMAppInfocusEvent:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject absoluteTimestamp](v6, "absoluteTimestamp"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject absoluteTimestamp](v6, "absoluteTimestamp"));
  v11 = a1[5];
  v12 = a1[6];
  v13 = v9;
  v14 = v10;
  if (MSDIsEnrolledResponse.vtable == (void **)-2336)
  {

    v17 = v14;
LABEL_13:

    goto LABEL_14;
  }
  if (+[MSDBiomeAppInFocusStream timeRange:subsumes:](MSDBiomeAppInFocusStream, "timeRange:subsumes:", v11, v12, v13, v14))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject launchReason](v6, "launchReason"));
    v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("com.apple.SpringBoard.transitionReason.externalrequest"));

    if ((v16 & 1) == 0)
    {
      v17 = v6;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[MSDBiomeAppInFocusStream eventSessionToAppUsage:](MSDBiomeAppInFocusStream, "eventSessionToAppUsage:", v17, 0));
      objc_msgSend(a1[4], "addObject:", v18);
      v19 = sub_1000604F0();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject bundleID](v17, "bundleID"));
        sub_1000CC628(v21, (uint64_t)v25, v20);
      }

      v6 = v17;
      goto LABEL_13;
    }
  }
LABEL_14:

}

void sub_1000B1A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

int64_t sub_1000B1A38(id a1, NSDictionary *a2, NSDictionary *a3)
{
  NSDictionary *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("sessionStartTime")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("sessionStartTime")));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

void sub_1000B1C5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B1DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000B1F34(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 8u);
}

void sub_1000B1F40(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

uint64_t sub_1000B1F58(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2114;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_1000B1FD0(id a1)
{
  MSDLanguageAndRegionHelper *v1;
  void *v2;

  v1 = objc_alloc_init(MSDLanguageAndRegionHelper);
  v2 = (void *)qword_100175620;
  qword_100175620 = (uint64_t)v1;

}

void sub_1000B2830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B2960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000B4E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B4EB8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000B4EC8(uint64_t a1)
{

}

void sub_1000B4ED0(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  NSObject *v30;
  char *v31;
  os_signpost_id_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  __int16 v42;
  void *v43;

  v6 = a2;
  v7 = a3;
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "serverType"));
    v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("localCachingHub"));

    if (!v6)
    {
      if (v10)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                                                                           + 40), "urlSchema"));
        objc_msgSend(*(id *)(a1 + 32), "setLocalHubURLSchema:", v26);

      }
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[MSDAnalyticsEventHandler sharedInstance](MSDAnalyticsEventHandler, "sharedInstance"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "serverType"));
      objc_msgSend(v27, "sendFileDownloadSourceEvent:", v28);

      v29 = sub_100060640();
      v30 = objc_claimAutoreleasedReturnValue(v29);
      v31 = (char *)objc_msgSend(*(id *)(a1 + 32), "signpostId");
      if ((unint64_t)(v31 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v32 = (os_signpost_id_t)v31;
        if (os_signpost_enabled(v30))
        {
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fileInfo"));
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "fileHash"));
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                                                                             + 40), "serverType"));
          v40 = 138543618;
          v41 = v34;
          v42 = 2114;
          v43 = v35;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, v32, "Download File", "File with hash %{public}@ downloaded from %{public}@", (uint8_t *)&v40, 0x16u);

        }
      }

      goto LABEL_21;
    }
    if (v10)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), a2);
    if (!v7
      || (v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("statusCode"))),
          v12 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8),
          v13 = *(void **)(v12 + 40),
          *(_QWORD *)(v12 + 40) = v11,
          v13,
          !v11))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v15 = *(void **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = &off_10014DB80;

    }
  }
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "nextTry"));
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v16;

  v19 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
  if (v19)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "urlSchema"));
    objc_msgSend(*(id *)(a1 + 56), "setUrlSchema:", v20);

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "credential"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", CFSTR("Headers")));
    objc_msgSend(*(id *)(a1 + 56), "setCredentialHeaders:", v22);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "serverType"));
    objc_msgSend(*(id *)(a1 + 56), "setServerType:", v23);

    objc_msgSend(*(id *)(a1 + 64), "launchTaskWithInfo:", *(_QWORD *)(a1 + 56));
    goto LABEL_24;
  }
  v24 = sub_1000604F0();
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    sub_1000CCA20(a1, v25);

  if (objc_msgSend(v6, "code") == (id)-1001
    || objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "integerValue") == (id)408)
  {
    objc_msgSend(*(id *)(a1 + 32), "limitConcurrentRequests");
  }
LABEL_21:
  v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "parseResponseForError:andPayload:", v6, v7));
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  v38 = *(void **)(v37 + 40);
  *(_QWORD *)(v37 + 40) = v36;

  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "serverType"));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setDownloadSource:", v39);

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "setLocalHubError:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
  if (objc_msgSend(*(id *)(a1 + 72), "tryCachingHub"))
    objc_msgSend(*(id *)(a1 + 32), "updateLocalHubReachability:withRequest:andResponse:", objc_msgSend(*(id *)(a1 + 48), "localHubReachable"), *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40));
  objc_msgSend(*(id *)(a1 + 32), "handleCompletionForDownloadRequest:withResponse:forSession:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), *(_QWORD *)(a1 + 64));
LABEL_24:

}

_QWORD *sub_1000B63A4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  if (result)
  {
    v3 = result;
    result = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", a2, a3));
    *v3 = result;
  }
  return result;
}

_QWORD *sub_1000B63E4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  if (result)
  {
    v4 = result;
    result = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:reason:](NSError, "errorDomainMSDWithCode:message:reason:", a2, a3, a4));
    *v4 = result;
  }
  return result;
}

void sub_1000B6428(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a3;
  if (a1 && !*a1)
  {
    v7 = v5;
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorDomainMSDWithCode:message:](NSError, "errorDomainMSDWithCode:message:", a2, v5));
    v5 = v7;
    *a1 = v6;
  }

}

void sub_1000B7168(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);
  MSDServerResponse *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = sub_1000604F0();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138543362;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Log upload completed. Error: %{public}@", (uint8_t *)&v9, 0xCu);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));
  if (v6)
  {
    v7 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));
    v8 = -[MSDServerResponse initWithError:]([MSDServerResponse alloc], "initWithError:", v3);
    ((void (**)(_QWORD, MSDServerResponse *))v7)[2](v7, v8);

  }
}

void sub_1000B7274(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005FF8((void *)&_mh_execute_header, a1, a3, "F13Server: No extension has been matched yet.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B72A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005FF8((void *)&_mh_execute_header, a1, a3, "F13Server: Extension not running, launching extension", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B72D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005FF8((void *)&_mh_execute_header, a1, a3, "***F13SERVER: Verifying that extension is running...", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B7304()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v1, v2, "ip address - inet_ntop failed - %s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000B7370()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v1, v2, "net mask - inet_ntop failed - %s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000B73DC()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v1, v2, "broadcast addr - inet_ntop failed - %s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000B7448(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Missing interface name", buf, 2u);
}

void sub_1000B7484()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v1, v2, "getifaddrs failed - %s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000B74F0(uint64_t a1, NSObject *a2, float a3)
{
  int v3;
  double v4;
  __int16 v5;
  uint64_t v6;

  v3 = 134218242;
  v4 = a3;
  v5 = 2114;
  v6 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "MSDAudioController: Failed to set volume to: %f for category: %{public}@", (uint8_t *)&v3, 0x16u);
}

void sub_1000B7574(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "MSDAudioController: Failed to get volume for category: %{public}@", (uint8_t *)&v3);
}

void sub_1000B75E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "MSDAudioController: Failed to select route descriptor: %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7640()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "MSDAudioController: Failed to copy system music context: %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B76A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "MSDAudioController: Failed to remove selectd route descriptor: %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7700(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDAudioController: Failed to initialize AVSystemController.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B7730(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v5 = 138543362;
  v6 = v3;
  sub_100007888((void *)&_mh_execute_header, a2, v4, "MSDAudioController: Failed to subscribe to AVSystemController died notification: %{public}@", (uint8_t *)&v5);

}

void sub_1000B77BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "MSDAudioController: Failed to set property for FigRouteDiscoverer: %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B781C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDAudioController: No matching route found.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B784C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDAudioController: Timeout finding route with matching UID.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B787C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "MSDAudioController: Failed to create XPC for FigRouteDiscoverer: %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B78DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "MSDAudioController: Failed to copy property from FigRouteDiscoverer: %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B793C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v5 = 138543362;
  v6 = v3;
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to remove configuration profile from staging: %{public}@", (uint8_t *)&v5);

}

void sub_1000B79C8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "Failed to copy file from content cache: %{public}@", (uint8_t *)&v3);
}

void sub_1000B7A34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to get profile data for profile.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7A60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to install profile.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7A8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to uninstall profile.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7AB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to install configuration profile. error: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B7B18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to remove configuration profile.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7B44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to query isProfileInstalled: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B7BA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to install restrictions profile: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B7C04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to uninstall restrictions profile: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B7C64(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Component retrying: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000B7CD8(os_log_t log)
{
  _DWORD v1[2];

  v1[0] = 67109120;
  v1[1] = 5;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "DEBUG - Failed to get kMGQDiskUsageAmountDataReserved.  Default to %d percent of disk's free space.", (uint8_t *)v1, 8u);
}

void sub_1000B7D54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "There is a log upload in progress, ignoring this request", a5, a6, a7, a8, 0);
}

void sub_1000B7D88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "S3 URL not available. Informing vhub of the error", a5, a6, a7, a8, 0);
}

void sub_1000B7DBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out turning on 'Find My' service.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7DE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out configuring iCloud account features.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7E14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out signing into iCloud account service.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7E40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out authenticating account credentials.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7E6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out signing into iTunes account service.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7E98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out signing out iCloud account service.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7EC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out turning off 'Find My' service.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7EF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out signing out iTunes account service.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7F1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to create CDP state controller for primary account!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7F48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out waiting for iCloud keychain to sync.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B7F74(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to authenticate account: %{public}@", v5);

  sub_100006460();
}

void sub_1000B7FF4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to sign in to Apple ID with results: %{public}@", v2);
  sub_100008728();
}

void sub_1000B8058()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to create temporary Apple account.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B8084()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to fetch iCloud terms: %{public}@", v2);
  sub_100008728();
}

void sub_1000B80E8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to agree to iCloud terms: %{public}@", v2);
  sub_100008728();
}

void sub_1000B814C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to sign out from Apple ID with results: %{public}@", v2);
  sub_100008728();
}

void sub_1000B81B0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to sign out from Apple ID with error: %{public}@", v5);

  sub_100006460();
}

void sub_1000B8230(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to save iCloud account as a managed account: %{public}@", v5);

  sub_100006460();
}

void sub_1000B82B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "No iCloud account found on device.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B82DC(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "iCloud account is not provisioned to use this feature.", buf, 2u);
}

void sub_1000B8318(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to update iCloud account features: %{public}@", v5);

  sub_100006460();
}

void sub_1000B8398()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to enable 'Find My' service.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B83C4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to toggle 'Send Last Location': %{public}@", v5);

  sub_100006460();
}

void sub_1000B8444()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "No password for existing account provided.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B8470(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100007888((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to obtain 'Find My' wipe token: %{public}@", (uint8_t *)a2);

}

void sub_1000B84BC(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;

  v3 = 138543362;
  v4 = CFSTR("com.apple.private.alloy.mobilestoredemo.icloud");
  sub_100007888((void *)&_mh_execute_header, a1, a3, "Failed to create IDSAccountController for IDS service: %{public}@", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000B8530(uint64_t a1, NSObject *a2, double a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  double v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2048;
  v6 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IDS %{public}@ timed out after %f seconds.", (uint8_t *)&v3, 0x16u);
  sub_100008728();
}

void sub_1000B85AC(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100007888((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to create CKKSControl object: %{public}@", (uint8_t *)a2);

}

void sub_1000B85F8(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to sync iCloud keychain: %{public}@", v5);

  sub_100006460();
}

void sub_1000B8678()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to create IDSAccountController.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B86A4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Account not allowlisted: %{public}@", v2);
  sub_100008728();
}

void sub_1000B8708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot create regular expression", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B8734(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "ERROR - Failed to extract UUID from provisioning profile:  %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8798(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "ERROR - File:  %{public}@ is not a valid provisioning profile.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B87FC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "ERROR - Provisioning profile does not exist:  %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8860(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to rollover analytics logs", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B8890(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to submit analytics logs", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B88C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to disable sampling for all transforms", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000B88F0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: No Info section or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8960(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: No Product section or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B89D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Could not initialize manifestVerifier\n", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8A40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: InstallationOrder section in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8AB0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: no BackupData section or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8B20(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "One or more components have an invalid platformType", v1, 2u);
}

void sub_1000B8B60(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 136315650;
  *(_QWORD *)&v3[4] = "-[MSDSignedManifestV7 initWithManifestData:]";
  *(_WORD *)&v3[12] = 2048;
  *(_QWORD *)&v3[14] = a1;
  *(_WORD *)&v3[22] = 2048;
  sub_100014B68((void *)&_mh_execute_header, a2, a3, "%s - InstallationOrder count (%lu) doesn't match number of components in manifest (%lu)", *(const char **)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
}

void sub_1000B8BE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - ConfigurationProfiles section in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8C54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Packages section in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8CC4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: SystemApps section in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8D34(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Apps section in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8DA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: payload format not correct.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B8E14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - ERROR - Missing Info section for app:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B8E80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - ERROR - Missing both RealSize and Size values for app:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B8EEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Missing Info section for stand-alone package:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B8F58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - ERROR - Missing both RealSize and Size values for package:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B8FC4()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_100014B54();
  sub_100014B68((void *)&_mh_execute_header, v0, v1, "%s - Missing manifest data for section: %{public}@ for identifier: %{public}@", v2);
}

void sub_1000B903C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Missing app object for app:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B90A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Missing version number for app:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B9114()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Missing package object for stand-alone package:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B9180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Missing version number for stand-alone package:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B91EC()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100014B8C();
  sub_100014B48((void *)&_mh_execute_header, v0, (uint64_t)v0, "Info section is missing for item %{public}@ under component %{public}@.", v1);
  sub_100008728();
}

void sub_1000B9254(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Missing componentName.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000B92C4()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100014B8C();
  sub_100014B48((void *)&_mh_execute_header, v0, (uint64_t)v0, "Unrecognized container type: %{public}@ for component %{public}@", v1);
  sub_100008728();
}

void sub_1000B932C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B7C();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "No component %{public}@ under section %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B93A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B7C();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "No %{public}@ key in component %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B9424()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B7C();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "No %{public}@ key in component %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000B94A0(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v6 = 138543618;
  v7 = a1;
  v8 = 2114;
  v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to remove file from %{public}@ - %{public}@", (uint8_t *)&v6, 0x16u);

}

void sub_1000B9550(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to set file attributes: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000B95C4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  v6 = *__error();
  v7 = 138543874;
  v8 = a1;
  v9 = 2114;
  v10 = a2;
  v11 = 1024;
  v12 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to clonefile from %{public}@ to %{public}@ - %{errno}d", (uint8_t *)&v7, 0x1Cu);
}

void sub_1000B9678(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Timeout launching app.", v1, 2u);
}

void sub_1000B96B8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "With options: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000B972C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100015668((void *)&_mh_execute_header, v2, v3, "Failed to launch app: %{public}@ error: %{public}@", v4, v5, v6, v7, 2u);

  sub_10001567C();
}

void sub_1000B97C0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100015668((void *)&_mh_execute_header, v2, v3, "Failed to terminate app: %{public}@ error: %{public}@", v4, v5, v6, v7, 2u);

  sub_10001567C();
}

void sub_1000B9854(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Cannot load Domains.plist: %{public}@.", (uint8_t *)&v2, 0xCu);
}

void sub_1000B98C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find CameraRollDomain, or in wrong format.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B98F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find HomeDomain, or in wrong format.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9920()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find KeychainDomain, or in wrong format.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B994C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find MediaDomain, or in wrong format.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9978()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RootDomain, or in wrong format.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B99A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find SystemPreferencesDomain, or in wrong format.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B99D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsNotToBackup under SystemPreferencesDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B99FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsToRemoveOnRestore under RootDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9A28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsToBackupAndRestore under MediaDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9A54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsNotToBackup under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9A80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsToBackupAndRestore under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9AAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Backup DoNotDisturb DB - Cannot find RelativePathsToBackupAndRestore under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9AD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Backup DoNotDisturb DB - Cannot find RelativePathsToRestoreOnly under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9B04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Backup DoNotDisturb DB - Cannot find RelativePathsToOnlyBackupEncrypted under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9B30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Backup SafariTabs.db - Cannot find RelativePathsToBackupAndRestore under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9B5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Backup SafariTabs.db - Cannot find RelativePathsToRestoreOnly under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9B88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Backup SafariTabs.db - Cannot find RelativePathsToOnlyBackupEncrypted under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9BB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Backup SafariTabs.db - Cannot find RelativePathsNotToBackupToService under HomeDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9BE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsToRemoveOnRestore under HomeKitDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9C0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsNotToBackupToService under HomeKitDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9C38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsNotToBackupInMegaBackup under HomeKitDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9C64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsToRestoreOnly under HomeKitDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9C90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsToOnlyBackupEncrypted under HomeKitDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9CBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsNotToBackup under CameraRollDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9CE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find RelativePathsToRemoveOnRestore under CameraRollDomain.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000B9D14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "Operation succeeded: %@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B9D74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "Operation failed: %@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B9DD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "Operation retrying: %@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B9E34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "Operation skipped: %@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B9E94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "Operation cancelled: %@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000B9EF4(void *a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;

  v4 = 134217984;
  v5 = (unint64_t)objc_msgSend(a1, "length") >> 1;
  sub_100007888((void *)&_mh_execute_header, a2, v3, "Unable to malloc bytes of size: %lu", (uint8_t *)&v4);
}

void sub_1000B9F78(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2048;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "String should be all hex digits: %@ (bad digit around %ld)", (uint8_t *)&v3, 0x16u);
}

void sub_1000B9FFC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "Hex strings should have an even number of digits (%@)", (uint8_t *)&v3);
}

void sub_1000BA068(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  sub_100014B48((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to grant permission for resource: %{public}@ to bundleID: %{public}@", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BA0E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to load privacy configuration", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BA110(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Unable to find the appropriate privacy rule.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BA180(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "Failed to load configurations with error %{public}@\n", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BA1E4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  void *v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v5 = 136315394;
  v6 = "-[MSDAppPrivacyPermissionsHelper saveNetworkPrivacyConfiguration:]_block_invoke";
  v7 = 2114;
  v8 = v3;
  sub_100014B48((void *)&_mh_execute_header, a2, v4, "%s - Failed to save privacy configuration: %{public}@", (uint8_t *)&v5);

}

void sub_1000BA284()
{
  NSObject *v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint8_t v4[14];
  uint64_t v5;

  sub_10001BA64();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "getName"));
  sub_10001BA30();
  v5 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "%{public}@: Required key not found or in unexpected format: %{public}@", v4, 0x16u);

}

void sub_1000BA320()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10001BA64();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "getName"));
  sub_10001BA30();
  sub_10001BA54();
  sub_10001BA1C((void *)&_mh_execute_header, v2, v3, "%{public}@: '%{public}@' key not found or in unexpected format: %{public}@", v4, v5, v6, v7, v8);

  sub_10001BA44();
}

void sub_1000BA3A8()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10001BA64();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "getName"));
  sub_10001BA30();
  sub_10001BA54();
  sub_10001BA1C((void *)&_mh_execute_header, v2, v3, "%{public}@: '%{public}@' key not found or in unexpected format: %{public}@", v4, v5, v6, v7, v8);

  sub_10001BA44();
}

void sub_1000BA430()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10001BA64();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "getName"));
  sub_10001BA30();
  sub_10001BA54();
  sub_10001BA1C((void *)&_mh_execute_header, v2, v3, "%{public}@: '%{public}@' key not found or in unexpected format: %{public}@", v4, v5, v6, v7, v8);

  sub_10001BA44();
}

void sub_1000BA4B8()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10001BA64();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "getName"));
  sub_10001BA30();
  sub_10001BA54();
  sub_10001BA1C((void *)&_mh_execute_header, v2, v3, "%{public}@: '%{public}@' key not found or in unexpected format: %{public}@", v4, v5, v6, v7, v8);

  sub_10001BA44();
}

void sub_1000BA540(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Bundle tracker hasn't been initialized yet.", a5, a6, a7, a8, 2u);
}

void sub_1000BA5B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Missing manifest version in bundle info.", a5, a6, a7, a8, 2u);
}

void sub_1000BA628(void *a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  __int16 v11;
  id v12;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "criticalComponents"));
  v7 = 134218496;
  v8 = a2;
  v9 = 2048;
  v10 = objc_msgSend(v6, "count");
  v11 = 2048;
  v12 = objc_msgSend(a1, "totalComponents");
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Total Components: %ld. Critical Update: %ld, Full Update: %ld", (uint8_t *)&v7, 0x20u);

}

void sub_1000BA6F8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Bundle update timer was started previously.", v1, 2u);
}

void sub_1000BA738(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100020150(a1);
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: XPC connection to RPCompanionLinkClient interrupted!", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000BA7AC(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100020150(a1);
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: XPC connection to RPCompanionLinkClient invalidated!", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000BA820(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = sub_100020150(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100015668((void *)&_mh_execute_header, v4, v5, "%{public}@: Failed to activate RPCompanionLinkClient: %{public}@", v6, v7, v8, v9, 2u);

  sub_10001567C();
}

void sub_1000BA8BC(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "%{public}@: Authentication failed: %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000BA940(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "%{public}@: Failed to fetch pairing secret: %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000BA9C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to retrieve master manifest for %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BAA24(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to generate operation sequences from app dependencies.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BAA54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "ERROR - Missing configuration profile ID from installation order item:  %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BAABC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const __CFString *v3;

  sub_10001BA30();
  v3 = CFSTR("ConfigurationProfiles");
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "ERROR - Missing data for profile:  %{public}@ under component:  %{public}@", v2);
  sub_100008728();
}

void sub_1000BAB2C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const __CFString *v3;

  sub_10001BA30();
  v3 = CFSTR("ConfigurationProfiles");
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "ERROR - Missing info for profile:  %{public}@ under component:  %{public}@", v2);
  sub_100008728();
}

void sub_1000BAB9C()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100014B8C();
  sub_100014B48((void *)&_mh_execute_header, v0, (uint64_t)v0, "ERROR - Missing file hash value for profile:  %{public}@ with UUID:  %{public}@", v1);
  sub_100008728();
}

void sub_1000BAC04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "ERROR - There should be exactly one profile under UUID:  %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BAC64(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to initialize operation group for app uninstall.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BAC94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to retrieve settings data for %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BACF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to initialize operation group for %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BAD54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%{public}s - Key is nil.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BADC4(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Setting preference %{public}@:%{public}@", (uint8_t *)&v3, 0x16u);
  sub_100008728();
}

void sub_1000BAE44(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%{public}s - Key is nil.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BAEB4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%{public}s - Keys array pointer is nil.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BAF24(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "info"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed trust evaluation for task: %{public}@", (uint8_t *)&v5, 0xCu);

}

void sub_1000BAFD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerCommander: XPC connection interrupted!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BAFFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerCommander: XPC connection invalidated!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB028()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v1, v2, "MSDDemoPeerCommander: Failed to unarchive app data: %{public}@", v3, v4, v5, v6, v7);

  sub_100006460();
}

void sub_1000BB0A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v1, v2, "MSDDemoPeerCommander: Failed to unarchive environment data: %{public}@", v3, v4, v5, v6, v7);

  sub_100006460();
}

void sub_1000BB120(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDDemoPeerCommander: Failed to unarchive test script data: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BB198(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDDemoPeerCommander: Failed to unarchive GK results data: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BB210(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDDemoPeerCommander: Failed to unarchive GK metrics data: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BB288()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerCommander: No LS measurements data found.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB2B4(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDDemoPeerCommander: Failed to unarchive IPD status data: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BB32C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerCommander: No final IPD found.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerCommander: No IPD reset stage found.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB384(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDDemoPeerCommander: Failed to unarchive AX settings data: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BB3FC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDDemoPeerCommander: Failed to archive AX settings: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BB474(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDDemoPeerCommander: Failed to archive WiFi settings: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BB4EC(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v4 = 138543362;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to start sync session observer: %{public}@", (uint8_t *)&v4, 0xCu);

}

void sub_1000BB580(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to execute IDS command on paired watch.", a5, a6, a7, a8, 0);
}

void sub_1000BB5B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to send IDS command to paired watch.", a5, a6, a7, a8, 0);
}

void sub_1000BB5E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to get keychain info to save.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB614()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to save bt keychain info to demo volume.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB640()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to remove existing keychain data file. Error: %{public}@.", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BB6A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to preserve Bluetooth db and pref files.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB6CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to read content of encrypted keychain data file", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB6F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to decrypt keychain data file.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB724()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Unable to read keychain data file.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB750()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Unable to restore BT keychain item for attributes: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BB7B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "No need to restore bt pairing record.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BB7DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to copy BT File: %{public}@.", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BB83C()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000647C();
  v3 = 2114;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to copy BT File: %{public}@. Error: %{public}@", v2, 0x16u);
  sub_100008728();
}

void sub_1000BB8B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to create BT shelter folder. Error: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BB918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to remove BT shelter folder. Error: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BB978(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to DDL lock device.", a5, a6, a7, a8, 0);
}

void sub_1000BB9AC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Device is either not a DDL device or its content is not locked.", a5, a6, a7, a8, 0);
}

void sub_1000BB9E0(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[MSDPushNotificationHandler connection:didReceiveIncomingMessage:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s - Failed to flash the device.", (uint8_t *)&v1, 0xCu);
}

void sub_1000BBA60(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_10002E55C((void *)&_mh_execute_header, a2, a3, "Received the following payload in push notification: %{public}@", (uint8_t *)&v3);
}

void sub_1000BBACC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "apsToken"));
  v5 = 138543362;
  v6 = v3;
  sub_10002E55C((void *)&_mh_execute_header, a2, v4, "Received token from APNS framework: %{public}@", (uint8_t *)&v5);

}

void sub_1000BBB58(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to build component from item.", a5, a6, a7, a8, 0);
}

void sub_1000BBB8C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to build components for removing app.", a5, a6, a7, a8, 0);
}

void sub_1000BBBC0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to migrate cellular support flag", v1, 2u);
  sub_100006008();
}

void sub_1000BBBFC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a1, a3, "Failed to switch to mode %d to complete snapshot revert.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BBC68(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a1, a3, "Failed to switch to mode %d to update accounts.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BBCD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "No content root path set.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BBD04(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to create device manifest.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BBD34(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to create device manifest folder: %{public}@", v5);

  sub_100006460();
}

void sub_1000BBDB4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Cannot find metadata for path %{public}@", v2);
  sub_100008728();
}

void sub_1000BBE18()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to apply file attributes to files in final: %{public}@", v2);
  sub_100008728();
}

void sub_1000BBE7C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to move stashed staging to final.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BBEAC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to move pseudo content root path: %{public}@", v5);

  sub_100006460();
}

void sub_1000BBF2C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to create parent folder: %{public}@", v2);
  sub_100008728();
}

void sub_1000BBF90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Failed to load bundle:  %{public}@", v2, v3, v4, v5, 2u);
}

void sub_1000BC000()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Missing Info.plist from bundle:  %{public}@", v2, v3, v4, v5, 2u);
}

void sub_1000BC070(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "Container does not exist for containerIdentifier:%{public}@", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BC0D8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a1 = 134217984;
  *(_QWORD *)(a1 + 4) = a2;
  sub_100007888((void *)&_mh_execute_header, a3, (uint64_t)a3, "data blob size larger than allowed for 3rd party apps.:%lu", (uint8_t *)a1);
}

void sub_1000BC114(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "Could not create a container for containerIdentifier:%{public}@", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BC17C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "Trying to retrieve data without having container:%{public}@", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BC1E4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Removing non-existing persistent data blob.", v1, 2u);
}

void sub_1000BC224(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%{public}s: Cannot create SecTask from audit token", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BC294(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%{public}s: No data received.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BC304()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Entitlements is needed.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC330()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "It's an XPC_TYPE_CONNECTION", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC35C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Checking the type", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC388()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Received a connection?", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC3B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "message = %{public}s", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BC414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: required key not found: %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000BC480()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "query = %{public}s", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BC4E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot process DemoMaualUpdate command.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC50C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot process DemoSnapshotRevert command.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC538()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot process Demo command.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC564()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot process Virgin command.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC590()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000647C();
  v3 = 2114;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Unexpected value type for DeviceOptions (subkey: %{public}s): %{public}@", v2, 0x16u);
  sub_100008728();
}

void sub_1000BC60C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot convert dictionary into json data.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC638(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Timed out after waiting %llus for Springboard restart", a5, a6, a7, a8, 0);
  sub_100008728();
}

void sub_1000BC6A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to get languageIdentifier.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC6D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to get regionCode.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC6FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "xpcEndTime must be of type XPC_TYPE_DOUBLE", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC728()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "xpcStartTime must be of type XPC_TYPE_DOUBLE", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC754(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%@ request is only serviced on internal build", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BC7C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Device is not demo device, ignoring OS Update request", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC7F0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s is supported on internal builds only", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BC860()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Unrecognized action for wallpaper settings management: %s", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BC8C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Device should not be in Offline Mode, ignoring request", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BC8EC(char a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;

  v2 = 136315394;
  v3 = "-[MSDLocalMessageResponder handleMessage:from:]";
  v4 = 1024;
  v5 = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s - isOpen: %d", (uint8_t *)&v2, 0x12u);
  sub_100008728();
}

void sub_1000BC974()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100038F90();
  sub_100038F80((void *)&_mh_execute_header, v0, v1, "%s - Next open date: %@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000BC9E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100038F90();
  sub_100038F80((void *)&_mh_execute_header, v0, v1, "%s - Next close date: %@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000BCA4C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "No NSArray inside the xpc payload for key %@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BCABC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to retrieve the evaluate against date from the xpc request", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BCAE8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%@ request is only serviced on internal build", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BCB58(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s operation is restricted to internal builds only", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BCBC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "The client does not have proper entitlement", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BCBF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Received a XPC request", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BCC20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Sending XPC (Reboot Timeout) to Pricing App", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BCC4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to convert xpc request to dictionary", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BCC78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "It's an XPC_TYPE_ERROR", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BCCA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Message handled", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BCCD0()
{
  __assert_rtn("MSD_handle_connection_block_invoke", "MSDLocalMessageResponder.m", 151, "type == XPC_TYPE_DICTIONARY");
}

void sub_1000BCCF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Received an XPC request?", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BCD24(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100007888((void *)&_mh_execute_header, a3, (uint64_t)a3, "MSDAirPlayAssistedSender: Failed to deserialize input data: %{public}@", (uint8_t *)a2);

}

void sub_1000BCD70(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 134217984;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "MSDAirPlayAssistedSender: Unknown AirPlay discovery mode: %lu", (uint8_t *)&v3);
}

void sub_1000BCDDC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a2, a3, "MSDAirPlayAssistedSender: Failed to activate sender: %d", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BCE40(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "_NSStringFromSenderState:", objc_msgSend(a1, "state")));
  v5 = 138543362;
  v6 = v3;
  sub_100007888((void *)&_mh_execute_header, a2, v4, "MSDAirPlayAssistedSender: Activating sender in unexpected state: %{public}@", (uint8_t *)&v5);

}

void sub_1000BCEDC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a2, a3, "MSDAirPlayAssistedSender: Failed to start BonjourBrowser: %d", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BCF40(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a2, a3, "MSDAirPlayAssistedSender: Failed to create BonjourBrowser: %d", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BCFA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDAirPlayAssistedSender: Failed to create AVOutputDeviceDiscoverySession.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BCFD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDAirPlayAssistedSender: Failed to add route to system music for speaker.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BD004(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDAirPlayAssistedSender: Failed to remove route to system music for speaker.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BD034(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  v4 = 138543362;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%{public}@: failed to convert data to dict", (uint8_t *)&v4, 0xCu);

}

void sub_1000BD0C8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  sub_100014B48((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to send ids message to paired device. Identifier: %{public}@, Error: %{public}@", (uint8_t *)&v3);
}

void sub_1000BD144(uint64_t a1, void *a2, NSObject *a3)
{
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100014B48((void *)&_mh_execute_header, a3, v5, "Failed to send IDS response message. Identifier: %{public}@, Error: %{public}@", v6);

  sub_10001567C();
}

void sub_1000BD1D0(uint64_t a1, void *a2, NSObject *a3)
{
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100014B48((void *)&_mh_execute_header, a3, v5, "Failed to send IDS message. Identifier: %{public}@, Error: %{public}@", v6);

  sub_10001567C();
}

void sub_1000BD25C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - No AppSwitcher model file exists at path %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000BD2C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - AppSwitcher model file could not be stashed at path %{public}@ for an unknown reason", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000BD334()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Containing folder %{public}@ for AppSwitcher model file does not exist", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000BD3A0(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  void *v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "description"));
  v6 = 136315650;
  v7 = "-[MSDAppSwitcherManager createSwitcherModelAtPath:]";
  v8 = 2114;
  v9 = a1;
  v10 = 2114;
  v11 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%s - Error writing empty app switcher model to path %{public}@, with error %{public}@", (uint8_t *)&v6, 0x20u);

}

void sub_1000BD460(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;

  v2 = 136315394;
  v3 = "-[MSDAVFlashlight flash:]";
  v4 = 1026;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s - INFO - duration:  %{public}d", (uint8_t *)&v2, 0x12u);
  sub_100008728();
}

void sub_1000BD4E4(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[MSDAVFlashlight flash:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s - Device doesn't have flashlight or flashligh is currently not available.", (uint8_t *)&v1, 0xCu);
  sub_100008728();
}

void sub_1000BD560(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100019200((void *)&_mh_execute_header, a1, a3, "%s - INFO - Done flashing ...", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BD5D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100019200((void *)&_mh_execute_header, a1, a3, "%s - INFO - Start flashing ...", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BD640(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_100015668((void *)&_mh_execute_header, v1, v2, "Failed to set flashlight level to %{public}.1f - Error:  %{public}@", v3, v4, v5, v6, 2u);

}

void sub_1000BD6DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_100015668((void *)&_mh_execute_header, v1, v2, "%s - Failed to turn power on - Error:  %{public}@", v3, v4, v5, v6, 2u);

}

void sub_1000BD774()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to read paired peers into data.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BD7A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to encrypt paired peers data.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BD7CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to save encrypted data: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BD82C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to delete file: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BD88C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to read encrypted data: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BD8EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to decrypt paired peers data.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BD918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: No matching paired peer found.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BD944()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to find peer with ID %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BD9A4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v3 = 136315394;
  v4 = "-[MSDDemoPeerPairingManager removePairedPeer:withCompletion:]";
  v5 = 2114;
  v6 = a1;
  sub_100014B48((void *)&_mh_execute_header, a2, a3, "%s - Timed out waiting to remove peer '%{public}@'", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BDA20(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138543618;
  v5 = v3;
  v6 = 2114;
  v7 = a2;
  sub_100014B48((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to remove paired peer: '%{public}@' - Error: '%{public}@'", (uint8_t *)&v4);
  sub_100008728();
}

void sub_1000BDA9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: XPC connection with CUPairingManager interrupted!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDAC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: XPC connection with CUPairingManager invalidated!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDAF4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "MSDDemoPeerPairingManager: Failed to get paired peers: %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000BDB60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Timed out getting paired peers.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDB8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to setup CUPairingManager.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDBB8()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000647C();
  v3 = 2114;
  v4 = v0;
  sub_100014B48((void *)&_mh_execute_header, v1, (uint64_t)v1, "MSDDemoPeerPairingManager: Failed to save paired peer: %{public}@ error: %{public}@", v2);
  sub_100008728();
}

void sub_1000BDC34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Timed out saving paired peer.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDC60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to archive paired peers: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BDCC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerPairingManager: Failed to unarchive paired peers data: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BDD20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Must specify device udid in request info", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDD4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to get hmac key for server session task", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDD78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot create authenticator.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDDA4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Cannot add authentication header - %{public}@.", v5);

  sub_100006460();
}

void sub_1000BDE24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "URLSchemaLis is not a string.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDE50(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = 0;
  sub_100007888((void *)&_mh_execute_header, a1, a3, "Headers in wrong type: %{public}@", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BDEBC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "urlSchema"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Cannot find prefix portion in URLSchema %{public}@", v5);

  sub_100006460();
}

void sub_1000BDF3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot create URL request.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BDF68()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Header is not in correct format: %{public}@", v2);
  sub_100008728();
}

void sub_1000BDFCC(void *a1)
{
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;
  void *v7;
  void *v8;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "fileHash"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "savePath"));
  sub_100040D30();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x20u);

  sub_10001BA44();
}

void sub_1000BE088()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to add BAA authentication to request header; error: %@",
    v2);
  sub_100008728();
}

void sub_1000BE0EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to get generate BAA certificate", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE118()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Could not get file handle for %{public}@", v2);
  sub_100008728();
}

void sub_1000BE17C()
{
  int *v0;
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;

  __error();
  v0 = __error();
  strerror(*v0);
  sub_100040D30();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x1Cu);
  sub_10001BA44();
}

void sub_1000BE224(uint64_t a1, void *a2)
{
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100040D30();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x16u);

}

void sub_1000BE2CC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to load wallpaper settings from file: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BE344(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to write wallpaper settings to file: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BE3BC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to create parent directory: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BE434(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Timed out deleting poster data store.", v1, 2u);
}

void sub_1000BE474(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to delete poster data store: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000BE4EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDRapportDeviceExplorer: XPC connection to RPCompanionLinkClient interrupted!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE518()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDRapportDeviceExplorer: XPC connection to RPCompanionLinkClient invalidated!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE544(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "MSDRapportDeviceExplorer: Failed to activate device discovery client: %{public}@", v4, 0xCu);

}

void sub_1000BE5D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "MSDRapportDeviceExplorer: Ignore device either not in pairing mode or not yet authenticated.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE600()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "MSDRapportDeviceExplorer: Ignore device both in pairing mode and authenticated.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE62C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "MSDRapportDeviceExplorer: Found RPCompanionLinkDevice: <%{public}@>", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BE68C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "MSDRapportDeviceExplorer: Lost RPCompanionLinkDevice: <%{public}@>", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000BE6EC()
{
  int v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  int v4;

  sub_10000647C();
  v3 = 1024;
  v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "MSDRapportDeviceExplorer: RPCompanionLinkDevice changed: <%{public}@> change flags: %u", v2, 0x12u);
  sub_100008728();
}

void sub_1000BE768()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Not able to remove key:%{public}@", v2);
  sub_100008728();
}

void sub_1000BE7CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot save demo device flag.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE7F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Entering demo mode is not allowed on this device.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE824()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot save POS device flag.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE850()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to remove preference key %{public}@", v2);
  sub_100008728();
}

void sub_1000BE8B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Not able to create dummy preferences file.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE8E0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Not able to migrate old preferences file.:%{public}@", v2);
  sub_100008728();
}

void sub_1000BE944(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100007888((void *)&_mh_execute_header, a3, (uint64_t)a3, "Not able to create dummy preferences file:%{public}@", (uint8_t *)a2);

}

void sub_1000BE990()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Not able to create mobilestoredemocache.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BE9BC()
{
  NSObject *v0;
  int v1[10];

  v1[0] = 136315650;
  sub_100051C54();
  sub_100051C48((void *)&_mh_execute_header, v0, (uint64_t)v0, "%s - Couldn't move %{public}@ to %{public}@}.", (uint8_t *)v1);
  sub_100051C40();
}

void sub_1000BEA30(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Cannot create folder %{public}@", v5);

  sub_100006460();
}

void sub_1000BEAB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot removing preference file in backup path", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BEADC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to send HID report to Apple Pencil: %{public}@", v5);

  sub_100006460();
}

void sub_1000BEB5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "mode and allowChange should not be nil", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BEB88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot read artworkTraits.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BEBB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot get product description.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BEBE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot saved error code for nil request", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BEC0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot get system uptime.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BEC38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Could not match BSD name.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BEC64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Could not get io iterator", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BEC90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Could not get service object", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BECBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Could not get NAND size from disk0", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BECE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Could not find matching service", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BED14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Couldn't open master port.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BED40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Activation record is NULL", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BED6C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Could not get activation record with error - %{public}@", v5);

  sub_100006460();
}

void sub_1000BEDEC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  const __CFString *v6;
  __int16 v7;
  uint64_t v8;

  v3 = 136315650;
  v4 = "-[MSDTargetDevice installedFactoryBundleID]";
  v5 = 2114;
  v6 = CFSTR("InstalledFactoryBundleID");
  v7 = 2114;
  v8 = a1;
  sub_100051C48((void *)&_mh_execute_header, a2, a3, "%s: Incorrect demo settings %{public}@: %{public}@", (uint8_t *)&v3);
  sub_100051C40();
}

void sub_1000BEE78(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "-[MSDTargetDevice hubSuppliedSettings]";
  sub_100007888((void *)&_mh_execute_header, a1, a3, "%s: Hub supplied settings not in right format.", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BEEEC(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "-[MSDTargetDevice saveHubSuppliedSettings:]";
  sub_100007888((void *)&_mh_execute_header, a1, a3, "%s: Hub supplied settings not in right format.", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BEF60(uint64_t a1, void *a2)
{
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100040D30();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x12u);

}

void sub_1000BF008(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to create device passcode: %{public}@", v5);

  sub_100006460();
}

void sub_1000BF088(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to remove device passcode: %{public}@", v5);

  sub_100006460();
}

void sub_1000BF108(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;

  v3 = 138543362;
  v4 = CFSTR("ownership-warning");
  sub_100007888((void *)&_mh_execute_header, a1, a3, "ERROR - Failed to read nvram value for key:  %{public}@", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BF17C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "ERROR - Failed to convert DDL value to string.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF1A8()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10000647C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "INFO - ddlFlagValue:  %{public}@", v1, 0xCu);
  sub_100008728();
}

void sub_1000BF214()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Couldn't locate options node in IODeviceTree", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF240()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Couldn't locate bootstrap_port mach port", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF26C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "Failed to set SEP demo mode: %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF2CC()
{
  NSObject *v0;
  int v1[10];

  v1[0] = 136315650;
  sub_100051C54();
  sub_100051C48((void *)&_mh_execute_header, v0, (uint64_t)v0, "%s: Incorrect demo mode value: %{public}@ for key: %{public}@", (uint8_t *)v1);
  sub_100051C40();
}

void sub_1000BF340(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;

  v3 = 138543362;
  v4 = CFSTR("com.apple.DemoUpdate");
  sub_100007888((void *)&_mh_execute_header, a1, a3, "Cannot uninstall application %{public}@", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BF3B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to take power assertion.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF3E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to release power assertion.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF40C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Error:Not able to create Metadata folder in MobileStoreDemo cache.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF438()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Not able to create cache blob.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF464(void *a1)
{
  void *v1;
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_100014B54();
  sub_100040D30();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x16u);

  sub_100006460();
}

void sub_1000BF4F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to coordinate snapshot revert with paired watch.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF51C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "Failed to unlock device keybag: %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF57C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to acquire device keybag lock assertion: %{public}@", v5);

  sub_100006460();
}

void sub_1000BF5FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Registering xpc activity for sending over heartbeat to CA.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF628()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Heartbeat XPC activity fired.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF654()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to load mock OS update request.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF680()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot get darwin notifiy center", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF6AC()
{
  os_log_t v0;
  int v1[6];

  v1[0] = 138543618;
  sub_100014B54();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to get process handle for %{public}@ with error: %{public}@", (uint8_t *)v1, 0x16u);
  sub_100008728();
}

void sub_1000BF724()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to create network path monitor.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF750()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to reset system time cache.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF77C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot get disk usage.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF7A8(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "-[MSDTargetDevice updateDeviceOptions:skipImutableKeys:]";
  sub_100007888((void *)&_mh_execute_header, a1, a3, "%s - Failed to enable do-not-buy in nvram for retail store.", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BF81C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "-[MSDTargetDevice updateDeviceOptions:skipImutableKeys:]";
  sub_100007888((void *)&_mh_execute_header, a1, a3, "%s - Failed to enable do-not-buy in nvram for channel store.", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BF890(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "-[MSDTargetDevice updateDeviceOptions:skipImutableKeys:]";
  sub_100007888((void *)&_mh_execute_header, a1, a3, "%s - storeType must be of type NSString.", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000BF904()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to set BG flag", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF930()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to remove BG flag", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BF95C(NSObject *a1)
{
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSDPreferencesFile preferencesFilePath](MSDPreferencesFile, "preferencesFilePath"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a1, v3, "Cannot write %{public}@.", v4);

  sub_100006460();
}

void sub_1000BF9E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "Failed to get desired icon state from SB. SBGetPendingIconState returned 0x%x", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BFA44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "Failed to send desired icon state to SB. SBSetIconState returned 0x%x", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BFAA4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to set low power mode to mode: %ld", v2);
  sub_100008728();
}

void sub_1000BFB08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to update signed manifest in demod_helper", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BFB34()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  __error();
  sub_100040D30();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0xEu);
  sub_100006460();
}

void sub_1000BFBC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "No com.apple.Safari.History daemon found", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000BFBEC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Skipping entitlement check for file:%{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000BFC60(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "Entitlement check failed for %{public}@.", (uint8_t *)&v3);
}

void sub_1000BFCCC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "savePath"));
  v5 = 138543362;
  v6 = v3;
  sub_100007888((void *)&_mh_execute_header, a2, v4, "File deletion for %{public}@ failed", (uint8_t *)&v5);

}

void sub_1000BFD58(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Can't create URL %{public}@", (uint8_t *)&v2, 0xCu);
  sub_100008728();
}

void sub_1000BFDC8()
{
  uint64_t v0;
  os_log_t v1;

  sub_100014B8C();
  sub_100053058((void *)&_mh_execute_header, v0, v1, "Can't create read stream, %{public}@ %{public}@");
  sub_100008728();
}

void sub_1000BFE28()
{
  uint64_t v0;
  os_log_t v1;

  sub_100014B8C();
  sub_100053058((void *)&_mh_execute_header, v0, v1, "Can't open read stream %{public}@ *** %{public}@");
  sub_100008728();
}

void sub_1000BFE88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Can't alloc buffer", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BFEB8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Can't create data", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BFEE8(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Progress handler returned with status %d; failing verification",
    (uint8_t *)v2,
    8u);
  sub_100006008();
}

void sub_1000BFF58(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Unknown algorithm", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000BFF88(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "absoluteString"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByRemovingPercentEncoding"));
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Cannot read file %{public}@", (uint8_t *)&v5, 0xCu);

  sub_10001567C();
}

void sub_1000C0028(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "absoluteString"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByRemovingPercentEncoding"));
  v7 = 138543618;
  v8 = v6;
  v9 = 2114;
  v10 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Cannot read data from %{public}@ - %{public}@.", (uint8_t *)&v7, 0x16u);

  sub_10001567C();
}

void sub_1000C00D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Device not eligible for DCOTA, demod should become dormant...", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C0104()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "No or invalid FindMyHub response received", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C0130(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Hub URL is not set.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C01A0(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[MSDFindMyHub askFindMyHubForHubInfo:]";
  v4 = 2114;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s - Invalid hub URL:  %{public}@", (uint8_t *)&v2, 0x16u);
  sub_100008728();
}

void sub_1000C0224()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to parse hub host name from FindMyHub response.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C0250(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "FindMyHub failed with error: %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C02B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Invalid data format in Content.plist.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C02E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to read Content.plist.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C030C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  void *v11;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "hubHostName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "hubPort"));
  v6 = 136315650;
  v7 = "-[MSDFindMyHub enrollAndSetup:]";
  v8 = 2114;
  v9 = v4;
  v10 = 2114;
  v11 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s - invalid hub host name or port; hubHostName=%{public}@; hubPort=%{public}@",
    (uint8_t *)&v6,
    0x20u);

}

void sub_1000C03DC(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[MSDDeviceDataCollector collectAppUsageDataForSession:fromStart:toEnd:]_block_invoke";
  v4 = 2114;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s - appUsage:  %{public}@", (uint8_t *)&v2, 0x16u);
}

void sub_1000C0464(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "Did not find store list in store search response: %{public}@", (uint8_t *)&v3);
}

void sub_1000C04D0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "Failed to serialize store search result; error: %{public}@",
    (uint8_t *)&v3);
}

void sub_1000C053C(uint64_t a1, NSObject *a2)
{
  id v3;
  uint64_t v4;
  int v5;
  id v6;

  v5 = 138543362;
  v6 = (id)objc_opt_class(a1, a2);
  v3 = v6;
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Unexpected data type %{public}@ for store list", (uint8_t *)&v5);

}

void sub_1000C05C8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10001BA30();
  sub_100015668((void *)&_mh_execute_header, v2, v3, "%{public}@ response payload does not contain: %{public}@", v4, v5, v6, v7, v8);

}

void sub_1000C0654(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10001BA30();
  sub_100015668((void *)&_mh_execute_header, v2, v3, "%{public}@: HTTP status code is %{public}@.", v4, v5, v6, v7, v8);

}

void sub_1000C06E4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to remove directory: %{public}@", v2);
}

void sub_1000C074C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to create symbolic link - %{public}@", v5);

  sub_100006460();
}

void sub_1000C07CC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to remove symbolic link - %{public}@", v5);

  sub_100006460();
}

void sub_1000C084C(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "Failed to create %{public}@ - %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000C08D0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to create parent folder - %{public}@", v5);

  sub_100006460();
}

void sub_1000C0950(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to create symlink in staging area", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C0980(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to move files to staging area", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C09B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to restore file attributes.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C09E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: No Info section or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C0A50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: No Product section or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C0AC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Could not initialize manifestVerifier", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C0AEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to parse bundle ID", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C0B18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "InstallationOrder failed the validation.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C0B44(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: no Backup section or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C0BB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "InstallationOrder entry count does not match components listed in manifest.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C0BE0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: App section in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C0C50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: InstallationOrder section in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C0CC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: payload format not correct.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C0D30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "getBackup is only for old manifest.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C0D5C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Failed to parse %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C0DCC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Failed to parse %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C0E3C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "-[MSDManifest addFilesUsingSourceManifest:]";
  sub_100007888((void *)&_mh_execute_header, a1, a3, "%s: Root path must be the same between source and device manifest.", (uint8_t *)&v3);
}

void sub_1000C0EB4(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "path"));
  *(_DWORD *)a1 = 138543362;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Couldn't get meta data for %{public}@", a1, 0xCu);

}

void sub_1000C0F28(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  v5 = 138543362;
  v6 = v3;
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Couldn't run handler against %{public}@", (uint8_t *)&v5);

}

void sub_1000C0FB4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "rootPath already specified. Could not add more files.", v1, 2u);
}

void sub_1000C0FF4(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  v4 = 138543362;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%{public}@: invalid request", (uint8_t *)&v4, 0xCu);

}

void sub_1000C1088(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "originServer"));
  v7 = 138543618;
  v8 = v4;
  v9 = 2114;
  v10 = v5;
  sub_100014B48((void *)&_mh_execute_header, a2, v6, "%{public}@ download credential for origin server %{public}@ invalid or expired", (uint8_t *)&v7);

}

void sub_1000C1140(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  sub_100014B48((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to rename file to %{public}@: %{public}@", (uint8_t *)&v3);
}

void sub_1000C11BC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to get bundle path for app: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C1230(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to synchronize with CFPreferences.", v1, 2u);
}

void sub_1000C1270(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDRapportDeviceAdvertiser: XPC connection to RPCompanionLinkClient interrupted!", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C12A0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDRapportDeviceAdvertiser: Received an error: %{public}@", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000C131C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDRapportDeviceAdvertiser: XPC connection to RPServer interrupted!", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C134C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDRapportDeviceAdvertiser: XPC connection to RPServer invalidated!", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C137C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDRapportDeviceAdvertiser: Failed to activate RPCompanionLinkClient: %{public}@", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000C13F8(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "fullKeyList"));
  v5[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, a2, v4, "%s: Cannot get device information for keys: %{public}@", (uint8_t *)v5);

  sub_100006460();
}

void sub_1000C1484(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: No data received.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C14F4(void *a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v7 = 136315906;
  v8 = "-[MSDMailProcessor pingWithType:]";
  v9 = 2114;
  v10 = v6;
  v11 = 2048;
  v12 = objc_msgSend(a1, "code");
  v13 = 2114;
  v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%s: Cannot convert to dictionary - %{public}@(0x%tx). Target: %{public}@", (uint8_t *)&v7, 0x2Au);

}

void sub_1000C15C8()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "%s: format not correct: %{public}@", (uint8_t *)v2);
  sub_100008728();
}

void sub_1000C1638(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "error"));
  sub_10000647C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Ping returned error: %{public}@", v4, 0xCu);

  sub_100006460();
}

void sub_1000C16C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "Sending Ping with request: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C1720(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: No data to report specific to caching hub failure at this moment.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C1790(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: No data to report specific to S3 server failure at this moment.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C1800()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "ping called with type - %lu", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C1860()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to DDL lock device.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C188C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Device is either not a DDL device or its content is not locked.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C18B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Unknown operation requested.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C18E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot save server and port to non-volitile media.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C1910(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v5[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, a2, v4, "%s - updateManifestInfo failed.  Error:  %{public}@", (uint8_t *)v5);

  sub_100006460();
}

void sub_1000C199C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Command %{public}@ not allowed.", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C19FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Device is busy?", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C1A28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Paired device is busy?", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C1A54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: No matching content for \n", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C1AC4()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "%s: format not correct: %{public}@", (uint8_t *)v2);
  sub_100008728();
}

void sub_1000C1B34(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "Unable to create search dictionary for subject: %{public}@", a5, a6, a7, a8, 2u);
}

void sub_1000C1B9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "Could not save item in keychain:%d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C1BFC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Unable to create search dictionary", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C1C2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "Failed to retreive item from the keychain. %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C1C8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "Unable to delete item from the keychain. %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C1CEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000787C();
  sub_10000785C((void *)&_mh_execute_header, v0, v1, "Failed to retrieve item from the keychain. %d", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C1D4C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Received unknown XPC event of type: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C1DC0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_1000657C4();
  sub_100015668((void *)&_mh_execute_header, v2, v3, "%{public}@: required key not found or is in unexpected format: %{public}@", v4, v5, v6, v7, v8);

  sub_10001567C();
}

void sub_1000C1E40(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Execution error detected in method selector: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C1EB4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to move secondary staging to stashed staging.", a5, a6, a7, a8, 0);
}

void sub_1000C1EE8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to move secondary staging to temp device backup.", a5, a6, a7, a8, 0);
}

void sub_1000C1F1C(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to register for trusted peer change notification with status: %d", (uint8_t *)v2, 8u);
}

void sub_1000C1F90(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v4 = 138543362;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to load account settings: %{public}@", (uint8_t *)&v4, 0xCu);

}

void sub_1000C2024(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Account setup not allowed on this device.", v1, 2u);
}

void sub_1000C2064(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: iCloud account password not found or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C20D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: iCloud features not found or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C2144(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Error signing in iCloud account.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C21B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: iCloud account CDPResetNeeded flag in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C2224(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: iCloud account recovery key in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C2294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: iCloud account username in wrong format: %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C2300()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: iCloud account settings in wrong format: %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C236C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: iTunes account password not found or in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C23DC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Error signing in iTunes account.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C244C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: iTunes account username in wrong format: %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C24B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: iTunes account settings in wrong format: %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C2524(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "%{public}@: Tried all remote URL's, cannot proceed with download", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C2588(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "%{public}@: Exceeded Local URL available, local hub unreachable", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C25EC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%{public}@: No URL schema found in %{public}@", (uint8_t *)&v3, 0x16u);
  sub_100008728();
}

void sub_1000C266C()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "%s: Unknown operation identifier - %{public}@", (uint8_t *)v2);
}

void sub_1000C26E0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "name"));
  v5[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, a2, v4, "%s: Illegal operation object instantiated - %{public}@", (uint8_t *)v5);

}

void sub_1000C2774(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to fetch process states: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C27EC(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "Failed to create LSApplicationRecord for app: %{public}@ error: %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000C2870()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10000647C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "ERROR - Failed to create termination assertion for app:  %{public}@", v1, 0xCu);
  sub_100008728();
}

void sub_1000C28DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "DEBUG - Successfully acquiring termination assertion for app:  %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C293C(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "ERROR - Failed to acquire termination assertion for app:  %{public}@ - Error:  %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000C29C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "DEBUG - Acquiring termination assertion for app:  %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C2A20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "DEBUG - Successfully invalidating termination assertion for app:  %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C2A80(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "ERROR - Failed to invalidate termination assertion for app:  %{public}@ - Error:  %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000C2B04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "DEBUG - Invalidating termination assertion for app:  %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C2B64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot start with a connection", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C2B90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Untracked task: %{public}@; canceling...", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C2BF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Not an HTTP response.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C2C1C(void *a1, uint64_t a2, NSObject *a3)
{
  void *v4;
  void *v5;
  uint8_t v6[24];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "info"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "savePath"));
  sub_1000657C4();
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Cannot write data to file %{public}@, error: %{public}@", v6, 0x16u);

  sub_10001567C();
}

void sub_1000C2CBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Unexpected challenge: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C2D1C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description"));
  sub_1000657C4();
  sub_10006DDC8((void *)&_mh_execute_header, v2, v3, "Session task : %{public}@ - didReceiveChallenge() called, authenticationMethod: %{public}@", v4, v5, v6, v7, v8);

  sub_10001567C();
}

void sub_1000C2D9C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100008730();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "No http response or error; will atempt to retry task",
    v1,
    2u);
  sub_100006008();
}

void sub_1000C2DD4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10006DDF4(a1, a2);
  sub_10006DDDC();
  sub_10006DDC8((void *)&_mh_execute_header, v2, v3, "%{public}@:got %lu tasks in running state", v4, v5, v6, v7, v8);
  sub_100006460();
}

void sub_1000C2E40(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10006DDF4(a1, a2);
  sub_10006DDDC();
  sub_10006DDC8((void *)&_mh_execute_header, v2, v3, "%{public}@:got %lu tasks in paused state", v4, v5, v6, v7, v8);
  sub_100006460();
}

void sub_1000C2EAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to get request from task info", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C2ED8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to create download task.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C2F04(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "info"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "savePath"));
  sub_10000647C();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "File download paused, dispatching task with save path: %@ as paused", v5, 0xCu);

  sub_10001567C();
}

void sub_1000C2FA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to create file handle to save response data", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C2FCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Input task info is invalid", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C2FF8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005FF8((void *)&_mh_execute_header, a1, a3, "Failed to convert current date to English/Gregorian format.", a5, a6, a7, a8, 0);
}

void sub_1000C302C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005FF8((void *)&_mh_execute_header, a1, a3, "Failed to convert last bundle update date to English/Gregorian format.", a5, a6, a7, a8, 0);
}

void sub_1000C3060(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 134218242;
  v4 = a2;
  v5 = 2114;
  v6 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "downloadSize: %lld downloadSizeBucket: %{public}@", (uint8_t *)&v3, 0x16u);
}

void sub_1000C30E4(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;

  v1 = 136315394;
  v2 = "-[MSDBAAInterface generateBAACertficate:]";
  v3 = 1024;
  v4 = 60;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: Installation timed out after %d seconds", (uint8_t *)&v1, 0x12u);
  sub_100008728();
}

void sub_1000C3170(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to embedd signatureData or certificate", v1, 2u);
}

void sub_1000C31B0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "encountered error:", v1, 2u);
}

void sub_1000C31F0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "keyData:%{public}@\t str:%{public}@", (uint8_t *)&v3, 0x16u);
  sub_100008728();
}

void sub_1000C3270(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "publicKey:%{public}@", (uint8_t *)&v2, 0xCu);
  sub_100008728();
}

void sub_1000C32E0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Cannot remove IPA/Patch file from cache: %{public}@", v2);
  sub_100008728();
}

void sub_1000C3344(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v6 = 138543618;
  v7 = a1;
  v8 = 2114;
  v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Cannot remove temp IPA %{public}@ - %{public}@", (uint8_t *)&v6, 0x16u);

}

void sub_1000C33F4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Could not create IXUpdatingAppInstallCoordinator with error - %{public}@", v5);

  sub_100006460();
}

void sub_1000C3474(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Could not create IXInitiatingAppInstallCoordinator with error - %{public}@", v5);

  sub_100006460();
}

void sub_1000C34F4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Cannot cancel IPA promise: %{public}@", v5);

  sub_100006460();
}

void sub_1000C3574(uint64_t a1, int *a2, uint8_t *buf, os_log_t log)
{
  int v4;

  v4 = *a2;
  *(_DWORD *)buf = 138543618;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 1026;
  *(_DWORD *)(buf + 14) = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to open file: %{public}@ - %{public, errno}d", buf, 0x12u);
}

void sub_1000C35CC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to malloc memory of %lu bytes.", v2);
  sub_100008728();
}

void sub_1000C3630(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to instantiate NSData object.", v1, 2u);
}

void sub_1000C3670(int *a1, uint8_t *buf, os_log_t log)
{
  int v3;

  v3 = *a1;
  *(_DWORD *)buf = 67240192;
  *((_DWORD *)buf + 1) = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to read data to buffer: %{public, errno}d", buf, 8u);
}

void sub_1000C36B8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to prepare for SZ promise: %{public}@", v2);
  sub_100008728();
}

void sub_1000C371C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to supply bytes to SZ promise: %{public}@", v2);
  sub_100008728();
}

void sub_1000C3780()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to finish stream for SZ promise: %{public}@", v2);
  sub_100008728();
}

void sub_1000C37E4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Cannot load domains.plist from %{public}@.", (uint8_t *)&v2, 0xCu);
  sub_100008728();
}

void sub_1000C3854(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Cannot find domains.", a5, a6, a7, a8, 0);
}

void sub_1000C3888(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Cannot generate custom domains.", a5, a6, a7, a8, 0);
}

void sub_1000C38BC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Manifest file path %{public}@ is not same as real path: %{public}@", (uint8_t *)&v3, 0x16u);
  sub_100008728();
}

void sub_1000C393C(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[WhitelistChecker handleSystemContainerFiles:withMetadata:]";
  v4 = 2114;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s:Container check failed for %{public}@", (uint8_t *)&v2, 0x16u);
  sub_100008728();
}

void sub_1000C39C0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to set background download environment after %ld attempts. Bailing out.", (uint8_t *)&v2, 0xCu);
}

void sub_1000C3A34(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  sub_100075094((void *)&_mh_execute_header, a1, a3, "Failed to build components from manifest", v3);
}

void sub_1000C3A6C(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100075094((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to set background download environment. Will try again..", a1);
}

void sub_1000C3AA0(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  sub_100075094((void *)&_mh_execute_header, a1, a3, "Cannot stage device for update progress.", v3);
}

void sub_1000C3AD8(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "device"));
  v4 = 134217984;
  v5 = objc_msgSend(v3, "backgroundDownloadState");
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Called quitBackgroundDownload when background state:%lu", (uint8_t *)&v4, 0xCu);

}

void sub_1000C3B70(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  v6 = 138543618;
  v7 = a1;
  v8 = 2114;
  v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Dispatching operation %{public}@ to queue %{public}@", (uint8_t *)&v6, 0x16u);

}

void sub_1000C3C20(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to save device region.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C3C50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to save device language.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C3C80(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to set device language and region.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C3CB0()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100008730();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Enrollment has started with DU.", v1, 2u);
  sub_100006008();
}

void sub_1000C3CE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Leaf certificate not found.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C3D14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "The device was pin-ed to a different certificate.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C3D40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "failed in trust server-applePKI", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C3D6C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load demounit root CA certificate data.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C3DDC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load demounit root CA certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C3E4C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a2, a3, "SecTrustEvaluate returned fail: %d", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C3EB0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate data.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C3F20(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C3F90(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "This certificate is not for iosdm: %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C3FF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot find common name.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C4020(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate data.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C4090(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C4100(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create policy", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C4170(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create trust", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C41E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot copy certificate data", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C4250(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: Failed to convert input to query items", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C42C8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: cannot send request to nil path", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C4340(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: invalid request", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C43B8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: failed to generate post data", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C4430(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: cannot send request to nil endpoint", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C44A8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: failed to convert to task info", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C4520(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Could not load localization bundle at %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C4590(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014B38((void *)&_mh_execute_header, a1, a3, "%s - Failed to get all localizations or localizations is in wrong format.  Bundle:  %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C4614()
{
  os_log_t v0;
  int v1[6];

  v1[0] = 136315394;
  sub_100014B54();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s - allLocalizations = %{public}@", (uint8_t *)v1, 0x16u);
  sub_100008728();
}

void sub_1000C468C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014B38((void *)&_mh_execute_header, a1, a3, "%s - Failed to load bundle %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C4710(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - ERROR - Failed to get device class.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C4780()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - ERROR - Invalid ownershipWarningFlag value:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C47EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - ERROR - Unsupported device class:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C4858(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Fall back to default store hours.", a5, a6, a7, a8, 0);
}

void sub_1000C488C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "No or invalid last updated date for store hour settings: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C48EC(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "toString"));
  sub_10000647C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Store hour settings have or will be expired on %{public}@", v4, 0xCu);

}

void sub_1000C497C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Raw store hours not in right format: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C49DC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to parse raw store hours.", a5, a6, a7, a8, 0);
}

void sub_1000C4A10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Store hour not in right order - %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C4A70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to parse store hour date string - %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C4AD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Store hour not in right format - %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C4B30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Failed to read manifest file:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C4B9C(void *a1, NSObject *a2)
{
  void *v3;
  int v4[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v4[0] = 136315394;
  sub_100014B54();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s:  Failed to convert manifest file to property list.  Error:  %{public}@", (uint8_t *)v4, 0x16u);

  sub_100006460();
}

void sub_1000C4C30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s:  Missing Version number in manifest file:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C4C9C(void *a1, NSObject *a2)
{
  int v3;
  const char *v4;
  __int16 v5;
  unsigned int v6;

  v3 = 136315394;
  v4 = "+[MSDSignedManifestFactory readManifestFromFile:]";
  v5 = 1024;
  v6 = objc_msgSend(a1, "intValue");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s:  Manifest version %d is not supported yet.", (uint8_t *)&v3, 0x12u);
  sub_100006460();
}

void sub_1000C4D30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s:  Manifest file is in wrong format:  %{public}@ - Must be NSDictionary.", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C4D9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s - Manifest file does not exist:  %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C4E08(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to delete cache container for: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C4E7C(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138543618;
  v5 = v3;
  v6 = 2114;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to uninstall app: %{public}@ - %{public}@", (uint8_t *)&v4, 0x16u);
}

void sub_1000C4F04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "File does not exist at %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C4F64(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "Get file attributes failed for %{public}@ with error - %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000C4FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10007E5BC();
  sub_10000646C();
  sub_10007E5A4();
  sub_10007E590((void *)&_mh_execute_header, v0, v1, "Could not extract extended attributes from %{public}@.  Error:  %{public, errno}d", v2, v3, v4, v5, v6);
  sub_100006460();
}

void sub_1000C5054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10007E5BC();
  sub_10000646C();
  sub_10007E5A4();
  sub_10007E590((void *)&_mh_execute_header, v0, v1, "Could not extract extended attributes from %{public}@. File is expected to have extended attributes.  Error:  %{public, errno}d", v2, v3, v4, v5, v6);
  sub_100006460();
}

void sub_1000C50C0()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_10007E5BC();
  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10007E578();
  sub_100015668((void *)&_mh_execute_header, v1, v2, "Could not get ACL for %{public}@ with error - %{public}s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000C512C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Could not allocate buffer for ACL.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C5158()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_10007E5BC();
  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10007E578();
  sub_100015668((void *)&_mh_execute_header, v1, v2, "Could not create ACL binary format for %{public}@ with error - %{public}s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000C51C4()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_10007E5BC();
  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10007E578();
  sub_100015668((void *)&_mh_execute_header, v1, v2, "Could not validate ACL for %{public}@ with error - %{public}s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000C5230()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000647C();
  v3 = 2048;
  v4 = v0;
  sub_100014B48((void *)&_mh_execute_header, v1, (uint64_t)v1, "Could not extract extended file attributes from %{public}@, returned %td", v2);
  sub_100008728();
}

void sub_1000C52A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Coud not extract extended file attributes from %{public}@. File is expected to have extended attributes.", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C5304()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Could not get attribute keys from file %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C5364(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "Could not get destination of symbolic link %{public}@ with error - %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000C53E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Cannot get file attribute for %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C5448()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Cannot get file extended attribute for %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C54A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot allocate space.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C54D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Inconsistent return value from listxattr.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C5500()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000647C();
  v3 = 2114;
  v4 = v0;
  sub_100014B48((void *)&_mh_execute_header, v1, (uint64_t)v1, "Cannot remove extended attribte %{public}s from %{public}@.", v2);
  sub_100008728();
}

void sub_1000C5574()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_10007E5BC();
  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10007E578();
  sub_100015668((void *)&_mh_execute_header, v1, v2, "Could not create empty ACL for %{public}@ with error - %{public}s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000C55E0()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_10007E5BC();
  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10007E578();
  sub_100015668((void *)&_mh_execute_header, v1, v2, "Could not set ACL for %{public}@ with error - %{public}s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000C564C()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_10007E5BC();
  v0 = sub_10000646C();
  sub_100006474(v0);
  sub_10007E578();
  sub_100015668((void *)&_mh_execute_header, v1, v2, "Could not load ACL for %{public}@ with error - %{public}s", v3, v4, v5, v6, v7);
  sub_100006460();
}

void sub_1000C56B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Could not set extended attributes on %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C5718()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Got non-data value", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C5744()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Got Non-string key", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C5770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10007E5BC();
  sub_10000646C();
  sub_10007E5A4();
  sub_10007E590((void *)&_mh_execute_header, v0, v1, "Could not set file permission on symlink %{public}@ with error - %{public, errno}d", v2, v3, v4, v5, v6);
  sub_100006460();
}

void sub_1000C57DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10007E5BC();
  sub_10000646C();
  sub_10007E5A4();
  sub_10007E590((void *)&_mh_execute_header, v0, v1, "Could not set file ownership on symlink %{public}@ with error - %{public, errno}d", v2, v3, v4, v5, v6);
  sub_100006460();
}

void sub_1000C5848(uint64_t a1, char a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  int v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 1024;
  v6 = a2 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "appInforeground: %{public}@, systemInUse: %{BOOL}d", (uint8_t *)&v3, 0x12u);
}

void sub_1000C58D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "demo updater is busy.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C58FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Cannot stage device for update progress.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C5928()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to retrieve photos restore post processing status: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C5988()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to retrieve photos moment analysis status: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C59E8(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  __int16 v5;
  const __CFString *v6;

  v3 = 138543618;
  v4 = CFSTR("AutomatedDeviceGroup");
  v5 = 2114;
  v6 = CFSTR("com.apple.da");
  sub_100014B48((void *)&_mh_execute_header, a1, a3, "%{public}@ key does not exist in domain %{public}@, skip appending store ID", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000C5A70(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  __int16 v5;
  const __CFString *v6;

  v3 = 138543618;
  v4 = CFSTR("store_id");
  v5 = 2114;
  v6 = CFSTR("AutomatedDeviceGroup");
  sub_100014B48((void *)&_mh_execute_header, a1, a3, "Failed to retrieve %{public}@ from device options, skip appending store ID to %{public}@ key", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000C5AF8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Failed to retrieve serial number, skip appending Serial Number to %{public}@ key", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C5B68()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[14];
  const __CFString *v4;
  __int16 v5;
  const __CFString *v6;
  __int16 v7;
  uint64_t v8;

  sub_10001BA30();
  v4 = CFSTR("AutomatedDeviceGroup");
  v5 = v0;
  v6 = CFSTR("com.apple.da");
  v7 = v0;
  v8 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to write %{public}@ to key %{public}@ in domain %{public}@, current value is %{public}@", v3, 0x2Au);
}

void sub_1000C5C00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Timed out configuring demo state for Mail app.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C5C2C(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to configure demo state for Mail app: %{public}@", v4, 0xCu);

}

void sub_1000C5CBC(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "device"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "OSVersion"));
  v8 = 138543618;
  v9 = a1;
  sub_100085514();
  sub_100014B48((void *)&_mh_execute_header, a3, v7, "Content requires OS version >= %{public}@, current OS version is %{public}@.", (uint8_t *)&v8);

}

void sub_1000C5D6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to create Content.plist cache path", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C5D98()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const __CFString *v3;

  sub_10001BA30();
  v3 = CFSTR("/private/var/demo_backup/Metadata/.Content.plist");
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "Failed to copy %{public}@ to %{public}@", v2);
  sub_100008728();
}

void sub_1000C5E08(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Failed to create %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C5E78()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const __CFString *v3;

  sub_10001BA30();
  v3 = CFSTR("/private/var/mobile/backup/var/mobile/Media/Content.plist");
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "Failed to copy %{public}@ to %{public}@", v2);
  sub_100008728();
}

void sub_1000C5EE8()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_10001BA30();
  v3 = v0;
  sub_100014B48((void *)&_mh_execute_header, v1, (uint64_t)v1, "Failed to create %{public}@ with error: %{public}@", v2);
  sub_100008728();
}

void sub_1000C5F54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Content.plist does not exist at cache path: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C5FB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Selected bundle metadata do not contain file name", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C5FE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to load manifest file %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C6040()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to copy manifest file with error: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C60A0()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v3 = 136315650;
  v4 = "-[MSDDemoUpdateController _selectCachedManifestWithError:]";
  sub_100085514();
  v5 = v0;
  v6 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s - Failed to remove older manifest file:  %{public}@ - Error:  %{public}@", (uint8_t *)&v3, 0x20u);
}

void sub_1000C612C()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  const char *v3;

  v2 = 136315394;
  v3 = "-[MSDDemoUpdateController _selectCachedManifestWithError:]";
  sub_100085514();
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "%s - Failed to create folder:  %{public}@", (uint8_t *)&v2);
  sub_100008728();
}

void sub_1000C61A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to find cached bundle metadata for language %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C6200()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to load cached bundle metadata", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C622C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Manifest does not have %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C629C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Manifest does not have %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C630C(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  v6 = 138543618;
  v7 = v5;
  v8 = 2114;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%{public}@: required key not found or is in unexpected format: %{public}@", (uint8_t *)&v6, 0x16u);

}

void sub_1000C63B8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Is enrolled!", v1, 2u);
}

void sub_1000C63F8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to list directory contents - %{public}@", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000C6474(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to remove file: %{public}@", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000C64F0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to copy file from content cache: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C6564(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v3 = 138543362;
  v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Converted from xpc to NSDictionary: %{public}@", (uint8_t *)&v3, 0xCu);
  sub_100008728();
}

void sub_1000C65DC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "The value for key %{public}@ has a type that is not supported yet", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000C6644(void *a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  id v5;

  v4 = 136315138;
  v5 = objc_msgSend(objc_retainAutorelease(a1), "objCType");
  sub_100007888((void *)&_mh_execute_header, a2, v3, "Unsupported NSNumber type: %s for xpc dictionary encoding", (uint8_t *)&v4);
  sub_100006460();
}

void sub_1000C66C0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  objc_opt_class(a2, a2);
  v8 = 138543618;
  v9 = a1;
  sub_100085514();
  v6 = v5;
  sub_100014B48((void *)&_mh_execute_header, a3, v7, "The value for key %{public}@ has unsupported type %{public}@", (uint8_t *)&v8);

  sub_100006460();
}

void sub_1000C6750(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v3 = 136315394;
  v4 = "+[NSDictionary(xpcdictConv) dictionaryFromJsonData:]";
  v5 = 2114;
  v6 = 0;
  sub_100014B48((void *)&_mh_execute_header, a1, a3, "%s: Cannot convert %{public}@ to dictionary", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000C67D0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_100086DA8();
  sub_100086D84();
  sub_10001BA1C((void *)&_mh_execute_header, v2, v3, "Failed to deserialize JSON object with error - %{public}@(0x%tx). Target: %{public}@", v4, v5, v6, v7, v8);

  sub_10001BA44();
}

void sub_1000C6854()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  const char *v3;

  v2 = 136315394;
  v3 = "+[NSDictionary(xpcdictConv) dictionaryFromJsonData:]";
  sub_100085514();
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "%s: format not correct: %{public}@", (uint8_t *)&v2);
  sub_100008728();
}

void sub_1000C68C8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_100086DA8();
  sub_100086D84();
  sub_10001BA1C((void *)&_mh_execute_header, v2, v3, "Failed to serialize JSON object - %{public}@(0x%tx). Target: %{public}@", v4, v5, v6, v7, v8);

  sub_10001BA44();
}

void sub_1000C694C()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  const char *v3;

  v2 = 136315394;
  v3 = "-[NSDictionary(xpcdictConv) convertToNSData]";
  sub_100085514();
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "%s: Not a valid JSON object: %{public}@", (uint8_t *)&v2);
  sub_100008728();
}

void sub_1000C69C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Loading Domains.plist failed", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C69EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "No certificates found in the manifest.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C6A18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "rigorousTesting failed.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C6A44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: No matching certificate for %{public}@.", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C6AB0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Manifest contains UAT component on prodFused device.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C6B20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to parse payload for item: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C6B80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: signature type for certificate %{public}@ does not exist", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C6BEC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: cannot find certificates, or certificate format not correct.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C6C5C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: cannot find certificates, certificates list empty.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C6CCC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Certificate not valid.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C6D3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Could not locate the file:%{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C6D9C(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;

  v1 = 136315394;
  v2 = "-[MSDDemoManifestCheck checkFileForEntitlements:forCorrespondingManifestEntry:]";
  v3 = 1024;
  v4 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s:There is unexpected invalid signature/entitlements:%08x", (uint8_t *)&v1, 0x12u);
  sub_100008728();
}

void sub_1000C6E24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s Could not find a data container for:%{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C6E90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: %{public}@ section is not a dictionary", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C6EFC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create policy.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C6F6C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create policy.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C6FDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Can not load appleIST leaf certificate", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C7008()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Can not load appleIST intermediate certificate", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C7034(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate data.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C70A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7114(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "CN did not match for appleIST.:%{public}@\n", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C717C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "OU did not match for appleIST cert.:%{public}@\n", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C71DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "appleIST certificate count is unexpected\n", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C7208(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create policy.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7278()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10008C2E0();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: certificate trust evaluation failed: %ld", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C72E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot extract public key.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10008C2E0();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: Cannot evaluate trust: %ld", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C73C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10008C2E0();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: Cannot set anchor certificates: %ld", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C7438()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10008C2E0();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%s: Cannot create secure trust object: %ld", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C74A8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7518(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;

  v2 = 136315394;
  v3 = "-[MSDDemoManifestCheck verifySignature:forData:withKey:]";
  v4 = 1024;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s: Failed in verifying signature(%d)", (uint8_t *)&v2, 0x12u);
  sub_100008728();
}

void sub_1000C759C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100008730();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "verifySignature is called", v1, 2u);
  sub_100006008();
}

void sub_1000C75D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Certificate array in wrong format.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7644(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C76B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Apps signed by IS&T can only have Provisioning Profiles dependency.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C76E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Passed a null manifest for security checks", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7750(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Security checks failed", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C77C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Security checks failed", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7830(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = 136315650;
  v5 = "-[MSDDemoManifestCheck runSecurityCheck:]_block_invoke";
  v6 = 2114;
  v7 = a1;
  v8 = 2114;
  v9 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: Failed rigorous check for:%{public}@ (from %{public}@)", (uint8_t *)&v4, 0x20u);
}

void sub_1000C78C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Apple IST certificate is used to sign %{public}@ unexpected component", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C7928()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%{public}@ key does not exist in component %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C7994()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%{public}@ key does not exist in component %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C7A00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100014B38((void *)&_mh_execute_header, v0, v1, "%{public}@ key does not exist in component %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C7A6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Component %{public}@ is not a Settings component", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C7ACC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "File attributes are nil for %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C7B2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Whitelist checker failed", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C7B58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "System container check failed for file:%{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C7BB8()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000647C();
  v3 = 2048;
  v4 = v0;
  sub_100014B48((void *)&_mh_execute_header, v1, (uint64_t)v1, "File permissions failed for file:%{public}@(%ld)", v2);
  sub_100008728();
}

void sub_1000C7C2C()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000647C();
  v3 = 2114;
  v4 = v0;
  sub_100014B48((void *)&_mh_execute_header, v1, (uint64_t)v1, "Not a valid fileType (%{public}@) for file: %{public}@", v2);
  sub_100008728();
}

void sub_1000C7CA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "IS&T signed component in wrong format (no manifest) for %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C7D00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "IS&T signed component in wrong format (symlink target) for %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C7D60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to get path components for file: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C7DC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Invalid data container file. %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C7E20(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "Failed to load manifest factory metadata from %{public}@; path is not a directory",
    a5,
    a6,
    a7,
    a8,
    2u);
  sub_100008728();
}

void sub_1000C7E8C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "Failed to load manifest factory metadata from %{public}@; directory does not exist",
    a5,
    a6,
    a7,
    a8,
    2u);
  sub_100008728();
}

void sub_1000C7EF8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "Failed to load factory metadata from path %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7F5C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "Failed to load Content.plist at path %{public}@.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C7FC0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "Content.plist file %{public}@ does not exist", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C8024(void *a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "settingsFilePath"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100014B7C();
  sub_10001BA1C((void *)&_mh_execute_header, v5, v6, "%s - Error initializing the default system settings file %{public}@ with values - Error: %{public}@", v7, v8, v9, v10, 2u);

  sub_10001BA44();
}

void sub_1000C80D0(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100014B7C();
  sub_10001BA1C((void *)&_mh_execute_header, v3, v4, "%s - error creating directory at %{public}@. Error: %{public}@", v5, v6, v7, v8, 2u);

  sub_10001BA44();
}

void sub_1000C816C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to retrieve device airplane mode setting. The airplane mode will not be refreshed", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C8198()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to retrieve device volume setting. The volume will not be refreshed", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C81C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to retrieve device air drop mode setting. The air drop mode will not be refreshed", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C81F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to retrieve device true tone setting. The true tone will not be refreshed", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C821C(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[MSDSettingsRefresher initializeCacheWithValues:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s - Initialized settings refresher cache with values from saved file", (uint8_t *)&v1, 0xCu);
  sub_100008728();
}

void sub_1000C8298(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[MSDSettingsRefresher restoreSavedDeviceSettings]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s - The shallow refresh settings refresher is uninitialized. No settings revert will be done", (uint8_t *)&v1, 0xCu);
  sub_100008728();
}

void sub_1000C8314()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Not restoring device airplane mode setting", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C8340()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Not restoring device volume setting", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C836C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Not restoring device air drop mode setting", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C8398()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Not restoring device true tone setting", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000C83C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100038F80((void *)&_mh_execute_header, a1, a3, "%s - Current system volume value: %{public}1.2f", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C8444()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100038F80((void *)&_mh_execute_header, v0, v1, "%s - Current system true tone setting: %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C84B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100038F80((void *)&_mh_execute_header, a2, a3, "%s - Current system airplane mode setting: %@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C8528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100014B54();
  sub_100038F80((void *)&_mh_execute_header, v0, v1, "%s - Current system AirDrop mode setting: %{public}@", v2, v3, v4, v5, 2u);
  sub_100008728();
}

void sub_1000C8594()
{
  os_log_t v0;
  int v1[3];
  const __CFString *v2;

  v1[0] = 136315394;
  sub_100014B7C();
  v2 = CFSTR("Off");
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "%s - Invalid current airdrop setting read. Defaulting to %{public}@", (uint8_t *)v1, 0x16u);
  sub_100008728();
}

void sub_1000C861C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100008730();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Failed ApplePKI and AxinoePKI trust evaluation", v1, 2u);
  sub_100006008();
}

void sub_1000C8654(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate data.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C86C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C8734(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate data.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C87A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C8814(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create policy", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C8884(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create trust", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C88F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot copy certificate data", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C8964(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load demounit root CA certificate data.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C89D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot load demounit root CA certificate.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C8A44()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "%{public}@ is not app/appex bundle path.", v2);
  sub_100008728();
}

void sub_1000C8AA8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Cannot load bundle: %{public}@", v2);
  sub_100008728();
}

void sub_1000C8B0C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "No info.plist in bundle:  %{public}@.", v2);
  sub_100008728();
}

void sub_1000C8B70(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  v5[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, a2, v4, "%s - Failed to get executable URL for app:  %{public}@", (uint8_t *)v5);

  sub_100006460();
}

void sub_1000C8BFC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  v5[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, a2, v4, "%s - Failed to get CodeResources URL for app:  %{public}@", (uint8_t *)v5);

  sub_100006460();
}

void sub_1000C8C88(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Cannot read file %{public}@", v5);

  sub_100006460();
}

void sub_1000C8D08(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Cannot read data from %{public}@", v5);

  sub_100006460();
}

void sub_1000C8D88()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "%{public}@ not found or in wrong format.", v2);
  sub_100008728();
}

void sub_1000C8DEC(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;

  v3 = 138543362;
  v4 = CFSTR("CFBundleShortVersionString");
  sub_100007888((void *)&_mh_execute_header, a1, a3, "%{public}@ is not a string.", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000C8E60(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Cannot load bundle: %{public}@", v5);

  sub_100006460();
}

void sub_1000C8EE0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Cannot find executable file in bundle:  %{public}@.", v5);

  sub_100006460();
}

void sub_1000C8F60()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100014B54();
  sub_100014B48((void *)&_mh_execute_header, v0, v1, "%s - Failed to find app name under folder:  %{public}@", (uint8_t *)v2);
  sub_100008728();
}

void sub_1000C8FD0(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  void *v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v6 = 136315650;
  v7 = "-[MSDiOSApp serachForFileWithSuffix:inFolder:]";
  v8 = 2114;
  v9 = a1;
  v10 = 2114;
  v11 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%s - Failed to read contents of folder:  %{public}@ - Error:  %{public}@", (uint8_t *)&v6, 0x20u);

}

void sub_1000C9090(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v4 = 138543362;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "MSDRapportMessageHandler: Failed to activate RPCompanionLinkClient for listener: %{public}@", (uint8_t *)&v4, 0xCu);

}

void sub_1000C9124(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "MSDRapportMessageHandler: No RPCompanionLinkClient found for listener.", a5, a6, a7, a8, 0);
}

void sub_1000C9158()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10009347C();
  sub_100019200((void *)&_mh_execute_header, v0, v1, "MSDRapportMessageHandler: Incoming options: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C91BC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100019200((void *)&_mh_execute_header, a2, a3, "MSDRapportMessageHandler: Incoming options: %{public}@", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000C9220()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100093498(__stack_chk_guard);
  sub_10009347C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDRapportMessageHandler: XPC connection to sender RPCompanionLinkClient interrupted for device: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C9280()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100093498(__stack_chk_guard);
  sub_10009347C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDRapportMessageHandler: XPC connection to sender RPCompanionLinkClient invalidated for device: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C92E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100093498(__stack_chk_guard);
  sub_10009347C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDRapportMessageHandler: Link connection lost for device: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C9340(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_msgSend((id)sub_100093488(a1, a2), "localizedDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100093464();
  sub_100015668((void *)&_mh_execute_header, v4, v5, "MSDRapportMessageHandler: Failed to activate RPCompanionLinkClient for device: %{public}@ Error:%{public}@", v6, v7, v8, v9, v10);

  sub_10001567C();
}

void sub_1000C93BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100093498(__stack_chk_guard);
  sub_10009347C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "MSDRapportMessageHandler: No RPCompanionLinkClient found for device: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000C941C(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_msgSend((id)sub_100093488(a1, a2), "localizedDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100093464();
  sub_100015668((void *)&_mh_execute_header, v4, v5, "MSDRapportMessageHandler: Failed to send request of ID: %{public}@ error: %{public}@", v6, v7, v8, v9, v10);

  sub_10001567C();
}

void sub_1000C9498(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_msgSend((id)sub_100093488(a1, a2), "localizedDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100093464();
  sub_100015668((void *)&_mh_execute_header, v4, v5, "MSDRapportMessageHandler: Failed to send event of ID: %{public}@ error: %{public}@", v6, v7, v8, v9, v10);

  sub_10001567C();
}

void sub_1000C9514(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to load JSON data: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C958C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to deserialize JSON data: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C9604(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;

  v3[0] = 67240450;
  v3[1] = a2;
  v4 = 2114;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to run xctspawn: %{public, errno}d stdout: %{public}@", (uint8_t *)v3, 0x12u);
}

void sub_1000C9688(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to locate xctspawn tool: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C9700(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to get file last modified date: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000C9778(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67240192;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to run xctspawn: %{public, errno}d", (uint8_t *)v2, 8u);
  sub_100006008();
}

void sub_1000C97E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "No test plan found.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C9818(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "No test target found.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000C9848(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Device has no previous migration version saved.", v1, 2u);
}

void sub_1000C9888(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Previous saved migration version: %{public}@ not in expected format.", (uint8_t *)&v2, 0xCu);
}

void sub_1000C98FC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "No CDP context found for primary account.", a5, a6, a7, a8, 0);
}

void sub_1000C9930(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to get DSID from CDP context.", a5, a6, a7, a8, 0);
}

void sub_1000C9964(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to query recovery key availability: %{public}@", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000C99E0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to generate recovery key: %{public}@", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000C9A5C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "/Register data: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C9AD0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_1000657C4();
  sub_100015668((void *)&_mh_execute_header, v2, v3, "%{public}@: error from the server: %{public}@", v4, v5, v6, v7, v8);

  sub_10001567C();
}

void sub_1000C9B50(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_1000657C4();
  sub_100015668((void *)&_mh_execute_header, v2, v3, "%{public}@: required key not found: %{public}@", v4, v5, v6, v7, v8);

  sub_10001567C();
}

void sub_1000C9BD0(void *a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100096C44();
  sub_10001BA1C((void *)&_mh_execute_header, v5, v6, "%s - Failed to load file:  %{public}@ - Error:  %{public}@", v7, v8, v9, v10, 2u);

  sub_10001BA44();
}

void sub_1000C9C70(void *a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_100096C44();
  sub_10001BA1C((void *)&_mh_execute_header, v5, v6, "%s - Failed to save info to file:  %{public}@ - Error:  %{public}@", v7, v8, v9, v10, 2u);

  sub_10001BA44();
}

void sub_1000C9D10(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10001BA1C((void *)&_mh_execute_header, v2, v3, "%s - Failed to create folder:  %{public}@ - Error:  %{public}@", v4, v5, v6, v7, 2u);

  sub_10001BA44();
}

void sub_1000C9DB4(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  v6 = 138543618;
  v7 = v5;
  v8 = 2114;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%{public}@ returned error: %{public}@", (uint8_t *)&v6, 0x16u);

}

void sub_1000C9E60(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: no data received.", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000C9EDC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: failed to convert data to dict", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000C9F58(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v3 = 138543362;
  v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Converted from xpc to NSArray: %{public}@", (uint8_t *)&v3, 0xCu);
}

void sub_1000C9FD4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 134217984;
  v4 = a1;
  sub_100007888((void *)&_mh_execute_header, a2, a3, "The value at index %lu in this xpcArray are of an unsupported type", (uint8_t *)&v3);
}

void sub_1000CA040(void *a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  id v5;

  v4 = 136315138;
  v5 = objc_msgSend(objc_retainAutorelease(a1), "objCType");
  sub_100007888((void *)&_mh_execute_header, a2, v3, "Unsupported NSNumber type: %s for xpc dictionary encoding", (uint8_t *)&v4);
}

void sub_1000CA0C4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "The values in this NSArray are of an unsupported type", v1, 2u);
}

void sub_1000CA104(uint64_t a1, void *a2, NSObject *a3)
{
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100014B48((void *)&_mh_execute_header, a3, v5, "Error removing file %{public}@: %{public}@", v6);

  sub_10001567C();
}

void sub_1000CA190()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100014B8C();
  sub_100014B48((void *)&_mh_execute_header, v0, (uint64_t)v0, "Failed to copy file from cache to path %{public}@ - %{public}@", v1);
  sub_100008728();
}

void sub_1000CA1F8()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100014B8C();
  sub_100014B48((void *)&_mh_execute_header, v0, (uint64_t)v0, "Failed to delete existing file %{public}@ - %{public}@", v1);
  sub_100008728();
}

void sub_1000CA260()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "File %{public}@ failed hash check", v2);
  sub_100008728();
}

void sub_1000CA2C4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "Failed to delete file: %{public}@ from cache: does not exist", v2);
  sub_100008728();
}

void sub_1000CA328(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to load app patches list: %{public}@", v5);

  sub_100006460();
}

void sub_1000CA3A8(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "Failed to save app patches list: %{public}@", v5);

  sub_100006460();
}

void sub_1000CA428(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDNearbyObjectMonitor: Failed to create NIDevicePresenceConfiguration: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000CA4A4(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDNearbyObjectMonitor: Failed to activate device scanner: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000CA51C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "MSDNearbyObjectMonitor: NISession invalidated with error: %{public}@", v4, v5, v6, v7, v8);

  sub_100006460();
}

void sub_1000CA594()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10000647C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "MSDNearbyObjectMonitor: Did update region for object: %@", v1, 0xCu);
}

void sub_1000CA604(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 136446210;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to install OS update (%{public}s)", (uint8_t *)&v2, 0xCu);
}

void sub_1000CA678(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10002015C();
  sub_100015668((void *)&_mh_execute_header, v3, v4, "Failed to install OS update (%{public}s) - %{public}@", v5, v6, v7, v8, v9);

  sub_10001567C();
}

void sub_1000CA6FC(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Hub host name and port must be saved for handling request: %@", buf, 0xCu);

}

void sub_1000CA750(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "FDC response does not contain credential dictionary", a5, a6, a7, a8, 0);
}

void sub_1000CA784(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Failed to update FDC", a5, a6, a7, a8, 0);
}

void sub_1000CA7B8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "appID"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Failed to get IPA from server for app %{public}@", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000CA834(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "savePath"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "Cannot find %{public}@", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000CA8B0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  sub_10000644C((void *)&_mh_execute_header, v2, v3, "%{public}@: does not conform to MSDDownloadFileDetailsProtocol.", v4, v5, v6, v7, 2u);

  sub_100006460();
}

void sub_1000CA92C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create xpc dict.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CA99C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100014B8C();
  sub_1000A38E0((void *)&_mh_execute_header, v0, v1, "Inserting key: %{public}@ obj: %{public}@");
  sub_100008728();
}

void sub_1000CA9FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Launching Blocking UI as app too, to dismiss CoverSheet", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CAA28(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Attempt to report an nil error", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CAA98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create xpc dict.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CAB08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Message send back to xpc client", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CAB34(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create xpc dict.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CABA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Cannot create xpc dict.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CAC14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to generate random bytes", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CAC40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to save secret key to keychain", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CAC6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "No input data specified.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CAC98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "No IV specified.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CACC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to allocate output buffer.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CACF0(char a1, int a2, os_log_t log)
{
  const char *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;

  v3 = "decrypt";
  if ((a1 & 1) == 0)
    v3 = "encrypt";
  v4 = 136315394;
  v5 = v3;
  v6 = 1024;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to %s input data - %d", (uint8_t *)&v4, 0x12u);
}

void sub_1000CAD8C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a2, a3, "Failed to generate secret key: %d.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000CADF0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a1, a3, "Failed to save keychain key: %d.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000CAE58(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a1, a3, "Failed to delete keychain key: %d.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000CAEC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Cannot create xpc connection", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000CAEF0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "demod_helper: XPC_ERROR_CONNECTION_INVALID", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000CAF20(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "demod_helper: XPC_ERROR_CONNECTION_INTERRUPTED", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000CAF50()
{
  __assert_rtn("-[MSDHelperAgent init]_block_invoke", "MSDHelperAgent.m", 60, "type == XPC_TYPE_DICTIONARY");
}

void sub_1000CAF78(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  void *v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v6 = 136315650;
  v7 = "-[MSDHelperAgent createDeviceManifestForComponent:ofType:withRootPath:userHomePath:andSavePath:]";
  v8 = 2114;
  v9 = a1;
  v10 = 2114;
  v11 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%s: Failed to load device manifest from: %{public}@ error: %{public}@", (uint8_t *)&v6, 0x20u);

}

void sub_1000CB038(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: Failed to create device manifest. Initializing empty device manifest dictionary.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB0A8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100019200((void *)&_mh_execute_header, a1, a3, "%s: will return.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB118(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a2, a3, "Cannot clone file: %{public}@.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB17C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100019200((void *)&_mh_execute_header, a1, a3, "%s: entered.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB1EC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s: entered - Launching test script is not supported on this OS!", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB25C(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  int v5;
  const char *v6;
  __int16 v7;
  void *v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "context"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = 136315394;
  v6 = "-[MSDSettingsInstallOperation _applySettingToDevice]";
  v7 = 2114;
  v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s - Error: unsupported device setting %{public}@ found in the manifest", (uint8_t *)&v5, 0x16u);

}

void sub_1000CB31C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Error writing locale info to the MSDPreferences file", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB38C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Error: The 'locale' manifest component does not contain valid locale data", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB3FC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "Missing key %{public}@ in display settings.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB46C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error writing HDR setting to the MSDPreferences file", v1, 2u);
}

void sub_1000CB4AC(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;
  __int16 v6;
  const __CFString *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getName"));
  v4 = 138543618;
  v5 = v3;
  v6 = 2114;
  v7 = CFSTR("statusCode");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%{public}@ response payload does not contain: %{public}@", (uint8_t *)&v4, 0x16u);

}

void sub_1000CB554(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "Cannot register a nil delegate", a5, a6, a7, a8, 0);
}

void sub_1000CB588(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000786C((void *)&_mh_execute_header, a1, a3, "delegate does not conform to protocol.", a5, a6, a7, a8, 0);
}

void sub_1000CB5BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Unable to set power. Error: %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000CB61C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to save wifi settings to our preferences file.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB648()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to connect to given Wifi network.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB674()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to enable Wifi.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB6A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to load wifi settings from preferences file.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB6CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to connect to given wifi network.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB6F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to enable wifi.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB724()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "WiFi password in preferences file is invalid.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB750()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Unable to get the known profile from CoreWifi", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB77C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Unable to get SSID for current network.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB7A8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a2, a3, "Unable to get wifi password from system keychain. Error: %d", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000CB80C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to save wifi settings in our preferences file.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CB838(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - loadWiFiSettingsFromPreferences failed.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB8A8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008718((void *)&_mh_execute_header, a1, a3, "%s - Missing SSID in WiFi settings from preferences file.", a5, a6, a7, a8, 2u);
  sub_100008728();
}

void sub_1000CB918(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000785C((void *)&_mh_execute_header, a1, a3, "Cannot find matching ssid after %d scan attempts.", a5, a6, a7, a8, 0);
  sub_100006008();
}

void sub_1000CB984()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to connect to wifi. Error %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000CB9E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000647C();
  sub_100008718((void *)&_mh_execute_header, v0, v1, "Failed to start monitoring for CWFEventTypeInterfaceAdded event. Error %{public}@", v2, v3, v4, v5, v6);
  sub_100008728();
}

void sub_1000CBA44(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to remove known WiFi network - %{public}@", v4, 0xCu);

}

void sub_1000CBAD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "WiFi settings not in right format.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CBB00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to decrypt WiFi password.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CBB2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "Failed to produce final password data.", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CBB58(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543618;
  *(_QWORD *)(a2 + 4) = CFSTR("/tmp/DownloadedFileList.plist");
  *(_WORD *)(a2 + 12) = 2114;
  *(_QWORD *)(a2 + 14) = a1;
  sub_100014B48((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to save list of downloaded files to:  %{public}@ - Error:  %{public}@", (uint8_t *)a2);

}

void sub_1000CBBB8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "downloadedFileList is not in valid XML format.", v1, 2u);
}

void sub_1000CBBF8(uint8_t *buf, _QWORD *a2, os_log_t log)
{
  *(_DWORD *)buf = 138543362;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot find metadata for %{public}@", buf, 0xCu);
}

void sub_1000CBC3C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = 138543618;
  v6 = v3;
  v7 = 2114;
  v8 = v4;
  sub_100014B48((void *)&_mh_execute_header, a2, a3, "Failed to download file %{public}@ to %{public}@", (uint8_t *)&v5);
}

void sub_1000CBCB8(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "MSDDemoPeerResponder: Failed to upload pairing password: %{public}@", v5);

  sub_100006460();
}

void sub_1000CBD38(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "-[MSDDemoPeerResponder _getDeviceAddresses]";
  sub_100007888((void *)&_mh_execute_header, a1, a3, "%s - Failed to get device addresses.", (uint8_t *)&v3);
  sub_100008728();
}

void sub_1000CBDAC(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[MSDDemoPeerResponder _getDeviceAddresses]";
  v4 = 2114;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s - addresses:  %{public}@", (uint8_t *)&v2, 0x16u);
  sub_100008728();
}

void sub_1000CBE30()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10000647C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Device properties:  %{public}@", v1, 0xCu);
  sub_100008728();
}

void sub_1000CBE9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Input recovery is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CBEC8(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v7 = 138543618;
  v8 = a1;
  v9 = 2114;
  v10 = v5;
  sub_100014B48((void *)&_mh_execute_header, a3, v6, "MSDDemoPeerResponder: Failed to create archive for app: %{public}@ error: %{public}@", (uint8_t *)&v7);

}

void sub_1000CBF70()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Invalid app kind received: %lu", v2);
  sub_100008728();
}

void sub_1000CBFD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Environment controller is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC000()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Enumerating test scripts is not supported on this OS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC02C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Launching test script is not supported on this OS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC058()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Obtaining GK results is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC084()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Obtaining GK metrics is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC0B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Loading LS measurements is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC0DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Retrieving HS coaching suggestion is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC108()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder:Reading IPD status is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Skipping auto IPD adjustment is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC160()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Initiating IPD reset is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC18C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Querying IPD reset stage is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC1B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Getting AX settings is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC1E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Setting AX settings is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC210()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_10000786C((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: Wiping user contents is not supported on iOS!", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC23C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, a2, v4, "MSDDemoPeerResponder: Failed to unarchive WiFi settings data: %{public}@", v5);

  sub_100006460();
}

void sub_1000CC2BC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: No selector found for message of ID: %{public}@", v2);
  sub_100008728();
}

void sub_1000CC320()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000647C();
  sub_100007888((void *)&_mh_execute_header, v0, v1, "MSDDemoPeerResponder: No implementation found for message of ID: %{public}@", v2);
  sub_100008728();
}

void sub_1000CC384()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000647C();
  v3 = 2114;
  v4 = v0;
  sub_100014B48((void *)&_mh_execute_header, v1, (uint64_t)v1, "MSDDemoPeerResponder: Received unhandled event message: %{public}@ from device: %{public}@", v2);
  sub_100008728();
}

void sub_1000CC3F8(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "+[MSDBiomeAppInFocusStream collectAppUsageDataFrom:to:]_block_invoke";
  sub_10002E55C((void *)&_mh_execute_header, a1, a3, "%s - Publisher event:", (uint8_t *)&v3);
}

void sub_1000CC470(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  int v5;
  const char *v6;
  __int16 v7;
  void *v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "error"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
  v5 = 136315394;
  v6 = "+[MSDBiomeAppInFocusStream collectAppUsageDataFrom:to:]_block_invoke";
  v7 = 2114;
  v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s - Sink completed with error:  %{public}@", (uint8_t *)&v5, 0x16u);

  sub_10001567C();
}

void sub_1000CC524(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_10002E55C((void *)&_mh_execute_header, a3, (uint64_t)a3, "Add closed event for app:  %{public}@", (uint8_t *)a2);

  sub_1000B1F50();
}

void sub_1000CC56C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "End event:", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC598()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "Start event:", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC5C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "\nPaired event:", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC5F0()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100008730();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Invalid openEventSession", v1, 2u);
  sub_100006008();
}

void sub_1000CC628(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_10002E55C((void *)&_mh_execute_header, a3, (uint64_t)a3, "Add open event for app:  %{public}@", (uint8_t *)a2);

  sub_1000B1F50();
}

void sub_1000CC670()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100008730();
  sub_100005FF8((void *)&_mh_execute_header, v0, v1, "\nOpen event:", v2, v3, v4, v5, v6);
  sub_100006008();
}

void sub_1000CC69C(char a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = a1 & 1;
  sub_1000B1F34((void *)&_mh_execute_header, a2, a3, "rval:  %{BOOL}d", (uint8_t *)v3);
  sub_100006008();
}

void sub_1000CC708()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  NSObject *v6;

  sub_1000B1F70();
  sub_1000B1F58(v2, v3, v4, 5.8382e-34);
  sub_1000B1F40((void *)&_mh_execute_header, "Subsumed  - start:  %{public}@ - end:  %{public}@", v5, v6);

  sub_1000B1F50();
}

void sub_1000CC74C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  NSObject *v6;

  sub_1000B1F70();
  sub_1000B1F58(v2, v3, v4, 5.8382e-34);
  sub_1000B1F40((void *)&_mh_execute_header, "Subsuming - start:  %{public}@ - end:  %{public}@", v5, v6);

  sub_1000B1F50();
}

void sub_1000CC790(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "absoluteTimestamp"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "toString"));
  v6 = 138543362;
  v7 = v4;
  sub_10002E55C((void *)&_mh_execute_header, a2, v5, "- Timestamp:      %{public}@", (uint8_t *)&v6);

  sub_10001567C();
}

void sub_1000CC828(void *a1, NSObject *a2)
{
  uint64_t v3;
  _DWORD v4[2];

  v4[0] = 67240192;
  v4[1] = objc_msgSend(a1, "launchType");
  sub_1000B1F34((void *)&_mh_execute_header, a2, v3, "- Type:           %{public}d", (uint8_t *)v4);
  sub_1000B1F84();
}

void sub_1000CC8A0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "launchReason"));
  v5 = 138543362;
  v6 = v3;
  sub_10002E55C((void *)&_mh_execute_header, a2, v4, "- LaunchReason:   %{public}@", (uint8_t *)&v5);

  sub_100006460();
}

void sub_1000CC924(void *a1, NSObject *a2)
{
  uint64_t v3;
  _DWORD v4[2];

  v4[0] = 67109120;
  v4[1] = objc_msgSend(a1, "starting");
  sub_1000B1F34((void *)&_mh_execute_header, a2, v3, "- Starting:       %{BOOL}d", (uint8_t *)v4);
  sub_1000B1F84();
}

void sub_1000CC99C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bundleID"));
  v5 = 138543362;
  v6 = v3;
  sub_10002E55C((void *)&_mh_execute_header, a2, v4, "- BundleID:       %{public}@", (uint8_t *)&v5);

  sub_100006460();
}

void sub_1000CCA20(uint64_t a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getName"));
  v4 = 138543362;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%{public}@: All URL retries exhausted, returning...", (uint8_t *)&v4, 0xCu);

  sub_100006460();
}

void sub_1000CCAB0(void *a1, NSObject *a2)
{
  int v3;
  id v4;

  v3 = 134217984;
  v4 = objc_msgSend(a1, "requestPerSession");
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Decreased concurrent request per session to %ld", (uint8_t *)&v3, 0xCu);
  sub_100006460();
}

void sub_1000CCB30(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unknown contaier type: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_1000CCBA4(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v6 = 138543618;
  v7 = a1;
  v8 = 2114;
  v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to create %{public}@ - %{public}@", (uint8_t *)&v6, 0x16u);

}

id objc_msgSend_App(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "App");
}

id objc_msgSend_HTTPMethod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HTTPMethod");
}

id objc_msgSend_InFocus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "InFocus");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_MCSetBoolRestriction_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "MCSetBoolRestriction:value:");
}

id objc_msgSend_OSBuild(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OSBuild");
}

id objc_msgSend_OSVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OSVersion");
}

id objc_msgSend_PLHasCompletedMomentAnalysis(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PLHasCompletedMomentAnalysis");
}

id objc_msgSend_PLHasCompletedRestorePostProcessing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PLHasCompletedRestorePostProcessing");
}

id objc_msgSend_RSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "RSSI");
}

id objc_msgSend_SSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SSID");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URL");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__NSStringFromSenderState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_NSStringFromSenderState:");
}

id objc_msgSend__NSStringFromVolumeCategory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_NSStringFromVolumeCategory:");
}

id objc_msgSend__aa_setRawPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_aa_setRawPassword:");
}

id objc_msgSend__abortBackgroundDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_abortBackgroundDownload");
}

id objc_msgSend__acceptiCloudTermsWithAuthResults_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_acceptiCloudTermsWithAuthResults:completionHandler:");
}

id objc_msgSend__activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activate");
}

id objc_msgSend__activateSenderUsingParameters_discoveryMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activateSenderUsingParameters:discoveryMode:");
}

id objc_msgSend__addHMACComponent_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addHMACComponent:error:");
}

id objc_msgSend__addOperationGroups_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addOperationGroups:");
}

id objc_msgSend__addOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addOperations:");
}

id objc_msgSend__addStagedOperation_forRollback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addStagedOperation:forRollback:");
}

id objc_msgSend__addStagedOperations_forRollback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addStagedOperations:forRollback:");
}

id objc_msgSend__authenticateAccountWithContext_forService_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_authenticateAccountWithContext:forService:completionHandler:");
}

id objc_msgSend__buildAppComponentsNotInManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_buildAppComponentsNotInManifest:");
}

id objc_msgSend__calculateFreeSpaceToReserve_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateFreeSpaceToReserve:");
}

id objc_msgSend__cancelAllOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cancelAllOperations");
}

id objc_msgSend__cancelRemainingOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cancelRemainingOperations");
}

id objc_msgSend__clearDataContainer_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_clearDataContainer:ofType:");
}

id objc_msgSend__clearFactoryCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_clearFactoryCache");
}

id objc_msgSend__cloneComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cloneComponent");
}

id objc_msgSend__cloneOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cloneOperations:");
}

id objc_msgSend__coalesceDownloadRequestForFileWithSameHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_coalesceDownloadRequestForFileWithSameHash:");
}

id objc_msgSend__configureiCloudAccountFeatures_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_configureiCloudAccountFeatures:completionHandler:");
}

id objc_msgSend__constructMessageHandlerTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_constructMessageHandlerTable");
}

id objc_msgSend__contentPlistPathForManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_contentPlistPathForManifest:");
}

id objc_msgSend__createDispatchData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createDispatchData");
}

id objc_msgSend__createFullIPAInstallOperationsAsFallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createFullIPAInstallOperationsAsFallback");
}

id objc_msgSend__createTempAppleAccountFromAuthResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createTempAppleAccountFromAuthResults:");
}

id objc_msgSend__createUninstallOperationForContainer_ofType_containerPath_isContainerized_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createUninstallOperationForContainer:ofType:containerPath:isContainerized:");
}

id objc_msgSend__dataUsingHexEncoding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dataUsingHexEncoding");
}

id objc_msgSend__deactivate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_deactivate");
}

id objc_msgSend__defaultIncludedHeaders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_defaultIncludedHeaders");
}

id objc_msgSend__disableFindMyServiceUsingContext_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_disableFindMyServiceUsingContext:completionHandler:");
}

id objc_msgSend__dispatchComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dispatchComponent:");
}

id objc_msgSend__dispatchNextComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dispatchNextComponent");
}

id objc_msgSend__dispatchOperationForExecution_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dispatchOperationForExecution:");
}

id objc_msgSend__dispatchRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dispatchRequest:");
}

id objc_msgSend__downloadAppArchiveFile_ofHash_ofAppUID_currenntAppUID_toFolder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_downloadAppArchiveFile:ofHash:ofAppUID:currenntAppUID:toFolder:");
}

id objc_msgSend__downloadContentFile_ofHash_toPath_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_downloadContentFile:ofHash:toPath:completionHandler:");
}

id objc_msgSend__downloadInstallableFile_ofHash_toPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_downloadInstallableFile:ofHash:toPath:");
}

id objc_msgSend__enableFindMyServiceAndSendLastLocation_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_enableFindMyServiceAndSendLastLocation:completionHandler:");
}

id objc_msgSend__endpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_endpoint");
}

id objc_msgSend__enforceFreeDiskSpaceRequirement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_enforceFreeDiskSpaceRequirement");
}

id objc_msgSend__ensureListenerRPClientStartedWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_ensureListenerRPClientStartedWithCompletion:");
}

id objc_msgSend__ensureSenderRPClientStartedForDevice_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_ensureSenderRPClientStartedForDevice:withCompletion:");
}

id objc_msgSend__estimateDiskSpaceRequirementFromOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_estimateDiskSpaceRequirementFromOperations:");
}

id objc_msgSend__extractRapportOptionsFromMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_extractRapportOptionsFromMessage:");
}

id objc_msgSend__extractRapportPayloadFromMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_extractRapportPayloadFromMessage:");
}

id objc_msgSend__feedNewRSSIReadingReceivedFromDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_feedNewRSSIReadingReceivedFromDevice:");
}

id objc_msgSend__fetchCellularPlanItems(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_fetchCellularPlanItems");
}

id objc_msgSend__fetchPairingSecretFromServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_fetchPairingSecretFromServer");
}

id objc_msgSend__findMatchingMSDRapportDeviceForRPCompanionLinkDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_findMatchingMSDRapportDeviceForRPCompanionLinkDevice:");
}

id objc_msgSend__findPairedPeerWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_findPairedPeerWithUUID:");
}

id objc_msgSend__findRouteDescriptorWithRouteUID_usingRouteDiscoverer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_findRouteDescriptorWithRouteUID:usingRouteDiscoverer:");
}

id objc_msgSend__findRouteDescriptorWithUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_findRouteDescriptorWithUID:");
}

id objc_msgSend__findSenderRPClientForDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_findSenderRPClientForDevice:");
}

id objc_msgSend__finishDownloadRequest_withReponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_finishDownloadRequest:withReponse:");
}

id objc_msgSend__forceIDSToSyncWithServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_forceIDSToSyncWithServer");
}

id objc_msgSend__forceiCloudKeychainToSyncWithServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_forceiCloudKeychainToSyncWithServer");
}

id objc_msgSend__forceiCloudKeychainToSyncWithServerAndCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_forceiCloudKeychainToSyncWithServerAndCompletion:");
}

id objc_msgSend__fulfillIXSZTransferPromise_withFile_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_fulfillIXSZTransferPromise:withFile:outError:");
}

id objc_msgSend__getAllPairedPeers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getAllPairedPeers");
}

id objc_msgSend__getCurrentProtocolVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getCurrentProtocolVersion");
}

id objc_msgSend__getDeviceAddresses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getDeviceAddresses");
}

id objc_msgSend__handleActiveOperationsDepleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleActiveOperationsDepleted");
}

id objc_msgSend__handleCancelledOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleCancelledOperation:");
}

id objc_msgSend__handleCloseRunningAppsRequest_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleCloseRunningAppsRequest:from:");
}

id objc_msgSend__handleCompleteComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleCompleteComponent:");
}

id objc_msgSend__handleCompletionForDownloadRequest_withResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleCompletionForDownloadRequest:withResponse:");
}

id objc_msgSend__handleDeviceCheckInOp_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleDeviceCheckInOp:from:");
}

id objc_msgSend__handleDiscoveryOfNewPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleDiscoveryOfNewPeer:");
}

id objc_msgSend__handleFailedOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleFailedOperation:");
}

id objc_msgSend__handleHidePasswordWithFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleHidePasswordWithFlags:");
}

id objc_msgSend__handleInitializeDeviceSettingsOp_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleInitializeDeviceSettingsOp:from:");
}

id objc_msgSend__handleKVStoreResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleKVStoreResponse:");
}

id objc_msgSend__handleLocalDeviceUpdated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleLocalDeviceUpdated");
}

id objc_msgSend__handleLossOfExistingPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleLossOfExistingPeer:");
}

id objc_msgSend__handleMarkAsNotDemo_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleMarkAsNotDemo:from:");
}

id objc_msgSend__handlePasswordPromptWithFlags_throttleSeconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handlePasswordPromptWithFlags:throttleSeconds:");
}

id objc_msgSend__handleRPCompanionClientActivateCompletionWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleRPCompanionClientActivateCompletionWithError:");
}

id objc_msgSend__handleRPCompanionLinkDeviceChanged_withChanges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleRPCompanionLinkDeviceChanged:withChanges:");
}

id objc_msgSend__handleRPCompanionLinkDeviceFound_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleRPCompanionLinkDeviceFound:");
}

id objc_msgSend__handleRPCompanionLinkDeviceLost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleRPCompanionLinkDeviceLost:");
}

id objc_msgSend__handleRefreshDeviceSettingsOp_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleRefreshDeviceSettingsOp:from:");
}

id objc_msgSend__handleRetryableOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleRetryableOperation:");
}

id objc_msgSend__handleShowPassword_withFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleShowPassword:withFlags:");
}

id objc_msgSend__handleSkippedOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleSkippedOperation:");
}

id objc_msgSend__handleStoreSearchOp_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleStoreSearchOp:from:");
}

id objc_msgSend__handleSuccessfulOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleSuccessfulOperation:");
}

id objc_msgSend__handleUpdateDeviceEventMessage_fromPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleUpdateDeviceEventMessage:fromPeer:");
}

id objc_msgSend__handleUpdateOfExistingPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleUpdateOfExistingPeer:");
}

id objc_msgSend__handleWallpaperConfigChange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleWallpaperConfigChange");
}

id objc_msgSend__hanldeAuthCompletionWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_hanldeAuthCompletionWithError:");
}

id objc_msgSend__initializeAVSystemControllerIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initializeAVSystemControllerIfNeeded");
}

id objc_msgSend__invalidateListenerRPClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_invalidateListenerRPClient");
}

id objc_msgSend__invalidateSenderRPClientForDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_invalidateSenderRPClientForDevice:");
}

id objc_msgSend__isAirPlayStreaming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isAirPlayStreaming");
}

id objc_msgSend__isAllowListedAccount_withAuthResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isAllowListedAccount:withAuthResults:");
}

id objc_msgSend__isCurrentDeviceLanguage_andRegion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isCurrentDeviceLanguage:andRegion:");
}

id objc_msgSend__kickOffContentUpdateForManifest_withOptions_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_kickOffContentUpdateForManifest:withOptions:error:");
}

id objc_msgSend__listenForIncomingEventMessageOfID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_listenForIncomingEventMessageOfID:");
}

id objc_msgSend__listenForIncomingRequestMessageOfID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_listenForIncomingRequestMessageOfID:");
}

id objc_msgSend__loadCachedManifestPaths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_loadCachedManifestPaths");
}

id objc_msgSend__lowercaseSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_lowercaseSet");
}

id objc_msgSend__monitorRouteConfigUpdateForUUID_withCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_monitorRouteConfigUpdateForUUID:withCallback:");
}

id objc_msgSend__parseTestScriptsFromXCTSpawnResultDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_parseTestScriptsFromXCTSpawnResultDictionary:");
}

id objc_msgSend__plugIn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_plugIn");
}

id objc_msgSend__postCompletionNotificationWithResult_andError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_postCompletionNotificationWithResult:andError:");
}

id objc_msgSend__prepareDeviceInfoDictionaryForRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_prepareDeviceInfoDictionaryForRequest:");
}

id objc_msgSend__queryThermalMitigationStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queryThermalMitigationStatus");
}

id objc_msgSend__queueForOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queueForOperation:");
}

id objc_msgSend__readPairedPeersIntoData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readPairedPeersIntoData");
}

id objc_msgSend__resetWallpaperSettingsToFactoryDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_resetWallpaperSettingsToFactoryDefault");
}

id objc_msgSend__restorePairedPeersFromData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_restorePairedPeersFromData:");
}

id objc_msgSend__restoreStashedStagingToSecondaryStaging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_restoreStashedStagingToSecondaryStaging");
}

id objc_msgSend__retrieveContentRootPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_retrieveContentRootPath");
}

id objc_msgSend__rollbackFinishedOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_rollbackFinishedOperations");
}

id objc_msgSend__saveDisplaySettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveDisplaySettings");
}

id objc_msgSend__savePairedPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_savePairedPeer:");
}

id objc_msgSend__selectCachedManifestWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_selectCachedManifestWithError:");
}

id objc_msgSend__sendDownloadStatusUpdateNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sendDownloadStatusUpdateNotification");
}

id objc_msgSend__sendIDSRequestMessageOfType_withPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sendIDSRequestMessageOfType:withPayload:");
}

id objc_msgSend__sendOutgoingEventMessage_toDevice_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sendOutgoingEventMessage:toDevice:withCompletion:");
}

id objc_msgSend__sendOutgoingRequestMessage_toDevice_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sendOutgoingRequestMessage:toDevice:withCompletion:");
}

id objc_msgSend__sendRequestMessageOfID_andPayload_toPeerOfID_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sendRequestMessageOfID:andPayload:toPeerOfID:withCompletion:");
}

id objc_msgSend__setFlashTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setFlashTimer:");
}

id objc_msgSend__setFlashlightLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setFlashlightLevel:");
}

id objc_msgSend__setMasterKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setMasterKey:");
}

id objc_msgSend__setPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setPassword:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setupInterComponentDependencyOnRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupInterComponentDependencyOnRetry:");
}

id objc_msgSend__setupPairingManagerIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupPairingManagerIfNeeded");
}

id objc_msgSend__setupiCloudAccountWithSettings_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupiCloudAccountWithSettings:outError:");
}

id objc_msgSend__setupiTunesAccountWithSettings_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupiTunesAccountWithSettings:outError:");
}

id objc_msgSend__signInToAppleIDWithContext_forServices_usingAuthResults_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_signInToAppleIDWithContext:forServices:usingAuthResults:completionHandler:");
}

id objc_msgSend__signIniCloudAccount_password_features_recoveryKey_resetCDP_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_signIniCloudAccount:password:features:recoveryKey:resetCDP:outError:");
}

id objc_msgSend__signIniTunesAccount_password_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_signIniTunesAccount:password:outError:");
}

id objc_msgSend__signOutAppleIDForServices_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_signOutAppleIDForServices:completionHandler:");
}

id objc_msgSend__signOutiCloudAccountWithPassword_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_signOutiCloudAccountWithPassword:outError:");
}

id objc_msgSend__signOutiTunesAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_signOutiTunesAccount:");
}

id objc_msgSend__signedManifestMinimumOSVersionCheck_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_signedManifestMinimumOSVersionCheck:error:");
}

id objc_msgSend__stageContentPlistForManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_stageContentPlistForManifest:");
}

id objc_msgSend__start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_start");
}

id objc_msgSend__startAWDLDiscoveryUsingBonjour_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startAWDLDiscoveryUsingBonjour:");
}

id objc_msgSend__startFlash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startFlash");
}

id objc_msgSend__startPosterConfigChangeMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startPosterConfigChangeMonitor");
}

id objc_msgSend__startProcessingComponentsOnRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startProcessingComponentsOnRetry:");
}

id objc_msgSend__startTimeoutTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startTimeoutTimer");
}

id objc_msgSend__stop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_stop");
}

id objc_msgSend__stopAWDLDiscovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_stopAWDLDiscovery");
}

id objc_msgSend__stopActivation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_stopActivation");
}

id objc_msgSend__stopFlash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_stopFlash:");
}

id objc_msgSend__stringForHMAC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_stringForHMAC");
}

id objc_msgSend__systemLocalizedLanguageCodeFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_systemLocalizedLanguageCodeFromArray:");
}

id objc_msgSend__testProductsPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_testProductsPath");
}

id objc_msgSend__timingData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_timingData");
}

id objc_msgSend__trySetupAccounts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_trySetupAccounts:");
}

id objc_msgSend__turnPowerOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_turnPowerOn");
}

id objc_msgSend__updateLocale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateLocale");
}

id objc_msgSend__updateSyncStatusFromSyncSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateSyncStatusFromSyncSession:");
}

id objc_msgSend__uploadPairingPassword(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_uploadPairingPassword");
}

id objc_msgSend__waitForIDSOperationToQuiesceForAccount_forSignOut_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_waitForIDSOperationToQuiesceForAccount:forSignOut:");
}

id objc_msgSend_aa_appleAccountType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_appleAccountType");
}

id objc_msgSend_aa_isAASignInErrorWithCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_isAASignInErrorWithCode:");
}

id objc_msgSend_aa_setPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_setPassword:");
}

id objc_msgSend_abortProcessing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "abortProcessing");
}

id objc_msgSend_aboutToReboot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aboutToReboot");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_absoluteTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "absoluteTimestamp");
}

id objc_msgSend_accessControlListWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessControlListWithPath:");
}

id objc_msgSend_accountForService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountForService:");
}

id objc_msgSend_accountManagerHelper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountManagerHelper");
}

id objc_msgSend_accountSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountSettings");
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStore");
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accounts");
}

id objc_msgSend_ack_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ack:");
}

id objc_msgSend_acquireAppTerminationAssertionForApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acquireAppTerminationAssertionForApp:");
}

id objc_msgSend_acquireDeviceKeybagAssertionIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acquireDeviceKeybagAssertionIfNeeded");
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acquireWithError:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activate");
}

id objc_msgSend_activateFullScreenUIAppMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateFullScreenUIAppMonitor");
}

id objc_msgSend_activateSenderUsingParametersData_discoveryMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateSenderUsingParametersData:discoveryMode:");
}

id objc_msgSend_activateStagedOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateStagedOperations");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activateWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateWithConfiguration:");
}

id objc_msgSend_activateWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateWithContext:");
}

id objc_msgSend_activated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activated");
}

id objc_msgSend_activationConfigurationFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activationConfigurationFlags");
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "active");
}

id objc_msgSend_activeComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeComponents");
}

id objc_msgSend_activeDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeDevices");
}

id objc_msgSend_activeOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeOperations");
}

id objc_msgSend_addAppDiffPatchFile_sourceAppUID_targetAppUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAppDiffPatchFile:sourceAppUID:targetAppUID:");
}

id objc_msgSend_addAuthHeader(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAuthHeader");
}

id objc_msgSend_addAuthenticationHeadersToRequest_includedHeaders_body_algorithm_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAuthenticationHeadersToRequest:includedHeaders:body:algorithm:error:");
}

id objc_msgSend_addBAAAuthenticationHeadersToRequest_withBody_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addBAAAuthenticationHeadersToRequest:withBody:error:");
}

id objc_msgSend_addBundleSpecificCompoments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addBundleSpecificCompoments:");
}

id objc_msgSend_addCheckpointBarrier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addCheckpointBarrier:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addInstallDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addInstallDependency:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addRemoveOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRemoveOperations:");
}

id objc_msgSend_addRouteToSystemMusicForSpeaker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRouteToSystemMusicForSpeaker");
}

id objc_msgSend_addSessionTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSessionTask:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_addToBundleUpdateTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addToBundleUpdateTime:");
}

id objc_msgSend_addValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addValue:forHTTPHeaderField:");
}

id objc_msgSend_advertisementFields(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "advertisementFields");
}

id objc_msgSend_advertiserDidHidePairingPassword(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "advertiserDidHidePairingPassword");
}

id objc_msgSend_advertiserDidShowPairingPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "advertiserDidShowPairingPassword:");
}

id objc_msgSend_advertiserDidUpdateLocalDevicePublicIDFrom_to_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "advertiserDidUpdateLocalDevicePublicIDFrom:to:");
}

id objc_msgSend_agreeURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agreeURL");
}

id objc_msgSend_airDropMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "airDropMode");
}

id objc_msgSend_airplaneMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "airplaneMode");
}

id objc_msgSend_ak_redactedCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ak_redactedCopy");
}

id objc_msgSend_allApplications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allApplications");
}

id objc_msgSend_allDependentOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allDependentOperations");
}

id objc_msgSend_allHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allHTTPHeaderFields");
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allHeaderFields");
}

id objc_msgSend_allHomeScreenApplicationBundleIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allHomeScreenApplicationBundleIdentifiers");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allOperations");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allocateRequest_forSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocateRequest:forSession:");
}

id objc_msgSend_allowAccountSetup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowAccountSetup");
}

id objc_msgSend_allowCancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowCancel");
}

id objc_msgSend_allowEnteringDemoMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowEnteringDemoMode");
}

id objc_msgSend_allowSnapshotMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowSnapshotMode");
}

id objc_msgSend_allowSnapshotRevertTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowSnapshotRevertTimer");
}

id objc_msgSend_allowedISTSignedComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedISTSignedComponents");
}

id objc_msgSend_allowedSymLinks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedSymLinks");
}

id objc_msgSend_alreadyHaveList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alreadyHaveList");
}

id objc_msgSend_alreadyInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alreadyInstalled");
}

id objc_msgSend_alternateDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alternateDescriptor");
}

id objc_msgSend_annotated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "annotated:");
}

id objc_msgSend_anonymousListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anonymousListener");
}

id objc_msgSend_appDiffPatchFileForSourceAppUID_targetAppUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appDiffPatchFileForSourceAppUID:targetAppUID:");
}

id objc_msgSend_appID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appID");
}

id objc_msgSend_appIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appIdentifier");
}

id objc_msgSend_appInstallationInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appInstallationInProgress");
}

id objc_msgSend_appItemToDefer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appItemToDefer");
}

id objc_msgSend_appPatches(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appPatches");
}

id objc_msgSend_appPatchesListFileURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appPatchesListFileURL");
}

id objc_msgSend_appWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appWithPath:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendDownloadedFileSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendDownloadedFileSize:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applePKI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applePKI");
}

id objc_msgSend_applicationIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationIdentifier");
}

id objc_msgSend_applicationProxyForIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationProxyForIdentifier:");
}

id objc_msgSend_applicationRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationRegistration");
}

id objc_msgSend_applicationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationType");
}

id objc_msgSend_applyDownloadPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyDownloadPolicy:");
}

id objc_msgSend_applyRestrictionDictionary_clientType_clientUUID_localizedClientDescription_localizedWarningMessage_outRestrictionChanged_outEffectiveSettingsChanged_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyRestrictionDictionary:clientType:clientUUID:localizedClientDescription:localizedWarningMessage:outRestrictionChanged:outEffectiveSettingsChanged:outError:");
}

id objc_msgSend_appsPrefixForManifestVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appsPrefixForManifestVersion:");
}

id objc_msgSend_apsConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apsConnection");
}

id objc_msgSend_apsToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apsToken");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_arguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arguments");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithContentsOfFile:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_arrayWithXPCArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithXPCArray:");
}

id objc_msgSend_askFindMyHubForHubInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "askFindMyHubForHubInfo:");
}

id objc_msgSend_associateWithComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associateWithComponent:");
}

id objc_msgSend_associateWithParameters_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associateWithParameters:error:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_authenticate_forTask_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticate:forTask:completion:");
}

id objc_msgSend_authenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticateWithContext:completion:");
}

id objc_msgSend_authenticated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticated");
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationMethod");
}

id objc_msgSend_authorizationStatusForBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authorizationStatusForBundleIdentifier:");
}

id objc_msgSend_autoFillCDNRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoFillCDNRequest:");
}

id objc_msgSend_autoFillCommandRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoFillCommandRequest:");
}

id objc_msgSend_autoFillRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoFillRequest:");
}

id objc_msgSend_automatedDeviceGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "automatedDeviceGroup");
}

id objc_msgSend_avDiscoverySession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avDiscoverySession");
}

id objc_msgSend_avOutputContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avOutputContext");
}

id objc_msgSend_avSystemController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avSystemController");
}

id objc_msgSend_available(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "available");
}

id objc_msgSend_avgRTT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avgRTT");
}

id objc_msgSend_backToVirgin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backToVirgin:");
}

id objc_msgSend_backgroundBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundBundle");
}

id objc_msgSend_backgroundDownloadActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundDownloadActive");
}

id objc_msgSend_backgroundDownloadQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundDownloadQueue");
}

id objc_msgSend_backgroundDownloadState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundDownloadState");
}

id objc_msgSend_backlightStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backlightStatus");
}

id objc_msgSend_bail_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bail:error:");
}

id objc_msgSend_bailOnStashedStagingRestoreFailure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bailOnStashedStagingRestoreFailure");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_batteryCapacity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryCapacity");
}

id objc_msgSend_batteryExternalConnectedKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryExternalConnectedKey");
}

id objc_msgSend_beginExtensionRequestWithInputItems_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginExtensionRequestWithInputItems:completion:");
}

id objc_msgSend_bgDownloadPauseReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bgDownloadPauseReason");
}

id objc_msgSend_bgDownloadPauseStartTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bgDownloadPauseStartTime");
}

id objc_msgSend_blackListedPaths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blackListedPaths");
}

id objc_msgSend_bleDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bleDevice");
}

id objc_msgSend_blocklistedItems(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blocklistedItems");
}

id objc_msgSend_bonjourBrowser(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bonjourBrowser");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bootstrap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bootstrap");
}

id objc_msgSend_brightnessClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "brightnessClient");
}

id objc_msgSend_broadcast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "broadcast");
}

id objc_msgSend_buddyCompletionHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buddyCompletionHandler");
}

id objc_msgSend_buddyCompletionHandlerLock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buddyCompletionHandlerLock");
}

id objc_msgSend_buildAppDataOperationsWithIdentifier_andDependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildAppDataOperationsWithIdentifier:andDependencies:");
}

id objc_msgSend_buildAppOperationsWithIdentifier_shouldDeferApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildAppOperationsWithIdentifier:shouldDeferApp:");
}

id objc_msgSend_buildAppRemovalOperationsWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildAppRemovalOperationsWithIdentifier:");
}

id objc_msgSend_buildBackupOperationsWithPath_andIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildBackupOperationsWithPath:andIndex:");
}

id objc_msgSend_buildComponentsFromManifest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildComponentsFromManifest");
}

id objc_msgSend_buildComponentsNotInManifest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildComponentsNotInManifest");
}

id objc_msgSend_buildConfigurationProfileOperationsWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildConfigurationProfileOperationsWithIdentifier:");
}

id objc_msgSend_buildLocalURLListFromContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildLocalURLListFromContext:");
}

id objc_msgSend_buildProvisioningProfileOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildProvisioningProfileOperations:");
}

id objc_msgSend_buildSettingsOperationWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildSettingsOperationWithIdentifier:");
}

id objc_msgSend_buildSystemAppOperationsWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildSystemAppOperationsWithIdentifier:");
}

id objc_msgSend_bundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundle");
}

id objc_msgSend_bundleDownloadInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleDownloadInProgress");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleID");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleInProgress");
}

id objc_msgSend_bundleInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleInfo");
}

id objc_msgSend_bundleLocalizedNameForInstalledApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleLocalizedNameForInstalledApp:");
}

id objc_msgSend_bundlePathForInstalledApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundlePathForInstalledApp:");
}

id objc_msgSend_bundleState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleState");
}

id objc_msgSend_bundleTimerInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleTimerInfo");
}

id objc_msgSend_bundleType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleType");
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleURL");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_busy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "busy");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_caLogsUploadInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "caLogsUploadInterval");
}

id objc_msgSend_caLogsUploadTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "caLogsUploadTimer");
}

id objc_msgSend_cache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cache");
}

id objc_msgSend_cachedBundleInstallAttempted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedBundleInstallAttempted");
}

id objc_msgSend_cachedBundleInstallState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedBundleInstallState");
}

id objc_msgSend_cachedFDC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedFDC");
}

id objc_msgSend_cachedLocalURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedLocalURL");
}

id objc_msgSend_cachingHubAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachingHubAvailable");
}

id objc_msgSend_cachingHubRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachingHubRequest");
}

id objc_msgSend_cachingHubRetryInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachingHubRetryInterval");
}

id objc_msgSend_canLockSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canLockSnapshot");
}

id objc_msgSend_canPassCheckpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canPassCheckpoint");
}

id objc_msgSend_canRevertSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canRevertSnapshot");
}

id objc_msgSend_canRunCleanUpForBetterTogetherDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canRunCleanUpForBetterTogetherDevice");
}

id objc_msgSend_canStartAccountContentUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canStartAccountContentUpdate");
}

id objc_msgSend_canStartBackgroundDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canStartBackgroundDownload");
}

id objc_msgSend_canStartContentUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canStartContentUpdate");
}

id objc_msgSend_canStartOSUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canStartOSUpdate");
}

id objc_msgSend_canStopBackgroundDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canStopBackgroundDownload");
}

id objc_msgSend_canUnenrollWithObliteration_consultDeviceOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canUnenrollWithObliteration:consultDeviceOptions:");
}

id objc_msgSend_canUnlockSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canUnlockSnapshot");
}

id objc_msgSend_canUpdateContent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canUpdateContent");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAllOperations");
}

id objc_msgSend_cancelAndRemoveAllSessionTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAndRemoveAllSessionTask");
}

id objc_msgSend_cancelDemoContentUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelDemoContentUpdate");
}

id objc_msgSend_cancelDownload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelDownload:");
}

id objc_msgSend_cancelExtensionRequestWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelExtensionRequestWithIdentifier:");
}

id objc_msgSend_cancelForReason_client_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelForReason:client:completion:");
}

id objc_msgSend_cancelNotifyToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelNotifyToken:");
}

id objc_msgSend_cancelOfflineModeEnrollmentRetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelOfflineModeEnrollmentRetry");
}

id objc_msgSend_cancelOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelOperation");
}

id objc_msgSend_canceled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canceled");
}

id objc_msgSend_canceledByUser(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canceledByUser");
}

id objc_msgSend_carrierName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "carrierName");
}

id objc_msgSend_cdpContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdpContext");
}

id objc_msgSend_cdpController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdpController");
}

id objc_msgSend_cellularCapable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularCapable");
}

id objc_msgSend_cellularInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularInfo");
}

id objc_msgSend_cellularPlanDidChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularPlanDidChange:");
}

id objc_msgSend_cellularQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularQueue");
}

id objc_msgSend_cellularSlotsInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularSlotsInfo");
}

id objc_msgSend_certificateHash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "certificateHash");
}

id objc_msgSend_certificatesEncodeToBase64_status_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "certificatesEncodeToBase64:status:");
}

id objc_msgSend_changePasscodeFrom_to_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changePasscodeFrom:to:outError:");
}

id objc_msgSend_changeWiFiSettingsOnPeer_newSettings_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changeWiFiSettingsOnPeer:newSettings:withCompletion:");
}

id objc_msgSend_changed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changed");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_checkEntitlementsWithRequest_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkEntitlementsWithRequest:from:");
}

id objc_msgSend_checkFileForEntitlements_forCorrespondingManifestEntry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkFileForEntitlements:forCorrespondingManifestEntry:");
}

id objc_msgSend_checkFile_WatchAndTV_withMetaData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkFile_WatchAndTV:withMetaData:");
}

id objc_msgSend_checkFile_iOS_withMetaData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkFile_iOS:withMetaData:");
}

id objc_msgSend_checkFile_macOS_withMetaData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkFile_macOS:withMetaData:");
}

id objc_msgSend_checkIfAllCriticalComponentsTried(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkIfAllCriticalComponentsTried");
}

id objc_msgSend_checkIn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkIn:");
}

id objc_msgSend_checkInWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkInWithCompletion:");
}

id objc_msgSend_checkManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkManifest:");
}

id objc_msgSend_checkPlatformTypeForAllComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkPlatformTypeForAllComponents");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_checkType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkType");
}

id objc_msgSend_checkWithTimeKeeper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkWithTimeKeeper:");
}

id objc_msgSend_checker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checker");
}

id objc_msgSend_checkpointBarrier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkpointBarrier");
}

id objc_msgSend_cleanUpBackgroundState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanUpBackgroundState:");
}

id objc_msgSend_cleanUpPreferencesFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanUpPreferencesFile");
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanup");
}

id objc_msgSend_cleanupDummyPreferenceFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanupDummyPreferenceFile");
}

id objc_msgSend_clearAppSwitcherForDemoMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearAppSwitcherForDemoMode");
}

id objc_msgSend_clearCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearCache");
}

id objc_msgSend_clearCacheExceptFileHashes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearCacheExceptFileHashes:");
}

id objc_msgSend_clearCurrentiOSBuild(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearCurrentiOSBuild");
}

id objc_msgSend_clearDemoLogUploadRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearDemoLogUploadRequest");
}

id objc_msgSend_clearMinOSVersionAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearMinOSVersionAvailable");
}

id objc_msgSend_clearOSUpdateRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearOSUpdateRequest");
}

id objc_msgSend_clearSafariHistory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearSafariHistory");
}

id objc_msgSend_clearStagedDeviceAfterUpdateProcess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearStagedDeviceAfterUpdateProcess");
}

id objc_msgSend_clearUpF200FootprintIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearUpF200FootprintIfNeeded");
}

id objc_msgSend_clearUpNvramIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearUpNvramIfNeeded");
}

id objc_msgSend_clientCertArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientCertArray");
}

id objc_msgSend_clientState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientState");
}

id objc_msgSend_cloneFailedList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloneFailedList");
}

id objc_msgSend_cloneFile_to_expectingHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloneFile:to:expectingHash:");
}

id objc_msgSend_cloneFile_to_expectingHash_correctOwnership_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloneFile:to:expectingHash:correctOwnership:");
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "close");
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "closeFile");
}

id objc_msgSend_closedDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "closedDate");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_codeSignaturePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "codeSignaturePath:");
}

id objc_msgSend_codeSignaturePathForAlmondApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "codeSignaturePathForAlmondApp");
}

id objc_msgSend_collectAppUsageDataForSession_fromStart_toEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectAppUsageDataForSession:fromStart:toEnd:");
}

id objc_msgSend_collectAppUsageDataFrom_to_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectAppUsageDataFrom:to:");
}

id objc_msgSend_collectAppUsageWithSessionStart_andEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectAppUsageWithSessionStart:andEnd:");
}

id objc_msgSend_collectDemoLogsToFolder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectDemoLogsToFolder:");
}

id objc_msgSend_collectTimingDataForTask_withNetworkError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectTimingDataForTask:withNetworkError:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_compareResultToNSString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareResultToNSString:");
}

id objc_msgSend_compareSavedHubHostNameWithNewHostName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareSavedHubHostNameWithNewHostName");
}

id objc_msgSend_compareSavedHubHostsWithNewHosts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareSavedHubHostsWithNewHosts");
}

id objc_msgSend_compareWith_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareWith:");
}

id objc_msgSend_completed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completed");
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completion");
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completionHandler");
}

id objc_msgSend_component(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "component");
}

id objc_msgSend_component_didProduceClonedComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "component:didProduceClonedComponent:");
}

id objc_msgSend_componentDidComplete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentDidComplete:");
}

id objc_msgSend_componentDidHaveNewOperationStaged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentDidHaveNewOperationStaged:");
}

id objc_msgSend_componentManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentManager");
}

id objc_msgSend_componentProcessor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentProcessor");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsFromBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsFromBundle");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsSuccessful(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSuccessful");
}

id objc_msgSend_concurrentDownloadOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concurrentDownloadOperation");
}

id objc_msgSend_concurrentDownloadRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concurrentDownloadRequest");
}

id objc_msgSend_concurrentSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concurrentSession");
}

id objc_msgSend_condition(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "condition");
}

id objc_msgSend_conditionLock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conditionLock");
}

id objc_msgSend_configApplePencilToEnterSleepModeIfPaired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configApplePencilToEnterSleepModeIfPaired");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationProfilesSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationProfilesSupported");
}

id objc_msgSend_configureLowPowerMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureLowPowerMode");
}

id objc_msgSend_configureNetworkInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureNetworkInterface");
}

id objc_msgSend_configureWiFi_password_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureWiFi:password:");
}

id objc_msgSend_configureWiFiWithPersistentSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureWiFiWithPersistentSettings");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectEndDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectEndDate");
}

id objc_msgSend_connectStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectStartDate");
}

id objc_msgSend_connectTo_password_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectTo:password:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connection");
}

id objc_msgSend_connectionForPricing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionForPricing");
}

id objc_msgSend_containerExist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containerExist:");
}

id objc_msgSend_containerType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containerType");
}

id objc_msgSend_containerized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containerized");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentBeingInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentBeingInstalled");
}

id objc_msgSend_contentCacheProtocol(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentCacheProtocol");
}

id objc_msgSend_contentDownloadConcurrentQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentDownloadConcurrentQueue");
}

id objc_msgSend_contentIdentifierString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentIdentifierString");
}

id objc_msgSend_contentProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentProgress");
}

id objc_msgSend_contentRange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentRange");
}

id objc_msgSend_contentRootPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentRootPath");
}

id objc_msgSend_contentSyncTimeoutInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentSyncTimeoutInterval");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "context");
}

id objc_msgSend_contextForPrimaryAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForPrimaryAccount");
}

id objc_msgSend_continueToUpdateAccountContent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "continueToUpdateAccountContent");
}

id objc_msgSend_continueToUpdateDemoContent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "continueToUpdateDemoContent");
}

id objc_msgSend_controlObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controlObject:");
}

id objc_msgSend_convertPingType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertPingType:");
}

id objc_msgSend_convertToNSData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertToNSData");
}

id objc_msgSend_coordinatorForAppWithBundleID_withClientID_createIfNotExisting_created_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coordinatorForAppWithBundleID:withClientID:createIfNotExisting:created:error:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyFileIfPresentInCache_toLocation_verifyHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFileIfPresentInCache:toLocation:verifyHash:");
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyPropertyForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPropertyForKey:");
}

id objc_msgSend_copySecretKeyFromKeychain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copySecretKeyFromKeychain");
}

id objc_msgSend_coreDuetContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreDuetContext");
}

id objc_msgSend_coreDuetTriggeredPause(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreDuetTriggeredPause");
}

id objc_msgSend_coreLocationOwnedResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreLocationOwnedResources");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countOfRequestBodyBytesSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countOfRequestBodyBytesSent");
}

id objc_msgSend_countOfRequestHeaderBytesSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countOfRequestHeaderBytesSent");
}

id objc_msgSend_countOfResponseBodyBytesReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countOfResponseBodyBytesReceived");
}

id objc_msgSend_countOfResponseHeaderBytesReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countOfResponseHeaderBytesReceived");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countryCode");
}

id objc_msgSend_createContainer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createContainer:");
}

id objc_msgSend_createDeviceManifestForComponent_ofType_withRootPath_userHomePath_andSavePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDeviceManifestForComponent:ofType:withRootPath:userHomePath:andSavePath:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDownloadCacheFolders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDownloadCacheFolders");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createFullPathList_rootPath_isAllowList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFullPathList:rootPath:isAllowList:");
}

id objc_msgSend_createMobileStoreDemoCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMobileStoreDemoCache");
}

id objc_msgSend_createOperationFromIdentifier_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createOperationFromIdentifier:withContext:");
}

id objc_msgSend_createPublicKey_usingPolicy_anchors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createPublicKey:usingPolicy:anchors:");
}

id objc_msgSend_createPublicKeyAppleISTSigning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createPublicKeyAppleISTSigning:");
}

id objc_msgSend_createPublicKeyForDevelopmentSigning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createPublicKeyForDevelopmentSigning:");
}

id objc_msgSend_createPublicKeyForDevelopmentSigningStandard_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createPublicKeyForDevelopmentSigningStandard:");
}

id objc_msgSend_createPublicKeyForStrongSigning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createPublicKeyForStrongSigning:");
}

id objc_msgSend_createRemovableCounterpartComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createRemovableCounterpartComponent");
}

id objc_msgSend_createSearchDictionaryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSearchDictionaryForKey:");
}

id objc_msgSend_createSecretKeyIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSecretKeyIfNeeded");
}

id objc_msgSend_createSignedManifestFromManifestFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSignedManifestFromManifestFile:");
}

id objc_msgSend_createSymbolicLinkAtPath_withDestinationPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSymbolicLinkAtPath:withDestinationPath:error:");
}

id objc_msgSend_createTemporaryPasscodeIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createTemporaryPasscodeIfNeeded");
}

id objc_msgSend_createXPCDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createXPCDictionary");
}

id objc_msgSend_createXPCEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createXPCEndpoint");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "creationDate");
}

id objc_msgSend_creationList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "creationList");
}

id objc_msgSend_creatorSN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "creatorSN");
}

id objc_msgSend_creatorUDID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "creatorUDID");
}

id objc_msgSend_credential(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "credential");
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "credentialForTrust:");
}

id objc_msgSend_credentialHeaders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "credentialHeaders");
}

id objc_msgSend_credentialWithPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "credentialWithPassword:");
}

id objc_msgSend_credentials(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "credentials");
}

id objc_msgSend_criticalComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "criticalComponents");
}

id objc_msgSend_criticalUpdatePrioritized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "criticalUpdatePrioritized");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentKnownNetworkProfile");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentOSVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentOSVersion");
}

id objc_msgSend_currentProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentProgress");
}

id objc_msgSend_currentRetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentRetry");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentRunLoop");
}

id objc_msgSend_currentStage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentStage");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentState");
}

id objc_msgSend_currentTry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTry");
}

id objc_msgSend_currentUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentUID");
}

id objc_msgSend_currentUniqueIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentUniqueIdentifier");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataContainerPaths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataContainerPaths");
}

id objc_msgSend_dataContainerURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataContainerURL");
}

id objc_msgSend_dataDict(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataDict");
}

id objc_msgSend_dataFromPropertyList_format_errorDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataFromPropertyList:format:errorDescription:");
}

id objc_msgSend_dataTaskWithRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataTaskWithRequest:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataVolumeCacheFolderPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataVolumeCacheFolderPath");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithData:");
}

id objc_msgSend_dataWithHexString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithHexString:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithLength:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_dateBySettingHour_minute_second_ofDate_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateBySettingHour:minute:second:ofDate:options:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "day");
}

id objc_msgSend_dcotaOfflineModeDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dcotaOfflineModeDevice");
}

id objc_msgSend_deactivate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deactivate");
}

id objc_msgSend_deactivateDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deactivateDevice");
}

id objc_msgSend_deactivateFullScreenUIAppMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deactivateFullScreenUIAppMonitor");
}

id objc_msgSend_decodeComponentIdx_forSavedString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeComponentIdx:forSavedString:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_deepCopy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deepCopy:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultContextForBackupItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultContextForBackupItem:");
}

id objc_msgSend_defaultContextForContainerizedAppDataItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultContextForContainerizedAppDataItem:");
}

id objc_msgSend_defaultContextForIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultContextForIdentifier:");
}

id objc_msgSend_defaultContextForNonContainerizedAppDataItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultContextForNonContainerizedAppDataItem:");
}

id objc_msgSend_defaultLogLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultLogLevel");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultQueue");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultStore");
}

id objc_msgSend_defaultTimeZone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultTimeZone");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_delayRebootForTesting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delayRebootForTesting");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegate");
}

id objc_msgSend_delegates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegates");
}

id objc_msgSend_deleteConfigurationApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteConfigurationApp");
}

id objc_msgSend_deleteContainer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteContainer:");
}

id objc_msgSend_deleteDataBlob_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteDataBlob:");
}

id objc_msgSend_deleteDataStoreWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteDataStoreWithCompletion:");
}

id objc_msgSend_deleteFromCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteFromCache:");
}

id objc_msgSend_deleteInstallableFileAfterInstall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteInstallableFileAfterInstall");
}

id objc_msgSend_deleteItemForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteItemForKey:");
}

id objc_msgSend_deleteNVRam_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteNVRam:");
}

id objc_msgSend_deleteNvram_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteNvram:");
}

id objc_msgSend_deleteOperationRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteOperationRequest");
}

id objc_msgSend_deleteOperationRequestAndQuitHelper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteOperationRequestAndQuitHelper");
}

id objc_msgSend_deleteSecretKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteSecretKey");
}

id objc_msgSend_deleteSecretKeyInKeychain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteSecretKeyInKeychain");
}

id objc_msgSend_demoClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoClient");
}

id objc_msgSend_demoLogUploadCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoLogUploadCompleted:");
}

id objc_msgSend_demoLogUploadRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoLogUploadRequest");
}

id objc_msgSend_demoPrepareInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoPrepareInProgress");
}

id objc_msgSend_demoSetup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoSetup");
}

id objc_msgSend_demoUnitServerURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoUnitServerURL");
}

id objc_msgSend_demoUpdateAllowCancel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoUpdateAllowCancel:");
}

id objc_msgSend_demoUpdateCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoUpdateCompleted:");
}

id objc_msgSend_demoUpdateFailed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoUpdateFailed:");
}

id objc_msgSend_demoUpdateProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoUpdateProgress:");
}

id objc_msgSend_demoUpdateQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoUpdateQueue");
}

id objc_msgSend_demoUserHomePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoUserHomePath");
}

id objc_msgSend_demoVolumeCacheFolderPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoVolumeCacheFolderPath");
}

id objc_msgSend_demodReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demodReady");
}

id objc_msgSend_demodVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demodVersion");
}

id objc_msgSend_demuxQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demuxQueue");
}

id objc_msgSend_denyMulticast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyMulticast");
}

id objc_msgSend_dependencies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependencies");
}

id objc_msgSend_dependents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependents");
}

id objc_msgSend_deregisterCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deregisterCallback:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptor");
}

id objc_msgSend_destinationDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destinationDevice");
}

id objc_msgSend_destinationOfSymbolicLinkAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destinationOfSymbolicLinkAtPath:error:");
}

id objc_msgSend_destroyWorkFolderForBootTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destroyWorkFolderForBootTask");
}

id objc_msgSend_detailedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "detailedDescription");
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "device");
}

id objc_msgSend_deviceFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceFlags");
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIdentifier");
}

id objc_msgSend_deviceInformation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceInformation:");
}

id objc_msgSend_deviceInformationForPing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceInformationForPing:");
}

id objc_msgSend_deviceLanguageIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceLanguageIdentifier");
}

id objc_msgSend_deviceLockAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceLockAssertion");
}

id objc_msgSend_deviceManifest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceManifest");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceName");
}

id objc_msgSend_devicePresenceNotifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "devicePresenceNotifier");
}

id objc_msgSend_devicePresencePreset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "devicePresencePreset");
}

id objc_msgSend_devicePublicID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "devicePublicID");
}

id objc_msgSend_deviceRegionCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceRegionCode");
}

id objc_msgSend_deviceRegistry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceRegistry");
}

id objc_msgSend_deviceScanner(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceScanner");
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceType");
}

id objc_msgSend_deviceUDID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceUDID");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "devices");
}

id objc_msgSend_dict(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dict");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryFromJsonData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryFromJsonData:");
}

id objc_msgSend_dictionaryFromXPCDictionary_withDataFromKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryFromXPCDictionary:withDataFromKey:");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithContentsOfURL:");
}

id objc_msgSend_dictionaryWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithContentsOfURL:error:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_dictionaryWithXPCDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithXPCDictionary:");
}

id objc_msgSend_didProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didProgress");
}

id objc_msgSend_didReceiveEventMessage_fromDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveEventMessage:fromDevice:");
}

id objc_msgSend_didReceiveNewPauseStatus_forReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveNewPauseStatus:forReason:");
}

id objc_msgSend_didReceiveRequestMessage_fromDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveRequestMessage:fromDevice:");
}

id objc_msgSend_didUpdateDeviceReachability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didUpdateDeviceReachability:");
}

id objc_msgSend_disableBackgroundInstall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableBackgroundInstall");
}

id objc_msgSend_disableCoreAnalticsTransformSampling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableCoreAnalticsTransformSampling");
}

id objc_msgSend_disableIdleTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableIdleTimer");
}

id objc_msgSend_disableInContext_withWipeToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableInContext:withWipeToken:");
}

id objc_msgSend_disableLaunchdServicesForWatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableLaunchdServicesForWatch");
}

id objc_msgSend_disableNightlyLowPowerMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableNightlyLowPowerMode");
}

id objc_msgSend_disableNightlySnapshotRevert(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableNightlySnapshotRevert");
}

id objc_msgSend_disableParallelProcessing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableParallelProcessing");
}

id objc_msgSend_disassociateAndForgetWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disassociateAndForgetWiFi");
}

id objc_msgSend_disassociateWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disassociateWithReason:");
}

id objc_msgSend_discardStagedOperationsAndTriggerCompletion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discardStagedOperationsAndTriggerCompletion");
}

id objc_msgSend_discoverAndEnrollWithHub_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discoverAndEnrollWithHub:");
}

id objc_msgSend_discoverableMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discoverableMode");
}

id objc_msgSend_discoveredPeers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discoveredPeers");
}

id objc_msgSend_diskSpaceMonitoringTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "diskSpaceMonitoringTimer");
}

id objc_msgSend_diskSpaceRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "diskSpaceRequired");
}

id objc_msgSend_diskSpaceTriggeredPause(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "diskSpaceTriggeredPause");
}

id objc_msgSend_diskSpacedRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "diskSpacedRequired");
}

id objc_msgSend_dispatchSessionTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchSessionTask:");
}

id objc_msgSend_dispatchSessionTask_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchSessionTask:withError:");
}

id objc_msgSend_dispatchTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchTable");
}

id objc_msgSend_dispatchTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchTime");
}

id objc_msgSend_displayBacklightLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "displayBacklightLevel");
}

id objc_msgSend_displayLayoutMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "displayLayoutMonitor");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantFuture");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantPast");
}

id objc_msgSend_doPreSkyMigration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doPreSkyMigration");
}

id objc_msgSend_doPreSydneyMigration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doPreSydneyMigration");
}

id objc_msgSend_doesAvailableUpdateVersion_andUpdateBuild_matchExpectedUpdateVersion_andUpdateBuild_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doesAvailableUpdateVersion:andUpdateBuild:matchExpectedUpdateVersion:andUpdateBuild:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain");
}

id objc_msgSend_domainLookupEndDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainLookupEndDate");
}

id objc_msgSend_domainLookupStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainLookupStartDate");
}

id objc_msgSend_domains(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domains");
}

id objc_msgSend_domainsPlistFilePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainsPlistFilePath");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downloadCredentials(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadCredentials");
}

id objc_msgSend_downloadFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadFile:");
}

id objc_msgSend_downloadFileForRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadFileForRequest:");
}

id objc_msgSend_downloadIPACachingHub_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadIPACachingHub:");
}

id objc_msgSend_downloadIPAPreCachingHub_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadIPAPreCachingHub:");
}

id objc_msgSend_downloadManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadManager");
}

id objc_msgSend_downloadManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadManifest:");
}

id objc_msgSend_downloadOnly(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadOnly");
}

id objc_msgSend_downloadProgressChanged_withPercent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadProgressChanged:withPercent:");
}

id objc_msgSend_downloadQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadQueue");
}

id objc_msgSend_downloadRequestCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadRequestCompletions");
}

id objc_msgSend_downloadSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadSize");
}

id objc_msgSend_downloadSource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadSource");
}

id objc_msgSend_downloadSpeed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadSpeed");
}

id objc_msgSend_downloadedBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadedBytes");
}

id objc_msgSend_downloadedContentSource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadedContentSource");
}

id objc_msgSend_downloadedSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadedSize");
}

id objc_msgSend_droppedByRapport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "droppedByRapport");
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dsid");
}

id objc_msgSend_duServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "duServer");
}

id objc_msgSend_effectiveAppIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveAppIdentifiers");
}

id objc_msgSend_effectiveExtensionAttributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveExtensionAttributes");
}

id objc_msgSend_eligible(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eligible");
}

id objc_msgSend_embeddedSIMInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "embeddedSIMInstalled");
}

id objc_msgSend_enableInContext_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableInContext:completion:");
}

id objc_msgSend_enableLogToFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableLogToFile:");
}

id objc_msgSend_enablePeerDemoService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enablePeerDemoService");
}

id objc_msgSend_enablePushNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enablePushNotifications");
}

id objc_msgSend_enableSnapshotMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableSnapshotMode:");
}

id objc_msgSend_enableWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableWiFi:");
}

id objc_msgSend_enabledAccounts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enabledAccounts");
}

id objc_msgSend_encodeBase64_ofLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeBase64:ofLength:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_endEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endEvent");
}

id objc_msgSend_endOfDay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endOfDay");
}

id objc_msgSend_endowmentNamespaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endowmentNamespaces");
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpoint");
}

id objc_msgSend_enroll_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enroll:");
}

id objc_msgSend_enrollAndSetup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enrollAndSetup:");
}

id objc_msgSend_enrollForDeviceName_pairingCredential_hubHostName_hubPort_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enrollForDeviceName:pairingCredential:hubHostName:hubPort:error:");
}

id objc_msgSend_enrolled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enrolled");
}

id objc_msgSend_entitlementCheckForFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entitlementCheckForFile:");
}

id objc_msgSend_enumerateAndCollectMetaData_relativeTo_skip_superSet_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateAndCollectMetaData:relativeTo:skip:superSet:handler:");
}

id objc_msgSend_enumerateBundlesOfType_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateBundlesOfType:block:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "error");
}

id objc_msgSend_errorCheckedSetBoolValue_forSetting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorCheckedSetBoolValue:forSetting:");
}

id objc_msgSend_errorDomainMSDWithCode_message_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorDomainMSDWithCode:message:");
}

id objc_msgSend_errorDomainMSDWithCode_message_reason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorDomainMSDWithCode:message:reason:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errors");
}

id objc_msgSend_evaluateStoreStatusAgainstCurrentTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateStoreStatusAgainstCurrentTime");
}

id objc_msgSend_evaluateStoreStatusAgainstPointInTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateStoreStatusAgainstPointInTime:");
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventBody");
}

id objc_msgSend_eventSessionToAppUsage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventSessionToAppUsage:");
}

id objc_msgSend_events(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "events");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executableURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executableURL");
}

id objc_msgSend_execute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "execute");
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "execute:");
}

id objc_msgSend_existingAccounts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "existingAccounts");
}

id objc_msgSend_existingFileSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "existingFileSize");
}

id objc_msgSend_expectedOSBuild(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expectedOSBuild");
}

id objc_msgSend_expectedOSVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expectedOSVersion");
}

id objc_msgSend_expirationTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expirationTimer");
}

id objc_msgSend_explorerDidFindDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "explorerDidFindDevice:");
}

id objc_msgSend_explorerDidLoseDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "explorerDidLoseDevice:");
}

id objc_msgSend_explorerDidUpdateDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "explorerDidUpdateDevice:");
}

id objc_msgSend_extendedAttributeKeysWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extendedAttributeKeysWithPath:");
}

id objc_msgSend_extendedAttributesWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extendedAttributesWithPath:");
}

id objc_msgSend_extension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extension");
}

id objc_msgSend_extensionContextIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionContextIdentifier");
}

id objc_msgSend_extensionsWithMatchingAttributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionsWithMatchingAttributes:error:");
}

id objc_msgSend_extractAndUploadTimingData_forServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extractAndUploadTimingData:forServerType:");
}

id objc_msgSend_extractProtocolVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extractProtocolVersion");
}

id objc_msgSend_extractTimingData_forServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extractTimingData:forServerType:");
}

id objc_msgSend_fakeActivationDemoBit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fakeActivationDemoBit");
}

id objc_msgSend_fdc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fdc");
}

id objc_msgSend_fdcDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fdcDelegate");
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "features");
}

id objc_msgSend_fetchActiveNetworkInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchActiveNetworkInterface");
}

id objc_msgSend_fetchDeviceInfoFromPeerOfID_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchDeviceInfoFromPeerOfID:withCompletion:");
}

id objc_msgSend_fetchiTunesiCloudAccountsInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchiTunesiCloudAccountsInfo");
}

id objc_msgSend_file(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "file");
}

id objc_msgSend_file_blacklisted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "file:blacklisted:");
}

id objc_msgSend_file_whitelisted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "file:whitelisted:");
}

id objc_msgSend_fileAttributesAllowSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileAttributesAllowSet:");
}

id objc_msgSend_fileAttributesWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileAttributesWithPath:");
}

id objc_msgSend_fileCachePathFromSourcePath_forBackgroundDownload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileCachePathFromSourcePath:forBackgroundDownload:");
}

id objc_msgSend_fileCreationDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileCreationDate");
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileDescriptor");
}

id objc_msgSend_fileDownloadCachePaths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileDownloadCachePaths");
}

id objc_msgSend_fileDownloading(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileDownloading");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileGroupOwnerAccountID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileGroupOwnerAccountID");
}

id objc_msgSend_fileHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandle");
}

id objc_msgSend_fileHandleForReading(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandleForReading");
}

id objc_msgSend_fileHandleForReadingAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandleForReadingAtPath:");
}

id objc_msgSend_fileHandleForWritingAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandleForWritingAtPath:");
}

id objc_msgSend_fileHash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHash");
}

id objc_msgSend_fileHashWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHashWithPath:");
}

id objc_msgSend_fileInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileInfo");
}

id objc_msgSend_fileManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileManager");
}

id objc_msgSend_fileMetaDataWithMetadataDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileMetaDataWithMetadataDictionary:");
}

id objc_msgSend_fileMetadatatWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileMetadatatWithPath:");
}

id objc_msgSend_fileName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileName");
}

id objc_msgSend_fileNameForTodayUnder_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileNameForTodayUnder:prefix:");
}

id objc_msgSend_fileOwnerAccountID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileOwnerAccountID");
}

id objc_msgSend_filePosixPermissions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filePosixPermissions");
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileSize");
}

id objc_msgSend_fileSizeInCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileSizeInCache:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_fileType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileType");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileURLWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithString:");
}

id objc_msgSend_fillInMissingLocales_withOwnershipWarningMsg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fillInMissingLocales:withOwnershipWarningMsg:");
}

id objc_msgSend_findExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findExtension");
}

id objc_msgSend_findFileInCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findFileInCache:");
}

id objc_msgSend_findMyHub_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findMyHub:");
}

id objc_msgSend_findMyHubRetryAtTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findMyHubRetryAtTime");
}

id objc_msgSend_findMyHubRetryDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findMyHubRetryDelay");
}

id objc_msgSend_finishStreamWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishStreamWithCompletionBlock:");
}

id objc_msgSend_finishedOperationContexts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishedOperationContexts");
}

id objc_msgSend_finishedOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishedOperations");
}

id objc_msgSend_fire(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fire");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_flag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flag");
}

id objc_msgSend_flash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flash:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatValue");
}

id objc_msgSend_flushRecordsToPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flushRecordsToPreferences");
}

id objc_msgSend_fmhDict(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fmhDict");
}

id objc_msgSend_fmhURLOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fmhURLOverride");
}

id objc_msgSend_fmipWipeToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fmipWipeToken");
}

id objc_msgSend_folder_contains_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "folder:contains:");
}

id objc_msgSend_forBackgroundDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forBackgroundDownload");
}

id objc_msgSend_forRemoval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forRemoval");
}

id objc_msgSend_forceSwitchToDemoModeIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceSwitchToDemoModeIfNeeded");
}

id objc_msgSend_forceSwitchToDemoUpdateModeIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceSwitchToDemoUpdateModeIfNeeded");
}

id objc_msgSend_forceiCloudKeychainToSyncWithServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceiCloudKeychainToSyncWithServer");
}

id objc_msgSend_forceiCloudKeychainToSyncWithServerAndError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceiCloudKeychainToSyncWithServerAndError:");
}

id objc_msgSend_foregroundAllowedApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "foregroundAllowedApps");
}

id objc_msgSend_forgetAllKnownWiFiNetworksExcept_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forgetAllKnownWiFiNetworksExcept:");
}

id objc_msgSend_freeRequest_forSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "freeRequest:forSession:");
}

id objc_msgSend_freezeBackgroundDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "freezeBackgroundDownload");
}

id objc_msgSend_fullKeyList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullKeyList");
}

id objc_msgSend_fullKeysSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullKeysSent");
}

id objc_msgSend_fullScreenState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullScreenState");
}

id objc_msgSend_fullScreenUIAppId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullScreenUIAppId");
}

id objc_msgSend_fullScreenUIAppMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullScreenUIAppMonitor");
}

id objc_msgSend_fullScreenUICanceledByUser(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullScreenUICanceledByUser");
}

id objc_msgSend_fullScreenUILaunchError_iOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullScreenUILaunchError_iOS");
}

id objc_msgSend_generateBAACertficate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateBAACertficate:");
}

id objc_msgSend_generateRandomBytesWithFixedLength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateRandomBytesWithFixedLength");
}

id objc_msgSend_generateRandomRecoveryKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateRandomRecoveryKey:");
}

id objc_msgSend_generateRecoveryKeyWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateRecoveryKeyWithError:");
}

id objc_msgSend_generateiCloudAccountRecoveryKeyWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateiCloudAccountRecoveryKeyWithError:");
}

id objc_msgSend_getAccessControlList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAccessControlList");
}

id objc_msgSend_getAccountSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAccountSettings:");
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActivePairedDevice");
}

id objc_msgSend_getAllComponentsForUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAllComponentsForUpdate");
}

id objc_msgSend_getAllFileHash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAllFileHash");
}

id objc_msgSend_getAllItemsForKey_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAllItemsForKey:withAttributes:");
}

id objc_msgSend_getAllowedISTSignedComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAllowedISTSignedComponents:");
}

id objc_msgSend_getAllowedISTSignedComponentsFromManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAllowedISTSignedComponentsFromManifest:");
}

id objc_msgSend_getAllowedSymLinks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAllowedSymLinks");
}

id objc_msgSend_getAppDependecies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppDependecies:");
}

id objc_msgSend_getAppFileSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppFileSize:");
}

id objc_msgSend_getAppList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppList");
}

id objc_msgSend_getAppManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppManifest:");
}

id objc_msgSend_getAppPrivacyPermissions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppPrivacyPermissions:");
}

id objc_msgSend_getAppRealSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppRealSize:");
}

id objc_msgSend_getAppType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAppType:");
}

id objc_msgSend_getBackup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBackup");
}

id objc_msgSend_getBackupItemName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBackupItemName:");
}

id objc_msgSend_getBackupList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBackupList");
}

id objc_msgSend_getBackupSectionName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBackupSectionName");
}

id objc_msgSend_getBundleUpdateTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBundleUpdateTime");
}

id objc_msgSend_getCLPermissionForBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCLPermissionForBundleID:");
}

id objc_msgSend_getCachingHubFailureEventForPing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCachingHubFailureEventForPing");
}

id objc_msgSend_getCellularSimInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCellularSimInfo");
}

id objc_msgSend_getChannelWarningKeys_andPlaceHolderWarnings_forDeviceClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getChannelWarningKeys:andPlaceHolderWarnings:forDeviceClass:");
}

id objc_msgSend_getCodeResourcesURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCodeResourcesURL");
}

id objc_msgSend_getComponentData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getComponentData:");
}

id objc_msgSend_getComponentFromPath_forManifestVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getComponentFromPath:forManifestVersion:");
}

id objc_msgSend_getComponentProgressStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getComponentProgressStatus:");
}

id objc_msgSend_getComponentVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getComponentVersion:");
}

id objc_msgSend_getComponentsSuccessful(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getComponentsSuccessful");
}

id objc_msgSend_getContentStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getContentStatus");
}

id objc_msgSend_getContentUpdateType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getContentUpdateType");
}

id objc_msgSend_getCoreLocationOwnedResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCoreLocationOwnedResources");
}

id objc_msgSend_getCountStat_inTimingData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCountStat:inTimingData:");
}

id objc_msgSend_getCredential(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCredential");
}

id objc_msgSend_getCurrentAppUsageSessionUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentAppUsageSessionUUID");
}

id objc_msgSend_getCurrentDeviceLanguage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentDeviceLanguage");
}

id objc_msgSend_getCurrentDeviceLocaleCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentDeviceLocaleCode");
}

id objc_msgSend_getCurrentDevicePreferredLanguage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentDevicePreferredLanguage");
}

id objc_msgSend_getCurrentDeviceRegion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentDeviceRegion");
}

id objc_msgSend_getCurrentLocaleCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentLocaleCode");
}

id objc_msgSend_getCurrentWiFiSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentWiFiSettings:");
}

id objc_msgSend_getCurrentWiFiSignalStrength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentWiFiSignalStrength");
}

id objc_msgSend_getCurrentWiFiSsid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentWiFiSsid");
}

id objc_msgSend_getDataComponentRealSizeFromSection_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDataComponentRealSizeFromSection:forIdentifier:");
}

id objc_msgSend_getDataDictFromPayload_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDataDictFromPayload:error:");
}

id objc_msgSend_getDataSectionKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDataSectionKeys");
}

id objc_msgSend_getDefaultLogFolderName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDefaultLogFolderName");
}

id objc_msgSend_getDefaultRetryDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDefaultRetryDelay");
}

id objc_msgSend_getDemoBundleInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDemoBundleInfo:");
}

id objc_msgSend_getDemoEnrollmentFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDemoEnrollmentFlag");
}

id objc_msgSend_getDemoPreferencesLanguage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDemoPreferencesLanguage");
}

id objc_msgSend_getDemoPreferencesRegion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDemoPreferencesRegion");
}

id objc_msgSend_getDemoUpdateInProgress_operationAllowed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDemoUpdateInProgress:operationAllowed:");
}

id objc_msgSend_getDeviceOptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeviceOptions");
}

id objc_msgSend_getDictFromSection_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDictFromSection:forIdentifier:");
}

id objc_msgSend_getDispatchTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDispatchTable");
}

id objc_msgSend_getDoMigrationForTargetRelease_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDoMigrationForTargetRelease:");
}

id objc_msgSend_getDownloadFileRequestFromResponse_forFilePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDownloadFileRequestFromResponse:forFilePath:");
}

id objc_msgSend_getDownloadSizeBucket_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDownloadSizeBucket:");
}

id objc_msgSend_getEmbeddedSimCarrier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEmbeddedSimCarrier:");
}

id objc_msgSend_getEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEndpoint");
}

id objc_msgSend_getEntitlementsFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEntitlementsFrom:");
}

id objc_msgSend_getExcutableURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getExcutableURL");
}

id objc_msgSend_getExtendedAttributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getExtendedAttributes");
}

id objc_msgSend_getFileAttributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFileAttributes");
}

id objc_msgSend_getFileDownloadCredential_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFileDownloadCredential:");
}

id objc_msgSend_getFileSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFileSize");
}

id objc_msgSend_getFileType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFileType");
}

id objc_msgSend_getFreeSpace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFreeSpace");
}

id objc_msgSend_getHash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHash");
}

id objc_msgSend_getHmacKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHmacKey");
}

id objc_msgSend_getInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInfo");
}

id objc_msgSend_getInstallationOrder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInstallationOrder");
}

id objc_msgSend_getInternalStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInternalStatus");
}

id objc_msgSend_getIpv4Interfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIpv4Interfaces");
}

id objc_msgSend_getIsFileDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIsFileDownload");
}

id objc_msgSend_getItemForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getItemForKey:");
}

id objc_msgSend_getKeychainInfoToSave_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getKeychainInfoToSave:");
}

id objc_msgSend_getLastBundleUpdateDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLastBundleUpdateDate");
}

id objc_msgSend_getLastMigrationVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLastMigrationVersion");
}

id objc_msgSend_getLocaleCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLocaleCode");
}

id objc_msgSend_getManifestData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getManifestData:");
}

id objc_msgSend_getManifestDataFromSection_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getManifestDataFromSection:forIdentifier:");
}

id objc_msgSend_getManifestFromSection_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getManifestFromSection:forIdentifier:");
}

id objc_msgSend_getManifestInfoFromSection_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getManifestInfoFromSection:forIdentifier:");
}

id objc_msgSend_getMaskValueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMaskValueForKey:");
}

id objc_msgSend_getName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getName");
}

id objc_msgSend_getNetworkAccessPermissionForBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNetworkAccessPermissionForBundleID:");
}

id objc_msgSend_getNetworkOwnedResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNetworkOwnedResources");
}

id objc_msgSend_getNetworkPrivacyConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNetworkPrivacyConfiguration");
}

id objc_msgSend_getOSUpdateRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getOSUpdateRequest");
}

id objc_msgSend_getOriginServerFromSection_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getOriginServerFromSection:forIdentifier:");
}

id objc_msgSend_getPairedDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPairedDevice");
}

id objc_msgSend_getPairedPeersWithOptions_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPairedPeersWithOptions:completion:");
}

id objc_msgSend_getPercentageProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPercentageProgress");
}

id objc_msgSend_getPersistentWiFiSsid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPersistentWiFiSsid");
}

id objc_msgSend_getPhysicalSimCarrier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPhysicalSimCarrier:");
}

id objc_msgSend_getPostData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPostData");
}

id objc_msgSend_getPowerMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPowerMode");
}

id objc_msgSend_getProfileData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getProfileData");
}

id objc_msgSend_getQueryItems(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getQueryItems");
}

id objc_msgSend_getRangeHeaderForDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRangeHeaderForDownload");
}

id objc_msgSend_getRealPathForFile_withMetaData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRealPathForFile:withMetaData:");
}

id objc_msgSend_getRegistrationInfoKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRegistrationInfoKeys");
}

id objc_msgSend_getRequestForTimeout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRequestForTimeout:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getResponseClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getResponseClass");
}

id objc_msgSend_getRetailWarningKeys_andPlaceHolderWarnings_forDeviceClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRetailWarningKeys:andPlaceHolderWarnings:forDeviceClass:");
}

id objc_msgSend_getS3ServerFailureEventForPing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getS3ServerFailureEventForPing");
}

id objc_msgSend_getSavedCompleteByInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSavedCompleteByInterval");
}

id objc_msgSend_getSavedError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSavedError");
}

id objc_msgSend_getSavedFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSavedFlag");
}

id objc_msgSend_getSavedRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSavedRequest");
}

id objc_msgSend_getSavedValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSavedValues");
}

id objc_msgSend_getSecurityCheckSectionNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSecurityCheckSectionNames");
}

id objc_msgSend_getServerErrorMessage_withDefault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServerErrorMessage:withDefault:");
}

id objc_msgSend_getSessionForRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSessionForRequest:");
}

id objc_msgSend_getSessionTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSessionTask:");
}

id objc_msgSend_getSessionWithMinRequestLoad(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSessionWithMinRequestLoad");
}

id objc_msgSend_getSettingsComponentNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSettingsComponentNames");
}

id objc_msgSend_getSettingsDataFromSection_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSettingsDataFromSection:forIdentifier:");
}

id objc_msgSend_getSettingsFromSection_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSettingsFromSection:forIdentifier:");
}

id objc_msgSend_getSkyEquivalentVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSkyEquivalentVersion");
}

id objc_msgSend_getStandAlonePackageFileSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStandAlonePackageFileSize:");
}

id objc_msgSend_getStandAlonePackageList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStandAlonePackageList");
}

id objc_msgSend_getStandAlonePackageRealSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStandAlonePackageRealSize:");
}

id objc_msgSend_getStandAlonePackageVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStandAlonePackageVersion:");
}

id objc_msgSend_getSupervisedRestrictions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSupervisedRestrictions");
}

id objc_msgSend_getSydneyEquivalentVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSydneyEquivalentVersion");
}

id objc_msgSend_getSystemAppDataList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSystemAppDataList");
}

id objc_msgSend_getSystemAppDependecies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSystemAppDependecies:");
}

id objc_msgSend_getSystemAppPrivacyPermissions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSystemAppPrivacyPermissions:");
}

id objc_msgSend_getSystemContainerKeyword(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSystemContainerKeyword");
}

id objc_msgSend_getTCCPermissionsForBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTCCPermissionsForBundleID:");
}

id objc_msgSend_getTargetFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTargetFile");
}

id objc_msgSend_getTaskInState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTaskInState:");
}

id objc_msgSend_getTccOwnedResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTccOwnedResources");
}

id objc_msgSend_getTimeIntervalWithStart_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTimeIntervalWithStart:end:");
}

id objc_msgSend_getURLSchemaList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getURLSchemaList:");
}

id objc_msgSend_getUUIDsOfInstalledProvisioningProfiles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUUIDsOfInstalledProvisioningProfiles");
}

id objc_msgSend_getUrl(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUrl");
}

id objc_msgSend_getValueFromTestPreferencesForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getValueFromTestPreferencesForKey:");
}

id objc_msgSend_getVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVersion");
}

id objc_msgSend_getVolume_forCategory_mode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVolume:forCategory:mode:");
}

id objc_msgSend_getVolumeForCategory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVolumeForCategory:");
}

id objc_msgSend_getWarningKeys_andPlaceHolderWarnings_forOwnershipWarningFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWarningKeys:andPlaceHolderWarnings:forOwnershipWarningFlag:");
}

id objc_msgSend_getappIconLayoutBackupName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getappIconLayoutBackupName");
}

id objc_msgSend_grantCLPermission_toBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grantCLPermission:toBundleID:");
}

id objc_msgSend_grantNetworkPermission_toBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grantNetworkPermission:toBundleID:");
}

id objc_msgSend_grantPrivacyPermissions_forAppBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grantPrivacyPermissions:forAppBundleID:");
}

id objc_msgSend_grantPrivacyPermissionsForAllApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grantPrivacyPermissionsForAllApps");
}

id objc_msgSend_grantTCCPermission_forResource_toBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grantTCCPermission:forResource:toBundleID:");
}

id objc_msgSend_groupContainerPaths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupContainerPaths");
}

id objc_msgSend_groupContainerURLs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupContainerURLs");
}

id objc_msgSend_handleCompletionForDownloadRequest_withResponse_forSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCompletionForDownloadRequest:withResponse:forSession:");
}

id objc_msgSend_handleDownloadAborted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDownloadAborted:");
}

id objc_msgSend_handleDownloadFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDownloadFile:");
}

id objc_msgSend_handleDownloadPaused_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDownloadPaused:");
}

id objc_msgSend_handleEnrollmentRetryUponFirstLaunch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEnrollmentRetryUponFirstLaunch");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleForPredicate_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForPredicate:error:");
}

id objc_msgSend_handleFullScreenUIAppStateChange_withVisibility_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFullScreenUIAppStateChange:withVisibility:");
}

id objc_msgSend_handleKVStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleKVStore:");
}

id objc_msgSend_handleMessage_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleMessage:from:");
}

id objc_msgSend_handleRequest_synchronous_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRequest:synchronous:");
}

id objc_msgSend_handleRequestAsync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRequestAsync:");
}

id objc_msgSend_handleRequestSync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRequestSync:");
}

id objc_msgSend_handleSystemContainerFiles_withMetadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSystemContainerFiles:withMetadata:");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handler");
}

id objc_msgSend_hasCompletedMomentAnalysis_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasCompletedMomentAnalysis:error:");
}

id objc_msgSend_hasCompletedRestorePostProcessing_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasCompletedRestorePostProcessing:error:");
}

id objc_msgSend_hasFactoryContent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasFactoryContent");
}

id objc_msgSend_hasFlashlight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasFlashlight");
}

id objc_msgSend_hasObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasObserver:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hash");
}

id objc_msgSend_hashCheckForFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hashCheckForFile:");
}

id objc_msgSend_hashForCertificate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hashForCertificate:");
}

id objc_msgSend_heartBeatMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "heartBeatMonitor");
}

id objc_msgSend_helperAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "helperAgent");
}

id objc_msgSend_hexStringRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hexStringRepresentation");
}

id objc_msgSend_higherVersionThan_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "higherVersionThan:");
}

id objc_msgSend_hmacKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hmacKey");
}

id objc_msgSend_holdPowerAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdPowerAssertion");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "host");
}

id objc_msgSend_httpHeaders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "httpHeaders");
}

id objc_msgSend_hubCertificateIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubCertificateIdentifier");
}

id objc_msgSend_hubHostName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubHostName");
}

id objc_msgSend_hubHostNameList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubHostNameList");
}

id objc_msgSend_hubLastOnlineTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubLastOnlineTime");
}

id objc_msgSend_hubPort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubPort");
}

id objc_msgSend_hubProtocolVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubProtocolVersion");
}

id objc_msgSend_hubServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubServer");
}

id objc_msgSend_hubSuppliedSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubSuppliedSettings");
}

id objc_msgSend_hubVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hubVersion");
}

id objc_msgSend_humanReadableUpdateName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "humanReadableUpdateName");
}

id objc_msgSend_iCloudAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iCloudAccount");
}

id objc_msgSend_iCloudAccountRecoveryKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iCloudAccountRecoveryKey");
}

id objc_msgSend_iCloudAccountSyncNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iCloudAccountSyncNeeded");
}

id objc_msgSend_iOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iOS");
}

id objc_msgSend_iOSHub(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iOSHub");
}

id objc_msgSend_iTunesAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iTunesAccount");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifierFor_applePKI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifierFor:applePKI:");
}

id objc_msgSend_identityForApplicationJobLabel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identityForApplicationJobLabel:");
}

id objc_msgSend_idsDeviceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsDeviceIdentifier");
}

id objc_msgSend_idsHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsHandler");
}

id objc_msgSend_idsIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsIdentifier");
}

id objc_msgSend_idsService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsService");
}

id objc_msgSend_idsServiceQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsServiceQueue");
}

id objc_msgSend_incomingResponseIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incomingResponseIdentifier");
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "info");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init");
}

id objc_msgSend_initAppPlaceholderWithBundleName_bundleID_installType_client_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initAppPlaceholderWithBundleName:bundleID:installType:client:");
}

id objc_msgSend_initForPrimaryiCloudAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForPrimaryiCloudAccount");
}

id objc_msgSend_initFromTaskInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromTaskInfo:");
}

id objc_msgSend_initMaskValuesLookUpTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initMaskValuesLookUpTable");
}

id objc_msgSend_initServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initServer");
}

id objc_msgSend_initWithASCIIEncodedKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithASCIIEncodedKey:");
}

id objc_msgSend_initWithAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccount:");
}

id objc_msgSend_initWithAccount_termsEntries_preferPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccount:termsEntries:preferPassword:");
}

id objc_msgSend_initWithAccountStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccountStore:");
}

id objc_msgSend_initWithAccountType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccountType:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAuthenticationResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAuthenticationResults:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCDPContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCDPContext:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCellularAccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCellularAccess:");
}

id objc_msgSend_initWithCellularAccess_andFDCUpdateDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCellularAccess:andFDCUpdateDelegate:");
}

id objc_msgSend_initWithComponents_andProcessor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithComponents:andProcessor:");
}

id objc_msgSend_initWithCondition_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCondition:");
}

id objc_msgSend_initWithContentPlistFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentPlistFile:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContext_andContentCacheManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContext:andContentCacheManager:");
}

id objc_msgSend_initWithContext_andContentCacheManager_andTargetDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContext:andContentCacheManager:andTargetDevice:");
}

id objc_msgSend_initWithCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCount:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_forServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:forServerType:");
}

id objc_msgSend_initWithDefaultProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDefaultProfile");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDemoModeProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDemoModeProfile");
}

id objc_msgSend_initWithDevice_andCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDevice:andCompletion:");
}

id objc_msgSend_initWithDeviceFeatures_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDeviceFeatures:");
}

id objc_msgSend_initWithDeviceProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDeviceProperties:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_andUserHomePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:andUserHomePath:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDomainMSDCode_message_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomainMSDCode:message:");
}

id objc_msgSend_initWithDomainMSDCode_message_reason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomainMSDCode:message:reason:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithError:");
}

id objc_msgSend_initWithExplanation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithExplanation:");
}

id objc_msgSend_initWithFile_andIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFile:andIdentifier:");
}

id objc_msgSend_initWithFilePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFilePath:");
}

id objc_msgSend_initWithFireDate_interval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFireDate:interval:target:selector:userInfo:repeats:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithIdentifier_andIsInBubble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:andIsInBubble:");
}

id objc_msgSend_initWithIdentifier_andLocalizedName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:andLocalizedName:");
}

id objc_msgSend_initWithIdentifier_andPayload_usingOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:andPayload:usingOptions:");
}

id objc_msgSend_initWithIncomingOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIncomingOptions:");
}

id objc_msgSend_initWithInnerBoundary_outerBoundary_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInnerBoundary:outerBoundary:error:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithMSDRapportDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMSDRapportDevice:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithManifestData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithManifestData:");
}

id objc_msgSend_initWithMetadata_andDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMetadata:andDescriptor:");
}

id objc_msgSend_initWithMode_options_reason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMode:options:reason:");
}

id objc_msgSend_initWithName_andMethods_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:andMethods:");
}

id objc_msgSend_initWithName_andOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:andOperations:");
}

id objc_msgSend_initWithName_client_streamingZipOptions_archiveSize_diskSpaceNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:client:streamingZipOptions:archiveSize:diskSpaceNeeded:");
}

id objc_msgSend_initWithName_client_transferPath_diskSpaceNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:client:transferPath:diskSpaceNeeded:");
}

id objc_msgSend_initWithName_devicePresencePreset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:devicePresencePreset:");
}

id objc_msgSend_initWithName_grade_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:grade:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObserver:");
}

id objc_msgSend_initWithOperationGroups_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOperationGroups:");
}

id objc_msgSend_initWithOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOperations:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPhotoLibraryURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPhotoLibraryURL:");
}

id objc_msgSend_initWithPredicate_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPredicate:context:");
}

id objc_msgSend_initWithPreferencesFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPreferencesFile:");
}

id objc_msgSend_initWithProtobufData_type_isResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProtobufData:type:isResponse:");
}

id objc_msgSend_initWithQoS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQoS:");
}

id objc_msgSend_initWithRPCompanionLinkDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRPCompanionLinkDevice:");
}

id objc_msgSend_initWithRSSI_identifier_model_channel_machContinuousTimeSeconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRSSI:identifier:model:channel:machContinuousTimeSeconds:");
}

id objc_msgSend_initWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithReason:");
}

id objc_msgSend_initWithSSID_password_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSSID:password:");
}

id objc_msgSend_initWithSceneProvidingProcess_configurationIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSceneProvidingProcess:configurationIdentifier:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithSignedManifest_andOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSignedManifest:andOptions:");
}

id objc_msgSend_initWithSignedManifest_forBackgroundDownload_verifyHashBeforeStaging_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSignedManifest:forBackgroundDownload:verifyHashBeforeStaging:");
}

id objc_msgSend_initWithStartTime_endTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStartTime:endTime:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_initWithURLString_account_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithURLString:account:");
}

id objc_msgSend_initWithXPCArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithXPCArray:");
}

id objc_msgSend_initWithXPCDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithXPCDictionary:");
}

id objc_msgSend_initializeCacheWithValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeCacheWithValues:");
}

id objc_msgSend_initializeClearAppSwitcherStateForDemoMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeClearAppSwitcherStateForDemoMode");
}

id objc_msgSend_initializeSettingsFileWithDeviceValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeSettingsFileWithDeviceValues");
}

id objc_msgSend_initializeTrackerForBundle_withContentType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeTrackerForBundle:withContentType:");
}

id objc_msgSend_initializeWithOverwrite_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeWithOverwrite:");
}

id objc_msgSend_initiateBackgroundDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initiateBackgroundDownload");
}

id objc_msgSend_inputStreamWithFileAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputStreamWithFileAtPath:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_installAndWaitForSystemApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installAndWaitForSystemApps");
}

id objc_msgSend_installCachedContentForCurrentLocale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installCachedContentForCurrentLocale:");
}

id objc_msgSend_installConfigurationProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installConfigurationProfile:");
}

id objc_msgSend_installConfigurationProfileWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installConfigurationProfileWithData:");
}

id objc_msgSend_installDefaultConfigurationProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installDefaultConfigurationProfile");
}

id objc_msgSend_installError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installError");
}

id objc_msgSend_installProfileData_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installProfileData:outError:");
}

id objc_msgSend_installProvisioningProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installProvisioningProfile:");
}

id objc_msgSend_installQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installQueue");
}

id objc_msgSend_installRestrictionsConfigurationProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installRestrictionsConfigurationProfile:");
}

id objc_msgSend_installUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installUpdate:");
}

id objc_msgSend_installationOrder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installationOrder");
}

id objc_msgSend_installedApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installedApps");
}

id objc_msgSend_installedBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installedBundle");
}

id objc_msgSend_installedComponentList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installedComponentList");
}

id objc_msgSend_installedFactoryBundleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installedFactoryBundleID");
}

id objc_msgSend_installingBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installingBundle");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceName");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interval");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateAndCancel");
}

id objc_msgSend_invalidateOutgoingConnectionForDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateOutgoingConnectionForDevice:");
}

id objc_msgSend_invalidateWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateWithError:");
}

id objc_msgSend_invokeHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invokeHandler:");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAllDependentInComponentCancelled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAllDependentInComponentCancelled");
}

id objc_msgSend_isAllowedRequest_relayNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAllowedRequest:relayNeeded:");
}

id objc_msgSend_isAlmondApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAlmondApp");
}

id objc_msgSend_isBackgroundDownloadQueueEmpty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBackgroundDownloadQueueEmpty");
}

id objc_msgSend_isBetterTogetherDemo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBetterTogetherDemo");
}

id objc_msgSend_isBundleInstance_identicalWithNewBundle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBundleInstance:identicalWithNewBundle:");
}

id objc_msgSend_isCDPEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCDPEnabled");
}

id objc_msgSend_isCDPManateeAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCDPManateeAvailable");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isChangingState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isChangingState");
}

id objc_msgSend_isConfigurationProfileInstalled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isConfigurationProfileInstalled:");
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isConnected");
}

id objc_msgSend_isContainerizedComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isContainerizedComponent:");
}

id objc_msgSend_isContentFrozen(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isContentFrozen");
}

id objc_msgSend_isCoreLocationOwnedResource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCoreLocationOwnedResource:");
}

id objc_msgSend_isCriticalUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCriticalUpdate");
}

id objc_msgSend_isDDLDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDDLDevice");
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDefaultPairedDevice");
}

id objc_msgSend_isDeletable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeletable");
}

id objc_msgSend_isDemoEligible(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDemoEligible");
}

id objc_msgSend_isDemoModeOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDemoModeOn");
}

id objc_msgSend_isDeviceReachable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeviceReachable");
}

id objc_msgSend_isDiffPatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDiffPatch");
}

id objc_msgSend_isDone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDone");
}

id objc_msgSend_isDownloadComplete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDownloadComplete");
}

id objc_msgSend_isDownloadPaused(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDownloadPaused");
}

id objc_msgSend_isEarlierDateThan_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEarlierDateThan:");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEnrolled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnrolled");
}

id objc_msgSend_isEnrolled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnrolled:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToRPCompanionLinkDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToRPCompanionLinkDevice:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isExpired:");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFileURL");
}

id objc_msgSend_isHubCertificatePinnedTo_applePKI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isHubCertificatePinnedTo:applePKI:");
}

id objc_msgSend_isICDPEnabledForDSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isICDPEnabledForDSID:");
}

id objc_msgSend_isInBubble(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInBubble");
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInstalled");
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInternalBuild");
}

id objc_msgSend_isItemApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemApp:");
}

id objc_msgSend_isItemBackup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemBackup:");
}

id objc_msgSend_isItemBaseBackup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemBaseBackup:");
}

id objc_msgSend_isItemConfigurationProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemConfigurationProfile:");
}

id objc_msgSend_isItemConfigurationProfileBackup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemConfigurationProfileBackup:");
}

id objc_msgSend_isItemDeviceSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemDeviceSettings:");
}

id objc_msgSend_isItemProvisioningProfileBackup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemProvisioningProfileBackup:");
}

id objc_msgSend_isItemStandAlonePackage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemStandAlonePackage:");
}

id objc_msgSend_isItemSystemAppData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemSystemAppData:");
}

id objc_msgSend_isItemSystemContainerBackup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemSystemContainerBackup:");
}

id objc_msgSend_isLaterDateThan_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLaterDateThan:");
}

id objc_msgSend_isLeaf(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLeaf");
}

id objc_msgSend_isLogicSync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLogicSync");
}

id objc_msgSend_isMacApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMacApp:");
}

id objc_msgSend_isManateeAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isManateeAvailable:");
}

id objc_msgSend_isManualSigning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isManualSigning:");
}

id objc_msgSend_isNPIDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNPIDevice");
}

id objc_msgSend_isNetworkOwnedResource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkOwnedResource:");
}

id objc_msgSend_isOSUpdateInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOSUpdateInProgress");
}

id objc_msgSend_isOfflineMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOfflineMode");
}

id objc_msgSend_isPOSDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPOSDevice");
}

id objc_msgSend_isPasscodeModificationAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPasscodeModificationAllowed");
}

id objc_msgSend_isPasscodeSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPasscodeSet");
}

id objc_msgSend_isPlaceholder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPlaceholder");
}

id objc_msgSend_isPost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPost");
}

id objc_msgSend_isPressDemoDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPressDemoDevice");
}

id objc_msgSend_isPressDemoModeEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPressDemoModeEnabled");
}

id objc_msgSend_isPrimaryBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrimaryBundle");
}

id objc_msgSend_isProfileInstalledWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isProfileInstalledWithIdentifier:completion:");
}

id objc_msgSend_isProvisionedForDataclass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isProvisionedForDataclass:");
}

id objc_msgSend_isProvisioningProfileInstalled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isProvisioningProfileInstalled:");
}

id objc_msgSend_isReadableFileAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isReadableFileAtPath:");
}

id objc_msgSend_isRecoveryKeyAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRecoveryKeyAvailable:");
}

id objc_msgSend_isRecoveryKeyAvailableWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRecoveryKeyAvailableWithError:");
}

id objc_msgSend_isRoot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRoot");
}

id objc_msgSend_isSenderReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSenderReady");
}

id objc_msgSend_isStateKnown(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isStateKnown");
}

id objc_msgSend_isStoreOpenNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isStoreOpenNow");
}

id objc_msgSend_isSystemContainerPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSystemContainerPath");
}

id objc_msgSend_isSystemContainerShared(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSystemContainerShared");
}

id objc_msgSend_isTccOwnedResource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTccOwnedResource:");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValid");
}

id objc_msgSend_isValidDataContainerFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValidDataContainerFile:");
}

id objc_msgSend_isValidForOriginServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValidForOriginServer:");
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_isValidProductList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValidProductList:");
}

id objc_msgSend_isValidWiFiSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValidWiFiSettings:");
}

id objc_msgSend_isVerifiedDemoDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVerifiedDemoDevice");
}

id objc_msgSend_isVerifiedPOSDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVerifiedPOSDevice");
}

id objc_msgSend_isVersion_lowerThan_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVersion:lowerThan:");
}

id objc_msgSend_itemBeingInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "itemBeingInstalled");
}

id objc_msgSend_justBootUp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "justBootUp");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key");
}

id objc_msgSend_keyPathForBatteryLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForBatteryLevel");
}

id objc_msgSend_keyPathForBatteryStateDataDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForBatteryStateDataDictionary");
}

id objc_msgSend_keyPathForForegroundApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForForegroundApp");
}

id objc_msgSend_keyPathForInUseStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForInUseStatus");
}

id objc_msgSend_keyPathForLastUseDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForLastUseDate");
}

id objc_msgSend_kickOffBackgroundDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kickOffBackgroundDownload");
}

id objc_msgSend_kickOffCachedBundleInstall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kickOffCachedBundleInstall");
}

id objc_msgSend_knownNetworkProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knownNetworkProfile");
}

id objc_msgSend_knownNetworkProfilesWithProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knownNetworkProfilesWithProperties:");
}

id objc_msgSend_language(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "language");
}

id objc_msgSend_languageIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "languageIdentifier");
}

id objc_msgSend_languageIdentifiersForMetadataList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "languageIdentifiersForMetadataList:");
}

id objc_msgSend_lastBundleUpdateDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastBundleUpdateDate");
}

id objc_msgSend_lastDownloadedByte(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastDownloadedByte");
}

id objc_msgSend_lastJoinedAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastJoinedAt");
}

id objc_msgSend_lastJoinedWiFiNetworksProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastJoinedWiFiNetworksProfile");
}

id objc_msgSend_lastMigrationVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastMigrationVersion");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lastRebootTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastRebootTime");
}

id objc_msgSend_lastSeenDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSeenDate");
}

id objc_msgSend_lastSettingsUpdatedTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSettingsUpdatedTime");
}

id objc_msgSend_lastShallowRefreshTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastShallowRefreshTime");
}

id objc_msgSend_lastSnapshotRevertTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSnapshotRevertTime");
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_latestUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latestUpdate");
}

id objc_msgSend_latitude(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latitude");
}

id objc_msgSend_launch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launch");
}

id objc_msgSend_launchApp_withOptions_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchApp:withOptions:outError:");
}

id objc_msgSend_launchDaemon(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchDaemon");
}

id objc_msgSend_launchFullScreenUI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchFullScreenUI");
}

id objc_msgSend_launchFullScreenUI_ios(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchFullScreenUI_ios");
}

id objc_msgSend_launchPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchPath");
}

id objc_msgSend_launchReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchReason");
}

id objc_msgSend_launchRequest_toSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchRequest:toSession:");
}

id objc_msgSend_launchTaskWithInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchTaskWithInfo:");
}

id objc_msgSend_launchTaskWithRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchTaskWithRequest:");
}

id objc_msgSend_launchType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchType");
}

id objc_msgSend_leafCertificate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leafCertificate");
}

id objc_msgSend_leafOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leafOperations");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_limitConcurrentRequests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limitConcurrentRequests");
}

id objc_msgSend_listenForIncomingEventMessageOfID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "listenForIncomingEventMessageOfID:");
}

id objc_msgSend_listenForIncomingRequestMessageOfID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "listenForIncomingRequestMessageOfID:");
}

id objc_msgSend_listenerRPClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "listenerRPClient");
}

id objc_msgSend_load(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "load");
}

id objc_msgSend_loadAppPatchesList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadAppPatchesList");
}

id objc_msgSend_loadBundles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadBundles");
}

id objc_msgSend_loadConfigurationsWithCompletionQueue_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadConfigurationsWithCompletionQueue:handler:");
}

id objc_msgSend_loadFromFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadFromFile");
}

id objc_msgSend_loadManifestMetadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadManifestMetadata:");
}

id objc_msgSend_loadProvisioningProfileFromFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadProvisioningProfileFromFile:");
}

id objc_msgSend_loadStashedSwitcherModelFromPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadStashedSwitcherModelFromPath:");
}

id objc_msgSend_loadWiFiSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadWiFiSettingsFromPreferences");
}

id objc_msgSend_localCredential(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localCredential");
}

id objc_msgSend_localCredentialForOriginServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localCredentialForOriginServer:");
}

id objc_msgSend_localDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localDevice");
}

id objc_msgSend_localHubError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localHubError");
}

id objc_msgSend_localHubFailureReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localHubFailureReason");
}

id objc_msgSend_localHubReachable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localHubReachable");
}

id objc_msgSend_localHubURLSchema(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localHubURLSchema");
}

id objc_msgSend_localSecret(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localSecret");
}

id objc_msgSend_localURLList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localURLList");
}

id objc_msgSend_localWakingRegistrationWithIdentifier_contextualPredicate_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localWakingRegistrationWithIdentifier:contextualPredicate:callback:");
}

id objc_msgSend_localizationTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizationTable");
}

id objc_msgSend_localizations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizations");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedFailureReason");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedStringForKey_value_table_localization_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedStringForKey:value:table:localization:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lock");
}

id objc_msgSend_lockSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockSnapshot");
}

id objc_msgSend_lockWhenCondition_beforeDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockWhenCondition:beforeDate:");
}

id objc_msgSend_logCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logCache");
}

id objc_msgSend_logDownloadTaskLaunch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logDownloadTaskLaunch:");
}

id objc_msgSend_logFP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logFP");
}

id objc_msgSend_logFilePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logFilePath");
}

id objc_msgSend_logMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logMessage:");
}

id objc_msgSend_logWithFormat_andArgs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logWithFormat:andArgs:");
}

id objc_msgSend_logicSync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logicSync");
}

id objc_msgSend_loginID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loginID");
}

id objc_msgSend_logsToWrite(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logsToWrite");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longValue");
}

id objc_msgSend_longitude(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longitude");
}

id objc_msgSend_lookupSystemContainerPathUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lookupSystemContainerPathUUID");
}

id objc_msgSend_lostClientConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lostClientConnection:");
}

id objc_msgSend_lowerVersionThan_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowerVersionThan:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_macOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "macOS");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainQueue");
}

id objc_msgSend_manageDataVolume_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manageDataVolume:");
}

id objc_msgSend_manageDemoVolume_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manageDemoVolume:");
}

id objc_msgSend_manageDeviceSnapshot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manageDeviceSnapshot:");
}

id objc_msgSend_manageUserVolume_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manageUserVolume:");
}

id objc_msgSend_manageUserVolume_forUser_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manageUserVolume:forUser:");
}

id objc_msgSend_managedStoreDemoMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedStoreDemoMode");
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manager");
}

id objc_msgSend_manifestAndFileDownloadInfoPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manifestAndFileDownloadInfoPath");
}

id objc_msgSend_manifestInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manifestInfo");
}

id objc_msgSend_manifestPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manifestPath");
}

id objc_msgSend_manifestVerifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manifestVerifier");
}

id objc_msgSend_manifestVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manifestVersion");
}

id objc_msgSend_manualUpdateMode_allowChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manualUpdateMode:allowChange:");
}

id objc_msgSend_markAsNotDemo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markAsNotDemo:");
}

id objc_msgSend_markAsNotDemoWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markAsNotDemoWithCompletion:");
}

id objc_msgSend_markBundleInProgressAsBundleCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markBundleInProgressAsBundleCompleted");
}

id objc_msgSend_markBundleInProgressAsCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markBundleInProgressAsCompleted");
}

id objc_msgSend_markContentInstallingInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markContentInstallingInstalled");
}

id objc_msgSend_maskValuesLookUpTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maskValuesLookUpTable");
}

id objc_msgSend_masterManifest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "masterManifest");
}

id objc_msgSend_matchExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchExtension");
}

id objc_msgSend_matchSigningIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchSigningIdentifier");
}

id objc_msgSend_matchedLanguagesFromAvailableLanguages_forPreferredLanguages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchedLanguagesFromAvailableLanguages:forPreferredLanguages:");
}

id objc_msgSend_maxConcurrentRequests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxConcurrentRequests");
}

id objc_msgSend_maxRetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxRetry");
}

id objc_msgSend_maxStoreResults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxStoreResults");
}

id objc_msgSend_mergedBackupManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergedBackupManifest:");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "message");
}

id objc_msgSend_messageHandlerTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageHandlerTable");
}

id objc_msgSend_messageQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageQueue");
}

id objc_msgSend_metadataForFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataForFile:");
}

id objc_msgSend_metadataWithLanugageIdentifier_fromList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataWithLanugageIdentifier:fromList:");
}

id objc_msgSend_methodForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "methodForSelector:");
}

id objc_msgSend_methodSelectors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "methodSelectors");
}

id objc_msgSend_migrateCellularSupportFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrateCellularSupportFlag");
}

id objc_msgSend_migrateDataWithBlockingUI_startMigration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrateDataWithBlockingUI:startMigration:");
}

id objc_msgSend_migrateDemoDeviceToDemoVolume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrateDemoDeviceToDemoVolume");
}

id objc_msgSend_migrateNvramToDemoVolume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrateNvramToDemoVolume");
}

id objc_msgSend_migratePreferenceAndWifiSettingsToDemoVolume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migratePreferenceAndWifiSettingsToDemoVolume");
}

id objc_msgSend_migratePreferencesFromFactoryDevicesIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migratePreferencesFromFactoryDevicesIfNeeded");
}

id objc_msgSend_migratePreferencesFromLegacyDevicesIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migratePreferencesFromLegacyDevicesIfNeeded");
}

id objc_msgSend_migrationDone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "migrationDone");
}

id objc_msgSend_minOSVersionAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minOSVersionAvailable");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_mockAccountSettingsFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mockAccountSettingsFile");
}

id objc_msgSend_mockForBetterTogetherDemo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mockForBetterTogetherDemo");
}

id objc_msgSend_mockOSUpdateRequestFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mockOSUpdateRequestFile");
}

id objc_msgSend_mockPeerProtocolVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mockPeerProtocolVersion");
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mode");
}

id objc_msgSend_modeLock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modeLock");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "model");
}

id objc_msgSend_modificationDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modificationDate");
}

id objc_msgSend_monitorDidUpdateRegionOfNearbyObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorDidUpdateRegionOfNearbyObject:");
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorWithConfiguration:");
}

id objc_msgSend_month(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "month");
}

id objc_msgSend_moveFilesToFinalDst_finalPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveFilesToFinalDst:finalPath:");
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_moveStagingToFinal_finalPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveStagingToFinal:finalPath:");
}

id objc_msgSend_moveStagingsToFinal_finalPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveStagingsToFinal:finalPath:");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableBytes");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_nandSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nandSize");
}

id objc_msgSend_nearbyObjectMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nearbyObjectMonitor");
}

id objc_msgSend_nearbyObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nearbyObjects");
}

id objc_msgSend_needUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "needUpdate");
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkName");
}

id objc_msgSend_networkOwnedResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkOwnedResources");
}

id objc_msgSend_newDateByAddingOneDay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newDateByAddingOneDay");
}

id objc_msgSend_newDateByAddingOneWeek(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newDateByAddingOneWeek");
}

id objc_msgSend_newHandleWithDefinition_configurationContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newHandleWithDefinition:configurationContext:");
}

id objc_msgSend_nextContentRevertDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextContentRevertDate");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nextRetryTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextRetryTime");
}

id objc_msgSend_nextStoreClosedDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextStoreClosedDate");
}

id objc_msgSend_nextStoreOpenDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextStoreOpenDate");
}

id objc_msgSend_nextTry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextTry");
}

id objc_msgSend_niSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "niSession");
}

id objc_msgSend_nonContainerizedContentRoots(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nonContainerizedContentRoots");
}

id objc_msgSend_notifyBluetoothSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyBluetoothSample:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "now");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "null");
}

id objc_msgSend_numConcurrentRequests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numConcurrentRequests");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objCType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objCType");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForInfoDictionaryKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForInfoDictionaryKey:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:ofType:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_obliterate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliterate");
}

id objc_msgSend_obliterateDeviceWithAdminCredential_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliterateDeviceWithAdminCredential:");
}

id objc_msgSend_observer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "observer");
}

id objc_msgSend_observers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "observers");
}

id objc_msgSend_offlineDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "offlineDuration");
}

id objc_msgSend_offsetInFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "offsetInFile");
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "open");
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openApplication:withOptions:completion:");
}

id objc_msgSend_openDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openDate");
}

id objc_msgSend_openSessionsFromBookmark_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openSessionsFromBookmark:");
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operatingSystemVersion");
}

id objc_msgSend_operation_didProduceNewOperation_forRollback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operation:didProduceNewOperation:forRollback:");
}

id objc_msgSend_operationCanceled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationCanceled");
}

id objc_msgSend_operationDidStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationDidStart:");
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationQueue");
}

id objc_msgSend_operationWillFinish_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationWillFinish:");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operations");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "options");
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "optionsWithDictionary:");
}

id objc_msgSend_originServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originServer");
}

id objc_msgSend_originServerForApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originServerForApp:");
}

id objc_msgSend_originServerForBackupManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originServerForBackupManifest:");
}

id objc_msgSend_osVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "osVersion");
}

id objc_msgSend_osVersionStr(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "osVersionStr");
}

id objc_msgSend_outData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outData");
}

id objc_msgSend_outputDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputDevices");
}

id objc_msgSend_overrideHmacKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideHmacKey:");
}

id objc_msgSend_packageVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "packageVersion");
}

id objc_msgSend_packetLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "packetLoss");
}

id objc_msgSend_paired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paired");
}

id objc_msgSend_pairingCredentials(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingCredentials");
}

id objc_msgSend_pairingHandlers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingHandlers");
}

id objc_msgSend_pairingManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingManager");
}

id objc_msgSend_pairingMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingMode");
}

id objc_msgSend_pairingPassword(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingPassword");
}

id objc_msgSend_parallelInstallQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parallelInstallQueue");
}

id objc_msgSend_parallelProcessing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parallelProcessing");
}

id objc_msgSend_parseBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseBundleID:");
}

id objc_msgSend_parseInstallationOrder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseInstallationOrder");
}

id objc_msgSend_parseLocaleCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseLocaleCode");
}

id objc_msgSend_parseNonContainerizedContentRootSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseNonContainerizedContentRootSet");
}

id objc_msgSend_parseRawStoreHours_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseRawStoreHours:");
}

id objc_msgSend_parseResponseForError_andPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseResponseForError:andPayload:");
}

id objc_msgSend_parseResponseHeader_statusCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseResponseHeader:statusCode:");
}

id objc_msgSend_parseSectionForContentRoot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseSectionForContentRoot:");
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "password");
}

id objc_msgSend_patchBackupFolderInStaging_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "patchBackupFolderInStaging:");
}

id objc_msgSend_patchDomainsPlist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "patchDomainsPlist:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_path_inSuperSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path:inSuperSet:");
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathComponents");
}

id objc_msgSend_pathController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathController");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathExtension");
}

id objc_msgSend_pathForDummyPreferenceFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForDummyPreferenceFile");
}

id objc_msgSend_pathForResource_ofType_inDirectory_forLocalization_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForResource:ofType:inDirectory:forLocalization:");
}

id objc_msgSend_pathRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathRules");
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_pauseContentUpdateOnError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pauseContentUpdateOnError");
}

id objc_msgSend_pauseProcessing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pauseProcessing");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payload");
}

id objc_msgSend_pendingComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingComponents");
}

id objc_msgSend_pendingMessage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingMessage");
}

id objc_msgSend_pendingRequests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingRequests");
}

id objc_msgSend_percentComplete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "percentComplete");
}

id objc_msgSend_percentageProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "percentageProgress");
}

id objc_msgSend_performCryptoWithSecretKeyOnData_isDecipher_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performCryptoWithSecretKeyOnData:isDecipher:");
}

id objc_msgSend_performRequestWithHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performRequestWithHandler:");
}

id objc_msgSend_performScanWithParameters_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performScanWithParameters:error:");
}

id objc_msgSend_performiCloudAccountSignInWithContext_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performiCloudAccountSignInWithContext:outError:");
}

id objc_msgSend_performiCloudAccountSignOutWithContext_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performiCloudAccountSignOutWithContext:outError:");
}

id objc_msgSend_performiTunesAccountSignInWithContext_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performiTunesAccountSignInWithContext:outError:");
}

id objc_msgSend_performiTunesAccountSignOutWithContext_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performiTunesAccountSignOutWithContext:outError:");
}

id objc_msgSend_phase(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "phase");
}

id objc_msgSend_ping_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ping:");
}

id objc_msgSend_pingAndProcess_waitForCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingAndProcess:waitForCompletion:");
}

id objc_msgSend_pingInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingInterval");
}

id objc_msgSend_pingIntervalToUse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingIntervalToUse");
}

id objc_msgSend_pingTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingTimer");
}

id objc_msgSend_pingWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingWithType:");
}

id objc_msgSend_pipe(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipe");
}

id objc_msgSend_planItemsShouldUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "planItemsShouldUpdate:");
}

id objc_msgSend_platformType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "platformType");
}

id objc_msgSend_plugInContainerPaths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugInContainerPaths");
}

id objc_msgSend_plugInKitPlugins(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugInKitPlugins");
}

id objc_msgSend_pluginIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginIdentifier");
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pointerValue");
}

id objc_msgSend_pollingQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pollingQueue");
}

id objc_msgSend_populateCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateCache");
}

id objc_msgSend_populateLookupTableUsingDeviceInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateLookupTableUsingDeviceInfo:");
}

id objc_msgSend_populateStoreHourFromDefaultSettingsForDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateStoreHourFromDefaultSettingsForDate:");
}

id objc_msgSend_populateStoreHourFromHubSuppliedSettingsForDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateStoreHourFromHubSuppliedSettingsForDate:");
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "port");
}

id objc_msgSend_postData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postData");
}

id objc_msgSend_postFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postFile");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_postNotificationName_object_userInfo_deliverImmediately_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationName:object:userInfo:deliverImmediately:");
}

id objc_msgSend_posterObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "posterObserver");
}

id objc_msgSend_preInstalledContent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preInstalledContent");
}

id objc_msgSend_predicateForChangeAtKeyPaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForChangeAtKeyPaths:");
}

id objc_msgSend_predicateMatchingBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingBundleIdentifier:");
}

id objc_msgSend_predicateMatchingProcessTypeApplication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingProcessTypeApplication");
}

id objc_msgSend_preferencesFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferencesFile");
}

id objc_msgSend_preferencesFileExists(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferencesFileExists");
}

id objc_msgSend_preferencesFilePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferencesFilePath");
}

id objc_msgSend_preferencesFileUrl(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferencesFileUrl");
}

id objc_msgSend_preferredDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredDescriptor");
}

id objc_msgSend_preferredLanguages(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredLanguages");
}

id objc_msgSend_preferredLocalizationsFromArray_forPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredLocalizationsFromArray:forPreferences:");
}

id objc_msgSend_preferredStoreID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredStoreID");
}

id objc_msgSend_prepareBundleInfoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareBundleInfoDictionary");
}

id objc_msgSend_prepareCAData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareCAData:");
}

id objc_msgSend_prepareForExtraction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareForExtraction:");
}

id objc_msgSend_prepareHubOfflineDurationString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareHubOfflineDurationString");
}

id objc_msgSend_prepareQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareQueue");
}

id objc_msgSend_prepareToWrite_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareToWrite:");
}

id objc_msgSend_prepareWorkDirectory_writableByNonRoot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareWorkDirectory:writableByNonRoot:");
}

id objc_msgSend_preserveBTFiles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preserveBTFiles");
}

id objc_msgSend_preserveBTPairingRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preserveBTPairingRecord");
}

id objc_msgSend_preserveBluetoothFileToShelter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preserveBluetoothFileToShelter:");
}

id objc_msgSend_preservePairedPeersData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preservePairedPeersData");
}

id objc_msgSend_preserveSecondPartyAppDataToShelter_withReturnErrorMsg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preserveSecondPartyAppDataToShelter:withReturnErrorMsg:");
}

id objc_msgSend_pressDemoMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pressDemoMode");
}

id objc_msgSend_pressDemoTestTarget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pressDemoTestTarget");
}

id objc_msgSend_pressDemoXCTestProductsPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pressDemoXCTestProductsPath");
}

id objc_msgSend_prettyPrintSUDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prettyPrintSUDescriptor:");
}

id objc_msgSend_previousiOSBuild(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "previousiOSBuild");
}

id objc_msgSend_pricingAppUpdateDeferred(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pricingAppUpdateDeferred");
}

id objc_msgSend_print(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "print");
}

id objc_msgSend_printAllKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printAllKeys:");
}

id objc_msgSend_printBMAppInfocusEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printBMAppInfocusEvent:");
}

id objc_msgSend_privateKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateKey");
}

id objc_msgSend_process(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "process");
}

id objc_msgSend_process_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "process:");
}

id objc_msgSend_processCoreDuetCallBack(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processCoreDuetCallBack");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processNewFeatureFlags_oldFeatureFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processNewFeatureFlags:oldFeatureFlags:");
}

id objc_msgSend_processRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processRequest:");
}

id objc_msgSend_processServerRangeResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processServerRangeResponse:");
}

id objc_msgSend_processedContainers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processedContainers");
}

id objc_msgSend_produceNewDependentOperation_forRollback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "produceNewDependentOperation:forRollback:");
}

id objc_msgSend_productBuildVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "productBuildVersion");
}

id objc_msgSend_productSystemName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "productSystemName");
}

id objc_msgSend_productType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "productType");
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "productVersion");
}

id objc_msgSend_profileIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileIdentifier");
}

id objc_msgSend_profilePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profilePath");
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "progress");
}

id objc_msgSend_propertyList_isValidForFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyList:isValidForFormat:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_propertyListWithStream_options_format_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyListWithStream:options:format:error:");
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "protectionSpace");
}

id objc_msgSend_providerDidDiscoverNewPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerDidDiscoverNewPeer:");
}

id objc_msgSend_providerDidLoseExistingPeerOfID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerDidLoseExistingPeerOfID:");
}

id objc_msgSend_providerDidUpdateDeviceInfoOnPeerOfID_withNewProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerDidUpdateDeviceInfoOnPeerOfID:withNewProperties:");
}

id objc_msgSend_pseudoContentRootPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pseudoContentRootPath");
}

id objc_msgSend_publicIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publicIdentifier");
}

id objc_msgSend_publisher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publisher");
}

id objc_msgSend_purgeDownload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purgeDownload:");
}

id objc_msgSend_purged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purged");
}

id objc_msgSend_pushTestEvent_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushTestEvent:ofType:");
}

id objc_msgSend_pushTestLog_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushTestLog:");
}

id objc_msgSend_pushToTestLog_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushToTestLog:");
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "query");
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_queuedPingType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queuedPingType");
}

id objc_msgSend_quitBackgroundDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quitBackgroundDownload");
}

id objc_msgSend_quitHelper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quitHelper");
}

id objc_msgSend_rOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rOS");
}

id objc_msgSend_raise(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "raise");
}

id objc_msgSend_raiseInvalidProductListExceptionWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "raiseInvalidProductListExceptionWithReason:");
}

id objc_msgSend_raiseInvalidPropertyListObjectExceptionForObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "raiseInvalidPropertyListObjectExceptionForObject:");
}

id objc_msgSend_rangeOfFirstMatchInString_options_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfFirstMatchInString:options:range:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeValue");
}

id objc_msgSend_rawDataKeyMapping(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rawDataKeyMapping");
}

id objc_msgSend_rawTimingData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rawTimingData");
}

id objc_msgSend_reachabilityLastUpdatedTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reachabilityLastUpdatedTime");
}

id objc_msgSend_reachable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reachable");
}

id objc_msgSend_read_maxLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "read:maxLength:");
}

id objc_msgSend_readDataToEndOfFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readDataToEndOfFile");
}

id objc_msgSend_readDataUpToLength_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readDataUpToLength:error:");
}

id objc_msgSend_readManifestFromFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readManifestFromFile:");
}

id objc_msgSend_readNVRam_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readNVRam:");
}

id objc_msgSend_readPlistFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readPlistFile:");
}

id objc_msgSend_reboot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reboot");
}

id objc_msgSend_rebootDelayForStaging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rebootDelayForStaging");
}

id objc_msgSend_rebootForStage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rebootForStage:");
}

id objc_msgSend_rebootWithSnapshotRevertForStage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rebootWithSnapshotRevertForStage:");
}

id objc_msgSend_receivedCompletionNotice_fromRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedCompletionNotice:fromRequest:");
}

id objc_msgSend_receivedHeartBeat_fromRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedHeartBeat:fromRequest:");
}

id objc_msgSend_receivedOtherMessages_fromRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedOtherMessages:fromRequest:");
}

id objc_msgSend_receivedUpdateRequest_fromRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedUpdateRequest:fromRequest:");
}

id objc_msgSend_recordDownloadedBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordDownloadedBytes");
}

id objc_msgSend_recoveryKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recoveryKey");
}

id objc_msgSend_redirected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "redirected");
}

id objc_msgSend_reducedKeyList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reducedKeyList");
}

id objc_msgSend_refreshDevicePropertiesUsingProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshDevicePropertiesUsingProperties:");
}

id objc_msgSend_refreshStoreHoursManagerUsingSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshStoreHoursManagerUsingSettings");
}

id objc_msgSend_regionCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "regionCode");
}

id objc_msgSend_registerCAHearbeatActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerCAHearbeatActivity");
}

id objc_msgSend_registerCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerCallback:");
}

id objc_msgSend_registerDemoUpdateStatusDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerDemoUpdateStatusDelegate:");
}

id objc_msgSend_registerEntitlementNotificationHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerEntitlementNotificationHandler");
}

id objc_msgSend_registerEventID_options_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerEventID:options:handler:");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerRequestID:options:handler:");
}

id objc_msgSend_registrationInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registrationInfo");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_releaseAppTerminationAssertion_forApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseAppTerminationAssertion:forApp:");
}

id objc_msgSend_releaseType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseType");
}

id objc_msgSend_reload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reload");
}

id objc_msgSend_remoteAlertHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteAlertHandle");
}

id objc_msgSend_remoteCredential(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteCredential");
}

id objc_msgSend_remoteCredentialForOriginServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteCredentialForOriginServer:");
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxy");
}

id objc_msgSend_remoteURLList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteURLList");
}

id objc_msgSend_removableComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removableComponents");
}

id objc_msgSend_removeAccount_withDataclassActions_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAccount:withDataclassActions:completion:");
}

id objc_msgSend_removeAccounts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAccounts:");
}

id objc_msgSend_removeAllExtendedAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllExtendedAttributes:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAppDiffPatchFileForSourceAppUID_targetAppUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAppDiffPatchFileForSourceAppUID:targetAppUID:");
}

id objc_msgSend_removeBlocklistedItemFromSection_withName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeBlocklistedItemFromSection:withName:");
}

id objc_msgSend_removeBluetoothPairingRecordIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeBluetoothPairingRecordIfNeeded");
}

id objc_msgSend_removeBundleFromPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeBundleFromPreferences:");
}

id objc_msgSend_removeFileAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFileAtPath:");
}

id objc_msgSend_removeFromRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFromRunLoop:forMode:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeKeyFromPreferenceFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeKeyFromPreferenceFile:");
}

id objc_msgSend_removeKnownNetworkProfile_reason_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeKnownNetworkProfile:reason:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeOperations");
}

id objc_msgSend_removePairedPeer_options_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePairedPeer:options:completion:");
}

id objc_msgSend_removePairedPeer_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePairedPeer:withCompletion:");
}

id objc_msgSend_removeProfileWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeProfileWithIdentifier:");
}

id objc_msgSend_removeRouteToSystemMusicForSpeaker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeRouteToSystemMusicForSpeaker");
}

id objc_msgSend_removeSessionTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeSessionTask:");
}

id objc_msgSend_removeTemporaryPasscodeIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeTemporaryPasscodeIfNeeded");
}

id objc_msgSend_removeWorkDirectories_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeWorkDirectories:");
}

id objc_msgSend_removeWorkDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeWorkDirectory:");
}

id objc_msgSend_renameBundleInPrgressToBundleInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renameBundleInPrgressToBundleInstalled");
}

id objc_msgSend_renewRPCompanionLinkDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renewRPCompanionLinkDevice:");
}

id objc_msgSend_reportBundleInstallCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBundleInstallCompleted");
}

id objc_msgSend_reportCachingHubFailed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportCachingHubFailed");
}

id objc_msgSend_reportDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportDone:");
}

id objc_msgSend_reportError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportError:");
}

id objc_msgSend_reportS3ServerFailed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportS3ServerFailed");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "request");
}

id objc_msgSend_requestComplete_withResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestComplete:withResponse:");
}

id objc_msgSend_requestEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestEnd");
}

id objc_msgSend_requestEndDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestEndDate");
}

id objc_msgSend_requestFullScreenUI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestFullScreenUI");
}

id objc_msgSend_requestInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestInfo");
}

id objc_msgSend_requestPerSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestPerSession");
}

id objc_msgSend_requestStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestStart");
}

id objc_msgSend_requestStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestStartDate");
}

id objc_msgSend_requestStr(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestStr");
}

id objc_msgSend_requestTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestTokenForTopic:identifier:");
}

id objc_msgSend_requestWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_requiredDeletableSystemApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiredDeletableSystemApps");
}

id objc_msgSend_resetCDP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCDP");
}

id objc_msgSend_resetData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetData");
}

id objc_msgSend_resetExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetExtension");
}

id objc_msgSend_resetFileHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetFileHandle");
}

id objc_msgSend_resetSystemTimeCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetSystemTimeCache");
}

id objc_msgSend_resetTrackerForBundleType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetTrackerForBundleType:");
}

id objc_msgSend_resetWithRequest_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetWithRequest:completion:");
}

id objc_msgSend_resourceFetchType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceFetchType");
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "response");
}

id objc_msgSend_responseEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseEnd");
}

id objc_msgSend_responseEndDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseEndDate");
}

id objc_msgSend_responseHandlers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseHandlers");
}

id objc_msgSend_responseStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseStart");
}

id objc_msgSend_responseStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseStartDate");
}

id objc_msgSend_restartBluetooth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restartBluetooth");
}

id objc_msgSend_restartMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restartMonitor");
}

id objc_msgSend_restoreAppDataAttributesUnder_containerType_identifier_manifestUID_deviceUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreAppDataAttributesUnder:containerType:identifier:manifestUID:deviceUID:");
}

id objc_msgSend_restoreBTPairingRecordIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreBTPairingRecordIfNeeded");
}

id objc_msgSend_restoreBackupAttributesUnder_range_manifestUID_deviceUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreBackupAttributesUnder:range:manifestUID:deviceUID:");
}

id objc_msgSend_restoreDeviceLanguageAndRegionIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreDeviceLanguageAndRegionIfNeeded");
}

id objc_msgSend_restorePairedPeersDataIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restorePairedPeersDataIfNeeded");
}

id objc_msgSend_restoreSavedDeviceSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreSavedDeviceSettings");
}

id objc_msgSend_restoreSystemContainerUUIDPathsInDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreSystemContainerUUIDPathsInDict:");
}

id objc_msgSend_restoreWallpaperSettingsIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreWallpaperSettingsIfNeeded");
}

id objc_msgSend_restored(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restored");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "result");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_resumeProcessing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumeProcessing");
}

id objc_msgSend_retransmitBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retransmitBytes");
}

id objc_msgSend_retrieveAndPopulateBundleInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrieveAndPopulateBundleInfo:");
}

id objc_msgSend_retrieveDataBlob_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrieveDataBlob:");
}

id objc_msgSend_retrieveLegacyContentnIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrieveLegacyContentnIdentifier:");
}

id objc_msgSend_retrieveObjectFromPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrieveObjectFromPreferences:");
}

id objc_msgSend_retrieveSignedManifest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrieveSignedManifest");
}

id objc_msgSend_retryAfter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retryAfter");
}

id objc_msgSend_retryAttempts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retryAttempts");
}

id objc_msgSend_retryCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retryCount");
}

id objc_msgSend_retryEnrollmentWithHub_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retryEnrollmentWithHub:");
}

id objc_msgSend_retryLeft(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retryLeft");
}

id objc_msgSend_retrySessionTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrySessionTask:");
}

id objc_msgSend_retryTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retryTimer");
}

id objc_msgSend_retryable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retryable");
}

id objc_msgSend_retryableComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retryableComponents");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_revertDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "revertDate");
}

id objc_msgSend_revertSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "revertSnapshot");
}

id objc_msgSend_revokeCLPermissionForBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "revokeCLPermissionForBundleID:");
}

id objc_msgSend_revokeNetworkPermissionForBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "revokeNetworkPermissionForBundleID:");
}

id objc_msgSend_revokePrivacyPermissions_forAppBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "revokePrivacyPermissions:forAppBundleID:");
}

id objc_msgSend_revokePrivacyPermissionsForAllApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "revokePrivacyPermissionsForAllApps");
}

id objc_msgSend_revokeTCCPermissionForResource_toBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "revokeTCCPermissionForResource:toBundleID:");
}

id objc_msgSend_rollOverCoreAnalyticsLogs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rollOverCoreAnalyticsLogs");
}

id objc_msgSend_rollback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rollback");
}

id objc_msgSend_rollbackOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rollbackOperations");
}

id objc_msgSend_rootFileSystemPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rootFileSystemPath");
}

id objc_msgSend_rootOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rootOperations");
}

id objc_msgSend_rootPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rootPath");
}

id objc_msgSend_rpClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rpClient");
}

id objc_msgSend_rpDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rpDevice");
}

id objc_msgSend_rpDeviceAdvertiser(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rpDeviceAdvertiser");
}

id objc_msgSend_rpDeviceExplorer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rpDeviceExplorer");
}

id objc_msgSend_rpLocalDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rpLocalDevice");
}

id objc_msgSend_rpMessageHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rpMessageHandler");
}

id objc_msgSend_rpServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rpServer");
}

id objc_msgSend_rpcFetchAndProcessChanges_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rpcFetchAndProcessChanges:reply:");
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssi");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "run");
}

id objc_msgSend_runAppLayoutSecurityCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runAppLayoutSecurityCheck:");
}

id objc_msgSend_runCleanUpForBetterTogetherDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runCleanUpForBetterTogetherDevice");
}

id objc_msgSend_runFileSecurityChecksForSection_dataType_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runFileSecurityChecksForSection:dataType:options:");
}

id objc_msgSend_runInstallInParallel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runInstallInParallel");
}

id objc_msgSend_runSecurityCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runSecurityCheck:");
}

id objc_msgSend_runSecurityChecksForSection_dataType_componentName_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runSecurityChecksForSection:dataType:componentName:options:");
}

id objc_msgSend_runSettingsSecurityCheckForSection_component_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runSettingsSecurityCheckForSection:component:");
}

id objc_msgSend_runWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runWithConfiguration:");
}

id objc_msgSend_runningApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runningApps:");
}

id objc_msgSend_s3Server(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "s3Server");
}

id objc_msgSend_s3ServerFailureReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "s3ServerFailureReason");
}

id objc_msgSend_s3url(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "s3url");
}

id objc_msgSend_sanitizeTestLog_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sanitizeTestLog:");
}

id objc_msgSend_saveAccount_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveAccount:withCompletionHandler:");
}

id objc_msgSend_saveAppPatchesList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveAppPatchesList");
}

id objc_msgSend_saveAvailableOSVersion_andOSBuild_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveAvailableOSVersion:andOSBuild:");
}

id objc_msgSend_saveCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveCache");
}

id objc_msgSend_saveConfiguration_withCompletionQueue_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveConfiguration:withCompletionQueue:handler:");
}

id objc_msgSend_saveCurrentDeviceLanguageIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveCurrentDeviceLanguageIdentifier");
}

id objc_msgSend_saveCurrentWiFiSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveCurrentWiFiSettings");
}

id objc_msgSend_saveCurrentiOSBuild(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveCurrentiOSBuild");
}

id objc_msgSend_saveCuurentDeviceRegionCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveCuurentDeviceRegionCode");
}

id objc_msgSend_saveDemoLogUploadRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveDemoLogUploadRequest:");
}

id objc_msgSend_saveDeviceInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveDeviceInfo:");
}

id objc_msgSend_saveDeviceLanguageIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveDeviceLanguageIdentifier:");
}

id objc_msgSend_saveDeviceOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveDeviceOptions:");
}

id objc_msgSend_saveDeviceRegionCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveDeviceRegionCode:");
}

id objc_msgSend_saveFindMyHubRetryAtTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveFindMyHubRetryAtTime:");
}

id objc_msgSend_saveHubCertificateIdentifer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveHubCertificateIdentifer:");
}

id objc_msgSend_saveHubCertificateIdentifer_applePKI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveHubCertificateIdentifer:applePKI:");
}

id objc_msgSend_saveHubHostNameList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveHubHostNameList:");
}

id objc_msgSend_saveHubLastOnlineTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveHubLastOnlineTime:");
}

id objc_msgSend_saveHubSuppliedSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveHubSuppliedSettings:");
}

id objc_msgSend_saveInfoToFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveInfoToFile:");
}

id objc_msgSend_saveItem_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveItem:forKey:");
}

id objc_msgSend_saveItem_forKey_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveItem:forKey:withAttributes:");
}

id objc_msgSend_saveLastSettingsUpdatedTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveLastSettingsUpdatedTime:");
}

id objc_msgSend_saveLastShallowRefreshTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveLastShallowRefreshTime:");
}

id objc_msgSend_saveLastSnapshotRevertTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveLastSnapshotRevertTime:");
}

id objc_msgSend_saveMinOSVersionAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveMinOSVersionAvailable:");
}

id objc_msgSend_saveNetworkPrivacyConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveNetworkPrivacyConfiguration:");
}

id objc_msgSend_saveOSUpdateRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveOSUpdateRequest:");
}

id objc_msgSend_saveOSVerionAfterMigration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveOSVerionAfterMigration");
}

id objc_msgSend_saveOperationError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveOperationError:");
}

id objc_msgSend_saveOperationRequest_requestFlag_completeBy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveOperationRequest:requestFlag:completeBy:");
}

id objc_msgSend_saveOperationRequestIfNeeded_completeBy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveOperationRequestIfNeeded:completeBy:");
}

id objc_msgSend_savePairedDeviceLastSeenDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "savePairedDeviceLastSeenDate:");
}

id objc_msgSend_savePairedPeer_options_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "savePairedPeer:options:completion:");
}

id objc_msgSend_savePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "savePath");
}

id objc_msgSend_savePrivacyPermissionsForAllApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "savePrivacyPermissionsForAllApps:");
}

id objc_msgSend_saveRequiredDeletableSystemApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveRequiredDeletableSystemApps");
}

id objc_msgSend_saveSecretKeyInKeychain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveSecretKeyInKeychain:");
}

id objc_msgSend_saveSnapshotRevertFlagged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveSnapshotRevertFlagged:");
}

id objc_msgSend_saveToFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveToFile:");
}

id objc_msgSend_saveTransactionMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveTransactionMetric:");
}

id objc_msgSend_saveWiFiSettingsToPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveWiFiSettingsToPreferences:");
}

id objc_msgSend_saveiCloudAccountRecoveryKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveiCloudAccountRecoveryKey:");
}

id objc_msgSend_saveiCloudAccountSyncNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveiCloudAccountSyncNeeded:");
}

id objc_msgSend_sbAppSwitcher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sbAppSwitcher");
}

id objc_msgSend_scanForUpdates_withScanResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanForUpdates:withScanResults:");
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanHexInt:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scheduleInRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleInRunLoop:forMode:");
}

id objc_msgSend_scheduleRetryTimerForEnrollmentAtDate_isFirstLaunch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleRetryTimerForEnrollmentAtDate:isFirstLaunch:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduledTimerWithTimeInterval:repeats:block:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_screenSaverIdleDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "screenSaverIdleDelay");
}

id objc_msgSend_searchStoreWithOptions_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "searchStoreWithOptions:completion:");
}

id objc_msgSend_secondaryStagingRootPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secondaryStagingRootPath");
}

id objc_msgSend_secureConnectionEndDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secureConnectionEndDate");
}

id objc_msgSend_secureConnectionStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secureConnectionStartDate");
}

id objc_msgSend_secureManifestCheckForSegmentedManifest_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secureManifestCheckForSegmentedManifest:options:");
}

id objc_msgSend_seekToEndOfFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seekToEndOfFile");
}

id objc_msgSend_segmentedManifestWithRigorousFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "segmentedManifestWithRigorousFlag");
}

id objc_msgSend_semaphore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "semaphore");
}

id objc_msgSend_sendAppUsageDataEvent_withExecutable_sessionUUID_sessionStart_sessionEnd_sessionDuration_appOrder_appDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAppUsageDataEvent:withExecutable:sessionUUID:sessionStart:sessionEnd:sessionDuration:appOrder:appDuration:");
}

id objc_msgSend_sendAutoEnrollmentAbortEvent_languageCode_countryCode_networkInformation_wifiSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAutoEnrollmentAbortEvent:languageCode:countryCode:networkInformation:wifiSSID:");
}

id objc_msgSend_sendAutoEnrollmentResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAutoEnrollmentResults:");
}

id objc_msgSend_sendBgDownloadPausedEvent_forReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendBgDownloadPausedEvent:forReason:");
}

id objc_msgSend_sendCommandsToDemod_replyFromDemod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendCommandsToDemod:replyFromDemod:");
}

id objc_msgSend_sendContentUpdateCompletedEvent_withTimeTaken_cachingHubAvailable_isCriticalUpdate_contentUpdateType_andComponentSuccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendContentUpdateCompletedEvent:withTimeTaken:cachingHubAvailable:isCriticalUpdate:contentUpdateType:andComponentSuccess:");
}

id objc_msgSend_sendContentUpdateFailureEvent_isFatal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendContentUpdateFailureEvent:isFatal:");
}

id objc_msgSend_sendEnrollmentFailureEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendEnrollmentFailureEvent:");
}

id objc_msgSend_sendEvent_withPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendEvent:withPayload:");
}

id objc_msgSend_sendEventID_event_options_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendEventID:event:options:completion:");
}

id objc_msgSend_sendFMHFailureEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendFMHFailureEvent:");
}

id objc_msgSend_sendFileDownloadSourceEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendFileDownloadSourceEvent:");
}

id objc_msgSend_sendHeartbeatEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendHeartbeatEvent");
}

id objc_msgSend_sendImmediateDeviceInfoPing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendImmediateDeviceInfoPing");
}

id objc_msgSend_sendLastShallowRefreshTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendLastShallowRefreshTime:");
}

id objc_msgSend_sendNetworkAverageBandwidthEvent_forServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNetworkAverageBandwidthEvent:forServerType:");
}

id objc_msgSend_sendNetworkAverageRTTEvent_forServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNetworkAverageRTTEvent:forServerType:");
}

id objc_msgSend_sendNetworkFailureEvent_forServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNetworkFailureEvent:forServerType:");
}

id objc_msgSend_sendNetworkPacketLossEvent_forServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNetworkPacketLossEvent:forServerType:");
}

id objc_msgSend_sendNetworkRawDataEvent_forServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNetworkRawDataEvent:forServerType:");
}

id objc_msgSend_sendOSUpdateFailureEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendOSUpdateFailureEvent:");
}

id objc_msgSend_sendOutgoingRequestMessage_toDevice_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendOutgoingRequestMessage:toDevice:withCompletion:");
}

id objc_msgSend_sendProtobuf_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendProtobuf:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendPushNotificationPing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendPushNotificationPing");
}

id objc_msgSend_sendQueryForRequest_toPath_maxRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendQueryForRequest:toPath:maxRetry:");
}

id objc_msgSend_sendRebootTimeoutMessageToPricing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRebootTimeoutMessageToPricing:");
}

id objc_msgSend_sendRequest_toEndpoint_postData_maxRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRequest:toEndpoint:postData:maxRetry:");
}

id objc_msgSend_sendRequestID_request_options_responseHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRequestID:request:options:responseHandler:");
}

id objc_msgSend_sendRequestMessageOfType_withPayload_andResponseHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRequestMessageOfType:withPayload:andResponseHandler:");
}

id objc_msgSend_sendResponseMessageOfType_withPayload_forRequest_andCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendResponseMessageOfType:withPayload:forRequest:andCompletionHandler:");
}

id objc_msgSend_sendTestEvents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendTestEvents:");
}

id objc_msgSend_sendXPCRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendXPCRequest:");
}

id objc_msgSend_senderRPClients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "senderRPClients");
}

id objc_msgSend_sendiCloudSigninFailureEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendiCloudSigninFailureEvent:");
}

id objc_msgSend_sequentialGroupForIdentifiers_andContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sequentialGroupForIdentifiers:andContext:");
}

id objc_msgSend_sequentialOperationsForIdentifiers_andContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sequentialOperationsForIdentifiers:andContext:");
}

id objc_msgSend_serachForFileWithSuffix_inFolder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serachForFileWithSuffix:inFolder:");
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serialNumber");
}

id objc_msgSend_serializeCertificateChain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serializeCertificateChain:");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "server");
}

id objc_msgSend_serverList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serverList");
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serverTrust");
}

id objc_msgSend_serverType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serverType");
}

id objc_msgSend_serviceOwnersManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceOwnersManager");
}

id objc_msgSend_serviceWithDefaultShellEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceWithDefaultShellEndpoint");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "session");
}

id objc_msgSend_sessionPublisherWithStreamPublisher_startingBlock_sessionKeyBlock_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionPublisherWithStreamPublisher:startingBlock:sessionKeyBlock:options:");
}

id objc_msgSend_sessionTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionTable");
}

id objc_msgSend_sessionUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionUUID");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set");
}

id objc_msgSend_setAboutToReboot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAboutToReboot:");
}

id objc_msgSend_setAccountManagerHelper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccountManagerHelper:");
}

id objc_msgSend_setAccountProperty_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccountProperty:forKey:");
}

id objc_msgSend_setAccountSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccountSettings:");
}

id objc_msgSend_setAccountStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccountStore:");
}

id objc_msgSend_setActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActivated:");
}

id objc_msgSend_setActiveComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveComponents:");
}

id objc_msgSend_setActiveOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveOperations:");
}

id objc_msgSend_setAirDropMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAirDropMode:");
}

id objc_msgSend_setAirplaneMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAirplaneMode:");
}

id objc_msgSend_setAllOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllOperations:");
}

id objc_msgSend_setAllowCancel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowCancel:");
}

id objc_msgSend_setAllowedDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowedDevices:");
}

id objc_msgSend_setAllowedISTSignedComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowedISTSignedComponents:");
}

id objc_msgSend_setAllowedSymLinks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowedSymLinks:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAlreadyHaveList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlreadyHaveList:");
}

id objc_msgSend_setAlreadyInstalled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlreadyInstalled:");
}

id objc_msgSend_setAppAssetPromise_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppAssetPromise:error:");
}

id objc_msgSend_setAppID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppID:");
}

id objc_msgSend_setAppIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppIdentifier:");
}

id objc_msgSend_setAppInstallationInProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppInstallationInProgress:");
}

id objc_msgSend_setAppItemToDefer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppItemToDefer:");
}

id objc_msgSend_setAppPatches_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppPatches:");
}

id objc_msgSend_setAppPatchesListFileURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppPatchesListFileURL:");
}

id objc_msgSend_setApplePKI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApplePKI:");
}

id objc_msgSend_setApplicationRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApplicationRegistration:");
}

id objc_msgSend_setApsConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApsConnection:");
}

id objc_msgSend_setApsToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApsToken:");
}

id objc_msgSend_setArguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArguments:");
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAttribute:forKey:error:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAuthCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthCompletionHandler:");
}

id objc_msgSend_setAuthenticated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthenticated:");
}

id objc_msgSend_setAuthenticationResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthenticationResults:");
}

id objc_msgSend_setAuthenticationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthenticationType:");
}

id objc_msgSend_setAuthorizationStatusByType_forBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthorizationStatusByType:forBundleIdentifier:");
}

id objc_msgSend_setAutoEnrollmentInfo_withStoreId_withHelpMenuRowSelection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAutoEnrollmentInfo:withStoreId:withHelpMenuRowSelection:");
}

id objc_msgSend_setAutomatedDeviceGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAutomatedDeviceGroup:");
}

id objc_msgSend_setAutomatedDeviceGroupStoreID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAutomatedDeviceGroupStoreID");
}

id objc_msgSend_setAvDiscoverySession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvDiscoverySession:");
}

id objc_msgSend_setAvOutputContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvOutputContext:");
}

id objc_msgSend_setAvSystemController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvSystemController:");
}

id objc_msgSend_setAvgRTT_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvgRTT:");
}

id objc_msgSend_setBackgroundBundle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBackgroundBundle:");
}

id objc_msgSend_setBackgroundDownloadActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBackgroundDownloadActive:");
}

id objc_msgSend_setBackgroundDownloadQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBackgroundDownloadQueue:");
}

id objc_msgSend_setBackgroundDownloadState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBackgroundDownloadState:");
}

id objc_msgSend_setBacklightStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBacklightStatus:");
}

id objc_msgSend_setBgDownloadPauseReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBgDownloadPauseReason:");
}

id objc_msgSend_setBgDownloadPauseStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBgDownloadPauseStartTime:");
}

id objc_msgSend_setBlackListedPaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlackListedPaths:");
}

id objc_msgSend_setBlocklistedItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlocklistedItems:");
}

id objc_msgSend_setBonjourBrowser_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBonjourBrowser:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setBoolValue_forSetting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoolValue:forSetting:");
}

id objc_msgSend_setBrightnessClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBrightnessClient:");
}

id objc_msgSend_setBuddyCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBuddyCompletionHandler:");
}

id objc_msgSend_setBundleDownloadInProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleDownloadInProgress:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setBundleInProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleInProgress:");
}

id objc_msgSend_setBundleInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleInfo:");
}

id objc_msgSend_setBundleState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleState:");
}

id objc_msgSend_setBundleStateAs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleStateAs:");
}

id objc_msgSend_setBundleTimerInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleTimerInfo:");
}

id objc_msgSend_setBundleType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleType:");
}

id objc_msgSend_setBusy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBusy:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setCaLogsUploadTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCaLogsUploadTimer:");
}

id objc_msgSend_setCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCache:");
}

id objc_msgSend_setCachedBundleInstallState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedBundleInstallState:");
}

id objc_msgSend_setCachedFDC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedFDC:");
}

id objc_msgSend_setCachedLocalURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedLocalURL:");
}

id objc_msgSend_setCachingHubAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachingHubAvailable:");
}

id objc_msgSend_setCachingHubRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachingHubRequest:");
}

id objc_msgSend_setCachingHubRetryInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachingHubRetryInterval:");
}

id objc_msgSend_setCachingHubRetryLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachingHubRetryLock:");
}

id objc_msgSend_setCalendar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCalendar:");
}

id objc_msgSend_setCanceled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCanceled:");
}

id objc_msgSend_setCdpContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCdpContext:");
}

id objc_msgSend_setCdpController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCdpController:");
}

id objc_msgSend_setCdpUiProvider_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCdpUiProvider:");
}

id objc_msgSend_setCellularCapable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularCapable:");
}

id objc_msgSend_setCellularQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularQueue:");
}

id objc_msgSend_setCellularSlotsInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularSlotsInfo:");
}

id objc_msgSend_setCellularTypeStrMapping_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularTypeStrMapping:");
}

id objc_msgSend_setChangeFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChangeFlags:");
}

id objc_msgSend_setCheckType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCheckType:");
}

id objc_msgSend_setChecker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChecker:");
}

id objc_msgSend_setCheckpointBarrier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCheckpointBarrier:");
}

id objc_msgSend_setClientCertArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientCertArray:");
}

id objc_msgSend_setCloneFailedList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCloneFailedList:");
}

id objc_msgSend_setClosedDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClosedDate:");
}

id objc_msgSend_setCloudSyncEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCloudSyncEnabled:");
}

id objc_msgSend_setComplete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComplete:");
}

id objc_msgSend_setCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletion:");
}

id objc_msgSend_setCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletionHandler:");
}

id objc_msgSend_setCompletionTime_reserveTimeForCleanup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletionTime:reserveTimeForCleanup:");
}

id objc_msgSend_setCompletionTimeForFatalError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletionTimeForFatalError:");
}

id objc_msgSend_setComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComponent:");
}

id objc_msgSend_setComponentListLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComponentListLock:");
}

id objc_msgSend_setComponentLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComponentLock:");
}

id objc_msgSend_setComponentManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComponentManager:");
}

id objc_msgSend_setComponentProcessor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComponentProcessor:");
}

id objc_msgSend_setComponentsFromBundle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComponentsFromBundle:");
}

id objc_msgSend_setComponentsSuccessful_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComponentsSuccessful:");
}

id objc_msgSend_setConcurrentSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConcurrentSession:");
}

id objc_msgSend_setCondition_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCondition:");
}

id objc_msgSend_setConditionLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConditionLock:");
}

id objc_msgSend_setConfigurationCompleteWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationCompleteWithError:");
}

id objc_msgSend_setConfigurationProfilesSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationProfilesSupported:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionForPricing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectionForPricing:");
}

id objc_msgSend_setContainerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContainerType:");
}

id objc_msgSend_setContainerized_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContainerized:");
}

id objc_msgSend_setContentBeingInstalled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContentBeingInstalled:");
}

id objc_msgSend_setContentCacheProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContentCacheProtocol:");
}

id objc_msgSend_setContentDownloadConcurrentQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContentDownloadConcurrentQueue:");
}

id objc_msgSend_setContentIdentifierString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContentIdentifierString:");
}

id objc_msgSend_setContentRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContentRange:");
}

id objc_msgSend_setContentRootPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContentRootPath:");
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContext:");
}

id objc_msgSend_setControlFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlFlags:");
}

id objc_msgSend_setCoreDuetTriggeredPause_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoreDuetTriggeredPause:");
}

id objc_msgSend_setCoreLocationOwnedResources_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoreLocationOwnedResources:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCountryCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCountryCode:");
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCreationDate:");
}

id objc_msgSend_setCreationList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCreationList:");
}

id objc_msgSend_setCreatorSN_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCreatorSN:");
}

id objc_msgSend_setCreatorUDID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCreatorUDID:");
}

id objc_msgSend_setCredential_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCredential:");
}

id objc_msgSend_setCredentialHeaders_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCredentialHeaders:");
}

id objc_msgSend_setCredentials_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCredentials:");
}

id objc_msgSend_setCriticalComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCriticalComponents:");
}

id objc_msgSend_setCriticalUpdatePrioritized_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCriticalUpdatePrioritized:");
}

id objc_msgSend_setCurrentDirectoryPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentDirectoryPath:");
}

id objc_msgSend_setCurrentOSVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentOSVersion:");
}

id objc_msgSend_setCurrentProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentProgress:");
}

id objc_msgSend_setCurrentRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentRetry:");
}

id objc_msgSend_setCurrentTry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentTry:");
}

id objc_msgSend_setCurrentUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentUID:");
}

id objc_msgSend_setCurrentUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentUniqueIdentifier:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDataContainerPaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataContainerPaths:");
}

id objc_msgSend_setDataDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataDict:");
}

id objc_msgSend_setDataVolumeCacheFolderPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataVolumeCacheFolderPath:");
}

id objc_msgSend_setDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDate:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDefaultLogLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultLogLevel:");
}

id objc_msgSend_setDefaultQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultQueue:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegateQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegateQueue:");
}

id objc_msgSend_setDelegates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegates:");
}

id objc_msgSend_setDeleteInstallableFileAfterInstall_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeleteInstallableFileAfterInstall:");
}

id objc_msgSend_setDemoDeviceFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDemoDeviceFlag");
}

id objc_msgSend_setDemoEnrollmentFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDemoEnrollmentFlag:");
}

id objc_msgSend_setDemoPrepareInProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDemoPrepareInProgress:");
}

id objc_msgSend_setDemoUpdateQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDemoUpdateQueue:");
}

id objc_msgSend_setDemoVolumeCacheFolderPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDemoVolumeCacheFolderPath:");
}

id objc_msgSend_setDemodReady_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDemodReady:");
}

id objc_msgSend_setDemuxQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDemuxQueue:");
}

id objc_msgSend_setDenyMulticast_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDenyMulticast:");
}

id objc_msgSend_setDependents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDependents:");
}

id objc_msgSend_setDestinationDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestinationDevice:");
}

id objc_msgSend_setDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDevice:");
}

id objc_msgSend_setDeviceChangedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceChangedHandler:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceLanguage_andRegion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceLanguage:andRegion:");
}

id objc_msgSend_setDeviceLanguage_andRegion_sbRestartNeeded_sbRestartHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceLanguage:andRegion:sbRestartNeeded:sbRestartHandler:");
}

id objc_msgSend_setDeviceLockAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceLockAssertion:");
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceLostHandler:");
}

id objc_msgSend_setDeviceManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceManifest:");
}

id objc_msgSend_setDeviceMatching_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceMatching:");
}

id objc_msgSend_setDeviceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceName:");
}

id objc_msgSend_setDevicePublicID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDevicePublicID:");
}

id objc_msgSend_setDeviceRegistry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceRegistry:");
}

id objc_msgSend_setDeviceScanner_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceScanner:");
}

id objc_msgSend_setDeviceUDID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceUDID:");
}

id objc_msgSend_setDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDevices:");
}

id objc_msgSend_setDisableBackgroundInstall_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableBackgroundInstall:");
}

id objc_msgSend_setDisableIdleTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableIdleTimer:");
}

id objc_msgSend_setDisconnectHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisconnectHandler:");
}

id objc_msgSend_setDiscoverableMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiscoverableMode:");
}

id objc_msgSend_setDiscoveredPeers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiscoveredPeers:");
}

id objc_msgSend_setDiscoveryMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiscoveryMode:");
}

id objc_msgSend_setDiskSpaceMonitoringTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiskSpaceMonitoringTimer:");
}

id objc_msgSend_setDiskSpaceRequired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiskSpaceRequired:");
}

id objc_msgSend_setDiskSpaceTriggeredPause_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiskSpaceTriggeredPause:");
}

id objc_msgSend_setDiskSpacedRequired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiskSpacedRequired:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDispatchTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchTable:");
}

id objc_msgSend_setDispatchTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchTime:");
}

id objc_msgSend_setDisplayLayoutMonitor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisplayLayoutMonitor:");
}

id objc_msgSend_setDoPreSkyMigration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDoPreSkyMigration:");
}

id objc_msgSend_setDoPreSydneyMigration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDoPreSydneyMigration:");
}

id objc_msgSend_setDomains_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDomains:");
}

id objc_msgSend_setDomainsPlistFilePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDomainsPlistFilePath:");
}

id objc_msgSend_setDownloadCredentials_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadCredentials:");
}

id objc_msgSend_setDownloadFeeAgreementStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadFeeAgreementStatus:");
}

id objc_msgSend_setDownloadManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadManager:");
}

id objc_msgSend_setDownloadOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadOnly:");
}

id objc_msgSend_setDownloadQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadQueue:");
}

id objc_msgSend_setDownloadRequestCompletions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadRequestCompletions:");
}

id objc_msgSend_setDownloadRequestsLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadRequestsLock:");
}

id objc_msgSend_setDownloadSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadSource:");
}

id objc_msgSend_setDownloadSpeed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadSpeed:");
}

id objc_msgSend_setDownloadedBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadedBytes:");
}

id objc_msgSend_setDownloadedContentSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadedContentSource:");
}

id objc_msgSend_setDownloadedSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadedSize:");
}

id objc_msgSend_setDroppedByRapport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDroppedByRapport:");
}

id objc_msgSend_setDuServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDuServer:");
}

id objc_msgSend_setEligible_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEligible:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEnabled_forDataclass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnabled:forDataclass:");
}

id objc_msgSend_setEnabledTopics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnabledTopics:");
}

id objc_msgSend_setEndowmentNamespaces_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndowmentNamespaces:");
}

id objc_msgSend_setEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndpoint:");
}

id objc_msgSend_setEraseDataPlan_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEraseDataPlan:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setErrorHandler:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setExistingAccounts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExistingAccounts:");
}

id objc_msgSend_setExistingFileSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExistingFileSize:");
}

id objc_msgSend_setExpectedOSBuild_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpectedOSBuild:");
}

id objc_msgSend_setExpectedOSVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpectedOSVersion:");
}

id objc_msgSend_setExpirationTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpirationTimer:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExtension:");
}

id objc_msgSend_setExtensionContextIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExtensionContextIdentifier:");
}

id objc_msgSend_setFdc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFdc:");
}

id objc_msgSend_setFdcDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFdcDelegate:");
}

id objc_msgSend_setFeatures_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFeatures:");
}

id objc_msgSend_setFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFile:");
}

id objc_msgSend_setFileDownloadCachePaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileDownloadCachePaths:");
}

id objc_msgSend_setFileDownloading_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileDownloading:");
}

id objc_msgSend_setFileHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileHandle:");
}

id objc_msgSend_setFileHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileHash:");
}

id objc_msgSend_setFileInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileInfo:");
}

id objc_msgSend_setFileManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileManager:");
}

id objc_msgSend_setFileName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileName:");
}

id objc_msgSend_setFileType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileType:");
}

id objc_msgSend_setFinishedOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFinishedOperations:");
}

id objc_msgSend_setFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFlag:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setFlashlightLevel_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFlashlightLevel:withError:");
}

id objc_msgSend_setFmhDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFmhDict:");
}

id objc_msgSend_setFmhURLOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFmhURLOverride:");
}

id objc_msgSend_setForBackgroundDownload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForBackgroundDownload:");
}

id objc_msgSend_setForRemoval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForRemoval:");
}

id objc_msgSend_setForced_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForced:");
}

id objc_msgSend_setForegroundAllowedApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForegroundAllowedApps:");
}

id objc_msgSend_setFreezeBackgroundDownload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFreezeBackgroundDownload:");
}

id objc_msgSend_setFullKeysSent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFullKeysSent:");
}

id objc_msgSend_setFullScreenState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFullScreenState:");
}

id objc_msgSend_setFullScreenUIAppId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFullScreenUIAppId:");
}

id objc_msgSend_setFullScreenUIAppMonitor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFullScreenUIAppMonitor:");
}

id objc_msgSend_setFullScreenUILaunchError_iOS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFullScreenUILaunchError_iOS:");
}

id objc_msgSend_setGroupContainerPaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGroupContainerPaths:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHasFactoryContent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasFactoryContent:");
}

id objc_msgSend_setHeartBeatMonitor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHeartBeatMonitor:");
}

id objc_msgSend_setHelperAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHelperAgent:");
}

id objc_msgSend_setHiddenState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHiddenState:");
}

id objc_msgSend_setHidePasswordHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHidePasswordHandler:");
}

id objc_msgSend_setHmacKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHmacKey:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setHttpHeaders_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHttpHeaders:");
}

id objc_msgSend_setHubCertificateIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHubCertificateIdentifier:");
}

id objc_msgSend_setHubHostName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHubHostName:");
}

id objc_msgSend_setHubPort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHubPort:");
}

id objc_msgSend_setHubProtocolVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHubProtocolVersion:");
}

id objc_msgSend_setHubServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHubServer:");
}

id objc_msgSend_setHubVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHubVersion:");
}

id objc_msgSend_setIOS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIOS:");
}

id objc_msgSend_setIOSSpecificSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIOSSpecificSettings");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdsHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsHandler:");
}

id objc_msgSend_setIdsService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsService:");
}

id objc_msgSend_setIdsServiceQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsServiceQueue:");
}

id objc_msgSend_setImportance_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setImportance:error:");
}

id objc_msgSend_setIncludeHiddenNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIncludeHiddenNetworks:");
}

id objc_msgSend_setIncludeProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIncludeProperties:");
}

id objc_msgSend_setInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInfo:");
}

id objc_msgSend_setInitialODRAssetPromises_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInitialODRAssetPromises:error:");
}

id objc_msgSend_setInstallError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstallError:");
}

id objc_msgSend_setInstallOptions_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstallOptions:error:");
}

id objc_msgSend_setInstallQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstallQueue:");
}

id objc_msgSend_setInstallTargetType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstallTargetType:");
}

id objc_msgSend_setInstallationOrder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstallationOrder:");
}

id objc_msgSend_setInstalledBundle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstalledBundle:");
}

id objc_msgSend_setInstalledFactoryBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstalledFactoryBundleID:");
}

id objc_msgSend_setInstallingBundle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstallingBundle:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterval:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsBackgroundDownloadQueueEmpty_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsBackgroundDownloadQueueEmpty:");
}

id objc_msgSend_setIsCriticalUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsCriticalUpdate:");
}

id objc_msgSend_setIsDeviceReachable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDeviceReachable:");
}

id objc_msgSend_setIsDiffPatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDiffPatch:");
}

id objc_msgSend_setIsDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDone:");
}

id objc_msgSend_setIsDownloadPaused_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDownloadPaused:");
}

id objc_msgSend_setIsEnrolled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsEnrolled:");
}

id objc_msgSend_setIsInBubble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsInBubble:");
}

id objc_msgSend_setIsInternalBuild_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsInternalBuild:");
}

id objc_msgSend_setIsLeaf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsLeaf:");
}

id objc_msgSend_setIsLogicSync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsLogicSync:");
}

id objc_msgSend_setIsNPIDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsNPIDevice:");
}

id objc_msgSend_setIsPost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPost:");
}

id objc_msgSend_setIsRoot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsRoot:");
}

id objc_msgSend_setIsStoreOpenNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsStoreOpenNow:");
}

id objc_msgSend_setIsUsernameEditable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsUsernameEditable:");
}

id objc_msgSend_setItemBeingInstalled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setItemBeingInstalled:");
}

id objc_msgSend_setJustBootUp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setJustBootUp:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setKnownNetworkProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKnownNetworkProfile:");
}

id objc_msgSend_setLanguage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLanguage:");
}

id objc_msgSend_setLastBundleUpdateDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastBundleUpdateDate:");
}

id objc_msgSend_setLastDownloadedByte_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastDownloadedByte:");
}

id objc_msgSend_setLastMigrationVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastMigrationVersion:");
}

id objc_msgSend_setLatitude_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLatitude:");
}

id objc_msgSend_setLaunchPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLaunchPath:");
}

id objc_msgSend_setLeafCertificate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLeafCertificate:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setListenerRPClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setListenerRPClient:");
}

id objc_msgSend_setLocalCredential_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalCredential:");
}

id objc_msgSend_setLocalDeviceUpdatedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalDeviceUpdatedHandler:");
}

id objc_msgSend_setLocalHubError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalHubError:");
}

id objc_msgSend_setLocalHubFailureReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalHubFailureReason:");
}

id objc_msgSend_setLocalHubReachable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalHubReachable:");
}

id objc_msgSend_setLocalHubURLSchema_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalHubURLSchema:");
}

id objc_msgSend_setLocalSecret_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalSecret:");
}

id objc_msgSend_setLocalURLList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalURLList:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocaleCodeStr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocaleCodeStr:");
}

id objc_msgSend_setLocationStateObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocationStateObserver:");
}

id objc_msgSend_setLocations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocations:");
}

id objc_msgSend_setLogCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLogCache:");
}

id objc_msgSend_setLogFP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLogFP:");
}

id objc_msgSend_setLogFilePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLogFilePath:");
}

id objc_msgSend_setLogicSync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLogicSync:");
}

id objc_msgSend_setLogsToWrite_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLogsToWrite:");
}

id objc_msgSend_setLongitude_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLongitude:");
}

id objc_msgSend_setLowBatteryLocateEnabled_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLowBatteryLocateEnabled:withCompletion:");
}

id objc_msgSend_setLowPowerMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLowPowerMode:");
}

id objc_msgSend_setMacOS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMacOS:");
}

id objc_msgSend_setManifestInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManifestInfo:");
}

id objc_msgSend_setManifestVerifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManifestVerifier:");
}

id objc_msgSend_setManifestVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManifestVersion:");
}

id objc_msgSend_setMaskValuesLookUpTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaskValuesLookUpTable:");
}

id objc_msgSend_setMasterManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMasterManifest:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaxConcurrentRequests_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxConcurrentRequests:");
}

id objc_msgSend_setMaxRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxRetry:");
}

id objc_msgSend_setMaxStoreResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxStoreResults:");
}

id objc_msgSend_setMaximumTerminationResistance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaximumTerminationResistance:");
}

id objc_msgSend_setMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessage:");
}

id objc_msgSend_setMessageHandlerTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessageHandlerTable:");
}

id objc_msgSend_setMessageQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessageQueue:");
}

id objc_msgSend_setMetadata_forFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMetadata:forFile:");
}

id objc_msgSend_setMigrationDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMigrationDone:");
}

id objc_msgSend_setMinimumRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinimumRSSI:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setModeLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setModeLock:");
}

id objc_msgSend_setModificationDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setModificationDate:");
}

id objc_msgSend_setMulticastPreferenceSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMulticastPreferenceSet:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNearbyObjectMonitor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNearbyObjectMonitor:");
}

id objc_msgSend_setNearbyObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNearbyObjects:");
}

id objc_msgSend_setNeedUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNeedUpdate:");
}

id objc_msgSend_setNeedsSandboxExtensions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNeedsSandboxExtensions:");
}

id objc_msgSend_setNetworkOwnedResources_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkOwnedResources:");
}

id objc_msgSend_setNextContentRevertDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNextContentRevertDate:");
}

id objc_msgSend_setNextRetryTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNextRetryTime:");
}

id objc_msgSend_setNextStoreClosedDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNextStoreClosedDate:");
}

id objc_msgSend_setNextStoreOpenDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNextStoreOpenDate:");
}

id objc_msgSend_setNiSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNiSession:");
}

id objc_msgSend_setNonContainerizedContentRoots_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNonContainerizedContentRoots:");
}

id objc_msgSend_setNumConcurrentRequests_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumConcurrentRequests:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObliterate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObliterate:");
}

id objc_msgSend_setObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObserver:");
}

id objc_msgSend_setObservers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObservers:");
}

id objc_msgSend_setOfflineDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOfflineDuration:");
}

id objc_msgSend_setOpenDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOpenDate:");
}

id objc_msgSend_setOperationQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOperationQueue:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOriginServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOriginServer:");
}

id objc_msgSend_setOsVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOsVersion:");
}

id objc_msgSend_setOsVersionStr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOsVersionStr:");
}

id objc_msgSend_setOutData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutData:");
}

id objc_msgSend_setPOSDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPOSDevice:");
}

id objc_msgSend_setPOSDeviceFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPOSDeviceFlag");
}

id objc_msgSend_setPacketLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPacketLoss:");
}

id objc_msgSend_setPairSetupFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairSetupFlags:");
}

id objc_msgSend_setPaired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPaired:");
}

id objc_msgSend_setPairingHandlers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairingHandlers:");
}

id objc_msgSend_setPairingManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairingManager:");
}

id objc_msgSend_setPairingMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairingMode:");
}

id objc_msgSend_setPairingPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairingPassword:");
}

id objc_msgSend_setParallelInstallQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParallelInstallQueue:");
}

id objc_msgSend_setParallelProcessing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParallelProcessing:");
}

id objc_msgSend_setPasscodeModificationAllowed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPasscodeModificationAllowed:");
}

id objc_msgSend_setPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPassword:");
}

id objc_msgSend_setPasswordType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPasswordType:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPathController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPathController:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPeerChangeToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeerChangeToken:");
}

id objc_msgSend_setPendingComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPendingComponents:");
}

id objc_msgSend_setPendingMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPendingMessage:");
}

id objc_msgSend_setPendingRequests_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPendingRequests:");
}

id objc_msgSend_setPercent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPercent:");
}

id objc_msgSend_setPercentageProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPercentageProgress:");
}

id objc_msgSend_setPingInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPingInterval:");
}

id objc_msgSend_setPingTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPingTimer:");
}

id objc_msgSend_setPlaceholderPromise_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlaceholderPromise:error:");
}

id objc_msgSend_setPlatformType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlatformType:");
}

id objc_msgSend_setPlatformWithManifestProductList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlatformWithManifestProductList:");
}

id objc_msgSend_setPlugInContainerPaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlugInContainerPaths:");
}

id objc_msgSend_setPollingQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPollingQueue:");
}

id objc_msgSend_setPort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPort:");
}

id objc_msgSend_setPostData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPostData:");
}

id objc_msgSend_setPostFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPostFile:");
}

id objc_msgSend_setPosterObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPosterObserver:");
}

id objc_msgSend_setPower_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPower:error:");
}

id objc_msgSend_setPowerAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerAssertion:");
}

id objc_msgSend_setPowerMode_fromSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerMode:fromSource:");
}

id objc_msgSend_setPreInstalledContent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreInstalledContent:");
}

id objc_msgSend_setPredicates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredicates:");
}

id objc_msgSend_setPreferencesFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferencesFile:");
}

id objc_msgSend_setPreferredStoreID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferredStoreID:");
}

id objc_msgSend_setPrepareQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrepareQueue:");
}

id objc_msgSend_setPricingAppUpdateDeferred_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPricingAppUpdateDeferred:");
}

id objc_msgSend_setPrivateKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateKey:");
}

id objc_msgSend_setProceeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProceeded:");
}

id objc_msgSend_setProfileIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProfileIdentifier:");
}

id objc_msgSend_setProfilePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProfilePath:");
}

id objc_msgSend_setPromptForPasswordHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPromptForPasswordHandler:");
}

id objc_msgSend_setProperty_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProperty:forKey:");
}

id objc_msgSend_setProtobufAction_forIncomingRequestsOfType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProtobufAction:forIncomingRequestsOfType:");
}

id objc_msgSend_setProtobufAction_forIncomingResponsesOfType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProtobufAction:forIncomingResponsesOfType:");
}

id objc_msgSend_setPseudoContentRootPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPseudoContentRootPath:");
}

id objc_msgSend_setPurged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPurged:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setQueuedPingType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueuedPingType:");
}

id objc_msgSend_setROS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setROS:");
}

id objc_msgSend_setRawDataKeyMapping_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRawDataKeyMapping:");
}

id objc_msgSend_setRawTimingData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRawTimingData:");
}

id objc_msgSend_setReachabilityLastUpdatedTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReachabilityLastUpdatedTime:");
}

id objc_msgSend_setReachable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReachable:");
}

id objc_msgSend_setRebootType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRebootType:");
}

id objc_msgSend_setRecoveryKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRecoveryKey:");
}

id objc_msgSend_setRedirected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRedirected:");
}

id objc_msgSend_setRegion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRegion:");
}

id objc_msgSend_setRegistrationInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRegistrationInfo:");
}

id objc_msgSend_setRememberUponSuccessfulAssociation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRememberUponSuccessfulAssociation:");
}

id objc_msgSend_setRemoteAlertHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteAlertHandle:");
}

id objc_msgSend_setRemoteCredential_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteCredential:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemoteURLList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteURLList:");
}

id objc_msgSend_setRemovableComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemovableComponents:");
}

id objc_msgSend_setRemoveOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoveOperations:");
}

id objc_msgSend_setReport_reportLength_withIdentifier_forType_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReport:reportLength:withIdentifier:forType:error:");
}

id objc_msgSend_setRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequest:");
}

id objc_msgSend_setRequestCachePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestCachePolicy:");
}

id objc_msgSend_setRequestDispatchLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestDispatchLock:");
}

id objc_msgSend_setRequestEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestEnd:");
}

id objc_msgSend_setRequestInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestInfo:");
}

id objc_msgSend_setRequestPerSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestPerSession:");
}

id objc_msgSend_setRequestStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestStart:");
}

id objc_msgSend_setRequestStr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestStr:");
}

id objc_msgSend_setRequestTimeoutCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestTimeoutCount:");
}

id objc_msgSend_setResetCDP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResetCDP:");
}

id objc_msgSend_setResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResponse:");
}

id objc_msgSend_setResponseEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResponseEnd:");
}

id objc_msgSend_setResponseHandlers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResponseHandlers:");
}

id objc_msgSend_setResponseStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResponseStart:");
}

id objc_msgSend_setRestored_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRestored:");
}

id objc_msgSend_setResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResult:");
}

id objc_msgSend_setRetransmitBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetransmitBytes:");
}

id objc_msgSend_setRetryAfter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetryAfter:");
}

id objc_msgSend_setRetryAttempts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetryAttempts:");
}

id objc_msgSend_setRetryCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetryCount:");
}

id objc_msgSend_setRetryLeft_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetryLeft:");
}

id objc_msgSend_setRetryTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetryTimer:");
}

id objc_msgSend_setRetryable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetryable:");
}

id objc_msgSend_setRetryableComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetryableComponents:");
}

id objc_msgSend_setRevertDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRevertDate:");
}

id objc_msgSend_setRollbackOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRollbackOperations:");
}

id objc_msgSend_setRootFileSystemPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRootFileSystemPath:");
}

id objc_msgSend_setRootPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRootPath:");
}

id objc_msgSend_setRpClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRpClient:");
}

id objc_msgSend_setRpDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRpDevice:");
}

id objc_msgSend_setRpDeviceAdvertiser_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRpDeviceAdvertiser:");
}

id objc_msgSend_setRpDeviceExplorer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRpDeviceExplorer:");
}

id objc_msgSend_setRpLocalDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRpLocalDevice:");
}

id objc_msgSend_setRpMessageHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRpMessageHandler:");
}

id objc_msgSend_setRpServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRpServer:");
}

id objc_msgSend_setS3Server_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setS3Server:");
}

id objc_msgSend_setS3ServerFailureReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setS3ServerFailureReason:");
}

id objc_msgSend_setS3url_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setS3url:");
}

id objc_msgSend_setSEPDemoMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSEPDemoMode:");
}

id objc_msgSend_setSSIDList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSSIDList:");
}

id objc_msgSend_setSavePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSavePath:");
}

id objc_msgSend_setSbAppSwitcher_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSbAppSwitcher:");
}

id objc_msgSend_setScanRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanRate:");
}

id objc_msgSend_setScanResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanResult:");
}

id objc_msgSend_setSegmentedManifestWithRigorousFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSegmentedManifestWithRigorousFlag:");
}

id objc_msgSend_setSemaphore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSemaphore:");
}

id objc_msgSend_setSenderRPClients_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSenderRPClients:");
}

id objc_msgSend_setSerialNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSerialNumber:");
}

id objc_msgSend_setServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServer:");
}

id objc_msgSend_setServerList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServerList:");
}

id objc_msgSend_setServerType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServerType:");
}

id objc_msgSend_setServiceOwnersManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceOwnersManager:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSession:");
}

id objc_msgSend_setSessionTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSessionTable:");
}

id objc_msgSend_setSessionUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSessionUUID:");
}

id objc_msgSend_setSettingsComponentNames_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSettingsComponentNames:");
}

id objc_msgSend_setSettingsDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSettingsDict:");
}

id objc_msgSend_setSettingsFilePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSettingsFilePath:");
}

id objc_msgSend_setSfAirDropController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSfAirDropController:");
}

id objc_msgSend_setSharedStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSharedStore:");
}

id objc_msgSend_setSharedStoreLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSharedStoreLock:");
}

id objc_msgSend_setShouldForgetKnownNetworkUponUnlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldForgetKnownNetworkUponUnlock:");
}

id objc_msgSend_setShowPasswordHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShowPasswordHandler:");
}

id objc_msgSend_setShowUI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShowUI:");
}

id objc_msgSend_setSignInContexts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignInContexts:");
}

id objc_msgSend_setSignOutContexts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignOutContexts:");
}

id objc_msgSend_setSignedManifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignedManifest:");
}

id objc_msgSend_setSigningKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSigningKey:");
}

id objc_msgSend_setSignpostId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignpostId:");
}

id objc_msgSend_setSkipHashCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSkipHashCheck:");
}

id objc_msgSend_setSkipped_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSkipped:");
}

id objc_msgSend_setSkyEquivalentVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSkyEquivalentVersion:");
}

id objc_msgSend_setSnapshotRevertTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSnapshotRevertTimer:");
}

id objc_msgSend_setStage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStage:");
}

id objc_msgSend_setStagedOperations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStagedOperations:");
}

id objc_msgSend_setStaggeredContentUpdateEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStaggeredContentUpdateEnabled:");
}

id objc_msgSend_setStandardOutput_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStandardOutput:");
}

id objc_msgSend_setStarted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStarted:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStateDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateDescriptor:");
}

id objc_msgSend_setStateForDemoMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateForDemoMode:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStatusCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatusCode:");
}

id objc_msgSend_setStoreCloseTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoreCloseTimer:");
}

id objc_msgSend_setStoreHourRecords_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoreHourRecords:");
}

id objc_msgSend_setStoreId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoreId:");
}

id objc_msgSend_setStoreOpenTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoreOpenTimer:");
}

id objc_msgSend_setStoresSearched_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoresSearched:");
}

id objc_msgSend_setSubscribers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubscribers:");
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuspended:");
}

id objc_msgSend_setSwitchModeAfterCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSwitchModeAfterCompletion:");
}

id objc_msgSend_setSydneyEquivalentVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSydneyEquivalentVersion:");
}

id objc_msgSend_setSyncSessionObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSyncSessionObserver:");
}

id objc_msgSend_setSyncState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSyncState:");
}

id objc_msgSend_setTargetDeviceDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetDeviceDelegate:");
}

id objc_msgSend_setTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTask:");
}

id objc_msgSend_setTaskManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTaskManager:");
}

id objc_msgSend_setTccOwnedResources_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTccOwnedResources:");
}

id objc_msgSend_setTestFileHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTestFileHandle:");
}

id objc_msgSend_setTestQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTestQueue:");
}

id objc_msgSend_setTestScripts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTestScripts:");
}

id objc_msgSend_setTestScriptsLastModified_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTestScriptsLastModified:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTimeIntervalReservedForCleanup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeIntervalReservedForCleanup:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimeoutTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeoutTimer:");
}

id objc_msgSend_setTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimer:");
}

id objc_msgSend_setTimerForFatalError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimerForFatalError:");
}

id objc_msgSend_setTotalBytesReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalBytesReceived:");
}

id objc_msgSend_setTotalBytesSent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalBytesSent:");
}

id objc_msgSend_setTotalComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalComponents:");
}

id objc_msgSend_setTotalFileSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalFileSize:");
}

id objc_msgSend_setTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransaction:");
}

id objc_msgSend_setTrueTone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrueTone:");
}

id objc_msgSend_setTryCachingHub_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTryCachingHub:");
}

id objc_msgSend_setTvOS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTvOS:");
}

id objc_msgSend_setURLCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setURLCache:");
}

id objc_msgSend_setUdid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUdid:");
}

id objc_msgSend_setUiHelperQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUiHelperQueue:");
}

id objc_msgSend_setUid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUid:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUninstallQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUninstallQueue:");
}

id objc_msgSend_setUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUniqueIdentifier:");
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpdateHandler:");
}

id objc_msgSend_setUpdateQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpdateQueue:");
}

id objc_msgSend_setUploadInProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUploadInProgress:");
}

id objc_msgSend_setUrlOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUrlOverride:");
}

id objc_msgSend_setUrlSchema_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUrlSchema:");
}

id objc_msgSend_setUseBAAAuthentication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUseBAAAuthentication:");
}

id objc_msgSend_setUseDefaultStoreHours_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUseDefaultStoreHours:");
}

id objc_msgSend_setUseDiffPatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUseDiffPatch:");
}

id objc_msgSend_setUseFactoryDefault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUseFactoryDefault:");
}

id objc_msgSend_setUserHomePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserHomePath:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserVolumeCacheFolderPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserVolumeCacheFolderPath:");
}

id objc_msgSend_setUsername_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUsername:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setVerifyFileHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVerifyFileHash:");
}

id objc_msgSend_setVerifyHashBeforeStaging_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVerifyHashBeforeStaging:");
}

id objc_msgSend_setVolume_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVolume:");
}

id objc_msgSend_setVolumeTo_forCategory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVolumeTo:forCategory:");
}

id objc_msgSend_setVolumeTo_forCategory_mode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVolumeTo:forCategory:mode:");
}

id objc_msgSend_setWaitForCommandTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWaitForCommandTimer:");
}

id objc_msgSend_setWaitingForCommand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWaitingForCommand:");
}

id objc_msgSend_setWallpaperSettingsFilePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWallpaperSettingsFilePath:");
}

id objc_msgSend_setWatchOS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWatchOS:");
}

id objc_msgSend_setWhitelistChecker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWhitelistChecker:");
}

id objc_msgSend_setWifiInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiInterface:");
}

id objc_msgSend_setWifiSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiSettings:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setWorkQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWorkQueue:");
}

id objc_msgSend_setWorkspace_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWorkspace:");
}

id objc_msgSend_setXpcConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setXpcConnection:");
}

id objc_msgSend_setXpcListener_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setXpcListener:");
}

id objc_msgSend_setXpc_conn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setXpc_conn:");
}

id objc_msgSend_setXpc_sema_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setXpc_sema:");
}

id objc_msgSend_set_forceReset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_forceReset:");
}

id objc_msgSend_set_timingDataOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_timingDataOptions:");
}

id objc_msgSend_settingsComponentNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "settingsComponentNames");
}

id objc_msgSend_settingsDict(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "settingsDict");
}

id objc_msgSend_settingsFilePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "settingsFilePath");
}

id objc_msgSend_setupAccounts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupAccounts:");
}

id objc_msgSend_setupCollectAppUsageDataTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupCollectAppUsageDataTimer");
}

id objc_msgSend_setupCoreAnalyticsLogsUploadTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupCoreAnalyticsLogsUploadTimer");
}

id objc_msgSend_setupDemoDeviceMetadataFolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDemoDeviceMetadataFolder");
}

id objc_msgSend_setupDummyPreferenceFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDummyPreferenceFile");
}

id objc_msgSend_setupFactoryDemoDeviceMetadataFolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupFactoryDemoDeviceMetadataFolder");
}

id objc_msgSend_setupIntraComponentDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupIntraComponentDependency:");
}

id objc_msgSend_setupOfflineModeEnrollmentRetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupOfflineModeEnrollmentRetry");
}

id objc_msgSend_setupRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupRequest:");
}

id objc_msgSend_setupSnapshotRevertTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupSnapshotRevertTimer");
}

id objc_msgSend_setupStoreCloseTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupStoreCloseTimer:");
}

id objc_msgSend_setupStoreHourSettingsExpirationTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupStoreHourSettingsExpirationTimer:");
}

id objc_msgSend_setupStoreHoursManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupStoreHoursManager");
}

id objc_msgSend_setupStoreOpenCloseTimers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupStoreOpenCloseTimers");
}

id objc_msgSend_setupStoreOpenTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupStoreOpenTimer:");
}

id objc_msgSend_setupTrustedPeerChangeNotificationObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupTrustedPeerChangeNotificationObserver");
}

id objc_msgSend_setupWorkFolderForBootTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupWorkFolderForBootTask");
}

id objc_msgSend_sfAirDropController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sfAirDropController");
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedAVSystemController");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedManagerForAllUsers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedManagerForAllUsers");
}

id objc_msgSend_sharedMonitorForDisplayType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedMonitorForDisplayType:");
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedPreferences");
}

id objc_msgSend_sharedService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedService");
}

id objc_msgSend_sharedStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedStore");
}

id objc_msgSend_sharedSystemScreenContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedSystemScreenContext");
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shortValue");
}

id objc_msgSend_shouldCleanUp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldCleanUp:");
}

id objc_msgSend_shouldForgetKnownNetworkUponUnlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldForgetKnownNetworkUponUnlock");
}

id objc_msgSend_shouldRestoreBluetoothPairingRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldRestoreBluetoothPairingRecord");
}

id objc_msgSend_shouldRestoreSystemContainer_WatchAndTV_shared_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldRestoreSystemContainer_WatchAndTV:shared:");
}

id objc_msgSend_shouldRestoreSystemContainer_iOS_shared_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldRestoreSystemContainer_iOS:shared:");
}

id objc_msgSend_shouldRunManifestRigorousTest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldRunManifestRigorousTest");
}

id objc_msgSend_shouldTryLocalHub_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldTryLocalHub:");
}

id objc_msgSend_showUI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "showUI");
}

id objc_msgSend_shutdownWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shutdownWithOptions:");
}

id objc_msgSend_signDataAndEncodeToBase64_withPrivateKey_status_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signDataAndEncodeToBase64:withPrivateKey:status:");
}

id objc_msgSend_signInToServices_usingContext_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signInToServices:usingContext:completion:");
}

id objc_msgSend_signOutOfAllServicesUsingContext_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signOutOfAllServicesUsingContext:completion:");
}

id objc_msgSend_signOutOfServices_usingContext_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signOutOfServices:usingContext:completion:");
}

id objc_msgSend_signal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signal");
}

id objc_msgSend_signalContentUpdateCompletion_andError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signalContentUpdateCompletion:andError:");
}

id objc_msgSend_signedManifest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signedManifest");
}

id objc_msgSend_signedManifestFromManifestData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signedManifestFromManifestData:");
}

id objc_msgSend_signpostId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signpostId");
}

id objc_msgSend_sinkWithBookmark_completion_receiveInput_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sinkWithBookmark:completion:receiveInput:");
}

id objc_msgSend_skipDescendants(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipDescendants");
}

id objc_msgSend_skipHashCheck(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipHashCheck");
}

id objc_msgSend_skipVerifyHashBeforeStaging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipVerifyHashBeforeStaging");
}

id objc_msgSend_skipped(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipped");
}

id objc_msgSend_skyEquivalentVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skyEquivalentVersion");
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_snapshotRevertFlagged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snapshotRevertFlagged");
}

id objc_msgSend_snapshotRevertTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snapshotRevertTimer");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ssid");
}

id objc_msgSend_stage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stage");
}

id objc_msgSend_stageDeviceForUpdateProcess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stageDeviceForUpdateProcess:");
}

id objc_msgSend_stagedOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stagedOperations");
}

id objc_msgSend_stagingRootPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stagingRootPath");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start");
}

id objc_msgSend_startBundleUpdateMonitor_inMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startBundleUpdateMonitor:inMode:");
}

id objc_msgSend_startBundleUpdateTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startBundleUpdateTimer");
}

id objc_msgSend_startDownloadWithOptions_withResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startDownloadWithOptions:withResult:");
}

id objc_msgSend_startEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startEvent");
}

id objc_msgSend_startFullScreenUIWith_allowCancel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startFullScreenUIWith:allowCancel:");
}

id objc_msgSend_startFullScreenUIWith_allowCancel_disableIdleTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startFullScreenUIWith:allowCancel:disableIdleTimer:");
}

id objc_msgSend_startMonitoringEventType_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringEventType:error:");
}

id objc_msgSend_startOSUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startOSUpdate");
}

id objc_msgSend_startObservingSyncSessionsWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startObservingSyncSessionsWithCompletion:");
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startPeriodicPing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startPeriodicPing");
}

id objc_msgSend_startPowerForegroundAppMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startPowerForegroundAppMonitoring");
}

id objc_msgSend_startProcessingAllComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startProcessingAllComponents");
}

id objc_msgSend_startSystemIdleDetection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startSystemIdleDetection");
}

id objc_msgSend_startWaitingForCommandTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startWaitingForCommandTimer");
}

id objc_msgSend_started(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "started");
}

id objc_msgSend_starting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "starting");
}

id objc_msgSend_stashSwitcherModelToPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stashSwitcherModelToPath:");
}

id objc_msgSend_stashSwitcherModelToPath_overwrite_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stashSwitcherModelToPath:overwrite:");
}

id objc_msgSend_stashWallpaperSettingsIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stashWallpaperSettingsIfNeeded");
}

id objc_msgSend_stashedStagingRootPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stashedStagingRootPath");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "state");
}

id objc_msgSend_statesForPredicate_withDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "statesForPredicate:withDescriptor:error:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "status");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "statusCode");
}

id objc_msgSend_statusFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "statusFlags");
}

id objc_msgSend_stopAllAppsExcept_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopAllAppsExcept:");
}

id objc_msgSend_stopBundleUpdateTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopBundleUpdateTimer");
}

id objc_msgSend_stopFullScreenUI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopFullScreenUI:");
}

id objc_msgSend_stopMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitor");
}

id objc_msgSend_stopMonitoringEventType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoringEventType:");
}

id objc_msgSend_stopSystemIdleDetection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopSystemIdleDetection");
}

id objc_msgSend_storeCloseTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeCloseTimer");
}

id objc_msgSend_storeDataBlob_withContainerIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeDataBlob:withContainerIdentifier:");
}

id objc_msgSend_storeDemoMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeDemoMode");
}

id objc_msgSend_storeHourRecords(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeHourRecords");
}

id objc_msgSend_storeId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeId");
}

id objc_msgSend_storeOpenTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeOpenTimer");
}

id objc_msgSend_storeSearch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeSearch:");
}

id objc_msgSend_storesSearched(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storesSearched");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByDeletingLastPathComponent");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByDeletingPathExtension");
}

id objc_msgSend_stringByExpandingTildeInPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByExpandingTildeInPath");
}

id objc_msgSend_stringByPaddingToLength_withString_startingAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByPaddingToLength:withString:startingAtIndex:");
}

id objc_msgSend_stringByRemovingPercentEncoding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByRemovingPercentEncoding");
}

id objc_msgSend_stringByReplacingCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByReplacingCharactersInRange:withString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByStandardizingPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByStandardizingPath");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromNSOperatingSystemVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromNSOperatingSystemVersion:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithCapacity:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "strongToStrongObjectsMapTable");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_submit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submit");
}

id objc_msgSend_subscribers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscribers");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_supplyBytes_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supplyBytes:withCompletionBlock:");
}

id objc_msgSend_supportedFeatureFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportedFeatureFlags");
}

id objc_msgSend_supportedRegions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportedRegions");
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspend");
}

id objc_msgSend_switchModeAfterCompletion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "switchModeAfterCompletion");
}

id objc_msgSend_switchModeImmediately_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "switchModeImmediately:");
}

id objc_msgSend_switchToBackupFolder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "switchToBackupFolder");
}

id objc_msgSend_sydneyEquivalentVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sydneyEquivalentVersion");
}

id objc_msgSend_syncAppsWithiCloud(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncAppsWithiCloud");
}

id objc_msgSend_syncSessionObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncSessionObserver");
}

id objc_msgSend_syncSessionState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncSessionState");
}

id objc_msgSend_syncSessionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncSessionType");
}

id objc_msgSend_syncState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncState");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "synchronize");
}

id objc_msgSend_synchronizeFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "synchronizeFile");
}

id objc_msgSend_systemAppPollingInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemAppPollingInterval");
}

id objc_msgSend_systemAppTimeoutInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemAppTimeoutInterval");
}

id objc_msgSend_systemIdleDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemIdleDuration");
}

id objc_msgSend_systemLanguages(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemLanguages");
}

id objc_msgSend_systemLibraryURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemLibraryURL");
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemTimeZone");
}

id objc_msgSend_systemUptime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemUptime");
}

id objc_msgSend_targetDeviceDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "targetDeviceDelegate");
}

id objc_msgSend_targetFileWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "targetFileWithPath:");
}

id objc_msgSend_task(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "task");
}

id objc_msgSend_taskInfoFromCommandRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskInfoFromCommandRequest:");
}

id objc_msgSend_taskManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskManager");
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskState");
}

id objc_msgSend_tccOwnedResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tccOwnedResources");
}

id objc_msgSend_terminateApp_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminateApp:outError:");
}

id objc_msgSend_terminateApplication_forReason_andReport_withDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminateApplication:forReason:andReport:withDescription:");
}

id objc_msgSend_terminateConfigurationApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminateConfigurationApp");
}

id objc_msgSend_terminationStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminationStatus");
}

id objc_msgSend_testFileHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testFileHandle");
}

id objc_msgSend_testQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testQueue");
}

id objc_msgSend_testScripts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testScripts");
}

id objc_msgSend_testScriptsLastModified(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testScriptsLastModified");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "text");
}

id objc_msgSend_timeIntervalReservedForCleanup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalReservedForCleanup");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeRange_subsumes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeRange:subsumes:");
}

id objc_msgSend_timeShowingFatalError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeShowingFatalError");
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_timeoutTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeoutTimer");
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timer");
}

id objc_msgSend_timerForFatalError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timerForFatalError");
}

id objc_msgSend_toString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toString");
}

id objc_msgSend_toggleSEPDemoModeOnManagedPreferencesChange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toggleSEPDemoModeOnManagedPreferencesChange");
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "topic");
}

id objc_msgSend_totalBytesReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalBytesReceived");
}

id objc_msgSend_totalBytesSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalBytesSent");
}

id objc_msgSend_totalComponents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalComponents");
}

id objc_msgSend_totalFileSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalFileSize");
}

id objc_msgSend_transactionMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transactionMetrics");
}

id objc_msgSend_trueTone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trueTone");
}

id objc_msgSend_trustDAServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustDAServer:");
}

id objc_msgSend_trustServer_isRedirect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustServer:isRedirect:");
}

id objc_msgSend_trustServer_withRootCA_withHostName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustServer:withRootCA:withHostName:");
}

id objc_msgSend_trustServerWithApplePKI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustServerWithApplePKI:");
}

id objc_msgSend_trustServerWithAxinoePKI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustServerWithAxinoePKI:");
}

id objc_msgSend_tryCachingHub(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tryCachingHub");
}

id objc_msgSend_tryPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tryPassword:");
}

id objc_msgSend_tryScheduleDefaultEnrollmentRetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tryScheduleDefaultEnrollmentRetry");
}

id objc_msgSend_ttl(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ttl");
}

id objc_msgSend_turnOnDemoMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "turnOnDemoMode");
}

id objc_msgSend_turnPowerOnWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "turnPowerOnWithError:");
}

id objc_msgSend_tvOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tvOS");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_typeOfDemoDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "typeOfDemoDevice");
}

id objc_msgSend_udid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "udid");
}

id objc_msgSend_uiHelperQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uiHelperQueue");
}

id objc_msgSend_uid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uid");
}

id objc_msgSend_unarchiveTopLevelObjectWithData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchiveTopLevelObjectWithData:error:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unenroll_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unenroll:");
}

id objc_msgSend_unenrollWithObliteration_callUnregister_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unenrollWithObliteration:callUnregister:");
}

id objc_msgSend_unenrollWithObliteration_preserveESim_callUnregister_preserveDDLFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unenrollWithObliteration:preserveESim:callUnregister:preserveDDLFlag:");
}

id objc_msgSend_uninstallAllDemoBundleConfigurationProfiles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallAllDemoBundleConfigurationProfiles");
}

id objc_msgSend_uninstallAppWithBundleID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallAppWithBundleID:error:");
}

id objc_msgSend_uninstallAppWithBundleID_requestUserConfirmation_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallAppWithBundleID:requestUserConfirmation:completion:");
}

id objc_msgSend_uninstallConfigurationProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallConfigurationProfile:");
}

id objc_msgSend_uninstallConfigurationProfileIfNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallConfigurationProfileIfNeeded:");
}

id objc_msgSend_uninstallProvisioningProfileByUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallProvisioningProfileByUUID:");
}

id objc_msgSend_uninstallQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallQueue");
}

id objc_msgSend_uninstallRestrictionsConfigurationProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallRestrictionsConfigurationProfile");
}

id objc_msgSend_unionOrderedSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unionOrderedSet:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_uniqueName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueName");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unlock");
}

id objc_msgSend_unlockDeviceKeybagIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unlockDeviceKeybagIfNeeded");
}

id objc_msgSend_unlockSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unlockSnapshot");
}

id objc_msgSend_unlockWithCondition_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unlockWithCondition:");
}

id objc_msgSend_unregisterCAHeartbeatActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterCAHeartbeatActivity");
}

id objc_msgSend_unregisterObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterObserver");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_updateComponentProgress_withResult_withAdditionalInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateComponentProgress:withResult:withAdditionalInfo:");
}

id objc_msgSend_updateContentWithDeadline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateContentWithDeadline:");
}

id objc_msgSend_updateDemoContent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDemoContent");
}

id objc_msgSend_updateDeviceNameForPairedPeerOfUUID_withNewName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDeviceNameForPairedPeerOfUUID:withNewName:");
}

id objc_msgSend_updateDeviceOptions_skipImutableKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDeviceOptions:skipImutableKeys:");
}

id objc_msgSend_updateDownloadedContent_fromSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDownloadedContent:fromSource:");
}

id objc_msgSend_updateFileDownloadCredentialFromManifestInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFileDownloadCredentialFromManifestInfo:");
}

id objc_msgSend_updateHubHostNameAndPort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHubHostNameAndPort");
}

id objc_msgSend_updateIsInBubble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateIsInBubble:");
}

id objc_msgSend_updateItemForAttributes_withData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateItemForAttributes:withData:");
}

id objc_msgSend_updateLocalHubReachability_withRequest_andResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLocalHubReachability:withRequest:andResponse:");
}

id objc_msgSend_updateManifestInfo_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateManifestInfo:error:");
}

id objc_msgSend_updatePairedDeviceInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePairedDeviceInfo");
}

id objc_msgSend_updateQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateQueue");
}

id objc_msgSend_updateSignedManifest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSignedManifest");
}

id objc_msgSend_updateStage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateStage:");
}

id objc_msgSend_updateStoreHours_lastSettingsUpdatedDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateStoreHours:lastSettingsUpdatedDate:");
}

id objc_msgSend_updateType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateType");
}

id objc_msgSend_updateWithResponseFromGetFileDownloadCredentials_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWithResponseFromGetFileDownloadCredentials:");
}

id objc_msgSend_updateWithResponseFromGetManifestInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWithResponseFromGetManifestInfo:");
}

id objc_msgSend_updatedSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatedSession");
}

id objc_msgSend_uploadCoreAnalyticsLogs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadCoreAnalyticsLogs");
}

id objc_msgSend_uploadDemoLogsIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadDemoLogsIfNeeded");
}

id objc_msgSend_uploadDemoLogsTo_HttpHeaders_andMaxAttempts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadDemoLogsTo:HttpHeaders:andMaxAttempts:");
}

id objc_msgSend_uploadInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadInProgress");
}

id objc_msgSend_uploadMobileStoreDemoLogs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadMobileStoreDemoLogs:");
}

id objc_msgSend_uploadTaskWithRequest_fromData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadTaskWithRequest:fromData:");
}

id objc_msgSend_uploadTaskWithRequest_fromFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadTaskWithRequest:fromFile:");
}

id objc_msgSend_uploadTimingData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadTimingData");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_urlOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "urlOverride");
}

id objc_msgSend_urlSchema(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "urlSchema");
}

id objc_msgSend_useBAAAuthentication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useBAAAuthentication");
}

id objc_msgSend_useDefaultStoreHours(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useDefaultStoreHours");
}

id objc_msgSend_useDiffPatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useDiffPatch");
}

id objc_msgSend_useFactoryDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useFactoryDefault");
}

id objc_msgSend_userDownloadPolicyForDescriptor_existingPolicy_allowCellularOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userDownloadPolicyForDescriptor:existingPolicy:allowCellularOverride:");
}

id objc_msgSend_userHomePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userHomePath");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userVolumeCacheFolderPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userVolumeCacheFolderPath");
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "username");
}

id objc_msgSend_validateISTSignedApp_manifest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateISTSignedApp:manifest:");
}

id objc_msgSend_validateInstallationOrder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateInstallationOrder");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "value");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForExtendedAttributesKey_forPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForExtendedAttributesKey:forPath:");
}

id objc_msgSend_valueForHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForHTTPHeaderField:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_valueWithPointer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueWithPointer:");
}

id objc_msgSend_verifyDeviceEligibility_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifyDeviceEligibility:error:");
}

id objc_msgSend_verifyExtensionIsRunning(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifyExtensionIsRunning");
}

id objc_msgSend_verifyFileHash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifyFileHash");
}

id objc_msgSend_verifyHashBeforeStaging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifyHashBeforeStaging");
}

id objc_msgSend_verifyManifestSignature_forDataSectionKeys_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifyManifestSignature:forDataSectionKeys:withOptions:");
}

id objc_msgSend_visibleApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "visibleApps");
}

id objc_msgSend_volume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "volume");
}

id objc_msgSend_wait(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wait");
}

id objc_msgSend_waitForBuddy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForBuddy:");
}

id objc_msgSend_waitForBuddyWithTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForBuddyWithTimeout");
}

id objc_msgSend_waitForCommandTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForCommandTimer");
}

id objc_msgSend_waitForNetworkReachability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForNetworkReachability");
}

id objc_msgSend_waitForPricing_forReboot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForPricing:forReboot:");
}

id objc_msgSend_waitForProcessingCompletionTillDate_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForProcessingCompletionTillDate:outError:");
}

id objc_msgSend_waitForWiFiInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForWiFiInterface");
}

id objc_msgSend_waitUntilClear(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilClear");
}

id objc_msgSend_waitUntilDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilDate:");
}

id objc_msgSend_waitUntilExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilExit");
}

id objc_msgSend_waitingForCommand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitingForCommand");
}

id objc_msgSend_wallpaperSettingsFilePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wallpaperSettingsFilePath");
}

id objc_msgSend_watchOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchOS");
}

id objc_msgSend_whitelistChecker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "whitelistChecker");
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "whitespaceCharacterSet");
}

id objc_msgSend_wifiInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiInterface");
}

id objc_msgSend_wifiSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSettings");
}

id objc_msgSend_windwardAppInstallationStarted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "windwardAppInstallationStarted");
}

id objc_msgSend_workQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "workQueue");
}

id objc_msgSend_workspace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "workspace");
}

id objc_msgSend_writeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeData:");
}

id objc_msgSend_writeData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeData:error:");
}

id objc_msgSend_writeFileHeaders_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeFileHeaders:");
}

id objc_msgSend_writeNvram_withValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeNvram:withValue:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_writeToURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:error:");
}

id objc_msgSend_xpcArrayFromArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "xpcArrayFromArray");
}

id objc_msgSend_xpcConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "xpcConnection");
}

id objc_msgSend_xpcListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "xpcListener");
}

id objc_msgSend_xpc_conn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "xpc_conn");
}

id objc_msgSend_xpc_sema(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "xpc_sema");
}

id objc_msgSend_year(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "year");
}
